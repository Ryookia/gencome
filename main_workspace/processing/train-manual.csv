"id"$"get"$"header_comment"$"whole_line_comment"$"no_words"$"no_chars"$"contents"
"CollectionUtils.java:1"$0$0$0$1$2$"/*"
"CollectionUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"CollectionUtils.java:3"$0$0$0$1$2$" *"
"CollectionUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"CollectionUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"CollectionUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"CollectionUtils.java:7"$0$0$0$1$2$" *"
"CollectionUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"CollectionUtils.java:9"$0$0$0$1$2$" *"
"CollectionUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"CollectionUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"CollectionUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"CollectionUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"CollectionUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"CollectionUtils.java:15"$0$0$0$1$3$" */"
"CollectionUtils.java:16"$0$0$0$0$0$""
"CollectionUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"CollectionUtils.java:18"$0$0$0$0$0$""
"CollectionUtils.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"CollectionUtils.java:20"$0$0$0$2$27$"import java.util.ArrayList;"
"CollectionUtils.java:21"$0$0$0$2$24$"import java.util.Arrays;"
"CollectionUtils.java:22"$0$0$0$2$28$"import java.util.Collection;"
"CollectionUtils.java:23"$0$0$0$2$29$"import java.util.Collections;"
"CollectionUtils.java:24"$0$0$0$2$29$"import java.util.Enumeration;"
"CollectionUtils.java:25"$0$0$0$2$26$"import java.util.Iterator;"
"CollectionUtils.java:26"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"CollectionUtils.java:27"$0$0$0$2$28$"import java.util.LinkedList;"
"CollectionUtils.java:28"$0$0$0$2$22$"import java.util.List;"
"CollectionUtils.java:29"$0$0$0$2$21$"import java.util.Map;"
"CollectionUtils.java:30"$0$0$0$2$28$"import java.util.Properties;"
"CollectionUtils.java:31"$0$0$0$2$21$"import java.util.Set;"
"CollectionUtils.java:32"$0$0$0$2$27$"import java.util.SortedSet;"
"CollectionUtils.java:33"$0$0$0$0$0$""
"CollectionUtils.java:34"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"CollectionUtils.java:35"$0$0$0$0$0$""
"CollectionUtils.java:36"$0$0$0$1$3$"/**"
"CollectionUtils.java:37"$0$0$0$5$44$" * Miscellaneous collection utility methods."
"CollectionUtils.java:38"$0$0$0$8$48$" * Mainly for internal use within the framework."
"CollectionUtils.java:39"$0$0$0$1$2$" *"
"CollectionUtils.java:40"$0$0$0$4$26$" * @author Juergen Hoeller"
"CollectionUtils.java:41"$0$0$0$4$21$" * @author Rob Harrop"
"CollectionUtils.java:42"$0$0$0$4$24$" * @author Arjen Poutsma"
"CollectionUtils.java:43"$0$0$0$3$15$" * @since 1.1.3"
"CollectionUtils.java:44"$0$0$0$1$3$" */"
"CollectionUtils.java:45"$0$0$0$5$39$"public abstract class CollectionUtils {"
"CollectionUtils.java:46"$0$0$0$0$0$""
"CollectionUtils.java:47"$0$0$0$1$4$"	/**"
"CollectionUtils.java:48"$0$0$0$13$76$"	 * Return {@code true} if the supplied Collection is {@code null} or empty."
"CollectionUtils.java:49"$0$0$0$5$36$"	 * Otherwise, return {@code false}."
"CollectionUtils.java:50"$0$0$0$7$45$"	 * @param collection the Collection to check"
"CollectionUtils.java:51"$0$0$0$8$49$"	 * @return whether the given Collection is empty"
"CollectionUtils.java:52"$0$0$0$1$4$"	 */"
"CollectionUtils.java:53"$0$0$0$7$68$"	public static boolean isEmpty(@Nullable Collection<?> collection) {"
"CollectionUtils.java:54"$0$0$0$6$54$"		return (collection == null || collection.isEmpty());"
"CollectionUtils.java:55"$0$0$0$1$2$"	}"
"CollectionUtils.java:56"$0$0$0$0$0$""
"CollectionUtils.java:57"$0$0$0$1$4$"	/**"
"CollectionUtils.java:58"$0$0$0$13$69$"	 * Return {@code true} if the supplied Map is {@code null} or empty."
"CollectionUtils.java:59"$0$0$0$5$36$"	 * Otherwise, return {@code false}."
"CollectionUtils.java:60"$0$0$0$7$31$"	 * @param map the Map to check"
"CollectionUtils.java:61"$0$0$0$8$42$"	 * @return whether the given Map is empty"
"CollectionUtils.java:62"$0$0$0$1$4$"	 */"
"CollectionUtils.java:63"$0$0$0$8$57$"	public static boolean isEmpty(@Nullable Map<?, ?> map) {"
"CollectionUtils.java:64"$0$0$0$6$40$"		return (map == null || map.isEmpty());"
"CollectionUtils.java:65"$0$0$0$1$2$"	}"
"CollectionUtils.java:66"$0$0$0$0$0$""
"CollectionUtils.java:67"$0$0$0$1$4$"	/**"
"CollectionUtils.java:68"$1$0$0$13$76$"	 * Convert the supplied array into a List. A primitive array gets converted"
"CollectionUtils.java:69"$0$0$0$9$48$"	 * into a List of the appropriate wrapper type."
"CollectionUtils.java:70"$0$0$0$9$79$"	 * <p><b>NOTE:</b> Generally prefer the standard {@link Arrays#asList} method."
"CollectionUtils.java:71"$0$0$0$14$81$"	 * This {@code arrayToList} method is just meant to deal with an incoming Object"
"CollectionUtils.java:72"$0$0$0$14$76$"	 * value that might be an {@code Object[]} or a primitive array at runtime."
"CollectionUtils.java:73"$0$0$0$13$70$"	 * <p>A {@code null} source value will be converted to an empty List."
"CollectionUtils.java:74"$0$0$0$7$51$"	 * @param source the (potentially primitive) array"
"CollectionUtils.java:75"$0$0$0$6$37$"	 * @return the converted List result"
"CollectionUtils.java:76"$0$0$0$3$42$"	 * @see ObjectUtils#toObjectArray(Object)"
"CollectionUtils.java:77"$0$0$0$3$32$"	 * @see Arrays#asList(Object[])"
"CollectionUtils.java:78"$0$0$0$1$4$"	 */"
"CollectionUtils.java:79"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"CollectionUtils.java:80"$0$0$0$7$58$"	public static List arrayToList(@Nullable Object source) {"
"CollectionUtils.java:81"$0$0$0$2$58$"		return Arrays.asList(ObjectUtils.toObjectArray(source));"
"CollectionUtils.java:82"$0$0$0$1$2$"	}"
"CollectionUtils.java:83"$0$0$0$0$0$""
"CollectionUtils.java:84"$0$0$0$1$4$"	/**"
"CollectionUtils.java:85"$0$0$0$9$52$"	 * Merge the given array into the given Collection."
"CollectionUtils.java:86"$0$0$0$11$57$"	 * @param array the array to merge (may be {@code null})"
"CollectionUtils.java:87"$1$0$0$11$67$"	 * @param collection the target Collection to merge the array into"
"CollectionUtils.java:88"$0$0$0$1$4$"	 */"
"CollectionUtils.java:89"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CollectionUtils.java:90"$0$0$0$10$100$"	public static <E> void mergeArrayIntoCollection(@Nullable Object array, Collection<E> collection) {"
"CollectionUtils.java:91"$0$0$0$4$50$"		Object[] arr = ObjectUtils.toObjectArray(array);"
"CollectionUtils.java:92"$0$0$0$6$27$"		for (Object elem : arr) {"
"CollectionUtils.java:93"$0$0$0$2$28$"			collection.add((E) elem);"
"CollectionUtils.java:94"$0$0$0$1$3$"		}"
"CollectionUtils.java:95"$0$0$0$1$2$"	}"
"CollectionUtils.java:96"$0$0$0$0$0$""
"CollectionUtils.java:97"$0$0$0$1$4$"	/**"
"CollectionUtils.java:98"$0$0$0$10$59$"	 * Merge the given Properties instance into the given Map,"
"CollectionUtils.java:99"$0$0$0$7$50$"	 * copying all properties (key-value pairs) over."
"CollectionUtils.java:100"$0$0$0$7$60$"	 * <p>Uses {@code Properties.propertyNames()} to even catch"
"CollectionUtils.java:101"$0$0$0$9$68$"	 * default properties linked into the original Properties instance."
"CollectionUtils.java:102"$0$0$0$12$71$"	 * @param props the Properties instance to merge (may be {@code null})"
"CollectionUtils.java:103"$1$0$0$11$58$"	 * @param map the target Map to merge the properties into"
"CollectionUtils.java:104"$0$0$0$1$4$"	 */"
"CollectionUtils.java:105"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CollectionUtils.java:106"$0$0$0$12$94$"	public static <K, V> void mergePropertiesIntoMap(@Nullable Properties props, Map<K, V> map) {"
"CollectionUtils.java:107"$0$0$0$5$22$"		if (props != null) {"
"CollectionUtils.java:108"$0$0$0$7$75$"			for (Enumeration<?> en = props.propertyNames(); en.hasMoreElements();) {"
"CollectionUtils.java:109"$0$0$0$5$43$"				String key = (String) en.nextElement();"
"CollectionUtils.java:110"$1$0$0$4$34$"				Object value = props.get(key);"
"CollectionUtils.java:111"$0$0$0$5$24$"				if (value == null) {"
"CollectionUtils.java:112"$0$0$1$9$73$"					// Allow for defaults fallback or potentially overridden accessor..."
"CollectionUtils.java:113"$1$0$0$3$36$"					value = props.getProperty(key);"
"CollectionUtils.java:114"$0$0$0$1$5$"				}"
"CollectionUtils.java:115"$0$0$0$4$32$"				map.put((K) key, (V) value);"
"CollectionUtils.java:116"$0$0$0$1$4$"			}"
"CollectionUtils.java:117"$0$0$0$1$3$"		}"
"CollectionUtils.java:118"$0$0$0$1$2$"	}"
"CollectionUtils.java:119"$0$0$0$0$0$""
"CollectionUtils.java:120"$0$0$0$0$0$""
"CollectionUtils.java:121"$0$0$0$1$4$"	/**"
"CollectionUtils.java:122"$0$0$0$10$64$"	 * Check whether the given Iterator contains the given element."
"CollectionUtils.java:123"$0$0$0$7$41$"	 * @param iterator the Iterator to check"
"CollectionUtils.java:124"$0$0$0$8$42$"	 * @param element the element to look for"
"CollectionUtils.java:125"$0$0$0$9$58$"	 * @return {@code true} if found, {@code false} otherwise"
"CollectionUtils.java:126"$0$0$0$1$4$"	 */"
"CollectionUtils.java:127"$0$0$0$9$81$"	public static boolean contains(@Nullable Iterator<?> iterator, Object element) {"
"CollectionUtils.java:128"$0$0$0$5$25$"		if (iterator != null) {"
"CollectionUtils.java:129"$0$0$0$3$31$"			while (iterator.hasNext()) {"
"CollectionUtils.java:130"$0$0$0$4$39$"				Object candidate = iterator.next();"
"CollectionUtils.java:131"$0$0$0$4$57$"				if (ObjectUtils.nullSafeEquals(candidate, element)) {"
"CollectionUtils.java:132"$0$0$0$2$17$"					return true;"
"CollectionUtils.java:133"$0$0$0$1$5$"				}"
"CollectionUtils.java:134"$0$0$0$1$4$"			}"
"CollectionUtils.java:135"$0$0$0$1$3$"		}"
"CollectionUtils.java:136"$0$0$0$2$15$"		return false;"
"CollectionUtils.java:137"$0$0$0$1$2$"	}"
"CollectionUtils.java:138"$0$0$0$0$0$""
"CollectionUtils.java:139"$0$0$0$1$4$"	/**"
"CollectionUtils.java:140"$0$0$0$10$67$"	 * Check whether the given Enumeration contains the given element."
"CollectionUtils.java:141"$0$0$0$7$47$"	 * @param enumeration the Enumeration to check"
"CollectionUtils.java:142"$0$0$0$8$42$"	 * @param element the element to look for"
"CollectionUtils.java:143"$0$0$0$9$58$"	 * @return {@code true} if found, {@code false} otherwise"
"CollectionUtils.java:144"$0$0$0$1$4$"	 */"
"CollectionUtils.java:145"$0$0$0$9$87$"	public static boolean contains(@Nullable Enumeration<?> enumeration, Object element) {"
"CollectionUtils.java:146"$0$0$0$5$28$"		if (enumeration != null) {"
"CollectionUtils.java:147"$0$0$0$3$42$"			while (enumeration.hasMoreElements()) {"
"CollectionUtils.java:148"$0$0$0$4$49$"				Object candidate = enumeration.nextElement();"
"CollectionUtils.java:149"$0$0$0$4$57$"				if (ObjectUtils.nullSafeEquals(candidate, element)) {"
"CollectionUtils.java:150"$0$0$0$2$17$"					return true;"
"CollectionUtils.java:151"$0$0$0$1$5$"				}"
"CollectionUtils.java:152"$0$0$0$1$4$"			}"
"CollectionUtils.java:153"$0$0$0$1$3$"		}"
"CollectionUtils.java:154"$0$0$0$2$15$"		return false;"
"CollectionUtils.java:155"$0$0$0$1$2$"	}"
"CollectionUtils.java:156"$0$0$0$0$0$""
"CollectionUtils.java:157"$0$0$0$1$4$"	/**"
"CollectionUtils.java:158"$0$0$0$11$75$"	 * Check whether the given Collection contains the given element instance."
"CollectionUtils.java:159"$0$0$0$11$71$"	 * <p>Enforces the given instance to be present, rather than returning"
"CollectionUtils.java:160"$0$0$0$9$46$"	 * {@code true} for an equal element as well."
"CollectionUtils.java:161"$0$0$0$7$45$"	 * @param collection the Collection to check"
"CollectionUtils.java:162"$0$0$0$8$42$"	 * @param element the element to look for"
"CollectionUtils.java:163"$0$0$0$9$58$"	 * @return {@code true} if found, {@code false} otherwise"
"CollectionUtils.java:164"$0$0$0$1$4$"	 */"
"CollectionUtils.java:165"$0$0$0$9$93$"	public static boolean containsInstance(@Nullable Collection<?> collection, Object element) {"
"CollectionUtils.java:166"$0$0$0$5$27$"		if (collection != null) {"
"CollectionUtils.java:167"$0$0$0$6$40$"			for (Object candidate : collection) {"
"CollectionUtils.java:168"$0$0$0$5$31$"				if (candidate == element) {"
"CollectionUtils.java:169"$0$0$0$2$17$"					return true;"
"CollectionUtils.java:170"$0$0$0$1$5$"				}"
"CollectionUtils.java:171"$0$0$0$1$4$"			}"
"CollectionUtils.java:172"$0$0$0$1$3$"		}"
"CollectionUtils.java:173"$0$0$0$2$15$"		return false;"
"CollectionUtils.java:174"$0$0$0$1$2$"	}"
"CollectionUtils.java:175"$0$0$0$0$0$""
"CollectionUtils.java:176"$0$0$0$1$4$"	/**"
"CollectionUtils.java:177"$0$0$0$11$65$"	 * Return {@code true} if any element in '{@code candidates}' is"
"CollectionUtils.java:178"$0$0$0$9$67$"	 * contained in '{@code source}'; otherwise returns {@code false}."
"CollectionUtils.java:179"$0$0$0$6$39$"	 * @param source the source Collection"
"CollectionUtils.java:180"$0$0$0$8$50$"	 * @param candidates the candidates to search for"
"CollectionUtils.java:181"$0$0$0$10$56$"	 * @return whether any of the candidates has been found"
"CollectionUtils.java:182"$0$0$0$1$4$"	 */"
"CollectionUtils.java:183"$0$0$0$8$84$"	public static boolean containsAny(Collection<?> source, Collection<?> candidates) {"
"CollectionUtils.java:184"$0$0$0$5$52$"		return findFirstMatch(source, candidates) != null;"
"CollectionUtils.java:185"$0$0$0$1$2$"	}"
"CollectionUtils.java:186"$0$0$0$0$0$""
"CollectionUtils.java:187"$0$0$0$1$4$"	/**"
"CollectionUtils.java:188"$0$0$0$12$73$"	 * Return the first element in '{@code candidates}' that is contained in"
"CollectionUtils.java:189"$0$0$0$12$73$"	 * '{@code source}'. If no element in '{@code candidates}' is present in"
"CollectionUtils.java:190"$0$0$0$9$61$"	 * '{@code source}' returns {@code null}. Iteration order is"
"CollectionUtils.java:191"$0$0$0$5$47$"	 * {@link Collection} implementation specific."
"CollectionUtils.java:192"$0$0$0$6$39$"	 * @param source the source Collection"
"CollectionUtils.java:193"$0$0$0$8$50$"	 * @param candidates the candidates to search for"
"CollectionUtils.java:194"$0$0$0$12$66$"	 * @return the first present object, or {@code null} if not found"
"CollectionUtils.java:195"$0$0$0$1$4$"	 */"
"CollectionUtils.java:196"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CollectionUtils.java:197"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:198"$0$0$0$9$85$"	public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidates) {"
"CollectionUtils.java:199"$0$0$0$5$47$"		if (isEmpty(source) || isEmpty(candidates)) {"
"CollectionUtils.java:200"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:201"$0$0$0$1$3$"		}"
"CollectionUtils.java:202"$0$0$0$6$39$"		for (Object candidate : candidates) {"
"CollectionUtils.java:203"$0$0$0$3$36$"			if (source.contains(candidate)) {"
"CollectionUtils.java:204"$0$0$0$3$25$"				return (E) candidate;"
"CollectionUtils.java:205"$0$0$0$1$4$"			}"
"CollectionUtils.java:206"$0$0$0$1$3$"		}"
"CollectionUtils.java:207"$0$0$0$2$14$"		return null;"
"CollectionUtils.java:208"$0$0$0$1$2$"	}"
"CollectionUtils.java:209"$0$0$0$0$0$""
"CollectionUtils.java:210"$0$0$0$1$4$"	/**"
"CollectionUtils.java:211"$0$0$0$13$66$"	 * Find a single value of the given type in the given Collection."
"CollectionUtils.java:212"$0$0$0$7$46$"	 * @param collection the Collection to search"
"CollectionUtils.java:213"$0$0$0$8$36$"	 * @param type the type to look for"
"CollectionUtils.java:214"$0$0$0$15$70$"	 * @return a value of the given type found if there is a clear match,"
"CollectionUtils.java:215"$0$0$0$13$61$"	 * or {@code null} if none or more than one such value found"
"CollectionUtils.java:216"$0$0$0$1$4$"	 */"
"CollectionUtils.java:217"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CollectionUtils.java:218"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:219"$0$0$0$10$89$"	public static <T> T findValueOfType(Collection<?> collection, @Nullable Class<T> type) {"
"CollectionUtils.java:220"$0$0$0$3$28$"		if (isEmpty(collection)) {"
"CollectionUtils.java:221"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:222"$0$0$0$1$3$"		}"
"CollectionUtils.java:223"$0$0$0$4$17$"		T value = null;"
"CollectionUtils.java:224"$0$0$0$6$37$"		for (Object element : collection) {"
"CollectionUtils.java:225"$0$0$0$7$50$"			if (type == null || type.isInstance(element)) {"
"CollectionUtils.java:226"$0$0$0$5$24$"				if (value != null) {"
"CollectionUtils.java:227"$0$0$1$10$59$"					// More than one value found... no clear single value."
"CollectionUtils.java:228"$0$0$0$2$17$"					return null;"
"CollectionUtils.java:229"$0$0$0$1$5$"				}"
"CollectionUtils.java:230"$0$0$0$4$24$"				value = (T) element;"
"CollectionUtils.java:231"$0$0$0$1$4$"			}"
"CollectionUtils.java:232"$0$0$0$1$3$"		}"
"CollectionUtils.java:233"$0$0$0$2$15$"		return value;"
"CollectionUtils.java:234"$0$0$0$1$2$"	}"
"CollectionUtils.java:235"$0$0$0$0$0$""
"CollectionUtils.java:236"$0$0$0$1$4$"	/**"
"CollectionUtils.java:237"$0$0$0$15$74$"	 * Find a single value of one of the given types in the given Collection:"
"CollectionUtils.java:238"$0$0$0$12$64$"	 * searching the Collection for a value of the first type, then"
"CollectionUtils.java:239"$0$0$0$10$50$"	 * searching for a value of the second type, etc."
"CollectionUtils.java:240"$0$0$0$7$46$"	 * @param collection the collection to search"
"CollectionUtils.java:241"$0$0$0$11$60$"	 * @param types the types to look for, in prioritized order"
"CollectionUtils.java:242"$0$0$0$17$78$"	 * @return a value of one of the given types found if there is a clear match,"
"CollectionUtils.java:243"$0$0$0$13$61$"	 * or {@code null} if none or more than one such value found"
"CollectionUtils.java:244"$0$0$0$1$4$"	 */"
"CollectionUtils.java:245"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:246"$0$0$0$8$83$"	public static Object findValueOfType(Collection<?> collection, Class<?>[] types) {"
"CollectionUtils.java:247"$0$0$0$5$58$"		if (isEmpty(collection) || ObjectUtils.isEmpty(types)) {"
"CollectionUtils.java:248"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:249"$0$0$0$1$3$"		}"
"CollectionUtils.java:250"$0$0$0$6$31$"		for (Class<?> type : types) {"
"CollectionUtils.java:251"$0$0$0$5$52$"			Object value = findValueOfType(collection, type);"
"CollectionUtils.java:252"$0$0$0$5$23$"			if (value != null) {"
"CollectionUtils.java:253"$0$0$0$2$17$"				return value;"
"CollectionUtils.java:254"$0$0$0$1$4$"			}"
"CollectionUtils.java:255"$0$0$0$1$3$"		}"
"CollectionUtils.java:256"$0$0$0$2$14$"		return null;"
"CollectionUtils.java:257"$0$0$0$1$2$"	}"
"CollectionUtils.java:258"$0$0$0$0$0$""
"CollectionUtils.java:259"$0$0$0$1$4$"	/**"
"CollectionUtils.java:260"$0$0$0$12$80$"	 * Determine whether the given Collection only contains a single unique object."
"CollectionUtils.java:261"$0$0$0$7$45$"	 * @param collection the Collection to check"
"CollectionUtils.java:262"$0$0$0$12$73$"	 * @return {@code true} if the collection contains a single reference or"
"CollectionUtils.java:263"$0$0$0$10$69$"	 * multiple references to the same instance, {@code false} otherwise"
"CollectionUtils.java:264"$0$0$0$1$4$"	 */"
"CollectionUtils.java:265"$0$0$0$6$66$"	public static boolean hasUniqueObject(Collection<?> collection) {"
"CollectionUtils.java:266"$0$0$0$3$28$"		if (isEmpty(collection)) {"
"CollectionUtils.java:267"$0$0$0$2$16$"			return false;"
"CollectionUtils.java:268"$0$0$0$1$3$"		}"
"CollectionUtils.java:269"$0$0$0$4$31$"		boolean hasCandidate = false;"
"CollectionUtils.java:270"$0$0$0$4$26$"		Object candidate = null;"
"CollectionUtils.java:271"$0$0$0$6$34$"		for (Object elem : collection) {"
"CollectionUtils.java:272"$0$0$0$3$23$"			if (!hasCandidate) {"
"CollectionUtils.java:273"$0$0$0$3$24$"				hasCandidate = true;"
"CollectionUtils.java:274"$0$0$0$3$21$"				candidate = elem;"
"CollectionUtils.java:275"$0$0$0$1$4$"			}"
"CollectionUtils.java:276"$0$0$0$6$32$"			else if (candidate != elem) {"
"CollectionUtils.java:277"$0$0$0$2$17$"				return false;"
"CollectionUtils.java:278"$0$0$0$1$4$"			}"
"CollectionUtils.java:279"$0$0$0$1$3$"		}"
"CollectionUtils.java:280"$0$0$0$2$14$"		return true;"
"CollectionUtils.java:281"$0$0$0$1$2$"	}"
"CollectionUtils.java:282"$0$0$0$0$0$""
"CollectionUtils.java:283"$0$0$0$1$4$"	/**"
"CollectionUtils.java:284"$0$0$0$12$65$"	 * Find the common element type of the given Collection, if any."
"CollectionUtils.java:285"$0$0$0$7$45$"	 * @param collection the Collection to check"
"CollectionUtils.java:286"$0$0$0$12$64$"	 * @return the common element type, or {@code null} if no clear"
"CollectionUtils.java:287"$0$0$0$11$60$"	 * common type has been found (or the collection was empty)"
"CollectionUtils.java:288"$0$0$0$1$4$"	 */"
"CollectionUtils.java:289"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:290"$0$0$0$6$73$"	public static Class<?> findCommonElementType(Collection<?> collection) {"
"CollectionUtils.java:291"$0$0$0$3$28$"		if (isEmpty(collection)) {"
"CollectionUtils.java:292"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:293"$0$0$0$1$3$"		}"
"CollectionUtils.java:294"$0$0$0$4$28$"		Class<?> candidate = null;"
"CollectionUtils.java:295"$0$0$0$6$33$"		for (Object val : collection) {"
"CollectionUtils.java:296"$0$0$0$5$21$"			if (val != null) {"
"CollectionUtils.java:297"$0$0$0$5$28$"				if (candidate == null) {"
"CollectionUtils.java:298"$1$0$0$3$32$"					candidate = val.getClass();"
"CollectionUtils.java:299"$0$0$0$1$5$"				}"
"CollectionUtils.java:300"$1$0$0$6$43$"				else if (candidate != val.getClass()) {"
"CollectionUtils.java:301"$0$0$0$2$17$"					return null;"
"CollectionUtils.java:302"$0$0$0$1$5$"				}"
"CollectionUtils.java:303"$0$0$0$1$4$"			}"
"CollectionUtils.java:304"$0$0$0$1$3$"		}"
"CollectionUtils.java:305"$0$0$0$2$19$"		return candidate;"
"CollectionUtils.java:306"$0$0$0$1$2$"	}"
"CollectionUtils.java:307"$0$0$0$0$0$""
"CollectionUtils.java:308"$0$0$0$1$4$"	/**"
"CollectionUtils.java:309"$0$0$0$12$80$"	 * Retrieve the first element of the given Set, using {@link SortedSet#first()}"
"CollectionUtils.java:310"$0$0$0$6$36$"	 * or otherwise using the iterator."
"CollectionUtils.java:311"$0$0$0$13$62$"	 * @param set the Set to check (may be {@code null} or empty)"
"CollectionUtils.java:312"$0$0$0$10$54$"	 * @return the first element, or {@code null} if none"
"CollectionUtils.java:313"$0$0$0$3$16$"	 * @since 5.2.3"
"CollectionUtils.java:314"$0$0$0$3$18$"	 * @see SortedSet"
"CollectionUtils.java:315"$0$0$0$3$31$"	 * @see LinkedHashMap#keySet()"
"CollectionUtils.java:316"$0$0$0$3$32$"	 * @see java.util.LinkedHashSet"
"CollectionUtils.java:317"$0$0$0$1$4$"	 */"
"CollectionUtils.java:318"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:319"$0$0$0$8$57$"	public static <T> T firstElement(@Nullable Set<T> set) {"
"CollectionUtils.java:320"$0$0$0$3$21$"		if (isEmpty(set)) {"
"CollectionUtils.java:321"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:322"$0$0$0$1$3$"		}"
"CollectionUtils.java:323"$0$0$0$5$33$"		if (set instanceof SortedSet) {"
"CollectionUtils.java:324"$0$0$0$3$39$"			return ((SortedSet<T>) set).first();"
"CollectionUtils.java:325"$0$0$0$1$3$"		}"
"CollectionUtils.java:326"$0$0$0$0$0$""
"CollectionUtils.java:327"$0$0$0$4$34$"		Iterator<T> it = set.iterator();"
"CollectionUtils.java:328"$0$0$0$4$17$"		T first = null;"
"CollectionUtils.java:329"$0$0$0$3$21$"		if (it.hasNext()) {"
"CollectionUtils.java:330"$0$0$0$3$21$"			first = it.next();"
"CollectionUtils.java:331"$0$0$0$1$3$"		}"
"CollectionUtils.java:332"$0$0$0$2$15$"		return first;"
"CollectionUtils.java:333"$0$0$0$1$2$"	}"
"CollectionUtils.java:334"$0$0$0$0$0$""
"CollectionUtils.java:335"$0$0$0$1$4$"	/**"
"CollectionUtils.java:336"$0$0$0$13$75$"	 * Retrieve the first element of the given List, accessing the zero index."
"CollectionUtils.java:337"$0$0$0$13$64$"	 * @param list the List to check (may be {@code null} or empty)"
"CollectionUtils.java:338"$0$0$0$10$54$"	 * @return the first element, or {@code null} if none"
"CollectionUtils.java:339"$0$0$0$3$16$"	 * @since 5.2.3"
"CollectionUtils.java:340"$0$0$0$1$4$"	 */"
"CollectionUtils.java:341"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:342"$0$0$0$8$59$"	public static <T> T firstElement(@Nullable List<T> list) {"
"CollectionUtils.java:343"$0$0$0$3$22$"		if (isEmpty(list)) {"
"CollectionUtils.java:344"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:345"$0$0$0$1$3$"		}"
"CollectionUtils.java:346"$1$0$0$2$21$"		return list.get(0);"
"CollectionUtils.java:347"$0$0$0$1$2$"	}"
"CollectionUtils.java:348"$0$0$0$0$0$""
"CollectionUtils.java:349"$0$0$0$1$4$"	/**"
"CollectionUtils.java:350"$0$0$0$12$78$"	 * Retrieve the last element of the given Set, using {@link SortedSet#last()}"
"CollectionUtils.java:351"$0$0$0$11$69$"	 * or otherwise iterating over all elements (assuming a linked set)."
"CollectionUtils.java:352"$0$0$0$13$62$"	 * @param set the Set to check (may be {@code null} or empty)"
"CollectionUtils.java:353"$0$0$0$10$53$"	 * @return the last element, or {@code null} if none"
"CollectionUtils.java:354"$0$0$0$3$16$"	 * @since 5.0.3"
"CollectionUtils.java:355"$0$0$0$3$18$"	 * @see SortedSet"
"CollectionUtils.java:356"$0$0$0$3$31$"	 * @see LinkedHashMap#keySet()"
"CollectionUtils.java:357"$0$0$0$3$32$"	 * @see java.util.LinkedHashSet"
"CollectionUtils.java:358"$0$0$0$1$4$"	 */"
"CollectionUtils.java:359"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:360"$0$0$0$8$56$"	public static <T> T lastElement(@Nullable Set<T> set) {"
"CollectionUtils.java:361"$0$0$0$3$21$"		if (isEmpty(set)) {"
"CollectionUtils.java:362"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:363"$0$0$0$1$3$"		}"
"CollectionUtils.java:364"$0$0$0$5$33$"		if (set instanceof SortedSet) {"
"CollectionUtils.java:365"$0$0$0$3$38$"			return ((SortedSet<T>) set).last();"
"CollectionUtils.java:366"$0$0$0$1$3$"		}"
"CollectionUtils.java:367"$0$0$0$0$0$""
"CollectionUtils.java:368"$0$0$1$4$32$"		// Full iteration necessary..."
"CollectionUtils.java:369"$0$0$0$4$34$"		Iterator<T> it = set.iterator();"
"CollectionUtils.java:370"$0$0$0$4$16$"		T last = null;"
"CollectionUtils.java:371"$0$0$0$3$24$"		while (it.hasNext()) {"
"CollectionUtils.java:372"$0$0$0$3$20$"			last = it.next();"
"CollectionUtils.java:373"$0$0$0$1$3$"		}"
"CollectionUtils.java:374"$0$0$0$2$14$"		return last;"
"CollectionUtils.java:375"$0$0$0$1$2$"	}"
"CollectionUtils.java:376"$0$0$0$0$0$""
"CollectionUtils.java:377"$0$0$0$1$4$"	/**"
"CollectionUtils.java:378"$0$0$0$13$77$"	 * Retrieve the last element of the given List, accessing the highest index."
"CollectionUtils.java:379"$0$0$0$13$64$"	 * @param list the List to check (may be {@code null} or empty)"
"CollectionUtils.java:380"$0$0$0$10$53$"	 * @return the last element, or {@code null} if none"
"CollectionUtils.java:381"$0$0$0$3$16$"	 * @since 5.0.3"
"CollectionUtils.java:382"$0$0$0$1$4$"	 */"
"CollectionUtils.java:383"$0$0$0$1$10$"	@Nullable"
"CollectionUtils.java:384"$0$0$0$8$58$"	public static <T> T lastElement(@Nullable List<T> list) {"
"CollectionUtils.java:385"$0$0$0$3$22$"		if (isEmpty(list)) {"
"CollectionUtils.java:386"$0$0$0$2$15$"			return null;"
"CollectionUtils.java:387"$0$0$0$1$3$"		}"
"CollectionUtils.java:388"$1$0$0$4$35$"		return list.get(list.size() - 1);"
"CollectionUtils.java:389"$0$0$0$1$2$"	}"
"CollectionUtils.java:390"$0$0$0$0$0$""
"CollectionUtils.java:391"$0$0$0$1$4$"	/**"
"CollectionUtils.java:392"$0$0$0$15$84$"	 * Marshal the elements from the given enumeration into an array of the given type."
"CollectionUtils.java:393"$0$0$0$15$85$"	 * Enumeration elements must be assignable to the type of the given array. The array"
"CollectionUtils.java:394"$0$0$0$11$63$"	 * returned will be a different instance than the array given."
"CollectionUtils.java:395"$0$0$0$1$4$"	 */"
"CollectionUtils.java:396"$0$0$0$12$84$"	public static <A, E extends A> A[] toArray(Enumeration<E> enumeration, A[] array) {"
"CollectionUtils.java:397"$0$0$0$5$44$"		ArrayList<A> elements = new ArrayList<>();"
"CollectionUtils.java:398"$0$0$0$3$41$"		while (enumeration.hasMoreElements()) {"
"CollectionUtils.java:399"$0$0$0$1$43$"			elements.add(enumeration.nextElement());"
"CollectionUtils.java:400"$0$0$0$1$3$"		}"
"CollectionUtils.java:401"$0$0$0$2$33$"		return elements.toArray(array);"
"CollectionUtils.java:402"$0$0$0$1$2$"	}"
"CollectionUtils.java:403"$0$0$0$0$0$""
"CollectionUtils.java:404"$0$0$0$1$4$"	/**"
"CollectionUtils.java:405"$0$0$0$9$56$"	 * Adapt an {@link Enumeration} to an {@link Iterator}."
"CollectionUtils.java:406"$0$0$0$7$55$"	 * @param enumeration the original {@code Enumeration}"
"CollectionUtils.java:407"$0$0$0$6$40$"	 * @return the adapted {@code Iterator}"
"CollectionUtils.java:408"$0$0$0$1$4$"	 */"
"CollectionUtils.java:409"$0$0$0$8$81$"	public static <E> Iterator<E> toIterator(@Nullable Enumeration<E> enumeration) {"
"CollectionUtils.java:410"$0$0$0$9$102$"		return (enumeration != null ? new EnumerationIterator<>(enumeration) : Collections.emptyIterator());"
"CollectionUtils.java:411"$0$0$0$1$2$"	}"
"CollectionUtils.java:412"$0$0$0$0$0$""
"CollectionUtils.java:413"$0$0$0$1$4$"	/**"
"CollectionUtils.java:414"$0$0$0$11$70$"	 * Adapt a {@code Map<K, List<V>>} to an {@code MultiValueMap<K, V>}."
"CollectionUtils.java:415"$0$0$0$6$31$"	 * @param map the original map"
"CollectionUtils.java:416"$0$0$0$5$31$"	 * @return the multi-value map"
"CollectionUtils.java:417"$0$0$0$3$14$"	 * @since 3.1"
"CollectionUtils.java:418"$0$0$0$1$4$"	 */"
"CollectionUtils.java:419"$0$0$0$10$80$"	public static <K, V> MultiValueMap<K, V> toMultiValueMap(Map<K, List<V>> map) {"
"CollectionUtils.java:420"$0$0$0$3$41$"		return new MultiValueMapAdapter<>(map);"
"CollectionUtils.java:421"$0$0$0$1$2$"	}"
"CollectionUtils.java:422"$0$0$0$0$0$""
"CollectionUtils.java:423"$0$0$0$1$4$"	/**"
"CollectionUtils.java:424"$0$0$0$10$65$"	 * Return an unmodifiable view of the specified multi-value map."
"CollectionUtils.java:425"$0$0$0$14$73$"	 * @param  map the map for which an unmodifiable view is to be returned."
"CollectionUtils.java:426"$0$0$0$10$66$"	 * @return an unmodifiable view of the specified multi-value map."
"CollectionUtils.java:427"$0$0$0$3$14$"	 * @since 3.1"
"CollectionUtils.java:428"$0$0$0$1$4$"	 */"
"CollectionUtils.java:429"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CollectionUtils.java:430"$0$0$0$14$114$"	public static <K, V> MultiValueMap<K, V> unmodifiableMultiValueMap(MultiValueMap<? extends K, ? extends V> map) {"
"CollectionUtils.java:431"$0$0$0$6$48$"		Assert.notNull(map, ""'map' must not be null"");"
"CollectionUtils.java:432"$0$0$0$6$59$"		Map<K, List<V>> result = new LinkedHashMap<>(map.size());"
"CollectionUtils.java:433"$0$0$0$4$31$"		map.forEach((key, value) -> {"
"CollectionUtils.java:434"$0$0$0$6$66$"			List<? extends V> values = Collections.unmodifiableList(value);"
"CollectionUtils.java:435"$0$0$0$3$37$"			result.put(key, (List<V>) values);"
"CollectionUtils.java:436"$0$0$0$1$5$"		});"
"CollectionUtils.java:437"$0$0$0$5$72$"		Map<K, List<V>> unmodifiableMap = Collections.unmodifiableMap(result);"
"CollectionUtils.java:438"$0$0$0$2$42$"		return toMultiValueMap(unmodifiableMap);"
"CollectionUtils.java:439"$0$0$0$1$2$"	}"
"CollectionUtils.java:440"$0$0$0$0$0$""
"CollectionUtils.java:441"$0$0$0$0$0$""
"CollectionUtils.java:442"$0$0$0$1$4$"	/**"
"CollectionUtils.java:443"$0$0$0$5$37$"	 * Iterator wrapping an Enumeration."
"CollectionUtils.java:444"$0$0$0$1$4$"	 */"
"CollectionUtils.java:445"$0$0$0$7$69$"	private static class EnumerationIterator<E> implements Iterator<E> {"
"CollectionUtils.java:446"$0$0$0$0$0$""
"CollectionUtils.java:447"$0$0$0$4$43$"		private final Enumeration<E> enumeration;"
"CollectionUtils.java:448"$0$0$0$0$0$""
"CollectionUtils.java:449"$0$0$0$4$58$"		public EnumerationIterator(Enumeration<E> enumeration) {"
"CollectionUtils.java:450"$0$0$0$3$34$"			this.enumeration = enumeration;"
"CollectionUtils.java:451"$0$0$0$1$3$"		}"
"CollectionUtils.java:452"$0$0$0$0$0$""
"CollectionUtils.java:453"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:454"$0$0$0$4$28$"		public boolean hasNext() {"
"CollectionUtils.java:455"$0$0$0$2$45$"			return this.enumeration.hasMoreElements();"
"CollectionUtils.java:456"$0$0$0$1$3$"		}"
"CollectionUtils.java:457"$0$0$0$0$0$""
"CollectionUtils.java:458"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:459"$0$0$0$4$19$"		public E next() {"
"CollectionUtils.java:460"$0$0$0$2$41$"			return this.enumeration.nextElement();"
"CollectionUtils.java:461"$0$0$0$1$3$"		}"
"CollectionUtils.java:462"$0$0$0$0$0$""
"CollectionUtils.java:463"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:464"$0$0$0$6$61$"		public void remove() throws UnsupportedOperationException {"
"CollectionUtils.java:465"$0$0$0$4$60$"			throw new UnsupportedOperationException(""Not supported"");"
"CollectionUtils.java:466"$0$0$0$1$3$"		}"
"CollectionUtils.java:467"$0$0$0$1$2$"	}"
"CollectionUtils.java:468"$0$0$0$0$0$""
"CollectionUtils.java:469"$0$0$0$0$0$""
"CollectionUtils.java:470"$0$0$0$1$4$"	/**"
"CollectionUtils.java:471"$0$0$0$8$47$"	 * Adapts a Map to the MultiValueMap contract."
"CollectionUtils.java:472"$0$0$0$1$4$"	 */"
"CollectionUtils.java:473"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"CollectionUtils.java:474"$0$0$0$10$95$"	private static class MultiValueMapAdapter<K, V> implements MultiValueMap<K, V>, Serializable {"
"CollectionUtils.java:475"$0$0$0$0$0$""
"CollectionUtils.java:476"$0$0$0$5$36$"		private final Map<K, List<V>> map;"
"CollectionUtils.java:477"$0$0$0$0$0$""
"CollectionUtils.java:478"$0$0$0$5$52$"		public MultiValueMapAdapter(Map<K, List<V>> map) {"
"CollectionUtils.java:479"$0$0$0$6$49$"			Assert.notNull(map, ""'map' must not be null"");"
"CollectionUtils.java:480"$0$0$0$3$18$"			this.map = map;"
"CollectionUtils.java:481"$0$0$0$1$3$"		}"
"CollectionUtils.java:482"$0$0$0$0$0$""
"CollectionUtils.java:483"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:484"$0$0$0$1$11$"		@Nullable"
"CollectionUtils.java:485"$1$0$0$5$28$"		public V getFirst(K key) {"
"CollectionUtils.java:486"$1$0$0$4$38$"			List<V> values = this.map.get(key);"
"CollectionUtils.java:487"$1$0$0$8$50$"			return (values != null ? values.get(0) : null);"
"CollectionUtils.java:488"$0$0$0$1$3$"		}"
"CollectionUtils.java:489"$0$0$0$0$0$""
"CollectionUtils.java:490"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:491"$0$0$0$8$45$"		public void add(K key, @Nullable V value) {"
"CollectionUtils.java:492"$0$0$0$8$75$"			List<V> values = this.map.computeIfAbsent(key, k -> new LinkedList<>());"
"CollectionUtils.java:493"$0$0$0$1$21$"			values.add(value);"
"CollectionUtils.java:494"$0$0$0$1$3$"		}"
"CollectionUtils.java:495"$0$0$0$0$0$""
"CollectionUtils.java:496"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:497"$0$0$0$9$55$"		public void addAll(K key, List<? extends V> values) {"
"CollectionUtils.java:498"$0$0$0$8$82$"			List<V> currentValues = this.map.computeIfAbsent(key, k -> new LinkedList<>());"
"CollectionUtils.java:499"$0$0$0$1$32$"			currentValues.addAll(values);"
"CollectionUtils.java:500"$0$0$0$1$3$"		}"
"CollectionUtils.java:501"$0$0$0$0$0$""
"CollectionUtils.java:502"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:503"$0$0$0$6$50$"		public void addAll(MultiValueMap<K, V> values) {"
"CollectionUtils.java:504"$0$0$0$7$54$"			for (Entry<K, List<V>> entry : values.entrySet()) {"
"CollectionUtils.java:505"$2$0$0$2$45$"				addAll(entry.getKey(), entry.getValue());"
"CollectionUtils.java:506"$0$0$0$1$4$"			}"
"CollectionUtils.java:507"$0$0$0$1$3$"		}"
"CollectionUtils.java:508"$0$0$0$0$0$""
"CollectionUtils.java:509"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:510"$0$0$0$8$45$"		public void set(K key, @Nullable V value) {"
"CollectionUtils.java:511"$0$0$0$5$39$"			List<V> values = new LinkedList<>();"
"CollectionUtils.java:512"$0$0$0$1$21$"			values.add(value);"
"CollectionUtils.java:513"$0$0$0$2$29$"			this.map.put(key, values);"
"CollectionUtils.java:514"$0$0$0$1$3$"		}"
"CollectionUtils.java:515"$0$0$0$0$0$""
"CollectionUtils.java:516"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:517"$0$0$0$6$40$"		public void setAll(Map<K, V> values) {"
"CollectionUtils.java:518"$0$0$0$1$29$"			values.forEach(this::set);"
"CollectionUtils.java:519"$0$0$0$1$3$"		}"
"CollectionUtils.java:520"$0$0$0$0$0$""
"CollectionUtils.java:521"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:522"$0$0$0$5$39$"		public Map<K, V> toSingleValueMap() {"
"CollectionUtils.java:523"$0$0$0$6$77$"			LinkedHashMap<K, V> singleValueMap = new LinkedHashMap<>(this.map.size());"
"CollectionUtils.java:524"$1$0$0$5$75$"			this.map.forEach((key, value) -> singleValueMap.put(key, value.get(0)));"
"CollectionUtils.java:525"$0$0$0$2$25$"			return singleValueMap;"
"CollectionUtils.java:526"$0$0$0$1$3$"		}"
"CollectionUtils.java:527"$0$0$0$0$0$""
"CollectionUtils.java:528"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:529"$0$0$0$4$21$"		public int size() {"
"CollectionUtils.java:530"$0$0$0$2$26$"			return this.map.size();"
"CollectionUtils.java:531"$0$0$0$1$3$"		}"
"CollectionUtils.java:532"$0$0$0$0$0$""
"CollectionUtils.java:533"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:534"$0$0$0$4$28$"		public boolean isEmpty() {"
"CollectionUtils.java:535"$0$0$0$2$29$"			return this.map.isEmpty();"
"CollectionUtils.java:536"$0$0$0$1$3$"		}"
"CollectionUtils.java:537"$0$0$0$0$0$""
"CollectionUtils.java:538"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:539"$0$0$0$5$42$"		public boolean containsKey(Object key) {"
"CollectionUtils.java:540"$0$0$0$2$36$"			return this.map.containsKey(key);"
"CollectionUtils.java:541"$0$0$0$1$3$"		}"
"CollectionUtils.java:542"$0$0$0$0$0$""
"CollectionUtils.java:543"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:544"$0$0$0$5$46$"		public boolean containsValue(Object value) {"
"CollectionUtils.java:545"$0$0$0$2$40$"			return this.map.containsValue(value);"
"CollectionUtils.java:546"$0$0$0$1$3$"		}"
"CollectionUtils.java:547"$0$0$0$0$0$""
"CollectionUtils.java:548"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:549"$1$0$0$5$34$"		public List<V> get(Object key) {"
"CollectionUtils.java:550"$1$0$0$2$28$"			return this.map.get(key);"
"CollectionUtils.java:551"$0$0$0$1$3$"		}"
"CollectionUtils.java:552"$0$0$0$0$0$""
"CollectionUtils.java:553"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:554"$0$0$0$7$44$"		public List<V> put(K key, List<V> value) {"
"CollectionUtils.java:555"$0$0$0$3$35$"			return this.map.put(key, value);"
"CollectionUtils.java:556"$0$0$0$1$3$"		}"
"CollectionUtils.java:557"$0$0$0$0$0$""
"CollectionUtils.java:558"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:559"$0$0$0$5$37$"		public List<V> remove(Object key) {"
"CollectionUtils.java:560"$0$0$0$2$31$"			return this.map.remove(key);"
"CollectionUtils.java:561"$0$0$0$1$3$"		}"
"CollectionUtils.java:562"$0$0$0$0$0$""
"CollectionUtils.java:563"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:564"$0$0$0$10$63$"		public void putAll(Map<? extends K, ? extends List<V>> map) {"
"CollectionUtils.java:565"$0$0$0$1$24$"			this.map.putAll(map);"
"CollectionUtils.java:566"$0$0$0$1$3$"		}"
"CollectionUtils.java:567"$0$0$0$0$0$""
"CollectionUtils.java:568"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:569"$0$0$0$4$23$"		public void clear() {"
"CollectionUtils.java:570"$0$0$0$1$20$"			this.map.clear();"
"CollectionUtils.java:571"$0$0$0$1$3$"		}"
"CollectionUtils.java:572"$0$0$0$0$0$""
"CollectionUtils.java:573"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:574"$0$0$0$4$26$"		public Set<K> keySet() {"
"CollectionUtils.java:575"$0$0$0$2$28$"			return this.map.keySet();"
"CollectionUtils.java:576"$0$0$0$1$3$"		}"
"CollectionUtils.java:577"$0$0$0$0$0$""
"CollectionUtils.java:578"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:579"$0$0$0$4$39$"		public Collection<List<V>> values() {"
"CollectionUtils.java:580"$0$0$0$2$28$"			return this.map.values();"
"CollectionUtils.java:581"$0$0$0$1$3$"		}"
"CollectionUtils.java:582"$0$0$0$0$0$""
"CollectionUtils.java:583"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:584"$0$0$0$5$44$"		public Set<Entry<K, List<V>>> entrySet() {"
"CollectionUtils.java:585"$0$0$0$2$30$"			return this.map.entrySet();"
"CollectionUtils.java:586"$0$0$0$1$3$"		}"
"CollectionUtils.java:587"$0$0$0$0$0$""
"CollectionUtils.java:588"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:589"$0$0$0$6$49$"		public boolean equals(@Nullable Object other) {"
"CollectionUtils.java:590"$0$0$0$5$23$"			if (this == other) {"
"CollectionUtils.java:591"$0$0$0$2$16$"				return true;"
"CollectionUtils.java:592"$0$0$0$1$4$"			}"
"CollectionUtils.java:593"$0$0$0$2$33$"			return this.map.equals(other);"
"CollectionUtils.java:594"$0$0$0$1$3$"		}"
"CollectionUtils.java:595"$0$0$0$0$0$""
"CollectionUtils.java:596"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:597"$0$0$0$4$25$"		public int hashCode() {"
"CollectionUtils.java:598"$0$0$0$2$30$"			return this.map.hashCode();"
"CollectionUtils.java:599"$0$0$0$1$3$"		}"
"CollectionUtils.java:600"$0$0$0$0$0$""
"CollectionUtils.java:601"$0$0$0$1$11$"		@Override"
"CollectionUtils.java:602"$0$0$0$4$28$"		public String toString() {"
"CollectionUtils.java:603"$0$0$0$2$30$"			return this.map.toString();"
"CollectionUtils.java:604"$0$0$0$1$3$"		}"
"CollectionUtils.java:605"$0$0$0$1$2$"	}"
"CollectionUtils.java:606"$0$0$0$0$0$""
"CollectionUtils.java:607"$0$0$0$1$1$"}"
"AutoPopulatingList.java:1"$0$0$0$1$2$"/*"
"AutoPopulatingList.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"AutoPopulatingList.java:3"$0$0$0$1$2$" *"
"AutoPopulatingList.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AutoPopulatingList.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AutoPopulatingList.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AutoPopulatingList.java:7"$0$0$0$1$2$" *"
"AutoPopulatingList.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AutoPopulatingList.java:9"$0$0$0$1$2$" *"
"AutoPopulatingList.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AutoPopulatingList.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AutoPopulatingList.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AutoPopulatingList.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AutoPopulatingList.java:14"$0$0$0$5$33$" * limitations under the License."
"AutoPopulatingList.java:15"$0$0$0$1$3$" */"
"AutoPopulatingList.java:16"$0$0$0$0$0$""
"AutoPopulatingList.java:17"$0$0$0$2$33$"package org.springframework.util;"
"AutoPopulatingList.java:18"$0$0$0$0$0$""
"AutoPopulatingList.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"AutoPopulatingList.java:20"$1$0$0$2$51$"import java.lang.reflect.InvocationTargetException;"
"AutoPopulatingList.java:21"$0$0$0$2$34$"import java.lang.reflect.Modifier;"
"AutoPopulatingList.java:22"$0$0$0$2$27$"import java.util.ArrayList;"
"AutoPopulatingList.java:23"$0$0$0$2$28$"import java.util.Collection;"
"AutoPopulatingList.java:24"$0$0$0$2$26$"import java.util.Iterator;"
"AutoPopulatingList.java:25"$0$0$0$2$22$"import java.util.List;"
"AutoPopulatingList.java:26"$0$0$0$2$30$"import java.util.ListIterator;"
"AutoPopulatingList.java:27"$0$0$0$0$0$""
"AutoPopulatingList.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AutoPopulatingList.java:29"$0$0$0$0$0$""
"AutoPopulatingList.java:30"$0$0$0$1$3$"/**"
"AutoPopulatingList.java:31"$0$0$0$12$67$" * Simple {@link List} wrapper class that allows for elements to be"
"AutoPopulatingList.java:32"$0$0$0$10$70$" * automatically populated as they are requested. This is particularly"
"AutoPopulatingList.java:33"$0$0$0$12$71$" * useful for data binding to {@link List Lists}, allowing for elements"
"AutoPopulatingList.java:34"$0$0$0$16$75$" * to be created and added to the {@link List} in a ""just in time"" fashion."
"AutoPopulatingList.java:35"$0$0$0$1$2$" *"
"AutoPopulatingList.java:36"$0$0$0$12$75$" * <p>Note: This class is not thread-safe. To create a thread-safe version,"
"AutoPopulatingList.java:37"$0$0$0$7$74$" * use the {@link java.util.Collections#synchronizedList} utility methods."
"AutoPopulatingList.java:38"$0$0$0$1$2$" *"
"AutoPopulatingList.java:39"$0$0$0$8$60$" * <p>Inspired by {@code LazyList} from Commons Collections."
"AutoPopulatingList.java:40"$0$0$0$1$2$" *"
"AutoPopulatingList.java:41"$0$0$0$4$21$" * @author Rob Harrop"
"AutoPopulatingList.java:42"$0$0$0$4$26$" * @author Juergen Hoeller"
"AutoPopulatingList.java:43"$0$0$0$3$13$" * @since 2.0"
"AutoPopulatingList.java:44"$0$0$0$6$30$" * @param <E> the element type"
"AutoPopulatingList.java:45"$0$0$0$1$3$" */"
"AutoPopulatingList.java:46"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"AutoPopulatingList.java:47"$0$0$0$7$69$"public class AutoPopulatingList<E> implements List<E>, Serializable {"
"AutoPopulatingList.java:48"$0$0$0$0$0$""
"AutoPopulatingList.java:49"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:50"$0$0$0$11$69$"	 * The {@link List} that all operations are eventually delegated to."
"AutoPopulatingList.java:51"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:52"$0$0$0$4$35$"	private final List<E> backingList;"
"AutoPopulatingList.java:53"$0$0$0$0$0$""
"AutoPopulatingList.java:54"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:55"$0$0$0$12$73$"	 * The {@link ElementFactory} to use to create new {@link List} elements"
"AutoPopulatingList.java:56"$0$0$0$3$14$"	 * on demand."
"AutoPopulatingList.java:57"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:58"$0$0$0$4$48$"	private final ElementFactory<E> elementFactory;"
"AutoPopulatingList.java:59"$0$0$0$0$0$""
"AutoPopulatingList.java:60"$0$0$0$0$0$""
"AutoPopulatingList.java:61"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:62"$0$0$0$12$73$"	 * Creates a new {@code AutoPopulatingList} that is backed by a standard"
"AutoPopulatingList.java:63"$0$0$0$14$88$"	 * {@link ArrayList} and adds new instances of the supplied {@link Class element Class}"
"AutoPopulatingList.java:64"$0$0$0$8$42$"	 * to the backing {@link List} on demand."
"AutoPopulatingList.java:65"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:66"$0$0$0$6$61$"	public AutoPopulatingList(Class<? extends E> elementClass) {"
"AutoPopulatingList.java:67"$0$0$0$3$40$"		this(new ArrayList<>(), elementClass);"
"AutoPopulatingList.java:68"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:69"$0$0$0$0$0$""
"AutoPopulatingList.java:70"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:71"$0$0$0$14$88$"	 * Creates a new {@code AutoPopulatingList} that is backed by the supplied {@link List}"
"AutoPopulatingList.java:72"$0$0$0$15$85$"	 * and adds new instances of the supplied {@link Class element Class} to the backing"
"AutoPopulatingList.java:73"$0$0$0$5$27$"	 * {@link List} on demand."
"AutoPopulatingList.java:74"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:75"$0$0$0$8$82$"	public AutoPopulatingList(List<E> backingList, Class<? extends E> elementClass) {"
"AutoPopulatingList.java:76"$0$0$0$3$66$"		this(backingList, new ReflectiveElementFactory<>(elementClass));"
"AutoPopulatingList.java:77"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:78"$0$0$0$0$0$""
"AutoPopulatingList.java:79"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:80"$0$0$0$12$73$"	 * Creates a new {@code AutoPopulatingList} that is backed by a standard"
"AutoPopulatingList.java:81"$0$0$0$14$99$"	 * {@link ArrayList} and creates new elements on demand using the supplied {@link ElementFactory}."
"AutoPopulatingList.java:82"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:83"$0$0$0$4$62$"	public AutoPopulatingList(ElementFactory<E> elementFactory) {"
"AutoPopulatingList.java:84"$0$0$0$3$42$"		this(new ArrayList<>(), elementFactory);"
"AutoPopulatingList.java:85"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:86"$0$0$0$0$0$""
"AutoPopulatingList.java:87"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:88"$0$0$0$14$88$"	 * Creates a new {@code AutoPopulatingList} that is backed by the supplied {@link List}"
"AutoPopulatingList.java:89"$0$0$0$12$81$"	 * and creates new elements on demand using the supplied {@link ElementFactory}."
"AutoPopulatingList.java:90"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:91"$0$0$0$6$83$"	public AutoPopulatingList(List<E> backingList, ElementFactory<E> elementFactory) {"
"AutoPopulatingList.java:92"$0$0$0$7$63$"		Assert.notNull(backingList, ""Backing List must not be null"");"
"AutoPopulatingList.java:93"$0$0$0$7$69$"		Assert.notNull(elementFactory, ""Element factory must not be null"");"
"AutoPopulatingList.java:94"$0$0$0$3$33$"		this.backingList = backingList;"
"AutoPopulatingList.java:95"$0$0$0$3$39$"		this.elementFactory = elementFactory;"
"AutoPopulatingList.java:96"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:97"$0$0$0$0$0$""
"AutoPopulatingList.java:98"$0$0$0$0$0$""
"AutoPopulatingList.java:99"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:100"$0$0$0$7$40$"	public void add(int index, E element) {"
"AutoPopulatingList.java:101"$0$0$0$2$39$"		this.backingList.add(index, element);"
"AutoPopulatingList.java:102"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:103"$0$0$0$0$0$""
"AutoPopulatingList.java:104"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:105"$0$0$0$5$26$"	public boolean add(E o) {"
"AutoPopulatingList.java:106"$0$0$0$2$33$"		return this.backingList.add(o);"
"AutoPopulatingList.java:107"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:108"$0$0$0$0$0$""
"AutoPopulatingList.java:109"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:110"$0$0$0$7$51$"	public boolean addAll(Collection<? extends E> c) {"
"AutoPopulatingList.java:111"$0$0$0$2$36$"		return this.backingList.addAll(c);"
"AutoPopulatingList.java:112"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:113"$0$0$0$0$0$""
"AutoPopulatingList.java:114"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:115"$0$0$0$9$62$"	public boolean addAll(int index, Collection<? extends E> c) {"
"AutoPopulatingList.java:116"$0$0$0$3$43$"		return this.backingList.addAll(index, c);"
"AutoPopulatingList.java:117"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:118"$0$0$0$0$0$""
"AutoPopulatingList.java:119"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:120"$0$0$0$4$22$"	public void clear() {"
"AutoPopulatingList.java:121"$0$0$0$1$27$"		this.backingList.clear();"
"AutoPopulatingList.java:122"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:123"$0$0$0$0$0$""
"AutoPopulatingList.java:124"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:125"$0$0$0$5$36$"	public boolean contains(Object o) {"
"AutoPopulatingList.java:126"$0$0$0$2$38$"		return this.backingList.contains(o);"
"AutoPopulatingList.java:127"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:128"$0$0$0$0$0$""
"AutoPopulatingList.java:129"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:130"$0$0$0$5$46$"	public boolean containsAll(Collection<?> c) {"
"AutoPopulatingList.java:131"$0$0$0$2$41$"		return this.backingList.containsAll(c);"
"AutoPopulatingList.java:132"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:133"$0$0$0$0$0$""
"AutoPopulatingList.java:134"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:135"$0$0$0$13$66$"	 * Get the element at the supplied index, creating it if there is"
"AutoPopulatingList.java:136"$0$0$0$6$29$"	 * no element at that index."
"AutoPopulatingList.java:137"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:138"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:139"$1$0$0$5$26$"	public E get(int index) {"
"AutoPopulatingList.java:140"$0$0$0$4$48$"		int backingListSize = this.backingList.size();"
"AutoPopulatingList.java:141"$0$0$0$4$19$"		E element = null;"
"AutoPopulatingList.java:142"$0$0$0$5$32$"		if (index < backingListSize) {"
"AutoPopulatingList.java:143"$1$0$0$3$41$"			element = this.backingList.get(index);"
"AutoPopulatingList.java:144"$0$0$0$5$25$"			if (element == null) {"
"AutoPopulatingList.java:145"$0$0$0$3$55$"				element = this.elementFactory.createElement(index);"
"AutoPopulatingList.java:146"$0$0$0$2$41$"				this.backingList.set(index, element);"
"AutoPopulatingList.java:147"$0$0$0$1$4$"			}"
"AutoPopulatingList.java:148"$0$0$0$1$3$"		}"
"AutoPopulatingList.java:149"$0$0$0$2$8$"		else {"
"AutoPopulatingList.java:150"$0$0$0$10$50$"			for (int x = backingListSize; x < index; x++) {"
"AutoPopulatingList.java:151"$0$0$0$1$31$"				this.backingList.add(null);"
"AutoPopulatingList.java:152"$0$0$0$1$4$"			}"
"AutoPopulatingList.java:153"$0$0$0$3$54$"			element = this.elementFactory.createElement(index);"
"AutoPopulatingList.java:154"$0$0$0$1$33$"			this.backingList.add(element);"
"AutoPopulatingList.java:155"$0$0$0$1$3$"		}"
"AutoPopulatingList.java:156"$0$0$0$2$17$"		return element;"
"AutoPopulatingList.java:157"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:158"$0$0$0$0$0$""
"AutoPopulatingList.java:159"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:160"$0$0$0$5$31$"	public int indexOf(Object o) {"
"AutoPopulatingList.java:161"$0$0$0$2$37$"		return this.backingList.indexOf(o);"
"AutoPopulatingList.java:162"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:163"$0$0$0$0$0$""
"AutoPopulatingList.java:164"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:165"$0$0$0$4$27$"	public boolean isEmpty() {"
"AutoPopulatingList.java:166"$0$0$0$2$36$"		return this.backingList.isEmpty();"
"AutoPopulatingList.java:167"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:168"$0$0$0$0$0$""
"AutoPopulatingList.java:169"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:170"$0$0$0$4$32$"	public Iterator<E> iterator() {"
"AutoPopulatingList.java:171"$0$0$0$2$37$"		return this.backingList.iterator();"
"AutoPopulatingList.java:172"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:173"$0$0$0$0$0$""
"AutoPopulatingList.java:174"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:175"$0$0$0$5$35$"	public int lastIndexOf(Object o) {"
"AutoPopulatingList.java:176"$0$0$0$2$41$"		return this.backingList.lastIndexOf(o);"
"AutoPopulatingList.java:177"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:178"$0$0$0$0$0$""
"AutoPopulatingList.java:179"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:180"$0$0$0$4$40$"	public ListIterator<E> listIterator() {"
"AutoPopulatingList.java:181"$0$0$0$2$41$"		return this.backingList.listIterator();"
"AutoPopulatingList.java:182"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:183"$0$0$0$0$0$""
"AutoPopulatingList.java:184"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:185"$0$0$0$5$49$"	public ListIterator<E> listIterator(int index) {"
"AutoPopulatingList.java:186"$0$0$0$2$46$"		return this.backingList.listIterator(index);"
"AutoPopulatingList.java:187"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:188"$0$0$0$0$0$""
"AutoPopulatingList.java:189"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:190"$0$0$0$5$29$"	public E remove(int index) {"
"AutoPopulatingList.java:191"$0$0$0$2$40$"		return this.backingList.remove(index);"
"AutoPopulatingList.java:192"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:193"$0$0$0$0$0$""
"AutoPopulatingList.java:194"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:195"$0$0$0$5$34$"	public boolean remove(Object o) {"
"AutoPopulatingList.java:196"$0$0$0$2$36$"		return this.backingList.remove(o);"
"AutoPopulatingList.java:197"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:198"$0$0$0$0$0$""
"AutoPopulatingList.java:199"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:200"$0$0$0$5$44$"	public boolean removeAll(Collection<?> c) {"
"AutoPopulatingList.java:201"$0$0$0$2$39$"		return this.backingList.removeAll(c);"
"AutoPopulatingList.java:202"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:203"$0$0$0$0$0$""
"AutoPopulatingList.java:204"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:205"$0$0$0$5$44$"	public boolean retainAll(Collection<?> c) {"
"AutoPopulatingList.java:206"$0$0$0$2$39$"		return this.backingList.retainAll(c);"
"AutoPopulatingList.java:207"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:208"$0$0$0$0$0$""
"AutoPopulatingList.java:209"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:210"$0$0$0$7$37$"	public E set(int index, E element) {"
"AutoPopulatingList.java:211"$0$0$0$3$46$"		return this.backingList.set(index, element);"
"AutoPopulatingList.java:212"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:213"$0$0$0$0$0$""
"AutoPopulatingList.java:214"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:215"$0$0$0$4$20$"	public int size() {"
"AutoPopulatingList.java:216"$0$0$0$2$33$"		return this.backingList.size();"
"AutoPopulatingList.java:217"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:218"$0$0$0$0$0$""
"AutoPopulatingList.java:219"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:220"$0$0$0$7$53$"	public List<E> subList(int fromIndex, int toIndex) {"
"AutoPopulatingList.java:221"$0$0$0$3$54$"		return this.backingList.subList(fromIndex, toIndex);"
"AutoPopulatingList.java:222"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:223"$0$0$0$0$0$""
"AutoPopulatingList.java:224"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:225"$0$0$0$4$28$"	public Object[] toArray() {"
"AutoPopulatingList.java:226"$0$0$0$2$36$"		return this.backingList.toArray();"
"AutoPopulatingList.java:227"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:228"$0$0$0$0$0$""
"AutoPopulatingList.java:229"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:230"$0$0$0$6$32$"	public <T> T[] toArray(T[] a) {"
"AutoPopulatingList.java:231"$0$0$0$2$37$"		return this.backingList.toArray(a);"
"AutoPopulatingList.java:232"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:233"$0$0$0$0$0$""
"AutoPopulatingList.java:234"$0$0$0$0$0$""
"AutoPopulatingList.java:235"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:236"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"AutoPopulatingList.java:237"$0$0$0$2$40$"		return this.backingList.equals(other);"
"AutoPopulatingList.java:238"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:239"$0$0$0$0$0$""
"AutoPopulatingList.java:240"$0$0$0$1$10$"	@Override"
"AutoPopulatingList.java:241"$0$0$0$4$24$"	public int hashCode() {"
"AutoPopulatingList.java:242"$0$0$0$2$37$"		return this.backingList.hashCode();"
"AutoPopulatingList.java:243"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:244"$0$0$0$0$0$""
"AutoPopulatingList.java:245"$0$0$0$0$0$""
"AutoPopulatingList.java:246"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:247"$0$0$0$10$69$"	 * Factory interface for creating elements for an index-based access"
"AutoPopulatingList.java:248"$0$0$0$8$52$"	 * data structure such as a {@link java.util.List}."
"AutoPopulatingList.java:249"$0$0$0$1$3$"	 *"
"AutoPopulatingList.java:250"$0$0$0$6$31$"	 * @param <E> the element type"
"AutoPopulatingList.java:251"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:252"$0$0$0$1$21$"	@FunctionalInterface"
"AutoPopulatingList.java:253"$0$0$0$4$37$"	public interface ElementFactory<E> {"
"AutoPopulatingList.java:254"$0$0$0$0$0$""
"AutoPopulatingList.java:255"$0$0$0$1$5$"		/**"
"AutoPopulatingList.java:256"$0$0$0$8$47$"		 * Create the element for the supplied index."
"AutoPopulatingList.java:257"$0$0$0$5$31$"		 * @return the element object"
"AutoPopulatingList.java:258"$0$0$0$8$78$"		 * @throws ElementInstantiationException if the instantiation process failed"
"AutoPopulatingList.java:259"$1$0$0$12$78$"		 * (any exception thrown by a target constructor should be propagated as-is)"
"AutoPopulatingList.java:260"$0$0$0$1$5$"		 */"
"AutoPopulatingList.java:261"$0$0$0$5$66$"		E createElement(int index) throws ElementInstantiationException;"
"AutoPopulatingList.java:262"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:263"$0$0$0$0$0$""
"AutoPopulatingList.java:264"$0$0$0$0$0$""
"AutoPopulatingList.java:265"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:266"$0$0$0$7$47$"	 * Exception to be thrown from ElementFactory."
"AutoPopulatingList.java:267"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:268"$0$0$0$7$77$"	public static class ElementInstantiationException extends RuntimeException {"
"AutoPopulatingList.java:269"$0$0$0$0$0$""
"AutoPopulatingList.java:270"$0$0$0$4$52$"		public ElementInstantiationException(String msg) {"
"AutoPopulatingList.java:271"$0$0$0$1$14$"			super(msg);"
"AutoPopulatingList.java:272"$0$0$0$1$3$"		}"
"AutoPopulatingList.java:273"$0$0$0$0$0$""
"AutoPopulatingList.java:274"$0$0$0$6$73$"		public ElementInstantiationException(String message, Throwable cause) {"
"AutoPopulatingList.java:275"$0$0$0$2$25$"			super(message, cause);"
"AutoPopulatingList.java:276"$0$0$0$1$3$"		}"
"AutoPopulatingList.java:277"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:278"$0$0$0$0$0$""
"AutoPopulatingList.java:279"$0$0$0$0$0$""
"AutoPopulatingList.java:280"$0$0$0$1$4$"	/**"
"AutoPopulatingList.java:281"$0$0$0$8$68$"	 * Reflective implementation of the ElementFactory interface, using"
"AutoPopulatingList.java:282"$1$0$0$8$82$"	 * {@code Class.getDeclaredConstructor().newInstance()} on a given element class."
"AutoPopulatingList.java:283"$0$0$0$1$4$"	 */"
"AutoPopulatingList.java:284"$0$0$0$8$94$"	private static class ReflectiveElementFactory<E> implements ElementFactory<E>, Serializable {"
"AutoPopulatingList.java:285"$0$0$0$0$0$""
"AutoPopulatingList.java:286"$0$0$0$6$48$"		private final Class<? extends E> elementClass;"
"AutoPopulatingList.java:287"$0$0$0$0$0$""
"AutoPopulatingList.java:288"$0$0$0$6$68$"		public ReflectiveElementFactory(Class<? extends E> elementClass) {"
"AutoPopulatingList.java:289"$0$0$0$7$66$"			Assert.notNull(elementClass, ""Element class must not be null"");"
"AutoPopulatingList.java:290"$0$0$0$9$93$"			Assert.isTrue(!elementClass.isInterface(), ""Element class must not be an interface type"");"
"AutoPopulatingList.java:291"$1$0$0$8$113$"			Assert.isTrue(!Modifier.isAbstract(elementClass.getModifiers()), ""Element class cannot be an abstract class"");"
"AutoPopulatingList.java:292"$0$0$0$3$36$"			this.elementClass = elementClass;"
"AutoPopulatingList.java:293"$0$0$0$1$3$"		}"
"AutoPopulatingList.java:294"$0$0$0$0$0$""
"AutoPopulatingList.java:295"$0$0$0$1$11$"		@Override"
"AutoPopulatingList.java:296"$0$0$0$5$37$"		public E createElement(int index) {"
"AutoPopulatingList.java:297"$0$0$0$2$8$"			try {"
"AutoPopulatingList.java:298"$0$0$0$2$82$"				return ReflectionUtils.accessibleConstructor(this.elementClass).newInstance();"
"AutoPopulatingList.java:299"$0$0$0$1$4$"			}"
"AutoPopulatingList.java:300"$0$0$0$4$37$"			catch (NoSuchMethodException ex) {"
"AutoPopulatingList.java:301"$0$0$0$3$44$"				throw new ElementInstantiationException("
"AutoPopulatingList.java:302"$1$0$0$10$85$"						""No default constructor on element class: "" + this.elementClass.getName(), ex);"
"AutoPopulatingList.java:303"$0$0$0$1$4$"			}"
"AutoPopulatingList.java:304"$0$0$0$4$38$"			catch (InstantiationException ex) {"
"AutoPopulatingList.java:305"$0$0$0$3$44$"				throw new ElementInstantiationException("
"AutoPopulatingList.java:306"$1$0$0$9$81$"						""Unable to instantiate element class: "" + this.elementClass.getName(), ex);"
"AutoPopulatingList.java:307"$0$0$0$1$4$"			}"
"AutoPopulatingList.java:308"$0$0$0$4$38$"			catch (IllegalAccessException ex) {"
"AutoPopulatingList.java:309"$0$0$0$3$44$"				throw new ElementInstantiationException("
"AutoPopulatingList.java:310"$1$0$0$9$82$"						""Could not access element constructor: "" + this.elementClass.getName(), ex);"
"AutoPopulatingList.java:311"$0$0$0$1$4$"			}"
"AutoPopulatingList.java:312"$1$0$0$4$41$"			catch (InvocationTargetException ex) {"
"AutoPopulatingList.java:313"$0$0$0$3$44$"				throw new ElementInstantiationException("
"AutoPopulatingList.java:314"$3$0$0$9$103$"						""Failed to invoke element constructor: "" + this.elementClass.getName(), ex.getTargetException());"
"AutoPopulatingList.java:315"$0$0$0$1$4$"			}"
"AutoPopulatingList.java:316"$0$0$0$1$3$"		}"
"AutoPopulatingList.java:317"$0$0$0$1$2$"	}"
"AutoPopulatingList.java:318"$0$0$0$0$0$""
"AutoPopulatingList.java:319"$0$0$0$1$1$"}"
"FileCopyUtils.java:1"$0$0$0$1$2$"/*"
"FileCopyUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"FileCopyUtils.java:3"$0$0$0$1$2$" *"
"FileCopyUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"FileCopyUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"FileCopyUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"FileCopyUtils.java:7"$0$0$0$1$2$" *"
"FileCopyUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"FileCopyUtils.java:9"$0$0$0$1$2$" *"
"FileCopyUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"FileCopyUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"FileCopyUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"FileCopyUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"FileCopyUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"FileCopyUtils.java:15"$0$0$0$1$3$" */"
"FileCopyUtils.java:16"$0$0$0$0$0$""
"FileCopyUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"FileCopyUtils.java:18"$0$0$0$0$0$""
"FileCopyUtils.java:19"$0$0$0$2$36$"import java.io.ByteArrayInputStream;"
"FileCopyUtils.java:20"$0$0$0$2$37$"import java.io.ByteArrayOutputStream;"
"FileCopyUtils.java:21"$0$0$0$2$25$"import java.io.Closeable;"
"FileCopyUtils.java:22"$0$0$0$2$20$"import java.io.File;"
"FileCopyUtils.java:23"$0$0$0$2$27$"import java.io.IOException;"
"FileCopyUtils.java:24"$0$0$0$2$27$"import java.io.InputStream;"
"FileCopyUtils.java:25"$0$0$0$2$28$"import java.io.OutputStream;"
"FileCopyUtils.java:26"$0$0$0$2$22$"import java.io.Reader;"
"FileCopyUtils.java:27"$0$0$0$2$28$"import java.io.StringWriter;"
"FileCopyUtils.java:28"$0$0$0$2$22$"import java.io.Writer;"
"FileCopyUtils.java:29"$0$0$0$2$27$"import java.nio.file.Files;"
"FileCopyUtils.java:30"$0$0$0$0$0$""
"FileCopyUtils.java:31"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"FileCopyUtils.java:32"$0$0$0$0$0$""
"FileCopyUtils.java:33"$0$0$0$1$3$"/**"
"FileCopyUtils.java:34"$0$0$0$16$88$" * Simple utility methods for file and stream copying. All copy methods use a block size"
"FileCopyUtils.java:35"$0$0$0$16$83$" * of 4096 bytes, and close all affected streams when done. A variation of the copy"
"FileCopyUtils.java:36"$0$0$0$15$87$" * methods from this class that leave streams open can be found in {@link StreamUtils}."
"FileCopyUtils.java:37"$0$0$0$1$2$" *"
"FileCopyUtils.java:38"$0$0$0$13$80$" * <p>Mainly for use within the framework, but also useful for application code."
"FileCopyUtils.java:39"$0$0$0$1$2$" *"
"FileCopyUtils.java:40"$0$0$0$4$26$" * @author Juergen Hoeller"
"FileCopyUtils.java:41"$0$0$0$4$23$" * @author Hyunjin Choi"
"FileCopyUtils.java:42"$0$0$0$3$20$" * @since 06.10.2003"
"FileCopyUtils.java:43"$0$0$0$3$19$" * @see StreamUtils"
"FileCopyUtils.java:44"$0$0$0$3$23$" * @see FileSystemUtils"
"FileCopyUtils.java:45"$0$0$0$1$3$" */"
"FileCopyUtils.java:46"$0$0$0$5$37$"public abstract class FileCopyUtils {"
"FileCopyUtils.java:47"$0$0$0$0$0$""
"FileCopyUtils.java:48"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:49"$0$0$0$9$52$"	 * The default buffer size used when copying bytes."
"FileCopyUtils.java:50"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:51"$0$0$0$7$63$"	public static final int BUFFER_SIZE = StreamUtils.BUFFER_SIZE;"
"FileCopyUtils.java:52"$0$0$0$0$0$""
"FileCopyUtils.java:53"$0$0$0$0$0$""
"FileCopyUtils.java:54"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"FileCopyUtils.java:55"$0$0$1$5$33$"	// Copy methods for java.io.File"
"FileCopyUtils.java:56"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"FileCopyUtils.java:57"$0$0$0$0$0$""
"FileCopyUtils.java:58"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:59"$0$0$0$14$71$"	 * Copy the contents of the given input File to the given output File."
"FileCopyUtils.java:60"$0$0$0$8$35$"	 * @param in the file to copy from"
"FileCopyUtils.java:61"$0$0$0$8$34$"	 * @param out the file to copy to"
"FileCopyUtils.java:62"$0$0$0$7$38$"	 * @return the number of bytes copied"
"FileCopyUtils.java:63"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:64"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:65"$0$0$0$10$63$"	public static int copy(File in, File out) throws IOException {"
"FileCopyUtils.java:66"$0$0$0$5$48$"		Assert.notNull(in, ""No input File specified"");"
"FileCopyUtils.java:67"$0$0$0$5$50$"		Assert.notNull(out, ""No output File specified"");"
"FileCopyUtils.java:68"$0$0$0$3$86$"		return copy(Files.newInputStream(in.toPath()), Files.newOutputStream(out.toPath()));"
"FileCopyUtils.java:69"$0$0$0$1$2$"	}"
"FileCopyUtils.java:70"$0$0$0$0$0$""
"FileCopyUtils.java:71"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:72"$0$0$0$14$71$"	 * Copy the contents of the given byte array to the given output File."
"FileCopyUtils.java:73"$0$0$0$9$41$"	 * @param in the byte array to copy from"
"FileCopyUtils.java:74"$0$0$0$8$34$"	 * @param out the file to copy to"
"FileCopyUtils.java:75"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:76"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:77"$0$0$0$10$66$"	public static void copy(byte[] in, File out) throws IOException {"
"FileCopyUtils.java:78"$0$0$0$6$54$"		Assert.notNull(in, ""No input byte array specified"");"
"FileCopyUtils.java:79"$0$0$0$5$50$"		Assert.notNull(out, ""No output File specified"");"
"FileCopyUtils.java:80"$0$0$0$3$74$"		copy(new ByteArrayInputStream(in), Files.newOutputStream(out.toPath()));"
"FileCopyUtils.java:81"$0$0$0$1$2$"	}"
"FileCopyUtils.java:82"$0$0$0$0$0$""
"FileCopyUtils.java:83"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:84"$0$0$0$14$68$"	 * Copy the contents of the given input File into a new byte array."
"FileCopyUtils.java:85"$0$0$0$8$35$"	 * @param in the file to copy from"
"FileCopyUtils.java:86"$0$0$0$11$54$"	 * @return the new byte array that has been copied to"
"FileCopyUtils.java:87"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:88"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:89"$0$0$0$8$67$"	public static byte[] copyToByteArray(File in) throws IOException {"
"FileCopyUtils.java:90"$0$0$0$5$48$"		Assert.notNull(in, ""No input File specified"");"
"FileCopyUtils.java:91"$0$0$0$2$60$"		return copyToByteArray(Files.newInputStream(in.toPath()));"
"FileCopyUtils.java:92"$0$0$0$1$2$"	}"
"FileCopyUtils.java:93"$0$0$0$0$0$""
"FileCopyUtils.java:94"$0$0$0$0$0$""
"FileCopyUtils.java:95"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"FileCopyUtils.java:96"$0$0$1$7$63$"	// Copy methods for java.io.InputStream / java.io.OutputStream"
"FileCopyUtils.java:97"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"FileCopyUtils.java:98"$0$0$0$0$0$""
"FileCopyUtils.java:99"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:100"$0$0$0$12$73$"	 * Copy the contents of the given InputStream to the given OutputStream."
"FileCopyUtils.java:101"$0$0$0$6$34$"	 * Closes both streams when done."
"FileCopyUtils.java:102"$0$0$0$8$37$"	 * @param in the stream to copy from"
"FileCopyUtils.java:103"$0$0$0$8$36$"	 * @param out the stream to copy to"
"FileCopyUtils.java:104"$0$0$0$7$38$"	 * @return the number of bytes copied"
"FileCopyUtils.java:105"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:106"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:107"$0$0$0$10$78$"	public static int copy(InputStream in, OutputStream out) throws IOException {"
"FileCopyUtils.java:108"$0$0$0$4$49$"		Assert.notNull(in, ""No InputStream specified"");"
"FileCopyUtils.java:109"$0$0$0$4$51$"		Assert.notNull(out, ""No OutputStream specified"");"
"FileCopyUtils.java:110"$0$0$0$0$0$""
"FileCopyUtils.java:111"$0$0$0$2$7$"		try {"
"FileCopyUtils.java:112"$0$0$0$3$36$"			return StreamUtils.copy(in, out);"
"FileCopyUtils.java:113"$0$0$0$1$3$"		}"
"FileCopyUtils.java:114"$0$0$0$2$11$"		finally {"
"FileCopyUtils.java:115"$0$0$0$1$13$"			close(in);"
"FileCopyUtils.java:116"$0$0$0$1$14$"			close(out);"
"FileCopyUtils.java:117"$0$0$0$1$3$"		}"
"FileCopyUtils.java:118"$0$0$0$1$2$"	}"
"FileCopyUtils.java:119"$0$0$0$0$0$""
"FileCopyUtils.java:120"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:121"$0$0$0$13$72$"	 * Copy the contents of the given byte array to the given OutputStream."
"FileCopyUtils.java:122"$0$0$0$6$32$"	 * Closes the stream when done."
"FileCopyUtils.java:123"$0$0$0$9$41$"	 * @param in the byte array to copy from"
"FileCopyUtils.java:124"$0$0$0$8$42$"	 * @param out the OutputStream to copy to"
"FileCopyUtils.java:125"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:126"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:127"$0$0$0$10$74$"	public static void copy(byte[] in, OutputStream out) throws IOException {"
"FileCopyUtils.java:128"$0$0$0$6$54$"		Assert.notNull(in, ""No input byte array specified"");"
"FileCopyUtils.java:129"$0$0$0$4$51$"		Assert.notNull(out, ""No OutputStream specified"");"
"FileCopyUtils.java:130"$0$0$0$0$0$""
"FileCopyUtils.java:131"$0$0$0$2$7$"		try {"
"FileCopyUtils.java:132"$0$0$0$1$17$"			out.write(in);"
"FileCopyUtils.java:133"$0$0$0$1$3$"		}"
"FileCopyUtils.java:134"$0$0$0$2$11$"		finally {"
"FileCopyUtils.java:135"$0$0$0$1$14$"			close(out);"
"FileCopyUtils.java:136"$0$0$0$1$3$"		}"
"FileCopyUtils.java:137"$0$0$0$1$2$"	}"
"FileCopyUtils.java:138"$0$0$0$0$0$""
"FileCopyUtils.java:139"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:140"$0$0$0$13$69$"	 * Copy the contents of the given InputStream into a new byte array."
"FileCopyUtils.java:141"$0$0$0$6$32$"	 * Closes the stream when done."
"FileCopyUtils.java:142"$0$0$0$14$68$"	 * @param in the stream to copy from (may be {@code null} or empty)"
"FileCopyUtils.java:143"$0$0$0$13$71$"	 * @return the new byte array that has been copied to (possibly empty)"
"FileCopyUtils.java:144"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:145"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:146"$0$0$0$9$84$"	public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {"
"FileCopyUtils.java:147"$0$0$0$5$19$"		if (in == null) {"
"FileCopyUtils.java:148"$0$0$0$3$22$"			return new byte[0];"
"FileCopyUtils.java:149"$0$0$0$1$3$"		}"
"FileCopyUtils.java:150"$0$0$0$0$0$""
"FileCopyUtils.java:151"$0$0$0$5$69$"		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE);"
"FileCopyUtils.java:152"$0$0$0$2$16$"		copy(in, out);"
"FileCopyUtils.java:153"$0$0$0$2$27$"		return out.toByteArray();"
"FileCopyUtils.java:154"$0$0$0$1$2$"	}"
"FileCopyUtils.java:155"$0$0$0$0$0$""
"FileCopyUtils.java:156"$0$0$0$0$0$""
"FileCopyUtils.java:157"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"FileCopyUtils.java:158"$0$0$1$7$52$"	// Copy methods for java.io.Reader / java.io.Writer"
"FileCopyUtils.java:159"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"FileCopyUtils.java:160"$0$0$0$0$0$""
"FileCopyUtils.java:161"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:162"$0$0$0$12$62$"	 * Copy the contents of the given Reader to the given Writer."
"FileCopyUtils.java:163"$0$0$0$5$26$"	 * Closes both when done."
"FileCopyUtils.java:164"$0$0$0$8$37$"	 * @param in the Reader to copy from"
"FileCopyUtils.java:165"$0$0$0$8$36$"	 * @param out the Writer to copy to"
"FileCopyUtils.java:166"$0$0$0$7$43$"	 * @return the number of characters copied"
"FileCopyUtils.java:167"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:168"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:169"$0$0$0$10$67$"	public static int copy(Reader in, Writer out) throws IOException {"
"FileCopyUtils.java:170"$0$0$0$4$44$"		Assert.notNull(in, ""No Reader specified"");"
"FileCopyUtils.java:171"$0$0$0$4$45$"		Assert.notNull(out, ""No Writer specified"");"
"FileCopyUtils.java:172"$0$0$0$0$0$""
"FileCopyUtils.java:173"$0$0$0$2$7$"		try {"
"FileCopyUtils.java:174"$0$0$0$4$21$"			int byteCount = 0;"
"FileCopyUtils.java:175"$0$0$0$5$41$"			char[] buffer = new char[BUFFER_SIZE];"
"FileCopyUtils.java:176"$0$0$0$4$22$"			int bytesRead = -1;"
"FileCopyUtils.java:177"$0$0$0$7$48$"			while ((bytesRead = in.read(buffer)) != -1) {"
"FileCopyUtils.java:178"$0$0$0$3$36$"				out.write(buffer, 0, bytesRead);"
"FileCopyUtils.java:179"$0$0$0$3$27$"				byteCount += bytesRead;"
"FileCopyUtils.java:180"$0$0$0$1$4$"			}"
"FileCopyUtils.java:181"$0$0$0$1$15$"			out.flush();"
"FileCopyUtils.java:182"$0$0$0$2$20$"			return byteCount;"
"FileCopyUtils.java:183"$0$0$0$1$3$"		}"
"FileCopyUtils.java:184"$0$0$0$2$11$"		finally {"
"FileCopyUtils.java:185"$0$0$0$1$13$"			close(in);"
"FileCopyUtils.java:186"$0$0$0$1$14$"			close(out);"
"FileCopyUtils.java:187"$0$0$0$1$3$"		}"
"FileCopyUtils.java:188"$0$0$0$1$2$"	}"
"FileCopyUtils.java:189"$0$0$0$0$0$""
"FileCopyUtils.java:190"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:191"$0$0$0$13$69$"	 * Copy the contents of the given String to the given output Writer."
"FileCopyUtils.java:192"$0$0$0$6$32$"	 * Closes the writer when done."
"FileCopyUtils.java:193"$0$0$0$8$37$"	 * @param in the String to copy from"
"FileCopyUtils.java:194"$0$0$0$8$36$"	 * @param out the Writer to copy to"
"FileCopyUtils.java:195"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:196"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:197"$0$0$0$10$68$"	public static void copy(String in, Writer out) throws IOException {"
"FileCopyUtils.java:198"$0$0$0$5$50$"		Assert.notNull(in, ""No input String specified"");"
"FileCopyUtils.java:199"$0$0$0$4$45$"		Assert.notNull(out, ""No Writer specified"");"
"FileCopyUtils.java:200"$0$0$0$0$0$""
"FileCopyUtils.java:201"$0$0$0$2$7$"		try {"
"FileCopyUtils.java:202"$0$0$0$1$17$"			out.write(in);"
"FileCopyUtils.java:203"$0$0$0$1$3$"		}"
"FileCopyUtils.java:204"$0$0$0$2$11$"		finally {"
"FileCopyUtils.java:205"$0$0$0$1$14$"			close(out);"
"FileCopyUtils.java:206"$0$0$0$1$3$"		}"
"FileCopyUtils.java:207"$0$0$0$1$2$"	}"
"FileCopyUtils.java:208"$0$0$0$0$0$""
"FileCopyUtils.java:209"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:210"$0$0$0$11$56$"	 * Copy the contents of the given Reader into a String."
"FileCopyUtils.java:211"$0$0$0$6$32$"	 * Closes the reader when done."
"FileCopyUtils.java:212"$0$0$0$14$68$"	 * @param in the reader to copy from (may be {@code null} or empty)"
"FileCopyUtils.java:213"$0$0$0$11$63$"	 * @return the String that has been copied to (possibly empty)"
"FileCopyUtils.java:214"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"FileCopyUtils.java:215"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:216"$0$0$0$9$76$"	public static String copyToString(@Nullable Reader in) throws IOException {"
"FileCopyUtils.java:217"$0$0$0$5$19$"		if (in == null) {"
"FileCopyUtils.java:218"$0$0$0$2$13$"			return """";"
"FileCopyUtils.java:219"$0$0$0$1$3$"		}"
"FileCopyUtils.java:220"$0$0$0$0$0$""
"FileCopyUtils.java:221"$0$0$0$5$40$"		StringWriter out = new StringWriter();"
"FileCopyUtils.java:222"$0$0$0$2$16$"		copy(in, out);"
"FileCopyUtils.java:223"$0$0$0$2$24$"		return out.toString();"
"FileCopyUtils.java:224"$0$0$0$1$2$"	}"
"FileCopyUtils.java:225"$0$0$0$0$0$""
"FileCopyUtils.java:226"$0$0$0$1$4$"	/**"
"FileCopyUtils.java:227"$0$0$0$11$76$"	 * Attempt to close the supplied {@link Closeable}, silently swallowing any"
"FileCopyUtils.java:228"$0$0$0$2$15$"	 * exceptions."
"FileCopyUtils.java:229"$0$0$0$8$51$"	 * @param closeable the {@code Closeable} to close"
"FileCopyUtils.java:230"$0$0$0$1$4$"	 */"
"FileCopyUtils.java:231"$0$0$0$6$49$"	private static void close(Closeable closeable) {"
"FileCopyUtils.java:232"$0$0$0$2$7$"		try {"
"FileCopyUtils.java:233"$0$0$0$1$21$"			closeable.close();"
"FileCopyUtils.java:234"$0$0$0$1$3$"		}"
"FileCopyUtils.java:235"$0$0$0$4$26$"		catch (IOException ex) {"
"FileCopyUtils.java:236"$0$0$1$2$12$"			// ignore"
"FileCopyUtils.java:237"$0$0$0$1$3$"		}"
"FileCopyUtils.java:238"$0$0$0$1$2$"	}"
"FileCopyUtils.java:239"$0$0$0$0$0$""
"FileCopyUtils.java:240"$0$0$0$1$1$"}"
"ToStringCreator.java:1"$0$0$0$1$2$"/*"
"ToStringCreator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ToStringCreator.java:3"$0$0$0$1$2$" *"
"ToStringCreator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ToStringCreator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ToStringCreator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ToStringCreator.java:7"$0$0$0$1$2$" *"
"ToStringCreator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ToStringCreator.java:9"$0$0$0$1$2$" *"
"ToStringCreator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ToStringCreator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ToStringCreator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ToStringCreator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ToStringCreator.java:14"$0$0$0$5$33$" * limitations under the License."
"ToStringCreator.java:15"$0$0$0$1$3$" */"
"ToStringCreator.java:16"$0$0$0$0$0$""
"ToStringCreator.java:17"$0$0$0$2$39$"package org.springframework.core.style;"
"ToStringCreator.java:18"$0$0$0$0$0$""
"ToStringCreator.java:19"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ToStringCreator.java:20"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ToStringCreator.java:21"$0$0$0$0$0$""
"ToStringCreator.java:22"$0$0$0$1$3$"/**"
"ToStringCreator.java:23"$0$0$0$9$71$" * Utility class that builds pretty-printing {@code toString()} methods"
"ToStringCreator.java:24"$0$0$0$9$74$" * with pluggable styling conventions. By default, ToStringCreator adheres"
"ToStringCreator.java:25"$0$0$0$7$54$" * to Spring's {@code toString()} styling conventions."
"ToStringCreator.java:26"$0$0$0$1$2$" *"
"ToStringCreator.java:27"$0$0$0$4$23$" * @author Keith Donald"
"ToStringCreator.java:28"$0$0$0$4$26$" * @author Juergen Hoeller"
"ToStringCreator.java:29"$0$0$0$3$15$" * @since 1.2.2"
"ToStringCreator.java:30"$0$0$0$1$3$" */"
"ToStringCreator.java:31"$0$0$0$4$30$"public class ToStringCreator {"
"ToStringCreator.java:32"$0$0$0$0$0$""
"ToStringCreator.java:33"$0$0$0$1$4$"	/**"
"ToStringCreator.java:34"$0$0$0$8$65$"	 * Default ToStringStyler instance used by this ToStringCreator."
"ToStringCreator.java:35"$0$0$0$1$4$"	 */"
"ToStringCreator.java:36"$0$0$0$6$63$"	private static final ToStringStyler DEFAULT_TO_STRING_STYLER ="
"ToStringCreator.java:37"$0$0$0$2$63$"			new DefaultToStringStyler(StylerUtils.DEFAULT_VALUE_STYLER);"
"ToStringCreator.java:38"$0$0$0$0$0$""
"ToStringCreator.java:39"$0$0$0$0$0$""
"ToStringCreator.java:40"$0$0$0$7$61$"	private final StringBuilder buffer = new StringBuilder(256);"
"ToStringCreator.java:41"$0$0$0$0$0$""
"ToStringCreator.java:42"$0$0$0$4$37$"	private final ToStringStyler styler;"
"ToStringCreator.java:43"$0$0$0$0$0$""
"ToStringCreator.java:44"$0$0$0$4$29$"	private final Object object;"
"ToStringCreator.java:45"$0$0$0$0$0$""
"ToStringCreator.java:46"$0$0$0$3$34$"	private boolean styledFirstField;"
"ToStringCreator.java:47"$0$0$0$0$0$""
"ToStringCreator.java:48"$0$0$0$0$0$""
"ToStringCreator.java:49"$0$0$0$1$4$"	/**"
"ToStringCreator.java:50"$0$0$0$8$50$"	 * Create a ToStringCreator for the given object."
"ToStringCreator.java:51"$0$0$0$8$43$"	 * @param obj the object to be stringified"
"ToStringCreator.java:52"$0$0$0$1$4$"	 */"
"ToStringCreator.java:53"$0$0$0$4$37$"	public ToStringCreator(Object obj) {"
"ToStringCreator.java:54"$0$0$0$3$35$"		this(obj, (ToStringStyler) null);"
"ToStringCreator.java:55"$0$0$0$1$2$"	}"
"ToStringCreator.java:56"$0$0$0$0$0$""
"ToStringCreator.java:57"$0$0$0$1$4$"	/**"
"ToStringCreator.java:58"$0$0$0$12$76$"	 * Create a ToStringCreator for the given object, using the provided style."
"ToStringCreator.java:59"$0$0$0$8$43$"	 * @param obj the object to be stringified"
"ToStringCreator.java:60"$0$0$0$8$73$"	 * @param styler the ValueStyler encapsulating pretty-print instructions"
"ToStringCreator.java:61"$0$0$0$1$4$"	 */"
"ToStringCreator.java:62"$0$0$0$7$67$"	public ToStringCreator(Object obj, @Nullable ValueStyler styler) {"
"ToStringCreator.java:63"$0$0$0$9$99$"		this(obj, new DefaultToStringStyler(styler != null ? styler : StylerUtils.DEFAULT_VALUE_STYLER));"
"ToStringCreator.java:64"$0$0$0$1$2$"	}"
"ToStringCreator.java:65"$0$0$0$0$0$""
"ToStringCreator.java:66"$0$0$0$1$4$"	/**"
"ToStringCreator.java:67"$0$0$0$12$76$"	 * Create a ToStringCreator for the given object, using the provided style."
"ToStringCreator.java:68"$0$0$0$8$43$"	 * @param obj the object to be stringified"
"ToStringCreator.java:69"$0$0$0$8$76$"	 * @param styler the ToStringStyler encapsulating pretty-print instructions"
"ToStringCreator.java:70"$0$0$0$1$4$"	 */"
"ToStringCreator.java:71"$0$0$0$7$70$"	public ToStringCreator(Object obj, @Nullable ToStringStyler styler) {"
"ToStringCreator.java:72"$0$0$0$10$66$"		Assert.notNull(obj, ""The object to be styled must not be null"");"
"ToStringCreator.java:73"$0$0$0$3$20$"		this.object = obj;"
"ToStringCreator.java:74"$0$0$0$9$69$"		this.styler = (styler != null ? styler : DEFAULT_TO_STRING_STYLER);"
"ToStringCreator.java:75"$0$0$0$2$51$"		this.styler.styleStart(this.buffer, this.object);"
"ToStringCreator.java:76"$0$0$0$1$2$"	}"
"ToStringCreator.java:77"$0$0$0$0$0$""
"ToStringCreator.java:78"$0$0$0$0$0$""
"ToStringCreator.java:79"$0$0$0$1$4$"	/**"
"ToStringCreator.java:80"$0$0$0$6$30$"	 * Append a byte field value."
"ToStringCreator.java:81"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:82"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:83"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:84"$0$0$0$1$4$"	 */"
"ToStringCreator.java:85"$0$0$0$7$62$"	public ToStringCreator append(String fieldName, byte value) {"
"ToStringCreator.java:86"$0$0$0$3$48$"		return append(fieldName, Byte.valueOf(value));"
"ToStringCreator.java:87"$0$0$0$1$2$"	}"
"ToStringCreator.java:88"$0$0$0$0$0$""
"ToStringCreator.java:89"$0$0$0$1$4$"	/**"
"ToStringCreator.java:90"$0$0$0$6$31$"	 * Append a short field value."
"ToStringCreator.java:91"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:92"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:93"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:94"$0$0$0$1$4$"	 */"
"ToStringCreator.java:95"$0$0$0$7$63$"	public ToStringCreator append(String fieldName, short value) {"
"ToStringCreator.java:96"$0$0$0$3$49$"		return append(fieldName, Short.valueOf(value));"
"ToStringCreator.java:97"$0$0$0$1$2$"	}"
"ToStringCreator.java:98"$0$0$0$0$0$""
"ToStringCreator.java:99"$0$0$0$1$4$"	/**"
"ToStringCreator.java:100"$0$0$0$6$33$"	 * Append a integer field value."
"ToStringCreator.java:101"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:102"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:103"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:104"$0$0$0$1$4$"	 */"
"ToStringCreator.java:105"$0$0$0$7$61$"	public ToStringCreator append(String fieldName, int value) {"
"ToStringCreator.java:106"$0$0$0$3$51$"		return append(fieldName, Integer.valueOf(value));"
"ToStringCreator.java:107"$0$0$0$1$2$"	}"
"ToStringCreator.java:108"$0$0$0$0$0$""
"ToStringCreator.java:109"$0$0$0$1$4$"	/**"
"ToStringCreator.java:110"$0$0$0$6$30$"	 * Append a long field value."
"ToStringCreator.java:111"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:112"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:113"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:114"$0$0$0$1$4$"	 */"
"ToStringCreator.java:115"$0$0$0$7$62$"	public ToStringCreator append(String fieldName, long value) {"
"ToStringCreator.java:116"$0$0$0$3$48$"		return append(fieldName, Long.valueOf(value));"
"ToStringCreator.java:117"$0$0$0$1$2$"	}"
"ToStringCreator.java:118"$0$0$0$0$0$""
"ToStringCreator.java:119"$0$0$0$1$4$"	/**"
"ToStringCreator.java:120"$0$0$0$6$31$"	 * Append a float field value."
"ToStringCreator.java:121"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:122"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:123"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:124"$0$0$0$1$4$"	 */"
"ToStringCreator.java:125"$0$0$0$7$63$"	public ToStringCreator append(String fieldName, float value) {"
"ToStringCreator.java:126"$0$0$0$3$49$"		return append(fieldName, Float.valueOf(value));"
"ToStringCreator.java:127"$0$0$0$1$2$"	}"
"ToStringCreator.java:128"$0$0$0$0$0$""
"ToStringCreator.java:129"$0$0$0$1$4$"	/**"
"ToStringCreator.java:130"$0$0$0$6$32$"	 * Append a double field value."
"ToStringCreator.java:131"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:132"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:133"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:134"$0$0$0$1$4$"	 */"
"ToStringCreator.java:135"$0$0$0$7$64$"	public ToStringCreator append(String fieldName, double value) {"
"ToStringCreator.java:136"$0$0$0$3$50$"		return append(fieldName, Double.valueOf(value));"
"ToStringCreator.java:137"$0$0$0$1$2$"	}"
"ToStringCreator.java:138"$0$0$0$0$0$""
"ToStringCreator.java:139"$0$0$0$1$4$"	/**"
"ToStringCreator.java:140"$0$0$0$6$33$"	 * Append a boolean field value."
"ToStringCreator.java:141"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:142"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:143"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:144"$0$0$0$1$4$"	 */"
"ToStringCreator.java:145"$0$0$0$7$65$"	public ToStringCreator append(String fieldName, boolean value) {"
"ToStringCreator.java:146"$0$0$0$3$51$"		return append(fieldName, Boolean.valueOf(value));"
"ToStringCreator.java:147"$0$0$0$1$2$"	}"
"ToStringCreator.java:148"$0$0$0$0$0$""
"ToStringCreator.java:149"$0$0$0$1$4$"	/**"
"ToStringCreator.java:150"$0$0$0$5$25$"	 * Append a field value."
"ToStringCreator.java:151"$0$0$0$13$76$"	 * @param fieldName the name of the field, usually the member variable name"
"ToStringCreator.java:152"$0$0$0$6$32$"	 * @param value the field value"
"ToStringCreator.java:153"$0$0$0$6$42$"	 * @return this, to support call-chaining"
"ToStringCreator.java:154"$0$0$0$1$4$"	 */"
"ToStringCreator.java:155"$0$0$0$8$74$"	public ToStringCreator append(String fieldName, @Nullable Object value) {"
"ToStringCreator.java:156"$0$0$0$1$35$"		printFieldSeparatorIfNecessary();"
"ToStringCreator.java:157"$0$0$0$3$56$"		this.styler.styleField(this.buffer, fieldName, value);"
"ToStringCreator.java:158"$0$0$0$2$14$"		return this;"
"ToStringCreator.java:159"$0$0$0$1$2$"	}"
"ToStringCreator.java:160"$0$0$0$0$0$""
"ToStringCreator.java:161"$0$0$0$4$48$"	private void printFieldSeparatorIfNecessary() {"
"ToStringCreator.java:162"$0$0$0$3$30$"		if (this.styledFirstField) {"
"ToStringCreator.java:163"$0$0$0$1$48$"			this.styler.styleFieldSeparator(this.buffer);"
"ToStringCreator.java:164"$0$0$0$1$3$"		}"
"ToStringCreator.java:165"$0$0$0$2$8$"		else {"
"ToStringCreator.java:166"$0$0$0$3$32$"			this.styledFirstField = true;"
"ToStringCreator.java:167"$0$0$0$1$3$"		}"
"ToStringCreator.java:168"$0$0$0$1$2$"	}"
"ToStringCreator.java:169"$0$0$0$0$0$""
"ToStringCreator.java:170"$0$0$0$1$4$"	/**"
"ToStringCreator.java:171"$0$0$0$5$30$"	 * Append the provided value."
"ToStringCreator.java:172"$0$0$0$7$36$"	 * @param value the value to append"
"ToStringCreator.java:173"$0$0$0$6$43$"	 * @return this, to support call-chaining."
"ToStringCreator.java:174"$0$0$0$1$4$"	 */"
"ToStringCreator.java:175"$0$0$0$5$46$"	public ToStringCreator append(Object value) {"
"ToStringCreator.java:176"$0$0$0$2$45$"		this.styler.styleValue(this.buffer, value);"
"ToStringCreator.java:177"$0$0$0$2$14$"		return this;"
"ToStringCreator.java:178"$0$0$0$1$2$"	}"
"ToStringCreator.java:179"$0$0$0$0$0$""
"ToStringCreator.java:180"$0$0$0$0$0$""
"ToStringCreator.java:181"$0$0$0$1$4$"	/**"
"ToStringCreator.java:182"$0$0$0$9$69$"	 * Return the String representation that this ToStringCreator built."
"ToStringCreator.java:183"$0$0$0$1$4$"	 */"
"ToStringCreator.java:184"$0$0$0$1$10$"	@Override"
"ToStringCreator.java:185"$0$0$0$4$27$"	public String toString() {"
"ToStringCreator.java:186"$0$0$0$2$49$"		this.styler.styleEnd(this.buffer, this.object);"
"ToStringCreator.java:187"$0$0$0$2$32$"		return this.buffer.toString();"
"ToStringCreator.java:188"$0$0$0$1$2$"	}"
"ToStringCreator.java:189"$0$0$0$0$0$""
"ToStringCreator.java:190"$0$0$0$1$1$"}"
"CollectionToCollectionConverter.java:1"$0$0$0$1$2$"/*"
"CollectionToCollectionConverter.java:2"$0$0$0$8$54$" * Copyright 2002-2014 the original author or authors."
"CollectionToCollectionConverter.java:3"$0$0$0$1$2$" *"
"CollectionToCollectionConverter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"CollectionToCollectionConverter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"CollectionToCollectionConverter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"CollectionToCollectionConverter.java:7"$0$0$0$1$2$" *"
"CollectionToCollectionConverter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"CollectionToCollectionConverter.java:9"$0$0$0$1$2$" *"
"CollectionToCollectionConverter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"CollectionToCollectionConverter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"CollectionToCollectionConverter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"CollectionToCollectionConverter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"CollectionToCollectionConverter.java:14"$0$0$0$5$33$" * limitations under the License."
"CollectionToCollectionConverter.java:15"$0$0$0$1$3$" */"
"CollectionToCollectionConverter.java:16"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:17"$0$0$0$2$49$"package org.springframework.core.convert.support;"
"CollectionToCollectionConverter.java:18"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:19"$0$0$0$2$28$"import java.util.Collection;"
"CollectionToCollectionConverter.java:20"$0$0$0$2$29$"import java.util.Collections;"
"CollectionToCollectionConverter.java:21"$0$0$0$2$21$"import java.util.Set;"
"CollectionToCollectionConverter.java:22"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:23"$0$0$0$2$50$"import org.springframework.core.CollectionFactory;"
"CollectionToCollectionConverter.java:24"$0$0$0$2$58$"import org.springframework.core.convert.ConversionService;"
"CollectionToCollectionConverter.java:25"$0$0$0$2$55$"import org.springframework.core.convert.TypeDescriptor;"
"CollectionToCollectionConverter.java:26"$0$0$0$2$78$"import org.springframework.core.convert.converter.ConditionalGenericConverter;"
"CollectionToCollectionConverter.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"CollectionToCollectionConverter.java:28"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:29"$0$0$0$1$3$"/**"
"CollectionToCollectionConverter.java:30"$0$0$0$8$52$" * Converts from a Collection to another Collection."
"CollectionToCollectionConverter.java:31"$0$0$0$1$2$" *"
"CollectionToCollectionConverter.java:32"$1$0$0$16$90$" * <p>First, creates a new Collection of the requested targetType with a size equal to the"
"CollectionToCollectionConverter.java:33"$0$0$0$16$90$" * size of the source Collection. Then copies each element in the source collection to the"
"CollectionToCollectionConverter.java:34"$1$0$0$12$85$" * target collection. Will perform an element conversion from the source collection's"
"CollectionToCollectionConverter.java:35"$1$0$0$11$81$" * parameterized type to the target collection's parameterized type if necessary."
"CollectionToCollectionConverter.java:36"$0$0$0$1$2$" *"
"CollectionToCollectionConverter.java:37"$0$0$0$4$23$" * @author Keith Donald"
"CollectionToCollectionConverter.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"CollectionToCollectionConverter.java:39"$0$0$0$3$13$" * @since 3.0"
"CollectionToCollectionConverter.java:40"$0$0$0$1$3$" */"
"CollectionToCollectionConverter.java:41"$0$0$0$6$84$"final class CollectionToCollectionConverter implements ConditionalGenericConverter {"
"CollectionToCollectionConverter.java:42"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:43"$0$0$0$4$51$"	private final ConversionService conversionService;"
"CollectionToCollectionConverter.java:44"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:45"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:46"$0$0$0$4$78$"	public CollectionToCollectionConverter(ConversionService conversionService) {"
"CollectionToCollectionConverter.java:47"$0$0$0$3$45$"		this.conversionService = conversionService;"
"CollectionToCollectionConverter.java:48"$0$0$0$1$2$"	}"
"CollectionToCollectionConverter.java:49"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:50"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:51"$0$0$0$1$10$"	@Override"
"CollectionToCollectionConverter.java:52"$1$0$0$4$52$"	public Set<ConvertiblePair> getConvertibleTypes() {"
"CollectionToCollectionConverter.java:53"$0$0$0$4$88$"		return Collections.singleton(new ConvertiblePair(Collection.class, Collection.class));"
"CollectionToCollectionConverter.java:54"$0$0$0$1$2$"	}"
"CollectionToCollectionConverter.java:55"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:56"$0$0$0$1$10$"	@Override"
"CollectionToCollectionConverter.java:57"$1$0$0$7$79$"	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"CollectionToCollectionConverter.java:58"$0$0$0$2$44$"		return ConversionUtils.canConvertElements("
"CollectionToCollectionConverter.java:59"$3$0$0$3$106$"				sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);"
"CollectionToCollectionConverter.java:60"$0$0$0$1$2$"	}"
"CollectionToCollectionConverter.java:61"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:62"$0$0$0$1$10$"	@Override"
"CollectionToCollectionConverter.java:63"$0$0$0$1$10$"	@Nullable"
"CollectionToCollectionConverter.java:64"$1$0$0$10$103$"	public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {"
"CollectionToCollectionConverter.java:65"$0$0$0$5$23$"		if (source == null) {"
"CollectionToCollectionConverter.java:66"$0$0$0$2$15$"			return null;"
"CollectionToCollectionConverter.java:67"$0$0$0$1$3$"		}"
"CollectionToCollectionConverter.java:68"$0$0$0$5$58$"		Collection<?> sourceCollection = (Collection<?>) source;"
"CollectionToCollectionConverter.java:69"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:70"$0$0$1$4$28$"		// Shortcut if possible..."
"CollectionToCollectionConverter.java:71"$2$0$0$4$66$"		boolean copyRequired = !targetType.getType().isInstance(source);"
"CollectionToCollectionConverter.java:72"$0$0$0$5$52$"		if (!copyRequired && sourceCollection.isEmpty()) {"
"CollectionToCollectionConverter.java:73"$0$0$0$2$17$"			return source;"
"CollectionToCollectionConverter.java:74"$0$0$0$1$3$"		}"
"CollectionToCollectionConverter.java:75"$2$0$0$4$69$"		TypeDescriptor elementDesc = targetType.getElementTypeDescriptor();"
"CollectionToCollectionConverter.java:76"$0$0$0$7$45$"		if (elementDesc == null && !copyRequired) {"
"CollectionToCollectionConverter.java:77"$0$0$0$2$17$"			return source;"
"CollectionToCollectionConverter.java:78"$0$0$0$1$3$"		}"
"CollectionToCollectionConverter.java:79"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:80"$0$0$1$21$111$"		// At this point, we need a collection copy in any case, even if just for finding out about element copies..."
"CollectionToCollectionConverter.java:81"$3$0$0$4$86$"		Collection<Object> target = CollectionFactory.createCollection(targetType.getType(),"
"CollectionToCollectionConverter.java:82"$1$0$0$8$83$"				(elementDesc != null ? elementDesc.getType() : null), sourceCollection.size());"
"CollectionToCollectionConverter.java:83"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:84"$0$0$0$5$28$"		if (elementDesc == null) {"
"CollectionToCollectionConverter.java:85"$1$0$0$1$35$"			target.addAll(sourceCollection);"
"CollectionToCollectionConverter.java:86"$0$0$0$1$3$"		}"
"CollectionToCollectionConverter.java:87"$0$0$0$2$8$"		else {"
"CollectionToCollectionConverter.java:88"$0$0$0$6$50$"			for (Object sourceElement : sourceCollection) {"
"CollectionToCollectionConverter.java:89"$1$0$0$4$72$"				Object targetElement = this.conversionService.convert(sourceElement,"
"CollectionToCollectionConverter.java:90"$0$0$0$2$68$"						sourceType.elementTypeDescriptor(sourceElement), elementDesc);"
"CollectionToCollectionConverter.java:91"$2$0$0$1$30$"				target.add(targetElement);"
"CollectionToCollectionConverter.java:92"$1$0$0$5$41$"				if (sourceElement != targetElement) {"
"CollectionToCollectionConverter.java:93"$0$0$0$3$25$"					copyRequired = true;"
"CollectionToCollectionConverter.java:94"$0$0$0$1$5$"				}"
"CollectionToCollectionConverter.java:95"$0$0$0$1$4$"			}"
"CollectionToCollectionConverter.java:96"$0$0$0$1$3$"		}"
"CollectionToCollectionConverter.java:97"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:98"$1$0$0$6$42$"		return (copyRequired ? target : source);"
"CollectionToCollectionConverter.java:99"$0$0$0$1$2$"	}"
"CollectionToCollectionConverter.java:100"$0$0$0$0$0$""
"CollectionToCollectionConverter.java:101"$0$0$0$1$1$"}"
"JOptCommandLinePropertySource.java:1"$0$0$0$1$2$"/*"
"JOptCommandLinePropertySource.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"JOptCommandLinePropertySource.java:3"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"JOptCommandLinePropertySource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"JOptCommandLinePropertySource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"JOptCommandLinePropertySource.java:7"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"JOptCommandLinePropertySource.java:9"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"JOptCommandLinePropertySource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"JOptCommandLinePropertySource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"JOptCommandLinePropertySource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"JOptCommandLinePropertySource.java:14"$0$0$0$5$33$" * limitations under the License."
"JOptCommandLinePropertySource.java:15"$0$0$0$1$3$" */"
"JOptCommandLinePropertySource.java:16"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"JOptCommandLinePropertySource.java:18"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"JOptCommandLinePropertySource.java:20"$0$0$0$2$29$"import java.util.Collections;"
"JOptCommandLinePropertySource.java:21"$0$0$0$2$22$"import java.util.List;"
"JOptCommandLinePropertySource.java:22"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:23"$0$0$0$2$28$"import joptsimple.OptionSet;"
"JOptCommandLinePropertySource.java:24"$0$0$0$2$29$"import joptsimple.OptionSpec;"
"JOptCommandLinePropertySource.java:25"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"JOptCommandLinePropertySource.java:27"$0$0$0$2$48$"import org.springframework.util.CollectionUtils;"
"JOptCommandLinePropertySource.java:28"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"JOptCommandLinePropertySource.java:29"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:30"$0$0$0$1$3$"/**"
"JOptCommandLinePropertySource.java:31"$0$0$0$10$87$" * {@link CommandLinePropertySource} implementation backed by a JOpt {@link OptionSet}."
"JOptCommandLinePropertySource.java:32"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:33"$0$0$0$3$25$" * <h2>Typical usage</h2>"
"JOptCommandLinePropertySource.java:34"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:35"$0$0$0$13$90$" * Configure and execute an {@code OptionParser} against the {@code String[]} of arguments"
"JOptCommandLinePropertySource.java:36"$0$0$0$12$90$" * supplied to the {@code main} method, and create a {@link JOptCommandLinePropertySource}"
"JOptCommandLinePropertySource.java:37"$0$0$0$7$48$" * using the resulting {@code OptionSet} object:"
"JOptCommandLinePropertySource.java:38"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:39"$0$0$0$3$21$" * <pre class=""code"">"
"JOptCommandLinePropertySource.java:40"$0$0$0$7$43$" * public static void main(String[] args) {"
"JOptCommandLinePropertySource.java:41"$0$0$0$6$48$" *     OptionParser parser = new OptionParser();"
"JOptCommandLinePropertySource.java:42"$0$0$0$2$33$" *     parser.accepts(""option1"");"
"JOptCommandLinePropertySource.java:43"$0$0$0$2$51$" *     parser.accepts(""option2"").withRequiredArg();"
"JOptCommandLinePropertySource.java:44"$0$0$0$5$46$" *     OptionSet options = parser.parse(args);"
"JOptCommandLinePropertySource.java:45"$0$0$0$6$73$" *     PropertySource<?> ps = new JOptCommandLinePropertySource(options);"
"JOptCommandLinePropertySource.java:46"$0$0$0$3$13$" *     // ..."
"JOptCommandLinePropertySource.java:47"$0$0$0$2$10$" * }</pre>"
"JOptCommandLinePropertySource.java:48"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:49"$0$0$0$9$77$" * See {@link CommandLinePropertySource} for complete general usage examples."
"JOptCommandLinePropertySource.java:50"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:51"$0$0$0$14$83$" * <p>Requires JOpt Simple version 4.3 or higher. Tested against JOpt up until 5.0."
"JOptCommandLinePropertySource.java:52"$0$0$0$1$2$" *"
"JOptCommandLinePropertySource.java:53"$0$0$0$4$22$" * @author Chris Beams"
"JOptCommandLinePropertySource.java:54"$0$0$0$4$26$" * @author Juergen Hoeller"
"JOptCommandLinePropertySource.java:55"$0$0$0$4$20$" * @author Dave Syer"
"JOptCommandLinePropertySource.java:56"$0$0$0$3$13$" * @since 3.1"
"JOptCommandLinePropertySource.java:57"$0$0$0$3$33$" * @see CommandLinePropertySource"
"JOptCommandLinePropertySource.java:58"$0$0$0$3$31$" * @see joptsimple.OptionParser"
"JOptCommandLinePropertySource.java:59"$0$0$0$3$28$" * @see joptsimple.OptionSet"
"JOptCommandLinePropertySource.java:60"$0$0$0$1$3$" */"
"JOptCommandLinePropertySource.java:61"$0$0$0$6$89$"public class JOptCommandLinePropertySource extends CommandLinePropertySource<OptionSet> {"
"JOptCommandLinePropertySource.java:62"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:63"$0$0$0$1$4$"	/**"
"JOptCommandLinePropertySource.java:64"$0$0$0$10$78$"	 * Create a new {@code JOptCommandLinePropertySource} having the default name"
"JOptCommandLinePropertySource.java:65"$0$0$0$8$46$"	 * and backed by the given {@code OptionSet}."
"JOptCommandLinePropertySource.java:66"$0$0$0$3$68$"	 * @see CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME"
"JOptCommandLinePropertySource.java:67"$0$0$0$3$68$"	 * @see CommandLinePropertySource#CommandLinePropertySource(Object)"
"JOptCommandLinePropertySource.java:68"$0$0$0$1$4$"	 */"
"JOptCommandLinePropertySource.java:69"$0$0$0$4$58$"	public JOptCommandLinePropertySource(OptionSet options) {"
"JOptCommandLinePropertySource.java:70"$0$0$0$1$17$"		super(options);"
"JOptCommandLinePropertySource.java:71"$0$0$0$1$2$"	}"
"JOptCommandLinePropertySource.java:72"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:73"$0$0$0$1$4$"	/**"
"JOptCommandLinePropertySource.java:74"$0$0$0$10$76$"	 * Create a new {@code JOptCommandLinePropertySource} having the given name"
"JOptCommandLinePropertySource.java:75"$0$0$0$8$46$"	 * and backed by the given {@code OptionSet}."
"JOptCommandLinePropertySource.java:76"$0$0$0$1$4$"	 */"
"JOptCommandLinePropertySource.java:77"$0$0$0$6$71$"	public JOptCommandLinePropertySource(String name, OptionSet options) {"
"JOptCommandLinePropertySource.java:78"$0$0$0$2$23$"		super(name, options);"
"JOptCommandLinePropertySource.java:79"$0$0$0$1$2$"	}"
"JOptCommandLinePropertySource.java:80"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:81"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:82"$0$0$0$1$10$"	@Override"
"JOptCommandLinePropertySource.java:83"$0$0$0$5$48$"	protected boolean containsOption(String name) {"
"JOptCommandLinePropertySource.java:84"$0$0$0$2$31$"		return this.source.has(name);"
"JOptCommandLinePropertySource.java:85"$0$0$0$1$2$"	}"
"JOptCommandLinePropertySource.java:86"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:87"$0$0$0$1$10$"	@Override"
"JOptCommandLinePropertySource.java:88"$1$0$0$4$37$"	public String[] getPropertyNames() {"
"JOptCommandLinePropertySource.java:89"$0$0$0$5$41$"		List<String> names = new ArrayList<>();"
"JOptCommandLinePropertySource.java:90"$0$0$0$6$50$"		for (OptionSpec<?> spec : this.source.specs()) {"
"JOptCommandLinePropertySource.java:91"$0$0$0$4$67$"			String lastOption = CollectionUtils.lastElement(spec.options());"
"JOptCommandLinePropertySource.java:92"$0$0$0$5$28$"			if (lastOption != null) {"
"JOptCommandLinePropertySource.java:93"$0$0$1$9$52$"				// Only the longest name is used for enumerating"
"JOptCommandLinePropertySource.java:94"$0$0$0$1$26$"				names.add(lastOption);"
"JOptCommandLinePropertySource.java:95"$0$0$0$1$4$"			}"
"JOptCommandLinePropertySource.java:96"$0$0$0$1$3$"		}"
"JOptCommandLinePropertySource.java:97"$0$0$0$2$42$"		return StringUtils.toStringArray(names);"
"JOptCommandLinePropertySource.java:98"$0$0$0$1$2$"	}"
"JOptCommandLinePropertySource.java:99"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:100"$0$0$0$1$10$"	@Override"
"JOptCommandLinePropertySource.java:101"$0$0$0$1$10$"	@Nullable"
"JOptCommandLinePropertySource.java:102"$1$0$0$5$51$"	public List<String> getOptionValues(String name) {"
"JOptCommandLinePropertySource.java:103"$0$0$0$4$49$"		List<?> argValues = this.source.valuesOf(name);"
"JOptCommandLinePropertySource.java:104"$0$0$0$5$51$"		List<String> stringArgValues = new ArrayList<>();"
"JOptCommandLinePropertySource.java:105"$0$0$0$6$37$"		for (Object argValue : argValues) {"
"JOptCommandLinePropertySource.java:106"$0$0$0$1$44$"			stringArgValues.add(argValue.toString());"
"JOptCommandLinePropertySource.java:107"$0$0$0$1$3$"		}"
"JOptCommandLinePropertySource.java:108"$0$0$0$3$34$"		if (stringArgValues.isEmpty()) {"
"JOptCommandLinePropertySource.java:109"$0$0$0$6$67$"			return (this.source.has(name) ? Collections.emptyList() : null);"
"JOptCommandLinePropertySource.java:110"$0$0$0$1$3$"		}"
"JOptCommandLinePropertySource.java:111"$0$0$0$2$55$"		return Collections.unmodifiableList(stringArgValues);"
"JOptCommandLinePropertySource.java:112"$0$0$0$1$2$"	}"
"JOptCommandLinePropertySource.java:113"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:114"$0$0$0$1$10$"	@Override"
"JOptCommandLinePropertySource.java:115"$1$0$0$4$44$"	protected List<String> getNonOptionArgs() {"
"JOptCommandLinePropertySource.java:116"$0$0$0$4$55$"		List<?> argValues = this.source.nonOptionArguments();"
"JOptCommandLinePropertySource.java:117"$0$0$0$5$51$"		List<String> stringArgValues = new ArrayList<>();"
"JOptCommandLinePropertySource.java:118"$0$0$0$6$37$"		for (Object argValue : argValues) {"
"JOptCommandLinePropertySource.java:119"$0$0$0$1$44$"			stringArgValues.add(argValue.toString());"
"JOptCommandLinePropertySource.java:120"$0$0$0$1$3$"		}"
"JOptCommandLinePropertySource.java:121"$0$0$0$5$63$"		return (stringArgValues.isEmpty() ? Collections.emptyList() :"
"JOptCommandLinePropertySource.java:122"$0$0$0$1$51$"				Collections.unmodifiableList(stringArgValues));"
"JOptCommandLinePropertySource.java:123"$0$0$0$1$2$"	}"
"JOptCommandLinePropertySource.java:124"$0$0$0$0$0$""
"JOptCommandLinePropertySource.java:125"$0$0$0$1$1$"}"
"Resource.java:1"$0$0$0$1$2$"/*"
"Resource.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"Resource.java:3"$0$0$0$1$2$" *"
"Resource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"Resource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"Resource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"Resource.java:7"$0$0$0$1$2$" *"
"Resource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"Resource.java:9"$0$0$0$1$2$" *"
"Resource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"Resource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"Resource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"Resource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"Resource.java:14"$0$0$0$5$33$" * limitations under the License."
"Resource.java:15"$0$0$0$1$3$" */"
"Resource.java:16"$0$0$0$0$0$""
"Resource.java:17"$0$0$0$2$36$"package org.springframework.core.io;"
"Resource.java:18"$0$0$0$0$0$""
"Resource.java:19"$0$0$0$2$20$"import java.io.File;"
"Resource.java:20"$0$0$0$2$27$"import java.io.IOException;"
"Resource.java:21"$0$0$0$2$27$"import java.io.InputStream;"
"Resource.java:22"$0$0$0$2$20$"import java.net.URI;"
"Resource.java:23"$0$0$0$2$20$"import java.net.URL;"
"Resource.java:24"$0$0$0$2$34$"import java.nio.channels.Channels;"
"Resource.java:25"$0$0$0$2$45$"import java.nio.channels.ReadableByteChannel;"
"Resource.java:26"$0$0$0$0$0$""
"Resource.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"Resource.java:28"$0$0$0$0$0$""
"Resource.java:29"$0$0$0$1$3$"/**"
"Resource.java:30"$0$0$0$11$69$" * Interface for a resource descriptor that abstracts from the actual"
"Resource.java:31"$0$0$0$13$70$" * type of underlying resource, such as a file or class path resource."
"Resource.java:32"$0$0$0$1$2$" *"
"Resource.java:33"$0$0$0$13$69$" * <p>An InputStream can be opened for every resource if it exists in"
"Resource.java:34"$0$0$0$14$67$" * physical form, but a URL or File handle can just be returned for"
"Resource.java:35"$0$0$0$8$69$" * certain resources. The actual behavior is implementation-specific."
"Resource.java:36"$0$0$0$1$2$" *"
"Resource.java:37"$0$0$0$4$26$" * @author Juergen Hoeller"
"Resource.java:38"$0$0$0$3$20$" * @since 28.12.2003"
"Resource.java:39"$1$0$0$3$25$" * @see #getInputStream()"
"Resource.java:40"$1$0$0$3$17$" * @see #getURL()"
"Resource.java:41"$1$0$0$3$17$" * @see #getURI()"
"Resource.java:42"$1$0$0$3$18$" * @see #getFile()"
"Resource.java:43"$0$0$0$3$24$" * @see WritableResource"
"Resource.java:44"$0$0$0$3$23$" * @see ContextResource"
"Resource.java:45"$0$0$0$3$19$" * @see UrlResource"
"Resource.java:46"$0$0$0$3$23$" * @see FileUrlResource"
"Resource.java:47"$0$0$0$3$26$" * @see FileSystemResource"
"Resource.java:48"$0$0$0$3$25$" * @see ClassPathResource"
"Resource.java:49"$0$0$0$3$25$" * @see ByteArrayResource"
"Resource.java:50"$0$0$0$3$27$" * @see InputStreamResource"
"Resource.java:51"$0$0$0$1$3$" */"
"Resource.java:52"$0$0$0$6$53$"public interface Resource extends InputStreamSource {"
"Resource.java:53"$0$0$0$0$0$""
"Resource.java:54"$0$0$0$1$4$"	/**"
"Resource.java:55"$0$0$0$10$69$"	 * Determine whether this resource actually exists in physical form."
"Resource.java:56"$0$0$0$10$69$"	 * <p>This method performs a definitive existence check, whereas the"
"Resource.java:57"$0$0$0$11$66$"	 * existence of a {@code Resource} handle only guarantees a valid"
"Resource.java:58"$0$0$0$3$22$"	 * descriptor handle."
"Resource.java:59"$0$0$0$1$4$"	 */"
"Resource.java:60"$0$0$0$2$18$"	boolean exists();"
"Resource.java:61"$0$0$0$0$0$""
"Resource.java:62"$0$0$0$1$4$"	/**"
"Resource.java:63"$0$0$0$12$72$"	 * Indicate whether non-empty contents of this resource can be read via"
"Resource.java:64"$1$0$0$3$30$"	 * {@link #getInputStream()}."
"Resource.java:65"$0$0$0$11$71$"	 * <p>Will be {@code true} for typical resource descriptors that exist"
"Resource.java:66"$0$0$0$11$68$"	 * since it strictly implies {@link #exists()} semantics as of 5.1."
"Resource.java:67"$0$0$0$11$67$"	 * Note that actual content reading may still fail when attempted."
"Resource.java:68"$0$0$0$11$64$"	 * However, a value of {@code false} is a definitive indication"
"Resource.java:69"$0$0$0$8$45$"	 * that the resource content cannot be read."
"Resource.java:70"$1$0$0$3$26$"	 * @see #getInputStream()"
"Resource.java:71"$0$0$0$3$18$"	 * @see #exists()"
"Resource.java:72"$0$0$0$1$4$"	 */"
"Resource.java:73"$0$0$0$4$31$"	default boolean isReadable() {"
"Resource.java:74"$0$0$0$2$18$"		return exists();"
"Resource.java:75"$0$0$0$1$2$"	}"
"Resource.java:76"$0$0$0$0$0$""
"Resource.java:77"$0$0$0$1$4$"	/**"
"Resource.java:78"$0$0$0$12$75$"	 * Indicate whether this resource represents a handle with an open stream."
"Resource.java:79"$0$0$0$11$67$"	 * If {@code true}, the InputStream cannot be read multiple times,"
"Resource.java:80"$0$0$0$11$56$"	 * and must be read and closed to avoid resource leaks."
"Resource.java:81"$0$0$0$9$62$"	 * <p>Will be {@code false} for typical resource descriptors."
"Resource.java:82"$0$0$0$1$4$"	 */"
"Resource.java:83"$0$0$0$4$27$"	default boolean isOpen() {"
"Resource.java:84"$0$0$0$2$15$"		return false;"
"Resource.java:85"$0$0$0$1$2$"	}"
"Resource.java:86"$0$0$0$0$0$""
"Resource.java:87"$0$0$0$1$4$"	/**"
"Resource.java:88"$0$0$0$12$71$"	 * Determine whether this resource represents a file in a file system."
"Resource.java:89"$0$0$0$12$70$"	 * A value of {@code true} strongly suggests (but does not guarantee)"
"Resource.java:90"$1$0$0$8$48$"	 * that a {@link #getFile()} call will succeed."
"Resource.java:91"$0$0$0$8$55$"	 * <p>This is conservatively {@code false} by default."
"Resource.java:92"$0$0$0$3$14$"	 * @since 5.0"
"Resource.java:93"$1$0$0$3$19$"	 * @see #getFile()"
"Resource.java:94"$0$0$0$1$4$"	 */"
"Resource.java:95"$0$0$0$4$27$"	default boolean isFile() {"
"Resource.java:96"$0$0$0$2$15$"		return false;"
"Resource.java:97"$0$0$0$1$2$"	}"
"Resource.java:98"$0$0$0$0$0$""
"Resource.java:99"$0$0$0$1$4$"	/**"
"Resource.java:100"$0$0$0$8$42$"	 * Return a URL handle for this resource."
"Resource.java:101"$0$0$0$11$66$"	 * @throws IOException if the resource cannot be resolved as URL,"
"Resource.java:102"$0$0$0$10$55$"	 * i.e. if the resource is not available as descriptor"
"Resource.java:103"$0$0$0$1$4$"	 */"
"Resource.java:104"$1$0$0$4$33$"	URL getURL() throws IOException;"
"Resource.java:105"$0$0$0$0$0$""
"Resource.java:106"$0$0$0$1$4$"	/**"
"Resource.java:107"$0$0$0$8$42$"	 * Return a URI handle for this resource."
"Resource.java:108"$0$0$0$11$66$"	 * @throws IOException if the resource cannot be resolved as URI,"
"Resource.java:109"$0$0$0$10$55$"	 * i.e. if the resource is not available as descriptor"
"Resource.java:110"$0$0$0$3$14$"	 * @since 2.5"
"Resource.java:111"$0$0$0$1$4$"	 */"
"Resource.java:112"$1$0$0$4$33$"	URI getURI() throws IOException;"
"Resource.java:113"$0$0$0$0$0$""
"Resource.java:114"$0$0$0$1$4$"	/**"
"Resource.java:115"$0$0$0$8$43$"	 * Return a File handle for this resource."
"Resource.java:116"$0$0$0$10$79$"	 * @throws java.io.FileNotFoundException if the resource cannot be resolved as"
"Resource.java:117"$0$0$0$15$78$"	 * absolute file path, i.e. if the resource is not available in a file system"
"Resource.java:118"$0$0$0$9$70$"	 * @throws IOException in case of general resolution/reading failures"
"Resource.java:119"$1$0$0$3$26$"	 * @see #getInputStream()"
"Resource.java:120"$0$0$0$1$4$"	 */"
"Resource.java:121"$1$0$0$4$35$"	File getFile() throws IOException;"
"Resource.java:122"$0$0$0$0$0$""
"Resource.java:123"$0$0$0$1$4$"	/**"
"Resource.java:124"$0$0$0$5$41$"	 * Return a {@link ReadableByteChannel}."
"Resource.java:125"$0$0$0$11$68$"	 * <p>It is expected that each call creates a <i>fresh</i> channel."
"Resource.java:126"$0$0$0$7$82$"	 * <p>The default implementation returns {@link Channels#newChannel(InputStream)}"
"Resource.java:127"$1$0$0$7$49$"	 * with the result of {@link #getInputStream()}."
"Resource.java:128"$0$0$0$14$83$"	 * @return the byte channel for the underlying resource (must not be {@code null})"
"Resource.java:129"$0$0$0$9$82$"	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist"
"Resource.java:130"$0$0$0$11$66$"	 * @throws IOException if the content channel could not be opened"
"Resource.java:131"$0$0$0$3$14$"	 * @since 5.0"
"Resource.java:132"$1$0$0$3$26$"	 * @see #getInputStream()"
"Resource.java:133"$0$0$0$1$4$"	 */"
"Resource.java:134"$0$0$0$6$67$"	default ReadableByteChannel readableChannel() throws IOException {"
"Resource.java:135"$1$0$0$2$47$"		return Channels.newChannel(getInputStream());"
"Resource.java:136"$0$0$0$1$2$"	}"
"Resource.java:137"$0$0$0$0$0$""
"Resource.java:138"$0$0$0$1$4$"	/**"
"Resource.java:139"$0$0$0$8$51$"	 * Determine the content length for this resource."
"Resource.java:140"$0$0$0$9$58$"	 * @throws IOException if the resource cannot be resolved"
"Resource.java:141"$0$0$0$13$70$"	 * (in the file system or as some other known physical resource type)"
"Resource.java:142"$0$0$0$1$4$"	 */"
"Resource.java:143"$0$0$0$4$41$"	long contentLength() throws IOException;"
"Resource.java:144"$0$0$0$0$0$""
"Resource.java:145"$0$0$0$1$4$"	/**"
"Resource.java:146"$0$0$0$8$60$"	 * Determine the last-modified timestamp for this resource."
"Resource.java:147"$0$0$0$9$58$"	 * @throws IOException if the resource cannot be resolved"
"Resource.java:148"$0$0$0$13$70$"	 * (in the file system or as some other known physical resource type)"
"Resource.java:149"$0$0$0$1$4$"	 */"
"Resource.java:150"$0$0$0$4$40$"	long lastModified() throws IOException;"
"Resource.java:151"$0$0$0$0$0$""
"Resource.java:152"$0$0$0$1$4$"	/**"
"Resource.java:153"$0$0$0$8$48$"	 * Create a resource relative to this resource."
"Resource.java:154"$0$0$0$10$69$"	 * @param relativePath the relative path (relative to this resource)"
"Resource.java:155"$0$0$0$9$57$"	 * @return the resource handle for the relative resource"
"Resource.java:156"$0$0$0$10$69$"	 * @throws IOException if the relative resource cannot be determined"
"Resource.java:157"$0$0$0$1$4$"	 */"
"Resource.java:158"$0$0$0$5$65$"	Resource createRelative(String relativePath) throws IOException;"
"Resource.java:159"$0$0$0$0$0$""
"Resource.java:160"$0$0$0$1$4$"	/**"
"Resource.java:161"$0$0$0$11$67$"	 * Determine a filename for this resource, i.e. typically the last"
"Resource.java:162"$0$0$0$8$48$"	 * part of the path: for example, ""myfile.txt""."
"Resource.java:163"$0$0$0$11$61$"	 * <p>Returns {@code null} if this type of resource does not"
"Resource.java:164"$0$0$0$4$20$"	 * have a filename."
"Resource.java:165"$0$0$0$1$4$"	 */"
"Resource.java:166"$0$0$0$1$10$"	@Nullable"
"Resource.java:167"$1$0$0$2$22$"	String getFilename();"
"Resource.java:168"$0$0$0$0$0$""
"Resource.java:169"$0$0$0$1$4$"	/**"
"Resource.java:170"$0$0$0$7$43$"	 * Return a description for this resource,"
"Resource.java:171"$0$0$0$12$63$"	 * to be used for error output when working with the resource."
"Resource.java:172"$0$0$0$9$63$"	 * <p>Implementations are also encouraged to return this value"
"Resource.java:173"$0$0$0$6$39$"	 * from their {@code toString} method."
"Resource.java:174"$0$0$0$3$26$"	 * @see Object#toString()"
"Resource.java:175"$0$0$0$1$4$"	 */"
"Resource.java:176"$1$0$0$2$25$"	String getDescription();"
"Resource.java:177"$0$0$0$0$0$""
"Resource.java:178"$0$0$0$1$1$"}"
"AnnotationUtils.java:1"$0$0$0$1$2$"/*"
"AnnotationUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"AnnotationUtils.java:3"$0$0$0$1$2$" *"
"AnnotationUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationUtils.java:7"$0$0$0$1$2$" *"
"AnnotationUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationUtils.java:9"$0$0$0$1$2$" *"
"AnnotationUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationUtils.java:15"$0$0$0$1$3$" */"
"AnnotationUtils.java:16"$0$0$0$0$0$""
"AnnotationUtils.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AnnotationUtils.java:18"$0$0$0$0$0$""
"AnnotationUtils.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"AnnotationUtils.java:20"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"AnnotationUtils.java:21"$0$0$0$2$31$"import java.lang.reflect.Array;"
"AnnotationUtils.java:22"$1$0$0$2$51$"import java.lang.reflect.InvocationTargetException;"
"AnnotationUtils.java:23"$0$0$0$2$32$"import java.lang.reflect.Method;"
"AnnotationUtils.java:24"$0$0$0$2$34$"import java.lang.reflect.Modifier;"
"AnnotationUtils.java:25"$0$0$0$2$28$"import java.util.Collection;"
"AnnotationUtils.java:26"$0$0$0$2$29$"import java.util.Collections;"
"AnnotationUtils.java:27"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"AnnotationUtils.java:28"$0$0$0$2$22$"import java.util.List;"
"AnnotationUtils.java:29"$0$0$0$2$21$"import java.util.Map;"
"AnnotationUtils.java:30"$0$0$0$2$40$"import java.util.NoSuchElementException;"
"AnnotationUtils.java:31"$0$0$0$2$21$"import java.util.Set;"
"AnnotationUtils.java:32"$0$0$0$0$0$""
"AnnotationUtils.java:33"$0$0$0$2$53$"import org.springframework.core.BridgeMethodResolver;"
"AnnotationUtils.java:34"$0$0$0$2$86$"import org.springframework.core.annotation.AnnotationTypeMapping.MirrorSets.MirrorSet;"
"AnnotationUtils.java:35"$0$0$0$2$66$"import org.springframework.core.annotation.MergedAnnotation.Adapt;"
"AnnotationUtils.java:36"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"AnnotationUtils.java:37"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AnnotationUtils.java:38"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"AnnotationUtils.java:39"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"AnnotationUtils.java:40"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"AnnotationUtils.java:41"$0$0$0$0$0$""
"AnnotationUtils.java:42"$0$0$0$1$3$"/**"
"AnnotationUtils.java:43"$0$0$0$10$83$" * General utility methods for working with annotations, handling meta-annotations,"
"AnnotationUtils.java:44"$0$0$0$12$81$" * bridge methods (which the compiler generates for generic declarations) as well"
"AnnotationUtils.java:45"$0$0$0$8$67$" * as super methods (for optional <em>annotation inheritance</em>)."
"AnnotationUtils.java:46"$0$0$0$1$2$" *"
"AnnotationUtils.java:47"$0$0$0$15$74$" * <p>Note that most of the features of this class are not provided by the"
"AnnotationUtils.java:48"$0$0$0$5$45$" * JDK's introspection facilities themselves."
"AnnotationUtils.java:49"$0$0$0$1$2$" *"
"AnnotationUtils.java:50"$0$0$0$11$78$" * <p>As a general rule for runtime-retained application annotations (e.g. for"
"AnnotationUtils.java:51"$0$0$0$10$75$" * transaction control, authorization, or service exposure), always use the"
"AnnotationUtils.java:52"$0$0$0$11$79$" * lookup methods on this class (e.g. {@link #findAnnotation(Method, Class)} or"
"AnnotationUtils.java:53"$1$0$0$10$80$" * {@link #getAnnotation(Method, Class)}) instead of the plain annotation lookup"
"AnnotationUtils.java:54"$1$0$0$13$77$" * methods in the JDK. You can still explicitly choose between a <em>get</em>"
"AnnotationUtils.java:55"$1$0$0$11$79$" * lookup on the given class level only ({@link #getAnnotation(Method, Class)})"
"AnnotationUtils.java:56"$0$0$0$13$78$" * and a <em>find</em> lookup in the entire inheritance hierarchy of the given"
"AnnotationUtils.java:57"$0$0$0$5$51$" * method ({@link #findAnnotation(Method, Class)})."
"AnnotationUtils.java:58"$0$0$0$1$2$" *"
"AnnotationUtils.java:59"$0$0$0$2$23$" * <h3>Terminology</h3>"
"AnnotationUtils.java:60"$0$0$0$8$72$" * The terms <em>directly present</em>, <em>indirectly present</em>, and"
"AnnotationUtils.java:61"$0$0$0$11$72$" * <em>present</em> have the same meanings as defined in the class-level"
"AnnotationUtils.java:62"$0$0$0$8$52$" * javadoc for {@link AnnotatedElement} (in Java 8)."
"AnnotationUtils.java:63"$0$0$0$1$2$" *"
"AnnotationUtils.java:64"$0$0$0$11$76$" * <p>An annotation is <em>meta-present</em> on an element if the annotation"
"AnnotationUtils.java:65"$0$0$0$12$69$" * is declared as a meta-annotation on some other annotation which is"
"AnnotationUtils.java:66"$0$0$0$10$81$" * <em>present</em> on the element. Annotation {@code A} is <em>meta-present</em>"
"AnnotationUtils.java:67"$0$0$0$12$76$" * on another annotation if {@code A} is either <em>directly present</em> or"
"AnnotationUtils.java:68"$0$0$0$6$49$" * <em>meta-present</em> on the other annotation."
"AnnotationUtils.java:69"$0$0$0$1$2$" *"
"AnnotationUtils.java:70"$0$0$0$3$35$" * <h3>Meta-annotation Support</h3>"
"AnnotationUtils.java:71"$1$0$0$13$80$" * <p>Most {@code find*()} methods and some {@code get*()} methods in this class"
"AnnotationUtils.java:72"$0$0$0$11$80$" * provide support for finding annotations used as meta-annotations. Consult the"
"AnnotationUtils.java:73"$0$0$0$14$82$" * javadoc for each method in this class for details. For fine-grained support for"
"AnnotationUtils.java:74"$0$0$0$8$87$" * meta-annotations with <em>attribute overrides</em> in <em>composed annotations</em>,"
"AnnotationUtils.java:75"$0$0$0$9$80$" * consider using {@link AnnotatedElementUtils}'s more specific methods instead."
"AnnotationUtils.java:76"$0$0$0$1$2$" *"
"AnnotationUtils.java:77"$0$0$0$3$29$" * <h3>Attribute Aliases</h3>"
"AnnotationUtils.java:78"$0$0$0$12$73$" * <p>All public methods in this class that return annotations, arrays of"
"AnnotationUtils.java:79"$0$0$0$8$79$" * annotations, or {@link AnnotationAttributes} transparently support attribute"
"AnnotationUtils.java:80"$0$0$0$10$73$" * aliases configured via {@link AliasFor @AliasFor}. Consult the various"
"AnnotationUtils.java:81"$0$0$0$6$57$" * {@code synthesizeAnnotation*(..)} methods for details."
"AnnotationUtils.java:82"$0$0$0$1$2$" *"
"AnnotationUtils.java:83"$0$0$0$3$24$" * <h3>Search Scope</h3>"
"AnnotationUtils.java:84"$0$0$0$13$76$" * <p>The search algorithms used by methods in this class stop searching for"
"AnnotationUtils.java:85"$0$0$0$13$73$" * an annotation once the first annotation of the specified type has been"
"AnnotationUtils.java:86"$0$0$0$12$77$" * found. As a consequence, additional annotations of the specified type will"
"AnnotationUtils.java:87"$0$0$0$4$23$" * be silently ignored."
"AnnotationUtils.java:88"$0$0$0$1$2$" *"
"AnnotationUtils.java:89"$0$0$0$4$21$" * @author Rob Harrop"
"AnnotationUtils.java:90"$0$0$0$4$26$" * @author Juergen Hoeller"
"AnnotationUtils.java:91"$0$0$0$4$22$" * @author Sam Brannen"
"AnnotationUtils.java:92"$0$0$0$4$22$" * @author Mark Fisher"
"AnnotationUtils.java:93"$0$0$0$4$22$" * @author Chris Beams"
"AnnotationUtils.java:94"$0$0$0$4$23$" * @author Phillip Webb"
"AnnotationUtils.java:95"$0$0$0$4$27$" * @author Oleg Zhurakousky"
"AnnotationUtils.java:96"$0$0$0$3$13$" * @since 2.0"
"AnnotationUtils.java:97"$0$0$0$3$16$" * @see AliasFor"
"AnnotationUtils.java:98"$0$0$0$3$28$" * @see AnnotationAttributes"
"AnnotationUtils.java:99"$0$0$0$3$29$" * @see AnnotatedElementUtils"
"AnnotationUtils.java:100"$0$0$0$3$28$" * @see BridgeMethodResolver"
"AnnotationUtils.java:101"$1$0$0$3$59$" * @see java.lang.reflect.AnnotatedElement#getAnnotations()"
"AnnotationUtils.java:102"$1$0$0$3$63$" * @see java.lang.reflect.AnnotatedElement#getAnnotation(Class)"
"AnnotationUtils.java:103"$1$0$0$3$67$" * @see java.lang.reflect.AnnotatedElement#getDeclaredAnnotations()"
"AnnotationUtils.java:104"$0$0$0$1$3$" */"
"AnnotationUtils.java:105"$0$0$0$5$39$"public abstract class AnnotationUtils {"
"AnnotationUtils.java:106"$0$0$0$0$0$""
"AnnotationUtils.java:107"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:108"$0$0$0$10$61$"	 * The attribute name for annotations with a single element."
"AnnotationUtils.java:109"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:110"$0$0$0$7$59$"	public static final String VALUE = MergedAnnotation.VALUE;"
"AnnotationUtils.java:111"$0$0$0$0$0$""
"AnnotationUtils.java:112"$0$0$0$6$68$"	private static final AnnotationFilter JAVA_LANG_ANNOTATION_FILTER ="
"AnnotationUtils.java:113"$0$0$0$1$53$"			AnnotationFilter.packages(""java.lang.annotation"");"
"AnnotationUtils.java:114"$0$0$0$0$0$""
"AnnotationUtils.java:115"$0$0$0$10$108$"	private static final Map<Class<? extends Annotation>, Map<String, DefaultValueHolder>> defaultValuesCache ="
"AnnotationUtils.java:116"$0$0$0$2$38$"			new ConcurrentReferenceHashMap<>();"
"AnnotationUtils.java:117"$0$0$0$0$0$""
"AnnotationUtils.java:118"$0$0$0$0$0$""
"AnnotationUtils.java:119"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:120"$0$0$0$15$86$"	 * Determine whether the given class is a candidate for carrying one of the specified"
"AnnotationUtils.java:121"$0$0$0$8$49$"	 * annotations (at type, method or field level)."
"AnnotationUtils.java:122"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"AnnotationUtils.java:123"$0$0$0$7$58$"	 * @param annotationTypes the searchable annotation types"
"AnnotationUtils.java:124"$0$0$0$17$89$"	 * @return {@code false} if the class is known to have no such annotations at any level;"
"AnnotationUtils.java:125"$0$0$0$11$88$"	 * {@code true} otherwise. Callers will usually perform full method/field introspection"
"AnnotationUtils.java:126"$0$0$0$8$43$"	 * if {@code true} is being returned here."
"AnnotationUtils.java:127"$0$0$0$3$14$"	 * @since 5.2"
"AnnotationUtils.java:128"$0$0$0$4$40$"	 * @see #isCandidateClass(Class, Class)"
"AnnotationUtils.java:129"$0$0$0$4$41$"	 * @see #isCandidateClass(Class, String)"
"AnnotationUtils.java:130"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:131"$0$0$0$10$114$"	public static boolean isCandidateClass(Class<?> clazz, Collection<Class<? extends Annotation>> annotationTypes) {"
"AnnotationUtils.java:132"$0$0$0$8$70$"		for (Class<? extends Annotation> annotationType : annotationTypes) {"
"AnnotationUtils.java:133"$0$0$0$4$49$"			if (isCandidateClass(clazz, annotationType)) {"
"AnnotationUtils.java:134"$0$0$0$2$16$"				return true;"
"AnnotationUtils.java:135"$0$0$0$1$4$"			}"
"AnnotationUtils.java:136"$0$0$0$1$3$"		}"
"AnnotationUtils.java:137"$0$0$0$2$15$"		return false;"
"AnnotationUtils.java:138"$0$0$0$1$2$"	}"
"AnnotationUtils.java:139"$0$0$0$0$0$""
"AnnotationUtils.java:140"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:141"$0$0$0$14$90$"	 * Determine whether the given class is a candidate for carrying the specified annotation"
"AnnotationUtils.java:142"$0$0$0$7$37$"	 * (at type, method or field level)."
"AnnotationUtils.java:143"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"AnnotationUtils.java:144"$0$0$0$7$56$"	 * @param annotationType the searchable annotation type"
"AnnotationUtils.java:145"$0$0$0$17$89$"	 * @return {@code false} if the class is known to have no such annotations at any level;"
"AnnotationUtils.java:146"$0$0$0$11$88$"	 * {@code true} otherwise. Callers will usually perform full method/field introspection"
"AnnotationUtils.java:147"$0$0$0$8$43$"	 * if {@code true} is being returned here."
"AnnotationUtils.java:148"$0$0$0$3$14$"	 * @since 5.2"
"AnnotationUtils.java:149"$0$0$0$4$41$"	 * @see #isCandidateClass(Class, String)"
"AnnotationUtils.java:150"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:151"$0$0$0$10$101$"	public static boolean isCandidateClass(Class<?> clazz, Class<? extends Annotation> annotationType) {"
"AnnotationUtils.java:152"$1$0$0$3$59$"		return isCandidateClass(clazz, annotationType.getName());"
"AnnotationUtils.java:153"$0$0$0$1$2$"	}"
"AnnotationUtils.java:154"$0$0$0$0$0$""
"AnnotationUtils.java:155"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:156"$0$0$0$14$90$"	 * Determine whether the given class is a candidate for carrying the specified annotation"
"AnnotationUtils.java:157"$0$0$0$7$37$"	 * (at type, method or field level)."
"AnnotationUtils.java:158"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"AnnotationUtils.java:159"$0$0$0$11$84$"	 * @param annotationName the fully-qualified name of the searchable annotation type"
"AnnotationUtils.java:160"$0$0$0$17$89$"	 * @return {@code false} if the class is known to have no such annotations at any level;"
"AnnotationUtils.java:161"$0$0$0$11$88$"	 * {@code true} otherwise. Callers will usually perform full method/field introspection"
"AnnotationUtils.java:162"$0$0$0$8$43$"	 * if {@code true} is being returned here."
"AnnotationUtils.java:163"$0$0$0$3$14$"	 * @since 5.2"
"AnnotationUtils.java:164"$0$0$0$4$40$"	 * @see #isCandidateClass(Class, Class)"
"AnnotationUtils.java:165"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:166"$0$0$0$8$80$"	public static boolean isCandidateClass(Class<?> clazz, String annotationName) {"
"AnnotationUtils.java:167"$0$0$0$3$43$"		if (annotationName.startsWith(""java."")) {"
"AnnotationUtils.java:168"$0$0$0$2$15$"			return true;"
"AnnotationUtils.java:169"$0$0$0$1$3$"		}"
"AnnotationUtils.java:170"$0$0$0$3$62$"		if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {"
"AnnotationUtils.java:171"$0$0$0$2$16$"			return false;"
"AnnotationUtils.java:172"$0$0$0$1$3$"		}"
"AnnotationUtils.java:173"$0$0$0$2$14$"		return true;"
"AnnotationUtils.java:174"$0$0$0$1$2$"	}"
"AnnotationUtils.java:175"$0$0$0$0$0$""
"AnnotationUtils.java:176"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:177"$0$0$0$12$79$"	 * Get a single {@link Annotation} of {@code annotationType} from the supplied"
"AnnotationUtils.java:178"$0$0$0$11$78$"	 * annotation: either the given annotation itself or a direct meta-annotation"
"AnnotationUtils.java:179"$0$0$0$2$12$"	 * thereof."
"AnnotationUtils.java:180"$0$0$0$12$78$"	 * <p>Note that this method supports only a single level of meta-annotations."
"AnnotationUtils.java:181"$0$0$0$12$72$"	 * For support for arbitrary levels of meta-annotations, use one of the"
"AnnotationUtils.java:182"$0$0$0$5$36$"	 * {@code find*()} methods instead."
"AnnotationUtils.java:183"$0$0$0$7$45$"	 * @param annotation the Annotation to check"
"AnnotationUtils.java:184"$0$0$0$15$96$"	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation"
"AnnotationUtils.java:185"$0$0$0$12$71$"	 * @return the first matching annotation, or {@code null} if not found"
"AnnotationUtils.java:186"$0$0$0$3$14$"	 * @since 4.0"
"AnnotationUtils.java:187"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:188"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationUtils.java:189"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:190"$1$0$0$11$103$"	public static <A extends Annotation> A getAnnotation(Annotation annotation, Class<A> annotationType) {"
"AnnotationUtils.java:191"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotationUtils.java:192"$0$0$0$3$46$"		if (annotationType.isInstance(annotation)) {"
"AnnotationUtils.java:193"$0$0$0$4$63$"			return synthesizeAnnotation((A) annotation, annotationType);"
"AnnotationUtils.java:194"$0$0$0$1$3$"		}"
"AnnotationUtils.java:195"$0$0$1$16$99$"		// Shortcut: no searchable annotations to be found on plain Java classes and core Spring types..."
"AnnotationUtils.java:196"$0$0$0$3$67$"		if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotation)) {"
"AnnotationUtils.java:197"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:198"$0$0$0$1$3$"		}"
"AnnotationUtils.java:199"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotationUtils.java:200"$0$0$0$6$103$"		return MergedAnnotations.from(annotation, new Annotation[] {annotation}, RepeatableContainers.none())"
"AnnotationUtils.java:201"$1$0$0$1$50$"				.get(annotationType).withNonMergedAttributes()"
"AnnotationUtils.java:202"$0$0$0$1$68$"				.synthesize(AnnotationUtils::isSingleLevelPresent).orElse(null);"
"AnnotationUtils.java:203"$0$0$0$1$2$"	}"
"AnnotationUtils.java:204"$0$0$0$0$0$""
"AnnotationUtils.java:205"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:206"$0$0$0$12$79$"	 * Get a single {@link Annotation} of {@code annotationType} from the supplied"
"AnnotationUtils.java:207"$0$0$0$10$80$"	 * {@link AnnotatedElement}, where the annotation is either <em>present</em> or"
"AnnotationUtils.java:208"$0$0$0$6$58$"	 * <em>meta-present</em> on the {@code AnnotatedElement}."
"AnnotationUtils.java:209"$0$0$0$12$78$"	 * <p>Note that this method supports only a single level of meta-annotations."
"AnnotationUtils.java:210"$0$0$0$9$61$"	 * For support for arbitrary levels of meta-annotations, use"
"AnnotationUtils.java:211"$0$0$0$5$61$"	 * {@link #findAnnotation(AnnotatedElement, Class)} instead."
"AnnotationUtils.java:212"$1$0$0$12$89$"	 * @param annotatedElement the {@code AnnotatedElement} from which to get the annotation"
"AnnotationUtils.java:213"$0$0$0$15$96$"	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation"
"AnnotationUtils.java:214"$0$0$0$12$71$"	 * @return the first matching annotation, or {@code null} if not found"
"AnnotationUtils.java:215"$0$0$0$3$14$"	 * @since 3.1"
"AnnotationUtils.java:216"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:217"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:218"$1$0$0$11$115$"	public static <A extends Annotation> A getAnnotation(AnnotatedElement annotatedElement, Class<A> annotationType) {"
"AnnotationUtils.java:219"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotationUtils.java:220"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotationUtils.java:221"$0$0$0$2$71$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {"
"AnnotationUtils.java:222"$1$0$0$2$57$"			return annotatedElement.getAnnotation(annotationType);"
"AnnotationUtils.java:223"$0$0$0$1$3$"		}"
"AnnotationUtils.java:224"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotationUtils.java:225"$0$0$0$4$116$"		return MergedAnnotations.from(annotatedElement, SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none())"
"AnnotationUtils.java:226"$1$0$0$1$50$"				.get(annotationType).withNonMergedAttributes()"
"AnnotationUtils.java:227"$0$0$0$1$68$"				.synthesize(AnnotationUtils::isSingleLevelPresent).orElse(null);"
"AnnotationUtils.java:228"$0$0$0$1$2$"	}"
"AnnotationUtils.java:229"$0$0$0$0$0$""
"AnnotationUtils.java:230"$0$0$0$9$107$"	private static <A extends Annotation> boolean isSingleLevelPresent(MergedAnnotation<A> mergedAnnotation) {"
"AnnotationUtils.java:231"$1$0$0$4$48$"		int distance = mergedAnnotation.getDistance();"
"AnnotationUtils.java:232"$0$0$0$8$42$"		return (distance == 0 || distance == 1);"
"AnnotationUtils.java:233"$0$0$0$1$2$"	}"
"AnnotationUtils.java:234"$0$0$0$0$0$""
"AnnotationUtils.java:235"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:236"$0$0$0$11$70$"	 * Get a single {@link Annotation} of {@code annotationType} from the"
"AnnotationUtils.java:237"$0$0$0$10$76$"	 * supplied {@link Method}, where the annotation is either <em>present</em>"
"AnnotationUtils.java:238"$0$0$0$6$43$"	 * or <em>meta-present</em> on the method."
"AnnotationUtils.java:239"$0$0$0$11$81$"	 * <p>Correctly handles bridge {@link Method Methods} generated by the compiler."
"AnnotationUtils.java:240"$0$0$0$12$78$"	 * <p>Note that this method supports only a single level of meta-annotations."
"AnnotationUtils.java:241"$0$0$0$9$61$"	 * For support for arbitrary levels of meta-annotations, use"
"AnnotationUtils.java:242"$0$0$0$5$51$"	 * {@link #findAnnotation(Method, Class)} instead."
"AnnotationUtils.java:243"$0$0$0$10$55$"	 * @param method the method to look for annotations on"
"AnnotationUtils.java:244"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:245"$0$0$0$12$71$"	 * @return the first matching annotation, or {@code null} if not found"
"AnnotationUtils.java:246"$0$0$0$3$80$"	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method)"
"AnnotationUtils.java:247"$1$0$0$4$48$"	 * @see #getAnnotation(AnnotatedElement, Class)"
"AnnotationUtils.java:248"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:249"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:250"$1$0$0$11$95$"	public static <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {"
"AnnotationUtils.java:251"$0$0$0$4$73$"		Method resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);"
"AnnotationUtils.java:252"$1$0$0$4$74$"		return getAnnotation((AnnotatedElement) resolvedMethod, annotationType);"
"AnnotationUtils.java:253"$0$0$0$1$2$"	}"
"AnnotationUtils.java:254"$0$0$0$0$0$""
"AnnotationUtils.java:255"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:256"$0$0$0$11$75$"	 * Get all {@link Annotation Annotations} that are <em>present</em> on the"
"AnnotationUtils.java:257"$0$0$0$4$38$"	 * supplied {@link AnnotatedElement}."
"AnnotationUtils.java:258"$0$0$0$6$54$"	 * <p>Meta-annotations will <em>not</em> be searched."
"AnnotationUtils.java:259"$0$0$0$12$89$"	 * @param annotatedElement the Method, Constructor or Field to retrieve annotations from"
"AnnotationUtils.java:260"$0$0$0$13$73$"	 * @return the annotations found, an empty array, or {@code null} if not"
"AnnotationUtils.java:261"$0$0$0$10$73$"	 * resolvable (e.g. because nested Class values in annotation attributes"
"AnnotationUtils.java:262"$0$0$0$6$33$"	 * failed to resolve at runtime)"
"AnnotationUtils.java:263"$0$0$0$3$16$"	 * @since 4.0.8"
"AnnotationUtils.java:264"$1$0$0$3$42$"	 * @see AnnotatedElement#getAnnotations()"
"AnnotationUtils.java:265"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:266"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:267"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:268"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:269"$1$0$0$6$79$"	public static Annotation[] getAnnotations(AnnotatedElement annotatedElement) {"
"AnnotationUtils.java:270"$0$0$0$2$7$"		try {"
"AnnotationUtils.java:271"$1$0$0$3$89$"			return synthesizeAnnotationArray(annotatedElement.getAnnotations(), annotatedElement);"
"AnnotationUtils.java:272"$0$0$0$1$3$"		}"
"AnnotationUtils.java:273"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationUtils.java:274"$0$0$0$2$52$"			handleIntrospectionFailure(annotatedElement, ex);"
"AnnotationUtils.java:275"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:276"$0$0$0$1$3$"		}"
"AnnotationUtils.java:277"$0$0$0$1$2$"	}"
"AnnotationUtils.java:278"$0$0$0$0$0$""
"AnnotationUtils.java:279"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:280"$0$0$0$11$75$"	 * Get all {@link Annotation Annotations} that are <em>present</em> on the"
"AnnotationUtils.java:281"$0$0$0$4$28$"	 * supplied {@link Method}."
"AnnotationUtils.java:282"$0$0$0$11$81$"	 * <p>Correctly handles bridge {@link Method Methods} generated by the compiler."
"AnnotationUtils.java:283"$0$0$0$6$54$"	 * <p>Meta-annotations will <em>not</em> be searched."
"AnnotationUtils.java:284"$0$0$0$9$57$"	 * @param method the Method to retrieve annotations from"
"AnnotationUtils.java:285"$0$0$0$13$73$"	 * @return the annotations found, an empty array, or {@code null} if not"
"AnnotationUtils.java:286"$0$0$0$10$73$"	 * resolvable (e.g. because nested Class values in annotation attributes"
"AnnotationUtils.java:287"$0$0$0$6$33$"	 * failed to resolve at runtime)"
"AnnotationUtils.java:288"$0$0$0$3$80$"	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method)"
"AnnotationUtils.java:289"$1$0$0$3$42$"	 * @see AnnotatedElement#getAnnotations()"
"AnnotationUtils.java:290"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:291"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:292"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:293"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:294"$1$0$0$6$59$"	public static Annotation[] getAnnotations(Method method) {"
"AnnotationUtils.java:295"$0$0$0$2$7$"		try {"
"AnnotationUtils.java:296"$1$0$0$3$109$"			return synthesizeAnnotationArray(BridgeMethodResolver.findBridgedMethod(method).getAnnotations(), method);"
"AnnotationUtils.java:297"$0$0$0$1$3$"		}"
"AnnotationUtils.java:298"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationUtils.java:299"$0$0$0$2$42$"			handleIntrospectionFailure(method, ex);"
"AnnotationUtils.java:300"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:301"$0$0$0$1$3$"		}"
"AnnotationUtils.java:302"$0$0$0$1$2$"	}"
"AnnotationUtils.java:303"$0$0$0$0$0$""
"AnnotationUtils.java:304"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:305"$0$0$0$8$70$"	 * Get the <em>repeatable</em> {@linkplain Annotation annotations} of"
"AnnotationUtils.java:306"$0$0$0$9$76$"	 * {@code annotationType} from the supplied {@link AnnotatedElement}, where"
"AnnotationUtils.java:307"$0$0$0$8$78$"	 * such annotations are either <em>present</em>, <em>indirectly present</em>,"
"AnnotationUtils.java:308"$0$0$0$6$44$"	 * or <em>meta-present</em> on the element."
"AnnotationUtils.java:309"$0$0$0$9$55$"	 * <p>This method mimics the functionality of Java 8's"
"AnnotationUtils.java:310"$1$0$0$3$74$"	 * {@link java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)}"
"AnnotationUtils.java:311"$0$0$0$10$75$"	 * with support for automatic detection of a <em>container annotation</em>"
"AnnotationUtils.java:312"$0$0$0$8$74$"	 * declared via @{@link java.lang.annotation.Repeatable} (when running on"
"AnnotationUtils.java:313"$0$0$0$11$71$"	 * Java 8 or higher) and with additional support for meta-annotations."
"AnnotationUtils.java:314"$0$0$0$10$70$"	 * <p>Handles both single annotations and annotations nested within a"
"AnnotationUtils.java:315"$0$0$0$3$34$"	 * <em>container annotation</em>."
"AnnotationUtils.java:316"$0$0$0$8$65$"	 * <p>Correctly handles <em>bridge methods</em> generated by the"
"AnnotationUtils.java:317"$0$0$0$10$57$"	 * compiler if the supplied element is a {@link Method}."
"AnnotationUtils.java:318"$0$0$0$10$65$"	 * <p>Meta-annotations will be searched if the annotation is not"
"AnnotationUtils.java:319"$0$0$0$6$45$"	 * <em>present</em> on the supplied element."
"AnnotationUtils.java:320"$0$0$0$10$66$"	 * @param annotatedElement the element to look for annotations on"
"AnnotationUtils.java:321"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:322"$0$0$0$12$70$"	 * @return the annotations found or an empty set (never {@code null})"
"AnnotationUtils.java:323"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:324"$1$0$0$5$66$"	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:325"$1$0$0$5$74$"	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:326"$1$0$0$4$86$"	 * @see AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class)"
"AnnotationUtils.java:327"$0$0$0$3$72$"	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod"
"AnnotationUtils.java:328"$0$0$0$3$40$"	 * @see java.lang.annotation.Repeatable"
"AnnotationUtils.java:329"$1$0$0$3$64$"	 * @see java.lang.reflect.AnnotatedElement#getAnnotationsByType"
"AnnotationUtils.java:330"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:331"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:332"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:333"$1$0$0$8$104$"	public static <A extends Annotation> Set<A> getRepeatableAnnotations(AnnotatedElement annotatedElement,"
"AnnotationUtils.java:334"$0$0$0$3$29$"			Class<A> annotationType) {"
"AnnotationUtils.java:335"$0$0$0$0$0$""
"AnnotationUtils.java:336"$1$0$0$4$74$"		return getRepeatableAnnotations(annotatedElement, annotationType, null);"
"AnnotationUtils.java:337"$0$0$0$1$2$"	}"
"AnnotationUtils.java:338"$0$0$0$0$0$""
"AnnotationUtils.java:339"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:340"$0$0$0$8$70$"	 * Get the <em>repeatable</em> {@linkplain Annotation annotations} of"
"AnnotationUtils.java:341"$0$0$0$9$76$"	 * {@code annotationType} from the supplied {@link AnnotatedElement}, where"
"AnnotationUtils.java:342"$0$0$0$8$78$"	 * such annotations are either <em>present</em>, <em>indirectly present</em>,"
"AnnotationUtils.java:343"$0$0$0$6$44$"	 * or <em>meta-present</em> on the element."
"AnnotationUtils.java:344"$0$0$0$9$55$"	 * <p>This method mimics the functionality of Java 8's"
"AnnotationUtils.java:345"$1$0$0$3$74$"	 * {@link java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)}"
"AnnotationUtils.java:346"$0$0$0$6$49$"	 * with additional support for meta-annotations."
"AnnotationUtils.java:347"$0$0$0$10$70$"	 * <p>Handles both single annotations and annotations nested within a"
"AnnotationUtils.java:348"$0$0$0$3$34$"	 * <em>container annotation</em>."
"AnnotationUtils.java:349"$0$0$0$8$65$"	 * <p>Correctly handles <em>bridge methods</em> generated by the"
"AnnotationUtils.java:350"$0$0$0$10$57$"	 * compiler if the supplied element is a {@link Method}."
"AnnotationUtils.java:351"$0$0$0$10$65$"	 * <p>Meta-annotations will be searched if the annotation is not"
"AnnotationUtils.java:352"$0$0$0$6$45$"	 * <em>present</em> on the supplied element."
"AnnotationUtils.java:353"$0$0$0$10$66$"	 * @param annotatedElement the element to look for annotations on"
"AnnotationUtils.java:354"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:355"$0$0$0$10$71$"	 * @param containerAnnotationType the type of the container that holds"
"AnnotationUtils.java:356"$0$0$0$13$72$"	 * the annotations; may be {@code null} if a container is not supported"
"AnnotationUtils.java:357"$0$0$0$11$77$"	 * or if it should be looked up via @{@link java.lang.annotation.Repeatable}"
"AnnotationUtils.java:358"$0$0$0$8$36$"	 * when running on Java 8 or higher"
"AnnotationUtils.java:359"$0$0$0$12$70$"	 * @return the annotations found or an empty set (never {@code null})"
"AnnotationUtils.java:360"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:361"$1$0$0$4$59$"	 * @see #getRepeatableAnnotations(AnnotatedElement, Class)"
"AnnotationUtils.java:362"$1$0$0$4$67$"	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class)"
"AnnotationUtils.java:363"$1$0$0$5$74$"	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:364"$1$0$0$5$93$"	 * @see AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:365"$0$0$0$3$72$"	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod"
"AnnotationUtils.java:366"$0$0$0$3$40$"	 * @see java.lang.annotation.Repeatable"
"AnnotationUtils.java:367"$1$0$0$3$64$"	 * @see java.lang.reflect.AnnotatedElement#getAnnotationsByType"
"AnnotationUtils.java:368"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:369"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:370"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:371"$1$0$0$8$104$"	public static <A extends Annotation> Set<A> getRepeatableAnnotations(AnnotatedElement annotatedElement,"
"AnnotationUtils.java:372"$0$0$0$8$92$"			Class<A> annotationType, @Nullable Class<? extends Annotation> containerAnnotationType) {"
"AnnotationUtils.java:373"$0$0$0$0$0$""
"AnnotationUtils.java:374"$0$0$0$7$80$"		RepeatableContainers repeatableContainers = (containerAnnotationType != null ?"
"AnnotationUtils.java:375"$0$0$0$3$70$"				RepeatableContainers.of(annotationType, containerAnnotationType) :"
"AnnotationUtils.java:376"$0$0$0$1$48$"				RepeatableContainers.standardRepeatables());"
"AnnotationUtils.java:377"$0$0$0$0$0$""
"AnnotationUtils.java:378"$0$0$0$4$98$"		return MergedAnnotations.from(annotatedElement, SearchStrategy.SUPERCLASS, repeatableContainers)"
"AnnotationUtils.java:379"$0$0$0$1$27$"				.stream(annotationType)"
"AnnotationUtils.java:380"$1$0$0$1$87$"				.filter(MergedAnnotationPredicates.firstRunOf(MergedAnnotation::getAggregateIndex))"
"AnnotationUtils.java:381"$0$0$0$1$51$"				.map(MergedAnnotation::withNonMergedAttributes)"
"AnnotationUtils.java:382"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotationUtils.java:383"$0$0$0$1$2$"	}"
"AnnotationUtils.java:384"$0$0$0$0$0$""
"AnnotationUtils.java:385"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:386"$0$0$0$8$76$"	 * Get the declared <em>repeatable</em> {@linkplain Annotation annotations}"
"AnnotationUtils.java:387"$0$0$0$9$73$"	 * of {@code annotationType} from the supplied {@link AnnotatedElement},"
"AnnotationUtils.java:388"$0$0$0$8$64$"	 * where such annotations are either <em>directly present</em>,"
"AnnotationUtils.java:389"$0$0$0$8$73$"	 * <em>indirectly present</em>, or <em>meta-present</em> on the element."
"AnnotationUtils.java:390"$0$0$0$9$55$"	 * <p>This method mimics the functionality of Java 8's"
"AnnotationUtils.java:391"$1$0$0$3$82$"	 * {@link java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)}"
"AnnotationUtils.java:392"$0$0$0$10$75$"	 * with support for automatic detection of a <em>container annotation</em>"
"AnnotationUtils.java:393"$0$0$0$8$74$"	 * declared via @{@link java.lang.annotation.Repeatable} (when running on"
"AnnotationUtils.java:394"$0$0$0$11$71$"	 * Java 8 or higher) and with additional support for meta-annotations."
"AnnotationUtils.java:395"$0$0$0$10$70$"	 * <p>Handles both single annotations and annotations nested within a"
"AnnotationUtils.java:396"$0$0$0$3$34$"	 * <em>container annotation</em>."
"AnnotationUtils.java:397"$0$0$0$8$65$"	 * <p>Correctly handles <em>bridge methods</em> generated by the"
"AnnotationUtils.java:398"$0$0$0$10$57$"	 * compiler if the supplied element is a {@link Method}."
"AnnotationUtils.java:399"$0$0$0$10$65$"	 * <p>Meta-annotations will be searched if the annotation is not"
"AnnotationUtils.java:400"$0$0$0$6$45$"	 * <em>present</em> on the supplied element."
"AnnotationUtils.java:401"$0$0$0$10$66$"	 * @param annotatedElement the element to look for annotations on"
"AnnotationUtils.java:402"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:403"$0$0$0$12$70$"	 * @return the annotations found or an empty set (never {@code null})"
"AnnotationUtils.java:404"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:405"$1$0$0$4$59$"	 * @see #getRepeatableAnnotations(AnnotatedElement, Class)"
"AnnotationUtils.java:406"$1$0$0$5$66$"	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:407"$1$0$0$5$74$"	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:408"$1$0$0$4$86$"	 * @see AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class)"
"AnnotationUtils.java:409"$0$0$0$3$72$"	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod"
"AnnotationUtils.java:410"$0$0$0$3$40$"	 * @see java.lang.annotation.Repeatable"
"AnnotationUtils.java:411"$1$0$0$3$72$"	 * @see java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType"
"AnnotationUtils.java:412"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:413"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:414"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:415"$1$0$0$8$112$"	public static <A extends Annotation> Set<A> getDeclaredRepeatableAnnotations(AnnotatedElement annotatedElement,"
"AnnotationUtils.java:416"$0$0$0$3$29$"			Class<A> annotationType) {"
"AnnotationUtils.java:417"$0$0$0$0$0$""
"AnnotationUtils.java:418"$1$0$0$4$82$"		return getDeclaredRepeatableAnnotations(annotatedElement, annotationType, null);"
"AnnotationUtils.java:419"$0$0$0$1$2$"	}"
"AnnotationUtils.java:420"$0$0$0$0$0$""
"AnnotationUtils.java:421"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:422"$0$0$0$8$76$"	 * Get the declared <em>repeatable</em> {@linkplain Annotation annotations}"
"AnnotationUtils.java:423"$0$0$0$9$73$"	 * of {@code annotationType} from the supplied {@link AnnotatedElement},"
"AnnotationUtils.java:424"$0$0$0$8$64$"	 * where such annotations are either <em>directly present</em>,"
"AnnotationUtils.java:425"$0$0$0$8$73$"	 * <em>indirectly present</em>, or <em>meta-present</em> on the element."
"AnnotationUtils.java:426"$0$0$0$9$55$"	 * <p>This method mimics the functionality of Java 8's"
"AnnotationUtils.java:427"$1$0$0$3$82$"	 * {@link java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)}"
"AnnotationUtils.java:428"$0$0$0$6$49$"	 * with additional support for meta-annotations."
"AnnotationUtils.java:429"$0$0$0$10$70$"	 * <p>Handles both single annotations and annotations nested within a"
"AnnotationUtils.java:430"$0$0$0$3$34$"	 * <em>container annotation</em>."
"AnnotationUtils.java:431"$0$0$0$8$65$"	 * <p>Correctly handles <em>bridge methods</em> generated by the"
"AnnotationUtils.java:432"$0$0$0$10$57$"	 * compiler if the supplied element is a {@link Method}."
"AnnotationUtils.java:433"$0$0$0$10$65$"	 * <p>Meta-annotations will be searched if the annotation is not"
"AnnotationUtils.java:434"$0$0$0$6$45$"	 * <em>present</em> on the supplied element."
"AnnotationUtils.java:435"$0$0$0$10$66$"	 * @param annotatedElement the element to look for annotations on"
"AnnotationUtils.java:436"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:437"$0$0$0$10$71$"	 * @param containerAnnotationType the type of the container that holds"
"AnnotationUtils.java:438"$0$0$0$13$72$"	 * the annotations; may be {@code null} if a container is not supported"
"AnnotationUtils.java:439"$0$0$0$11$77$"	 * or if it should be looked up via @{@link java.lang.annotation.Repeatable}"
"AnnotationUtils.java:440"$0$0$0$8$36$"	 * when running on Java 8 or higher"
"AnnotationUtils.java:441"$0$0$0$12$70$"	 * @return the annotations found or an empty set (never {@code null})"
"AnnotationUtils.java:442"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:443"$1$0$0$4$59$"	 * @see #getRepeatableAnnotations(AnnotatedElement, Class)"
"AnnotationUtils.java:444"$1$0$0$5$66$"	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:445"$1$0$0$4$67$"	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class)"
"AnnotationUtils.java:446"$1$0$0$5$93$"	 * @see AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotationUtils.java:447"$0$0$0$3$72$"	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod"
"AnnotationUtils.java:448"$0$0$0$3$40$"	 * @see java.lang.annotation.Repeatable"
"AnnotationUtils.java:449"$1$0$0$3$72$"	 * @see java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType"
"AnnotationUtils.java:450"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:451"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:452"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:453"$1$0$0$8$112$"	public static <A extends Annotation> Set<A> getDeclaredRepeatableAnnotations(AnnotatedElement annotatedElement,"
"AnnotationUtils.java:454"$0$0$0$8$92$"			Class<A> annotationType, @Nullable Class<? extends Annotation> containerAnnotationType) {"
"AnnotationUtils.java:455"$0$0$0$0$0$""
"AnnotationUtils.java:456"$0$0$0$7$79$"		RepeatableContainers repeatableContainers = containerAnnotationType != null ?"
"AnnotationUtils.java:457"$0$0$0$3$70$"				RepeatableContainers.of(annotationType, containerAnnotationType) :"
"AnnotationUtils.java:458"$0$0$0$1$47$"				RepeatableContainers.standardRepeatables();"
"AnnotationUtils.java:459"$0$0$0$0$0$""
"AnnotationUtils.java:460"$0$0$0$4$94$"		return MergedAnnotations.from(annotatedElement, SearchStrategy.DIRECT, repeatableContainers)"
"AnnotationUtils.java:461"$0$0$0$1$27$"				.stream(annotationType)"
"AnnotationUtils.java:462"$0$0$0$1$51$"				.map(MergedAnnotation::withNonMergedAttributes)"
"AnnotationUtils.java:463"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotationUtils.java:464"$0$0$0$1$2$"	}"
"AnnotationUtils.java:465"$0$0$0$0$0$""
"AnnotationUtils.java:466"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:467"$0$0$0$11$69$"	 * Find a single {@link Annotation} of {@code annotationType} on the"
"AnnotationUtils.java:468"$0$0$0$4$38$"	 * supplied {@link AnnotatedElement}."
"AnnotationUtils.java:469"$0$0$0$10$65$"	 * <p>Meta-annotations will be searched if the annotation is not"
"AnnotationUtils.java:470"$0$0$0$7$54$"	 * <em>directly present</em> on the supplied element."
"AnnotationUtils.java:471"$0$0$0$7$68$"	 * <p><strong>Warning</strong>: this method operates generically on"
"AnnotationUtils.java:472"$0$0$0$11$68$"	 * annotated elements. In other words, this method does not execute"
"AnnotationUtils.java:473"$0$0$0$11$72$"	 * specialized search algorithms for classes or methods. If you require"
"AnnotationUtils.java:474"$0$0$0$9$72$"	 * the more specific semantics of {@link #findAnnotation(Class, Class)}"
"AnnotationUtils.java:475"$0$0$0$10$74$"	 * or {@link #findAnnotation(Method, Class)}, invoke one of those methods"
"AnnotationUtils.java:476"$0$0$0$2$12$"	 * instead."
"AnnotationUtils.java:477"$0$0$0$12$88$"	 * @param annotatedElement the {@code AnnotatedElement} on which to find the annotation"
"AnnotationUtils.java:478"$0$0$0$15$96$"	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation"
"AnnotationUtils.java:479"$0$0$0$12$71$"	 * @return the first matching annotation, or {@code null} if not found"
"AnnotationUtils.java:480"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:481"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:482"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:483"$0$0$0$7$55$"	public static <A extends Annotation> A findAnnotation("
"AnnotationUtils.java:484"$0$0$0$6$74$"			AnnotatedElement annotatedElement, @Nullable Class<A> annotationType) {"
"AnnotationUtils.java:485"$0$0$0$0$0$""
"AnnotationUtils.java:486"$0$0$0$5$31$"		if (annotationType == null) {"
"AnnotationUtils.java:487"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:488"$0$0$0$1$3$"		}"
"AnnotationUtils.java:489"$0$0$0$0$0$""
"AnnotationUtils.java:490"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotationUtils.java:491"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotationUtils.java:492"$0$0$0$2$71$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {"
"AnnotationUtils.java:493"$1$0$0$2$65$"			return annotatedElement.getDeclaredAnnotation(annotationType);"
"AnnotationUtils.java:494"$0$0$0$1$3$"		}"
"AnnotationUtils.java:495"$0$0$0$0$0$""
"AnnotationUtils.java:496"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotationUtils.java:497"$0$0$0$4$116$"		return MergedAnnotations.from(annotatedElement, SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none())"
"AnnotationUtils.java:498"$1$0$0$1$50$"				.get(annotationType).withNonMergedAttributes()"
"AnnotationUtils.java:499"$0$0$0$1$58$"				.synthesize(MergedAnnotation::isPresent).orElse(null);"
"AnnotationUtils.java:500"$0$0$0$1$2$"	}"
"AnnotationUtils.java:501"$0$0$0$0$0$""
"AnnotationUtils.java:502"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:503"$0$0$0$12$78$"	 * Find a single {@link Annotation} of {@code annotationType} on the supplied"
"AnnotationUtils.java:504"$0$0$0$11$76$"	 * {@link Method}, traversing its super methods (i.e. from superclasses and"
"AnnotationUtils.java:505"$0$0$0$12$79$"	 * interfaces) if the annotation is not <em>directly present</em> on the given"
"AnnotationUtils.java:506"$0$0$0$3$18$"	 * method itself."
"AnnotationUtils.java:507"$0$0$0$11$81$"	 * <p>Correctly handles bridge {@link Method Methods} generated by the compiler."
"AnnotationUtils.java:508"$0$0$0$10$65$"	 * <p>Meta-annotations will be searched if the annotation is not"
"AnnotationUtils.java:509"$0$0$0$6$44$"	 * <em>directly present</em> on the method."
"AnnotationUtils.java:510"$0$0$0$14$80$"	 * <p>Annotations on methods are not inherited by default, so we need to handle"
"AnnotationUtils.java:511"$0$0$0$3$20$"	 * this explicitly."
"AnnotationUtils.java:512"$0$0$0$10$55$"	 * @param method the method to look for annotations on"
"AnnotationUtils.java:513"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:514"$0$0$0$12$71$"	 * @return the first matching annotation, or {@code null} if not found"
"AnnotationUtils.java:515"$1$0$0$4$38$"	 * @see #getAnnotation(Method, Class)"
"AnnotationUtils.java:516"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:517"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:518"$0$0$0$12$106$"	public static <A extends Annotation> A findAnnotation(Method method, @Nullable Class<A> annotationType) {"
"AnnotationUtils.java:519"$0$0$0$5$31$"		if (annotationType == null) {"
"AnnotationUtils.java:520"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:521"$0$0$0$1$3$"		}"
"AnnotationUtils.java:522"$0$0$0$0$0$""
"AnnotationUtils.java:523"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotationUtils.java:524"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotationUtils.java:525"$0$0$0$2$61$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(method)) {"
"AnnotationUtils.java:526"$1$0$0$2$55$"			return method.getDeclaredAnnotation(annotationType);"
"AnnotationUtils.java:527"$0$0$0$1$3$"		}"
"AnnotationUtils.java:528"$0$0$0$0$0$""
"AnnotationUtils.java:529"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotationUtils.java:530"$0$0$0$4$99$"		return MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY, RepeatableContainers.none())"
"AnnotationUtils.java:531"$1$0$0$1$50$"				.get(annotationType).withNonMergedAttributes()"
"AnnotationUtils.java:532"$0$0$0$1$58$"				.synthesize(MergedAnnotation::isPresent).orElse(null);"
"AnnotationUtils.java:533"$0$0$0$1$2$"	}"
"AnnotationUtils.java:534"$0$0$0$0$0$""
"AnnotationUtils.java:535"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:536"$0$0$0$11$69$"	 * Find a single {@link Annotation} of {@code annotationType} on the"
"AnnotationUtils.java:537"$0$0$0$9$71$"	 * supplied {@link Class}, traversing its interfaces, annotations, and"
"AnnotationUtils.java:538"$0$0$0$10$70$"	 * superclasses if the annotation is not <em>directly present</em> on"
"AnnotationUtils.java:539"$0$0$0$5$27$"	 * the given class itself."
"AnnotationUtils.java:540"$0$0$0$10$75$"	 * <p>This method explicitly handles class-level annotations which are not"
"AnnotationUtils.java:541"$0$0$0$8$76$"	 * declared as {@link java.lang.annotation.Inherited inherited} <em>as well"
"AnnotationUtils.java:542"$0$0$0$7$59$"	 * as meta-annotations and annotations on interfaces</em>."
"AnnotationUtils.java:543"$0$0$0$6$41$"	 * <p>The algorithm operates as follows:"
"AnnotationUtils.java:544"$0$0$0$2$8$"	 * <ol>"
"AnnotationUtils.java:545"$0$0$0$14$76$"	 * <li>Search for the annotation on the given class and return it if found."
"AnnotationUtils.java:546"$0$0$0$11$81$"	 * <li>Recursively search through all annotations that the given class declares."
"AnnotationUtils.java:547"$0$0$0$11$80$"	 * <li>Recursively search through all interfaces that the given class declares."
"AnnotationUtils.java:548"$0$0$0$11$79$"	 * <li>Recursively search through the superclass hierarchy of the given class."
"AnnotationUtils.java:549"$0$0$0$2$9$"	 * </ol>"
"AnnotationUtils.java:550"$0$0$0$12$81$"	 * <p>Note: in this context, the term <em>recursively</em> means that the search"
"AnnotationUtils.java:551"$0$0$0$12$73$"	 * process continues by returning to step #1 with the current interface,"
"AnnotationUtils.java:552"$0$0$0$12$70$"	 * annotation, or superclass as the class to look for annotations on."
"AnnotationUtils.java:553"$0$0$0$10$53$"	 * @param clazz the class to look for annotations on"
"AnnotationUtils.java:554"$0$0$0$10$60$"	 * @param annotationType the type of annotation to look for"
"AnnotationUtils.java:555"$0$0$0$12$71$"	 * @return the first matching annotation, or {@code null} if not found"
"AnnotationUtils.java:556"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:557"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:558"$0$0$0$12$107$"	public static <A extends Annotation> A findAnnotation(Class<?> clazz, @Nullable Class<A> annotationType) {"
"AnnotationUtils.java:559"$0$0$0$5$31$"		if (annotationType == null) {"
"AnnotationUtils.java:560"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:561"$0$0$0$1$3$"		}"
"AnnotationUtils.java:562"$0$0$0$0$0$""
"AnnotationUtils.java:563"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotationUtils.java:564"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotationUtils.java:565"$0$0$0$2$60$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {"
"AnnotationUtils.java:566"$1$0$0$4$62$"			A annotation = clazz.getDeclaredAnnotation(annotationType);"
"AnnotationUtils.java:567"$0$0$0$5$28$"			if (annotation != null) {"
"AnnotationUtils.java:568"$0$0$0$2$22$"				return annotation;"
"AnnotationUtils.java:569"$0$0$0$1$4$"			}"
"AnnotationUtils.java:570"$0$0$1$11$85$"			// For backwards compatibility, perform a superclass search with plain annotations"
"AnnotationUtils.java:571"$0$0$1$13$84$"			// even if not marked as @Inherited: e.g. a findAnnotation search for @Deprecated"
"AnnotationUtils.java:572"$1$0$0$4$47$"			Class<?> superclass = clazz.getSuperclass();"
"AnnotationUtils.java:573"$0$0$0$9$58$"			if (superclass == null || superclass == Object.class) {"
"AnnotationUtils.java:574"$0$0$0$2$16$"				return null;"
"AnnotationUtils.java:575"$0$0$0$1$4$"			}"
"AnnotationUtils.java:576"$0$0$0$3$53$"			return findAnnotation(superclass, annotationType);"
"AnnotationUtils.java:577"$0$0$0$1$3$"		}"
"AnnotationUtils.java:578"$0$0$0$0$0$""
"AnnotationUtils.java:579"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotationUtils.java:580"$0$0$0$4$98$"		return MergedAnnotations.from(clazz, SearchStrategy.TYPE_HIERARCHY, RepeatableContainers.none())"
"AnnotationUtils.java:581"$1$0$0$1$50$"				.get(annotationType).withNonMergedAttributes()"
"AnnotationUtils.java:582"$0$0$0$1$58$"				.synthesize(MergedAnnotation::isPresent).orElse(null);"
"AnnotationUtils.java:583"$0$0$0$1$2$"	}"
"AnnotationUtils.java:584"$0$0$0$0$0$""
"AnnotationUtils.java:585"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:586"$0$0$0$12$68$"	 * Find the first {@link Class} in the inheritance hierarchy of the"
"AnnotationUtils.java:587"$0$0$0$10$74$"	 * specified {@code clazz} (including the specified {@code clazz} itself)"
"AnnotationUtils.java:588"$0$0$0$11$69$"	 * on which an annotation of the specified {@code annotationType} is"
"AnnotationUtils.java:589"$0$0$0$3$30$"	 * <em>directly present</em>."
"AnnotationUtils.java:590"$0$0$0$12$72$"	 * <p>If the supplied {@code clazz} is an interface, only the interface"
"AnnotationUtils.java:591"$0$0$0$11$73$"	 * itself will be checked; the inheritance hierarchy for interfaces will"
"AnnotationUtils.java:592"$0$0$0$4$21$"	 * not be traversed."
"AnnotationUtils.java:593"$0$0$0$6$54$"	 * <p>Meta-annotations will <em>not</em> be searched."
"AnnotationUtils.java:594"$0$0$0$12$70$"	 * <p>The standard {@link Class} API does not provide a mechanism for"
"AnnotationUtils.java:595"$0$0$0$10$73$"	 * determining which class in an inheritance hierarchy actually declares"
"AnnotationUtils.java:596"$0$0$0$11$64$"	 * an {@link Annotation}, so we need to handle this explicitly."
"AnnotationUtils.java:597"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:598"$0$0$0$15$79$"	 * @param clazz the class to check for the annotation on (may be {@code null})"
"AnnotationUtils.java:599"$0$0$0$11$69$"	 * @return the first {@link Class} in the inheritance hierarchy that"
"AnnotationUtils.java:600"$0$0$0$9$67$"	 * declares an annotation of the specified {@code annotationType},"
"AnnotationUtils.java:601"$0$0$0$7$32$"	 * or {@code null} if not found"
"AnnotationUtils.java:602"$0$0$0$3$41$"	 * @see Class#isAnnotationPresent(Class)"
"AnnotationUtils.java:603"$1$0$0$3$39$"	 * @see Class#getDeclaredAnnotations()"
"AnnotationUtils.java:604"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:605"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:606"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:607"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:608"$0$0$0$4$53$"	public static Class<?> findAnnotationDeclaringClass("
"AnnotationUtils.java:609"$0$0$0$8$74$"			Class<? extends Annotation> annotationType, @Nullable Class<?> clazz) {"
"AnnotationUtils.java:610"$0$0$0$0$0$""
"AnnotationUtils.java:611"$0$0$0$5$22$"		if (clazz == null) {"
"AnnotationUtils.java:612"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:613"$0$0$0$1$3$"		}"
"AnnotationUtils.java:614"$0$0$0$0$0$""
"AnnotationUtils.java:615"$0$0$0$4$76$"		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS)"
"AnnotationUtils.java:616"$1$0$0$2$61$"				.get(annotationType, MergedAnnotation::isDirectlyPresent)"
"AnnotationUtils.java:617"$1$0$0$1$17$"				.getSource();"
"AnnotationUtils.java:618"$0$0$0$1$2$"	}"
"AnnotationUtils.java:619"$0$0$0$0$0$""
"AnnotationUtils.java:620"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:621"$0$0$0$12$68$"	 * Find the first {@link Class} in the inheritance hierarchy of the"
"AnnotationUtils.java:622"$0$0$0$10$74$"	 * specified {@code clazz} (including the specified {@code clazz} itself)"
"AnnotationUtils.java:623"$0$0$0$12$69$"	 * on which at least one of the specified {@code annotationTypes} is"
"AnnotationUtils.java:624"$0$0$0$3$30$"	 * <em>directly present</em>."
"AnnotationUtils.java:625"$0$0$0$12$72$"	 * <p>If the supplied {@code clazz} is an interface, only the interface"
"AnnotationUtils.java:626"$0$0$0$11$73$"	 * itself will be checked; the inheritance hierarchy for interfaces will"
"AnnotationUtils.java:627"$0$0$0$4$21$"	 * not be traversed."
"AnnotationUtils.java:628"$0$0$0$6$54$"	 * <p>Meta-annotations will <em>not</em> be searched."
"AnnotationUtils.java:629"$0$0$0$12$70$"	 * <p>The standard {@link Class} API does not provide a mechanism for"
"AnnotationUtils.java:630"$0$0$0$10$73$"	 * determining which class in an inheritance hierarchy actually declares"
"AnnotationUtils.java:631"$0$0$0$10$71$"	 * one of several candidate {@linkplain Annotation annotations}, so we"
"AnnotationUtils.java:632"$0$0$0$6$35$"	 * need to handle this explicitly."
"AnnotationUtils.java:633"$0$0$0$9$59$"	 * @param annotationTypes the annotation types to look for"
"AnnotationUtils.java:634"$0$0$0$15$79$"	 * @param clazz the class to check for the annotation on (may be {@code null})"
"AnnotationUtils.java:635"$0$0$0$11$69$"	 * @return the first {@link Class} in the inheritance hierarchy that"
"AnnotationUtils.java:636"$0$0$0$11$59$"	 * declares an annotation of at least one of the specified"
"AnnotationUtils.java:637"$0$0$0$9$57$"	 * {@code annotationTypes}, or {@code null} if not found"
"AnnotationUtils.java:638"$0$0$0$3$16$"	 * @since 3.2.2"
"AnnotationUtils.java:639"$0$0$0$3$41$"	 * @see Class#isAnnotationPresent(Class)"
"AnnotationUtils.java:640"$1$0$0$3$39$"	 * @see Class#getDeclaredAnnotations()"
"AnnotationUtils.java:641"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:642"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:643"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:644"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:645"$0$0$0$4$61$"	public static Class<?> findAnnotationDeclaringClassForTypes("
"AnnotationUtils.java:646"$0$0$0$8$81$"			List<Class<? extends Annotation>> annotationTypes, @Nullable Class<?> clazz) {"
"AnnotationUtils.java:647"$0$0$0$0$0$""
"AnnotationUtils.java:648"$0$0$0$5$22$"		if (clazz == null) {"
"AnnotationUtils.java:649"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:650"$0$0$0$1$3$"		}"
"AnnotationUtils.java:651"$0$0$0$0$0$""
"AnnotationUtils.java:652"$0$0$0$4$76$"		return (Class<?>) MergedAnnotations.from(clazz, SearchStrategy.SUPERCLASS)"
"AnnotationUtils.java:653"$0$0$0$1$13$"				.stream()"
"AnnotationUtils.java:654"$0$0$0$1$104$"				.filter(MergedAnnotationPredicates.typeIn(annotationTypes).and(MergedAnnotation::isDirectlyPresent))"
"AnnotationUtils.java:655"$1$0$0$1$37$"				.map(MergedAnnotation::getSource)"
"AnnotationUtils.java:656"$0$0$0$1$30$"				.findFirst().orElse(null);"
"AnnotationUtils.java:657"$0$0$0$1$2$"	}"
"AnnotationUtils.java:658"$0$0$0$0$0$""
"AnnotationUtils.java:659"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:660"$0$0$0$10$75$"	 * Determine whether an annotation of the specified {@code annotationType}"
"AnnotationUtils.java:661"$0$0$0$10$72$"	 * is declared locally (i.e. <em>directly present</em>) on the supplied"
"AnnotationUtils.java:662"$0$0$0$3$18$"	 * {@code clazz}."
"AnnotationUtils.java:663"$0$0$0$9$57$"	 * <p>The supplied {@link Class} may represent any type."
"AnnotationUtils.java:664"$0$0$0$6$54$"	 * <p>Meta-annotations will <em>not</em> be searched."
"AnnotationUtils.java:665"$0$0$0$10$78$"	 * <p>Note: This method does <strong>not</strong> determine if the annotation"
"AnnotationUtils.java:666"$0$0$0$5$61$"	 * is {@linkplain java.lang.annotation.Inherited inherited}."
"AnnotationUtils.java:667"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:668"$0$0$0$11$57$"	 * @param clazz the class to check for the annotation on"
"AnnotationUtils.java:669"$0$0$0$12$81$"	 * @return {@code true} if an annotation of the specified {@code annotationType}"
"AnnotationUtils.java:670"$0$0$0$4$32$"	 * is <em>directly present</em>"
"AnnotationUtils.java:671"$1$0$0$3$49$"	 * @see java.lang.Class#getDeclaredAnnotations()"
"AnnotationUtils.java:672"$1$0$0$3$53$"	 * @see java.lang.Class#getDeclaredAnnotation(Class)"
"AnnotationUtils.java:673"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:674"$0$0$0$10$112$"	public static boolean isAnnotationDeclaredLocally(Class<? extends Annotation> annotationType, Class<?> clazz) {"
"AnnotationUtils.java:675"$1$0$0$2$79$"		return MergedAnnotations.from(clazz).get(annotationType).isDirectlyPresent();"
"AnnotationUtils.java:676"$0$0$0$1$2$"	}"
"AnnotationUtils.java:677"$0$0$0$0$0$""
"AnnotationUtils.java:678"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:679"$0$0$0$10$75$"	 * Determine whether an annotation of the specified {@code annotationType}"
"AnnotationUtils.java:680"$0$0$0$10$60$"	 * is <em>present</em> on the supplied {@code clazz} and is"
"AnnotationUtils.java:681"$0$0$0$4$57$"	 * {@linkplain java.lang.annotation.Inherited inherited}"
"AnnotationUtils.java:682"$0$0$0$5$41$"	 * (i.e. not <em>directly present</em>)."
"AnnotationUtils.java:683"$0$0$0$6$54$"	 * <p>Meta-annotations will <em>not</em> be searched."
"AnnotationUtils.java:684"$0$0$0$12$72$"	 * <p>If the supplied {@code clazz} is an interface, only the interface"
"AnnotationUtils.java:685"$0$0$0$10$71$"	 * itself will be checked. In accordance with standard meta-annotation"
"AnnotationUtils.java:686"$0$0$0$11$72$"	 * semantics in Java, the inheritance hierarchy for interfaces will not"
"AnnotationUtils.java:687"$0$0$0$8$77$"	 * be traversed. See the {@linkplain java.lang.annotation.Inherited javadoc}"
"AnnotationUtils.java:688"$0$0$0$10$76$"	 * for the {@code @Inherited} meta-annotation for further details regarding"
"AnnotationUtils.java:689"$0$0$0$3$27$"	 * annotation inheritance."
"AnnotationUtils.java:690"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"AnnotationUtils.java:691"$0$0$0$11$57$"	 * @param clazz the class to check for the annotation on"
"AnnotationUtils.java:692"$0$0$0$12$81$"	 * @return {@code true} if an annotation of the specified {@code annotationType}"
"AnnotationUtils.java:693"$0$0$0$5$46$"	 * is <em>present</em> and <em>inherited</em>"
"AnnotationUtils.java:694"$0$0$0$3$41$"	 * @see Class#isAnnotationPresent(Class)"
"AnnotationUtils.java:695"$0$0$0$4$51$"	 * @see #isAnnotationDeclaredLocally(Class, Class)"
"AnnotationUtils.java:696"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:697"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:698"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:699"$0$0$0$10$106$"	public static boolean isAnnotationInherited(Class<? extends Annotation> annotationType, Class<?> clazz) {"
"AnnotationUtils.java:700"$0$0$0$3$76$"		return MergedAnnotations.from(clazz, SearchStrategy.INHERITED_ANNOTATIONS)"
"AnnotationUtils.java:701"$0$0$0$1$27$"				.stream(annotationType)"
"AnnotationUtils.java:702"$0$0$0$1$48$"				.filter(MergedAnnotation::isDirectlyPresent)"
"AnnotationUtils.java:703"$0$0$0$1$53$"				.findFirst().orElseGet(MergedAnnotation::missing)"
"AnnotationUtils.java:704"$1$0$0$3$29$"				.getAggregateIndex() > 0;"
"AnnotationUtils.java:705"$0$0$0$1$2$"	}"
"AnnotationUtils.java:706"$0$0$0$0$0$""
"AnnotationUtils.java:707"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:708"$0$0$0$10$68$"	 * Determine if an annotation of type {@code metaAnnotationType} is"
"AnnotationUtils.java:709"$0$0$0$7$65$"	 * <em>meta-present</em> on the supplied {@code annotationType}."
"AnnotationUtils.java:710"$0$0$0$9$58$"	 * @param annotationType the annotation type to search on"
"AnnotationUtils.java:711"$0$0$0$10$71$"	 * @param metaAnnotationType the type of meta-annotation to search for"
"AnnotationUtils.java:712"$0$0$0$10$62$"	 * @return {@code true} if such an annotation is meta-present"
"AnnotationUtils.java:713"$0$0$0$3$16$"	 * @since 4.2.1"
"AnnotationUtils.java:714"$0$0$0$14$85$"	 * @deprecated as of 5.2 since it is superseded by the {@link MergedAnnotations} API"
"AnnotationUtils.java:715"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:716"$0$0$0$1$12$"	@Deprecated"
"AnnotationUtils.java:717"$0$0$0$7$90$"	public static boolean isAnnotationMetaPresent(Class<? extends Annotation> annotationType,"
"AnnotationUtils.java:718"$0$0$0$6$62$"			@Nullable Class<? extends Annotation> metaAnnotationType) {"
"AnnotationUtils.java:719"$0$0$0$0$0$""
"AnnotationUtils.java:720"$0$0$0$5$35$"		if (metaAnnotationType == null) {"
"AnnotationUtils.java:721"$0$0$0$2$16$"			return false;"
"AnnotationUtils.java:722"$0$0$0$1$3$"		}"
"AnnotationUtils.java:723"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotationUtils.java:724"$0$0$0$3$59$"		if (AnnotationFilter.PLAIN.matches(metaAnnotationType) ||"
"AnnotationUtils.java:725"$0$0$0$2$69$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotationType)) {"
"AnnotationUtils.java:726"$0$0$0$2$65$"			return annotationType.isAnnotationPresent(metaAnnotationType);"
"AnnotationUtils.java:727"$0$0$0$1$3$"		}"
"AnnotationUtils.java:728"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotationUtils.java:729"$0$0$0$3$85$"		return MergedAnnotations.from(annotationType, SearchStrategy.INHERITED_ANNOTATIONS,"
"AnnotationUtils.java:730"$0$0$0$1$63$"				RepeatableContainers.none()).isPresent(metaAnnotationType);"
"AnnotationUtils.java:731"$0$0$0$1$2$"	}"
"AnnotationUtils.java:732"$0$0$0$0$0$""
"AnnotationUtils.java:733"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:734"$0$0$0$13$75$"	 * Determine if the supplied {@link Annotation} is defined in the core JDK"
"AnnotationUtils.java:735"$0$0$0$4$41$"	 * {@code java.lang.annotation} package."
"AnnotationUtils.java:736"$0$0$0$7$45$"	 * @param annotation the annotation to check"
"AnnotationUtils.java:737"$0$0$0$13$89$"	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package"
"AnnotationUtils.java:738"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:739"$0$0$0$7$87$"	public static boolean isInJavaLangAnnotationPackage(@Nullable Annotation annotation) {"
"AnnotationUtils.java:740"$0$0$0$6$81$"		return (annotation != null && JAVA_LANG_ANNOTATION_FILTER.matches(annotation));"
"AnnotationUtils.java:741"$0$0$0$1$2$"	}"
"AnnotationUtils.java:742"$0$0$0$0$0$""
"AnnotationUtils.java:743"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:744"$0$0$0$12$73$"	 * Determine if the {@link Annotation} with the supplied name is defined"
"AnnotationUtils.java:745"$0$0$0$8$57$"	 * in the core JDK {@code java.lang.annotation} package."
"AnnotationUtils.java:746"$0$0$0$11$66$"	 * @param annotationType the name of the annotation type to check"
"AnnotationUtils.java:747"$0$0$0$13$89$"	 * @return {@code true} if the annotation is in the {@code java.lang.annotation} package"
"AnnotationUtils.java:748"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:749"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:750"$0$0$0$7$87$"	public static boolean isInJavaLangAnnotationPackage(@Nullable String annotationType) {"
"AnnotationUtils.java:751"$0$0$0$6$89$"		return (annotationType != null && JAVA_LANG_ANNOTATION_FILTER.matches(annotationType));"
"AnnotationUtils.java:752"$0$0$0$1$2$"	}"
"AnnotationUtils.java:753"$0$0$0$0$0$""
"AnnotationUtils.java:754"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:755"$0$0$0$12$81$"	 * Check the declared attributes of the given annotation, in particular covering"
"AnnotationUtils.java:756"$0$0$0$10$80$"	 * Google App Engine's late arrival of {@code TypeNotPresentExceptionProxy} for"
"AnnotationUtils.java:757"$1$0$0$10$82$"	 * {@code Class} values (instead of early {@code Class.getAnnotations() failure}."
"AnnotationUtils.java:758"$1$0$0$9$90$"	 * <p>This method not failing indicates that {@link #getAnnotationAttributes(Annotation)}"
"AnnotationUtils.java:759"$0$0$0$8$51$"	 * won't failure either (when attempted later on)."
"AnnotationUtils.java:760"$0$0$0$7$48$"	 * @param annotation the annotation to validate"
"AnnotationUtils.java:761"$0$0$0$13$89$"	 * @throws IllegalStateException if a declared {@code Class} attribute could not be read"
"AnnotationUtils.java:762"$0$0$0$3$17$"	 * @since 4.3.15"
"AnnotationUtils.java:763"$1$0$0$3$31$"	 * @see Class#getAnnotations()"
"AnnotationUtils.java:764"$1$0$0$3$45$"	 * @see #getAnnotationAttributes(Annotation)"
"AnnotationUtils.java:765"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:766"$0$0$0$6$63$"	public static void validateAnnotation(Annotation annotation) {"
"AnnotationUtils.java:767"$0$0$0$1$87$"		AttributeMethods.forAnnotationType(annotation.annotationType()).validate(annotation);"
"AnnotationUtils.java:768"$0$0$0$1$2$"	}"
"AnnotationUtils.java:769"$0$0$0$0$0$""
"AnnotationUtils.java:770"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:771"$0$0$0$12$79$"	 * Retrieve the given annotation's attributes as a {@link Map}, preserving all"
"AnnotationUtils.java:772"$0$0$0$3$20$"	 * attribute types."
"AnnotationUtils.java:773"$1$0$0$8$91$"	 * <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)}"
"AnnotationUtils.java:774"$0$0$0$9$86$"	 * with the {@code classValuesAsString} and {@code nestedAnnotationsAsMap} parameters"
"AnnotationUtils.java:775"$0$0$0$5$25$"	 * set to {@code false}."
"AnnotationUtils.java:776"$0$0$0$10$83$"	 * <p>Note: This method actually returns an {@link AnnotationAttributes} instance."
"AnnotationUtils.java:777"$0$0$0$12$83$"	 * However, the {@code Map} signature has been preserved for binary compatibility."
"AnnotationUtils.java:778"$0$0$0$10$67$"	 * @param annotation the annotation to retrieve the attributes for"
"AnnotationUtils.java:779"$0$0$0$13$78$"	 * @return the Map of annotation attributes, with attribute names as keys and"
"AnnotationUtils.java:780"$0$0$0$9$65$"	 * corresponding attribute values as values (never {@code null})"
"AnnotationUtils.java:781"$1$0$0$4$63$"	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation)"
"AnnotationUtils.java:782"$1$0$0$5$63$"	 * @see #getAnnotationAttributes(Annotation, boolean, boolean)"
"AnnotationUtils.java:783"$1$0$0$6$81$"	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)"
"AnnotationUtils.java:784"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:785"$1$0$0$7$83$"	public static Map<String, Object> getAnnotationAttributes(Annotation annotation) {"
"AnnotationUtils.java:786"$1$0$0$3$51$"		return getAnnotationAttributes(null, annotation);"
"AnnotationUtils.java:787"$0$0$0$1$2$"	}"
"AnnotationUtils.java:788"$0$0$0$0$0$""
"AnnotationUtils.java:789"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:790"$0$0$0$10$64$"	 * Retrieve the given annotation's attributes as a {@link Map}."
"AnnotationUtils.java:791"$1$0$0$8$91$"	 * <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)}"
"AnnotationUtils.java:792"$0$0$0$10$75$"	 * with the {@code nestedAnnotationsAsMap} parameter set to {@code false}."
"AnnotationUtils.java:793"$0$0$0$10$83$"	 * <p>Note: This method actually returns an {@link AnnotationAttributes} instance."
"AnnotationUtils.java:794"$0$0$0$12$83$"	 * However, the {@code Map} signature has been preserved for binary compatibility."
"AnnotationUtils.java:795"$0$0$0$10$67$"	 * @param annotation the annotation to retrieve the attributes for"
"AnnotationUtils.java:796"$0$0$0$11$84$"	 * @param classValuesAsString whether to convert Class references into Strings (for"
"AnnotationUtils.java:797"$0$0$0$5$80$"	 * compatibility with {@link org.springframework.core.type.AnnotationMetadata})"
"AnnotationUtils.java:798"$0$0$0$8$43$"	 * or to preserve them as Class references"
"AnnotationUtils.java:799"$0$0$0$13$78$"	 * @return the Map of annotation attributes, with attribute names as keys and"
"AnnotationUtils.java:800"$0$0$0$9$65$"	 * corresponding attribute values as values (never {@code null})"
"AnnotationUtils.java:801"$1$0$0$5$63$"	 * @see #getAnnotationAttributes(Annotation, boolean, boolean)"
"AnnotationUtils.java:802"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:803"$1$0$0$5$59$"	public static Map<String, Object> getAnnotationAttributes("
"AnnotationUtils.java:804"$0$0$0$5$56$"			Annotation annotation, boolean classValuesAsString) {"
"AnnotationUtils.java:805"$0$0$0$0$0$""
"AnnotationUtils.java:806"$1$0$0$4$73$"		return getAnnotationAttributes(annotation, classValuesAsString, false);"
"AnnotationUtils.java:807"$0$0$0$1$2$"	}"
"AnnotationUtils.java:808"$0$0$0$0$0$""
"AnnotationUtils.java:809"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:810"$0$0$0$11$86$"	 * Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map."
"AnnotationUtils.java:811"$0$0$0$12$87$"	 * <p>This method provides fully recursive annotation reading capabilities on par with"
"AnnotationUtils.java:812"$0$0$0$5$90$"	 * the reflection-based {@link org.springframework.core.type.StandardAnnotationMetadata}."
"AnnotationUtils.java:813"$0$0$0$10$67$"	 * @param annotation the annotation to retrieve the attributes for"
"AnnotationUtils.java:814"$0$0$0$11$84$"	 * @param classValuesAsString whether to convert Class references into Strings (for"
"AnnotationUtils.java:815"$0$0$0$5$80$"	 * compatibility with {@link org.springframework.core.type.AnnotationMetadata})"
"AnnotationUtils.java:816"$0$0$0$8$43$"	 * or to preserve them as Class references"
"AnnotationUtils.java:817"$0$0$0$9$76$"	 * @param nestedAnnotationsAsMap whether to convert nested annotations into"
"AnnotationUtils.java:818"$0$0$0$7$61$"	 * {@link AnnotationAttributes} maps (for compatibility with"
"AnnotationUtils.java:819"$0$0$0$8$84$"	 * {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as"
"AnnotationUtils.java:820"$0$0$0$4$32$"	 * {@code Annotation} instances"
"AnnotationUtils.java:821"$0$0$0$13$86$"	 * @return the annotation attributes (a specialized Map) with attribute names as keys"
"AnnotationUtils.java:822"$0$0$0$10$69$"	 * and corresponding attribute values as values (never {@code null})"
"AnnotationUtils.java:823"$0$0$0$3$16$"	 * @since 3.1.1"
"AnnotationUtils.java:824"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:825"$1$0$0$4$60$"	public static AnnotationAttributes getAnnotationAttributes("
"AnnotationUtils.java:826"$0$0$0$7$88$"			Annotation annotation, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {"
"AnnotationUtils.java:827"$0$0$0$0$0$""
"AnnotationUtils.java:828"$1$0$0$5$96$"		return getAnnotationAttributes(null, annotation, classValuesAsString, nestedAnnotationsAsMap);"
"AnnotationUtils.java:829"$0$0$0$1$2$"	}"
"AnnotationUtils.java:830"$0$0$0$0$0$""
"AnnotationUtils.java:831"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:832"$0$0$0$11$86$"	 * Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map."
"AnnotationUtils.java:833"$1$0$0$9$109$"	 * <p>Equivalent to calling {@link #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)}"
"AnnotationUtils.java:834"$0$0$0$9$86$"	 * with the {@code classValuesAsString} and {@code nestedAnnotationsAsMap} parameters"
"AnnotationUtils.java:835"$0$0$0$5$25$"	 * set to {@code false}."
"AnnotationUtils.java:836"$0$0$0$12$87$"	 * @param annotatedElement the element that is annotated with the supplied annotation;"
"AnnotationUtils.java:837"$0$0$0$7$34$"	 * may be {@code null} if unknown"
"AnnotationUtils.java:838"$0$0$0$10$67$"	 * @param annotation the annotation to retrieve the attributes for"
"AnnotationUtils.java:839"$0$0$0$13$86$"	 * @return the annotation attributes (a specialized Map) with attribute names as keys"
"AnnotationUtils.java:840"$0$0$0$10$69$"	 * and corresponding attribute values as values (never {@code null})"
"AnnotationUtils.java:841"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:842"$1$0$0$6$81$"	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)"
"AnnotationUtils.java:843"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:844"$1$0$0$4$60$"	public static AnnotationAttributes getAnnotationAttributes("
"AnnotationUtils.java:845"$0$0$0$6$72$"			@Nullable AnnotatedElement annotatedElement, Annotation annotation) {"
"AnnotationUtils.java:846"$0$0$0$0$0$""
"AnnotationUtils.java:847"$1$0$0$5$77$"		return getAnnotationAttributes(annotatedElement, annotation, false, false);"
"AnnotationUtils.java:848"$0$0$0$1$2$"	}"
"AnnotationUtils.java:849"$0$0$0$0$0$""
"AnnotationUtils.java:850"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:851"$0$0$0$11$86$"	 * Retrieve the given annotation's attributes as an {@link AnnotationAttributes} map."
"AnnotationUtils.java:852"$0$0$0$12$87$"	 * <p>This method provides fully recursive annotation reading capabilities on par with"
"AnnotationUtils.java:853"$0$0$0$5$90$"	 * the reflection-based {@link org.springframework.core.type.StandardAnnotationMetadata}."
"AnnotationUtils.java:854"$0$0$0$12$87$"	 * @param annotatedElement the element that is annotated with the supplied annotation;"
"AnnotationUtils.java:855"$0$0$0$7$34$"	 * may be {@code null} if unknown"
"AnnotationUtils.java:856"$0$0$0$10$67$"	 * @param annotation the annotation to retrieve the attributes for"
"AnnotationUtils.java:857"$0$0$0$11$84$"	 * @param classValuesAsString whether to convert Class references into Strings (for"
"AnnotationUtils.java:858"$0$0$0$5$80$"	 * compatibility with {@link org.springframework.core.type.AnnotationMetadata})"
"AnnotationUtils.java:859"$0$0$0$8$43$"	 * or to preserve them as Class references"
"AnnotationUtils.java:860"$0$0$0$9$76$"	 * @param nestedAnnotationsAsMap whether to convert nested annotations into"
"AnnotationUtils.java:861"$0$0$0$7$61$"	 * {@link AnnotationAttributes} maps (for compatibility with"
"AnnotationUtils.java:862"$0$0$0$8$84$"	 * {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as"
"AnnotationUtils.java:863"$0$0$0$4$32$"	 * {@code Annotation} instances"
"AnnotationUtils.java:864"$0$0$0$13$86$"	 * @return the annotation attributes (a specialized Map) with attribute names as keys"
"AnnotationUtils.java:865"$0$0$0$10$69$"	 * and corresponding attribute values as values (never {@code null})"
"AnnotationUtils.java:866"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:867"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:868"$1$0$0$4$60$"	public static AnnotationAttributes getAnnotationAttributes("
"AnnotationUtils.java:869"$0$0$0$5$70$"			@Nullable AnnotatedElement annotatedElement, Annotation annotation,"
"AnnotationUtils.java:870"$0$0$0$5$65$"			boolean classValuesAsString, boolean nestedAnnotationsAsMap) {"
"AnnotationUtils.java:871"$0$0$0$0$0$""
"AnnotationUtils.java:872"$0$0$0$5$82$"		Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);"
"AnnotationUtils.java:873"$0$0$0$3$60$"		return MergedAnnotation.from(annotatedElement, annotation)"
"AnnotationUtils.java:874"$0$0$0$1$30$"				.withNonMergedAttributes()"
"AnnotationUtils.java:875"$0$0$0$2$30$"				.asMap(mergedAnnotation ->"
"AnnotationUtils.java:876"$1$0$0$4$79$"						new AnnotationAttributes(mergedAnnotation.getType(), true), adaptations);"
"AnnotationUtils.java:877"$0$0$0$1$2$"	}"
"AnnotationUtils.java:878"$0$0$0$0$0$""
"AnnotationUtils.java:879"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:880"$0$0$0$10$77$"	 * Register the annotation-declared default values for the given attributes,"
"AnnotationUtils.java:881"$0$0$0$3$17$"	 * if available."
"AnnotationUtils.java:882"$0$0$0$8$58$"	 * @param attributes the annotation attributes to process"
"AnnotationUtils.java:883"$0$0$0$3$16$"	 * @since 4.3.2"
"AnnotationUtils.java:884"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:885"$0$0$0$6$76$"	public static void registerDefaultValues(AnnotationAttributes attributes) {"
"AnnotationUtils.java:886"$0$0$0$6$75$"		Class<? extends Annotation> annotationType = attributes.annotationType();"
"AnnotationUtils.java:887"$1$0$0$7$83$"		if (annotationType != null && Modifier.isPublic(annotationType.getModifiers()) &&"
"AnnotationUtils.java:888"$0$0$0$2$54$"				!AnnotationFilter.PLAIN.matches(annotationType)) {"
"AnnotationUtils.java:889"$1$0$0$5$84$"			Map<String, DefaultValueHolder> defaultValues = getDefaultValues(annotationType);"
"AnnotationUtils.java:890"$0$0$0$1$50$"			defaultValues.forEach(attributes::putIfAbsent);"
"AnnotationUtils.java:891"$0$0$0$1$3$"		}"
"AnnotationUtils.java:892"$0$0$0$1$2$"	}"
"AnnotationUtils.java:893"$0$0$0$0$0$""
"AnnotationUtils.java:894"$1$0$0$5$65$"	private static Map<String, DefaultValueHolder> getDefaultValues("
"AnnotationUtils.java:895"$0$0$0$5$48$"			Class<? extends Annotation> annotationType) {"
"AnnotationUtils.java:896"$0$0$0$0$0$""
"AnnotationUtils.java:897"$0$0$0$2$59$"		return defaultValuesCache.computeIfAbsent(annotationType,"
"AnnotationUtils.java:898"$0$0$0$1$43$"				AnnotationUtils::computeDefaultValues);"
"AnnotationUtils.java:899"$0$0$0$1$2$"	}"
"AnnotationUtils.java:900"$0$0$0$0$0$""
"AnnotationUtils.java:901"$0$0$0$5$69$"	private static Map<String, DefaultValueHolder> computeDefaultValues("
"AnnotationUtils.java:902"$0$0$0$5$48$"			Class<? extends Annotation> annotationType) {"
"AnnotationUtils.java:903"$0$0$0$0$0$""
"AnnotationUtils.java:904"$0$0$0$4$80$"		AttributeMethods methods = AttributeMethods.forAnnotationType(annotationType);"
"AnnotationUtils.java:905"$0$0$0$3$41$"		if (!methods.hasDefaultValueMethod()) {"
"AnnotationUtils.java:906"$0$0$0$2$33$"			return Collections.emptyMap();"
"AnnotationUtils.java:907"$0$0$0$1$3$"		}"
"AnnotationUtils.java:908"$0$0$0$6$79$"		Map<String, DefaultValueHolder> result = new LinkedHashMap<>(methods.size());"
"AnnotationUtils.java:909"$0$0$0$3$39$"		if (!methods.hasNestedAnnotation()) {"
"AnnotationUtils.java:910"$0$0$1$10$59$"			// Use simpler method if there are no nested annotations"
"AnnotationUtils.java:911"$0$0$0$10$45$"			for (int i = 0; i < methods.size(); i++) {"
"AnnotationUtils.java:912"$1$0$0$4$35$"				Method method = methods.get(i);"
"AnnotationUtils.java:913"$1$0$0$4$51$"				Object defaultValue = method.getDefaultValue();"
"AnnotationUtils.java:914"$0$0$0$5$31$"				if (defaultValue != null) {"
"AnnotationUtils.java:915"$1$0$0$3$72$"					result.put(method.getName(), new DefaultValueHolder(defaultValue));"
"AnnotationUtils.java:916"$0$0$0$1$5$"				}"
"AnnotationUtils.java:917"$0$0$0$1$4$"			}"
"AnnotationUtils.java:918"$0$0$0$1$3$"		}"
"AnnotationUtils.java:919"$0$0$0$2$8$"		else {"
"AnnotationUtils.java:920"$0$0$1$12$64$"			// If we have nested annotations, we need them as nested maps"
"AnnotationUtils.java:921"$0$0$0$4$72$"			AnnotationAttributes attributes = MergedAnnotation.of(annotationType)"
"AnnotationUtils.java:922"$0$0$0$2$25$"					.asMap(annotation ->"
"AnnotationUtils.java:923"$1$0$0$4$86$"							new AnnotationAttributes(annotation.getType(), true), Adapt.ANNOTATION_TO_MAP);"
"AnnotationUtils.java:924"$0$0$0$7$68$"			for (Map.Entry<String, Object> element : attributes.entrySet()) {"
"AnnotationUtils.java:925"$2$0$0$3$77$"				result.put(element.getKey(), new DefaultValueHolder(element.getValue()));"
"AnnotationUtils.java:926"$0$0$0$1$4$"			}"
"AnnotationUtils.java:927"$0$0$0$1$3$"		}"
"AnnotationUtils.java:928"$0$0$0$2$16$"		return result;"
"AnnotationUtils.java:929"$0$0$0$1$2$"	}"
"AnnotationUtils.java:930"$0$0$0$0$0$""
"AnnotationUtils.java:931"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:932"$0$0$0$8$77$"	 * Post-process the supplied {@link AnnotationAttributes}, preserving nested"
"AnnotationUtils.java:933"$0$0$0$6$48$"	 * annotations as {@code Annotation} instances."
"AnnotationUtils.java:934"$0$0$0$8$76$"	 * <p>Specifically, this method enforces <em>attribute alias</em> semantics"
"AnnotationUtils.java:935"$0$0$0$11$80$"	 * for annotation attributes that are annotated with {@link AliasFor @AliasFor}"
"AnnotationUtils.java:936"$0$0$0$11$79$"	 * and replaces default value placeholders with their original default values."
"AnnotationUtils.java:937"$0$0$0$12$79$"	 * @param annotatedElement the element that is annotated with an annotation or"
"AnnotationUtils.java:938"$0$0$0$10$73$"	 * annotation hierarchy from which the supplied attributes were created;"
"AnnotationUtils.java:939"$0$0$0$7$34$"	 * may be {@code null} if unknown"
"AnnotationUtils.java:940"$0$0$0$8$63$"	 * @param attributes the annotation attributes to post-process"
"AnnotationUtils.java:941"$0$0$0$11$84$"	 * @param classValuesAsString whether to convert Class references into Strings (for"
"AnnotationUtils.java:942"$0$0$0$5$80$"	 * compatibility with {@link org.springframework.core.type.AnnotationMetadata})"
"AnnotationUtils.java:943"$0$0$0$8$43$"	 * or to preserve them as Class references"
"AnnotationUtils.java:944"$0$0$0$3$16$"	 * @since 4.3.2"
"AnnotationUtils.java:945"$1$0$0$4$40$"	 * @see #getDefaultValue(Class, String)"
"AnnotationUtils.java:946"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:947"$0$0$0$6$86$"	public static void postProcessAnnotationAttributes(@Nullable Object annotatedElement,"
"AnnotationUtils.java:948"$0$0$0$6$76$"			@Nullable AnnotationAttributes attributes, boolean classValuesAsString) {"
"AnnotationUtils.java:949"$0$0$0$0$0$""
"AnnotationUtils.java:950"$0$0$0$5$27$"		if (attributes == null) {"
"AnnotationUtils.java:951"$0$0$0$1$10$"			return;"
"AnnotationUtils.java:952"$0$0$0$1$3$"		}"
"AnnotationUtils.java:953"$0$0$0$3$30$"		if (!attributes.validated) {"
"AnnotationUtils.java:954"$0$0$0$6$76$"			Class<? extends Annotation> annotationType = attributes.annotationType();"
"AnnotationUtils.java:955"$0$0$0$5$32$"			if (annotationType == null) {"
"AnnotationUtils.java:956"$0$0$0$1$11$"				return;"
"AnnotationUtils.java:957"$0$0$0$1$4$"			}"
"AnnotationUtils.java:958"$1$0$0$4$99$"			AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);"
"AnnotationUtils.java:959"$1$0$0$10$61$"			for (int i = 0; i < mapping.getMirrorSets().size(); i++) {"
"AnnotationUtils.java:960"$2$0$0$4$57$"				MirrorSet mirrorSet = mapping.getMirrorSets().get(i);"
"AnnotationUtils.java:961"$0$0$0$5$72$"				int resolved = mirrorSet.resolve(attributes.displayName, attributes,"
"AnnotationUtils.java:962"$1$0$0$1$61$"						AnnotationUtils::getAttributeValueForMirrorResolution);"
"AnnotationUtils.java:963"$0$0$0$5$25$"				if (resolved != -1) {"
"AnnotationUtils.java:964"$2$0$0$4$62$"					Method attribute = mapping.getAttributes().get(resolved);"
"AnnotationUtils.java:965"$2$0$0$4$56$"					Object value = attributes.get(attribute.getName());"
"AnnotationUtils.java:966"$0$0$0$10$49$"					for (int j = 0; j < mirrorSet.size(); j++) {"
"AnnotationUtils.java:967"$1$0$0$4$39$"						Method mirror = mirrorSet.get(j);"
"AnnotationUtils.java:968"$0$0$0$5$32$"						if (mirror != attribute) {"
"AnnotationUtils.java:969"$1$0$0$1$39$"							attributes.put(mirror.getName(),"
"AnnotationUtils.java:970"$0$0$0$3$67$"									adaptValue(annotatedElement, value, classValuesAsString));"
"AnnotationUtils.java:971"$0$0$0$1$7$"						}"
"AnnotationUtils.java:972"$0$0$0$1$6$"					}"
"AnnotationUtils.java:973"$0$0$0$1$5$"				}"
"AnnotationUtils.java:974"$0$0$0$1$4$"			}"
"AnnotationUtils.java:975"$0$0$0$1$3$"		}"
"AnnotationUtils.java:976"$0$0$0$7$74$"		for (Map.Entry<String, Object> attributeEntry : attributes.entrySet()) {"
"AnnotationUtils.java:977"$1$0$0$4$50$"			String attributeName = attributeEntry.getKey();"
"AnnotationUtils.java:978"$1$0$0$4$44$"			Object value = attributeEntry.getValue();"
"AnnotationUtils.java:979"$0$0$0$5$45$"			if (value instanceof DefaultValueHolder) {"
"AnnotationUtils.java:980"$0$0$0$4$54$"				value = ((DefaultValueHolder) value).defaultValue;"
"AnnotationUtils.java:981"$0$0$0$1$33$"				attributes.put(attributeName,"
"AnnotationUtils.java:982"$0$0$0$3$64$"						adaptValue(annotatedElement, value, classValuesAsString));"
"AnnotationUtils.java:983"$0$0$0$1$4$"			}"
"AnnotationUtils.java:984"$0$0$0$1$3$"		}"
"AnnotationUtils.java:985"$0$0$0$1$2$"	}"
"AnnotationUtils.java:986"$0$0$0$0$0$""
"AnnotationUtils.java:987"$1$0$0$8$98$"	private static Object getAttributeValueForMirrorResolution(Method attribute, Object attributes) {"
"AnnotationUtils.java:988"$2$0$0$5$79$"		Object result = ((AnnotationAttributes) attributes).get(attribute.getName());"
"AnnotationUtils.java:989"$0$0$0$9$102$"		return (result instanceof DefaultValueHolder ? ((DefaultValueHolder) result).defaultValue : result);"
"AnnotationUtils.java:990"$0$0$0$1$2$"	}"
"AnnotationUtils.java:991"$0$0$0$0$0$""
"AnnotationUtils.java:992"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:993"$0$0$0$4$34$"	private static Object adaptValue("
"AnnotationUtils.java:994"$0$0$0$9$92$"			@Nullable Object annotatedElement, @Nullable Object value, boolean classValuesAsString) {"
"AnnotationUtils.java:995"$0$0$0$0$0$""
"AnnotationUtils.java:996"$0$0$0$3$28$"		if (classValuesAsString) {"
"AnnotationUtils.java:997"$0$0$0$5$32$"			if (value instanceof Class) {"
"AnnotationUtils.java:998"$1$0$0$3$40$"				return ((Class<?>) value).getName();"
"AnnotationUtils.java:999"$0$0$0$1$4$"			}"
"AnnotationUtils.java:1000"$0$0$0$5$34$"			if (value instanceof Class[]) {"
"AnnotationUtils.java:1001"$0$0$0$5$44$"				Class<?>[] classes = (Class<?>[]) value;"
"AnnotationUtils.java:1002"$0$0$0$5$48$"				String[] names = new String[classes.length];"
"AnnotationUtils.java:1003"$0$0$0$10$46$"				for (int i = 0; i < classes.length; i++) {"
"AnnotationUtils.java:1004"$1$0$0$3$37$"					names[i] = classes[i].getName();"
"AnnotationUtils.java:1005"$0$0$0$1$5$"				}"
"AnnotationUtils.java:1006"$0$0$0$2$17$"				return names;"
"AnnotationUtils.java:1007"$0$0$0$1$4$"			}"
"AnnotationUtils.java:1008"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1009"$0$0$0$5$36$"		if (value instanceof Annotation) {"
"AnnotationUtils.java:1010"$0$0$0$5$46$"			Annotation annotation = (Annotation) value;"
"AnnotationUtils.java:1011"$0$0$0$3$75$"			return MergedAnnotation.from(annotatedElement, annotation).synthesize();"
"AnnotationUtils.java:1012"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1013"$0$0$0$5$38$"		if (value instanceof Annotation[]) {"
"AnnotationUtils.java:1014"$0$0$0$5$51$"			Annotation[] annotations = (Annotation[]) value;"
"AnnotationUtils.java:1015"$0$0$0$5$63$"			Annotation[] synthesized = (Annotation[]) Array.newInstance("
"AnnotationUtils.java:1016"$2$0$0$2$68$"					annotations.getClass().getComponentType(), annotations.length);"
"AnnotationUtils.java:1017"$0$0$0$10$49$"			for (int i = 0; i < annotations.length; i++) {"
"AnnotationUtils.java:1018"$0$0$0$4$90$"				synthesized[i] = MergedAnnotation.from(annotatedElement, annotations[i]).synthesize();"
"AnnotationUtils.java:1019"$0$0$0$1$4$"			}"
"AnnotationUtils.java:1020"$0$0$0$2$22$"			return synthesized;"
"AnnotationUtils.java:1021"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1022"$0$0$0$2$15$"		return value;"
"AnnotationUtils.java:1023"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1024"$0$0$0$0$0$""
"AnnotationUtils.java:1025"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1026"$0$0$0$11$67$"	 * Retrieve the <em>value</em> of the {@code value} attribute of a"
"AnnotationUtils.java:1027"$0$0$0$7$60$"	 * single-element Annotation, given an annotation instance."
"AnnotationUtils.java:1028"$0$0$0$12$78$"	 * @param annotation the annotation instance from which to retrieve the value"
"AnnotationUtils.java:1029"$0$0$0$14$82$"	 * @return the attribute value, or {@code null} if not found unless the attribute"
"AnnotationUtils.java:1030"$0$0$0$10$81$"	 * value cannot be retrieved due to an {@link AnnotationConfigurationException},"
"AnnotationUtils.java:1031"$0$0$0$10$52$"	 * in which case such an exception will be rethrown"
"AnnotationUtils.java:1032"$1$0$0$4$38$"	 * @see #getValue(Annotation, String)"
"AnnotationUtils.java:1033"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1034"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:1035"$1$0$0$6$55$"	public static Object getValue(Annotation annotation) {"
"AnnotationUtils.java:1036"$1$0$0$3$37$"		return getValue(annotation, VALUE);"
"AnnotationUtils.java:1037"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1038"$0$0$0$0$0$""
"AnnotationUtils.java:1039"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1040"$0$0$0$12$83$"	 * Retrieve the <em>value</em> of a named attribute, given an annotation instance."
"AnnotationUtils.java:1041"$0$0$0$12$78$"	 * @param annotation the annotation instance from which to retrieve the value"
"AnnotationUtils.java:1042"$0$0$0$11$68$"	 * @param attributeName the name of the attribute value to retrieve"
"AnnotationUtils.java:1043"$0$0$0$14$82$"	 * @return the attribute value, or {@code null} if not found unless the attribute"
"AnnotationUtils.java:1044"$0$0$0$10$81$"	 * value cannot be retrieved due to an {@link AnnotationConfigurationException},"
"AnnotationUtils.java:1045"$0$0$0$10$52$"	 * in which case such an exception will be rethrown"
"AnnotationUtils.java:1046"$1$0$0$3$30$"	 * @see #getValue(Annotation)"
"AnnotationUtils.java:1047"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1048"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:1049"$1$0$0$10$97$"	public static Object getValue(@Nullable Annotation annotation, @Nullable String attributeName) {"
"AnnotationUtils.java:1050"$0$0$0$7$66$"		if (annotation == null || !StringUtils.hasText(attributeName)) {"
"AnnotationUtils.java:1051"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:1052"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1053"$0$0$0$2$7$"		try {"
"AnnotationUtils.java:1054"$1$0$0$4$80$"			Method method = annotation.annotationType().getDeclaredMethod(attributeName);"
"AnnotationUtils.java:1055"$0$0$0$1$42$"			ReflectionUtils.makeAccessible(method);"
"AnnotationUtils.java:1056"$0$0$0$2$36$"			return method.invoke(annotation);"
"AnnotationUtils.java:1057"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1058"$0$0$0$4$36$"		catch (NoSuchMethodException ex) {"
"AnnotationUtils.java:1059"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:1060"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1061"$1$0$0$4$40$"		catch (InvocationTargetException ex) {"
"AnnotationUtils.java:1062"$2$0$0$1$68$"			rethrowAnnotationConfigurationException(ex.getTargetException());"
"AnnotationUtils.java:1063"$0$0$0$11$88$"			throw new IllegalStateException(""Could not obtain value for annotation attribute '"" +"
"AnnotationUtils.java:1064"$0$0$0$8$47$"					attributeName + ""' in "" + annotation, ex);"
"AnnotationUtils.java:1065"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1066"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationUtils.java:1067"$1$0$0$2$57$"			handleIntrospectionFailure(annotation.getClass(), ex);"
"AnnotationUtils.java:1068"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:1069"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1070"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1071"$0$0$0$0$0$""
"AnnotationUtils.java:1072"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1073"$0$0$0$9$77$"	 * If the supplied throwable is an {@link AnnotationConfigurationException},"
"AnnotationUtils.java:1074"$0$0$0$11$78$"	 * it will be cast to an {@code AnnotationConfigurationException} and thrown,"
"AnnotationUtils.java:1075"$0$0$0$8$43$"	 * allowing it to propagate to the caller."
"AnnotationUtils.java:1076"$0$0$0$6$43$"	 * <p>Otherwise, this method does nothing."
"AnnotationUtils.java:1077"$0$0$0$7$38$"	 * @param ex the throwable to inspect"
"AnnotationUtils.java:1078"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1079"$0$0$0$5$68$"	static void rethrowAnnotationConfigurationException(Throwable ex) {"
"AnnotationUtils.java:1080"$0$0$0$5$55$"		if (ex instanceof AnnotationConfigurationException) {"
"AnnotationUtils.java:1081"$0$0$0$3$47$"			throw (AnnotationConfigurationException) ex;"
"AnnotationUtils.java:1082"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1083"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1084"$0$0$0$0$0$""
"AnnotationUtils.java:1085"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1086"$0$0$0$7$59$"	 * Handle the supplied annotation introspection exception."
"AnnotationUtils.java:1087"$0$0$0$9$80$"	 * <p>If the supplied exception is an {@link AnnotationConfigurationException},"
"AnnotationUtils.java:1088"$0$0$0$14$73$"	 * it will simply be thrown, allowing it to propagate to the caller, and"
"AnnotationUtils.java:1089"$0$0$0$5$27$"	 * nothing will be logged."
"AnnotationUtils.java:1090"$0$0$0$11$78$"	 * <p>Otherwise, this method logs an introspection failure (in particular for"
"AnnotationUtils.java:1091"$0$0$0$9$72$"	 * a {@link TypeNotPresentException}) before moving on, assuming nested"
"AnnotationUtils.java:1092"$0$0$0$11$77$"	 * {@code Class} values were not resolvable within annotation attributes and"
"AnnotationUtils.java:1093"$0$0$0$11$77$"	 * thereby effectively pretending there were no annotations on the specified"
"AnnotationUtils.java:1094"$0$0$0$2$12$"	 * element."
"AnnotationUtils.java:1095"$0$0$0$12$73$"	 * @param element the element that we tried to introspect annotations on"
"AnnotationUtils.java:1096"$0$0$0$8$47$"	 * @param ex the exception that we encountered"
"AnnotationUtils.java:1097"$0$0$0$3$49$"	 * @see #rethrowAnnotationConfigurationException"
"AnnotationUtils.java:1098"$0$0$0$3$35$"	 * @see IntrospectionFailureLogger"
"AnnotationUtils.java:1099"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1100"$0$0$0$8$91$"	static void handleIntrospectionFailure(@Nullable AnnotatedElement element, Throwable ex) {"
"AnnotationUtils.java:1101"$0$0$0$1$46$"		rethrowAnnotationConfigurationException(ex);"
"AnnotationUtils.java:1102"$0$0$0$4$70$"		IntrospectionFailureLogger logger = IntrospectionFailureLogger.INFO;"
"AnnotationUtils.java:1103"$0$0$0$4$23$"		boolean meta = false;"
"AnnotationUtils.java:1104"$0$0$0$8$90$"		if (element instanceof Class && Annotation.class.isAssignableFrom((Class<?>) element)) {"
"AnnotationUtils.java:1105"$0$0$1$10$69$"			// Meta-annotation or (default) value lookup on an annotation type"
"AnnotationUtils.java:1106"$0$0$0$3$45$"			logger = IntrospectionFailureLogger.DEBUG;"
"AnnotationUtils.java:1107"$0$0$0$3$15$"			meta = true;"
"AnnotationUtils.java:1108"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1109"$0$0$0$3$27$"		if (logger.isEnabled()) {"
"AnnotationUtils.java:1110"$0$0$0$5$26$"			String message = meta ?"
"AnnotationUtils.java:1111"$0$0$0$6$46$"					""Failed to meta-introspect annotation "" :"
"AnnotationUtils.java:1112"$0$0$0$6$44$"					""Failed to introspect annotations on "";"
"AnnotationUtils.java:1113"$0$0$0$8$45$"			logger.log(message + element + "": "" + ex);"
"AnnotationUtils.java:1114"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1115"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1116"$0$0$0$0$0$""
"AnnotationUtils.java:1117"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1118"$0$0$0$10$70$"	 * Retrieve the <em>default value</em> of the {@code value} attribute"
"AnnotationUtils.java:1119"$0$0$0$9$65$"	 * of a single-element Annotation, given an annotation instance."
"AnnotationUtils.java:1120"$0$0$0$13$86$"	 * @param annotation the annotation instance from which to retrieve the default value"
"AnnotationUtils.java:1121"$0$0$0$11$59$"	 * @return the default value, or {@code null} if not found"
"AnnotationUtils.java:1122"$1$0$0$4$45$"	 * @see #getDefaultValue(Annotation, String)"
"AnnotationUtils.java:1123"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1124"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:1125"$1$0$0$6$62$"	public static Object getDefaultValue(Annotation annotation) {"
"AnnotationUtils.java:1126"$1$0$0$3$44$"		return getDefaultValue(annotation, VALUE);"
"AnnotationUtils.java:1127"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1128"$0$0$0$0$0$""
"AnnotationUtils.java:1129"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1130"$0$0$0$13$91$"	 * Retrieve the <em>default value</em> of a named attribute, given an annotation instance."
"AnnotationUtils.java:1131"$0$0$0$13$86$"	 * @param annotation the annotation instance from which to retrieve the default value"
"AnnotationUtils.java:1132"$0$0$0$11$68$"	 * @param attributeName the name of the attribute value to retrieve"
"AnnotationUtils.java:1133"$0$0$0$15$82$"	 * @return the default value of the named attribute, or {@code null} if not found"
"AnnotationUtils.java:1134"$1$0$0$4$40$"	 * @see #getDefaultValue(Class, String)"
"AnnotationUtils.java:1135"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1136"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:1137"$1$0$0$10$104$"	public static Object getDefaultValue(@Nullable Annotation annotation, @Nullable String attributeName) {"
"AnnotationUtils.java:1138"$1$0$0$9$99$"		return (annotation != null ? getDefaultValue(annotation.annotationType(), attributeName) : null);"
"AnnotationUtils.java:1139"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1140"$0$0$0$0$0$""
"AnnotationUtils.java:1141"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1142"$0$0$0$10$70$"	 * Retrieve the <em>default value</em> of the {@code value} attribute"
"AnnotationUtils.java:1143"$0$0$0$11$76$"	 * of a single-element Annotation, given the {@link Class annotation type}."
"AnnotationUtils.java:1144"$0$0$0$14$102$"	 * @param annotationType the <em>annotation type</em> for which the default value should be retrieved"
"AnnotationUtils.java:1145"$0$0$0$11$59$"	 * @return the default value, or {@code null} if not found"
"AnnotationUtils.java:1146"$1$0$0$4$40$"	 * @see #getDefaultValue(Class, String)"
"AnnotationUtils.java:1147"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1148"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:1149"$1$0$0$8$83$"	public static Object getDefaultValue(Class<? extends Annotation> annotationType) {"
"AnnotationUtils.java:1150"$1$0$0$3$48$"		return getDefaultValue(annotationType, VALUE);"
"AnnotationUtils.java:1151"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1152"$0$0$0$0$0$""
"AnnotationUtils.java:1153"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1154"$0$0$0$11$71$"	 * Retrieve the <em>default value</em> of a named attribute, given the"
"AnnotationUtils.java:1155"$0$0$0$5$34$"	 * {@link Class annotation type}."
"AnnotationUtils.java:1156"$0$0$0$14$102$"	 * @param annotationType the <em>annotation type</em> for which the default value should be retrieved"
"AnnotationUtils.java:1157"$0$0$0$11$69$"	 * @param attributeName the name of the attribute value to retrieve."
"AnnotationUtils.java:1158"$0$0$0$15$82$"	 * @return the default value of the named attribute, or {@code null} if not found"
"AnnotationUtils.java:1159"$1$0$0$4$45$"	 * @see #getDefaultValue(Annotation, String)"
"AnnotationUtils.java:1160"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1161"$0$0$0$1$10$"	@Nullable"
"AnnotationUtils.java:1162"$1$0$0$4$38$"	public static Object getDefaultValue("
"AnnotationUtils.java:1163"$0$0$0$9$90$"			@Nullable Class<? extends Annotation> annotationType, @Nullable String attributeName) {"
"AnnotationUtils.java:1164"$0$0$0$0$0$""
"AnnotationUtils.java:1165"$0$0$0$7$70$"		if (annotationType == null || !StringUtils.hasText(attributeName)) {"
"AnnotationUtils.java:1166"$0$0$0$2$15$"			return null;"
"AnnotationUtils.java:1167"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1168"$1$0$0$2$89$"		return MergedAnnotation.of(annotationType).getDefaultValue(attributeName).orElse(null);"
"AnnotationUtils.java:1169"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1170"$0$0$0$0$0$""
"AnnotationUtils.java:1171"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1172"$0$0$0$9$74$"	 * <em>Synthesize</em> an annotation from the supplied {@code annotation}"
"AnnotationUtils.java:1173"$0$0$0$11$65$"	 * by wrapping it in a dynamic proxy that transparently enforces"
"AnnotationUtils.java:1174"$0$0$0$9$73$"	 * <em>attribute alias</em> semantics for annotation attributes that are"
"AnnotationUtils.java:1175"$0$0$0$6$46$"	 * annotated with {@link AliasFor @AliasFor}."
"AnnotationUtils.java:1176"$0$0$0$7$50$"	 * @param annotation the annotation to synthesize"
"AnnotationUtils.java:1177"$0$0$0$11$75$"	 * @param annotatedElement the element that is annotated with the supplied"
"AnnotationUtils.java:1178"$0$0$0$8$46$"	 * annotation; may be {@code null} if unknown"
"AnnotationUtils.java:1179"$0$0$0$10$68$"	 * @return the synthesized annotation if the supplied annotation is"
"AnnotationUtils.java:1180"$0$0$0$9$70$"	 * <em>synthesizable</em>; {@code null} if the supplied annotation is"
"AnnotationUtils.java:1181"$0$0$0$8$62$"	 * {@code null}; otherwise the supplied annotation unmodified"
"AnnotationUtils.java:1182"$0$0$0$7$72$"	 * @throws AnnotationConfigurationException if invalid configuration of"
"AnnotationUtils.java:1183"$0$0$0$5$33$"	 * {@code @AliasFor} is detected"
"AnnotationUtils.java:1184"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:1185"$0$0$0$5$60$"	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement)"
"AnnotationUtils.java:1186"$0$0$0$3$37$"	 * @see #synthesizeAnnotation(Class)"
"AnnotationUtils.java:1187"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1188"$0$0$0$7$61$"	public static <A extends Annotation> A synthesizeAnnotation("
"AnnotationUtils.java:1189"$0$0$0$6$63$"			A annotation, @Nullable AnnotatedElement annotatedElement) {"
"AnnotationUtils.java:1190"$0$0$0$0$0$""
"AnnotationUtils.java:1191"$0$0$0$7$98$"		if (annotation instanceof SynthesizedAnnotation || AnnotationFilter.PLAIN.matches(annotation)) {"
"AnnotationUtils.java:1192"$0$0$0$2$21$"			return annotation;"
"AnnotationUtils.java:1193"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1194"$0$0$0$3$74$"		return MergedAnnotation.from(annotatedElement, annotation).synthesize();"
"AnnotationUtils.java:1195"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1196"$0$0$0$0$0$""
"AnnotationUtils.java:1197"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1198"$0$0$0$9$73$"	 * <em>Synthesize</em> an annotation from its default attributes values."
"AnnotationUtils.java:1199"$0$0$0$6$38$"	 * <p>This method simply delegates to"
"AnnotationUtils.java:1200"$0$0$0$5$64$"	 * {@link #synthesizeAnnotation(Map, Class, AnnotatedElement)},"
"AnnotationUtils.java:1201"$0$0$0$13$75$"	 * supplying an empty map for the source attribute values and {@code null}"
"AnnotationUtils.java:1202"$0$0$0$5$37$"	 * for the {@link AnnotatedElement}."
"AnnotationUtils.java:1203"$0$0$0$9$62$"	 * @param annotationType the type of annotation to synthesize"
"AnnotationUtils.java:1204"$0$0$0$5$38$"	 * @return the synthesized annotation"
"AnnotationUtils.java:1205"$0$0$0$9$71$"	 * @throws IllegalArgumentException if a required attribute is missing"
"AnnotationUtils.java:1206"$0$0$0$7$72$"	 * @throws AnnotationConfigurationException if invalid configuration of"
"AnnotationUtils.java:1207"$0$0$0$5$33$"	 * {@code @AliasFor} is detected"
"AnnotationUtils.java:1208"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:1209"$0$0$0$5$60$"	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement)"
"AnnotationUtils.java:1210"$0$0$0$4$60$"	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement)"
"AnnotationUtils.java:1211"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1212"$0$0$0$9$87$"	public static <A extends Annotation> A synthesizeAnnotation(Class<A> annotationType) {"
"AnnotationUtils.java:1213"$0$0$0$4$76$"		return synthesizeAnnotation(Collections.emptyMap(), annotationType, null);"
"AnnotationUtils.java:1214"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1215"$0$0$0$0$0$""
"AnnotationUtils.java:1216"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1217"$0$0$0$10$73$"	 * <em>Synthesize</em> an annotation from the supplied map of annotation"
"AnnotationUtils.java:1218"$0$0$0$13$72$"	 * attributes by wrapping the map in a dynamic proxy that implements an"
"AnnotationUtils.java:1219"$0$0$0$9$72$"	 * annotation of the specified {@code annotationType} and transparently"
"AnnotationUtils.java:1220"$0$0$0$8$73$"	 * enforces <em>attribute alias</em> semantics for annotation attributes"
"AnnotationUtils.java:1221"$0$0$0$8$55$"	 * that are annotated with {@link AliasFor @AliasFor}."
"AnnotationUtils.java:1222"$0$0$0$12$73$"	 * <p>The supplied map must contain a key-value pair for every attribute"
"AnnotationUtils.java:1223"$0$0$0$12$73$"	 * defined in the supplied {@code annotationType} that is not aliased or"
"AnnotationUtils.java:1224"$0$0$0$14$72$"	 * does not have a default value. Nested maps and nested arrays of maps"
"AnnotationUtils.java:1225"$0$0$0$10$69$"	 * will be recursively synthesized into nested annotations or nested"
"AnnotationUtils.java:1226"$0$0$0$5$40$"	 * arrays of annotations, respectively."
"AnnotationUtils.java:1227"$0$0$0$10$70$"	 * <p>Note that {@link AnnotationAttributes} is a specialized type of"
"AnnotationUtils.java:1228"$0$0$0$11$60$"	 * {@link Map} that is an ideal candidate for this method's"
"AnnotationUtils.java:1229"$0$0$0$4$32$"	 * {@code attributes} argument."
"AnnotationUtils.java:1230"$0$0$0$10$68$"	 * @param attributes the map of annotation attributes to synthesize"
"AnnotationUtils.java:1231"$0$0$0$9$62$"	 * @param annotationType the type of annotation to synthesize"
"AnnotationUtils.java:1232"$0$0$0$11$77$"	 * @param annotatedElement the element that is annotated with the annotation"
"AnnotationUtils.java:1233"$0$0$0$12$76$"	 * corresponding to the supplied attributes; may be {@code null} if unknown"
"AnnotationUtils.java:1234"$0$0$0$5$38$"	 * @return the synthesized annotation"
"AnnotationUtils.java:1235"$0$0$0$12$80$"	 * @throws IllegalArgumentException if a required attribute is missing or if an"
"AnnotationUtils.java:1236"$0$0$0$8$40$"	 * attribute is not of the correct type"
"AnnotationUtils.java:1237"$0$0$0$7$72$"	 * @throws AnnotationConfigurationException if invalid configuration of"
"AnnotationUtils.java:1238"$0$0$0$5$33$"	 * {@code @AliasFor} is detected"
"AnnotationUtils.java:1239"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:1240"$0$0$0$4$60$"	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement)"
"AnnotationUtils.java:1241"$0$0$0$3$37$"	 * @see #synthesizeAnnotation(Class)"
"AnnotationUtils.java:1242"$1$0$0$4$63$"	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation)"
"AnnotationUtils.java:1243"$1$0$0$6$81$"	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)"
"AnnotationUtils.java:1244"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1245"$0$0$0$9$92$"	public static <A extends Annotation> A synthesizeAnnotation(Map<String, Object> attributes,"
"AnnotationUtils.java:1246"$0$0$0$6$74$"			Class<A> annotationType, @Nullable AnnotatedElement annotatedElement) {"
"AnnotationUtils.java:1247"$0$0$0$0$0$""
"AnnotationUtils.java:1248"$0$0$0$2$7$"		try {"
"AnnotationUtils.java:1249"$0$0$0$4$89$"			return MergedAnnotation.of(annotatedElement, annotationType, attributes).synthesize();"
"AnnotationUtils.java:1250"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1251"$0$0$0$6$61$"		catch (NoSuchElementException | IllegalStateException ex) {"
"AnnotationUtils.java:1252"$0$0$0$3$42$"			throw new IllegalArgumentException(ex);"
"AnnotationUtils.java:1253"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1254"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1255"$0$0$0$0$0$""
"AnnotationUtils.java:1256"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1257"$0$0$0$10$71$"	 * <em>Synthesize</em> an array of annotations from the supplied array"
"AnnotationUtils.java:1258"$0$0$0$14$71$"	 * of {@code annotations} by creating a new array of the same size and"
"AnnotationUtils.java:1259"$0$0$0$8$77$"	 * type and populating it with {@linkplain #synthesizeAnnotation(Annotation,"
"AnnotationUtils.java:1260"$0$0$0$10$77$"	 * AnnotatedElement) synthesized} versions of the annotations from the input"
"AnnotationUtils.java:1261"$0$0$0$2$10$"	 * array."
"AnnotationUtils.java:1262"$0$0$0$9$61$"	 * @param annotations the array of annotations to synthesize"
"AnnotationUtils.java:1263"$0$0$0$11$75$"	 * @param annotatedElement the element that is annotated with the supplied"
"AnnotationUtils.java:1264"$0$0$0$10$56$"	 * array of annotations; may be {@code null} if unknown"
"AnnotationUtils.java:1265"$0$0$0$12$70$"	 * @return a new array of synthesized annotations, or {@code null} if"
"AnnotationUtils.java:1266"$0$0$0$7$38$"	 * the supplied array is {@code null}"
"AnnotationUtils.java:1267"$0$0$0$7$72$"	 * @throws AnnotationConfigurationException if invalid configuration of"
"AnnotationUtils.java:1268"$0$0$0$5$33$"	 * {@code @AliasFor} is detected"
"AnnotationUtils.java:1269"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationUtils.java:1270"$0$0$0$4$60$"	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement)"
"AnnotationUtils.java:1271"$0$0$0$5$60$"	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement)"
"AnnotationUtils.java:1272"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1273"$0$0$0$7$109$"	static Annotation[] synthesizeAnnotationArray(Annotation[] annotations, AnnotatedElement annotatedElement) {"
"AnnotationUtils.java:1274"$0$0$0$3$73$"		if (AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {"
"AnnotationUtils.java:1275"$0$0$0$2$22$"			return annotations;"
"AnnotationUtils.java:1276"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1277"$0$0$0$5$62$"		Annotation[] synthesized = (Annotation[]) Array.newInstance("
"AnnotationUtils.java:1278"$2$0$0$2$67$"				annotations.getClass().getComponentType(), annotations.length);"
"AnnotationUtils.java:1279"$0$0$0$10$48$"		for (int i = 0; i < annotations.length; i++) {"
"AnnotationUtils.java:1280"$0$0$0$4$75$"			synthesized[i] = synthesizeAnnotation(annotations[i], annotatedElement);"
"AnnotationUtils.java:1281"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1282"$0$0$0$2$21$"		return synthesized;"
"AnnotationUtils.java:1283"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1284"$0$0$0$0$0$""
"AnnotationUtils.java:1285"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1286"$0$0$0$7$49$"	 * Clear the internal annotation metadata cache."
"AnnotationUtils.java:1287"$0$0$0$3$17$"	 * @since 4.3.15"
"AnnotationUtils.java:1288"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1289"$0$0$0$5$34$"	public static void clearCache() {"
"AnnotationUtils.java:1290"$0$0$0$1$38$"		AnnotationTypeMappings.clearCache();"
"AnnotationUtils.java:1291"$0$0$0$1$34$"		AnnotationsScanner.clearCache();"
"AnnotationUtils.java:1292"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1293"$0$0$0$0$0$""
"AnnotationUtils.java:1294"$0$0$0$0$0$""
"AnnotationUtils.java:1295"$0$0$0$1$4$"	/**"
"AnnotationUtils.java:1296"$0$0$0$8$48$"	 * Internal holder used to wrap default values."
"AnnotationUtils.java:1297"$0$0$0$1$4$"	 */"
"AnnotationUtils.java:1298"$0$0$0$5$42$"	private static class DefaultValueHolder {"
"AnnotationUtils.java:1299"$0$0$0$0$0$""
"AnnotationUtils.java:1300"$0$0$0$3$28$"		final Object defaultValue;"
"AnnotationUtils.java:1301"$0$0$0$0$0$""
"AnnotationUtils.java:1302"$0$0$0$4$50$"		public DefaultValueHolder(Object defaultValue) {"
"AnnotationUtils.java:1303"$0$0$0$3$36$"			this.defaultValue = defaultValue;"
"AnnotationUtils.java:1304"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1305"$0$0$0$0$0$""
"AnnotationUtils.java:1306"$0$0$0$1$11$"		@Override"
"AnnotationUtils.java:1307"$0$0$0$4$28$"		public String toString() {"
"AnnotationUtils.java:1308"$0$0$0$4$34$"			return ""*"" + this.defaultValue;"
"AnnotationUtils.java:1309"$0$0$0$1$3$"		}"
"AnnotationUtils.java:1310"$0$0$0$1$2$"	}"
"AnnotationUtils.java:1311"$0$0$0$0$0$""
"AnnotationUtils.java:1312"$0$0$0$1$1$"}"
"CompositeIterator.java:1"$0$0$0$1$2$"/*"
"CompositeIterator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"CompositeIterator.java:3"$0$0$0$1$2$" *"
"CompositeIterator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"CompositeIterator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"CompositeIterator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"CompositeIterator.java:7"$0$0$0$1$2$" *"
"CompositeIterator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"CompositeIterator.java:9"$0$0$0$1$2$" *"
"CompositeIterator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"CompositeIterator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"CompositeIterator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"CompositeIterator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"CompositeIterator.java:14"$0$0$0$5$33$" * limitations under the License."
"CompositeIterator.java:15"$0$0$0$1$3$" */"
"CompositeIterator.java:16"$0$0$0$0$0$""
"CompositeIterator.java:17"$0$0$0$2$33$"package org.springframework.util;"
"CompositeIterator.java:18"$0$0$0$0$0$""
"CompositeIterator.java:19"$0$0$0$2$26$"import java.util.Iterator;"
"CompositeIterator.java:20"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"CompositeIterator.java:21"$0$0$0$2$40$"import java.util.NoSuchElementException;"
"CompositeIterator.java:22"$0$0$0$2$21$"import java.util.Set;"
"CompositeIterator.java:23"$0$0$0$0$0$""
"CompositeIterator.java:24"$0$0$0$1$3$"/**"
"CompositeIterator.java:25"$0$0$0$8$61$" * Composite iterator that combines multiple other iterators,"
"CompositeIterator.java:26"$0$0$0$6$44$" * as registered via {@link #add(Iterator)}."
"CompositeIterator.java:27"$0$0$0$1$2$" *"
"CompositeIterator.java:28"$0$0$0$9$61$" * <p>This implementation maintains a linked set of iterators"
"CompositeIterator.java:29"$0$0$0$11$67$" * which are invoked in sequence until all iterators are exhausted."
"CompositeIterator.java:30"$0$0$0$1$2$" *"
"CompositeIterator.java:31"$0$0$0$4$24$" * @author Erwin Vervaet"
"CompositeIterator.java:32"$0$0$0$4$26$" * @author Juergen Hoeller"
"CompositeIterator.java:33"$0$0$0$3$13$" * @since 3.0"
"CompositeIterator.java:34"$0$0$0$6$30$" * @param <E> the element type"
"CompositeIterator.java:35"$0$0$0$1$3$" */"
"CompositeIterator.java:36"$0$0$0$6$58$"public class CompositeIterator<E> implements Iterator<E> {"
"CompositeIterator.java:37"$0$0$0$0$0$""
"CompositeIterator.java:38"$0$0$0$7$66$"	private final Set<Iterator<E>> iterators = new LinkedHashSet<>();"
"CompositeIterator.java:39"$0$0$0$0$0$""
"CompositeIterator.java:40"$0$0$0$5$31$"	private boolean inUse = false;"
"CompositeIterator.java:41"$0$0$0$0$0$""
"CompositeIterator.java:42"$0$0$0$0$0$""
"CompositeIterator.java:43"$0$0$0$1$4$"	/**"
"CompositeIterator.java:44"$0$0$0$7$41$"	 * Add given iterator to this composite."
"CompositeIterator.java:45"$0$0$0$1$4$"	 */"
"CompositeIterator.java:46"$0$0$0$5$40$"	public void add(Iterator<E> iterator) {"
"CompositeIterator.java:47"$0$0$0$15$109$"		Assert.state(!this.inUse, ""You can no longer add iterators to a composite iterator that's already in use"");"
"CompositeIterator.java:48"$0$0$0$3$42$"		if (this.iterators.contains(iterator)) {"
"CompositeIterator.java:49"$0$0$0$9$80$"			throw new IllegalArgumentException(""You cannot add the same iterator twice"");"
"CompositeIterator.java:50"$0$0$0$1$3$"		}"
"CompositeIterator.java:51"$0$0$0$1$31$"		this.iterators.add(iterator);"
"CompositeIterator.java:52"$0$0$0$1$2$"	}"
"CompositeIterator.java:53"$0$0$0$0$0$""
"CompositeIterator.java:54"$0$0$0$1$10$"	@Override"
"CompositeIterator.java:55"$0$0$0$4$27$"	public boolean hasNext() {"
"CompositeIterator.java:56"$0$0$0$3$20$"		this.inUse = true;"
"CompositeIterator.java:57"$0$0$0$6$47$"		for (Iterator<E> iterator : this.iterators) {"
"CompositeIterator.java:58"$0$0$0$3$28$"			if (iterator.hasNext()) {"
"CompositeIterator.java:59"$0$0$0$2$16$"				return true;"
"CompositeIterator.java:60"$0$0$0$1$4$"			}"
"CompositeIterator.java:61"$0$0$0$1$3$"		}"
"CompositeIterator.java:62"$0$0$0$2$15$"		return false;"
"CompositeIterator.java:63"$0$0$0$1$2$"	}"
"CompositeIterator.java:64"$0$0$0$0$0$""
"CompositeIterator.java:65"$0$0$0$1$10$"	@Override"
"CompositeIterator.java:66"$0$0$0$4$18$"	public E next() {"
"CompositeIterator.java:67"$0$0$0$3$20$"		this.inUse = true;"
"CompositeIterator.java:68"$0$0$0$6$47$"		for (Iterator<E> iterator : this.iterators) {"
"CompositeIterator.java:69"$0$0$0$3$28$"			if (iterator.hasNext()) {"
"CompositeIterator.java:70"$0$0$0$2$27$"				return iterator.next();"
"CompositeIterator.java:71"$0$0$0$1$4$"			}"
"CompositeIterator.java:72"$0$0$0$1$3$"		}"
"CompositeIterator.java:73"$0$0$0$5$62$"		throw new NoSuchElementException(""All iterators exhausted"");"
"CompositeIterator.java:74"$0$0$0$1$2$"	}"
"CompositeIterator.java:75"$0$0$0$0$0$""
"CompositeIterator.java:76"$0$0$0$1$10$"	@Override"
"CompositeIterator.java:77"$0$0$0$4$23$"	public void remove() {"
"CompositeIterator.java:78"$0$0$0$7$89$"		throw new UnsupportedOperationException(""CompositeIterator does not support remove()"");"
"CompositeIterator.java:79"$0$0$0$1$2$"	}"
"CompositeIterator.java:80"$0$0$0$0$0$""
"CompositeIterator.java:81"$0$0$0$1$1$"}"
"Assert.java:1"$0$0$0$1$2$"/*"
"Assert.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"Assert.java:3"$0$0$0$1$2$" *"
"Assert.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"Assert.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"Assert.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"Assert.java:7"$0$0$0$1$2$" *"
"Assert.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"Assert.java:9"$0$0$0$1$2$" *"
"Assert.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"Assert.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"Assert.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"Assert.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"Assert.java:14"$0$0$0$5$33$" * limitations under the License."
"Assert.java:15"$0$0$0$1$3$" */"
"Assert.java:16"$0$0$0$0$0$""
"Assert.java:17"$0$0$0$2$33$"package org.springframework.util;"
"Assert.java:18"$0$0$0$0$0$""
"Assert.java:19"$0$0$0$2$28$"import java.util.Collection;"
"Assert.java:20"$0$0$0$2$21$"import java.util.Map;"
"Assert.java:21"$0$0$0$2$35$"import java.util.function.Supplier;"
"Assert.java:22"$0$0$0$0$0$""
"Assert.java:23"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"Assert.java:24"$0$0$0$0$0$""
"Assert.java:25"$0$0$0$1$3$"/**"
"Assert.java:26"$0$0$0$9$64$" * Assertion utility class that assists in validating arguments."
"Assert.java:27"$0$0$0$1$2$" *"
"Assert.java:28"$0$0$0$11$76$" * <p>Useful for identifying programmer errors early and clearly at runtime."
"Assert.java:29"$0$0$0$1$2$" *"
"Assert.java:30"$0$0$0$14$72$" * <p>For example, if the contract of a public method states it does not"
"Assert.java:31"$0$0$0$13$76$" * allow {@code null} arguments, {@code Assert} can be used to validate that"
"Assert.java:32"$0$0$0$11$70$" * contract. Doing this clearly indicates a contract violation when it"
"Assert.java:33"$0$0$0$7$46$" * occurs and protects the class's invariants."
"Assert.java:34"$0$0$0$1$2$" *"
"Assert.java:35"$0$0$0$10$75$" * <p>Typically used to validate method arguments rather than configuration"
"Assert.java:36"$0$0$0$12$75$" * properties, to check for cases that are usually programmer errors rather"
"Assert.java:37"$0$0$0$9$73$" * than configuration errors. In contrast to configuration initialization"
"Assert.java:38"$0$0$0$15$79$" * code, there is usually no point in falling back to defaults in such methods."
"Assert.java:39"$0$0$0$1$2$" *"
"Assert.java:40"$0$0$0$14$81$" * <p>This class is similar to JUnit's assertion library. If an argument value is"
"Assert.java:41"$0$0$0$9$77$" * deemed invalid, an {@link IllegalArgumentException} is thrown (typically)."
"Assert.java:42"$0$0$0$3$15$" * For example:"
"Assert.java:43"$0$0$0$1$2$" *"
"Assert.java:44"$0$0$0$3$21$" * <pre class=""code"">"
"Assert.java:45"$0$0$0$8$55$" * Assert.notNull(clazz, ""The class must not be null"");"
"Assert.java:46"$0$0$0$11$69$" * Assert.isTrue(i > 0, ""The value must be greater than zero"");</pre>"
"Assert.java:47"$0$0$0$1$2$" *"
"Assert.java:48"$0$0$0$9$60$" * <p>Mainly for internal use within the framework; consider"
"Assert.java:49"$0$0$0$5$86$" * <a href=""https://commons.apache.org/proper/commons-lang/"">Apache's Commons Lang</a>"
"Assert.java:50"$0$0$0$10$62$" * for a more comprehensive suite of {@code String} utilities."
"Assert.java:51"$0$0$0$1$2$" *"
"Assert.java:52"$0$0$0$4$23$" * @author Keith Donald"
"Assert.java:53"$0$0$0$4$26$" * @author Juergen Hoeller"
"Assert.java:54"$0$0$0$4$22$" * @author Sam Brannen"
"Assert.java:55"$0$0$0$4$27$" * @author Colin Sampaleanu"
"Assert.java:56"$0$0$0$4$21$" * @author Rob Harrop"
"Assert.java:57"$0$0$0$3$15$" * @since 1.1.2"
"Assert.java:58"$0$0$0$1$3$" */"
"Assert.java:59"$0$0$0$5$30$"public abstract class Assert {"
"Assert.java:60"$0$0$0$0$0$""
"Assert.java:61"$0$0$0$1$4$"	/**"
"Assert.java:62"$0$0$0$9$74$"	 * Assert a boolean expression, throwing an {@code IllegalStateException}"
"Assert.java:63"$0$0$0$8$49$"	 * if the expression evaluates to {@code false}."
"Assert.java:64"$0$0$0$12$84$"	 * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}"
"Assert.java:65"$0$0$0$5$28$"	 * on an assertion failure."
"Assert.java:66"$0$0$0$13$104$"	 * <pre class=""code"">Assert.state(id == null, ""The id property must not already be initialized"");</pre>"
"Assert.java:67"$0$0$0$6$42$"	 * @param expression a boolean expression"
"Assert.java:68"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:69"$0$0$0$9$72$"	 * @throws IllegalStateException if {@code expression} is {@code false}"
"Assert.java:70"$0$0$0$1$4$"	 */"
"Assert.java:71"$0$0$0$8$63$"	public static void state(boolean expression, String message) {"
"Assert.java:72"$0$0$0$3$20$"		if (!expression) {"
"Assert.java:73"$0$0$0$3$44$"			throw new IllegalStateException(message);"
"Assert.java:74"$0$0$0$1$3$"		}"
"Assert.java:75"$0$0$0$1$2$"	}"
"Assert.java:76"$0$0$0$0$0$""
"Assert.java:77"$0$0$0$1$4$"	/**"
"Assert.java:78"$0$0$0$9$74$"	 * Assert a boolean expression, throwing an {@code IllegalStateException}"
"Assert.java:79"$0$0$0$8$49$"	 * if the expression evaluates to {@code false}."
"Assert.java:80"$0$0$0$12$84$"	 * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}"
"Assert.java:81"$0$0$0$5$28$"	 * on an assertion failure."
"Assert.java:82"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:83"$0$0$0$4$28$"	 * Assert.state(id == null,"
"Assert.java:84"$1$0$0$15$84$"	 *     () -&gt; ""ID for "" + entity.getName() + "" must not already be initialized"");"
"Assert.java:85"$0$0$0$2$10$"	 * </pre>"
"Assert.java:86"$0$0$0$6$42$"	 * @param expression a boolean expression"
"Assert.java:87"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:88"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:89"$0$0$0$9$72$"	 * @throws IllegalStateException if {@code expression} is {@code false}"
"Assert.java:90"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:91"$0$0$0$1$4$"	 */"
"Assert.java:92"$0$0$0$8$81$"	public static void state(boolean expression, Supplier<String> messageSupplier) {"
"Assert.java:93"$0$0$0$3$20$"		if (!expression) {"
"Assert.java:94"$0$0$0$3$65$"			throw new IllegalStateException(nullSafeGet(messageSupplier));"
"Assert.java:95"$0$0$0$1$3$"		}"
"Assert.java:96"$0$0$0$1$2$"	}"
"Assert.java:97"$0$0$0$0$0$""
"Assert.java:98"$0$0$0$1$4$"	/**"
"Assert.java:99"$0$0$0$9$74$"	 * Assert a boolean expression, throwing an {@code IllegalStateException}"
"Assert.java:100"$0$0$0$8$49$"	 * if the expression evaluates to {@code false}."
"Assert.java:101"$0$0$0$11$72$"	 * @deprecated as of 4.3.7, in favor of {@link #state(boolean, String)}"
"Assert.java:102"$0$0$0$1$4$"	 */"
"Assert.java:103"$0$0$0$1$12$"	@Deprecated"
"Assert.java:104"$0$0$0$6$47$"	public static void state(boolean expression) {"
"Assert.java:105"$0$0$0$10$78$"		state(expression, ""[Assertion failed] - this state invariant must be true"");"
"Assert.java:106"$0$0$0$1$2$"	}"
"Assert.java:107"$0$0$0$0$0$""
"Assert.java:108"$0$0$0$1$4$"	/**"
"Assert.java:109"$0$0$0$9$77$"	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}"
"Assert.java:110"$0$0$0$8$49$"	 * if the expression evaluates to {@code false}."
"Assert.java:111"$0$0$0$12$91$"	 * <pre class=""code"">Assert.isTrue(i &gt; 0, ""The value must be greater than zero"");</pre>"
"Assert.java:112"$0$0$0$6$42$"	 * @param expression a boolean expression"
"Assert.java:113"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:114"$0$0$0$9$75$"	 * @throws IllegalArgumentException if {@code expression} is {@code false}"
"Assert.java:115"$0$0$0$1$4$"	 */"
"Assert.java:116"$0$0$0$8$64$"	public static void isTrue(boolean expression, String message) {"
"Assert.java:117"$0$0$0$3$20$"		if (!expression) {"
"Assert.java:118"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:119"$0$0$0$1$3$"		}"
"Assert.java:120"$0$0$0$1$2$"	}"
"Assert.java:121"$0$0$0$0$0$""
"Assert.java:122"$0$0$0$1$4$"	/**"
"Assert.java:123"$0$0$0$9$77$"	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}"
"Assert.java:124"$0$0$0$8$49$"	 * if the expression evaluates to {@code false}."
"Assert.java:125"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:126"$0$0$0$18$88$"	 * Assert.isTrue(i &gt; 0, () -&gt; ""The value '"" + i + ""' must be greater than zero"");"
"Assert.java:127"$0$0$0$2$10$"	 * </pre>"
"Assert.java:128"$0$0$0$6$42$"	 * @param expression a boolean expression"
"Assert.java:129"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:130"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:131"$0$0$0$9$75$"	 * @throws IllegalArgumentException if {@code expression} is {@code false}"
"Assert.java:132"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:133"$0$0$0$1$4$"	 */"
"Assert.java:134"$0$0$0$8$82$"	public static void isTrue(boolean expression, Supplier<String> messageSupplier) {"
"Assert.java:135"$0$0$0$3$20$"		if (!expression) {"
"Assert.java:136"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:137"$0$0$0$1$3$"		}"
"Assert.java:138"$0$0$0$1$2$"	}"
"Assert.java:139"$0$0$0$0$0$""
"Assert.java:140"$0$0$0$1$4$"	/**"
"Assert.java:141"$0$0$0$9$77$"	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}"
"Assert.java:142"$0$0$0$8$49$"	 * if the expression evaluates to {@code false}."
"Assert.java:143"$0$0$0$11$73$"	 * @deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)}"
"Assert.java:144"$0$0$0$1$4$"	 */"
"Assert.java:145"$0$0$0$1$12$"	@Deprecated"
"Assert.java:146"$0$0$0$6$48$"	public static void isTrue(boolean expression) {"
"Assert.java:147"$0$0$0$9$74$"		isTrue(expression, ""[Assertion failed] - this expression must be true"");"
"Assert.java:148"$0$0$0$1$2$"	}"
"Assert.java:149"$0$0$0$0$0$""
"Assert.java:150"$0$0$0$1$4$"	/**"
"Assert.java:151"$0$0$0$8$42$"	 * Assert that an object is {@code null}."
"Assert.java:152"$0$0$0$8$75$"	 * <pre class=""code"">Assert.isNull(value, ""The value must be null"");</pre>"
"Assert.java:153"$0$0$0$7$37$"	 * @param object the object to check"
"Assert.java:154"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:155"$0$0$0$10$70$"	 * @throws IllegalArgumentException if the object is not {@code null}"
"Assert.java:156"$0$0$0$1$4$"	 */"
"Assert.java:157"$0$0$0$9$69$"	public static void isNull(@Nullable Object object, String message) {"
"Assert.java:158"$0$0$0$5$23$"		if (object != null) {"
"Assert.java:159"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:160"$0$0$0$1$3$"		}"
"Assert.java:161"$0$0$0$1$2$"	}"
"Assert.java:162"$0$0$0$0$0$""
"Assert.java:163"$0$0$0$1$4$"	/**"
"Assert.java:164"$0$0$0$8$42$"	 * Assert that an object is {@code null}."
"Assert.java:165"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:166"$0$0$0$14$76$"	 * Assert.isNull(value, () -&gt; ""The value '"" + value + ""' must be null"");"
"Assert.java:167"$0$0$0$2$10$"	 * </pre>"
"Assert.java:168"$0$0$0$7$37$"	 * @param object the object to check"
"Assert.java:169"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:170"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:171"$0$0$0$10$70$"	 * @throws IllegalArgumentException if the object is not {@code null}"
"Assert.java:172"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:173"$0$0$0$1$4$"	 */"
"Assert.java:174"$0$0$0$9$87$"	public static void isNull(@Nullable Object object, Supplier<String> messageSupplier) {"
"Assert.java:175"$0$0$0$5$23$"		if (object != null) {"
"Assert.java:176"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:177"$0$0$0$1$3$"		}"
"Assert.java:178"$0$0$0$1$2$"	}"
"Assert.java:179"$0$0$0$0$0$""
"Assert.java:180"$0$0$0$1$4$"	/**"
"Assert.java:181"$0$0$0$8$42$"	 * Assert that an object is {@code null}."
"Assert.java:182"$0$0$0$11$72$"	 * @deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)}"
"Assert.java:183"$0$0$0$1$4$"	 */"
"Assert.java:184"$0$0$0$1$12$"	@Deprecated"
"Assert.java:185"$0$0$0$7$53$"	public static void isNull(@Nullable Object object) {"
"Assert.java:186"$0$0$0$10$74$"		isNull(object, ""[Assertion failed] - the object argument must be null"");"
"Assert.java:187"$0$0$0$1$2$"	}"
"Assert.java:188"$0$0$0$0$0$""
"Assert.java:189"$0$0$0$1$4$"	/**"
"Assert.java:190"$0$0$0$9$46$"	 * Assert that an object is not {@code null}."
"Assert.java:191"$0$0$0$9$80$"	 * <pre class=""code"">Assert.notNull(clazz, ""The class must not be null"");</pre>"
"Assert.java:192"$0$0$0$7$37$"	 * @param object the object to check"
"Assert.java:193"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:194"$0$0$0$9$66$"	 * @throws IllegalArgumentException if the object is {@code null}"
"Assert.java:195"$0$0$0$1$4$"	 */"
"Assert.java:196"$0$0$0$9$70$"	public static void notNull(@Nullable Object object, String message) {"
"Assert.java:197"$0$0$0$5$23$"		if (object == null) {"
"Assert.java:198"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:199"$0$0$0$1$3$"		}"
"Assert.java:200"$0$0$0$1$2$"	}"
"Assert.java:201"$0$0$0$0$0$""
"Assert.java:202"$0$0$0$1$4$"	/**"
"Assert.java:203"$0$0$0$9$46$"	 * Assert that an object is not {@code null}."
"Assert.java:204"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:205"$1$0$0$15$91$"	 * Assert.notNull(clazz, () -&gt; ""The class '"" + clazz.getName() + ""' must not be null"");"
"Assert.java:206"$0$0$0$2$10$"	 * </pre>"
"Assert.java:207"$0$0$0$7$37$"	 * @param object the object to check"
"Assert.java:208"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:209"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:210"$0$0$0$9$66$"	 * @throws IllegalArgumentException if the object is {@code null}"
"Assert.java:211"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:212"$0$0$0$1$4$"	 */"
"Assert.java:213"$0$0$0$9$88$"	public static void notNull(@Nullable Object object, Supplier<String> messageSupplier) {"
"Assert.java:214"$0$0$0$5$23$"		if (object == null) {"
"Assert.java:215"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:216"$0$0$0$1$3$"		}"
"Assert.java:217"$0$0$0$1$2$"	}"
"Assert.java:218"$0$0$0$0$0$""
"Assert.java:219"$0$0$0$1$4$"	/**"
"Assert.java:220"$0$0$0$9$46$"	 * Assert that an object is not {@code null}."
"Assert.java:221"$0$0$0$11$73$"	 * @deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)}"
"Assert.java:222"$0$0$0$1$4$"	 */"
"Assert.java:223"$0$0$0$1$12$"	@Deprecated"
"Assert.java:224"$0$0$0$7$54$"	public static void notNull(@Nullable Object object) {"
"Assert.java:225"$0$0$0$13$89$"		notNull(object, ""[Assertion failed] - this argument is required; it must not be null"");"
"Assert.java:226"$0$0$0$1$2$"	}"
"Assert.java:227"$0$0$0$0$0$""
"Assert.java:228"$0$0$0$1$4$"	/**"
"Assert.java:229"$0$0$0$11$55$"	 * Assert that the given String is not empty; that is,"
"Assert.java:230"$0$0$0$12$57$"	 * it must not be {@code null} and not the empty String."
"Assert.java:231"$0$0$0$8$77$"	 * <pre class=""code"">Assert.hasLength(name, ""Name must not be empty"");</pre>"
"Assert.java:232"$0$0$0$7$35$"	 * @param text the String to check"
"Assert.java:233"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:234"$0$0$0$8$57$"	 * @throws IllegalArgumentException if the text is empty"
"Assert.java:235"$0$0$0$3$30$"	 * @see StringUtils#hasLength"
"Assert.java:236"$0$0$0$1$4$"	 */"
"Assert.java:237"$0$0$0$9$70$"	public static void hasLength(@Nullable String text, String message) {"
"Assert.java:238"$0$0$0$3$37$"		if (!StringUtils.hasLength(text)) {"
"Assert.java:239"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:240"$0$0$0$1$3$"		}"
"Assert.java:241"$0$0$0$1$2$"	}"
"Assert.java:242"$0$0$0$0$0$""
"Assert.java:243"$0$0$0$1$4$"	/**"
"Assert.java:244"$0$0$0$11$55$"	 * Assert that the given String is not empty; that is,"
"Assert.java:245"$0$0$0$12$57$"	 * it must not be {@code null} and not the empty String."
"Assert.java:246"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:247"$1$0$0$16$100$"	 * Assert.hasLength(name, () -&gt; ""Name for account '"" + account.getId() + ""' must not be empty"");"
"Assert.java:248"$0$0$0$2$10$"	 * </pre>"
"Assert.java:249"$0$0$0$7$35$"	 * @param text the String to check"
"Assert.java:250"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:251"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:252"$0$0$0$8$57$"	 * @throws IllegalArgumentException if the text is empty"
"Assert.java:253"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:254"$0$0$0$3$30$"	 * @see StringUtils#hasLength"
"Assert.java:255"$0$0$0$1$4$"	 */"
"Assert.java:256"$0$0$0$9$88$"	public static void hasLength(@Nullable String text, Supplier<String> messageSupplier) {"
"Assert.java:257"$0$0$0$3$37$"		if (!StringUtils.hasLength(text)) {"
"Assert.java:258"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:259"$0$0$0$1$3$"		}"
"Assert.java:260"$0$0$0$1$2$"	}"
"Assert.java:261"$0$0$0$0$0$""
"Assert.java:262"$0$0$0$1$4$"	/**"
"Assert.java:263"$0$0$0$11$55$"	 * Assert that the given String is not empty; that is,"
"Assert.java:264"$0$0$0$12$57$"	 * it must not be {@code null} and not the empty String."
"Assert.java:265"$0$0$0$11$75$"	 * @deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)}"
"Assert.java:266"$0$0$0$1$4$"	 */"
"Assert.java:267"$0$0$0$1$12$"	@Deprecated"
"Assert.java:268"$0$0$0$7$54$"	public static void hasLength(@Nullable String text) {"
"Assert.java:269"$0$0$0$1$17$"		hasLength(text,"
"Assert.java:270"$0$0$0$16$96$"				""[Assertion failed] - this String argument must have length; it must not be null or empty"");"
"Assert.java:271"$0$0$0$1$2$"	}"
"Assert.java:272"$0$0$0$0$0$""
"Assert.java:273"$0$0$0$1$4$"	/**"
"Assert.java:274"$0$0$0$15$82$"	 * Assert that the given String contains valid text content; that is, it must not"
"Assert.java:275"$0$0$0$12$75$"	 * be {@code null} and must contain at least one non-whitespace character."
"Assert.java:276"$0$0$0$8$77$"	 * <pre class=""code"">Assert.hasText(name, ""'name' must not be empty"");</pre>"
"Assert.java:277"$0$0$0$7$35$"	 * @param text the String to check"
"Assert.java:278"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:279"$0$0$0$12$84$"	 * @throws IllegalArgumentException if the text does not contain valid text content"
"Assert.java:280"$0$0$0$3$28$"	 * @see StringUtils#hasText"
"Assert.java:281"$0$0$0$1$4$"	 */"
"Assert.java:282"$0$0$0$9$68$"	public static void hasText(@Nullable String text, String message) {"
"Assert.java:283"$0$0$0$3$35$"		if (!StringUtils.hasText(text)) {"
"Assert.java:284"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:285"$0$0$0$1$3$"		}"
"Assert.java:286"$0$0$0$1$2$"	}"
"Assert.java:287"$0$0$0$0$0$""
"Assert.java:288"$0$0$0$1$4$"	/**"
"Assert.java:289"$0$0$0$15$82$"	 * Assert that the given String contains valid text content; that is, it must not"
"Assert.java:290"$0$0$0$12$75$"	 * be {@code null} and must contain at least one non-whitespace character."
"Assert.java:291"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:292"$1$0$0$16$98$"	 * Assert.hasText(name, () -&gt; ""Name for account '"" + account.getId() + ""' must not be empty"");"
"Assert.java:293"$0$0$0$2$10$"	 * </pre>"
"Assert.java:294"$0$0$0$7$35$"	 * @param text the String to check"
"Assert.java:295"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:296"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:297"$0$0$0$12$84$"	 * @throws IllegalArgumentException if the text does not contain valid text content"
"Assert.java:298"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:299"$0$0$0$3$28$"	 * @see StringUtils#hasText"
"Assert.java:300"$0$0$0$1$4$"	 */"
"Assert.java:301"$0$0$0$9$86$"	public static void hasText(@Nullable String text, Supplier<String> messageSupplier) {"
"Assert.java:302"$0$0$0$3$35$"		if (!StringUtils.hasText(text)) {"
"Assert.java:303"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:304"$0$0$0$1$3$"		}"
"Assert.java:305"$0$0$0$1$2$"	}"
"Assert.java:306"$0$0$0$0$0$""
"Assert.java:307"$0$0$0$1$4$"	/**"
"Assert.java:308"$0$0$0$15$82$"	 * Assert that the given String contains valid text content; that is, it must not"
"Assert.java:309"$0$0$0$12$75$"	 * be {@code null} and must contain at least one non-whitespace character."
"Assert.java:310"$0$0$0$11$73$"	 * @deprecated as of 4.3.7, in favor of {@link #hasText(String, String)}"
"Assert.java:311"$0$0$0$1$4$"	 */"
"Assert.java:312"$0$0$0$1$12$"	@Deprecated"
"Assert.java:313"$0$0$0$7$52$"	public static void hasText(@Nullable String text) {"
"Assert.java:314"$0$0$0$1$15$"		hasText(text,"
"Assert.java:315"$0$0$0$17$102$"				""[Assertion failed] - this String argument must have text; it must not be null, empty, or blank"");"
"Assert.java:316"$0$0$0$1$2$"	}"
"Assert.java:317"$0$0$0$0$0$""
"Assert.java:318"$0$0$0$1$4$"	/**"
"Assert.java:319"$0$0$0$12$68$"	 * Assert that the given text does not contain the given substring."
"Assert.java:320"$0$0$0$9$94$"	 * <pre class=""code"">Assert.doesNotContain(name, ""rod"", ""Name must not contain 'rod'"");</pre>"
"Assert.java:321"$0$0$0$7$42$"	 * @param textToSearch the text to search"
"Assert.java:322"$0$0$0$10$58$"	 * @param substring the substring to find within the text"
"Assert.java:323"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:324"$0$0$0$9$71$"	 * @throws IllegalArgumentException if the text contains the substring"
"Assert.java:325"$0$0$0$1$4$"	 */"
"Assert.java:326"$0$0$0$11$101$"	public static void doesNotContain(@Nullable String textToSearch, String substring, String message) {"
"Assert.java:327"$0$0$0$5$80$"		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&"
"Assert.java:328"$0$0$0$2$39$"				textToSearch.contains(substring)) {"
"Assert.java:329"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:330"$0$0$0$1$3$"		}"
"Assert.java:331"$0$0$0$1$2$"	}"
"Assert.java:332"$0$0$0$0$0$""
"Assert.java:333"$0$0$0$1$4$"	/**"
"Assert.java:334"$0$0$0$12$68$"	 * Assert that the given text does not contain the given substring."
"Assert.java:335"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:336"$0$0$0$14$97$"	 * Assert.doesNotContain(name, forbidden, () -&gt; ""Name must not contain '"" + forbidden + ""'"");"
"Assert.java:337"$0$0$0$2$10$"	 * </pre>"
"Assert.java:338"$0$0$0$7$42$"	 * @param textToSearch the text to search"
"Assert.java:339"$0$0$0$10$58$"	 * @param substring the substring to find within the text"
"Assert.java:340"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:341"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:342"$0$0$0$9$71$"	 * @throws IllegalArgumentException if the text contains the substring"
"Assert.java:343"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:344"$0$0$0$1$4$"	 */"
"Assert.java:345"$0$0$0$11$119$"	public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier) {"
"Assert.java:346"$0$0$0$5$80$"		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&"
"Assert.java:347"$0$0$0$2$39$"				textToSearch.contains(substring)) {"
"Assert.java:348"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:349"$0$0$0$1$3$"		}"
"Assert.java:350"$0$0$0$1$2$"	}"
"Assert.java:351"$0$0$0$0$0$""
"Assert.java:352"$0$0$0$1$4$"	/**"
"Assert.java:353"$0$0$0$12$68$"	 * Assert that the given text does not contain the given substring."
"Assert.java:354"$0$0$0$12$88$"	 * @deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)}"
"Assert.java:355"$0$0$0$1$4$"	 */"
"Assert.java:356"$0$0$0$1$12$"	@Deprecated"
"Assert.java:357"$0$0$0$9$85$"	public static void doesNotContain(@Nullable String textToSearch, String substring) {"
"Assert.java:358"$0$0$0$2$41$"		doesNotContain(textToSearch, substring,"
"Assert.java:359"$0$0$0$18$106$"				() -> ""[Assertion failed] - this String argument must not contain the substring ["" + substring + ""]"");"
"Assert.java:360"$0$0$0$1$2$"	}"
"Assert.java:361"$0$0$0$0$0$""
"Assert.java:362"$0$0$0$1$4$"	/**"
"Assert.java:363"$0$0$0$13$67$"	 * Assert that an array contains elements; that is, it must not be"
"Assert.java:364"$0$0$0$10$55$"	 * {@code null} and must contain at least one element."
"Assert.java:365"$0$0$0$8$86$"	 * <pre class=""code"">Assert.notEmpty(array, ""The array must contain elements"");</pre>"
"Assert.java:366"$0$0$0$7$35$"	 * @param array the array to check"
"Assert.java:367"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:368"$0$0$0$14$96$"	 * @throws IllegalArgumentException if the object array is {@code null} or contains no elements"
"Assert.java:369"$0$0$0$1$4$"	 */"
"Assert.java:370"$0$0$0$9$72$"	public static void notEmpty(@Nullable Object[] array, String message) {"
"Assert.java:371"$0$0$0$3$35$"		if (ObjectUtils.isEmpty(array)) {"
"Assert.java:372"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:373"$0$0$0$1$3$"		}"
"Assert.java:374"$0$0$0$1$2$"	}"
"Assert.java:375"$0$0$0$0$0$""
"Assert.java:376"$0$0$0$1$4$"	/**"
"Assert.java:377"$0$0$0$13$67$"	 * Assert that an array contains elements; that is, it must not be"
"Assert.java:378"$0$0$0$10$55$"	 * {@code null} and must contain at least one element."
"Assert.java:379"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:380"$0$0$0$14$89$"	 * Assert.notEmpty(array, () -&gt; ""The "" + arrayType + "" array must contain elements"");"
"Assert.java:381"$0$0$0$2$10$"	 * </pre>"
"Assert.java:382"$0$0$0$7$35$"	 * @param array the array to check"
"Assert.java:383"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:384"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:385"$0$0$0$14$96$"	 * @throws IllegalArgumentException if the object array is {@code null} or contains no elements"
"Assert.java:386"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:387"$0$0$0$1$4$"	 */"
"Assert.java:388"$0$0$0$9$90$"	public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier) {"
"Assert.java:389"$0$0$0$3$35$"		if (ObjectUtils.isEmpty(array)) {"
"Assert.java:390"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:391"$0$0$0$1$3$"		}"
"Assert.java:392"$0$0$0$1$2$"	}"
"Assert.java:393"$0$0$0$0$0$""
"Assert.java:394"$0$0$0$1$4$"	/**"
"Assert.java:395"$0$0$0$13$67$"	 * Assert that an array contains elements; that is, it must not be"
"Assert.java:396"$0$0$0$10$55$"	 * {@code null} and must contain at least one element."
"Assert.java:397"$0$0$0$11$76$"	 * @deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)}"
"Assert.java:398"$0$0$0$1$4$"	 */"
"Assert.java:399"$0$0$0$1$12$"	@Deprecated"
"Assert.java:400"$0$0$0$7$56$"	public static void notEmpty(@Nullable Object[] array) {"
"Assert.java:401"$0$0$0$17$107$"		notEmpty(array, ""[Assertion failed] - this array must not be empty: it must contain at least 1 element"");"
"Assert.java:402"$0$0$0$1$2$"	}"
"Assert.java:403"$0$0$0$0$0$""
"Assert.java:404"$0$0$0$1$4$"	/**"
"Assert.java:405"$0$0$0$10$59$"	 * Assert that an array contains no {@code null} elements."
"Assert.java:406"$0$0$0$10$53$"	 * <p>Note: Does not complain if the array is empty!"
"Assert.java:407"$0$0$0$9$101$"	 * <pre class=""code"">Assert.noNullElements(array, ""The array must contain non-null elements"");</pre>"
"Assert.java:408"$0$0$0$7$35$"	 * @param array the array to check"
"Assert.java:409"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:410"$0$0$0$12$88$"	 * @throws IllegalArgumentException if the object array contains a {@code null} element"
"Assert.java:411"$0$0$0$1$4$"	 */"
"Assert.java:412"$0$0$0$9$78$"	public static void noNullElements(@Nullable Object[] array, String message) {"
"Assert.java:413"$0$0$0$5$22$"		if (array != null) {"
"Assert.java:414"$0$0$0$6$33$"			for (Object element : array) {"
"Assert.java:415"$0$0$0$5$26$"				if (element == null) {"
"Assert.java:416"$0$0$0$3$49$"					throw new IllegalArgumentException(message);"
"Assert.java:417"$0$0$0$1$5$"				}"
"Assert.java:418"$0$0$0$1$4$"			}"
"Assert.java:419"$0$0$0$1$3$"		}"
"Assert.java:420"$0$0$0$1$2$"	}"
"Assert.java:421"$0$0$0$0$0$""
"Assert.java:422"$0$0$0$1$4$"	/**"
"Assert.java:423"$0$0$0$10$59$"	 * Assert that an array contains no {@code null} elements."
"Assert.java:424"$0$0$0$10$53$"	 * <p>Note: Does not complain if the array is empty!"
"Assert.java:425"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:426"$0$0$0$15$104$"	 * Assert.noNullElements(array, () -&gt; ""The "" + arrayType + "" array must contain non-null elements"");"
"Assert.java:427"$0$0$0$2$10$"	 * </pre>"
"Assert.java:428"$0$0$0$7$35$"	 * @param array the array to check"
"Assert.java:429"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:430"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:431"$0$0$0$12$88$"	 * @throws IllegalArgumentException if the object array contains a {@code null} element"
"Assert.java:432"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:433"$0$0$0$1$4$"	 */"
"Assert.java:434"$0$0$0$9$96$"	public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier) {"
"Assert.java:435"$0$0$0$5$22$"		if (array != null) {"
"Assert.java:436"$0$0$0$6$33$"			for (Object element : array) {"
"Assert.java:437"$0$0$0$5$26$"				if (element == null) {"
"Assert.java:438"$0$0$0$3$70$"					throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:439"$0$0$0$1$5$"				}"
"Assert.java:440"$0$0$0$1$4$"			}"
"Assert.java:441"$0$0$0$1$3$"		}"
"Assert.java:442"$0$0$0$1$2$"	}"
"Assert.java:443"$0$0$0$0$0$""
"Assert.java:444"$0$0$0$1$4$"	/**"
"Assert.java:445"$0$0$0$10$59$"	 * Assert that an array contains no {@code null} elements."
"Assert.java:446"$0$0$0$11$82$"	 * @deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)}"
"Assert.java:447"$0$0$0$1$4$"	 */"
"Assert.java:448"$0$0$0$1$12$"	@Deprecated"
"Assert.java:449"$0$0$0$7$62$"	public static void noNullElements(@Nullable Object[] array) {"
"Assert.java:450"$0$0$0$12$94$"		noNullElements(array, ""[Assertion failed] - this array must not contain any null elements"");"
"Assert.java:451"$0$0$0$1$2$"	}"
"Assert.java:452"$0$0$0$0$0$""
"Assert.java:453"$0$0$0$1$4$"	/**"
"Assert.java:454"$0$0$0$13$71$"	 * Assert that a collection contains elements; that is, it must not be"
"Assert.java:455"$0$0$0$10$55$"	 * {@code null} and must contain at least one element."
"Assert.java:456"$0$0$0$7$92$"	 * <pre class=""code"">Assert.notEmpty(collection, ""Collection must contain elements"");</pre>"
"Assert.java:457"$0$0$0$7$45$"	 * @param collection the collection to check"
"Assert.java:458"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:459"$0$0$0$10$73$"	 * @throws IllegalArgumentException if the collection is {@code null} or"
"Assert.java:460"$0$0$0$4$24$"	 * contains no elements"
"Assert.java:461"$0$0$0$1$4$"	 */"
"Assert.java:462"$0$0$0$9$82$"	public static void notEmpty(@Nullable Collection<?> collection, String message) {"
"Assert.java:463"$0$0$0$3$44$"		if (CollectionUtils.isEmpty(collection)) {"
"Assert.java:464"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:465"$0$0$0$1$3$"		}"
"Assert.java:466"$0$0$0$1$2$"	}"
"Assert.java:467"$0$0$0$0$0$""
"Assert.java:468"$0$0$0$1$4$"	/**"
"Assert.java:469"$0$0$0$13$71$"	 * Assert that a collection contains elements; that is, it must not be"
"Assert.java:470"$0$0$0$10$55$"	 * {@code null} and must contain at least one element."
"Assert.java:471"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:472"$0$0$0$14$104$"	 * Assert.notEmpty(collection, () -&gt; ""The "" + collectionType + "" collection must contain elements"");"
"Assert.java:473"$0$0$0$2$10$"	 * </pre>"
"Assert.java:474"$0$0$0$7$45$"	 * @param collection the collection to check"
"Assert.java:475"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:476"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:477"$0$0$0$10$73$"	 * @throws IllegalArgumentException if the collection is {@code null} or"
"Assert.java:478"$0$0$0$4$24$"	 * contains no elements"
"Assert.java:479"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:480"$0$0$0$1$4$"	 */"
"Assert.java:481"$0$0$0$9$100$"	public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {"
"Assert.java:482"$0$0$0$3$44$"		if (CollectionUtils.isEmpty(collection)) {"
"Assert.java:483"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:484"$0$0$0$1$3$"		}"
"Assert.java:485"$0$0$0$1$2$"	}"
"Assert.java:486"$0$0$0$0$0$""
"Assert.java:487"$0$0$0$1$4$"	/**"
"Assert.java:488"$0$0$0$13$71$"	 * Assert that a collection contains elements; that is, it must not be"
"Assert.java:489"$0$0$0$10$55$"	 * {@code null} and must contain at least one element."
"Assert.java:490"$0$0$0$11$78$"	 * @deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)}"
"Assert.java:491"$0$0$0$1$4$"	 */"
"Assert.java:492"$0$0$0$1$12$"	@Deprecated"
"Assert.java:493"$0$0$0$7$66$"	public static void notEmpty(@Nullable Collection<?> collection) {"
"Assert.java:494"$0$0$0$1$22$"		notEmpty(collection,"
"Assert.java:495"$0$0$0$16$98$"				""[Assertion failed] - this collection must not be empty: it must contain at least 1 element"");"
"Assert.java:496"$0$0$0$1$2$"	}"
"Assert.java:497"$0$0$0$0$0$""
"Assert.java:498"$0$0$0$1$4$"	/**"
"Assert.java:499"$0$0$0$10$63$"	 * Assert that a collection contains no {@code null} elements."
"Assert.java:500"$0$0$0$10$58$"	 * <p>Note: Does not complain if the collection is empty!"
"Assert.java:501"$0$0$0$8$107$"	 * <pre class=""code"">Assert.noNullElements(collection, ""Collection must contain non-null elements"");</pre>"
"Assert.java:502"$0$0$0$7$45$"	 * @param collection the collection to check"
"Assert.java:503"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:504"$0$0$0$11$86$"	 * @throws IllegalArgumentException if the collection contains a {@code null} element"
"Assert.java:505"$0$0$0$3$14$"	 * @since 5.2"
"Assert.java:506"$0$0$0$1$4$"	 */"
"Assert.java:507"$0$0$0$9$88$"	public static void noNullElements(@Nullable Collection<?> collection, String message) {"
"Assert.java:508"$0$0$0$5$27$"		if (collection != null) {"
"Assert.java:509"$0$0$0$6$38$"			for (Object element : collection) {"
"Assert.java:510"$0$0$0$5$26$"				if (element == null) {"
"Assert.java:511"$0$0$0$3$49$"					throw new IllegalArgumentException(message);"
"Assert.java:512"$0$0$0$1$5$"				}"
"Assert.java:513"$0$0$0$1$4$"			}"
"Assert.java:514"$0$0$0$1$3$"		}"
"Assert.java:515"$0$0$0$1$2$"	}"
"Assert.java:516"$0$0$0$0$0$""
"Assert.java:517"$0$0$0$1$4$"	/**"
"Assert.java:518"$0$0$0$10$63$"	 * Assert that a collection contains no {@code null} elements."
"Assert.java:519"$0$0$0$10$58$"	 * <p>Note: Does not complain if the collection is empty!"
"Assert.java:520"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:521"$0$0$0$14$115$"	 * Assert.noNullElements(collection, () -&gt; ""Collection "" + collectionName + "" must contain non-null elements"");"
"Assert.java:522"$0$0$0$2$10$"	 * </pre>"
"Assert.java:523"$0$0$0$7$45$"	 * @param collection the collection to check"
"Assert.java:524"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:525"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:526"$0$0$0$11$86$"	 * @throws IllegalArgumentException if the collection contains a {@code null} element"
"Assert.java:527"$0$0$0$3$14$"	 * @since 5.2"
"Assert.java:528"$0$0$0$1$4$"	 */"
"Assert.java:529"$0$0$0$9$106$"	public static void noNullElements(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {"
"Assert.java:530"$0$0$0$5$27$"		if (collection != null) {"
"Assert.java:531"$0$0$0$6$38$"			for (Object element : collection) {"
"Assert.java:532"$0$0$0$5$26$"				if (element == null) {"
"Assert.java:533"$0$0$0$3$70$"					throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:534"$0$0$0$1$5$"				}"
"Assert.java:535"$0$0$0$1$4$"			}"
"Assert.java:536"$0$0$0$1$3$"		}"
"Assert.java:537"$0$0$0$1$2$"	}"
"Assert.java:538"$0$0$0$0$0$""
"Assert.java:539"$0$0$0$1$4$"	/**"
"Assert.java:540"$0$0$0$15$76$"	 * Assert that a Map contains entries; that is, it must not be {@code null}"
"Assert.java:541"$0$0$0$8$40$"	 * and must contain at least one entry."
"Assert.java:542"$0$0$0$7$77$"	 * <pre class=""code"">Assert.notEmpty(map, ""Map must contain entries"");</pre>"
"Assert.java:543"$0$0$0$7$31$"	 * @param map the map to check"
"Assert.java:544"$0$0$0$12$70$"	 * @param message the exception message to use if the assertion fails"
"Assert.java:545"$0$0$0$13$86$"	 * @throws IllegalArgumentException if the map is {@code null} or contains no entries"
"Assert.java:546"$0$0$0$1$4$"	 */"
"Assert.java:547"$0$0$0$10$71$"	public static void notEmpty(@Nullable Map<?, ?> map, String message) {"
"Assert.java:548"$0$0$0$3$37$"		if (CollectionUtils.isEmpty(map)) {"
"Assert.java:549"$0$0$0$3$47$"			throw new IllegalArgumentException(message);"
"Assert.java:550"$0$0$0$1$3$"		}"
"Assert.java:551"$0$0$0$1$2$"	}"
"Assert.java:552"$0$0$0$0$0$""
"Assert.java:553"$0$0$0$1$4$"	/**"
"Assert.java:554"$0$0$0$15$76$"	 * Assert that a Map contains entries; that is, it must not be {@code null}"
"Assert.java:555"$0$0$0$8$40$"	 * and must contain at least one entry."
"Assert.java:556"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:557"$0$0$0$14$82$"	 * Assert.notEmpty(map, () -&gt; ""The "" + mapType + "" map must contain entries"");"
"Assert.java:558"$0$0$0$2$10$"	 * </pre>"
"Assert.java:559"$0$0$0$7$31$"	 * @param map the map to check"
"Assert.java:560"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:561"$0$0$0$3$19$"	 * assertion fails"
"Assert.java:562"$0$0$0$13$86$"	 * @throws IllegalArgumentException if the map is {@code null} or contains no entries"
"Assert.java:563"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:564"$0$0$0$1$4$"	 */"
"Assert.java:565"$0$0$0$10$89$"	public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier) {"
"Assert.java:566"$0$0$0$3$37$"		if (CollectionUtils.isEmpty(map)) {"
"Assert.java:567"$0$0$0$3$68$"			throw new IllegalArgumentException(nullSafeGet(messageSupplier));"
"Assert.java:568"$0$0$0$1$3$"		}"
"Assert.java:569"$0$0$0$1$2$"	}"
"Assert.java:570"$0$0$0$0$0$""
"Assert.java:571"$0$0$0$1$4$"	/**"
"Assert.java:572"$0$0$0$15$76$"	 * Assert that a Map contains entries; that is, it must not be {@code null}"
"Assert.java:573"$0$0$0$8$40$"	 * and must contain at least one entry."
"Assert.java:574"$0$0$0$11$71$"	 * @deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)}"
"Assert.java:575"$0$0$0$1$4$"	 */"
"Assert.java:576"$0$0$0$1$12$"	@Deprecated"
"Assert.java:577"$0$0$0$8$55$"	public static void notEmpty(@Nullable Map<?, ?> map) {"
"Assert.java:578"$0$0$0$17$103$"		notEmpty(map, ""[Assertion failed] - this map must not be empty; it must contain at least one entry"");"
"Assert.java:579"$0$0$0$1$2$"	}"
"Assert.java:580"$0$0$0$0$0$""
"Assert.java:581"$0$0$0$1$4$"	/**"
"Assert.java:582"$0$0$0$13$73$"	 * Assert that the provided object is an instance of the provided class."
"Assert.java:583"$0$0$0$6$78$"	 * <pre class=""code"">Assert.instanceOf(Foo.class, foo, ""Foo expected"");</pre>"
"Assert.java:584"$0$0$0$8$41$"	 * @param type the type to check against"
"Assert.java:585"$0$0$0$7$34$"	 * @param obj the object to check"
"Assert.java:586"$0$0$0$13$80$"	 * @param message a message which will be prepended to provide further context."
"Assert.java:587"$0$0$0$19$80$"	 * If it is empty or ends in "":"" or "";"" or "","" or ""."", a full exception message"
"Assert.java:588"$0$0$0$16$79$"	 * will be appended. If it ends in a space, the name of the offending object's"
"Assert.java:589"$0$0$0$17$77$"	 * type will be appended. In any other case, a "":"" with a space and the name"
"Assert.java:590"$0$0$0$9$52$"	 * of the offending object's type will be appended."
"Assert.java:591"$0$0$0$12$77$"	 * @throws IllegalArgumentException if the object is not an instance of type"
"Assert.java:592"$0$0$0$1$4$"	 */"
"Assert.java:593"$0$0$0$11$87$"	public static void isInstanceOf(Class<?> type, @Nullable Object obj, String message) {"
"Assert.java:594"$0$0$0$9$58$"		notNull(type, ""Type to check against must not be null"");"
"Assert.java:595"$0$0$0$3$30$"		if (!type.isInstance(obj)) {"
"Assert.java:596"$0$0$0$3$43$"			instanceCheckFailed(type, obj, message);"
"Assert.java:597"$0$0$0$1$3$"		}"
"Assert.java:598"$0$0$0$1$2$"	}"
"Assert.java:599"$0$0$0$0$0$""
"Assert.java:600"$0$0$0$1$4$"	/**"
"Assert.java:601"$0$0$0$13$73$"	 * Assert that the provided object is an instance of the provided class."
"Assert.java:602"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:603"$1$0$0$11$96$"	 * Assert.instanceOf(Foo.class, foo, () -&gt; ""Processing "" + Foo.class.getSimpleName() + "":"");"
"Assert.java:604"$0$0$0$2$10$"	 * </pre>"
"Assert.java:605"$0$0$0$8$41$"	 * @param type the type to check against"
"Assert.java:606"$0$0$0$7$34$"	 * @param obj the object to check"
"Assert.java:607"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:608"$0$0$0$10$82$"	 * assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details."
"Assert.java:609"$0$0$0$12$77$"	 * @throws IllegalArgumentException if the object is not an instance of type"
"Assert.java:610"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:611"$0$0$0$1$4$"	 */"
"Assert.java:612"$0$0$0$11$105$"	public static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier) {"
"Assert.java:613"$0$0$0$9$58$"		notNull(type, ""Type to check against must not be null"");"
"Assert.java:614"$0$0$0$3$30$"		if (!type.isInstance(obj)) {"
"Assert.java:615"$0$0$0$3$64$"			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier));"
"Assert.java:616"$0$0$0$1$3$"		}"
"Assert.java:617"$0$0$0$1$2$"	}"
"Assert.java:618"$0$0$0$0$0$""
"Assert.java:619"$0$0$0$1$4$"	/**"
"Assert.java:620"$0$0$0$13$73$"	 * Assert that the provided object is an instance of the provided class."
"Assert.java:621"$0$0$0$4$62$"	 * <pre class=""code"">Assert.instanceOf(Foo.class, foo);</pre>"
"Assert.java:622"$0$0$0$8$41$"	 * @param type the type to check against"
"Assert.java:623"$0$0$0$7$34$"	 * @param obj the object to check"
"Assert.java:624"$0$0$0$12$77$"	 * @throws IllegalArgumentException if the object is not an instance of type"
"Assert.java:625"$0$0$0$1$4$"	 */"
"Assert.java:626"$0$0$0$9$71$"	public static void isInstanceOf(Class<?> type, @Nullable Object obj) {"
"Assert.java:627"$0$0$0$3$30$"		isInstanceOf(type, obj, """");"
"Assert.java:628"$0$0$0$1$2$"	}"
"Assert.java:629"$0$0$0$0$0$""
"Assert.java:630"$0$0$0$1$4$"	/**"
"Assert.java:631"$0$0$0$8$76$"	 * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}."
"Assert.java:632"$0$0$0$6$90$"	 * <pre class=""code"">Assert.isAssignable(Number.class, myClass, ""Number expected"");</pre>"
"Assert.java:633"$0$0$0$9$52$"	 * @param superType the super type to check against"
"Assert.java:634"$0$0$0$8$40$"	 * @param subType the sub type to check"
"Assert.java:635"$0$0$0$13$80$"	 * @param message a message which will be prepended to provide further context."
"Assert.java:636"$0$0$0$19$80$"	 * If it is empty or ends in "":"" or "";"" or "","" or ""."", a full exception message"
"Assert.java:637"$0$0$0$17$79$"	 * will be appended. If it ends in a space, the name of the offending sub type"
"Assert.java:638"$0$0$0$18$79$"	 * will be appended. In any other case, a "":"" with a space and the name of the"
"Assert.java:639"$0$0$0$7$40$"	 * offending sub type will be appended."
"Assert.java:640"$0$0$0$9$70$"	 * @throws IllegalArgumentException if the classes are not assignable"
"Assert.java:641"$0$0$0$1$4$"	 */"
"Assert.java:642"$0$0$0$11$98$"	public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message) {"
"Assert.java:643"$0$0$0$10$69$"		notNull(superType, ""Super type to check against must not be null"");"
"Assert.java:644"$0$0$0$7$64$"		if (subType == null || !superType.isAssignableFrom(subType)) {"
"Assert.java:645"$0$0$0$3$54$"			assignableCheckFailed(superType, subType, message);"
"Assert.java:646"$0$0$0$1$3$"		}"
"Assert.java:647"$0$0$0$1$2$"	}"
"Assert.java:648"$0$0$0$0$0$""
"Assert.java:649"$0$0$0$1$4$"	/**"
"Assert.java:650"$0$0$0$8$76$"	 * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}."
"Assert.java:651"$0$0$0$3$22$"	 * <pre class=""code"">"
"Assert.java:652"$0$0$0$11$95$"	 * Assert.isAssignable(Number.class, myClass, () -&gt; ""Processing "" + myAttributeName + "":"");"
"Assert.java:653"$0$0$0$2$10$"	 * </pre>"
"Assert.java:654"$0$0$0$9$52$"	 * @param superType the super type to check against"
"Assert.java:655"$0$0$0$8$40$"	 * @param subType the sub type to check"
"Assert.java:656"$0$0$0$13$77$"	 * @param messageSupplier a supplier for the exception message to use if the"
"Assert.java:657"$0$0$0$10$81$"	 * assertion fails. See {@link #isAssignable(Class, Class, String)} for details."
"Assert.java:658"$0$0$0$9$70$"	 * @throws IllegalArgumentException if the classes are not assignable"
"Assert.java:659"$0$0$0$3$14$"	 * @since 5.0"
"Assert.java:660"$0$0$0$1$4$"	 */"
"Assert.java:661"$0$0$0$11$116$"	public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier) {"
"Assert.java:662"$0$0$0$10$69$"		notNull(superType, ""Super type to check against must not be null"");"
"Assert.java:663"$0$0$0$7$64$"		if (subType == null || !superType.isAssignableFrom(subType)) {"
"Assert.java:664"$0$0$0$3$75$"			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier));"
"Assert.java:665"$0$0$0$1$3$"		}"
"Assert.java:666"$0$0$0$1$2$"	}"
"Assert.java:667"$0$0$0$0$0$""
"Assert.java:668"$0$0$0$1$4$"	/**"
"Assert.java:669"$0$0$0$8$76$"	 * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}."
"Assert.java:670"$0$0$0$4$71$"	 * <pre class=""code"">Assert.isAssignable(Number.class, myClass);</pre>"
"Assert.java:671"$0$0$0$8$44$"	 * @param superType the super type to check"
"Assert.java:672"$0$0$0$8$40$"	 * @param subType the sub type to check"
"Assert.java:673"$0$0$0$9$70$"	 * @throws IllegalArgumentException if the classes are not assignable"
"Assert.java:674"$0$0$0$1$4$"	 */"
"Assert.java:675"$0$0$0$8$72$"	public static void isAssignable(Class<?> superType, Class<?> subType) {"
"Assert.java:676"$0$0$0$3$39$"		isAssignable(superType, subType, """");"
"Assert.java:677"$0$0$0$1$2$"	}"
"Assert.java:678"$0$0$0$0$0$""
"Assert.java:679"$0$0$0$0$0$""
"Assert.java:680"$0$0$0$12$101$"	private static void instanceCheckFailed(Class<?> type, @Nullable Object obj, @Nullable String msg) {"
"Assert.java:681"$2$0$0$10$71$"		String className = (obj != null ? obj.getClass().getName() : ""null"");"
"Assert.java:682"$0$0$0$4$21$"		String result = """";"
"Assert.java:683"$0$0$0$4$32$"		boolean defaultMessage = true;"
"Assert.java:684"$0$0$0$3$35$"		if (StringUtils.hasLength(msg)) {"
"Assert.java:685"$0$0$0$3$32$"			if (endsWithSeparator(msg)) {"
"Assert.java:686"$0$0$0$6$23$"				result = msg + "" "";"
"Assert.java:687"$0$0$0$1$4$"			}"
"Assert.java:688"$0$0$0$2$9$"			else {"
"Assert.java:689"$0$0$0$4$49$"				result = messageWithTypeName(msg, className);"
"Assert.java:690"$0$0$0$3$27$"				defaultMessage = false;"
"Assert.java:691"$0$0$0$1$4$"			}"
"Assert.java:692"$0$0$0$1$3$"		}"
"Assert.java:693"$0$0$0$3$23$"		if (defaultMessage) {"
"Assert.java:694"$0$0$0$20$92$"			result = result + (""Object of class ["" + className + ""] must be an instance of "" + type);"
"Assert.java:695"$0$0$0$1$3$"		}"
"Assert.java:696"$0$0$0$3$45$"		throw new IllegalArgumentException(result);"
"Assert.java:697"$0$0$0$1$2$"	}"
"Assert.java:698"$0$0$0$0$0$""
"Assert.java:699"$0$0$0$12$114$"	private static void assignableCheckFailed(Class<?> superType, @Nullable Class<?> subType, @Nullable String msg) {"
"Assert.java:700"$0$0$0$4$21$"		String result = """";"
"Assert.java:701"$0$0$0$4$32$"		boolean defaultMessage = true;"
"Assert.java:702"$0$0$0$3$35$"		if (StringUtils.hasLength(msg)) {"
"Assert.java:703"$0$0$0$3$32$"			if (endsWithSeparator(msg)) {"
"Assert.java:704"$0$0$0$6$23$"				result = msg + "" "";"
"Assert.java:705"$0$0$0$1$4$"			}"
"Assert.java:706"$0$0$0$2$9$"			else {"
"Assert.java:707"$0$0$0$4$47$"				result = messageWithTypeName(msg, subType);"
"Assert.java:708"$0$0$0$3$27$"				defaultMessage = false;"
"Assert.java:709"$0$0$0$1$4$"			}"
"Assert.java:710"$0$0$0$1$3$"		}"
"Assert.java:711"$0$0$0$3$23$"		if (defaultMessage) {"
"Assert.java:712"$0$0$0$14$70$"			result = result + (subType + "" is not assignable to "" + superType);"
"Assert.java:713"$0$0$0$1$3$"		}"
"Assert.java:714"$0$0$0$3$45$"		throw new IllegalArgumentException(result);"
"Assert.java:715"$0$0$0$1$2$"	}"
"Assert.java:716"$0$0$0$0$0$""
"Assert.java:717"$0$0$0$6$55$"	private static boolean endsWithSeparator(String msg) {"
"Assert.java:718"$0$0$0$8$92$"		return (msg.endsWith("":"") || msg.endsWith("";"") || msg.endsWith("","") || msg.endsWith("".""));"
"Assert.java:719"$0$0$0$1$2$"	}"
"Assert.java:720"$0$0$0$0$0$""
"Assert.java:721"$0$0$0$9$83$"	private static String messageWithTypeName(String msg, @Nullable Object typeName) {"
"Assert.java:722"$0$0$0$12$58$"		return msg + (msg.endsWith("" "") ? """" : "": "") + typeName;"
"Assert.java:723"$0$0$0$1$2$"	}"
"Assert.java:724"$0$0$0$0$0$""
"Assert.java:725"$0$0$0$1$10$"	@Nullable"
"Assert.java:726"$0$0$0$7$80$"	private static String nullSafeGet(@Nullable Supplier<String> messageSupplier) {"
"Assert.java:727"$1$0$0$8$66$"		return (messageSupplier != null ? messageSupplier.get() : null);"
"Assert.java:728"$0$0$0$1$2$"	}"
"Assert.java:729"$0$0$0$0$0$""
"Assert.java:730"$0$0$0$1$1$"}"
"CompoundComparator.java:1"$0$0$0$1$2$"/*"
"CompoundComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"CompoundComparator.java:3"$0$0$0$1$2$" *"
"CompoundComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"CompoundComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"CompoundComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"CompoundComparator.java:7"$0$0$0$1$2$" *"
"CompoundComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"CompoundComparator.java:9"$0$0$0$1$2$" *"
"CompoundComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"CompoundComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"CompoundComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"CompoundComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"CompoundComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"CompoundComparator.java:15"$0$0$0$1$3$" */"
"CompoundComparator.java:16"$0$0$0$0$0$""
"CompoundComparator.java:17"$0$0$0$2$44$"package org.springframework.util.comparator;"
"CompoundComparator.java:18"$0$0$0$0$0$""
"CompoundComparator.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"CompoundComparator.java:20"$0$0$0$2$27$"import java.util.ArrayList;"
"CompoundComparator.java:21"$0$0$0$2$28$"import java.util.Comparator;"
"CompoundComparator.java:22"$0$0$0$2$22$"import java.util.List;"
"CompoundComparator.java:23"$0$0$0$0$0$""
"CompoundComparator.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"CompoundComparator.java:25"$0$0$0$2$39$"import org.springframework.util.Assert;"
"CompoundComparator.java:26"$0$0$0$0$0$""
"CompoundComparator.java:27"$0$0$0$1$3$"/**"
"CompoundComparator.java:28"$0$0$0$12$66$" * A comparator that chains a sequence of one or more Comparators."
"CompoundComparator.java:29"$0$0$0$1$2$" *"
"CompoundComparator.java:30"$0$0$0$12$76$" * <p>A compound comparator calls each Comparator in sequence until a single"
"CompoundComparator.java:31"$0$0$0$12$77$" * Comparator returns a non-zero result, or the comparators are exhausted and"
"CompoundComparator.java:32"$0$0$0$4$20$" * zero is returned."
"CompoundComparator.java:33"$0$0$0$1$2$" *"
"CompoundComparator.java:34"$0$0$0$11$80$" * <p>This facilitates in-memory sorting similar to multi-column sorting in SQL."
"CompoundComparator.java:35"$0$0$0$14$71$" * The order of any single Comparator in the list can also be reversed."
"CompoundComparator.java:36"$0$0$0$1$2$" *"
"CompoundComparator.java:37"$0$0$0$4$23$" * @author Keith Donald"
"CompoundComparator.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"CompoundComparator.java:39"$0$0$0$3$15$" * @since 1.2.2"
"CompoundComparator.java:40"$0$0$0$14$73$" * @param <T> the type of objects that may be compared by this comparator"
"CompoundComparator.java:41"$0$0$0$14$73$" * @deprecated as of Spring Framework 5.0, in favor of the standard JDK 8"
"CompoundComparator.java:42"$0$0$0$3$47$" * {@link Comparator#thenComparing(Comparator)}"
"CompoundComparator.java:43"$0$0$0$1$3$" */"
"CompoundComparator.java:44"$0$0$0$1$10$"Deprecated"
"CompoundComparator.java:45"$0$0$0$2$40$"SuppressWarnings({""serial"", ""rawtypes""})"
"CompoundComparator.java:46"$0$0$0$7$75$"public class CompoundComparator<T> implements Comparator<T>, Serializable {"
"CompoundComparator.java:47"$0$0$0$0$0$""
"CompoundComparator.java:48"$0$0$0$4$54$"	private final List<InvertibleComparator> comparators;"
"CompoundComparator.java:49"$0$0$0$0$0$""
"CompoundComparator.java:50"$0$0$0$0$0$""
"CompoundComparator.java:51"$0$0$0$1$4$"	/**"
"CompoundComparator.java:52"$0$0$0$9$73$"	 * Construct a CompoundComparator with initially no Comparators. Clients"
"CompoundComparator.java:53"$0$0$0$14$76$"	 * must add at least one Comparator before calling the compare method or an"
"CompoundComparator.java:54"$0$0$0$4$36$"	 * IllegalStateException is thrown."
"CompoundComparator.java:55"$0$0$0$1$4$"	 */"
"CompoundComparator.java:56"$0$0$0$3$30$"	public CompoundComparator() {"
"CompoundComparator.java:57"$0$0$0$4$39$"		this.comparators = new ArrayList<>();"
"CompoundComparator.java:58"$0$0$0$1$2$"	}"
"CompoundComparator.java:59"$0$0$0$0$0$""
"CompoundComparator.java:60"$0$0$0$1$4$"	/**"
"CompoundComparator.java:61"$0$0$0$11$78$"	 * Construct a CompoundComparator from the Comparators in the provided array."
"CompoundComparator.java:62"$0$0$0$9$60$"	 * <p>All Comparators will default to ascending sort order,"
"CompoundComparator.java:63"$0$0$0$5$42$"	 * unless they are InvertibleComparators."
"CompoundComparator.java:64"$0$0$0$11$74$"	 * @param comparators the comparators to build into a compound comparator"
"CompoundComparator.java:65"$0$0$0$3$29$"	 * @see InvertibleComparator"
"CompoundComparator.java:66"$0$0$0$1$4$"	 */"
"CompoundComparator.java:67"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CompoundComparator.java:68"$0$0$0$4$55$"	public CompoundComparator(Comparator... comparators) {"
"CompoundComparator.java:69"$0$0$0$6$62$"		Assert.notNull(comparators, ""Comparators must not be null"");"
"CompoundComparator.java:70"$0$0$0$4$57$"		this.comparators = new ArrayList<>(comparators.length);"
"CompoundComparator.java:71"$0$0$0$6$45$"		for (Comparator comparator : comparators) {"
"CompoundComparator.java:72"$0$0$0$1$29$"			addComparator(comparator);"
"CompoundComparator.java:73"$0$0$0$1$3$"		}"
"CompoundComparator.java:74"$0$0$0$1$2$"	}"
"CompoundComparator.java:75"$0$0$0$0$0$""
"CompoundComparator.java:76"$0$0$0$0$0$""
"CompoundComparator.java:77"$0$0$0$1$4$"	/**"
"CompoundComparator.java:78"$0$0$0$10$45$"	 * Add a Comparator to the end of the chain."
"CompoundComparator.java:79"$0$0$0$9$59$"	 * <p>The Comparator will default to ascending sort order,"
"CompoundComparator.java:80"$0$0$0$6$40$"	 * unless it is a InvertibleComparator."
"CompoundComparator.java:81"$0$0$0$13$67$"	 * @param comparator the Comparator to add to the end of the chain"
"CompoundComparator.java:82"$0$0$0$3$29$"	 * @see InvertibleComparator"
"CompoundComparator.java:83"$0$0$0$1$4$"	 */"
"CompoundComparator.java:84"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CompoundComparator.java:85"$0$0$0$7$64$"	public void addComparator(Comparator<? extends T> comparator) {"
"CompoundComparator.java:86"$0$0$0$5$51$"		if (comparator instanceof InvertibleComparator) {"
"CompoundComparator.java:87"$0$0$0$2$59$"			this.comparators.add((InvertibleComparator) comparator);"
"CompoundComparator.java:88"$0$0$0$1$3$"		}"
"CompoundComparator.java:89"$0$0$0$2$8$"		else {"
"CompoundComparator.java:90"$0$0$0$2$62$"			this.comparators.add(new InvertibleComparator(comparator));"
"CompoundComparator.java:91"$0$0$0$1$3$"		}"
"CompoundComparator.java:92"$0$0$0$1$2$"	}"
"CompoundComparator.java:93"$0$0$0$0$0$""
"CompoundComparator.java:94"$0$0$0$1$4$"	/**"
"CompoundComparator.java:95"$0$0$0$15$75$"	 * Add a Comparator to the end of the chain using the provided sort order."
"CompoundComparator.java:96"$0$0$0$13$67$"	 * @param comparator the Comparator to add to the end of the chain"
"CompoundComparator.java:97"$0$0$0$11$75$"	 * @param ascending the sort order: ascending (true) or descending (false)"
"CompoundComparator.java:98"$0$0$0$1$4$"	 */"
"CompoundComparator.java:99"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CompoundComparator.java:100"$0$0$0$9$83$"	public void addComparator(Comparator<? extends T> comparator, boolean ascending) {"
"CompoundComparator.java:101"$0$0$0$3$72$"		this.comparators.add(new InvertibleComparator(comparator, ascending));"
"CompoundComparator.java:102"$0$0$0$1$2$"	}"
"CompoundComparator.java:103"$0$0$0$0$0$""
"CompoundComparator.java:104"$0$0$0$1$4$"	/**"
"CompoundComparator.java:105"$0$0$0$8$46$"	 * Replace the Comparator at the given index."
"CompoundComparator.java:106"$0$0$0$9$59$"	 * <p>The Comparator will default to ascending sort order,"
"CompoundComparator.java:107"$0$0$0$6$40$"	 * unless it is a InvertibleComparator."
"CompoundComparator.java:108"$0$0$0$10$55$"	 * @param index the index of the Comparator to replace"
"CompoundComparator.java:109"$0$0$0$11$64$"	 * @param comparator the Comparator to place at the given index"
"CompoundComparator.java:110"$0$0$0$3$29$"	 * @see InvertibleComparator"
"CompoundComparator.java:111"$0$0$0$1$4$"	 */"
"CompoundComparator.java:112"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CompoundComparator.java:113"$0$0$0$9$75$"	public void setComparator(int index, Comparator<? extends T> comparator) {"
"CompoundComparator.java:114"$0$0$0$5$51$"		if (comparator instanceof InvertibleComparator) {"
"CompoundComparator.java:115"$0$0$0$3$66$"			this.comparators.set(index, (InvertibleComparator) comparator);"
"CompoundComparator.java:116"$0$0$0$1$3$"		}"
"CompoundComparator.java:117"$0$0$0$2$8$"		else {"
"CompoundComparator.java:118"$0$0$0$3$69$"			this.comparators.set(index, new InvertibleComparator(comparator));"
"CompoundComparator.java:119"$0$0$0$1$3$"		}"
"CompoundComparator.java:120"$0$0$0$1$2$"	}"
"CompoundComparator.java:121"$0$0$0$0$0$""
"CompoundComparator.java:122"$0$0$0$1$4$"	/**"
"CompoundComparator.java:123"$0$0$0$13$73$"	 * Replace the Comparator at the given index using the given sort order."
"CompoundComparator.java:124"$0$0$0$10$55$"	 * @param index the index of the Comparator to replace"
"CompoundComparator.java:125"$0$0$0$11$64$"	 * @param comparator the Comparator to place at the given index"
"CompoundComparator.java:126"$0$0$0$11$75$"	 * @param ascending the sort order: ascending (true) or descending (false)"
"CompoundComparator.java:127"$0$0$0$1$4$"	 */"
"CompoundComparator.java:128"$0$0$0$9$84$"	public void setComparator(int index, Comparator<T> comparator, boolean ascending) {"
"CompoundComparator.java:129"$0$0$0$4$81$"		this.comparators.set(index, new InvertibleComparator<>(comparator, ascending));"
"CompoundComparator.java:130"$0$0$0$1$2$"	}"
"CompoundComparator.java:131"$0$0$0$0$0$""
"CompoundComparator.java:132"$0$0$0$1$4$"	/**"
"CompoundComparator.java:133"$0$0$0$13$76$"	 * Invert the sort order of each sort definition contained by this compound"
"CompoundComparator.java:134"$0$0$0$2$15$"	 * comparator."
"CompoundComparator.java:135"$0$0$0$1$4$"	 */"
"CompoundComparator.java:136"$0$0$0$4$28$"	public void invertOrder() {"
"CompoundComparator.java:137"$0$0$0$6$60$"		for (InvertibleComparator comparator : this.comparators) {"
"CompoundComparator.java:138"$0$0$0$1$28$"			comparator.invertOrder();"
"CompoundComparator.java:139"$0$0$0$1$3$"		}"
"CompoundComparator.java:140"$0$0$0$1$2$"	}"
"CompoundComparator.java:141"$0$0$0$0$0$""
"CompoundComparator.java:142"$0$0$0$1$4$"	/**"
"CompoundComparator.java:143"$0$0$0$13$72$"	 * Invert the sort order of the sort definition at the specified index."
"CompoundComparator.java:144"$0$0$0$10$54$"	 * @param index the index of the comparator to invert"
"CompoundComparator.java:145"$0$0$0$1$4$"	 */"
"CompoundComparator.java:146"$0$0$0$5$37$"	public void invertOrder(int index) {"
"CompoundComparator.java:147"$1$0$0$1$44$"		this.comparators.get(index).invertOrder();"
"CompoundComparator.java:148"$0$0$0$1$2$"	}"
"CompoundComparator.java:149"$0$0$0$0$0$""
"CompoundComparator.java:150"$0$0$0$1$4$"	/**"
"CompoundComparator.java:151"$0$0$0$11$58$"	 * Change the sort order at the given index to ascending."
"CompoundComparator.java:152"$0$0$0$10$54$"	 * @param index the index of the comparator to change"
"CompoundComparator.java:153"$0$0$0$1$4$"	 */"
"CompoundComparator.java:154"$0$0$0$5$43$"	public void setAscendingOrder(int index) {"
"CompoundComparator.java:155"$1$0$0$1$49$"		this.comparators.get(index).setAscending(true);"
"CompoundComparator.java:156"$0$0$0$1$2$"	}"
"CompoundComparator.java:157"$0$0$0$0$0$""
"CompoundComparator.java:158"$0$0$0$1$4$"	/**"
"CompoundComparator.java:159"$0$0$0$12$64$"	 * Change the sort order at the given index to descending sort."
"CompoundComparator.java:160"$0$0$0$10$54$"	 * @param index the index of the comparator to change"
"CompoundComparator.java:161"$0$0$0$1$4$"	 */"
"CompoundComparator.java:162"$0$0$0$5$44$"	public void setDescendingOrder(int index) {"
"CompoundComparator.java:163"$1$0$0$1$50$"		this.comparators.get(index).setAscending(false);"
"CompoundComparator.java:164"$0$0$0$1$2$"	}"
"CompoundComparator.java:165"$0$0$0$0$0$""
"CompoundComparator.java:166"$0$0$0$1$4$"	/**"
"CompoundComparator.java:167"$0$0$0$7$49$"	 * Returns the number of aggregated comparators."
"CompoundComparator.java:168"$0$0$0$1$4$"	 */"
"CompoundComparator.java:169"$1$0$0$4$34$"	public int getComparatorCount() {"
"CompoundComparator.java:170"$0$0$0$2$33$"		return this.comparators.size();"
"CompoundComparator.java:171"$0$0$0$1$2$"	}"
"CompoundComparator.java:172"$0$0$0$0$0$""
"CompoundComparator.java:173"$0$0$0$0$0$""
"CompoundComparator.java:174"$0$0$0$1$10$"	@Override"
"CompoundComparator.java:175"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CompoundComparator.java:176"$0$0$0$7$33$"	public int compare(T o1, T o2) {"
"CompoundComparator.java:177"$0$0$0$1$43$"		Assert.state(!this.comparators.isEmpty(),"
"CompoundComparator.java:178"$0$0$0$11$81$"				""No sort definitions have been added to this CompoundComparator to compare"");"
"CompoundComparator.java:179"$0$0$0$6$60$"		for (InvertibleComparator comparator : this.comparators) {"
"CompoundComparator.java:180"$0$0$0$5$43$"			int result = comparator.compare(o1, o2);"
"CompoundComparator.java:181"$0$0$0$5$21$"			if (result != 0) {"
"CompoundComparator.java:182"$0$0$0$2$18$"				return result;"
"CompoundComparator.java:183"$0$0$0$1$4$"			}"
"CompoundComparator.java:184"$0$0$0$1$3$"		}"
"CompoundComparator.java:185"$0$0$0$2$11$"		return 0;"
"CompoundComparator.java:186"$0$0$0$1$2$"	}"
"CompoundComparator.java:187"$0$0$0$0$0$""
"CompoundComparator.java:188"$0$0$0$0$0$""
"CompoundComparator.java:189"$0$0$0$1$10$"	@Override"
"CompoundComparator.java:190"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"CompoundComparator.java:191"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"CompoundComparator.java:192"$0$0$0$9$66$"		return (this == other || (other instanceof CompoundComparator &&"
"CompoundComparator.java:193"$0$0$0$2$75$"				this.comparators.equals(((CompoundComparator<T>) other).comparators)));"
"CompoundComparator.java:194"$0$0$0$1$2$"	}"
"CompoundComparator.java:195"$0$0$0$0$0$""
"CompoundComparator.java:196"$0$0$0$1$10$"	@Override"
"CompoundComparator.java:197"$0$0$0$4$24$"	public int hashCode() {"
"CompoundComparator.java:198"$0$0$0$2$37$"		return this.comparators.hashCode();"
"CompoundComparator.java:199"$0$0$0$1$2$"	}"
"CompoundComparator.java:200"$0$0$0$0$0$""
"CompoundComparator.java:201"$0$0$0$1$10$"	@Override"
"CompoundComparator.java:202"$0$0$0$4$27$"	public String toString() {"
"CompoundComparator.java:203"$0$0$0$5$51$"		return ""CompoundComparator: "" + this.comparators;"
"CompoundComparator.java:204"$0$0$0$1$2$"	}"
"CompoundComparator.java:205"$0$0$0$0$0$""
"CompoundComparator.java:206"$0$0$0$1$1$"}"
"GenericTypeResolver.java:1"$0$0$0$1$2$"/*"
"GenericTypeResolver.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"GenericTypeResolver.java:3"$0$0$0$1$2$" *"
"GenericTypeResolver.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"GenericTypeResolver.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"GenericTypeResolver.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"GenericTypeResolver.java:7"$0$0$0$1$2$" *"
"GenericTypeResolver.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"GenericTypeResolver.java:9"$0$0$0$1$2$" *"
"GenericTypeResolver.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"GenericTypeResolver.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"GenericTypeResolver.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"GenericTypeResolver.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"GenericTypeResolver.java:14"$0$0$0$5$33$" * limitations under the License."
"GenericTypeResolver.java:15"$0$0$0$1$3$" */"
"GenericTypeResolver.java:16"$0$0$0$0$0$""
"GenericTypeResolver.java:17"$0$0$0$2$33$"package org.springframework.core;"
"GenericTypeResolver.java:18"$0$0$0$0$0$""
"GenericTypeResolver.java:19"$0$0$0$2$32$"import java.lang.reflect.Method;"
"GenericTypeResolver.java:20"$0$0$0$2$43$"import java.lang.reflect.ParameterizedType;"
"GenericTypeResolver.java:21"$0$0$0$2$30$"import java.lang.reflect.Type;"
"GenericTypeResolver.java:22"$0$0$0$2$38$"import java.lang.reflect.TypeVariable;"
"GenericTypeResolver.java:23"$0$0$0$2$38$"import java.lang.reflect.WildcardType;"
"GenericTypeResolver.java:24"$0$0$0$2$29$"import java.util.Collections;"
"GenericTypeResolver.java:25"$0$0$0$2$25$"import java.util.HashMap;"
"GenericTypeResolver.java:26"$0$0$0$2$21$"import java.util.Map;"
"GenericTypeResolver.java:27"$0$0$0$0$0$""
"GenericTypeResolver.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"GenericTypeResolver.java:29"$0$0$0$2$39$"import org.springframework.util.Assert;"
"GenericTypeResolver.java:30"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"GenericTypeResolver.java:31"$0$0$0$0$0$""
"GenericTypeResolver.java:32"$0$0$0$1$3$"/**"
"GenericTypeResolver.java:33"$0$0$0$10$67$" * Helper class for resolving generic types against type variables."
"GenericTypeResolver.java:34"$0$0$0$1$2$" *"
"GenericTypeResolver.java:35"$0$0$0$10$70$" * <p>Mainly intended for usage within the framework, resolving method"
"GenericTypeResolver.java:36"$0$0$0$9$59$" * parameter types even when they are declared generically."
"GenericTypeResolver.java:37"$0$0$0$1$2$" *"
"GenericTypeResolver.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"GenericTypeResolver.java:39"$0$0$0$4$21$" * @author Rob Harrop"
"GenericTypeResolver.java:40"$0$0$0$4$22$" * @author Sam Brannen"
"GenericTypeResolver.java:41"$0$0$0$4$23$" * @author Phillip Webb"
"GenericTypeResolver.java:42"$0$0$0$3$15$" * @since 2.5.2"
"GenericTypeResolver.java:43"$0$0$0$1$3$" */"
"GenericTypeResolver.java:44"$0$0$0$5$40$"public final class GenericTypeResolver {"
"GenericTypeResolver.java:45"$0$0$0$0$0$""
"GenericTypeResolver.java:46"$0$0$0$8$45$"	/** Cache from Class to TypeVariable Map. */"
"GenericTypeResolver.java:47"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"GenericTypeResolver.java:48"$0$0$0$10$116$"	private static final Map<Class<?>, Map<TypeVariable, Type>> typeVariableCache = new ConcurrentReferenceHashMap<>();"
"GenericTypeResolver.java:49"$0$0$0$0$0$""
"GenericTypeResolver.java:50"$0$0$0$0$0$""
"GenericTypeResolver.java:51"$0$0$0$3$32$"	private GenericTypeResolver() {"
"GenericTypeResolver.java:52"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:53"$0$0$0$0$0$""
"GenericTypeResolver.java:54"$0$0$0$0$0$""
"GenericTypeResolver.java:55"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:56"$1$0$0$11$67$"	 * Determine the target type for the given generic parameter type."
"GenericTypeResolver.java:57"$0$0$0$7$61$"	 * @param methodParameter the method parameter specification"
"GenericTypeResolver.java:58"$0$0$0$10$74$"	 * @param implementationClass the class to resolve type variables against"
"GenericTypeResolver.java:59"$0$0$0$9$62$"	 * @return the corresponding generic parameter or return type"
"GenericTypeResolver.java:60"$1$0$0$9$121$"	 * @deprecated since 5.2 in favor of {@code methodParameter.withContainingClass(implementationClass).getParameterType()}"
"GenericTypeResolver.java:61"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:62"$0$0$0$1$12$"	@Deprecated"
"GenericTypeResolver.java:63"$0$0$0$8$109$"	public static Class<?> resolveParameterType(MethodParameter methodParameter, Class<?> implementationClass) {"
"GenericTypeResolver.java:64"$0$0$0$6$70$"		Assert.notNull(methodParameter, ""MethodParameter must not be null"");"
"GenericTypeResolver.java:65"$0$0$0$6$64$"		Assert.notNull(implementationClass, ""Class must not be null"");"
"GenericTypeResolver.java:66"$0$0$0$1$58$"		methodParameter.setContainingClass(implementationClass);"
"GenericTypeResolver.java:67"$1$0$0$2$44$"		return methodParameter.getParameterType();"
"GenericTypeResolver.java:68"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:69"$0$0$0$0$0$""
"GenericTypeResolver.java:70"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:71"$1$0$0$14$78$"	 * Determine the target type for the generic return type of the given method,"
"GenericTypeResolver.java:72"$0$0$0$11$64$"	 * where formal type variables are declared on the given class."
"GenericTypeResolver.java:73"$0$0$0$7$42$"	 * @param method the method to introspect"
"GenericTypeResolver.java:74"$0$0$0$10$60$"	 * @param clazz the class to resolve type variables against"
"GenericTypeResolver.java:75"$0$0$0$9$62$"	 * @return the corresponding generic parameter or return type"
"GenericTypeResolver.java:76"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:77"$0$0$0$8$74$"	public static Class<?> resolveReturnType(Method method, Class<?> clazz) {"
"GenericTypeResolver.java:78"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"GenericTypeResolver.java:79"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"GenericTypeResolver.java:80"$1$0$0$3$91$"		return ResolvableType.forMethodReturnType(method, clazz).resolve(method.getReturnType());"
"GenericTypeResolver.java:81"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:82"$0$0$0$0$0$""
"GenericTypeResolver.java:83"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:84"$0$0$0$14$85$"	 * Resolve the single type argument of the given generic interface against the given"
"GenericTypeResolver.java:85"$1$0$0$14$85$"	 * target method which is assumed to return the given interface or an implementation"
"GenericTypeResolver.java:86"$0$0$0$3$10$"	 * of it."
"GenericTypeResolver.java:87"$1$0$0$12$63$"	 * @param method the target method to check the return type of"
"GenericTypeResolver.java:88"$0$0$0$14$91$"	 * @param genericIfc the generic interface or superclass to resolve the type argument from"
"GenericTypeResolver.java:89"$0$0$0$14$82$"	 * @return the resolved parameter type of the method return type, or {@code null}"
"GenericTypeResolver.java:90"$0$0$0$14$80$"	 * if not resolvable or if the single argument is of type {@link WildcardType}."
"GenericTypeResolver.java:91"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:92"$0$0$0$1$10$"	@Nullable"
"GenericTypeResolver.java:93"$0$0$0$8$87$"	public static Class<?> resolveReturnTypeArgument(Method method, Class<?> genericIfc) {"
"GenericTypeResolver.java:94"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"GenericTypeResolver.java:95"$0$0$0$4$92$"		ResolvableType resolvableType = ResolvableType.forMethodReturnType(method).as(genericIfc);"
"GenericTypeResolver.java:96"$1$0$0$7$90$"		if (!resolvableType.hasGenerics() || resolvableType.getType() instanceof WildcardType) {"
"GenericTypeResolver.java:97"$0$0$0$2$15$"			return null;"
"GenericTypeResolver.java:98"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:99"$1$0$0$2$42$"		return getSingleGeneric(resolvableType);"
"GenericTypeResolver.java:100"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:101"$0$0$0$0$0$""
"GenericTypeResolver.java:102"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:103"$0$0$0$12$75$"	 * Resolve the single type argument of the given generic interface against"
"GenericTypeResolver.java:104"$1$0$0$13$78$"	 * the given target class which is assumed to implement the generic interface"
"GenericTypeResolver.java:105"$0$0$0$11$63$"	 * and possibly declare a concrete type for its type variable."
"GenericTypeResolver.java:106"$1$0$0$9$50$"	 * @param clazz the target class to check against"
"GenericTypeResolver.java:107"$0$0$0$14$91$"	 * @param genericIfc the generic interface or superclass to resolve the type argument from"
"GenericTypeResolver.java:108"$0$0$0$14$80$"	 * @return the resolved type of the argument, or {@code null} if not resolvable"
"GenericTypeResolver.java:109"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:110"$0$0$0$1$10$"	@Nullable"
"GenericTypeResolver.java:111"$0$0$0$8$82$"	public static Class<?> resolveTypeArgument(Class<?> clazz, Class<?> genericIfc) {"
"GenericTypeResolver.java:112"$0$0$0$4$80$"		ResolvableType resolvableType = ResolvableType.forClass(clazz).as(genericIfc);"
"GenericTypeResolver.java:113"$0$0$0$3$38$"		if (!resolvableType.hasGenerics()) {"
"GenericTypeResolver.java:114"$0$0$0$2$15$"			return null;"
"GenericTypeResolver.java:115"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:116"$1$0$0$2$42$"		return getSingleGeneric(resolvableType);"
"GenericTypeResolver.java:117"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:118"$0$0$0$0$0$""
"GenericTypeResolver.java:119"$0$0$0$1$10$"	@Nullable"
"GenericTypeResolver.java:120"$1$0$0$6$74$"	private static Class<?> getSingleGeneric(ResolvableType resolvableType) {"
"GenericTypeResolver.java:121"$1$0$0$3$57$"		Assert.isTrue(resolvableType.getGenerics().length == 1,"
"GenericTypeResolver.java:122"$0$0$0$13$78$"				() -> ""Expected 1 type argument on generic interface ["" + resolvableType +"
"GenericTypeResolver.java:123"$1$0$0$6$58$"				""] but found "" + resolvableType.getGenerics().length);"
"GenericTypeResolver.java:124"$1$0$0$2$47$"		return resolvableType.getGeneric().resolve();"
"GenericTypeResolver.java:125"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:126"$0$0$0$0$0$""
"GenericTypeResolver.java:127"$0$0$0$0$0$""
"GenericTypeResolver.java:128"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:129"$0$0$0$13$79$"	 * Resolve the type arguments of the given generic interface against the given"
"GenericTypeResolver.java:130"$1$0$0$13$81$"	 * target class which is assumed to implement the generic interface and possibly"
"GenericTypeResolver.java:131"$0$0$0$8$50$"	 * declare concrete types for its type variables."
"GenericTypeResolver.java:132"$1$0$0$9$50$"	 * @param clazz the target class to check against"
"GenericTypeResolver.java:133"$0$0$0$14$91$"	 * @param genericIfc the generic interface or superclass to resolve the type argument from"
"GenericTypeResolver.java:134"$0$0$0$14$80$"	 * @return the resolved type of each argument, with the array size matching the"
"GenericTypeResolver.java:135"$0$0$0$12$70$"	 * number of actual type arguments, or {@code null} if not resolvable"
"GenericTypeResolver.java:136"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:137"$0$0$0$1$10$"	@Nullable"
"GenericTypeResolver.java:138"$0$0$0$8$85$"	public static Class<?>[] resolveTypeArguments(Class<?> clazz, Class<?> genericIfc) {"
"GenericTypeResolver.java:139"$0$0$0$4$70$"		ResolvableType type = ResolvableType.forClass(clazz).as(genericIfc);"
"GenericTypeResolver.java:140"$0$0$0$5$61$"		if (!type.hasGenerics() || type.isEntirelyUnresolvable()) {"
"GenericTypeResolver.java:141"$0$0$0$2$15$"			return null;"
"GenericTypeResolver.java:142"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:143"$0$0$0$2$44$"		return type.resolveGenerics(Object.class);"
"GenericTypeResolver.java:144"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:145"$0$0$0$0$0$""
"GenericTypeResolver.java:146"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:147"$0$0$0$11$67$"	 * Resolve the given generic type against the given context class,"
"GenericTypeResolver.java:148"$0$0$0$8$51$"	 * substituting type variables as far as possible."
"GenericTypeResolver.java:149"$0$0$0$7$53$"	 * @param genericType the (potentially) generic type"
"GenericTypeResolver.java:150"$1$0$0$14$80$"	 * @param contextClass a context class for the target type, for example a class"
"GenericTypeResolver.java:151"$1$0$0$15$80$"	 * in which the target type appears in a method signature (can be {@code null})"
"GenericTypeResolver.java:152"$0$0$0$11$69$"	 * @return the resolved type (possibly the given generic type as-is)"
"GenericTypeResolver.java:153"$0$0$0$3$14$"	 * @since 5.0"
"GenericTypeResolver.java:154"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:155"$0$0$0$9$84$"	public static Type resolveType(Type genericType, @Nullable Class<?> contextClass) {"
"GenericTypeResolver.java:156"$0$0$0$5$29$"		if (contextClass != null) {"
"GenericTypeResolver.java:157"$0$0$0$5$45$"			if (genericType instanceof TypeVariable) {"
"GenericTypeResolver.java:158"$0$0$0$4$58$"				ResolvableType resolvedTypeVariable = resolveVariable("
"GenericTypeResolver.java:159"$0$0$0$3$76$"						(TypeVariable<?>) genericType, ResolvableType.forClass(contextClass));"
"GenericTypeResolver.java:160"$0$0$0$5$54$"				if (resolvedTypeVariable != ResolvableType.NONE) {"
"GenericTypeResolver.java:161"$0$0$0$4$56$"					Class<?> resolved = resolvedTypeVariable.resolve();"
"GenericTypeResolver.java:162"$0$0$0$5$28$"					if (resolved != null) {"
"GenericTypeResolver.java:163"$0$0$0$2$22$"						return resolved;"
"GenericTypeResolver.java:164"$0$0$0$1$6$"					}"
"GenericTypeResolver.java:165"$0$0$0$1$5$"				}"
"GenericTypeResolver.java:166"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:167"$0$0$0$6$55$"			else if (genericType instanceof ParameterizedType) {"
"GenericTypeResolver.java:168"$0$0$0$4$70$"				ResolvableType resolvedType = ResolvableType.forType(genericType);"
"GenericTypeResolver.java:169"$0$0$0$3$49$"				if (resolvedType.hasUnresolvableGenerics()) {"
"GenericTypeResolver.java:170"$0$0$0$5$75$"					ParameterizedType parameterizedType = (ParameterizedType) genericType;"
"GenericTypeResolver.java:171"$1$0$0$5$91$"					Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length];"
"GenericTypeResolver.java:172"$1$0$0$4$71$"					Type[] typeArguments = parameterizedType.getActualTypeArguments();"
"GenericTypeResolver.java:173"$0$0$0$4$72$"					ResolvableType contextType = ResolvableType.forClass(contextClass);"
"GenericTypeResolver.java:174"$0$0$0$10$53$"					for (int i = 0; i < typeArguments.length; i++) {"
"GenericTypeResolver.java:175"$0$0$0$4$43$"						Type typeArgument = typeArguments[i];"
"GenericTypeResolver.java:176"$0$0$0$5$49$"						if (typeArgument instanceof TypeVariable) {"
"GenericTypeResolver.java:177"$0$0$0$4$61$"							ResolvableType resolvedTypeArgument = resolveVariable("
"GenericTypeResolver.java:178"$0$0$0$3$54$"									(TypeVariable<?>) typeArgument, contextType);"
"GenericTypeResolver.java:179"$0$0$0$5$57$"							if (resolvedTypeArgument != ResolvableType.NONE) {"
"GenericTypeResolver.java:180"$0$0$0$3$53$"								generics[i] = resolvedTypeArgument.resolve();"
"GenericTypeResolver.java:181"$0$0$0$1$8$"							}"
"GenericTypeResolver.java:182"$0$0$0$2$13$"							else {"
"GenericTypeResolver.java:183"$0$0$0$3$69$"								generics[i] = ResolvableType.forType(typeArgument).resolve();"
"GenericTypeResolver.java:184"$0$0$0$1$8$"							}"
"GenericTypeResolver.java:185"$0$0$0$1$7$"						}"
"GenericTypeResolver.java:186"$0$0$0$2$12$"						else {"
"GenericTypeResolver.java:187"$0$0$0$3$68$"							generics[i] = ResolvableType.forType(typeArgument).resolve();"
"GenericTypeResolver.java:188"$0$0$0$1$7$"						}"
"GenericTypeResolver.java:189"$0$0$0$1$6$"					}"
"GenericTypeResolver.java:190"$1$0$0$4$52$"					Class<?> rawClass = resolvedType.getRawClass();"
"GenericTypeResolver.java:191"$0$0$0$5$28$"					if (rawClass != null) {"
"GenericTypeResolver.java:192"$1$0$0$3$79$"						return ResolvableType.forClassWithGenerics(rawClass, generics).getType();"
"GenericTypeResolver.java:193"$0$0$0$1$6$"					}"
"GenericTypeResolver.java:194"$0$0$0$1$5$"				}"
"GenericTypeResolver.java:195"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:196"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:197"$0$0$0$2$21$"		return genericType;"
"GenericTypeResolver.java:198"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:199"$0$0$0$0$0$""
"GenericTypeResolver.java:200"$0$0$0$8$106$"	private static ResolvableType resolveVariable(TypeVariable<?> typeVariable, ResolvableType contextType) {"
"GenericTypeResolver.java:201"$0$0$0$2$30$"		ResolvableType resolvedType;"
"GenericTypeResolver.java:202"$0$0$0$3$34$"		if (contextType.hasGenerics()) {"
"GenericTypeResolver.java:203"$0$0$0$4$68$"			resolvedType = ResolvableType.forType(typeVariable, contextType);"
"GenericTypeResolver.java:204"$0$0$0$5$40$"			if (resolvedType.resolve() != null) {"
"GenericTypeResolver.java:205"$0$0$0$2$24$"				return resolvedType;"
"GenericTypeResolver.java:206"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:207"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:208"$0$0$0$0$0$""
"GenericTypeResolver.java:209"$1$0$0$4$56$"		ResolvableType superType = contextType.getSuperType();"
"GenericTypeResolver.java:210"$0$0$0$5$41$"		if (superType != ResolvableType.NONE) {"
"GenericTypeResolver.java:211"$0$0$0$4$59$"			resolvedType = resolveVariable(typeVariable, superType);"
"GenericTypeResolver.java:212"$0$0$0$5$40$"			if (resolvedType.resolve() != null) {"
"GenericTypeResolver.java:213"$0$0$0$2$24$"				return resolvedType;"
"GenericTypeResolver.java:214"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:215"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:216"$1$0$0$6$58$"		for (ResolvableType ifc : contextType.getInterfaces()) {"
"GenericTypeResolver.java:217"$0$0$0$4$53$"			resolvedType = resolveVariable(typeVariable, ifc);"
"GenericTypeResolver.java:218"$0$0$0$5$40$"			if (resolvedType.resolve() != null) {"
"GenericTypeResolver.java:219"$0$0$0$2$24$"				return resolvedType;"
"GenericTypeResolver.java:220"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:221"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:222"$0$0$0$2$29$"		return ResolvableType.NONE;"
"GenericTypeResolver.java:223"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:224"$0$0$0$0$0$""
"GenericTypeResolver.java:225"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:226"$0$0$0$11$74$"	 * Resolve the specified generic type against the given TypeVariable map."
"GenericTypeResolver.java:227"$0$0$0$5$27$"	 * <p>Used by Spring Data."
"GenericTypeResolver.java:228"$0$0$0$8$50$"	 * @param genericType the generic type to resolve"
"GenericTypeResolver.java:229"$0$0$0$9$55$"	 * @param map the TypeVariable Map to resolved against"
"GenericTypeResolver.java:230"$0$0$0$14$81$"	 * @return the type if it resolves to a Class, or {@code Object.class} otherwise"
"GenericTypeResolver.java:231"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:232"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"GenericTypeResolver.java:233"$0$0$0$9$84$"	public static Class<?> resolveType(Type genericType, Map<TypeVariable, Type> map) {"
"GenericTypeResolver.java:234"$0$0$0$4$97$"		return ResolvableType.forType(genericType, new TypeVariableMapVariableResolver(map)).toClass();"
"GenericTypeResolver.java:235"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:236"$0$0$0$0$0$""
"GenericTypeResolver.java:237"$0$0$0$1$4$"	/**"
"GenericTypeResolver.java:238"$1$0$0$10$73$"	 * Build a mapping of {@link TypeVariable#getName TypeVariable names} to"
"GenericTypeResolver.java:239"$0$0$0$10$67$"	 * {@link Class concrete classes} for the specified {@link Class}."
"GenericTypeResolver.java:240"$0$0$0$9$61$"	 * Searches all super types, enclosing types and interfaces."
"GenericTypeResolver.java:241"$0$0$0$4$32$"	 * @see #resolveType(Type, Map)"
"GenericTypeResolver.java:242"$0$0$0$1$4$"	 */"
"GenericTypeResolver.java:243"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"GenericTypeResolver.java:244"$1$0$0$7$75$"	public static Map<TypeVariable, Type> getTypeVariableMap(Class<?> clazz) {"
"GenericTypeResolver.java:245"$1$0$0$5$73$"		Map<TypeVariable, Type> typeVariableMap = typeVariableCache.get(clazz);"
"GenericTypeResolver.java:246"$0$0$0$5$32$"		if (typeVariableMap == null) {"
"GenericTypeResolver.java:247"$0$0$0$4$37$"			typeVariableMap = new HashMap<>();"
"GenericTypeResolver.java:248"$0$0$0$2$73$"			buildTypeVariableMap(ResolvableType.forClass(clazz), typeVariableMap);"
"GenericTypeResolver.java:249"$0$0$0$2$78$"			typeVariableCache.put(clazz, Collections.unmodifiableMap(typeVariableMap));"
"GenericTypeResolver.java:250"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:251"$0$0$0$2$25$"		return typeVariableMap;"
"GenericTypeResolver.java:252"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:253"$0$0$0$0$0$""
"GenericTypeResolver.java:254"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"GenericTypeResolver.java:255"$0$0$0$9$105$"	private static void buildTypeVariableMap(ResolvableType type, Map<TypeVariable, Type> typeVariableMap) {"
"GenericTypeResolver.java:256"$0$0$0$5$36$"		if (type != ResolvableType.NONE) {"
"GenericTypeResolver.java:257"$0$0$0$4$38$"			Class<?> resolved = type.resolve();"
"GenericTypeResolver.java:258"$1$0$0$9$73$"			if (resolved != null && type.getType() instanceof ParameterizedType) {"
"GenericTypeResolver.java:259"$1$0$0$4$63$"				TypeVariable<?>[] variables = resolved.getTypeParameters();"
"GenericTypeResolver.java:260"$0$0$0$10$48$"				for (int i = 0; i < variables.length; i++) {"
"GenericTypeResolver.java:261"$1$0$0$4$49$"					ResolvableType generic = type.getGeneric(i);"
"GenericTypeResolver.java:262"$1$0$0$5$59$"					while (generic.getType() instanceof TypeVariable<?>) {"
"GenericTypeResolver.java:263"$0$0$0$3$38$"						generic = generic.resolveType();"
"GenericTypeResolver.java:264"$0$0$0$1$6$"					}"
"GenericTypeResolver.java:265"$0$0$0$5$42$"					if (generic != ResolvableType.NONE) {"
"GenericTypeResolver.java:266"$1$0$0$2$59$"						typeVariableMap.put(variables[i], generic.getType());"
"GenericTypeResolver.java:267"$0$0$0$1$6$"					}"
"GenericTypeResolver.java:268"$0$0$0$1$5$"				}"
"GenericTypeResolver.java:269"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:270"$1$0$0$2$62$"			buildTypeVariableMap(type.getSuperType(), typeVariableMap);"
"GenericTypeResolver.java:271"$1$0$0$6$62$"			for (ResolvableType interfaceType : type.getInterfaces()) {"
"GenericTypeResolver.java:272"$0$0$0$2$57$"				buildTypeVariableMap(interfaceType, typeVariableMap);"
"GenericTypeResolver.java:273"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:274"$0$0$0$7$54$"			if (resolved != null && resolved.isMemberClass()) {"
"GenericTypeResolver.java:275"$1$0$0$2$97$"				buildTypeVariableMap(ResolvableType.forClass(resolved.getEnclosingClass()), typeVariableMap);"
"GenericTypeResolver.java:276"$0$0$0$1$4$"			}"
"GenericTypeResolver.java:277"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:278"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:279"$0$0$0$0$0$""
"GenericTypeResolver.java:280"$0$0$0$0$0$""
"GenericTypeResolver.java:281"$0$0$0$2$42$"	@SuppressWarnings({""serial"", ""rawtypes""})"
"GenericTypeResolver.java:282"$0$0$0$7$98$"	private static class TypeVariableMapVariableResolver implements ResolvableType.VariableResolver {"
"GenericTypeResolver.java:283"$0$0$0$0$0$""
"GenericTypeResolver.java:284"$0$0$0$5$56$"		private final Map<TypeVariable, Type> typeVariableMap;"
"GenericTypeResolver.java:285"$0$0$0$0$0$""
"GenericTypeResolver.java:286"$0$0$0$5$83$"		public TypeVariableMapVariableResolver(Map<TypeVariable, Type> typeVariableMap) {"
"GenericTypeResolver.java:287"$0$0$0$3$42$"			this.typeVariableMap = typeVariableMap;"
"GenericTypeResolver.java:288"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:289"$0$0$0$0$0$""
"GenericTypeResolver.java:290"$0$0$0$1$11$"		@Override"
"GenericTypeResolver.java:291"$0$0$0$1$11$"		@Nullable"
"GenericTypeResolver.java:292"$0$0$0$5$67$"		public ResolvableType resolveVariable(TypeVariable<?> variable) {"
"GenericTypeResolver.java:293"$1$0$0$4$50$"			Type type = this.typeVariableMap.get(variable);"
"GenericTypeResolver.java:294"$0$0$0$8$63$"			return (type != null ? ResolvableType.forType(type) : null);"
"GenericTypeResolver.java:295"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:296"$0$0$0$0$0$""
"GenericTypeResolver.java:297"$0$0$0$1$11$"		@Override"
"GenericTypeResolver.java:298"$1$0$0$4$29$"		public Object getSource() {"
"GenericTypeResolver.java:299"$0$0$0$2$31$"			return this.typeVariableMap;"
"GenericTypeResolver.java:300"$0$0$0$1$3$"		}"
"GenericTypeResolver.java:301"$0$0$0$1$2$"	}"
"GenericTypeResolver.java:302"$0$0$0$0$0$""
"GenericTypeResolver.java:303"$0$0$0$1$1$"}"
"AttributeAccessorSupport.java:1"$0$0$0$1$2$"/*"
"AttributeAccessorSupport.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"AttributeAccessorSupport.java:3"$0$0$0$1$2$" *"
"AttributeAccessorSupport.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AttributeAccessorSupport.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AttributeAccessorSupport.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AttributeAccessorSupport.java:7"$0$0$0$1$2$" *"
"AttributeAccessorSupport.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AttributeAccessorSupport.java:9"$0$0$0$1$2$" *"
"AttributeAccessorSupport.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AttributeAccessorSupport.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AttributeAccessorSupport.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AttributeAccessorSupport.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AttributeAccessorSupport.java:14"$0$0$0$5$33$" * limitations under the License."
"AttributeAccessorSupport.java:15"$0$0$0$1$3$" */"
"AttributeAccessorSupport.java:16"$0$0$0$0$0$""
"AttributeAccessorSupport.java:17"$0$0$0$2$33$"package org.springframework.core;"
"AttributeAccessorSupport.java:18"$0$0$0$0$0$""
"AttributeAccessorSupport.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"AttributeAccessorSupport.java:20"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"AttributeAccessorSupport.java:21"$0$0$0$2$21$"import java.util.Map;"
"AttributeAccessorSupport.java:22"$0$0$0$0$0$""
"AttributeAccessorSupport.java:23"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AttributeAccessorSupport.java:24"$0$0$0$2$39$"import org.springframework.util.Assert;"
"AttributeAccessorSupport.java:25"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"AttributeAccessorSupport.java:26"$0$0$0$0$0$""
"AttributeAccessorSupport.java:27"$0$0$0$1$3$"/**"
"AttributeAccessorSupport.java:28"$0$0$0$8$76$" * Support class for {@link AttributeAccessor AttributeAccessors}, providing"
"AttributeAccessorSupport.java:29"$0$0$0$12$70$" * a base implementation of all methods. To be extended by subclasses."
"AttributeAccessorSupport.java:30"$0$0$0$1$2$" *"
"AttributeAccessorSupport.java:31"$0$0$0$12$91$" * <p>{@link Serializable} if subclasses and all attribute values are {@link Serializable}."
"AttributeAccessorSupport.java:32"$0$0$0$1$2$" *"
"AttributeAccessorSupport.java:33"$0$0$0$4$21$" * @author Rob Harrop"
"AttributeAccessorSupport.java:34"$0$0$0$4$26$" * @author Juergen Hoeller"
"AttributeAccessorSupport.java:35"$0$0$0$3$13$" * @since 2.0"
"AttributeAccessorSupport.java:36"$0$0$0$1$3$" */"
"AttributeAccessorSupport.java:37"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"AttributeAccessorSupport.java:38"$0$0$0$8$91$"public abstract class AttributeAccessorSupport implements AttributeAccessor, Serializable {"
"AttributeAccessorSupport.java:39"$0$0$0$0$0$""
"AttributeAccessorSupport.java:40"$0$0$0$9$47$"	/** Map with String keys and Object values. */"
"AttributeAccessorSupport.java:41"$0$0$0$8$70$"	private final Map<String, Object> attributes = new LinkedHashMap<>();"
"AttributeAccessorSupport.java:42"$0$0$0$0$0$""
"AttributeAccessorSupport.java:43"$0$0$0$0$0$""
"AttributeAccessorSupport.java:44"$0$0$0$1$10$"	@Override"
"AttributeAccessorSupport.java:45"$0$0$0$8$64$"	public void setAttribute(String name, @Nullable Object value) {"
"AttributeAccessorSupport.java:46"$0$0$0$6$48$"		Assert.notNull(name, ""Name must not be null"");"
"AttributeAccessorSupport.java:47"$0$0$0$5$22$"		if (value != null) {"
"AttributeAccessorSupport.java:48"$0$0$0$2$36$"			this.attributes.put(name, value);"
"AttributeAccessorSupport.java:49"$0$0$0$1$3$"		}"
"AttributeAccessorSupport.java:50"$0$0$0$2$8$"		else {"
"AttributeAccessorSupport.java:51"$0$0$0$1$25$"			removeAttribute(name);"
"AttributeAccessorSupport.java:52"$0$0$0$1$3$"		}"
"AttributeAccessorSupport.java:53"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:54"$0$0$0$0$0$""
"AttributeAccessorSupport.java:55"$0$0$0$1$10$"	@Override"
"AttributeAccessorSupport.java:56"$0$0$0$1$10$"	@Nullable"
"AttributeAccessorSupport.java:57"$1$0$0$5$42$"	public Object getAttribute(String name) {"
"AttributeAccessorSupport.java:58"$0$0$0$6$48$"		Assert.notNull(name, ""Name must not be null"");"
"AttributeAccessorSupport.java:59"$1$0$0$2$35$"		return this.attributes.get(name);"
"AttributeAccessorSupport.java:60"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:61"$0$0$0$0$0$""
"AttributeAccessorSupport.java:62"$0$0$0$1$10$"	@Override"
"AttributeAccessorSupport.java:63"$0$0$0$1$10$"	@Nullable"
"AttributeAccessorSupport.java:64"$0$0$0$5$45$"	public Object removeAttribute(String name) {"
"AttributeAccessorSupport.java:65"$0$0$0$6$48$"		Assert.notNull(name, ""Name must not be null"");"
"AttributeAccessorSupport.java:66"$0$0$0$2$38$"		return this.attributes.remove(name);"
"AttributeAccessorSupport.java:67"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:68"$0$0$0$0$0$""
"AttributeAccessorSupport.java:69"$0$0$0$1$10$"	@Override"
"AttributeAccessorSupport.java:70"$0$0$0$5$43$"	public boolean hasAttribute(String name) {"
"AttributeAccessorSupport.java:71"$0$0$0$6$48$"		Assert.notNull(name, ""Name must not be null"");"
"AttributeAccessorSupport.java:72"$0$0$0$2$43$"		return this.attributes.containsKey(name);"
"AttributeAccessorSupport.java:73"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:74"$0$0$0$0$0$""
"AttributeAccessorSupport.java:75"$0$0$0$1$10$"	@Override"
"AttributeAccessorSupport.java:76"$0$0$0$4$35$"	public String[] attributeNames() {"
"AttributeAccessorSupport.java:77"$0$0$0$2$61$"		return StringUtils.toStringArray(this.attributes.keySet());"
"AttributeAccessorSupport.java:78"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:79"$0$0$0$0$0$""
"AttributeAccessorSupport.java:80"$0$0$0$0$0$""
"AttributeAccessorSupport.java:81"$0$0$0$1$4$"	/**"
"AttributeAccessorSupport.java:82"$0$0$0$11$77$"	 * Copy the attributes from the supplied AttributeAccessor to this accessor."
"AttributeAccessorSupport.java:83"$0$0$0$8$52$"	 * @param source the AttributeAccessor to copy from"
"AttributeAccessorSupport.java:84"$0$0$0$1$4$"	 */"
"AttributeAccessorSupport.java:85"$0$0$0$5$62$"	protected void copyAttributesFrom(AttributeAccessor source) {"
"AttributeAccessorSupport.java:86"$0$0$0$6$52$"		Assert.notNull(source, ""Source must not be null"");"
"AttributeAccessorSupport.java:87"$0$0$0$4$52$"		String[] attributeNames = source.attributeNames();"
"AttributeAccessorSupport.java:88"$0$0$0$6$47$"		for (String attributeName : attributeNames) {"
"AttributeAccessorSupport.java:89"$1$0$0$2$67$"			setAttribute(attributeName, source.getAttribute(attributeName));"
"AttributeAccessorSupport.java:90"$0$0$0$1$3$"		}"
"AttributeAccessorSupport.java:91"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:92"$0$0$0$0$0$""
"AttributeAccessorSupport.java:93"$0$0$0$0$0$""
"AttributeAccessorSupport.java:94"$0$0$0$1$10$"	@Override"
"AttributeAccessorSupport.java:95"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"AttributeAccessorSupport.java:96"$0$0$0$9$72$"		return (this == other || (other instanceof AttributeAccessorSupport &&"
"AttributeAccessorSupport.java:97"$0$0$0$2$76$"				this.attributes.equals(((AttributeAccessorSupport) other).attributes)));"
"AttributeAccessorSupport.java:98"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:99"$0$0$0$0$0$""
"AttributeAccessorSupport.java:100"$0$0$0$1$10$"	@Override"
"AttributeAccessorSupport.java:101"$0$0$0$4$24$"	public int hashCode() {"
"AttributeAccessorSupport.java:102"$0$0$0$2$36$"		return this.attributes.hashCode();"
"AttributeAccessorSupport.java:103"$0$0$0$1$2$"	}"
"AttributeAccessorSupport.java:104"$0$0$0$0$0$""
"AttributeAccessorSupport.java:105"$0$0$0$1$1$"}"
"PathResource.java:1"$0$0$0$1$2$"/*"
"PathResource.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"PathResource.java:3"$0$0$0$1$2$" *"
"PathResource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PathResource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PathResource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PathResource.java:7"$0$0$0$1$2$" *"
"PathResource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PathResource.java:9"$0$0$0$1$2$" *"
"PathResource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PathResource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PathResource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PathResource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PathResource.java:14"$0$0$0$5$33$" * limitations under the License."
"PathResource.java:15"$0$0$0$1$3$" */"
"PathResource.java:16"$0$0$0$0$0$""
"PathResource.java:17"$0$0$0$2$36$"package org.springframework.core.io;"
"PathResource.java:18"$0$0$0$0$0$""
"PathResource.java:19"$0$0$0$2$20$"import java.io.File;"
"PathResource.java:20"$0$0$0$2$37$"import java.io.FileNotFoundException;"
"PathResource.java:21"$0$0$0$2$27$"import java.io.IOException;"
"PathResource.java:22"$0$0$0$2$27$"import java.io.InputStream;"
"PathResource.java:23"$0$0$0$2$28$"import java.io.OutputStream;"
"PathResource.java:24"$0$0$0$2$20$"import java.net.URI;"
"PathResource.java:25"$0$0$0$2$20$"import java.net.URL;"
"PathResource.java:26"$0$0$0$2$45$"import java.nio.channels.ReadableByteChannel;"
"PathResource.java:27"$0$0$0$2$45$"import java.nio.channels.WritableByteChannel;"
"PathResource.java:28"$0$0$0$2$27$"import java.nio.file.Files;"
"PathResource.java:29"$0$0$0$2$41$"import java.nio.file.NoSuchFileException;"
"PathResource.java:30"$0$0$0$2$32$"import java.nio.file.OpenOption;"
"PathResource.java:31"$0$0$0$2$26$"import java.nio.file.Path;"
"PathResource.java:32"$0$0$0$2$27$"import java.nio.file.Paths;"
"PathResource.java:33"$0$0$0$2$40$"import java.nio.file.StandardOpenOption;"
"PathResource.java:34"$0$0$0$0$0$""
"PathResource.java:35"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PathResource.java:36"$0$0$0$2$39$"import org.springframework.util.Assert;"
"PathResource.java:37"$0$0$0$0$0$""
"PathResource.java:38"$0$0$0$1$3$"/**"
"PathResource.java:39"$0$0$0$8$74$" * {@link Resource} implementation for {@link java.nio.file.Path} handles,"
"PathResource.java:40"$0$0$0$11$74$" * performing all operations and transformations via the {@code Path} API."
"PathResource.java:41"$0$0$0$13$67$" * Supports resolution as a {@link File} and also as a {@link URL}."
"PathResource.java:42"$0$0$0$7$62$" * Implements the extended {@link WritableResource} interface."
"PathResource.java:43"$0$0$0$1$2$" *"
"PathResource.java:44"$0$0$0$11$75$" * <p>Note: As of 5.1, {@link java.nio.file.Path} support is also available"
"PathResource.java:45"$0$0$0$5$77$" * in {@link FileSystemResource#FileSystemResource(Path) FileSystemResource},"
"PathResource.java:46"$0$0$0$8$67$" * applying Spring's standard String-based path transformations but"
"PathResource.java:47"$0$0$0$9$69$" * performing all operations via the {@link java.nio.file.Files} API."
"PathResource.java:48"$0$0$0$10$77$" * This {@code PathResource} is effectively a pure {@code java.nio.path.Path}"
"PathResource.java:49"$0$0$0$8$68$" * based alternative with different {@code createRelative} behavior."
"PathResource.java:50"$0$0$0$1$2$" *"
"PathResource.java:51"$0$0$0$4$29$" * @author Philippe Marschall"
"PathResource.java:52"$0$0$0$4$26$" * @author Juergen Hoeller"
"PathResource.java:53"$0$0$0$3$13$" * @since 4.0"
"PathResource.java:54"$0$0$0$3$26$" * @see java.nio.file.Path"
"PathResource.java:55"$0$0$0$3$27$" * @see java.nio.file.Files"
"PathResource.java:56"$0$0$0$3$26$" * @see FileSystemResource"
"PathResource.java:57"$0$0$0$1$3$" */"
"PathResource.java:58"$0$0$0$8$80$"public class PathResource extends AbstractResource implements WritableResource {"
"PathResource.java:59"$0$0$0$0$0$""
"PathResource.java:60"$0$0$0$4$25$"	private final Path path;"
"PathResource.java:61"$0$0$0$0$0$""
"PathResource.java:62"$0$0$0$0$0$""
"PathResource.java:63"$0$0$0$1$4$"	/**"
"PathResource.java:64"$0$0$0$9$49$"	 * Create a new PathResource from a Path handle."
"PathResource.java:65"$0$0$0$9$80$"	 * <p>Note: Unlike {@link FileSystemResource}, when building relative resources"
"PathResource.java:66"$0$0$0$11$82$"	 * via {@link #createRelative}, the relative path will be built <i>underneath</i>"
"PathResource.java:67"$1$0$0$11$87$"	 * the given root: e.g. Paths.get(""C:/dir1/""), relative path ""dir2"" -> ""C:/dir1/dir2""!"
"PathResource.java:68"$0$0$0$6$29$"	 * @param path a Path handle"
"PathResource.java:69"$0$0$0$1$4$"	 */"
"PathResource.java:70"$0$0$0$4$33$"	public PathResource(Path path) {"
"PathResource.java:71"$0$0$0$6$48$"		Assert.notNull(path, ""Path must not be null"");"
"PathResource.java:72"$0$0$0$3$31$"		this.path = path.normalize();"
"PathResource.java:73"$0$0$0$1$2$"	}"
"PathResource.java:74"$0$0$0$0$0$""
"PathResource.java:75"$0$0$0$1$4$"	/**"
"PathResource.java:76"$0$0$0$9$49$"	 * Create a new PathResource from a Path handle."
"PathResource.java:77"$0$0$0$9$80$"	 * <p>Note: Unlike {@link FileSystemResource}, when building relative resources"
"PathResource.java:78"$0$0$0$11$82$"	 * via {@link #createRelative}, the relative path will be built <i>underneath</i>"
"PathResource.java:79"$1$0$0$11$87$"	 * the given root: e.g. Paths.get(""C:/dir1/""), relative path ""dir2"" -> ""C:/dir1/dir2""!"
"PathResource.java:80"$0$0$0$5$22$"	 * @param path a path"
"PathResource.java:81"$1$0$0$4$51$"	 * @see java.nio.file.Paths#get(String, String...)"
"PathResource.java:82"$0$0$0$1$4$"	 */"
"PathResource.java:83"$0$0$0$4$35$"	public PathResource(String path) {"
"PathResource.java:84"$0$0$0$6$48$"		Assert.notNull(path, ""Path must not be null"");"
"PathResource.java:85"$1$0$0$3$42$"		this.path = Paths.get(path).normalize();"
"PathResource.java:86"$0$0$0$1$2$"	}"
"PathResource.java:87"$0$0$0$0$0$""
"PathResource.java:88"$0$0$0$1$4$"	/**"
"PathResource.java:89"$0$0$0$9$49$"	 * Create a new PathResource from a Path handle."
"PathResource.java:90"$0$0$0$9$80$"	 * <p>Note: Unlike {@link FileSystemResource}, when building relative resources"
"PathResource.java:91"$0$0$0$11$82$"	 * via {@link #createRelative}, the relative path will be built <i>underneath</i>"
"PathResource.java:92"$1$0$0$11$87$"	 * the given root: e.g. Paths.get(""C:/dir1/""), relative path ""dir2"" -> ""C:/dir1/dir2""!"
"PathResource.java:93"$0$0$0$6$25$"	 * @param uri a path URI"
"PathResource.java:94"$1$0$0$3$37$"	 * @see java.nio.file.Paths#get(URI)"
"PathResource.java:95"$0$0$0$1$4$"	 */"
"PathResource.java:96"$0$0$0$4$31$"	public PathResource(URI uri) {"
"PathResource.java:97"$0$0$0$6$46$"		Assert.notNull(uri, ""URI must not be null"");"
"PathResource.java:98"$1$0$0$3$41$"		this.path = Paths.get(uri).normalize();"
"PathResource.java:99"$0$0$0$1$2$"	}"
"PathResource.java:100"$0$0$0$0$0$""
"PathResource.java:101"$0$0$0$0$0$""
"PathResource.java:102"$0$0$0$1$4$"	/**"
"PathResource.java:103"$0$0$0$8$43$"	 * Return the file path for this resource."
"PathResource.java:104"$0$0$0$1$4$"	 */"
"PathResource.java:105"$1$0$0$5$32$"	public final String getPath() {"
"PathResource.java:106"$0$0$0$2$30$"		return this.path.toString();"
"PathResource.java:107"$0$0$0$1$2$"	}"
"PathResource.java:108"$0$0$0$0$0$""
"PathResource.java:109"$0$0$0$1$4$"	/**"
"PathResource.java:110"$0$0$0$9$67$"	 * This implementation returns whether the underlying file exists."
"PathResource.java:111"$0$0$0$4$70$"	 * @see java.nio.file.Files#exists(Path, java.nio.file.LinkOption...)"
"PathResource.java:112"$0$0$0$1$4$"	 */"
"PathResource.java:113"$0$0$0$1$10$"	@Override"
"PathResource.java:114"$0$0$0$4$26$"	public boolean exists() {"
"PathResource.java:115"$0$0$0$2$33$"		return Files.exists(this.path);"
"PathResource.java:116"$0$0$0$1$2$"	}"
"PathResource.java:117"$0$0$0$0$0$""
"PathResource.java:118"$0$0$0$1$4$"	/**"
"PathResource.java:119"$0$0$0$12$80$"	 * This implementation checks whether the underlying file is marked as readable"
"PathResource.java:120"$0$0$0$13$73$"	 * (and corresponds to an actual file with content, not to a directory)."
"PathResource.java:121"$0$0$0$3$45$"	 * @see java.nio.file.Files#isReadable(Path)"
"PathResource.java:122"$0$0$0$4$75$"	 * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)"
"PathResource.java:123"$0$0$0$1$4$"	 */"
"PathResource.java:124"$0$0$0$1$10$"	@Override"
"PathResource.java:125"$0$0$0$4$30$"	public boolean isReadable() {"
"PathResource.java:126"$0$0$0$4$72$"		return (Files.isReadable(this.path) && !Files.isDirectory(this.path));"
"PathResource.java:127"$0$0$0$1$2$"	}"
"PathResource.java:128"$0$0$0$0$0$""
"PathResource.java:129"$0$0$0$1$4$"	/**"
"PathResource.java:130"$0$0$0$10$68$"	 * This implementation opens a InputStream for the underlying file."
"PathResource.java:131"$0$0$0$4$81$"	 * @see java.nio.file.spi.FileSystemProvider#newInputStream(Path, OpenOption...)"
"PathResource.java:132"$0$0$0$1$4$"	 */"
"PathResource.java:133"$0$0$0$1$10$"	@Override"
"PathResource.java:134"$1$0$0$6$57$"	public InputStream getInputStream() throws IOException {"
"PathResource.java:135"$0$0$0$3$18$"		if (!exists()) {"
"PathResource.java:136"$1$0$0$10$79$"			throw new FileNotFoundException(getPath() + "" (no such file or directory)"");"
"PathResource.java:137"$0$0$0$1$3$"		}"
"PathResource.java:138"$0$0$0$3$37$"		if (Files.isDirectory(this.path)) {"
"PathResource.java:139"$1$0$0$8$68$"			throw new FileNotFoundException(getPath() + "" (is a directory)"");"
"PathResource.java:140"$0$0$0$1$3$"		}"
"PathResource.java:141"$0$0$0$2$41$"		return Files.newInputStream(this.path);"
"PathResource.java:142"$0$0$0$1$2$"	}"
"PathResource.java:143"$0$0$0$0$0$""
"PathResource.java:144"$0$0$0$1$4$"	/**"
"PathResource.java:145"$0$0$0$12$80$"	 * This implementation checks whether the underlying file is marked as writable"
"PathResource.java:146"$0$0$0$13$73$"	 * (and corresponds to an actual file with content, not to a directory)."
"PathResource.java:147"$0$0$0$3$45$"	 * @see java.nio.file.Files#isWritable(Path)"
"PathResource.java:148"$0$0$0$4$75$"	 * @see java.nio.file.Files#isDirectory(Path, java.nio.file.LinkOption...)"
"PathResource.java:149"$0$0$0$1$4$"	 */"
"PathResource.java:150"$0$0$0$1$10$"	@Override"
"PathResource.java:151"$0$0$0$4$30$"	public boolean isWritable() {"
"PathResource.java:152"$0$0$0$4$72$"		return (Files.isWritable(this.path) && !Files.isDirectory(this.path));"
"PathResource.java:153"$0$0$0$1$2$"	}"
"PathResource.java:154"$0$0$0$0$0$""
"PathResource.java:155"$0$0$0$1$4$"	/**"
"PathResource.java:156"$0$0$0$10$69$"	 * This implementation opens a OutputStream for the underlying file."
"PathResource.java:157"$0$0$0$4$82$"	 * @see java.nio.file.spi.FileSystemProvider#newOutputStream(Path, OpenOption...)"
"PathResource.java:158"$0$0$0$1$4$"	 */"
"PathResource.java:159"$0$0$0$1$10$"	@Override"
"PathResource.java:160"$1$0$0$6$59$"	public OutputStream getOutputStream() throws IOException {"
"PathResource.java:161"$0$0$0$3$37$"		if (Files.isDirectory(this.path)) {"
"PathResource.java:162"$1$0$0$8$68$"			throw new FileNotFoundException(getPath() + "" (is a directory)"");"
"PathResource.java:163"$0$0$0$1$3$"		}"
"PathResource.java:164"$0$0$0$2$42$"		return Files.newOutputStream(this.path);"
"PathResource.java:165"$0$0$0$1$2$"	}"
"PathResource.java:166"$0$0$0$0$0$""
"PathResource.java:167"$0$0$0$1$4$"	/**"
"PathResource.java:168"$0$0$0$10$62$"	 * This implementation returns a URL for the underlying file."
"PathResource.java:169"$0$0$0$3$35$"	 * @see java.nio.file.Path#toUri()"
"PathResource.java:170"$0$0$0$3$29$"	 * @see java.net.URI#toURL()"
"PathResource.java:171"$0$0$0$1$4$"	 */"
"PathResource.java:172"$0$0$0$1$10$"	@Override"
"PathResource.java:173"$1$0$0$6$41$"	public URL getURL() throws IOException {"
"PathResource.java:174"$0$0$0$2$35$"		return this.path.toUri().toURL();"
"PathResource.java:175"$0$0$0$1$2$"	}"
"PathResource.java:176"$0$0$0$0$0$""
"PathResource.java:177"$0$0$0$1$4$"	/**"
"PathResource.java:178"$0$0$0$10$62$"	 * This implementation returns a URI for the underlying file."
"PathResource.java:179"$0$0$0$3$35$"	 * @see java.nio.file.Path#toUri()"
"PathResource.java:180"$0$0$0$1$4$"	 */"
"PathResource.java:181"$0$0$0$1$10$"	@Override"
"PathResource.java:182"$1$0$0$6$41$"	public URI getURI() throws IOException {"
"PathResource.java:183"$0$0$0$2$27$"		return this.path.toUri();"
"PathResource.java:184"$0$0$0$1$2$"	}"
"PathResource.java:185"$0$0$0$0$0$""
"PathResource.java:186"$0$0$0$1$4$"	/**"
"PathResource.java:187"$0$0$0$7$48$"	 * This implementation always indicates a file."
"PathResource.java:188"$0$0$0$1$4$"	 */"
"PathResource.java:189"$0$0$0$1$10$"	@Override"
"PathResource.java:190"$0$0$0$4$26$"	public boolean isFile() {"
"PathResource.java:191"$0$0$0$2$14$"		return true;"
"PathResource.java:192"$0$0$0$1$2$"	}"
"PathResource.java:193"$0$0$0$0$0$""
"PathResource.java:194"$0$0$0$1$4$"	/**"
"PathResource.java:195"$0$0$0$8$62$"	 * This implementation returns the underlying File reference."
"PathResource.java:196"$0$0$0$1$4$"	 */"
"PathResource.java:197"$0$0$0$1$10$"	@Override"
"PathResource.java:198"$1$0$0$6$43$"	public File getFile() throws IOException {"
"PathResource.java:199"$0$0$0$2$7$"		try {"
"PathResource.java:200"$0$0$0$2$29$"			return this.path.toFile();"
"PathResource.java:201"$0$0$0$1$3$"		}"
"PathResource.java:202"$0$0$0$4$44$"		catch (UnsupportedOperationException ex) {"
"PathResource.java:203"$0$0$1$14$71$"			// Only paths on the default file system can be converted to a File:"
"PathResource.java:204"$0$0$1$11$74$"			// Do exception translation for cases where conversion is not possible."
"PathResource.java:205"$0$0$0$12$92$"			throw new FileNotFoundException(this.path + "" cannot be resolved to absolute file path"");"
"PathResource.java:206"$0$0$0$1$3$"		}"
"PathResource.java:207"$0$0$0$1$2$"	}"
"PathResource.java:208"$0$0$0$0$0$""
"PathResource.java:209"$0$0$0$1$4$"	/**"
"PathResource.java:210"$0$0$0$10$64$"	 * This implementation opens a Channel for the underlying file."
"PathResource.java:211"$0$0$0$4$50$"	 * @see Files#newByteChannel(Path, OpenOption...)"
"PathResource.java:212"$0$0$0$1$4$"	 */"
"PathResource.java:213"$0$0$0$1$10$"	@Override"
"PathResource.java:214"$0$0$0$6$66$"	public ReadableByteChannel readableChannel() throws IOException {"
"PathResource.java:215"$0$0$0$2$7$"		try {"
"PathResource.java:216"$0$0$0$3$67$"			return Files.newByteChannel(this.path, StandardOpenOption.READ);"
"PathResource.java:217"$0$0$0$1$3$"		}"
"PathResource.java:218"$0$0$0$4$34$"		catch (NoSuchFileException ex) {"
"PathResource.java:219"$1$0$0$3$52$"			throw new FileNotFoundException(ex.getMessage());"
"PathResource.java:220"$0$0$0$1$3$"		}"
"PathResource.java:221"$0$0$0$1$2$"	}"
"PathResource.java:222"$0$0$0$0$0$""
"PathResource.java:223"$0$0$0$1$4$"	/**"
"PathResource.java:224"$0$0$0$10$64$"	 * This implementation opens a Channel for the underlying file."
"PathResource.java:225"$0$0$0$4$50$"	 * @see Files#newByteChannel(Path, OpenOption...)"
"PathResource.java:226"$0$0$0$1$4$"	 */"
"PathResource.java:227"$0$0$0$1$10$"	@Override"
"PathResource.java:228"$0$0$0$6$66$"	public WritableByteChannel writableChannel() throws IOException {"
"PathResource.java:229"$0$0$0$3$67$"		return Files.newByteChannel(this.path, StandardOpenOption.WRITE);"
"PathResource.java:230"$0$0$0$1$2$"	}"
"PathResource.java:231"$0$0$0$0$0$""
"PathResource.java:232"$0$0$0$1$4$"	/**"
"PathResource.java:233"$0$0$0$8$61$"	 * This implementation returns the underlying file's length."
"PathResource.java:234"$0$0$0$1$4$"	 */"
"PathResource.java:235"$0$0$0$1$10$"	@Override"
"PathResource.java:236"$0$0$0$6$49$"	public long contentLength() throws IOException {"
"PathResource.java:237"$0$0$0$2$31$"		return Files.size(this.path);"
"PathResource.java:238"$0$0$0$1$2$"	}"
"PathResource.java:239"$0$0$0$0$0$""
"PathResource.java:240"$0$0$0$1$4$"	/**"
"PathResource.java:241"$0$0$0$8$64$"	 * This implementation returns the underlying File's timestamp."
"PathResource.java:242"$1$0$0$4$83$"	 * @see java.nio.file.Files#getLastModifiedTime(Path, java.nio.file.LinkOption...)"
"PathResource.java:243"$0$0$0$1$4$"	 */"
"PathResource.java:244"$0$0$0$1$10$"	@Override"
"PathResource.java:245"$0$0$0$6$48$"	public long lastModified() throws IOException {"
"PathResource.java:246"$0$0$1$16$80$"		// We can not use the superclass method since it uses conversion to a File and"
"PathResource.java:247"$0$0$1$15$73$"		// only a Path on the default file system can be converted to a File..."
"PathResource.java:248"$1$0$0$2$57$"		return Files.getLastModifiedTime(this.path).toMillis();"
"PathResource.java:249"$0$0$0$1$2$"	}"
"PathResource.java:250"$0$0$0$0$0$""
"PathResource.java:251"$0$0$0$1$4$"	/**"
"PathResource.java:252"$0$0$0$10$71$"	 * This implementation creates a PathResource, applying the given path"
"PathResource.java:253"$0$0$0$13$76$"	 * relative to the path of the underlying file of this resource descriptor."
"PathResource.java:254"$0$0$0$3$43$"	 * @see java.nio.file.Path#resolve(String)"
"PathResource.java:255"$0$0$0$1$4$"	 */"
"PathResource.java:256"$0$0$0$1$10$"	@Override"
"PathResource.java:257"$0$0$0$5$54$"	public Resource createRelative(String relativePath) {"
"PathResource.java:258"$0$0$0$3$59$"		return new PathResource(this.path.resolve(relativePath));"
"PathResource.java:259"$0$0$0$1$2$"	}"
"PathResource.java:260"$0$0$0$0$0$""
"PathResource.java:261"$0$0$0$1$4$"	/**"
"PathResource.java:262"$0$0$0$9$53$"	 * This implementation returns the name of the file."
"PathResource.java:263"$1$0$0$3$41$"	 * @see java.nio.file.Path#getFileName()"
"PathResource.java:264"$0$0$0$1$4$"	 */"
"PathResource.java:265"$0$0$0$1$10$"	@Override"
"PathResource.java:266"$1$0$0$4$30$"	public String getFilename() {"
"PathResource.java:267"$1$0$0$2$44$"		return this.path.getFileName().toString();"
"PathResource.java:268"$0$0$0$1$2$"	}"
"PathResource.java:269"$0$0$0$0$0$""
"PathResource.java:270"$0$0$0$1$10$"	@Override"
"PathResource.java:271"$1$0$0$4$33$"	public String getDescription() {"
"PathResource.java:272"$0$0$0$7$53$"		return ""path ["" + this.path.toAbsolutePath() + ""]"";"
"PathResource.java:273"$0$0$0$1$2$"	}"
"PathResource.java:274"$0$0$0$0$0$""
"PathResource.java:275"$0$0$0$0$0$""
"PathResource.java:276"$0$0$0$1$4$"	/**"
"PathResource.java:277"$0$0$0$8$64$"	 * This implementation compares the underlying Path references."
"PathResource.java:278"$0$0$0$1$4$"	 */"
"PathResource.java:279"$0$0$0$1$10$"	@Override"
"PathResource.java:280"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"PathResource.java:281"$0$0$0$9$60$"		return (this == other || (other instanceof PathResource &&"
"PathResource.java:282"$0$0$0$2$52$"				this.path.equals(((PathResource) other).path)));"
"PathResource.java:283"$0$0$0$1$2$"	}"
"PathResource.java:284"$0$0$0$0$0$""
"PathResource.java:285"$0$0$0$1$4$"	/**"
"PathResource.java:286"$0$0$0$12$79$"	 * This implementation returns the hash code of the underlying Path reference."
"PathResource.java:287"$0$0$0$1$4$"	 */"
"PathResource.java:288"$0$0$0$1$10$"	@Override"
"PathResource.java:289"$0$0$0$4$24$"	public int hashCode() {"
"PathResource.java:290"$0$0$0$2$30$"		return this.path.hashCode();"
"PathResource.java:291"$0$0$0$1$2$"	}"
"PathResource.java:292"$0$0$0$0$0$""
"PathResource.java:293"$0$0$0$1$1$"}"
"XMLEventStreamReader.java:1"$0$0$0$1$2$"/*"
"XMLEventStreamReader.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"XMLEventStreamReader.java:3"$0$0$0$1$2$" *"
"XMLEventStreamReader.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"XMLEventStreamReader.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"XMLEventStreamReader.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"XMLEventStreamReader.java:7"$0$0$0$1$2$" *"
"XMLEventStreamReader.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"XMLEventStreamReader.java:9"$0$0$0$1$2$" *"
"XMLEventStreamReader.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"XMLEventStreamReader.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"XMLEventStreamReader.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"XMLEventStreamReader.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"XMLEventStreamReader.java:14"$0$0$0$5$33$" * limitations under the License."
"XMLEventStreamReader.java:15"$0$0$0$1$3$" */"
"XMLEventStreamReader.java:16"$0$0$0$0$0$""
"XMLEventStreamReader.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"XMLEventStreamReader.java:18"$0$0$0$0$0$""
"XMLEventStreamReader.java:19"$0$0$0$2$26$"import java.util.Iterator;"
"XMLEventStreamReader.java:20"$0$0$0$0$0$""
"XMLEventStreamReader.java:21"$0$0$0$2$44$"import javax.xml.namespace.NamespaceContext;"
"XMLEventStreamReader.java:22"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"XMLEventStreamReader.java:23"$0$0$0$2$33$"import javax.xml.stream.Location;"
"XMLEventStreamReader.java:24"$0$0$0$2$39$"import javax.xml.stream.XMLEventReader;"
"XMLEventStreamReader.java:25"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"XMLEventStreamReader.java:26"$0$0$0$2$41$"import javax.xml.stream.events.Attribute;"
"XMLEventStreamReader.java:27"$0$0$0$2$39$"import javax.xml.stream.events.Comment;"
"XMLEventStreamReader.java:28"$0$0$0$2$41$"import javax.xml.stream.events.Namespace;"
"XMLEventStreamReader.java:29"$0$0$0$2$53$"import javax.xml.stream.events.ProcessingInstruction;"
"XMLEventStreamReader.java:30"$0$0$0$2$45$"import javax.xml.stream.events.StartDocument;"
"XMLEventStreamReader.java:31"$0$0$0$2$40$"import javax.xml.stream.events.XMLEvent;"
"XMLEventStreamReader.java:32"$0$0$0$0$0$""
"XMLEventStreamReader.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"XMLEventStreamReader.java:34"$0$0$0$0$0$""
"XMLEventStreamReader.java:35"$0$0$0$1$3$"/**"
"XMLEventStreamReader.java:36"$0$0$0$10$88$" * Implementation of the {@link javax.xml.stream.XMLStreamReader} interface that wraps a"
"XMLEventStreamReader.java:37"$0$0$0$9$91$" * {@link XMLEventReader}. Useful because the StAX {@link javax.xml.stream.XMLInputFactory}"
"XMLEventStreamReader.java:38"$0$0$0$15$80$" * allows one to create a event reader from a stream reader, but not vice-versa."
"XMLEventStreamReader.java:39"$0$0$0$1$2$" *"
"XMLEventStreamReader.java:40"$0$0$0$4$24$" * @author Arjen Poutsma"
"XMLEventStreamReader.java:41"$0$0$0$3$13$" * @since 3.0"
"XMLEventStreamReader.java:42"$0$0$0$3$74$" * @see StaxUtils#createEventStreamReader(javax.xml.stream.XMLEventReader)"
"XMLEventStreamReader.java:43"$0$0$0$1$3$" */"
"XMLEventStreamReader.java:44"$0$0$0$5$60$"class XMLEventStreamReader extends AbstractXMLStreamReader {"
"XMLEventStreamReader.java:45"$0$0$0$0$0$""
"XMLEventStreamReader.java:46"$0$0$0$3$24$"	private XMLEvent event;"
"XMLEventStreamReader.java:47"$0$0$0$0$0$""
"XMLEventStreamReader.java:48"$0$0$0$4$42$"	private final XMLEventReader eventReader;"
"XMLEventStreamReader.java:49"$0$0$0$0$0$""
"XMLEventStreamReader.java:50"$0$0$0$0$0$""
"XMLEventStreamReader.java:51"$0$0$0$6$84$"	public XMLEventStreamReader(XMLEventReader eventReader) throws XMLStreamException {"
"XMLEventStreamReader.java:52"$0$0$0$3$33$"		this.eventReader = eventReader;"
"XMLEventStreamReader.java:53"$0$0$0$3$39$"		this.event = eventReader.nextEvent();"
"XMLEventStreamReader.java:54"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:55"$0$0$0$0$0$""
"XMLEventStreamReader.java:56"$0$0$0$0$0$""
"XMLEventStreamReader.java:57"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:58"$1$0$0$4$25$"	public QName getName() {"
"XMLEventStreamReader.java:59"$0$0$0$3$36$"		if (this.event.isStartElement()) {"
"XMLEventStreamReader.java:60"$1$0$0$2$48$"			return this.event.asStartElement().getName();"
"XMLEventStreamReader.java:61"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:62"$0$0$0$4$39$"		else if (this.event.isEndElement()) {"
"XMLEventStreamReader.java:63"$1$0$0$2$46$"			return this.event.asEndElement().getName();"
"XMLEventStreamReader.java:64"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:65"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:66"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:67"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:68"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:69"$0$0$0$0$0$""
"XMLEventStreamReader.java:70"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:71"$1$0$0$4$32$"	public Location getLocation() {"
"XMLEventStreamReader.java:72"$1$0$0$2$34$"		return this.event.getLocation();"
"XMLEventStreamReader.java:73"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:74"$0$0$0$0$0$""
"XMLEventStreamReader.java:75"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:76"$1$0$0$4$28$"	public int getEventType() {"
"XMLEventStreamReader.java:77"$1$0$0$2$35$"		return this.event.getEventType();"
"XMLEventStreamReader.java:78"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:79"$0$0$0$0$0$""
"XMLEventStreamReader.java:80"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:81"$0$0$0$1$10$"	@Nullable"
"XMLEventStreamReader.java:82"$1$0$0$4$29$"	public String getVersion() {"
"XMLEventStreamReader.java:83"$0$0$0$3$37$"		if (this.event.isStartDocument()) {"
"XMLEventStreamReader.java:84"$1$0$0$3$52$"			return ((StartDocument) this.event).getVersion();"
"XMLEventStreamReader.java:85"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:86"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:87"$0$0$0$2$15$"			return null;"
"XMLEventStreamReader.java:88"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:89"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:90"$0$0$0$0$0$""
"XMLEventStreamReader.java:91"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:92"$1$0$0$7$73$"	public Object getProperty(String name) throws IllegalArgumentException {"
"XMLEventStreamReader.java:93"$1$0$0$2$44$"		return this.eventReader.getProperty(name);"
"XMLEventStreamReader.java:94"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:95"$0$0$0$0$0$""
"XMLEventStreamReader.java:96"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:97"$0$0$0$4$32$"	public boolean isStandalone() {"
"XMLEventStreamReader.java:98"$0$0$0$3$37$"		if (this.event.isStartDocument()) {"
"XMLEventStreamReader.java:99"$0$0$0$3$54$"			return ((StartDocument) this.event).isStandalone();"
"XMLEventStreamReader.java:100"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:101"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:102"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:103"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:104"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:105"$0$0$0$0$0$""
"XMLEventStreamReader.java:106"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:107"$0$0$0$4$33$"	public boolean standaloneSet() {"
"XMLEventStreamReader.java:108"$0$0$0$3$37$"		if (this.event.isStartDocument()) {"
"XMLEventStreamReader.java:109"$0$0$0$3$55$"			return ((StartDocument) this.event).standaloneSet();"
"XMLEventStreamReader.java:110"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:111"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:112"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:113"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:114"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:115"$0$0$0$0$0$""
"XMLEventStreamReader.java:116"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:117"$0$0$0$1$10$"	@Nullable"
"XMLEventStreamReader.java:118"$1$0$0$4$30$"	public String getEncoding() {"
"XMLEventStreamReader.java:119"$0$0$0$2$14$"		return null;"
"XMLEventStreamReader.java:120"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:121"$0$0$0$0$0$""
"XMLEventStreamReader.java:122"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:123"$0$0$0$1$10$"	@Nullable"
"XMLEventStreamReader.java:124"$1$0$0$4$45$"	public String getCharacterEncodingScheme() {"
"XMLEventStreamReader.java:125"$0$0$0$2$14$"		return null;"
"XMLEventStreamReader.java:126"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:127"$0$0$0$0$0$""
"XMLEventStreamReader.java:128"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:129"$2$0$0$4$30$"	public String getPITarget() {"
"XMLEventStreamReader.java:130"$0$0$0$3$45$"		if (this.event.isProcessingInstruction()) {"
"XMLEventStreamReader.java:131"$2$0$0$3$59$"			return ((ProcessingInstruction) this.event).getTarget();"
"XMLEventStreamReader.java:132"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:133"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:134"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:135"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:136"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:137"$0$0$0$0$0$""
"XMLEventStreamReader.java:138"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:139"$1$0$0$4$28$"	public String getPIData() {"
"XMLEventStreamReader.java:140"$0$0$0$3$45$"		if (this.event.isProcessingInstruction()) {"
"XMLEventStreamReader.java:141"$1$0$0$3$57$"			return ((ProcessingInstruction) this.event).getData();"
"XMLEventStreamReader.java:142"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:143"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:144"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:145"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:146"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:147"$0$0$0$0$0$""
"XMLEventStreamReader.java:148"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:149"$1$0$0$4$28$"	public int getTextStart() {"
"XMLEventStreamReader.java:150"$0$0$0$2$11$"		return 0;"
"XMLEventStreamReader.java:151"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:152"$0$0$0$0$0$""
"XMLEventStreamReader.java:153"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:154"$1$0$0$4$26$"	public String getText() {"
"XMLEventStreamReader.java:155"$0$0$0$3$34$"		if (this.event.isCharacters()) {"
"XMLEventStreamReader.java:156"$1$0$0$2$46$"			return this.event.asCharacters().getData();"
"XMLEventStreamReader.java:157"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:158"$1$0$0$6$59$"		else if (this.event.getEventType() == XMLEvent.COMMENT) {"
"XMLEventStreamReader.java:159"$1$0$0$3$43$"			return ((Comment) this.event).getText();"
"XMLEventStreamReader.java:160"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:161"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:162"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:163"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:164"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:165"$0$0$0$0$0$""
"XMLEventStreamReader.java:166"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:167"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"XMLEventStreamReader.java:168"$1$0$0$4$33$"	public int getAttributeCount() {"
"XMLEventStreamReader.java:169"$0$0$0$3$37$"		if (!this.event.isStartElement()) {"
"XMLEventStreamReader.java:170"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:171"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:172"$1$0$0$4$68$"		Iterator attributes = this.event.asStartElement().getAttributes();"
"XMLEventStreamReader.java:173"$0$0$0$2$35$"		return countIterator(attributes);"
"XMLEventStreamReader.java:174"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:175"$0$0$0$0$0$""
"XMLEventStreamReader.java:176"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:177"$0$0$0$5$49$"	public boolean isAttributeSpecified(int index) {"
"XMLEventStreamReader.java:178"$1$0$0$2$43$"		return getAttribute(index).isSpecified();"
"XMLEventStreamReader.java:179"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:180"$0$0$0$0$0$""
"XMLEventStreamReader.java:181"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:182"$1$0$0$5$43$"	public QName getAttributeName(int index) {"
"XMLEventStreamReader.java:183"$2$0$0$2$39$"		return getAttribute(index).getName();"
"XMLEventStreamReader.java:184"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:185"$0$0$0$0$0$""
"XMLEventStreamReader.java:186"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:187"$1$0$0$5$44$"	public String getAttributeType(int index) {"
"XMLEventStreamReader.java:188"$2$0$0$2$42$"		return getAttribute(index).getDTDType();"
"XMLEventStreamReader.java:189"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:190"$0$0$0$0$0$""
"XMLEventStreamReader.java:191"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:192"$1$0$0$5$45$"	public String getAttributeValue(int index) {"
"XMLEventStreamReader.java:193"$2$0$0$2$40$"		return getAttribute(index).getValue();"
"XMLEventStreamReader.java:194"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:195"$0$0$0$0$0$""
"XMLEventStreamReader.java:196"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"XMLEventStreamReader.java:197"$1$0$0$5$44$"	private Attribute getAttribute(int index) {"
"XMLEventStreamReader.java:198"$0$0$0$3$37$"		if (!this.event.isStartElement()) {"
"XMLEventStreamReader.java:199"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:200"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:201"$0$0$0$4$16$"		int count = 0;"
"XMLEventStreamReader.java:202"$1$0$0$4$68$"		Iterator attributes = this.event.asStartElement().getAttributes();"
"XMLEventStreamReader.java:203"$0$0$0$3$32$"		while (attributes.hasNext()) {"
"XMLEventStreamReader.java:204"$0$0$0$5$55$"			Attribute attribute = (Attribute) attributes.next();"
"XMLEventStreamReader.java:205"$0$0$0$5$24$"			if (count == index) {"
"XMLEventStreamReader.java:206"$0$0$0$2$21$"				return attribute;"
"XMLEventStreamReader.java:207"$0$0$0$1$4$"			}"
"XMLEventStreamReader.java:208"$0$0$0$2$9$"			else {"
"XMLEventStreamReader.java:209"$0$0$0$1$12$"				count++;"
"XMLEventStreamReader.java:210"$0$0$0$1$4$"			}"
"XMLEventStreamReader.java:211"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:212"$0$0$0$3$39$"		throw new IllegalArgumentException();"
"XMLEventStreamReader.java:213"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:214"$0$0$0$0$0$""
"XMLEventStreamReader.java:215"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:216"$1$0$0$4$48$"	public NamespaceContext getNamespaceContext() {"
"XMLEventStreamReader.java:217"$0$0$0$3$36$"		if (this.event.isStartElement()) {"
"XMLEventStreamReader.java:218"$1$0$0$2$60$"			return this.event.asStartElement().getNamespaceContext();"
"XMLEventStreamReader.java:219"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:220"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:221"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:222"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:223"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:224"$0$0$0$0$0$""
"XMLEventStreamReader.java:225"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:226"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"XMLEventStreamReader.java:227"$1$0$0$4$33$"	public int getNamespaceCount() {"
"XMLEventStreamReader.java:228"$0$0$0$2$22$"		Iterator namespaces;"
"XMLEventStreamReader.java:229"$0$0$0$3$36$"		if (this.event.isStartElement()) {"
"XMLEventStreamReader.java:230"$1$0$0$3$60$"			namespaces = this.event.asStartElement().getNamespaces();"
"XMLEventStreamReader.java:231"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:232"$0$0$0$4$39$"		else if (this.event.isEndElement()) {"
"XMLEventStreamReader.java:233"$1$0$0$3$58$"			namespaces = this.event.asEndElement().getNamespaces();"
"XMLEventStreamReader.java:234"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:235"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:236"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:237"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:238"$0$0$0$2$35$"		return countIterator(namespaces);"
"XMLEventStreamReader.java:239"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:240"$0$0$0$0$0$""
"XMLEventStreamReader.java:241"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:242"$1$0$0$5$46$"	public String getNamespacePrefix(int index) {"
"XMLEventStreamReader.java:243"$2$0$0$2$41$"		return getNamespace(index).getPrefix();"
"XMLEventStreamReader.java:244"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:245"$0$0$0$0$0$""
"XMLEventStreamReader.java:246"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:247"$1$0$0$5$43$"	public String getNamespaceURI(int index) {"
"XMLEventStreamReader.java:248"$2$0$0$2$47$"		return getNamespace(index).getNamespaceURI();"
"XMLEventStreamReader.java:249"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:250"$0$0$0$0$0$""
"XMLEventStreamReader.java:251"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"XMLEventStreamReader.java:252"$1$0$0$5$44$"	private Namespace getNamespace(int index) {"
"XMLEventStreamReader.java:253"$0$0$0$2$22$"		Iterator namespaces;"
"XMLEventStreamReader.java:254"$0$0$0$3$36$"		if (this.event.isStartElement()) {"
"XMLEventStreamReader.java:255"$1$0$0$3$60$"			namespaces = this.event.asStartElement().getNamespaces();"
"XMLEventStreamReader.java:256"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:257"$0$0$0$4$39$"		else if (this.event.isEndElement()) {"
"XMLEventStreamReader.java:258"$1$0$0$3$58$"			namespaces = this.event.asEndElement().getNamespaces();"
"XMLEventStreamReader.java:259"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:260"$0$0$0$2$8$"		else {"
"XMLEventStreamReader.java:261"$0$0$0$3$37$"			throw new IllegalStateException();"
"XMLEventStreamReader.java:262"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:263"$0$0$0$4$16$"		int count = 0;"
"XMLEventStreamReader.java:264"$0$0$0$3$32$"		while (namespaces.hasNext()) {"
"XMLEventStreamReader.java:265"$0$0$0$5$55$"			Namespace namespace = (Namespace) namespaces.next();"
"XMLEventStreamReader.java:266"$0$0$0$5$24$"			if (count == index) {"
"XMLEventStreamReader.java:267"$0$0$0$2$21$"				return namespace;"
"XMLEventStreamReader.java:268"$0$0$0$1$4$"			}"
"XMLEventStreamReader.java:269"$0$0$0$2$9$"			else {"
"XMLEventStreamReader.java:270"$0$0$0$1$12$"				count++;"
"XMLEventStreamReader.java:271"$0$0$0$1$4$"			}"
"XMLEventStreamReader.java:272"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:273"$0$0$0$3$39$"		throw new IllegalArgumentException();"
"XMLEventStreamReader.java:274"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:275"$0$0$0$0$0$""
"XMLEventStreamReader.java:276"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:277"$0$0$0$6$46$"	public int next() throws XMLStreamException {"
"XMLEventStreamReader.java:278"$0$0$0$3$44$"		this.event = this.eventReader.nextEvent();"
"XMLEventStreamReader.java:279"$1$0$0$2$35$"		return this.event.getEventType();"
"XMLEventStreamReader.java:280"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:281"$0$0$0$0$0$""
"XMLEventStreamReader.java:282"$0$0$0$1$10$"	@Override"
"XMLEventStreamReader.java:283"$0$0$0$6$48$"	public void close() throws XMLStreamException {"
"XMLEventStreamReader.java:284"$0$0$0$1$27$"		this.eventReader.close();"
"XMLEventStreamReader.java:285"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:286"$0$0$0$0$0$""
"XMLEventStreamReader.java:287"$0$0$0$0$0$""
"XMLEventStreamReader.java:288"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"XMLEventStreamReader.java:289"$0$0$0$6$54$"	private static int countIterator(Iterator iterator) {"
"XMLEventStreamReader.java:290"$0$0$0$4$16$"		int count = 0;"
"XMLEventStreamReader.java:291"$0$0$0$3$30$"		while (iterator.hasNext()) {"
"XMLEventStreamReader.java:292"$0$0$0$1$19$"			iterator.next();"
"XMLEventStreamReader.java:293"$0$0$0$1$11$"			count++;"
"XMLEventStreamReader.java:294"$0$0$0$1$3$"		}"
"XMLEventStreamReader.java:295"$0$0$0$2$15$"		return count;"
"XMLEventStreamReader.java:296"$0$0$0$1$2$"	}"
"XMLEventStreamReader.java:297"$0$0$0$0$0$""
"XMLEventStreamReader.java:298"$0$0$0$1$1$"}"
"CompositePropertySource.java:1"$0$0$0$1$2$"/*"
"CompositePropertySource.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"CompositePropertySource.java:3"$0$0$0$1$2$" *"
"CompositePropertySource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"CompositePropertySource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"CompositePropertySource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"CompositePropertySource.java:7"$0$0$0$1$2$" *"
"CompositePropertySource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"CompositePropertySource.java:9"$0$0$0$1$2$" *"
"CompositePropertySource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"CompositePropertySource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"CompositePropertySource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"CompositePropertySource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"CompositePropertySource.java:14"$0$0$0$5$33$" * limitations under the License."
"CompositePropertySource.java:15"$0$0$0$1$3$" */"
"CompositePropertySource.java:16"$0$0$0$0$0$""
"CompositePropertySource.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"CompositePropertySource.java:18"$0$0$0$0$0$""
"CompositePropertySource.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"CompositePropertySource.java:20"$0$0$0$2$24$"import java.util.Arrays;"
"CompositePropertySource.java:21"$0$0$0$2$28$"import java.util.Collection;"
"CompositePropertySource.java:22"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"CompositePropertySource.java:23"$0$0$0$2$22$"import java.util.List;"
"CompositePropertySource.java:24"$0$0$0$2$21$"import java.util.Set;"
"CompositePropertySource.java:25"$0$0$0$0$0$""
"CompositePropertySource.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"CompositePropertySource.java:27"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"CompositePropertySource.java:28"$0$0$0$0$0$""
"CompositePropertySource.java:29"$0$0$0$1$3$"/**"
"CompositePropertySource.java:30"$0$0$0$11$78$" * Composite {@link PropertySource} implementation that iterates over a set of"
"CompositePropertySource.java:31"$0$0$0$11$87$" * {@link PropertySource} instances. Necessary in cases where multiple property sources"
"CompositePropertySource.java:32"$0$0$0$14$90$" * share the same name, e.g. when multiple values are supplied to {@code @PropertySource}."
"CompositePropertySource.java:33"$0$0$0$1$2$" *"
"CompositePropertySource.java:34"$0$0$0$11$85$" * <p>As of Spring 4.1.2, this class extends {@link EnumerablePropertySource} instead"
"CompositePropertySource.java:35"$1$0$0$11$85$" * of plain {@link PropertySource}, exposing {@link #getPropertyNames()} based on the"
"CompositePropertySource.java:36"$0$0$0$12$78$" * accumulated property names from all contained sources (as far as possible)."
"CompositePropertySource.java:37"$0$0$0$1$2$" *"
"CompositePropertySource.java:38"$0$0$0$4$22$" * @author Chris Beams"
"CompositePropertySource.java:39"$0$0$0$4$26$" * @author Juergen Hoeller"
"CompositePropertySource.java:40"$0$0$0$4$23$" * @author Phillip Webb"
"CompositePropertySource.java:41"$0$0$0$3$15$" * @since 3.1.1"
"CompositePropertySource.java:42"$0$0$0$1$3$" */"
"CompositePropertySource.java:43"$0$0$0$6$79$"public class CompositePropertySource extends EnumerablePropertySource<Object> {"
"CompositePropertySource.java:44"$0$0$0$0$0$""
"CompositePropertySource.java:45"$0$0$0$7$78$"	private final Set<PropertySource<?>> propertySources = new LinkedHashSet<>();"
"CompositePropertySource.java:46"$0$0$0$0$0$""
"CompositePropertySource.java:47"$0$0$0$0$0$""
"CompositePropertySource.java:48"$0$0$0$1$4$"	/**"
"CompositePropertySource.java:49"$0$0$0$6$49$"	 * Create a new {@code CompositePropertySource}."
"CompositePropertySource.java:50"$0$0$0$9$47$"	 * @param name the name of the property source"
"CompositePropertySource.java:51"$0$0$0$1$4$"	 */"
"CompositePropertySource.java:52"$0$0$0$4$46$"	public CompositePropertySource(String name) {"
"CompositePropertySource.java:53"$0$0$0$1$14$"		super(name);"
"CompositePropertySource.java:54"$0$0$0$1$2$"	}"
"CompositePropertySource.java:55"$0$0$0$0$0$""
"CompositePropertySource.java:56"$0$0$0$0$0$""
"CompositePropertySource.java:57"$0$0$0$1$10$"	@Override"
"CompositePropertySource.java:58"$0$0$0$1$10$"	@Nullable"
"CompositePropertySource.java:59"$1$0$0$5$41$"	public Object getProperty(String name) {"
"CompositePropertySource.java:60"$0$0$0$6$65$"		for (PropertySource<?> propertySource : this.propertySources) {"
"CompositePropertySource.java:61"$1$0$0$4$55$"			Object candidate = propertySource.getProperty(name);"
"CompositePropertySource.java:62"$0$0$0$5$27$"			if (candidate != null) {"
"CompositePropertySource.java:63"$0$0$0$2$21$"				return candidate;"
"CompositePropertySource.java:64"$0$0$0$1$4$"			}"
"CompositePropertySource.java:65"$0$0$0$1$3$"		}"
"CompositePropertySource.java:66"$0$0$0$2$14$"		return null;"
"CompositePropertySource.java:67"$0$0$0$1$2$"	}"
"CompositePropertySource.java:68"$0$0$0$0$0$""
"CompositePropertySource.java:69"$0$0$0$1$10$"	@Override"
"CompositePropertySource.java:70"$0$0$0$5$47$"	public boolean containsProperty(String name) {"
"CompositePropertySource.java:71"$0$0$0$6$65$"		for (PropertySource<?> propertySource : this.propertySources) {"
"CompositePropertySource.java:72"$0$0$0$3$47$"			if (propertySource.containsProperty(name)) {"
"CompositePropertySource.java:73"$0$0$0$2$16$"				return true;"
"CompositePropertySource.java:74"$0$0$0$1$4$"			}"
"CompositePropertySource.java:75"$0$0$0$1$3$"		}"
"CompositePropertySource.java:76"$0$0$0$2$15$"		return false;"
"CompositePropertySource.java:77"$0$0$0$1$2$"	}"
"CompositePropertySource.java:78"$0$0$0$0$0$""
"CompositePropertySource.java:79"$0$0$0$1$10$"	@Override"
"CompositePropertySource.java:80"$1$0$0$4$37$"	public String[] getPropertyNames() {"
"CompositePropertySource.java:81"$0$0$0$5$44$"		Set<String> names = new LinkedHashSet<>();"
"CompositePropertySource.java:82"$0$0$0$6$65$"		for (PropertySource<?> propertySource : this.propertySources) {"
"CompositePropertySource.java:83"$0$0$0$5$63$"			if (!(propertySource instanceof EnumerablePropertySource)) {"
"CompositePropertySource.java:84"$0$0$0$3$36$"				throw new IllegalStateException("
"CompositePropertySource.java:85"$0$0$0$13$101$"						""Failed to enumerate property names due to non-enumerable property source: "" + propertySource);"
"CompositePropertySource.java:86"$0$0$0$1$4$"			}"
"CompositePropertySource.java:87"$1$0$0$2$98$"			names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));"
"CompositePropertySource.java:88"$0$0$0$1$3$"		}"
"CompositePropertySource.java:89"$0$0$0$2$42$"		return StringUtils.toStringArray(names);"
"CompositePropertySource.java:90"$0$0$0$1$2$"	}"
"CompositePropertySource.java:91"$0$0$0$0$0$""
"CompositePropertySource.java:92"$0$0$0$0$0$""
"CompositePropertySource.java:93"$0$0$0$1$4$"	/**"
"CompositePropertySource.java:94"$0$0$0$12$65$"	 * Add the given {@link PropertySource} to the end of the chain."
"CompositePropertySource.java:95"$0$0$0$7$51$"	 * @param propertySource the PropertySource to add"
"CompositePropertySource.java:96"$0$0$0$1$4$"	 */"
"CompositePropertySource.java:97"$0$0$0$5$66$"	public void addPropertySource(PropertySource<?> propertySource) {"
"CompositePropertySource.java:98"$0$0$0$1$43$"		this.propertySources.add(propertySource);"
"CompositePropertySource.java:99"$0$0$0$1$2$"	}"
"CompositePropertySource.java:100"$0$0$0$0$0$""
"CompositePropertySource.java:101"$0$0$0$1$4$"	/**"
"CompositePropertySource.java:102"$0$0$0$12$67$"	 * Add the given {@link PropertySource} to the start of the chain."
"CompositePropertySource.java:103"$0$0$0$7$51$"	 * @param propertySource the PropertySource to add"
"CompositePropertySource.java:104"$0$0$0$3$14$"	 * @since 4.1"
"CompositePropertySource.java:105"$0$0$0$1$4$"	 */"
"CompositePropertySource.java:106"$0$0$0$5$71$"	public void addFirstPropertySource(PropertySource<?> propertySource) {"
"CompositePropertySource.java:107"$0$0$0$5$75$"		List<PropertySource<?>> existing = new ArrayList<>(this.propertySources);"
"CompositePropertySource.java:108"$0$0$0$1$31$"		this.propertySources.clear();"
"CompositePropertySource.java:109"$0$0$0$1$43$"		this.propertySources.add(propertySource);"
"CompositePropertySource.java:110"$0$0$0$1$40$"		this.propertySources.addAll(existing);"
"CompositePropertySource.java:111"$0$0$0$1$2$"	}"
"CompositePropertySource.java:112"$0$0$0$0$0$""
"CompositePropertySource.java:113"$0$0$0$1$4$"	/**"
"CompositePropertySource.java:114"$0$0$0$10$65$"	 * Return all property sources that this composite source holds."
"CompositePropertySource.java:115"$0$0$0$3$16$"	 * @since 4.1.1"
"CompositePropertySource.java:116"$0$0$0$1$4$"	 */"
"CompositePropertySource.java:117"$1$0$0$4$60$"	public Collection<PropertySource<?>> getPropertySources() {"
"CompositePropertySource.java:118"$0$0$0$2$30$"		return this.propertySources;"
"CompositePropertySource.java:119"$0$0$0$1$2$"	}"
"CompositePropertySource.java:120"$0$0$0$0$0$""
"CompositePropertySource.java:121"$0$0$0$0$0$""
"CompositePropertySource.java:122"$0$0$0$1$10$"	@Override"
"CompositePropertySource.java:123"$0$0$0$4$27$"	public String toString() {"
"CompositePropertySource.java:124"$2$0$0$14$114$"		return getClass().getSimpleName() + "" {name='"" + this.name + ""', propertySources="" + this.propertySources + ""}"";"
"CompositePropertySource.java:125"$0$0$0$1$2$"	}"
"CompositePropertySource.java:126"$0$0$0$0$0$""
"CompositePropertySource.java:127"$0$0$0$1$1$"}"
"SocketUtils.java:1"$0$0$0$1$2$"/*"
"SocketUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"SocketUtils.java:3"$0$0$0$1$2$" *"
"SocketUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SocketUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SocketUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SocketUtils.java:7"$0$0$0$1$2$" *"
"SocketUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SocketUtils.java:9"$0$0$0$1$2$" *"
"SocketUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SocketUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SocketUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SocketUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SocketUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"SocketUtils.java:15"$0$0$0$1$3$" */"
"SocketUtils.java:16"$0$0$0$0$0$""
"SocketUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"SocketUtils.java:18"$0$0$0$0$0$""
"SocketUtils.java:19"$0$0$0$2$31$"import java.net.DatagramSocket;"
"SocketUtils.java:20"$0$0$0$2$28$"import java.net.InetAddress;"
"SocketUtils.java:21"$0$0$0$2$29$"import java.net.ServerSocket;"
"SocketUtils.java:22"$0$0$0$2$24$"import java.util.Random;"
"SocketUtils.java:23"$0$0$0$2$27$"import java.util.SortedSet;"
"SocketUtils.java:24"$0$0$0$2$25$"import java.util.TreeSet;"
"SocketUtils.java:25"$0$0$0$0$0$""
"SocketUtils.java:26"$0$0$0$2$37$"import javax.net.ServerSocketFactory;"
"SocketUtils.java:27"$0$0$0$0$0$""
"SocketUtils.java:28"$0$0$0$1$3$"/**"
"SocketUtils.java:29"$0$0$0$12$79$" * Simple utility methods for working with network sockets &mdash; for example,"
"SocketUtils.java:30"$0$0$0$8$52$" * for finding available ports on {@code localhost}."
"SocketUtils.java:31"$0$0$0$1$2$" *"
"SocketUtils.java:32"$0$0$0$15$80$" * <p>Within this class, a TCP port refers to a port for a {@link ServerSocket};"
"SocketUtils.java:33"$0$0$0$13$69$" * whereas, a UDP port refers to a port for a {@link DatagramSocket}."
"SocketUtils.java:34"$0$0$0$1$2$" *"
"SocketUtils.java:35"$0$0$0$4$22$" * @author Sam Brannen"
"SocketUtils.java:36"$0$0$0$4$19$" * @author Ben Hale"
"SocketUtils.java:37"$0$0$0$4$24$" * @author Arjen Poutsma"
"SocketUtils.java:38"$0$0$0$4$25$" * @author Gunnar Hillert"
"SocketUtils.java:39"$0$0$0$4$23$" * @author Gary Russell"
"SocketUtils.java:40"$0$0$0$3$13$" * @since 4.0"
"SocketUtils.java:41"$0$0$0$1$3$" */"
"SocketUtils.java:42"$0$0$0$4$26$"public class SocketUtils {"
"SocketUtils.java:43"$0$0$0$0$0$""
"SocketUtils.java:44"$0$0$0$1$4$"	/**"
"SocketUtils.java:45"$0$0$0$13$76$"	 * The default minimum value for port ranges used when finding an available"
"SocketUtils.java:46"$0$0$0$3$16$"	 * socket port."
"SocketUtils.java:47"$0$0$0$1$4$"	 */"
"SocketUtils.java:48"$0$0$0$7$47$"	public static final int PORT_RANGE_MIN = 1024;"
"SocketUtils.java:49"$0$0$0$0$0$""
"SocketUtils.java:50"$0$0$0$1$4$"	/**"
"SocketUtils.java:51"$0$0$0$13$76$"	 * The default maximum value for port ranges used when finding an available"
"SocketUtils.java:52"$0$0$0$3$16$"	 * socket port."
"SocketUtils.java:53"$0$0$0$1$4$"	 */"
"SocketUtils.java:54"$0$0$0$7$48$"	public static final int PORT_RANGE_MAX = 65535;"
"SocketUtils.java:55"$0$0$0$0$0$""
"SocketUtils.java:56"$0$0$0$0$0$""
"SocketUtils.java:57"$0$0$0$8$77$"	private static final Random random = new Random(System.currentTimeMillis());"
"SocketUtils.java:58"$0$0$0$0$0$""
"SocketUtils.java:59"$0$0$0$0$0$""
"SocketUtils.java:60"$0$0$0$1$4$"	/**"
"SocketUtils.java:61"$0$0$0$10$75$"	 * Although {@code SocketUtils} consists solely of static utility methods,"
"SocketUtils.java:62"$0$0$0$7$53$"	 * this constructor is intentionally {@code public}."
"SocketUtils.java:63"$0$0$0$2$22$"	 * <h4>Rationale</h4>"
"SocketUtils.java:64"$0$0$0$12$68$"	 * <p>Static methods from this class may be invoked from within XML"
"SocketUtils.java:65"$0$0$0$11$75$"	 * configuration files using the Spring Expression Language (SpEL) and the"
"SocketUtils.java:66"$0$0$0$3$21$"	 * following syntax."
"SocketUtils.java:67"$0$0$0$6$137$"	 * <pre><code>&lt;bean id=""bean1"" ... p:port=""#{T(org.springframework.util.SocketUtils).findAvailableTcpPort(12000)}"" /&gt;</code></pre>"
"SocketUtils.java:68"$0$0$0$13$77$"	 * If this constructor were {@code private}, you would be required to supply"
"SocketUtils.java:69"$0$0$0$14$81$"	 * the fully qualified class name to SpEL's {@code T()} function for each usage."
"SocketUtils.java:70"$0$0$0$14$79$"	 * Thus, the fact that this constructor is {@code public} allows you to reduce"
"SocketUtils.java:71"$0$0$0$13$80$"	 * boilerplate configuration with SpEL as can be seen in the following example."
"SocketUtils.java:72"$0$0$0$5$91$"	 * <pre><code>&lt;bean id=""socketUtils"" class=""org.springframework.util.SocketUtils"" /&gt;"
"SocketUtils.java:73"$0$0$0$6$85$"	 * &lt;bean id=""bean1"" ... p:port=""#{socketUtils.findAvailableTcpPort(12000)}"" /&gt;"
"SocketUtils.java:74"$0$0$0$6$98$"	 * &lt;bean id=""bean2"" ... p:port=""#{socketUtils.findAvailableTcpPort(30000)}"" /&gt;</code></pre>"
"SocketUtils.java:75"$0$0$0$1$4$"	 */"
"SocketUtils.java:76"$0$0$0$3$23$"	public SocketUtils() {"
"SocketUtils.java:77"$0$0$0$1$2$"	}"
"SocketUtils.java:78"$0$0$0$0$0$""
"SocketUtils.java:79"$0$0$0$0$0$""
"SocketUtils.java:80"$0$0$0$1$4$"	/**"
"SocketUtils.java:81"$0$0$0$11$63$"	 * Find an available TCP port randomly selected from the range"
"SocketUtils.java:82"$0$0$0$5$57$"	 * [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]."
"SocketUtils.java:83"$0$0$0$7$40$"	 * @return an available TCP port number"
"SocketUtils.java:84"$0$0$0$10$69$"	 * @throws IllegalStateException if no available port could be found"
"SocketUtils.java:85"$0$0$0$1$4$"	 */"
"SocketUtils.java:86"$0$0$0$5$43$"	public static int findAvailableTcpPort() {"
"SocketUtils.java:87"$0$0$0$2$46$"		return findAvailableTcpPort(PORT_RANGE_MIN);"
"SocketUtils.java:88"$0$0$0$1$2$"	}"
"SocketUtils.java:89"$0$0$0$0$0$""
"SocketUtils.java:90"$0$0$0$1$4$"	/**"
"SocketUtils.java:91"$0$0$0$11$63$"	 * Find an available TCP port randomly selected from the range"
"SocketUtils.java:92"$0$0$0$5$48$"	 * [{@code minPort}, {@value #PORT_RANGE_MAX}]."
"SocketUtils.java:93"$0$0$0$7$42$"	 * @param minPort the minimum port number"
"SocketUtils.java:94"$0$0$0$7$40$"	 * @return an available TCP port number"
"SocketUtils.java:95"$0$0$0$10$69$"	 * @throws IllegalStateException if no available port could be found"
"SocketUtils.java:96"$0$0$0$1$4$"	 */"
"SocketUtils.java:97"$0$0$0$6$54$"	public static int findAvailableTcpPort(int minPort) {"
"SocketUtils.java:98"$0$0$0$3$55$"		return findAvailableTcpPort(minPort, PORT_RANGE_MAX);"
"SocketUtils.java:99"$0$0$0$1$2$"	}"
"SocketUtils.java:100"$0$0$0$0$0$""
"SocketUtils.java:101"$0$0$0$1$4$"	/**"
"SocketUtils.java:102"$0$0$0$11$63$"	 * Find an available TCP port randomly selected from the range"
"SocketUtils.java:103"$0$0$0$5$39$"	 * [{@code minPort}, {@code maxPort}]."
"SocketUtils.java:104"$0$0$0$7$42$"	 * @param minPort the minimum port number"
"SocketUtils.java:105"$0$0$0$7$42$"	 * @param maxPort the maximum port number"
"SocketUtils.java:106"$0$0$0$7$40$"	 * @return an available TCP port number"
"SocketUtils.java:107"$0$0$0$10$69$"	 * @throws IllegalStateException if no available port could be found"
"SocketUtils.java:108"$0$0$0$1$4$"	 */"
"SocketUtils.java:109"$0$0$0$8$67$"	public static int findAvailableTcpPort(int minPort, int maxPort) {"
"SocketUtils.java:110"$0$0$0$3$60$"		return SocketType.TCP.findAvailablePort(minPort, maxPort);"
"SocketUtils.java:111"$0$0$0$1$2$"	}"
"SocketUtils.java:112"$0$0$0$0$0$""
"SocketUtils.java:113"$0$0$0$1$4$"	/**"
"SocketUtils.java:114"$0$0$0$12$76$"	 * Find the requested number of available TCP ports, each randomly selected"
"SocketUtils.java:115"$0$0$0$8$72$"	 * from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]."
"SocketUtils.java:116"$0$0$0$10$61$"	 * @param numRequested the number of available ports to find"
"SocketUtils.java:117"$0$0$0$10$54$"	 * @return a sorted set of available TCP port numbers"
"SocketUtils.java:118"$0$0$0$14$95$"	 * @throws IllegalStateException if the requested number of available ports could not be found"
"SocketUtils.java:119"$0$0$0$1$4$"	 */"
"SocketUtils.java:120"$0$0$0$6$75$"	public static SortedSet<Integer> findAvailableTcpPorts(int numRequested) {"
"SocketUtils.java:121"$0$0$0$4$77$"		return findAvailableTcpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX);"
"SocketUtils.java:122"$0$0$0$1$2$"	}"
"SocketUtils.java:123"$0$0$0$0$0$""
"SocketUtils.java:124"$0$0$0$1$4$"	/**"
"SocketUtils.java:125"$0$0$0$12$76$"	 * Find the requested number of available TCP ports, each randomly selected"
"SocketUtils.java:126"$0$0$0$8$54$"	 * from the range [{@code minPort}, {@code maxPort}]."
"SocketUtils.java:127"$0$0$0$10$61$"	 * @param numRequested the number of available ports to find"
"SocketUtils.java:128"$0$0$0$7$42$"	 * @param minPort the minimum port number"
"SocketUtils.java:129"$0$0$0$7$42$"	 * @param maxPort the maximum port number"
"SocketUtils.java:130"$0$0$0$10$54$"	 * @return a sorted set of available TCP port numbers"
"SocketUtils.java:131"$0$0$0$14$95$"	 * @throws IllegalStateException if the requested number of available ports could not be found"
"SocketUtils.java:132"$0$0$0$1$4$"	 */"
"SocketUtils.java:133"$0$0$0$10$101$"	public static SortedSet<Integer> findAvailableTcpPorts(int numRequested, int minPort, int maxPort) {"
"SocketUtils.java:134"$0$0$0$4$75$"		return SocketType.TCP.findAvailablePorts(numRequested, minPort, maxPort);"
"SocketUtils.java:135"$0$0$0$1$2$"	}"
"SocketUtils.java:136"$0$0$0$0$0$""
"SocketUtils.java:137"$0$0$0$1$4$"	/**"
"SocketUtils.java:138"$0$0$0$11$63$"	 * Find an available UDP port randomly selected from the range"
"SocketUtils.java:139"$0$0$0$5$57$"	 * [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]."
"SocketUtils.java:140"$0$0$0$7$40$"	 * @return an available UDP port number"
"SocketUtils.java:141"$0$0$0$10$69$"	 * @throws IllegalStateException if no available port could be found"
"SocketUtils.java:142"$0$0$0$1$4$"	 */"
"SocketUtils.java:143"$0$0$0$5$43$"	public static int findAvailableUdpPort() {"
"SocketUtils.java:144"$0$0$0$2$46$"		return findAvailableUdpPort(PORT_RANGE_MIN);"
"SocketUtils.java:145"$0$0$0$1$2$"	}"
"SocketUtils.java:146"$0$0$0$0$0$""
"SocketUtils.java:147"$0$0$0$1$4$"	/**"
"SocketUtils.java:148"$0$0$0$11$63$"	 * Find an available UDP port randomly selected from the range"
"SocketUtils.java:149"$0$0$0$5$48$"	 * [{@code minPort}, {@value #PORT_RANGE_MAX}]."
"SocketUtils.java:150"$0$0$0$7$42$"	 * @param minPort the minimum port number"
"SocketUtils.java:151"$0$0$0$7$40$"	 * @return an available UDP port number"
"SocketUtils.java:152"$0$0$0$10$69$"	 * @throws IllegalStateException if no available port could be found"
"SocketUtils.java:153"$0$0$0$1$4$"	 */"
"SocketUtils.java:154"$0$0$0$6$54$"	public static int findAvailableUdpPort(int minPort) {"
"SocketUtils.java:155"$0$0$0$3$55$"		return findAvailableUdpPort(minPort, PORT_RANGE_MAX);"
"SocketUtils.java:156"$0$0$0$1$2$"	}"
"SocketUtils.java:157"$0$0$0$0$0$""
"SocketUtils.java:158"$0$0$0$1$4$"	/**"
"SocketUtils.java:159"$0$0$0$11$63$"	 * Find an available UDP port randomly selected from the range"
"SocketUtils.java:160"$0$0$0$5$39$"	 * [{@code minPort}, {@code maxPort}]."
"SocketUtils.java:161"$0$0$0$7$42$"	 * @param minPort the minimum port number"
"SocketUtils.java:162"$0$0$0$7$42$"	 * @param maxPort the maximum port number"
"SocketUtils.java:163"$0$0$0$7$40$"	 * @return an available UDP port number"
"SocketUtils.java:164"$0$0$0$10$69$"	 * @throws IllegalStateException if no available port could be found"
"SocketUtils.java:165"$0$0$0$1$4$"	 */"
"SocketUtils.java:166"$0$0$0$8$67$"	public static int findAvailableUdpPort(int minPort, int maxPort) {"
"SocketUtils.java:167"$0$0$0$3$60$"		return SocketType.UDP.findAvailablePort(minPort, maxPort);"
"SocketUtils.java:168"$0$0$0$1$2$"	}"
"SocketUtils.java:169"$0$0$0$0$0$""
"SocketUtils.java:170"$0$0$0$1$4$"	/**"
"SocketUtils.java:171"$0$0$0$12$76$"	 * Find the requested number of available UDP ports, each randomly selected"
"SocketUtils.java:172"$0$0$0$8$72$"	 * from the range [{@value #PORT_RANGE_MIN}, {@value #PORT_RANGE_MAX}]."
"SocketUtils.java:173"$0$0$0$10$61$"	 * @param numRequested the number of available ports to find"
"SocketUtils.java:174"$0$0$0$10$54$"	 * @return a sorted set of available UDP port numbers"
"SocketUtils.java:175"$0$0$0$14$95$"	 * @throws IllegalStateException if the requested number of available ports could not be found"
"SocketUtils.java:176"$0$0$0$1$4$"	 */"
"SocketUtils.java:177"$0$0$0$6$75$"	public static SortedSet<Integer> findAvailableUdpPorts(int numRequested) {"
"SocketUtils.java:178"$0$0$0$4$77$"		return findAvailableUdpPorts(numRequested, PORT_RANGE_MIN, PORT_RANGE_MAX);"
"SocketUtils.java:179"$0$0$0$1$2$"	}"
"SocketUtils.java:180"$0$0$0$0$0$""
"SocketUtils.java:181"$0$0$0$1$4$"	/**"
"SocketUtils.java:182"$0$0$0$12$76$"	 * Find the requested number of available UDP ports, each randomly selected"
"SocketUtils.java:183"$0$0$0$8$54$"	 * from the range [{@code minPort}, {@code maxPort}]."
"SocketUtils.java:184"$0$0$0$10$61$"	 * @param numRequested the number of available ports to find"
"SocketUtils.java:185"$0$0$0$7$42$"	 * @param minPort the minimum port number"
"SocketUtils.java:186"$0$0$0$7$42$"	 * @param maxPort the maximum port number"
"SocketUtils.java:187"$0$0$0$10$54$"	 * @return a sorted set of available UDP port numbers"
"SocketUtils.java:188"$0$0$0$14$95$"	 * @throws IllegalStateException if the requested number of available ports could not be found"
"SocketUtils.java:189"$0$0$0$1$4$"	 */"
"SocketUtils.java:190"$0$0$0$10$101$"	public static SortedSet<Integer> findAvailableUdpPorts(int numRequested, int minPort, int maxPort) {"
"SocketUtils.java:191"$0$0$0$4$75$"		return SocketType.UDP.findAvailablePorts(numRequested, minPort, maxPort);"
"SocketUtils.java:192"$0$0$0$1$2$"	}"
"SocketUtils.java:193"$0$0$0$0$0$""
"SocketUtils.java:194"$0$0$0$0$0$""
"SocketUtils.java:195"$0$0$0$4$26$"	private enum SocketType {"
"SocketUtils.java:196"$0$0$0$0$0$""
"SocketUtils.java:197"$0$0$0$2$7$"		TCP {"
"SocketUtils.java:198"$0$0$0$1$12$"			@Override"
"SocketUtils.java:199"$0$0$0$5$48$"			protected boolean isPortAvailable(int port) {"
"SocketUtils.java:200"$0$0$0$2$9$"				try {"
"SocketUtils.java:201"$1$0$0$4$85$"					ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket("
"SocketUtils.java:202"$1$0$0$3$52$"							port, 1, InetAddress.getByName(""localhost""));"
"SocketUtils.java:203"$0$0$0$1$26$"					serverSocket.close();"
"SocketUtils.java:204"$0$0$0$2$17$"					return true;"
"SocketUtils.java:205"$0$0$0$1$5$"				}"
"SocketUtils.java:206"$0$0$0$4$26$"				catch (Exception ex) {"
"SocketUtils.java:207"$0$0$0$2$18$"					return false;"
"SocketUtils.java:208"$0$0$0$1$5$"				}"
"SocketUtils.java:209"$0$0$0$1$4$"			}"
"SocketUtils.java:210"$0$0$0$1$4$"		},"
"SocketUtils.java:211"$0$0$0$0$0$""
"SocketUtils.java:212"$0$0$0$2$7$"		UDP {"
"SocketUtils.java:213"$0$0$0$1$12$"			@Override"
"SocketUtils.java:214"$0$0$0$5$48$"			protected boolean isPortAvailable(int port) {"
"SocketUtils.java:215"$0$0$0$2$9$"				try {"
"SocketUtils.java:216"$1$0$0$6$90$"					DatagramSocket socket = new DatagramSocket(port, InetAddress.getByName(""localhost""));"
"SocketUtils.java:217"$0$0$0$1$20$"					socket.close();"
"SocketUtils.java:218"$0$0$0$2$17$"					return true;"
"SocketUtils.java:219"$0$0$0$1$5$"				}"
"SocketUtils.java:220"$0$0$0$4$26$"				catch (Exception ex) {"
"SocketUtils.java:221"$0$0$0$2$18$"					return false;"
"SocketUtils.java:222"$0$0$0$1$5$"				}"
"SocketUtils.java:223"$0$0$0$1$4$"			}"
"SocketUtils.java:224"$0$0$0$1$4$"		};"
"SocketUtils.java:225"$0$0$0$0$0$""
"SocketUtils.java:226"$0$0$0$1$5$"		/**"
"SocketUtils.java:227"$0$0$0$11$67$"		 * Determine if the specified port for this {@code SocketType} is"
"SocketUtils.java:228"$0$0$0$6$46$"		 * currently available on {@code localhost}."
"SocketUtils.java:229"$0$0$0$1$5$"		 */"
"SocketUtils.java:230"$0$0$0$5$55$"		protected abstract boolean isPortAvailable(int port);"
"SocketUtils.java:231"$0$0$0$0$0$""
"SocketUtils.java:232"$0$0$0$1$5$"		/**"
"SocketUtils.java:233"$0$0$0$9$54$"		 * Find a pseudo-random port number within the range"
"SocketUtils.java:234"$0$0$0$5$40$"		 * [{@code minPort}, {@code maxPort}]."
"SocketUtils.java:235"$0$0$0$7$43$"		 * @param minPort the minimum port number"
"SocketUtils.java:236"$0$0$0$7$43$"		 * @param maxPort the maximum port number"
"SocketUtils.java:237"$0$0$0$10$60$"		 * @return a random port number within the specified range"
"SocketUtils.java:238"$0$0$0$1$5$"		 */"
"SocketUtils.java:239"$0$0$0$7$56$"		private int findRandomPort(int minPort, int maxPort) {"
"SocketUtils.java:240"$0$0$0$6$37$"			int portRange = maxPort - minPort;"
"SocketUtils.java:241"$0$0$0$6$50$"			return minPort + random.nextInt(portRange + 1);"
"SocketUtils.java:242"$0$0$0$1$3$"		}"
"SocketUtils.java:243"$0$0$0$0$0$""
"SocketUtils.java:244"$0$0$0$1$5$"		/**"
"SocketUtils.java:245"$0$0$0$11$74$"		 * Find an available port for this {@code SocketType}, randomly selected"
"SocketUtils.java:246"$0$0$0$8$55$"		 * from the range [{@code minPort}, {@code maxPort}]."
"SocketUtils.java:247"$0$0$0$7$43$"		 * @param minPort the minimum port number"
"SocketUtils.java:248"$0$0$0$7$43$"		 * @param maxPort the maximum port number"
"SocketUtils.java:249"$0$0$0$10$58$"		 * @return an available port number for this socket type"
"SocketUtils.java:250"$0$0$0$10$70$"		 * @throws IllegalStateException if no available port could be found"
"SocketUtils.java:251"$0$0$0$1$5$"		 */"
"SocketUtils.java:252"$0$0$0$6$51$"		int findAvailablePort(int minPort, int maxPort) {"
"SocketUtils.java:253"$0$0$0$9$66$"			Assert.isTrue(minPort > 0, ""'minPort' must be greater than 0"");"
"SocketUtils.java:254"$0$0$0$12$93$"			Assert.isTrue(maxPort >= minPort, ""'maxPort' must be greater than or equal to 'minPort'"");"
"SocketUtils.java:255"$0$0$0$14$105$"			Assert.isTrue(maxPort <= PORT_RANGE_MAX, ""'maxPort' must be less than or equal to "" + PORT_RANGE_MAX);"
"SocketUtils.java:256"$0$0$0$0$0$""
"SocketUtils.java:257"$0$0$0$6$37$"			int portRange = maxPort - minPort;"
"SocketUtils.java:258"$0$0$0$2$21$"			int candidatePort;"
"SocketUtils.java:259"$0$0$0$4$25$"			int searchCounter = 0;"
"SocketUtils.java:260"$0$0$0$2$7$"			do {"
"SocketUtils.java:261"$0$0$0$5$36$"				if (searchCounter > portRange) {"
"SocketUtils.java:262"$0$0$0$3$51$"					throw new IllegalStateException(String.format("
"SocketUtils.java:263"$0$0$0$15$85$"							""Could not find an available %s port in the range [%d, %d] after %d attempts"","
"SocketUtils.java:264"$0$0$0$4$49$"							name(), minPort, maxPort, searchCounter));"
"SocketUtils.java:265"$0$0$0$1$5$"				}"
"SocketUtils.java:266"$0$0$0$4$53$"				candidatePort = findRandomPort(minPort, maxPort);"
"SocketUtils.java:267"$0$0$0$1$20$"				searchCounter++;"
"SocketUtils.java:268"$0$0$0$1$4$"			}"
"SocketUtils.java:269"$0$0$0$2$43$"			while (!isPortAvailable(candidatePort));"
"SocketUtils.java:270"$0$0$0$0$0$""
"SocketUtils.java:271"$0$0$0$2$24$"			return candidatePort;"
"SocketUtils.java:272"$0$0$0$1$3$"		}"
"SocketUtils.java:273"$0$0$0$0$0$""
"SocketUtils.java:274"$0$0$0$1$5$"		/**"
"SocketUtils.java:275"$0$0$0$12$78$"		 * Find the requested number of available ports for this {@code SocketType},"
"SocketUtils.java:276"$0$0$0$11$78$"		 * each randomly selected from the range [{@code minPort}, {@code maxPort}]."
"SocketUtils.java:277"$0$0$0$10$62$"		 * @param numRequested the number of available ports to find"
"SocketUtils.java:278"$0$0$0$7$43$"		 * @param minPort the minimum port number"
"SocketUtils.java:279"$0$0$0$7$43$"		 * @param maxPort the maximum port number"
"SocketUtils.java:280"$0$0$0$13$72$"		 * @return a sorted set of available port numbers for this socket type"
"SocketUtils.java:281"$0$0$0$14$96$"		 * @throws IllegalStateException if the requested number of available ports could not be found"
"SocketUtils.java:282"$0$0$0$1$5$"		 */"
"SocketUtils.java:283"$0$0$0$8$85$"		SortedSet<Integer> findAvailablePorts(int numRequested, int minPort, int maxPort) {"
"SocketUtils.java:284"$0$0$0$9$66$"			Assert.isTrue(minPort > 0, ""'minPort' must be greater than 0"");"
"SocketUtils.java:285"$0$0$0$9$80$"			Assert.isTrue(maxPort > minPort, ""'maxPort' must be greater than 'minPort'"");"
"SocketUtils.java:286"$0$0$0$14$105$"			Assert.isTrue(maxPort <= PORT_RANGE_MAX, ""'maxPort' must be less than or equal to "" + PORT_RANGE_MAX);"
"SocketUtils.java:287"$0$0$0$9$76$"			Assert.isTrue(numRequested > 0, ""'numRequested' must be greater than 0"");"
"SocketUtils.java:288"$0$0$0$5$53$"			Assert.isTrue((maxPort - minPort) >= numRequested,"
"SocketUtils.java:289"$0$0$0$9$70$"					""'numRequested' must not be greater than 'maxPort' - 'minPort'"");"
"SocketUtils.java:290"$0$0$0$0$0$""
"SocketUtils.java:291"$0$0$0$5$55$"			SortedSet<Integer> availablePorts = new TreeSet<>();"
"SocketUtils.java:292"$0$0$0$4$24$"			int attemptCount = 0;"
"SocketUtils.java:293"$0$0$0$11$91$"			while ((++attemptCount <= numRequested + 100) && availablePorts.size() < numRequested) {"
"SocketUtils.java:294"$0$0$0$2$60$"				availablePorts.add(findAvailablePort(minPort, maxPort));"
"SocketUtils.java:295"$0$0$0$1$4$"			}"
"SocketUtils.java:296"$0$0$0$0$0$""
"SocketUtils.java:297"$0$0$0$5$47$"			if (availablePorts.size() != numRequested) {"
"SocketUtils.java:298"$0$0$0$3$50$"				throw new IllegalStateException(String.format("
"SocketUtils.java:299"$0$0$0$12$67$"						""Could not find %d available %s ports in the range [%d, %d]"","
"SocketUtils.java:300"$0$0$0$4$47$"						numRequested, name(), minPort, maxPort));"
"SocketUtils.java:301"$0$0$0$1$4$"			}"
"SocketUtils.java:302"$0$0$0$0$0$""
"SocketUtils.java:303"$0$0$0$2$25$"			return availablePorts;"
"SocketUtils.java:304"$0$0$0$1$3$"		}"
"SocketUtils.java:305"$0$0$0$1$2$"	}"
"SocketUtils.java:306"$0$0$0$0$0$""
"SocketUtils.java:307"$0$0$0$1$1$"}"
"MapToMapConverter.java:1"$0$0$0$1$2$"/*"
"MapToMapConverter.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"MapToMapConverter.java:3"$0$0$0$1$2$" *"
"MapToMapConverter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MapToMapConverter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MapToMapConverter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MapToMapConverter.java:7"$0$0$0$1$2$" *"
"MapToMapConverter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MapToMapConverter.java:9"$0$0$0$1$2$" *"
"MapToMapConverter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MapToMapConverter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MapToMapConverter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MapToMapConverter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MapToMapConverter.java:14"$0$0$0$5$33$" * limitations under the License."
"MapToMapConverter.java:15"$0$0$0$1$3$" */"
"MapToMapConverter.java:16"$0$0$0$0$0$""
"MapToMapConverter.java:17"$0$0$0$2$49$"package org.springframework.core.convert.support;"
"MapToMapConverter.java:18"$0$0$0$0$0$""
"MapToMapConverter.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"MapToMapConverter.java:20"$0$0$0$2$29$"import java.util.Collections;"
"MapToMapConverter.java:21"$0$0$0$2$22$"import java.util.List;"
"MapToMapConverter.java:22"$0$0$0$2$21$"import java.util.Map;"
"MapToMapConverter.java:23"$0$0$0$2$21$"import java.util.Set;"
"MapToMapConverter.java:24"$0$0$0$0$0$""
"MapToMapConverter.java:25"$0$0$0$2$50$"import org.springframework.core.CollectionFactory;"
"MapToMapConverter.java:26"$0$0$0$2$58$"import org.springframework.core.convert.ConversionService;"
"MapToMapConverter.java:27"$0$0$0$2$55$"import org.springframework.core.convert.TypeDescriptor;"
"MapToMapConverter.java:28"$0$0$0$2$78$"import org.springframework.core.convert.converter.ConditionalGenericConverter;"
"MapToMapConverter.java:29"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MapToMapConverter.java:30"$0$0$0$0$0$""
"MapToMapConverter.java:31"$0$0$0$1$3$"/**"
"MapToMapConverter.java:32"$0$0$0$7$33$" * Converts a Map to another Map."
"MapToMapConverter.java:33"$0$0$0$1$2$" *"
"MapToMapConverter.java:34"$1$0$0$16$83$" * <p>First, creates a new Map of the requested targetType with a size equal to the"
"MapToMapConverter.java:35"$1$0$0$18$88$" * size of the source Map. Then copies each element in the source map to the target map."
"MapToMapConverter.java:36"$1$0$0$15$89$" * Will perform a conversion from the source maps's parameterized K,V types to the target"
"MapToMapConverter.java:37"$0$0$0$7$46$" * map's parameterized types K,V if necessary."
"MapToMapConverter.java:38"$0$0$0$1$2$" *"
"MapToMapConverter.java:39"$0$0$0$4$23$" * @author Keith Donald"
"MapToMapConverter.java:40"$0$0$0$4$26$" * @author Juergen Hoeller"
"MapToMapConverter.java:41"$0$0$0$3$13$" * @since 3.0"
"MapToMapConverter.java:42"$0$0$0$1$3$" */"
"MapToMapConverter.java:43"$0$0$0$6$70$"final class MapToMapConverter implements ConditionalGenericConverter {"
"MapToMapConverter.java:44"$0$0$0$0$0$""
"MapToMapConverter.java:45"$0$0$0$4$51$"	private final ConversionService conversionService;"
"MapToMapConverter.java:46"$0$0$0$0$0$""
"MapToMapConverter.java:47"$0$0$0$0$0$""
"MapToMapConverter.java:48"$0$0$0$4$64$"	public MapToMapConverter(ConversionService conversionService) {"
"MapToMapConverter.java:49"$0$0$0$3$45$"		this.conversionService = conversionService;"
"MapToMapConverter.java:50"$0$0$0$1$2$"	}"
"MapToMapConverter.java:51"$0$0$0$0$0$""
"MapToMapConverter.java:52"$0$0$0$0$0$""
"MapToMapConverter.java:53"$0$0$0$1$10$"	@Override"
"MapToMapConverter.java:54"$1$0$0$4$52$"	public Set<ConvertiblePair> getConvertibleTypes() {"
"MapToMapConverter.java:55"$0$0$0$4$74$"		return Collections.singleton(new ConvertiblePair(Map.class, Map.class));"
"MapToMapConverter.java:56"$0$0$0$1$2$"	}"
"MapToMapConverter.java:57"$0$0$0$0$0$""
"MapToMapConverter.java:58"$0$0$0$1$10$"	@Override"
"MapToMapConverter.java:59"$1$0$0$7$79$"	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"MapToMapConverter.java:60"$2$0$0$6$90$"		return canConvertKey(sourceType, targetType) && canConvertValue(sourceType, targetType);"
"MapToMapConverter.java:61"$0$0$0$1$2$"	}"
"MapToMapConverter.java:62"$0$0$0$0$0$""
"MapToMapConverter.java:63"$0$0$0$1$10$"	@Override"
"MapToMapConverter.java:64"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"MapToMapConverter.java:65"$0$0$0$1$10$"	@Nullable"
"MapToMapConverter.java:66"$1$0$0$10$103$"	public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {"
"MapToMapConverter.java:67"$0$0$0$5$23$"		if (source == null) {"
"MapToMapConverter.java:68"$0$0$0$2$15$"			return null;"
"MapToMapConverter.java:69"$0$0$0$1$3$"		}"
"MapToMapConverter.java:70"$0$0$0$7$63$"		Map<Object, Object> sourceMap = (Map<Object, Object>) source;"
"MapToMapConverter.java:71"$0$0$0$0$0$""
"MapToMapConverter.java:72"$0$0$1$4$28$"		// Shortcut if possible..."
"MapToMapConverter.java:73"$2$0$0$4$66$"		boolean copyRequired = !targetType.getType().isInstance(source);"
"MapToMapConverter.java:74"$0$0$0$5$45$"		if (!copyRequired && sourceMap.isEmpty()) {"
"MapToMapConverter.java:75"$0$0$0$2$20$"			return sourceMap;"
"MapToMapConverter.java:76"$0$0$0$1$3$"		}"
"MapToMapConverter.java:77"$2$0$0$4$64$"		TypeDescriptor keyDesc = targetType.getMapKeyTypeDescriptor();"
"MapToMapConverter.java:78"$2$0$0$4$68$"		TypeDescriptor valueDesc = targetType.getMapValueTypeDescriptor();"
"MapToMapConverter.java:79"$0$0$0$0$0$""
"MapToMapConverter.java:80"$1$0$0$5$67$"		List<MapEntry> targetEntries = new ArrayList<>(sourceMap.size());"
"MapToMapConverter.java:81"$0$0$0$7$64$"		for (Map.Entry<Object, Object> entry : sourceMap.entrySet()) {"
"MapToMapConverter.java:82"$1$0$0$4$37$"			Object sourceKey = entry.getKey();"
"MapToMapConverter.java:83"$1$0$0$4$41$"			Object sourceValue = entry.getValue();"
"MapToMapConverter.java:84"$1$0$0$6$65$"			Object targetKey = convertKey(sourceKey, sourceType, keyDesc);"
"MapToMapConverter.java:85"$1$0$0$6$73$"			Object targetValue = convertValue(sourceValue, sourceType, valueDesc);"
"MapToMapConverter.java:86"$3$0$0$3$59$"			targetEntries.add(new MapEntry(targetKey, targetValue));"
"MapToMapConverter.java:87"$2$0$0$9$62$"			if (sourceKey != targetKey || sourceValue != targetValue) {"
"MapToMapConverter.java:88"$0$0$0$3$24$"				copyRequired = true;"
"MapToMapConverter.java:89"$0$0$0$1$4$"			}"
"MapToMapConverter.java:90"$0$0$0$1$3$"		}"
"MapToMapConverter.java:91"$0$0$0$3$22$"		if (!copyRequired) {"
"MapToMapConverter.java:92"$0$0$0$2$20$"			return sourceMap;"
"MapToMapConverter.java:93"$0$0$0$1$3$"		}"
"MapToMapConverter.java:94"$0$0$0$0$0$""
"MapToMapConverter.java:95"$3$0$0$5$83$"		Map<Object, Object> targetMap = CollectionFactory.createMap(targetType.getType(),"
"MapToMapConverter.java:96"$1$0$0$8$68$"				(keyDesc != null ? keyDesc.getType() : null), sourceMap.size());"
"MapToMapConverter.java:97"$0$0$0$0$0$""
"MapToMapConverter.java:98"$1$0$0$6$40$"		for (MapEntry entry : targetEntries) {"
"MapToMapConverter.java:99"$1$0$0$1$29$"			entry.addToMap(targetMap);"
"MapToMapConverter.java:100"$0$0$0$1$3$"		}"
"MapToMapConverter.java:101"$1$0$0$2$19$"		return targetMap;"
"MapToMapConverter.java:102"$0$0$0$1$2$"	}"
"MapToMapConverter.java:103"$0$0$0$0$0$""
"MapToMapConverter.java:104"$0$0$0$0$0$""
"MapToMapConverter.java:105"$0$0$1$3$20$"	// internal helpers"
"MapToMapConverter.java:106"$0$0$0$0$0$""
"MapToMapConverter.java:107"$1$0$0$7$86$"	private boolean canConvertKey(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"MapToMapConverter.java:108"$1$0$0$2$81$"		return ConversionUtils.canConvertElements(sourceType.getMapKeyTypeDescriptor(),"
"MapToMapConverter.java:109"$2$0$0$2$66$"				targetType.getMapKeyTypeDescriptor(), this.conversionService);"
"MapToMapConverter.java:110"$0$0$0$1$2$"	}"
"MapToMapConverter.java:111"$0$0$0$0$0$""
"MapToMapConverter.java:112"$1$0$0$7$88$"	private boolean canConvertValue(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"MapToMapConverter.java:113"$1$0$0$2$83$"		return ConversionUtils.canConvertElements(sourceType.getMapValueTypeDescriptor(),"
"MapToMapConverter.java:114"$2$0$0$2$68$"				targetType.getMapValueTypeDescriptor(), this.conversionService);"
"MapToMapConverter.java:115"$0$0$0$1$2$"	}"
"MapToMapConverter.java:116"$0$0$0$0$0$""
"MapToMapConverter.java:117"$0$0$0$1$10$"	@Nullable"
"MapToMapConverter.java:118"$1$0$0$10$110$"	private Object convertKey(Object sourceKey, TypeDescriptor sourceType, @Nullable TypeDescriptor targetType) {"
"MapToMapConverter.java:119"$1$0$0$5$27$"		if (targetType == null) {"
"MapToMapConverter.java:120"$0$0$0$2$20$"			return sourceKey;"
"MapToMapConverter.java:121"$0$0$0$1$3$"		}"
"MapToMapConverter.java:122"$2$0$0$4$110$"		return this.conversionService.convert(sourceKey, sourceType.getMapKeyTypeDescriptor(sourceKey), targetType);"
"MapToMapConverter.java:123"$0$0$0$1$2$"	}"
"MapToMapConverter.java:124"$0$0$0$0$0$""
"MapToMapConverter.java:125"$0$0$0$1$10$"	@Nullable"
"MapToMapConverter.java:126"$1$0$0$10$114$"	private Object convertValue(Object sourceValue, TypeDescriptor sourceType, @Nullable TypeDescriptor targetType) {"
"MapToMapConverter.java:127"$1$0$0$5$27$"		if (targetType == null) {"
"MapToMapConverter.java:128"$0$0$0$2$22$"			return sourceValue;"
"MapToMapConverter.java:129"$0$0$0$1$3$"		}"
"MapToMapConverter.java:130"$2$0$0$4$116$"		return this.conversionService.convert(sourceValue, sourceType.getMapValueTypeDescriptor(sourceValue), targetType);"
"MapToMapConverter.java:131"$0$0$0$1$2$"	}"
"MapToMapConverter.java:132"$0$0$0$0$0$""
"MapToMapConverter.java:133"$0$0$0$0$0$""
"MapToMapConverter.java:134"$0$0$0$5$32$"	private static class MapEntry {"
"MapToMapConverter.java:135"$0$0$0$0$0$""
"MapToMapConverter.java:136"$0$0$0$1$11$"		@Nullable"
"MapToMapConverter.java:137"$0$0$0$4$27$"		private final Object key;"
"MapToMapConverter.java:138"$0$0$0$0$0$""
"MapToMapConverter.java:139"$0$0$0$1$11$"		@Nullable"
"MapToMapConverter.java:140"$0$0$0$4$29$"		private final Object value;"
"MapToMapConverter.java:141"$0$0$0$0$0$""
"MapToMapConverter.java:142"$0$0$0$8$65$"		public MapEntry(@Nullable Object key, @Nullable Object value) {"
"MapToMapConverter.java:143"$0$0$0$3$18$"			this.key = key;"
"MapToMapConverter.java:144"$0$0$0$3$22$"			this.value = value;"
"MapToMapConverter.java:145"$0$0$0$1$3$"		}"
"MapToMapConverter.java:146"$0$0$0$0$0$""
"MapToMapConverter.java:147"$0$0$0$6$49$"		public void addToMap(Map<Object, Object> map) {"
"MapToMapConverter.java:148"$0$0$0$2$33$"			map.put(this.key, this.value);"
"MapToMapConverter.java:149"$0$0$0$1$3$"		}"
"MapToMapConverter.java:150"$0$0$0$1$2$"	}"
"MapToMapConverter.java:151"$0$0$0$0$0$""
"MapToMapConverter.java:152"$0$0$0$1$1$"}"
"FileSystemUtils.java:1"$0$0$0$1$2$"/*"
"FileSystemUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"FileSystemUtils.java:3"$0$0$0$1$2$" *"
"FileSystemUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"FileSystemUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"FileSystemUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"FileSystemUtils.java:7"$0$0$0$1$2$" *"
"FileSystemUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"FileSystemUtils.java:9"$0$0$0$1$2$" *"
"FileSystemUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"FileSystemUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"FileSystemUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"FileSystemUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"FileSystemUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"FileSystemUtils.java:15"$0$0$0$1$3$" */"
"FileSystemUtils.java:16"$0$0$0$0$0$""
"FileSystemUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"FileSystemUtils.java:18"$0$0$0$0$0$""
"FileSystemUtils.java:19"$0$0$0$2$20$"import java.io.File;"
"FileSystemUtils.java:20"$0$0$0$2$27$"import java.io.IOException;"
"FileSystemUtils.java:21"$0$0$0$2$37$"import java.nio.file.FileVisitResult;"
"FileSystemUtils.java:22"$0$0$0$2$27$"import java.nio.file.Files;"
"FileSystemUtils.java:23"$0$0$0$2$26$"import java.nio.file.Path;"
"FileSystemUtils.java:24"$0$0$0$2$39$"import java.nio.file.SimpleFileVisitor;"
"FileSystemUtils.java:25"$0$0$0$2$40$"import java.nio.file.StandardCopyOption;"
"FileSystemUtils.java:26"$0$0$0$2$51$"import java.nio.file.attribute.BasicFileAttributes;"
"FileSystemUtils.java:27"$0$0$0$2$25$"import java.util.EnumSet;"
"FileSystemUtils.java:28"$0$0$0$0$0$""
"FileSystemUtils.java:29"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"FileSystemUtils.java:30"$0$0$0$0$0$""
"FileSystemUtils.java:31"$0$0$0$3$57$"import static java.nio.file.FileVisitOption.FOLLOW_LINKS;"
"FileSystemUtils.java:32"$0$0$0$0$0$""
"FileSystemUtils.java:33"$0$0$0$1$3$"/**"
"FileSystemUtils.java:34"$0$0$0$9$52$" * Utility methods for working with the file system."
"FileSystemUtils.java:35"$0$0$0$1$2$" *"
"FileSystemUtils.java:36"$0$0$0$4$21$" * @author Rob Harrop"
"FileSystemUtils.java:37"$0$0$0$4$26$" * @author Juergen Hoeller"
"FileSystemUtils.java:38"$0$0$0$3$15$" * @since 2.5.3"
"FileSystemUtils.java:39"$0$0$0$3$20$" * @see java.io.File"
"FileSystemUtils.java:40"$0$0$0$3$26$" * @see java.nio.file.Path"
"FileSystemUtils.java:41"$0$0$0$3$27$" * @see java.nio.file.Files"
"FileSystemUtils.java:42"$0$0$0$1$3$" */"
"FileSystemUtils.java:43"$0$0$0$5$39$"public abstract class FileSystemUtils {"
"FileSystemUtils.java:44"$0$0$0$0$0$""
"FileSystemUtils.java:45"$0$0$0$1$4$"	/**"
"FileSystemUtils.java:46"$0$0$0$9$55$"	 * Delete the supplied {@link File} - for directories,"
"FileSystemUtils.java:47"$0$0$0$10$63$"	 * recursively delete any nested directories or files as well."
"FileSystemUtils.java:48"$0$0$0$11$71$"	 * <p>Note: Like {@link File#delete()}, this method does not throw any"
"FileSystemUtils.java:49"$0$0$0$12$70$"	 * exception but rather silently returns {@code false} in case of I/O"
"FileSystemUtils.java:50"$0$0$0$8$73$"	 * errors. Consider using {@link #deleteRecursively(Path)} for NIO-style"
"FileSystemUtils.java:51"$0$0$0$9$73$"	 * handling of I/O errors, clearly differentiating between non-existence"
"FileSystemUtils.java:52"$0$0$0$8$43$"	 * and failure to delete an existing file."
"FileSystemUtils.java:53"$0$0$0$9$47$"	 * @param root the root {@code File} to delete"
"FileSystemUtils.java:54"$0$0$0$11$70$"	 * @return {@code true} if the {@code File} was successfully deleted,"
"FileSystemUtils.java:55"$0$0$0$4$27$"	 * otherwise {@code false}"
"FileSystemUtils.java:56"$0$0$0$1$4$"	 */"
"FileSystemUtils.java:57"$0$0$0$7$63$"	public static boolean deleteRecursively(@Nullable File root) {"
"FileSystemUtils.java:58"$0$0$0$5$21$"		if (root == null) {"
"FileSystemUtils.java:59"$0$0$0$2$16$"			return false;"
"FileSystemUtils.java:60"$0$0$0$1$3$"		}"
"FileSystemUtils.java:61"$0$0$0$0$0$""
"FileSystemUtils.java:62"$0$0$0$2$7$"		try {"
"FileSystemUtils.java:63"$0$0$0$2$43$"			return deleteRecursively(root.toPath());"
"FileSystemUtils.java:64"$0$0$0$1$3$"		}"
"FileSystemUtils.java:65"$0$0$0$4$26$"		catch (IOException ex) {"
"FileSystemUtils.java:66"$0$0$0$2$16$"			return false;"
"FileSystemUtils.java:67"$0$0$0$1$3$"		}"
"FileSystemUtils.java:68"$0$0$0$1$2$"	}"
"FileSystemUtils.java:69"$0$0$0$0$0$""
"FileSystemUtils.java:70"$0$0$0$1$4$"	/**"
"FileSystemUtils.java:71"$0$0$0$9$61$"	 * Delete the supplied {@link File} &mdash; for directories,"
"FileSystemUtils.java:72"$0$0$0$10$63$"	 * recursively delete any nested directories or files as well."
"FileSystemUtils.java:73"$0$0$0$9$47$"	 * @param root the root {@code File} to delete"
"FileSystemUtils.java:74"$0$0$0$12$69$"	 * @return {@code true} if the {@code File} existed and was deleted,"
"FileSystemUtils.java:75"$0$0$0$9$40$"	 * or {@code false} if it did not exist"
"FileSystemUtils.java:76"$0$0$0$9$49$"	 * @throws IOException in the case of I/O errors"
"FileSystemUtils.java:77"$0$0$0$3$14$"	 * @since 5.0"
"FileSystemUtils.java:78"$0$0$0$1$4$"	 */"
"FileSystemUtils.java:79"$0$0$0$9$82$"	public static boolean deleteRecursively(@Nullable Path root) throws IOException {"
"FileSystemUtils.java:80"$0$0$0$5$21$"		if (root == null) {"
"FileSystemUtils.java:81"$0$0$0$2$16$"			return false;"
"FileSystemUtils.java:82"$0$0$0$1$3$"		}"
"FileSystemUtils.java:83"$0$0$0$3$28$"		if (!Files.exists(root)) {"
"FileSystemUtils.java:84"$0$0$0$2$16$"			return false;"
"FileSystemUtils.java:85"$0$0$0$1$3$"		}"
"FileSystemUtils.java:86"$0$0$0$0$0$""
"FileSystemUtils.java:87"$0$0$0$4$58$"		Files.walkFileTree(root, new SimpleFileVisitor<Path>() {"
"FileSystemUtils.java:88"$0$0$0$1$12$"			@Override"
"FileSystemUtils.java:89"$0$0$0$9$94$"			public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {"
"FileSystemUtils.java:90"$0$0$0$1$23$"				Files.delete(file);"
"FileSystemUtils.java:91"$0$0$0$2$36$"				return FileVisitResult.CONTINUE;"
"FileSystemUtils.java:92"$0$0$0$1$4$"			}"
"FileSystemUtils.java:93"$0$0$0$1$12$"			@Override"
"FileSystemUtils.java:94"$0$0$0$9$92$"			public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {"
"FileSystemUtils.java:95"$0$0$0$1$22$"				Files.delete(dir);"
"FileSystemUtils.java:96"$0$0$0$2$36$"				return FileVisitResult.CONTINUE;"
"FileSystemUtils.java:97"$0$0$0$1$4$"			}"
"FileSystemUtils.java:98"$0$0$0$1$5$"		});"
"FileSystemUtils.java:99"$0$0$0$2$14$"		return true;"
"FileSystemUtils.java:100"$0$0$0$1$2$"	}"
"FileSystemUtils.java:101"$0$0$0$0$0$""
"FileSystemUtils.java:102"$0$0$0$1$4$"	/**"
"FileSystemUtils.java:103"$0$0$0$10$67$"	 * Recursively copy the contents of the {@code src} file/directory"
"FileSystemUtils.java:104"$0$0$0$6$39$"	 * to the {@code dest} file/directory."
"FileSystemUtils.java:105"$0$0$0$6$35$"	 * @param src the source directory"
"FileSystemUtils.java:106"$0$0$0$6$41$"	 * @param dest the destination directory"
"FileSystemUtils.java:107"$0$0$0$9$49$"	 * @throws IOException in the case of I/O errors"
"FileSystemUtils.java:108"$0$0$0$1$4$"	 */"
"FileSystemUtils.java:109"$0$0$0$10$77$"	public static void copyRecursively(File src, File dest) throws IOException {"
"FileSystemUtils.java:110"$0$0$0$7$54$"		Assert.notNull(src, ""Source File must not be null"");"
"FileSystemUtils.java:111"$0$0$0$7$60$"		Assert.notNull(dest, ""Destination File must not be null"");"
"FileSystemUtils.java:112"$0$0$0$2$47$"		copyRecursively(src.toPath(), dest.toPath());"
"FileSystemUtils.java:113"$0$0$0$1$2$"	}"
"FileSystemUtils.java:114"$0$0$0$0$0$""
"FileSystemUtils.java:115"$0$0$0$1$4$"	/**"
"FileSystemUtils.java:116"$0$0$0$10$67$"	 * Recursively copy the contents of the {@code src} file/directory"
"FileSystemUtils.java:117"$0$0$0$6$39$"	 * to the {@code dest} file/directory."
"FileSystemUtils.java:118"$0$0$0$6$35$"	 * @param src the source directory"
"FileSystemUtils.java:119"$0$0$0$6$41$"	 * @param dest the destination directory"
"FileSystemUtils.java:120"$0$0$0$9$49$"	 * @throws IOException in the case of I/O errors"
"FileSystemUtils.java:121"$0$0$0$3$14$"	 * @since 5.0"
"FileSystemUtils.java:122"$0$0$0$1$4$"	 */"
"FileSystemUtils.java:123"$0$0$0$10$77$"	public static void copyRecursively(Path src, Path dest) throws IOException {"
"FileSystemUtils.java:124"$0$0$0$7$54$"		Assert.notNull(src, ""Source Path must not be null"");"
"FileSystemUtils.java:125"$0$0$0$7$60$"		Assert.notNull(dest, ""Destination Path must not be null"");"
"FileSystemUtils.java:126"$0$0$0$5$85$"		BasicFileAttributes srcAttr = Files.readAttributes(src, BasicFileAttributes.class);"
"FileSystemUtils.java:127"$0$0$0$0$0$""
"FileSystemUtils.java:128"$0$0$0$3$30$"		if (srcAttr.isDirectory()) {"
"FileSystemUtils.java:129"$0$0$0$6$103$"			Files.walkFileTree(src, EnumSet.of(FOLLOW_LINKS), Integer.MAX_VALUE, new SimpleFileVisitor<Path>() {"
"FileSystemUtils.java:130"$0$0$0$1$13$"				@Override"
"FileSystemUtils.java:131"$0$0$0$9$102$"				public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {"
"FileSystemUtils.java:132"$0$0$0$1$64$"					Files.createDirectories(dest.resolve(src.relativize(dir)));"
"FileSystemUtils.java:133"$0$0$0$2$37$"					return FileVisitResult.CONTINUE;"
"FileSystemUtils.java:134"$0$0$0$1$5$"				}"
"FileSystemUtils.java:135"$0$0$0$1$13$"				@Override"
"FileSystemUtils.java:136"$0$0$0$9$95$"				public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {"
"FileSystemUtils.java:137"$0$0$0$3$95$"					Files.copy(file, dest.resolve(src.relativize(file)), StandardCopyOption.REPLACE_EXISTING);"
"FileSystemUtils.java:138"$0$0$0$2$37$"					return FileVisitResult.CONTINUE;"
"FileSystemUtils.java:139"$0$0$0$1$5$"				}"
"FileSystemUtils.java:140"$0$0$0$1$6$"			});"
"FileSystemUtils.java:141"$0$0$0$1$3$"		}"
"FileSystemUtils.java:142"$0$0$0$4$37$"		else if (srcAttr.isRegularFile()) {"
"FileSystemUtils.java:143"$0$0$0$2$25$"			Files.copy(src, dest);"
"FileSystemUtils.java:144"$0$0$0$1$3$"		}"
"FileSystemUtils.java:145"$0$0$0$2$8$"		else {"
"FileSystemUtils.java:146"$0$0$0$10$85$"			throw new IllegalArgumentException(""Source File must denote a directory or file"");"
"FileSystemUtils.java:147"$0$0$0$1$3$"		}"
"FileSystemUtils.java:148"$0$0$0$1$2$"	}"
"FileSystemUtils.java:149"$0$0$0$0$0$""
"FileSystemUtils.java:150"$0$0$0$1$1$"}"
"AnnotationTypeMappings.java:1"$0$0$0$1$2$"/*"
"AnnotationTypeMappings.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"AnnotationTypeMappings.java:3"$0$0$0$1$2$" *"
"AnnotationTypeMappings.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationTypeMappings.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationTypeMappings.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationTypeMappings.java:7"$0$0$0$1$2$" *"
"AnnotationTypeMappings.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationTypeMappings.java:9"$0$0$0$1$2$" *"
"AnnotationTypeMappings.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationTypeMappings.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationTypeMappings.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationTypeMappings.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationTypeMappings.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationTypeMappings.java:15"$0$0$0$1$3$" */"
"AnnotationTypeMappings.java:16"$0$0$0$0$0$""
"AnnotationTypeMappings.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AnnotationTypeMappings.java:18"$0$0$0$0$0$""
"AnnotationTypeMappings.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"AnnotationTypeMappings.java:20"$0$0$0$2$28$"import java.util.ArrayDeque;"
"AnnotationTypeMappings.java:21"$0$0$0$2$27$"import java.util.ArrayList;"
"AnnotationTypeMappings.java:22"$0$0$0$2$23$"import java.util.Deque;"
"AnnotationTypeMappings.java:23"$0$0$0$2$22$"import java.util.List;"
"AnnotationTypeMappings.java:24"$0$0$0$2$21$"import java.util.Map;"
"AnnotationTypeMappings.java:25"$0$0$0$0$0$""
"AnnotationTypeMappings.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AnnotationTypeMappings.java:27"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"AnnotationTypeMappings.java:28"$0$0$0$0$0$""
"AnnotationTypeMappings.java:29"$0$0$0$1$3$"/**"
"AnnotationTypeMappings.java:30"$0$0$0$9$73$" * Provides {@link AnnotationTypeMapping} information for a single source"
"AnnotationTypeMappings.java:31"$0$0$0$11$67$" * annotation type. Performs a recursive breadth first crawl of all"
"AnnotationTypeMappings.java:32"$0$0$0$13$78$" * meta-annotations to ultimately provide a quick way to map the attributes of"
"AnnotationTypeMappings.java:33"$0$0$0$4$27$" * root {@link Annotation}."
"AnnotationTypeMappings.java:34"$0$0$0$1$2$" *"
"AnnotationTypeMappings.java:35"$0$0$0$11$79$" * <p>Supports convention based merging of meta-annotations as well as implicit"
"AnnotationTypeMappings.java:36"$0$0$0$10$77$" * and explicit {@link AliasFor @AliasFor} aliases. Also provides information"
"AnnotationTypeMappings.java:37"$0$0$0$4$29$" * about mirrored attributes."
"AnnotationTypeMappings.java:38"$0$0$0$1$2$" *"
"AnnotationTypeMappings.java:39"$0$0$0$14$79$" * <p>This class is designed to be cached so that meta-annotations only need to"
"AnnotationTypeMappings.java:40"$0$0$0$13$73$" * be searched once, regardless of how many times they are actually used."
"AnnotationTypeMappings.java:41"$0$0$0$1$2$" *"
"AnnotationTypeMappings.java:42"$0$0$0$4$23$" * @author Phillip Webb"
"AnnotationTypeMappings.java:43"$0$0$0$3$13$" * @since 5.2"
"AnnotationTypeMappings.java:44"$0$0$0$3$29$" * @see AnnotationTypeMapping"
"AnnotationTypeMappings.java:45"$0$0$0$1$3$" */"
"AnnotationTypeMappings.java:46"$0$0$0$4$36$"final class AnnotationTypeMappings {"
"AnnotationTypeMappings.java:47"$0$0$0$0$0$""
"AnnotationTypeMappings.java:48"$0$0$0$7$98$"	private static final IntrospectionFailureLogger failureLogger = IntrospectionFailureLogger.DEBUG;"
"AnnotationTypeMappings.java:49"$0$0$0$0$0$""
"AnnotationTypeMappings.java:50"$0$0$0$9$113$"	private static final Map<AnnotationFilter, Cache> standardRepeatablesCache = new ConcurrentReferenceHashMap<>();"
"AnnotationTypeMappings.java:51"$0$0$0$0$0$""
"AnnotationTypeMappings.java:52"$0$0$0$9$107$"	private static final Map<AnnotationFilter, Cache> noRepeatablesCache = new ConcurrentReferenceHashMap<>();"
"AnnotationTypeMappings.java:53"$0$0$0$0$0$""
"AnnotationTypeMappings.java:54"$0$0$0$0$0$""
"AnnotationTypeMappings.java:55"$0$0$0$4$57$"	private final RepeatableContainers repeatableContainers;"
"AnnotationTypeMappings.java:56"$0$0$0$0$0$""
"AnnotationTypeMappings.java:57"$0$0$0$4$39$"	private final AnnotationFilter filter;"
"AnnotationTypeMappings.java:58"$0$0$0$0$0$""
"AnnotationTypeMappings.java:59"$0$0$0$4$52$"	private final List<AnnotationTypeMapping> mappings;"
"AnnotationTypeMappings.java:60"$0$0$0$0$0$""
"AnnotationTypeMappings.java:61"$0$0$0$0$0$""
"AnnotationTypeMappings.java:62"$0$0$0$3$74$"	private AnnotationTypeMappings(RepeatableContainers repeatableContainers,"
"AnnotationTypeMappings.java:63"$0$0$0$7$73$"			AnnotationFilter filter, Class<? extends Annotation> annotationType) {"
"AnnotationTypeMappings.java:64"$0$0$0$0$0$""
"AnnotationTypeMappings.java:65"$0$0$0$3$51$"		this.repeatableContainers = repeatableContainers;"
"AnnotationTypeMappings.java:66"$0$0$0$3$23$"		this.filter = filter;"
"AnnotationTypeMappings.java:67"$0$0$0$4$36$"		this.mappings = new ArrayList<>();"
"AnnotationTypeMappings.java:68"$0$0$0$1$33$"		addAllMappings(annotationType);"
"AnnotationTypeMappings.java:69"$0$0$0$1$68$"		this.mappings.forEach(AnnotationTypeMapping::afterAllMappingsSet);"
"AnnotationTypeMappings.java:70"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:71"$0$0$0$0$0$""
"AnnotationTypeMappings.java:72"$0$0$0$0$0$""
"AnnotationTypeMappings.java:73"$0$0$0$7$74$"	private void addAllMappings(Class<? extends Annotation> annotationType) {"
"AnnotationTypeMappings.java:74"$0$0$0$5$58$"		Deque<AnnotationTypeMapping> queue = new ArrayDeque<>();"
"AnnotationTypeMappings.java:75"$0$0$0$4$51$"		addIfPossible(queue, null, annotationType, null);"
"AnnotationTypeMappings.java:76"$0$0$0$3$28$"		while (!queue.isEmpty()) {"
"AnnotationTypeMappings.java:77"$0$0$0$4$55$"			AnnotationTypeMapping mapping = queue.removeFirst();"
"AnnotationTypeMappings.java:78"$0$0$0$1$30$"			this.mappings.add(mapping);"
"AnnotationTypeMappings.java:79"$0$0$0$2$45$"			addMetaAnnotationsToQueue(queue, mapping);"
"AnnotationTypeMappings.java:80"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:81"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:82"$0$0$0$0$0$""
"AnnotationTypeMappings.java:83"$0$0$0$7$107$"	private void addMetaAnnotationsToQueue(Deque<AnnotationTypeMapping> queue, AnnotationTypeMapping source) {"
"AnnotationTypeMappings.java:84"$0$0$0$3$32$"		Annotation[] metaAnnotations ="
"AnnotationTypeMappings.java:85"$2$0$0$2$81$"				AnnotationsScanner.getDeclaredAnnotations(source.getAnnotationType(), false);"
"AnnotationTypeMappings.java:86"$0$0$0$6$53$"		for (Annotation metaAnnotation : metaAnnotations) {"
"AnnotationTypeMappings.java:87"$0$0$0$4$45$"			if (!isMappable(source, metaAnnotation)) {"
"AnnotationTypeMappings.java:88"$0$0$0$1$13$"				continue;"
"AnnotationTypeMappings.java:89"$0$0$0$1$4$"			}"
"AnnotationTypeMappings.java:90"$0$0$0$4$63$"			Annotation[] repeatedAnnotations = this.repeatableContainers"
"AnnotationTypeMappings.java:91"$0$0$0$1$46$"					.findRepeatedAnnotations(metaAnnotation);"
"AnnotationTypeMappings.java:92"$0$0$0$5$37$"			if (repeatedAnnotations != null) {"
"AnnotationTypeMappings.java:93"$0$0$0$6$63$"				for (Annotation repeatedAnnotation : repeatedAnnotations) {"
"AnnotationTypeMappings.java:94"$0$0$0$4$47$"					if (!isMappable(source, metaAnnotation)) {"
"AnnotationTypeMappings.java:95"$0$0$0$1$15$"						continue;"
"AnnotationTypeMappings.java:96"$0$0$0$1$6$"					}"
"AnnotationTypeMappings.java:97"$0$0$0$3$54$"					addIfPossible(queue, source, repeatedAnnotation);"
"AnnotationTypeMappings.java:98"$0$0$0$1$5$"				}"
"AnnotationTypeMappings.java:99"$0$0$0$1$4$"			}"
"AnnotationTypeMappings.java:100"$0$0$0$2$9$"			else {"
"AnnotationTypeMappings.java:101"$0$0$0$3$49$"				addIfPossible(queue, source, metaAnnotation);"
"AnnotationTypeMappings.java:102"$0$0$0$1$4$"			}"
"AnnotationTypeMappings.java:103"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:104"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:105"$0$0$0$0$0$""
"AnnotationTypeMappings.java:106"$0$0$0$4$63$"	private void addIfPossible(Deque<AnnotationTypeMapping> queue,"
"AnnotationTypeMappings.java:107"$0$0$0$5$50$"			AnnotationTypeMapping source, Annotation ann) {"
"AnnotationTypeMappings.java:108"$0$0$0$0$0$""
"AnnotationTypeMappings.java:109"$0$0$0$4$58$"		addIfPossible(queue, source, ann.annotationType(), ann);"
"AnnotationTypeMappings.java:110"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:111"$0$0$0$0$0$""
"AnnotationTypeMappings.java:112"$0$0$0$7$103$"	private void addIfPossible(Deque<AnnotationTypeMapping> queue, @Nullable AnnotationTypeMapping source,"
"AnnotationTypeMappings.java:113"$0$0$0$8$74$"			Class<? extends Annotation> annotationType, @Nullable Annotation ann) {"
"AnnotationTypeMappings.java:114"$0$0$0$0$0$""
"AnnotationTypeMappings.java:115"$0$0$0$2$7$"		try {"
"AnnotationTypeMappings.java:116"$0$0$0$4$73$"			queue.addLast(new AnnotationTypeMapping(source, annotationType, ann));"
"AnnotationTypeMappings.java:117"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:118"$0$0$0$4$24$"		catch (Exception ex) {"
"AnnotationTypeMappings.java:119"$0$0$0$1$63$"			AnnotationUtils.rethrowAnnotationConfigurationException(ex);"
"AnnotationTypeMappings.java:120"$0$0$0$3$35$"			if (failureLogger.isEnabled()) {"
"AnnotationTypeMappings.java:121"$1$0$0$7$89$"				failureLogger.log(""Failed to introspect meta-annotation "" + annotationType.getName(),"
"AnnotationTypeMappings.java:122"$1$0$0$8$64$"						(source != null ? source.getAnnotationType() : null), ex);"
"AnnotationTypeMappings.java:123"$0$0$0$1$4$"			}"
"AnnotationTypeMappings.java:124"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:125"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:126"$0$0$0$0$0$""
"AnnotationTypeMappings.java:127"$0$0$0$8$96$"	private boolean isMappable(AnnotationTypeMapping source, @Nullable Annotation metaAnnotation) {"
"AnnotationTypeMappings.java:128"$0$0$0$7$75$"		return (metaAnnotation != null && !this.filter.matches(metaAnnotation) &&"
"AnnotationTypeMappings.java:129"$1$0$0$2$66$"				!AnnotationFilter.PLAIN.matches(source.getAnnotationType()) &&"
"AnnotationTypeMappings.java:130"$0$0$0$2$46$"				!isAlreadyMapped(source, metaAnnotation));"
"AnnotationTypeMappings.java:131"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:132"$0$0$0$0$0$""
"AnnotationTypeMappings.java:133"$0$0$0$7$91$"	private boolean isAlreadyMapped(AnnotationTypeMapping source, Annotation metaAnnotation) {"
"AnnotationTypeMappings.java:134"$0$0$0$6$79$"		Class<? extends Annotation> annotationType = metaAnnotation.annotationType();"
"AnnotationTypeMappings.java:135"$0$0$0$4$41$"		AnnotationTypeMapping mapping = source;"
"AnnotationTypeMappings.java:136"$0$0$0$5$27$"		while (mapping != null) {"
"AnnotationTypeMappings.java:137"$1$0$0$5$55$"			if (mapping.getAnnotationType() == annotationType) {"
"AnnotationTypeMappings.java:138"$0$0$0$2$16$"				return true;"
"AnnotationTypeMappings.java:139"$0$0$0$1$4$"			}"
"AnnotationTypeMappings.java:140"$1$0$0$3$33$"			mapping = mapping.getSource();"
"AnnotationTypeMappings.java:141"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:142"$0$0$0$2$15$"		return false;"
"AnnotationTypeMappings.java:143"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:144"$0$0$0$0$0$""
"AnnotationTypeMappings.java:145"$0$0$0$1$4$"	/**"
"AnnotationTypeMappings.java:146"$0$0$0$8$47$"	 * Get the total number of contained mappings."
"AnnotationTypeMappings.java:147"$0$0$0$7$40$"	 * @return the total number of mappings"
"AnnotationTypeMappings.java:148"$0$0$0$1$4$"	 */"
"AnnotationTypeMappings.java:149"$0$0$0$3$13$"	int size() {"
"AnnotationTypeMappings.java:150"$0$0$0$2$30$"		return this.mappings.size();"
"AnnotationTypeMappings.java:151"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:152"$0$0$0$0$0$""
"AnnotationTypeMappings.java:153"$0$0$0$1$4$"	/**"
"AnnotationTypeMappings.java:154"$0$0$0$8$49$"	 * Get an individual mapping from this instance."
"AnnotationTypeMappings.java:155"$0$0$0$12$74$"	 * <p>Index {@code 0} will always return the root mapping; higher indexes"
"AnnotationTypeMappings.java:156"$0$0$0$5$41$"	 * will return meta-annotation mappings."
"AnnotationTypeMappings.java:157"$0$0$0$7$36$"	 * @param index the index to return"
"AnnotationTypeMappings.java:158"$0$0$0$5$45$"	 * @return the {@link AnnotationTypeMapping}"
"AnnotationTypeMappings.java:159"$0$0$0$10$66$"	 * @throws IndexOutOfBoundsException if the index is out of range"
"AnnotationTypeMappings.java:160"$0$0$0$8$49$"	 * (<tt>index &lt; 0 || index &gt;= size()</tt>)"
"AnnotationTypeMappings.java:161"$0$0$0$1$4$"	 */"
"AnnotationTypeMappings.java:162"$1$0$0$4$39$"	AnnotationTypeMapping get(int index) {"
"AnnotationTypeMappings.java:163"$1$0$0$2$34$"		return this.mappings.get(index);"
"AnnotationTypeMappings.java:164"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:165"$0$0$0$0$0$""
"AnnotationTypeMappings.java:166"$0$0$0$0$0$""
"AnnotationTypeMappings.java:167"$0$0$0$1$4$"	/**"
"AnnotationTypeMappings.java:168"$0$0$0$9$76$"	 * Create {@link AnnotationTypeMappings} for the specified annotation type."
"AnnotationTypeMappings.java:169"$0$0$0$7$52$"	 * @param annotationType the source annotation type"
"AnnotationTypeMappings.java:170"$0$0$0$8$49$"	 * @return type mappings for the annotation type"
"AnnotationTypeMappings.java:171"$0$0$0$1$4$"	 */"
"AnnotationTypeMappings.java:172"$0$0$0$7$94$"	static AnnotationTypeMappings forAnnotationType(Class<? extends Annotation> annotationType) {"
"AnnotationTypeMappings.java:173"$0$0$0$3$67$"		return forAnnotationType(annotationType, AnnotationFilter.PLAIN);"
"AnnotationTypeMappings.java:174"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:175"$0$0$0$0$0$""
"AnnotationTypeMappings.java:176"$0$0$0$1$4$"	/**"
"AnnotationTypeMappings.java:177"$0$0$0$9$76$"	 * Create {@link AnnotationTypeMappings} for the specified annotation type."
"AnnotationTypeMappings.java:178"$0$0$0$7$52$"	 * @param annotationType the source annotation type"
"AnnotationTypeMappings.java:179"$0$0$0$10$69$"	 * @param annotationFilter the annotation filter used to limit which"
"AnnotationTypeMappings.java:180"$0$0$0$4$30$"	 * annotations are considered"
"AnnotationTypeMappings.java:181"$0$0$0$8$49$"	 * @return type mappings for the annotation type"
"AnnotationTypeMappings.java:182"$0$0$0$1$4$"	 */"
"AnnotationTypeMappings.java:183"$0$0$0$3$49$"	static AnnotationTypeMappings forAnnotationType("
"AnnotationTypeMappings.java:184"$0$0$0$7$83$"			Class<? extends Annotation> annotationType, AnnotationFilter annotationFilter) {"
"AnnotationTypeMappings.java:185"$0$0$0$0$0$""
"AnnotationTypeMappings.java:186"$0$0$0$2$42$"		return forAnnotationType(annotationType,"
"AnnotationTypeMappings.java:187"$0$0$0$2$66$"				RepeatableContainers.standardRepeatables(), annotationFilter);"
"AnnotationTypeMappings.java:188"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:189"$0$0$0$0$0$""
"AnnotationTypeMappings.java:190"$0$0$0$1$4$"	/**"
"AnnotationTypeMappings.java:191"$0$0$0$9$76$"	 * Create {@link AnnotationTypeMappings} for the specified annotation type."
"AnnotationTypeMappings.java:192"$0$0$0$7$52$"	 * @param annotationType the source annotation type"
"AnnotationTypeMappings.java:193"$0$0$0$10$69$"	 * @param annotationFilter the annotation filter used to limit which"
"AnnotationTypeMappings.java:194"$0$0$0$4$30$"	 * annotations are considered"
"AnnotationTypeMappings.java:195"$0$0$0$8$49$"	 * @return type mappings for the annotation type"
"AnnotationTypeMappings.java:196"$0$0$0$1$4$"	 */"
"AnnotationTypeMappings.java:197"$0$0$0$3$49$"	static AnnotationTypeMappings forAnnotationType("
"AnnotationTypeMappings.java:198"$0$0$0$4$46$"			Class<? extends Annotation> annotationType,"
"AnnotationTypeMappings.java:199"$0$0$0$2$45$"			RepeatableContainers repeatableContainers,"
"AnnotationTypeMappings.java:200"$0$0$0$3$39$"			AnnotationFilter annotationFilter) {"
"AnnotationTypeMappings.java:201"$0$0$0$0$0$""
"AnnotationTypeMappings.java:202"$0$0$0$5$75$"		if (repeatableContainers == RepeatableContainers.standardRepeatables()) {"
"AnnotationTypeMappings.java:203"$0$0$0$2$68$"			return standardRepeatablesCache.computeIfAbsent(annotationFilter,"
"AnnotationTypeMappings.java:204"$1$0$0$5$70$"					key -> new Cache(repeatableContainers, key)).get(annotationType);"
"AnnotationTypeMappings.java:205"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:206"$0$0$0$5$60$"		if (repeatableContainers == RepeatableContainers.none()) {"
"AnnotationTypeMappings.java:207"$0$0$0$2$62$"			return noRepeatablesCache.computeIfAbsent(annotationFilter,"
"AnnotationTypeMappings.java:208"$1$0$0$5$70$"					key -> new Cache(repeatableContainers, key)).get(annotationType);"
"AnnotationTypeMappings.java:209"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:210"$0$0$0$4$75$"		return new AnnotationTypeMappings(repeatableContainers, annotationFilter,"
"AnnotationTypeMappings.java:211"$0$0$0$1$20$"				annotationType);"
"AnnotationTypeMappings.java:212"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:213"$0$0$0$0$0$""
"AnnotationTypeMappings.java:214"$0$0$0$4$27$"	static void clearCache() {"
"AnnotationTypeMappings.java:215"$0$0$0$1$35$"		standardRepeatablesCache.clear();"
"AnnotationTypeMappings.java:216"$0$0$0$1$29$"		noRepeatablesCache.clear();"
"AnnotationTypeMappings.java:217"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:218"$0$0$0$0$0$""
"AnnotationTypeMappings.java:219"$0$0$0$0$0$""
"AnnotationTypeMappings.java:220"$0$0$0$1$4$"	/**"
"AnnotationTypeMappings.java:221"$0$0$0$6$47$"	 * Cache created per {@link AnnotationFilter}."
"AnnotationTypeMappings.java:222"$0$0$0$1$4$"	 */"
"AnnotationTypeMappings.java:223"$0$0$0$5$29$"	private static class Cache {"
"AnnotationTypeMappings.java:224"$0$0$0$0$0$""
"AnnotationTypeMappings.java:225"$0$0$0$4$58$"		private final RepeatableContainers repeatableContainers;"
"AnnotationTypeMappings.java:226"$0$0$0$0$0$""
"AnnotationTypeMappings.java:227"$0$0$0$4$40$"		private final AnnotationFilter filter;"
"AnnotationTypeMappings.java:228"$0$0$0$0$0$""
"AnnotationTypeMappings.java:229"$0$0$0$7$82$"		private final Map<Class<? extends Annotation>, AnnotationTypeMappings> mappings;"
"AnnotationTypeMappings.java:230"$0$0$0$0$0$""
"AnnotationTypeMappings.java:231"$0$0$0$1$5$"		/**"
"AnnotationTypeMappings.java:232"$0$0$0$9$55$"		 * Create a cache instance with the specified filter."
"AnnotationTypeMappings.java:233"$0$0$0$6$40$"		 * @param filter the annotation filter"
"AnnotationTypeMappings.java:234"$0$0$0$1$5$"		 */"
"AnnotationTypeMappings.java:235"$0$0$0$5$77$"		Cache(RepeatableContainers repeatableContainers, AnnotationFilter filter) {"
"AnnotationTypeMappings.java:236"$0$0$0$3$52$"			this.repeatableContainers = repeatableContainers;"
"AnnotationTypeMappings.java:237"$0$0$0$3$24$"			this.filter = filter;"
"AnnotationTypeMappings.java:238"$0$0$0$4$54$"			this.mappings = new ConcurrentReferenceHashMap<>();"
"AnnotationTypeMappings.java:239"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:240"$0$0$0$0$0$""
"AnnotationTypeMappings.java:241"$0$0$0$1$5$"		/**"
"AnnotationTypeMappings.java:242"$0$0$0$11$84$"		 * Get or create {@link AnnotationTypeMappings} for the specified annotation type."
"AnnotationTypeMappings.java:243"$0$0$0$6$46$"		 * @param annotationType the annotation type"
"AnnotationTypeMappings.java:244"$0$0$0$9$70$"		 * @return a new or existing {@link AnnotationTypeMappings} instance"
"AnnotationTypeMappings.java:245"$0$0$0$1$5$"		 */"
"AnnotationTypeMappings.java:246"$1$0$0$6$74$"		AnnotationTypeMappings get(Class<? extends Annotation> annotationType) {"
"AnnotationTypeMappings.java:247"$0$0$0$3$78$"			return this.mappings.computeIfAbsent(annotationType, this::createMappings);"
"AnnotationTypeMappings.java:248"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:249"$0$0$0$0$0$""
"AnnotationTypeMappings.java:250"$0$0$0$6$85$"		AnnotationTypeMappings createMappings(Class<? extends Annotation> annotationType) {"
"AnnotationTypeMappings.java:251"$0$0$0$5$93$"			return new AnnotationTypeMappings(this.repeatableContainers, this.filter, annotationType);"
"AnnotationTypeMappings.java:252"$0$0$0$1$3$"		}"
"AnnotationTypeMappings.java:253"$0$0$0$1$2$"	}"
"AnnotationTypeMappings.java:254"$0$0$0$0$0$""
"AnnotationTypeMappings.java:255"$0$0$0$1$1$"}"
"ReflectionUtils.java:1"$0$0$0$1$2$"/*"
"ReflectionUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ReflectionUtils.java:3"$0$0$0$1$2$" *"
"ReflectionUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ReflectionUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ReflectionUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ReflectionUtils.java:7"$0$0$0$1$2$" *"
"ReflectionUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ReflectionUtils.java:9"$0$0$0$1$2$" *"
"ReflectionUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ReflectionUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ReflectionUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ReflectionUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ReflectionUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"ReflectionUtils.java:15"$0$0$0$1$3$" */"
"ReflectionUtils.java:16"$0$0$0$0$0$""
"ReflectionUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"ReflectionUtils.java:18"$0$0$0$0$0$""
"ReflectionUtils.java:19"$0$0$0$2$37$"import java.lang.reflect.Constructor;"
"ReflectionUtils.java:20"$0$0$0$2$31$"import java.lang.reflect.Field;"
"ReflectionUtils.java:21"$1$0$0$2$51$"import java.lang.reflect.InvocationTargetException;"
"ReflectionUtils.java:22"$0$0$0$2$32$"import java.lang.reflect.Method;"
"ReflectionUtils.java:23"$0$0$0$2$34$"import java.lang.reflect.Modifier;"
"ReflectionUtils.java:24"$0$0$0$2$54$"import java.lang.reflect.UndeclaredThrowableException;"
"ReflectionUtils.java:25"$0$0$0$2$27$"import java.util.ArrayList;"
"ReflectionUtils.java:26"$0$0$0$2$24$"import java.util.Arrays;"
"ReflectionUtils.java:27"$0$0$0$2$22$"import java.util.List;"
"ReflectionUtils.java:28"$0$0$0$2$21$"import java.util.Map;"
"ReflectionUtils.java:29"$0$0$0$0$0$""
"ReflectionUtils.java:30"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ReflectionUtils.java:31"$0$0$0$0$0$""
"ReflectionUtils.java:32"$0$0$0$1$3$"/**"
"ReflectionUtils.java:33"$0$0$0$12$72$" * Simple utility class for working with the reflection API and handling"
"ReflectionUtils.java:34"$0$0$0$3$25$" * reflection exceptions."
"ReflectionUtils.java:35"$0$0$0$1$2$" *"
"ReflectionUtils.java:36"$0$0$0$6$37$" * <p>Only intended for internal use."
"ReflectionUtils.java:37"$0$0$0$1$2$" *"
"ReflectionUtils.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"ReflectionUtils.java:39"$0$0$0$4$21$" * @author Rob Harrop"
"ReflectionUtils.java:40"$0$0$0$4$22$" * @author Rod Johnson"
"ReflectionUtils.java:41"$0$0$0$4$22$" * @author Costin Leau"
"ReflectionUtils.java:42"$0$0$0$4$22$" * @author Sam Brannen"
"ReflectionUtils.java:43"$0$0$0$4$22$" * @author Chris Beams"
"ReflectionUtils.java:44"$0$0$0$3$15$" * @since 1.2.2"
"ReflectionUtils.java:45"$0$0$0$1$3$" */"
"ReflectionUtils.java:46"$0$0$0$5$39$"public abstract class ReflectionUtils {"
"ReflectionUtils.java:47"$0$0$0$0$0$""
"ReflectionUtils.java:48"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:49"$0$0$0$9$76$"	 * Pre-built MethodFilter that matches all non-bridge non-synthetic methods"
"ReflectionUtils.java:50"$0$0$0$8$55$"	 * which are not declared on {@code java.lang.Object}."
"ReflectionUtils.java:51"$0$0$0$3$16$"	 * @since 3.0.5"
"ReflectionUtils.java:52"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:53"$0$0$0$6$57$"	public static final MethodFilter USER_DECLARED_METHODS ="
"ReflectionUtils.java:54"$0$0$0$5$59$"			(method -> !method.isBridge() && !method.isSynthetic());"
"ReflectionUtils.java:55"$0$0$0$0$0$""
"ReflectionUtils.java:56"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:57"$0$0$0$9$72$"	 * Pre-built FieldFilter that matches all non-static, non-final fields."
"ReflectionUtils.java:58"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:59"$0$0$0$6$50$"	public static final FieldFilter COPYABLE_FIELDS ="
"ReflectionUtils.java:60"$2$0$0$5$99$"			(field -> !(Modifier.isStatic(field.getModifiers()) || Modifier.isFinal(field.getModifiers())));"
"ReflectionUtils.java:61"$0$0$0$0$0$""
"ReflectionUtils.java:62"$0$0$0$0$0$""
"ReflectionUtils.java:63"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:64"$0$0$0$6$44$"	 * Naming prefix for CGLIB-renamed methods."
"ReflectionUtils.java:65"$0$0$0$3$30$"	 * @see #isCglibRenamedMethod"
"ReflectionUtils.java:66"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:67"$0$0$0$7$68$"	private static final String CGLIB_RENAMED_METHOD_PREFIX = ""CGLIB$"";"
"ReflectionUtils.java:68"$0$0$0$0$0$""
"ReflectionUtils.java:69"$0$0$0$8$69$"	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];"
"ReflectionUtils.java:70"$0$0$0$0$0$""
"ReflectionUtils.java:71"$0$0$0$8$66$"	private static final Method[] EMPTY_METHOD_ARRAY = new Method[0];"
"ReflectionUtils.java:72"$0$0$0$0$0$""
"ReflectionUtils.java:73"$0$0$0$8$63$"	private static final Field[] EMPTY_FIELD_ARRAY = new Field[0];"
"ReflectionUtils.java:74"$0$0$0$0$0$""
"ReflectionUtils.java:75"$0$0$0$8$66$"	private static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];"
"ReflectionUtils.java:76"$0$0$0$0$0$""
"ReflectionUtils.java:77"$0$0$0$0$0$""
"ReflectionUtils.java:78"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:79"$1$0$0$9$80$"	 * Cache for {@link Class#getDeclaredMethods()} plus equivalent default methods"
"ReflectionUtils.java:80"$0$0$0$10$62$"	 * from Java 8 based interfaces, allowing for fast iteration."
"ReflectionUtils.java:81"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:82"$0$0$0$9$107$"	private static final Map<Class<?>, Method[]> declaredMethodsCache = new ConcurrentReferenceHashMap<>(256);"
"ReflectionUtils.java:83"$0$0$0$0$0$""
"ReflectionUtils.java:84"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:85"$1$0$0$9$77$"	 * Cache for {@link Class#getDeclaredFields()}, allowing for fast iteration."
"ReflectionUtils.java:86"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:87"$0$0$0$9$105$"	private static final Map<Class<?>, Field[]> declaredFieldsCache = new ConcurrentReferenceHashMap<>(256);"
"ReflectionUtils.java:88"$0$0$0$0$0$""
"ReflectionUtils.java:89"$0$0$0$0$0$""
"ReflectionUtils.java:90"$0$0$1$3$22$"	// Exception handling"
"ReflectionUtils.java:91"$0$0$0$0$0$""
"ReflectionUtils.java:92"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:93"$0$0$0$6$42$"	 * Handle the given reflection exception."
"ReflectionUtils.java:94"$0$0$0$14$77$"	 * <p>Should only be called if no checked exception is expected to be thrown"
"ReflectionUtils.java:95"$1$0$0$16$80$"	 * by a target method, or if an error occurs while accessing a method or field."
"ReflectionUtils.java:96"$0$0$0$11$68$"	 * <p>Throws the underlying RuntimeException or Error in case of an"
"ReflectionUtils.java:97"$1$0$0$9$63$"	 * InvocationTargetException with such a root cause. Throws an"
"ReflectionUtils.java:98"$0$0$0$7$56$"	 * IllegalStateException with an appropriate message or"
"ReflectionUtils.java:99"$0$0$0$3$43$"	 * UndeclaredThrowableException otherwise."
"ReflectionUtils.java:100"$0$0$0$8$48$"	 * @param ex the reflection exception to handle"
"ReflectionUtils.java:101"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:102"$0$0$0$6$61$"	public static void handleReflectionException(Exception ex) {"
"ReflectionUtils.java:103"$0$0$0$5$44$"		if (ex instanceof NoSuchMethodException) {"
"ReflectionUtils.java:104"$1$0$0$8$75$"			throw new IllegalStateException(""Method not found: "" + ex.getMessage());"
"ReflectionUtils.java:105"$0$0$0$1$3$"		}"
"ReflectionUtils.java:106"$0$0$0$5$45$"		if (ex instanceof IllegalAccessException) {"
"ReflectionUtils.java:107"$1$0$0$11$91$"			throw new IllegalStateException(""Could not access method or field: "" + ex.getMessage());"
"ReflectionUtils.java:108"$0$0$0$1$3$"		}"
"ReflectionUtils.java:109"$1$0$0$5$48$"		if (ex instanceof InvocationTargetException) {"
"ReflectionUtils.java:110"$2$0$0$2$67$"			handleInvocationTargetException((InvocationTargetException) ex);"
"ReflectionUtils.java:111"$0$0$0$1$3$"		}"
"ReflectionUtils.java:112"$0$0$0$5$39$"		if (ex instanceof RuntimeException) {"
"ReflectionUtils.java:113"$0$0$0$3$31$"			throw (RuntimeException) ex;"
"ReflectionUtils.java:114"$0$0$0$1$3$"		}"
"ReflectionUtils.java:115"$0$0$0$3$45$"		throw new UndeclaredThrowableException(ex);"
"ReflectionUtils.java:116"$0$0$0$1$2$"	}"
"ReflectionUtils.java:117"$0$0$0$0$0$""
"ReflectionUtils.java:118"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:119"$1$0$0$13$77$"	 * Handle the given invocation target exception. Should only be called if no"
"ReflectionUtils.java:120"$1$0$0$12$68$"	 * checked exception is expected to be thrown by the target method."
"ReflectionUtils.java:121"$0$0$0$13$77$"	 * <p>Throws the underlying RuntimeException or Error in case of such a root"
"ReflectionUtils.java:122"$0$0$0$6$60$"	 * cause. Throws an UndeclaredThrowableException otherwise."
"ReflectionUtils.java:123"$1$0$0$9$55$"	 * @param ex the invocation target exception to handle"
"ReflectionUtils.java:124"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:125"$2$0$0$6$83$"	public static void handleInvocationTargetException(InvocationTargetException ex) {"
"ReflectionUtils.java:126"$2$0$0$1$51$"		rethrowRuntimeException(ex.getTargetException());"
"ReflectionUtils.java:127"$0$0$0$1$2$"	}"
"ReflectionUtils.java:128"$0$0$0$0$0$""
"ReflectionUtils.java:129"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:130"$0$0$0$11$74$"	 * Rethrow the given {@link Throwable exception}, which is presumably the"
"ReflectionUtils.java:131"$2$0$0$7$70$"	 * <em>target exception</em> of an {@link InvocationTargetException}."
"ReflectionUtils.java:132"$0$0$0$14$74$"	 * Should only be called if no checked exception is expected to be thrown"
"ReflectionUtils.java:133"$1$0$0$5$25$"	 * by the target method."
"ReflectionUtils.java:134"$0$0$0$11$78$"	 * <p>Rethrows the underlying exception cast to a {@link RuntimeException} or"
"ReflectionUtils.java:135"$0$0$0$8$54$"	 * {@link Error} if appropriate; otherwise, throws an"
"ReflectionUtils.java:136"$0$0$0$3$41$"	 * {@link UndeclaredThrowableException}."
"ReflectionUtils.java:137"$0$0$0$7$38$"	 * @param ex the exception to rethrow"
"ReflectionUtils.java:138"$0$0$0$6$51$"	 * @throws RuntimeException the rethrown exception"
"ReflectionUtils.java:139"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:140"$0$0$0$6$59$"	public static void rethrowRuntimeException(Throwable ex) {"
"ReflectionUtils.java:141"$0$0$0$5$39$"		if (ex instanceof RuntimeException) {"
"ReflectionUtils.java:142"$0$0$0$3$31$"			throw (RuntimeException) ex;"
"ReflectionUtils.java:143"$0$0$0$1$3$"		}"
"ReflectionUtils.java:144"$0$0$0$5$28$"		if (ex instanceof Error) {"
"ReflectionUtils.java:145"$0$0$0$3$20$"			throw (Error) ex;"
"ReflectionUtils.java:146"$0$0$0$1$3$"		}"
"ReflectionUtils.java:147"$0$0$0$3$45$"		throw new UndeclaredThrowableException(ex);"
"ReflectionUtils.java:148"$0$0$0$1$2$"	}"
"ReflectionUtils.java:149"$0$0$0$0$0$""
"ReflectionUtils.java:150"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:151"$0$0$0$11$74$"	 * Rethrow the given {@link Throwable exception}, which is presumably the"
"ReflectionUtils.java:152"$2$0$0$7$70$"	 * <em>target exception</em> of an {@link InvocationTargetException}."
"ReflectionUtils.java:153"$0$0$0$14$74$"	 * Should only be called if no checked exception is expected to be thrown"
"ReflectionUtils.java:154"$1$0$0$5$25$"	 * by the target method."
"ReflectionUtils.java:155"$0$0$0$11$72$"	 * <p>Rethrows the underlying exception cast to an {@link Exception} or"
"ReflectionUtils.java:156"$0$0$0$8$54$"	 * {@link Error} if appropriate; otherwise, throws an"
"ReflectionUtils.java:157"$0$0$0$3$41$"	 * {@link UndeclaredThrowableException}."
"ReflectionUtils.java:158"$0$0$0$7$38$"	 * @param ex the exception to rethrow"
"ReflectionUtils.java:159"$0$0$0$12$77$"	 * @throws Exception the rethrown exception (in case of a checked exception)"
"ReflectionUtils.java:160"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:161"$0$0$0$8$69$"	public static void rethrowException(Throwable ex) throws Exception {"
"ReflectionUtils.java:162"$0$0$0$5$32$"		if (ex instanceof Exception) {"
"ReflectionUtils.java:163"$0$0$0$3$24$"			throw (Exception) ex;"
"ReflectionUtils.java:164"$0$0$0$1$3$"		}"
"ReflectionUtils.java:165"$0$0$0$5$28$"		if (ex instanceof Error) {"
"ReflectionUtils.java:166"$0$0$0$3$20$"			throw (Error) ex;"
"ReflectionUtils.java:167"$0$0$0$1$3$"		}"
"ReflectionUtils.java:168"$0$0$0$3$45$"		throw new UndeclaredThrowableException(ex);"
"ReflectionUtils.java:169"$0$0$0$1$2$"	}"
"ReflectionUtils.java:170"$0$0$0$0$0$""
"ReflectionUtils.java:171"$0$0$0$0$0$""
"ReflectionUtils.java:172"$0$0$1$3$24$"	// Constructor handling"
"ReflectionUtils.java:173"$0$0$0$0$0$""
"ReflectionUtils.java:174"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:175"$0$0$0$11$72$"	 * Obtain an accessible constructor for the given class and parameters."
"ReflectionUtils.java:176"$0$0$0$7$35$"	 * @param clazz the clazz to check"
"ReflectionUtils.java:177"$0$0$0$10$72$"	 * @param parameterTypes the parameter types of the desired constructor"
"ReflectionUtils.java:178"$0$0$0$5$37$"	 * @return the constructor reference"
"ReflectionUtils.java:179"$0$0$0$8$63$"	 * @throws NoSuchMethodException if no such constructor exists"
"ReflectionUtils.java:180"$0$0$0$3$14$"	 * @since 5.0"
"ReflectionUtils.java:181"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:182"$0$0$0$8$99$"	public static <T> Constructor<T> accessibleConstructor(Class<T> clazz, Class<?>... parameterTypes)"
"ReflectionUtils.java:183"$0$0$0$3$33$"			throws NoSuchMethodException {"
"ReflectionUtils.java:184"$0$0$0$0$0$""
"ReflectionUtils.java:185"$1$0$0$4$69$"		Constructor<T> ctor = clazz.getDeclaredConstructor(parameterTypes);"
"ReflectionUtils.java:186"$0$0$0$1$23$"		makeAccessible(ctor);"
"ReflectionUtils.java:187"$0$0$0$2$14$"		return ctor;"
"ReflectionUtils.java:188"$0$0$0$1$2$"	}"
"ReflectionUtils.java:189"$0$0$0$0$0$""
"ReflectionUtils.java:190"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:191"$0$0$0$10$75$"	 * Make the given constructor accessible, explicitly setting it accessible"
"ReflectionUtils.java:192"$0$0$0$10$71$"	 * if necessary. The {@code setAccessible(true)} method is only called"
"ReflectionUtils.java:193"$0$0$0$11$70$"	 * when actually necessary, to avoid unnecessary conflicts with a JVM"
"ReflectionUtils.java:194"$0$0$0$4$32$"	 * SecurityManager (if active)."
"ReflectionUtils.java:195"$0$0$0$8$50$"	 * @param ctor the constructor to make accessible"
"ReflectionUtils.java:196"$0$0$0$3$52$"	 * @see java.lang.reflect.Constructor#setAccessible"
"ReflectionUtils.java:197"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:198"$0$0$0$5$46$"	@SuppressWarnings(""deprecation"")  // on JDK 9"
"ReflectionUtils.java:199"$0$0$0$6$57$"	public static void makeAccessible(Constructor<?> ctor) {"
"ReflectionUtils.java:200"$1$0$0$3$49$"		if ((!Modifier.isPublic(ctor.getModifiers()) ||"
"ReflectionUtils.java:201"$2$0$0$4$91$"				!Modifier.isPublic(ctor.getDeclaringClass().getModifiers())) && !ctor.isAccessible()) {"
"ReflectionUtils.java:202"$0$0$0$1$28$"			ctor.setAccessible(true);"
"ReflectionUtils.java:203"$0$0$0$1$3$"		}"
"ReflectionUtils.java:204"$0$0$0$1$2$"	}"
"ReflectionUtils.java:205"$0$0$0$0$0$""
"ReflectionUtils.java:206"$0$0$0$0$0$""
"ReflectionUtils.java:207"$0$0$1$3$19$"	// Method handling"
"ReflectionUtils.java:208"$0$0$0$0$0$""
"ReflectionUtils.java:209"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:210"$0$0$0$15$81$"	 * Attempt to find a {@link Method} on the supplied class with the supplied name"
"ReflectionUtils.java:211"$0$0$0$11$70$"	 * and no parameters. Searches all superclasses up to {@code Object}."
"ReflectionUtils.java:212"$0$0$0$11$62$"	 * <p>Returns {@code null} if no {@link Method} can be found."
"ReflectionUtils.java:213"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:214"$0$0$0$8$38$"	 * @param name the name of the method"
"ReflectionUtils.java:215"$0$0$0$11$60$"	 * @return the Method object, or {@code null} if none found"
"ReflectionUtils.java:216"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:217"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:218"$0$0$0$8$63$"	public static Method findMethod(Class<?> clazz, String name) {"
"ReflectionUtils.java:219"$0$0$0$4$52$"		return findMethod(clazz, name, EMPTY_CLASS_ARRAY);"
"ReflectionUtils.java:220"$0$0$0$1$2$"	}"
"ReflectionUtils.java:221"$0$0$0$0$0$""
"ReflectionUtils.java:222"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:223"$0$0$0$15$81$"	 * Attempt to find a {@link Method} on the supplied class with the supplied name"
"ReflectionUtils.java:224"$0$0$0$11$72$"	 * and parameter types. Searches all superclasses up to {@code Object}."
"ReflectionUtils.java:225"$0$0$0$11$62$"	 * <p>Returns {@code null} if no {@link Method} can be found."
"ReflectionUtils.java:226"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:227"$0$0$0$8$38$"	 * @param name the name of the method"
"ReflectionUtils.java:228"$0$0$0$9$55$"	 * @param paramTypes the parameter types of the method"
"ReflectionUtils.java:229"$0$0$0$9$51$"	 * (may be {@code null} to indicate any signature)"
"ReflectionUtils.java:230"$0$0$0$11$60$"	 * @return the Method object, or {@code null} if none found"
"ReflectionUtils.java:231"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:232"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:233"$0$0$0$11$97$"	public static Method findMethod(Class<?> clazz, String name, @Nullable Class<?>... paramTypes) {"
"ReflectionUtils.java:234"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ReflectionUtils.java:235"$0$0$0$7$55$"		Assert.notNull(name, ""Method name must not be null"");"
"ReflectionUtils.java:236"$0$0$0$4$30$"		Class<?> searchType = clazz;"
"ReflectionUtils.java:237"$0$0$0$5$30$"		while (searchType != null) {"
"ReflectionUtils.java:238"$1$0$0$7$75$"			Method[] methods = (searchType.isInterface() ? searchType.getMethods() :"
"ReflectionUtils.java:239"$1$0$0$2$44$"					getDeclaredMethods(searchType, false));"
"ReflectionUtils.java:240"$0$0$0$6$34$"			for (Method method : methods) {"
"ReflectionUtils.java:241"$1$0$0$10$101$"				if (name.equals(method.getName()) && (paramTypes == null || hasSameParams(method, paramTypes))) {"
"ReflectionUtils.java:242"$0$0$0$2$19$"					return method;"
"ReflectionUtils.java:243"$0$0$0$1$5$"				}"
"ReflectionUtils.java:244"$0$0$0$1$4$"			}"
"ReflectionUtils.java:245"$1$0$0$3$43$"			searchType = searchType.getSuperclass();"
"ReflectionUtils.java:246"$0$0$0$1$3$"		}"
"ReflectionUtils.java:247"$0$0$0$2$14$"		return null;"
"ReflectionUtils.java:248"$0$0$0$1$2$"	}"
"ReflectionUtils.java:249"$0$0$0$0$0$""
"ReflectionUtils.java:250"$0$0$0$8$77$"	private static boolean hasSameParams(Method method, Class<?>[] paramTypes) {"
"ReflectionUtils.java:251"$1$0$0$5$60$"		return (paramTypes.length == method.getParameterCount() &&"
"ReflectionUtils.java:252"$1$0$0$2$59$"				Arrays.equals(paramTypes, method.getParameterTypes()));"
"ReflectionUtils.java:253"$0$0$0$1$2$"	}"
"ReflectionUtils.java:254"$0$0$0$0$0$""
"ReflectionUtils.java:255"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:256"$1$0$0$14$93$"	 * Invoke the specified {@link Method} against the supplied target object with no arguments."
"ReflectionUtils.java:257"$1$0$0$14$80$"	 * The target object can be {@code null} when invoking a static {@link Method}."
"ReflectionUtils.java:258"$0$0$0$11$86$"	 * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException}."
"ReflectionUtils.java:259"$0$0$0$7$38$"	 * @param method the method to invoke"
"ReflectionUtils.java:260"$2$0$0$11$59$"	 * @param target the target object to invoke the method on"
"ReflectionUtils.java:261"$0$0$0$7$41$"	 * @return the invocation result, if any"
"ReflectionUtils.java:262"$0$0$0$5$66$"	 * @see #invokeMethod(java.lang.reflect.Method, Object, Object[])"
"ReflectionUtils.java:263"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:264"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:265"$1$0$0$9$76$"	public static Object invokeMethod(Method method, @Nullable Object target) {"
"ReflectionUtils.java:266"$1$0$0$4$58$"		return invokeMethod(method, target, EMPTY_OBJECT_ARRAY);"
"ReflectionUtils.java:267"$0$0$0$1$2$"	}"
"ReflectionUtils.java:268"$0$0$0$0$0$""
"ReflectionUtils.java:269"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:270"$1$0$0$13$83$"	 * Invoke the specified {@link Method} against the supplied target object with the"
"ReflectionUtils.java:271"$1$0$0$13$77$"	 * supplied arguments. The target object can be {@code null} when invoking a"
"ReflectionUtils.java:272"$0$0$0$4$26$"	 * static {@link Method}."
"ReflectionUtils.java:273"$0$0$0$11$86$"	 * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException}."
"ReflectionUtils.java:274"$0$0$0$7$38$"	 * @param method the method to invoke"
"ReflectionUtils.java:275"$2$0$0$11$59$"	 * @param target the target object to invoke the method on"
"ReflectionUtils.java:276"$0$0$0$10$62$"	 * @param args the invocation arguments (may be {@code null})"
"ReflectionUtils.java:277"$0$0$0$7$41$"	 * @return the invocation result, if any"
"ReflectionUtils.java:278"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:279"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:280"$1$0$0$12$102$"	public static Object invokeMethod(Method method, @Nullable Object target, @Nullable Object... args) {"
"ReflectionUtils.java:281"$0$0$0$2$7$"		try {"
"ReflectionUtils.java:282"$1$0$0$3$38$"			return method.invoke(target, args);"
"ReflectionUtils.java:283"$0$0$0$1$3$"		}"
"ReflectionUtils.java:284"$0$0$0$4$24$"		catch (Exception ex) {"
"ReflectionUtils.java:285"$0$0$0$1$33$"			handleReflectionException(ex);"
"ReflectionUtils.java:286"$0$0$0$1$3$"		}"
"ReflectionUtils.java:287"$1$0$0$6$59$"		throw new IllegalStateException(""Should never get here"");"
"ReflectionUtils.java:288"$0$0$0$1$2$"	}"
"ReflectionUtils.java:289"$0$0$0$0$0$""
"ReflectionUtils.java:290"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:291"$0$0$0$10$68$"	 * Determine whether the given method explicitly declares the given"
"ReflectionUtils.java:292"$0$0$0$12$71$"	 * exception or one of its superclasses, which means that an exception"
"ReflectionUtils.java:293"$0$0$0$12$72$"	 * of that type can be propagated as-is within a reflective invocation."
"ReflectionUtils.java:294"$0$0$0$6$38$"	 * @param method the declaring method"
"ReflectionUtils.java:295"$0$0$0$7$47$"	 * @param exceptionType the exception to throw"
"ReflectionUtils.java:296"$0$0$0$11$62$"	 * @return {@code true} if the exception can be thrown as-is;"
"ReflectionUtils.java:297"$0$0$0$9$43$"	 * {@code false} if it needs to be wrapped"
"ReflectionUtils.java:298"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:299"$0$0$0$8$81$"	public static boolean declaresException(Method method, Class<?> exceptionType) {"
"ReflectionUtils.java:300"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ReflectionUtils.java:301"$1$0$0$4$61$"		Class<?>[] declaredExceptions = method.getExceptionTypes();"
"ReflectionUtils.java:302"$0$0$0$6$57$"		for (Class<?> declaredException : declaredExceptions) {"
"ReflectionUtils.java:303"$0$0$0$3$59$"			if (declaredException.isAssignableFrom(exceptionType)) {"
"ReflectionUtils.java:304"$0$0$0$2$16$"				return true;"
"ReflectionUtils.java:305"$0$0$0$1$4$"			}"
"ReflectionUtils.java:306"$0$0$0$1$3$"		}"
"ReflectionUtils.java:307"$0$0$0$2$15$"		return false;"
"ReflectionUtils.java:308"$0$0$0$1$2$"	}"
"ReflectionUtils.java:309"$0$0$0$0$0$""
"ReflectionUtils.java:310"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:311"$0$0$0$13$77$"	 * Perform the given callback operation on all matching methods of the given"
"ReflectionUtils.java:312"$0$0$0$12$77$"	 * class, as locally declared or equivalent thereof (such as default methods"
"ReflectionUtils.java:313"$0$0$0$11$64$"	 * on Java 8 based interfaces that the given class implements)."
"ReflectionUtils.java:314"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:315"$0$0$0$10$52$"	 * @param mc the callback to invoke for each method"
"ReflectionUtils.java:316"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:317"$0$0$0$3$14$"	 * @since 4.2"
"ReflectionUtils.java:318"$0$0$0$3$23$"	 * @see #doWithMethods"
"ReflectionUtils.java:319"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:320"$0$0$0$8$75$"	public static void doWithLocalMethods(Class<?> clazz, MethodCallback mc) {"
"ReflectionUtils.java:321"$1$0$0$5$54$"		Method[] methods = getDeclaredMethods(clazz, false);"
"ReflectionUtils.java:322"$0$0$0$6$33$"		for (Method method : methods) {"
"ReflectionUtils.java:323"$0$0$0$2$8$"			try {"
"ReflectionUtils.java:324"$0$0$0$1$22$"				mc.doWith(method);"
"ReflectionUtils.java:325"$0$0$0$1$4$"			}"
"ReflectionUtils.java:326"$0$0$0$4$38$"			catch (IllegalAccessException ex) {"
"ReflectionUtils.java:327"$1$0$0$15$102$"				throw new IllegalStateException(""Not allowed to access method '"" + method.getName() + ""': "" + ex);"
"ReflectionUtils.java:328"$0$0$0$1$4$"			}"
"ReflectionUtils.java:329"$0$0$0$1$3$"		}"
"ReflectionUtils.java:330"$0$0$0$1$2$"	}"
"ReflectionUtils.java:331"$0$0$0$0$0$""
"ReflectionUtils.java:332"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:333"$0$0$0$13$77$"	 * Perform the given callback operation on all matching methods of the given"
"ReflectionUtils.java:334"$0$0$0$4$27$"	 * class and superclasses."
"ReflectionUtils.java:335"$0$0$0$12$77$"	 * <p>The same named method occurring on subclass and superclass will appear"
"ReflectionUtils.java:336"$0$0$0$8$53$"	 * twice, unless excluded by a {@link MethodFilter}."
"ReflectionUtils.java:337"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:338"$0$0$0$10$52$"	 * @param mc the callback to invoke for each method"
"ReflectionUtils.java:339"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:340"$0$0$0$5$60$"	 * @see #doWithMethods(Class, MethodCallback, MethodFilter)"
"ReflectionUtils.java:341"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:342"$0$0$0$8$70$"	public static void doWithMethods(Class<?> clazz, MethodCallback mc) {"
"ReflectionUtils.java:343"$0$0$0$3$33$"		doWithMethods(clazz, mc, null);"
"ReflectionUtils.java:344"$0$0$0$1$2$"	}"
"ReflectionUtils.java:345"$0$0$0$0$0$""
"ReflectionUtils.java:346"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:347"$0$0$0$13$77$"	 * Perform the given callback operation on all matching methods of the given"
"ReflectionUtils.java:348"$0$0$0$9$69$"	 * class and superclasses (or given interface and super-interfaces)."
"ReflectionUtils.java:349"$0$0$0$12$77$"	 * <p>The same named method occurring on subclass and superclass will appear"
"ReflectionUtils.java:350"$0$0$0$9$65$"	 * twice, unless excluded by the specified {@link MethodFilter}."
"ReflectionUtils.java:351"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:352"$0$0$0$10$52$"	 * @param mc the callback to invoke for each method"
"ReflectionUtils.java:353"$0$0$0$14$77$"	 * @param mf the filter that determines the methods to apply the callback to"
"ReflectionUtils.java:354"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:355"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:356"$0$0$0$11$97$"	public static void doWithMethods(Class<?> clazz, MethodCallback mc, @Nullable MethodFilter mf) {"
"ReflectionUtils.java:357"$0$0$1$7$47$"		// Keep backing up the inheritance hierarchy."
"ReflectionUtils.java:358"$1$0$0$5$54$"		Method[] methods = getDeclaredMethods(clazz, false);"
"ReflectionUtils.java:359"$0$0$0$6$33$"		for (Method method : methods) {"
"ReflectionUtils.java:360"$0$0$0$7$43$"			if (mf != null && !mf.matches(method)) {"
"ReflectionUtils.java:361"$0$0$0$1$13$"				continue;"
"ReflectionUtils.java:362"$0$0$0$1$4$"			}"
"ReflectionUtils.java:363"$0$0$0$2$8$"			try {"
"ReflectionUtils.java:364"$0$0$0$1$22$"				mc.doWith(method);"
"ReflectionUtils.java:365"$0$0$0$1$4$"			}"
"ReflectionUtils.java:366"$0$0$0$4$38$"			catch (IllegalAccessException ex) {"
"ReflectionUtils.java:367"$1$0$0$15$102$"				throw new IllegalStateException(""Not allowed to access method '"" + method.getName() + ""': "" + ex);"
"ReflectionUtils.java:368"$0$0$0$1$4$"			}"
"ReflectionUtils.java:369"$0$0$0$1$3$"		}"
"ReflectionUtils.java:370"$2$0$0$13$112$"		if (clazz.getSuperclass() != null && (mf != USER_DECLARED_METHODS || clazz.getSuperclass() != Object.class)) {"
"ReflectionUtils.java:371"$1$0$0$3$48$"			doWithMethods(clazz.getSuperclass(), mc, mf);"
"ReflectionUtils.java:372"$0$0$0$1$3$"		}"
"ReflectionUtils.java:373"$0$0$0$4$33$"		else if (clazz.isInterface()) {"
"ReflectionUtils.java:374"$1$0$0$6$52$"			for (Class<?> superIfc : clazz.getInterfaces()) {"
"ReflectionUtils.java:375"$0$0$0$3$36$"				doWithMethods(superIfc, mc, mf);"
"ReflectionUtils.java:376"$0$0$0$1$4$"			}"
"ReflectionUtils.java:377"$0$0$0$1$3$"		}"
"ReflectionUtils.java:378"$0$0$0$1$2$"	}"
"ReflectionUtils.java:379"$0$0$0$0$0$""
"ReflectionUtils.java:380"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:381"$0$0$0$12$68$"	 * Get all declared methods on the leaf class and all superclasses."
"ReflectionUtils.java:382"$0$0$0$7$42$"	 * Leaf class methods are included first."
"ReflectionUtils.java:383"$0$0$0$7$44$"	 * @param leafClass the class to introspect"
"ReflectionUtils.java:384"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:385"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:386"$1$0$0$6$67$"	public static Method[] getAllDeclaredMethods(Class<?> leafClass) {"
"ReflectionUtils.java:387"$0$0$0$6$51$"		final List<Method> methods = new ArrayList<>(32);"
"ReflectionUtils.java:388"$0$0$0$2$41$"		doWithMethods(leafClass, methods::add);"
"ReflectionUtils.java:389"$0$0$0$2$45$"		return methods.toArray(EMPTY_METHOD_ARRAY);"
"ReflectionUtils.java:390"$0$0$0$1$2$"	}"
"ReflectionUtils.java:391"$0$0$0$0$0$""
"ReflectionUtils.java:392"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:393"$0$0$0$15$82$"	 * Get the unique set of declared methods on the leaf class and all superclasses."
"ReflectionUtils.java:394"$0$0$0$13$87$"	 * Leaf class methods are included first and while traversing the superclass hierarchy"
"ReflectionUtils.java:395"$0$0$0$14$90$"	 * any methods found with signatures matching a method already included are filtered out."
"ReflectionUtils.java:396"$0$0$0$7$44$"	 * @param leafClass the class to introspect"
"ReflectionUtils.java:397"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:398"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:399"$1$0$0$6$70$"	public static Method[] getUniqueDeclaredMethods(Class<?> leafClass) {"
"ReflectionUtils.java:400"$1$0$0$3$51$"		return getUniqueDeclaredMethods(leafClass, null);"
"ReflectionUtils.java:401"$0$0$0$1$2$"	}"
"ReflectionUtils.java:402"$0$0$0$0$0$""
"ReflectionUtils.java:403"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:404"$0$0$0$15$82$"	 * Get the unique set of declared methods on the leaf class and all superclasses."
"ReflectionUtils.java:405"$0$0$0$13$87$"	 * Leaf class methods are included first and while traversing the superclass hierarchy"
"ReflectionUtils.java:406"$0$0$0$14$90$"	 * any methods found with signatures matching a method already included are filtered out."
"ReflectionUtils.java:407"$0$0$0$7$44$"	 * @param leafClass the class to introspect"
"ReflectionUtils.java:408"$0$0$0$13$73$"	 * @param mf the filter that determines the methods to take into account"
"ReflectionUtils.java:409"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:410"$0$0$0$3$14$"	 * @since 5.2"
"ReflectionUtils.java:411"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:412"$1$0$0$9$97$"	public static Method[] getUniqueDeclaredMethods(Class<?> leafClass, @Nullable MethodFilter mf) {"
"ReflectionUtils.java:413"$0$0$0$6$51$"		final List<Method> methods = new ArrayList<>(32);"
"ReflectionUtils.java:414"$0$0$0$4$38$"		doWithMethods(leafClass, method -> {"
"ReflectionUtils.java:415"$0$0$0$4$34$"			boolean knownSignature = false;"
"ReflectionUtils.java:416"$0$0$0$4$62$"			Method methodBeingOverriddenWithCovariantReturnType = null;"
"ReflectionUtils.java:417"$0$0$0$6$42$"			for (Method existingMethod : methods) {"
"ReflectionUtils.java:418"$2$0$0$3$60$"				if (method.getName().equals(existingMethod.getName()) &&"
"ReflectionUtils.java:419"$2$0$0$4$73$"						method.getParameterCount() == existingMethod.getParameterCount() &&"
"ReflectionUtils.java:420"$2$0$0$3$86$"						Arrays.equals(method.getParameterTypes(), existingMethod.getParameterTypes())) {"
"ReflectionUtils.java:421"$0$0$1$8$50$"					// Is this a covariant return type situation?"
"ReflectionUtils.java:422"$2$0$0$5$68$"					if (existingMethod.getReturnType() != method.getReturnType() &&"
"ReflectionUtils.java:423"$2$0$0$2$81$"							existingMethod.getReturnType().isAssignableFrom(method.getReturnType())) {"
"ReflectionUtils.java:424"$0$0$0$3$68$"						methodBeingOverriddenWithCovariantReturnType = existingMethod;"
"ReflectionUtils.java:425"$0$0$0$1$6$"					}"
"ReflectionUtils.java:426"$0$0$0$2$11$"					else {"
"ReflectionUtils.java:427"$0$0$0$3$28$"						knownSignature = true;"
"ReflectionUtils.java:428"$0$0$0$1$6$"					}"
"ReflectionUtils.java:429"$0$0$0$1$11$"					break;"
"ReflectionUtils.java:430"$0$0$0$1$5$"				}"
"ReflectionUtils.java:431"$0$0$0$1$4$"			}"
"ReflectionUtils.java:432"$0$0$0$5$62$"			if (methodBeingOverriddenWithCovariantReturnType != null) {"
"ReflectionUtils.java:433"$0$0$0$1$65$"				methods.remove(methodBeingOverriddenWithCovariantReturnType);"
"ReflectionUtils.java:434"$0$0$0$1$4$"			}"
"ReflectionUtils.java:435"$0$0$0$5$58$"			if (!knownSignature && !isCglibRenamedMethod(method)) {"
"ReflectionUtils.java:436"$0$0$0$1$24$"				methods.add(method);"
"ReflectionUtils.java:437"$0$0$0$1$4$"			}"
"ReflectionUtils.java:438"$0$0$0$2$9$"		}, mf);"
"ReflectionUtils.java:439"$0$0$0$2$45$"		return methods.toArray(EMPTY_METHOD_ARRAY);"
"ReflectionUtils.java:440"$0$0$0$1$2$"	}"
"ReflectionUtils.java:441"$0$0$0$0$0$""
"ReflectionUtils.java:442"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:443"$1$0$0$11$76$"	 * Variant of {@link Class#getDeclaredMethods()} that uses a local cache in"
"ReflectionUtils.java:444"$0$0$0$12$76$"	 * order to avoid the JVM's SecurityManager check and new Method instances."
"ReflectionUtils.java:445"$0$0$0$12$69$"	 * In addition, it also includes Java 8 default methods from locally"
"ReflectionUtils.java:446"$0$0$0$11$74$"	 * implemented interfaces, since those are effectively to be treated just"
"ReflectionUtils.java:447"$0$0$0$4$26$"	 * like declared methods."
"ReflectionUtils.java:448"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:449"$0$0$0$7$39$"	 * @return the cached array of methods"
"ReflectionUtils.java:450"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:451"$0$0$0$3$14$"	 * @since 5.2"
"ReflectionUtils.java:452"$1$0$0$3$35$"	 * @see Class#getDeclaredMethods()"
"ReflectionUtils.java:453"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:454"$1$0$0$6$60$"	public static Method[] getDeclaredMethods(Class<?> clazz) {"
"ReflectionUtils.java:455"$1$0$0$3$41$"		return getDeclaredMethods(clazz, true);"
"ReflectionUtils.java:456"$0$0$0$1$2$"	}"
"ReflectionUtils.java:457"$0$0$0$0$0$""
"ReflectionUtils.java:458"$1$0$0$8$80$"	private static Method[] getDeclaredMethods(Class<?> clazz, boolean defensive) {"
"ReflectionUtils.java:459"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ReflectionUtils.java:460"$1$0$0$4$52$"		Method[] result = declaredMethodsCache.get(clazz);"
"ReflectionUtils.java:461"$0$0$0$5$23$"		if (result == null) {"
"ReflectionUtils.java:462"$0$0$0$2$8$"			try {"
"ReflectionUtils.java:463"$1$0$0$4$58$"				Method[] declaredMethods = clazz.getDeclaredMethods();"
"ReflectionUtils.java:464"$0$0$0$4$73$"				List<Method> defaultMethods = findConcreteMethodsOnInterfaces(clazz);"
"ReflectionUtils.java:465"$0$0$0$5$33$"				if (defaultMethods != null) {"
"ReflectionUtils.java:466"$0$0$0$6$73$"					result = new Method[declaredMethods.length + defaultMethods.size()];"
"ReflectionUtils.java:467"$0$0$0$5$77$"					System.arraycopy(declaredMethods, 0, result, 0, declaredMethods.length);"
"ReflectionUtils.java:468"$0$0$0$4$40$"					int index = declaredMethods.length;"
"ReflectionUtils.java:469"$0$0$0$6$50$"					for (Method defaultMethod : defaultMethods) {"
"ReflectionUtils.java:470"$0$0$0$3$36$"						result[index] = defaultMethod;"
"ReflectionUtils.java:471"$0$0$0$1$14$"						index++;"
"ReflectionUtils.java:472"$0$0$0$1$6$"					}"
"ReflectionUtils.java:473"$0$0$0$1$5$"				}"
"ReflectionUtils.java:474"$0$0$0$2$10$"				else {"
"ReflectionUtils.java:475"$0$0$0$3$30$"					result = declaredMethods;"
"ReflectionUtils.java:476"$0$0$0$1$5$"				}"
"ReflectionUtils.java:477"$0$0$0$8$88$"				declaredMethodsCache.put(clazz, (result.length == 0 ? EMPTY_METHOD_ARRAY : result));"
"ReflectionUtils.java:478"$0$0$0$1$4$"			}"
"ReflectionUtils.java:479"$0$0$0$4$25$"			catch (Throwable ex) {"
"ReflectionUtils.java:480"$1$0$0$10$86$"				throw new IllegalStateException(""Failed to introspect Class ["" + clazz.getName() +"
"ReflectionUtils.java:481"$1$0$0$9$65$"						""] from ClassLoader ["" + clazz.getClassLoader() + ""]"", ex);"
"ReflectionUtils.java:482"$0$0$0$1$4$"			}"
"ReflectionUtils.java:483"$0$0$0$1$3$"		}"
"ReflectionUtils.java:484"$0$0$0$10$70$"		return (result.length == 0 || !defensive) ? result : result.clone();"
"ReflectionUtils.java:485"$0$0$0$1$2$"	}"
"ReflectionUtils.java:486"$0$0$0$0$0$""
"ReflectionUtils.java:487"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:488"$0$0$0$6$78$"	private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {"
"ReflectionUtils.java:489"$0$0$0$4$29$"		List<Method> result = null;"
"ReflectionUtils.java:490"$1$0$0$6$46$"		for (Class<?> ifc : clazz.getInterfaces()) {"
"ReflectionUtils.java:491"$1$0$0$6$46$"			for (Method ifcMethod : ifc.getMethods()) {"
"ReflectionUtils.java:492"$1$0$0$3$57$"				if (!Modifier.isAbstract(ifcMethod.getModifiers())) {"
"ReflectionUtils.java:493"$0$0$0$5$26$"					if (result == null) {"
"ReflectionUtils.java:494"$0$0$0$4$33$"						result = new ArrayList<>();"
"ReflectionUtils.java:495"$0$0$0$1$6$"					}"
"ReflectionUtils.java:496"$0$0$0$1$27$"					result.add(ifcMethod);"
"ReflectionUtils.java:497"$0$0$0$1$5$"				}"
"ReflectionUtils.java:498"$0$0$0$1$4$"			}"
"ReflectionUtils.java:499"$0$0$0$1$3$"		}"
"ReflectionUtils.java:500"$0$0$0$2$16$"		return result;"
"ReflectionUtils.java:501"$0$0$0$1$2$"	}"
"ReflectionUtils.java:502"$0$0$0$0$0$""
"ReflectionUtils.java:503"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:504"$0$0$0$10$61$"	 * Determine whether the given method is an ""equals"" method."
"ReflectionUtils.java:505"$0$0$0$3$40$"	 * @see java.lang.Object#equals(Object)"
"ReflectionUtils.java:506"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:507"$0$0$0$7$64$"	public static boolean isEqualsMethod(@Nullable Method method) {"
"ReflectionUtils.java:508"$1$0$0$7$61$"		if (method == null || !method.getName().equals(""equals"")) {"
"ReflectionUtils.java:509"$0$0$0$2$16$"			return false;"
"ReflectionUtils.java:510"$0$0$0$1$3$"		}"
"ReflectionUtils.java:511"$1$0$0$5$40$"		if (method.getParameterCount() != 1) {"
"ReflectionUtils.java:512"$0$0$0$2$16$"			return false;"
"ReflectionUtils.java:513"$0$0$0$1$3$"		}"
"ReflectionUtils.java:514"$1$0$0$4$55$"		return method.getParameterTypes()[0] == Object.class;"
"ReflectionUtils.java:515"$0$0$0$1$2$"	}"
"ReflectionUtils.java:516"$0$0$0$0$0$""
"ReflectionUtils.java:517"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:518"$0$0$0$10$62$"	 * Determine whether the given method is a ""hashCode"" method."
"ReflectionUtils.java:519"$0$0$0$3$36$"	 * @see java.lang.Object#hashCode()"
"ReflectionUtils.java:520"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:521"$0$0$0$7$66$"	public static boolean isHashCodeMethod(@Nullable Method method) {"
"ReflectionUtils.java:522"$2$0$0$10$100$"		return (method != null && method.getName().equals(""hashCode"") && method.getParameterCount() == 0);"
"ReflectionUtils.java:523"$0$0$0$1$2$"	}"
"ReflectionUtils.java:524"$0$0$0$0$0$""
"ReflectionUtils.java:525"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:526"$0$0$0$10$62$"	 * Determine whether the given method is a ""toString"" method."
"ReflectionUtils.java:527"$0$0$0$3$36$"	 * @see java.lang.Object#toString()"
"ReflectionUtils.java:528"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:529"$0$0$0$7$66$"	public static boolean isToStringMethod(@Nullable Method method) {"
"ReflectionUtils.java:530"$2$0$0$10$100$"		return (method != null && method.getName().equals(""toString"") && method.getParameterCount() == 0);"
"ReflectionUtils.java:531"$0$0$0$1$2$"	}"
"ReflectionUtils.java:532"$0$0$0$0$0$""
"ReflectionUtils.java:533"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:534"$0$0$0$12$90$"	 * Determine whether the given method is originally declared by {@link java.lang.Object}."
"ReflectionUtils.java:535"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:536"$0$0$0$7$64$"	public static boolean isObjectMethod(@Nullable Method method) {"
"ReflectionUtils.java:537"$1$0$0$9$74$"		return (method != null && (method.getDeclaringClass() == Object.class ||"
"ReflectionUtils.java:538"$0$0$0$5$85$"				isEqualsMethod(method) || isHashCodeMethod(method) || isToStringMethod(method)));"
"ReflectionUtils.java:539"$0$0$0$1$2$"	}"
"ReflectionUtils.java:540"$0$0$0$0$0$""
"ReflectionUtils.java:541"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:542"$0$0$0$11$67$"	 * Determine whether the given method is a CGLIB 'renamed' method,"
"ReflectionUtils.java:543"$0$0$0$5$47$"	 * following the pattern ""CGLIB$methodName$0""."
"ReflectionUtils.java:544"$0$0$0$7$44$"	 * @param renamedMethod the method to check"
"ReflectionUtils.java:545"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:546"$0$0$0$6$67$"	public static boolean isCglibRenamedMethod(Method renamedMethod) {"
"ReflectionUtils.java:547"$1$0$0$4$40$"		String name = renamedMethod.getName();"
"ReflectionUtils.java:548"$0$0$0$3$53$"		if (name.startsWith(CGLIB_RENAMED_METHOD_PREFIX)) {"
"ReflectionUtils.java:549"$0$0$0$6$29$"			int i = name.length() - 1;"
"ReflectionUtils.java:550"$0$0$0$7$56$"			while (i >= 0 && Character.isDigit(name.charAt(i))) {"
"ReflectionUtils.java:551"$0$0$0$1$8$"				i--;"
"ReflectionUtils.java:552"$0$0$0$1$4$"			}"
"ReflectionUtils.java:553"$0$0$0$14$105$"			return (i > CGLIB_RENAMED_METHOD_PREFIX.length() && (i < name.length() - 1) && name.charAt(i) == '$');"
"ReflectionUtils.java:554"$0$0$0$1$3$"		}"
"ReflectionUtils.java:555"$0$0$0$2$15$"		return false;"
"ReflectionUtils.java:556"$0$0$0$1$2$"	}"
"ReflectionUtils.java:557"$0$0$0$0$0$""
"ReflectionUtils.java:558"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:559"$0$0$0$11$73$"	 * Make the given method accessible, explicitly setting it accessible if"
"ReflectionUtils.java:560"$0$0$0$9$68$"	 * necessary. The {@code setAccessible(true)} method is only called"
"ReflectionUtils.java:561"$0$0$0$11$70$"	 * when actually necessary, to avoid unnecessary conflicts with a JVM"
"ReflectionUtils.java:562"$0$0$0$4$32$"	 * SecurityManager (if active)."
"ReflectionUtils.java:563"$0$0$0$8$47$"	 * @param method the method to make accessible"
"ReflectionUtils.java:564"$0$0$0$3$47$"	 * @see java.lang.reflect.Method#setAccessible"
"ReflectionUtils.java:565"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:566"$0$0$0$5$46$"	@SuppressWarnings(""deprecation"")  // on JDK 9"
"ReflectionUtils.java:567"$0$0$0$6$51$"	public static void makeAccessible(Method method) {"
"ReflectionUtils.java:568"$1$0$0$3$51$"		if ((!Modifier.isPublic(method.getModifiers()) ||"
"ReflectionUtils.java:569"$2$0$0$4$95$"				!Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {"
"ReflectionUtils.java:570"$0$0$0$1$30$"			method.setAccessible(true);"
"ReflectionUtils.java:571"$0$0$0$1$3$"		}"
"ReflectionUtils.java:572"$0$0$0$1$2$"	}"
"ReflectionUtils.java:573"$0$0$0$0$0$""
"ReflectionUtils.java:574"$0$0$0$0$0$""
"ReflectionUtils.java:575"$0$0$1$3$18$"	// Field handling"
"ReflectionUtils.java:576"$0$0$0$0$0$""
"ReflectionUtils.java:577"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:578"$0$0$0$15$80$"	 * Attempt to find a {@link Field field} on the supplied {@link Class} with the"
"ReflectionUtils.java:579"$0$0$0$11$74$"	 * supplied {@code name}. Searches all superclasses up to {@link Object}."
"ReflectionUtils.java:580"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:581"$0$0$0$8$37$"	 * @param name the name of the field"
"ReflectionUtils.java:582"$0$0$0$12$72$"	 * @return the corresponding Field object, or {@code null} if not found"
"ReflectionUtils.java:583"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:584"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:585"$0$0$0$8$61$"	public static Field findField(Class<?> clazz, String name) {"
"ReflectionUtils.java:586"$0$0$0$4$38$"		return findField(clazz, name, null);"
"ReflectionUtils.java:587"$0$0$0$1$2$"	}"
"ReflectionUtils.java:588"$0$0$0$0$0$""
"ReflectionUtils.java:589"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:590"$0$0$0$15$80$"	 * Attempt to find a {@link Field field} on the supplied {@link Class} with the"
"ReflectionUtils.java:591"$0$0$0$11$78$"	 * supplied {@code name} and/or {@link Class type}. Searches all superclasses"
"ReflectionUtils.java:592"$0$0$0$5$25$"	 * up to {@link Object}."
"ReflectionUtils.java:593"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:594"$0$0$0$16$80$"	 * @param name the name of the field (may be {@code null} if type is specified)"
"ReflectionUtils.java:595"$0$0$0$16$80$"	 * @param type the type of the field (may be {@code null} if name is specified)"
"ReflectionUtils.java:596"$0$0$0$12$72$"	 * @return the corresponding Field object, or {@code null} if not found"
"ReflectionUtils.java:597"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:598"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:599"$0$0$0$12$96$"	public static Field findField(Class<?> clazz, @Nullable String name, @Nullable Class<?> type) {"
"ReflectionUtils.java:600"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ReflectionUtils.java:601"$0$0$0$17$100$"		Assert.isTrue(name != null || type != null, ""Either name or type of the field must be specified"");"
"ReflectionUtils.java:602"$0$0$0$4$30$"		Class<?> searchType = clazz;"
"ReflectionUtils.java:603"$0$0$0$9$60$"		while (Object.class != searchType && searchType != null) {"
"ReflectionUtils.java:604"$1$0$0$4$50$"			Field[] fields = getDeclaredFields(searchType);"
"ReflectionUtils.java:605"$0$0$0$6$31$"			for (Field field : fields) {"
"ReflectionUtils.java:606"$1$0$0$7$57$"				if ((name == null || name.equals(field.getName())) &&"
"ReflectionUtils.java:607"$1$0$0$6$55$"						(type == null || type.equals(field.getType()))) {"
"ReflectionUtils.java:608"$0$0$0$2$18$"					return field;"
"ReflectionUtils.java:609"$0$0$0$1$5$"				}"
"ReflectionUtils.java:610"$0$0$0$1$4$"			}"
"ReflectionUtils.java:611"$1$0$0$3$43$"			searchType = searchType.getSuperclass();"
"ReflectionUtils.java:612"$0$0$0$1$3$"		}"
"ReflectionUtils.java:613"$0$0$0$2$14$"		return null;"
"ReflectionUtils.java:614"$0$0$0$1$2$"	}"
"ReflectionUtils.java:615"$0$0$0$0$0$""
"ReflectionUtils.java:616"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:617"$0$0$0$13$80$"	 * Set the field represented by the supplied {@linkplain Field field object} on"
"ReflectionUtils.java:618"$1$0$0$12$83$"	 * the specified {@linkplain Object target object} to the specified {@code value}."
"ReflectionUtils.java:619"$0$0$0$11$84$"	 * <p>In accordance with {@link Field#set(Object, Object)} semantics, the new value"
"ReflectionUtils.java:620"$0$0$0$12$76$"	 * is automatically unwrapped if the underlying field has a primitive type."
"ReflectionUtils.java:621"$0$0$0$11$72$"	 * <p>This method does not support setting {@code static final} fields."
"ReflectionUtils.java:622"$0$0$0$11$97$"	 * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException(Exception)}."
"ReflectionUtils.java:623"$0$0$0$7$33$"	 * @param field the field to set"
"ReflectionUtils.java:624"$2$0$0$12$61$"	 * @param target the target object on which to set the field"
"ReflectionUtils.java:625"$0$0$0$11$55$"	 * @param value the value to set (may be {@code null})"
"ReflectionUtils.java:626"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:627"$1$0$0$12$92$"	public static void setField(Field field, @Nullable Object target, @Nullable Object value) {"
"ReflectionUtils.java:628"$0$0$0$2$7$"		try {"
"ReflectionUtils.java:629"$1$0$0$2$28$"			field.set(target, value);"
"ReflectionUtils.java:630"$0$0$0$1$3$"		}"
"ReflectionUtils.java:631"$0$0$0$4$37$"		catch (IllegalAccessException ex) {"
"ReflectionUtils.java:632"$0$0$0$1$33$"			handleReflectionException(ex);"
"ReflectionUtils.java:633"$0$0$0$1$3$"		}"
"ReflectionUtils.java:634"$0$0$0$1$2$"	}"
"ReflectionUtils.java:635"$0$0$0$0$0$""
"ReflectionUtils.java:636"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:637"$0$0$0$14$79$"	 * Get the field represented by the supplied {@link Field field object} on the"
"ReflectionUtils.java:638"$2$0$0$11$88$"	 * specified {@link Object target object}. In accordance with {@link Field#get(Object)}"
"ReflectionUtils.java:639"$0$0$0$12$82$"	 * semantics, the returned value is automatically wrapped if the underlying field"
"ReflectionUtils.java:640"$0$0$0$5$25$"	 * has a primitive type."
"ReflectionUtils.java:641"$0$0$0$11$97$"	 * <p>Thrown exceptions are handled via a call to {@link #handleReflectionException(Exception)}."
"ReflectionUtils.java:642"$1$0$0$7$33$"	 * @param field the field to get"
"ReflectionUtils.java:643"$3$0$0$12$63$"	 * @param target the target object from which to get the field"
"ReflectionUtils.java:644"$0$0$0$6$37$"	 * @return the field's current value"
"ReflectionUtils.java:645"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:646"$0$0$0$1$10$"	@Nullable"
"ReflectionUtils.java:647"$2$0$0$9$70$"	public static Object getField(Field field, @Nullable Object target) {"
"ReflectionUtils.java:648"$0$0$0$2$7$"		try {"
"ReflectionUtils.java:649"$2$0$0$2$28$"			return field.get(target);"
"ReflectionUtils.java:650"$0$0$0$1$3$"		}"
"ReflectionUtils.java:651"$0$0$0$4$37$"		catch (IllegalAccessException ex) {"
"ReflectionUtils.java:652"$0$0$0$1$33$"			handleReflectionException(ex);"
"ReflectionUtils.java:653"$0$0$0$1$3$"		}"
"ReflectionUtils.java:654"$1$0$0$6$59$"		throw new IllegalStateException(""Should never get here"");"
"ReflectionUtils.java:655"$0$0$0$1$2$"	}"
"ReflectionUtils.java:656"$0$0$0$0$0$""
"ReflectionUtils.java:657"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:658"$0$0$0$14$80$"	 * Invoke the given callback on all locally declared fields in the given class."
"ReflectionUtils.java:659"$1$0$0$8$44$"	 * @param clazz the target class to analyze"
"ReflectionUtils.java:660"$0$0$0$10$51$"	 * @param fc the callback to invoke for each field"
"ReflectionUtils.java:661"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:662"$0$0$0$3$14$"	 * @since 4.2"
"ReflectionUtils.java:663"$0$0$0$3$22$"	 * @see #doWithFields"
"ReflectionUtils.java:664"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:665"$0$0$0$8$73$"	public static void doWithLocalFields(Class<?> clazz, FieldCallback fc) {"
"ReflectionUtils.java:666"$1$0$0$6$48$"		for (Field field : getDeclaredFields(clazz)) {"
"ReflectionUtils.java:667"$0$0$0$2$8$"			try {"
"ReflectionUtils.java:668"$0$0$0$1$21$"				fc.doWith(field);"
"ReflectionUtils.java:669"$0$0$0$1$4$"			}"
"ReflectionUtils.java:670"$0$0$0$4$38$"			catch (IllegalAccessException ex) {"
"ReflectionUtils.java:671"$1$0$0$15$100$"				throw new IllegalStateException(""Not allowed to access field '"" + field.getName() + ""': "" + ex);"
"ReflectionUtils.java:672"$0$0$0$1$4$"			}"
"ReflectionUtils.java:673"$0$0$0$1$3$"		}"
"ReflectionUtils.java:674"$0$0$0$1$2$"	}"
"ReflectionUtils.java:675"$0$0$0$0$0$""
"ReflectionUtils.java:676"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:677"$1$0$0$15$77$"	 * Invoke the given callback on all fields in the target class, going up the"
"ReflectionUtils.java:678"$1$0$0$8$47$"	 * class hierarchy to get all declared fields."
"ReflectionUtils.java:679"$1$0$0$8$44$"	 * @param clazz the target class to analyze"
"ReflectionUtils.java:680"$0$0$0$10$51$"	 * @param fc the callback to invoke for each field"
"ReflectionUtils.java:681"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:682"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:683"$0$0$0$8$68$"	public static void doWithFields(Class<?> clazz, FieldCallback fc) {"
"ReflectionUtils.java:684"$0$0$0$3$32$"		doWithFields(clazz, fc, null);"
"ReflectionUtils.java:685"$0$0$0$1$2$"	}"
"ReflectionUtils.java:686"$0$0$0$0$0$""
"ReflectionUtils.java:687"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:688"$1$0$0$15$77$"	 * Invoke the given callback on all fields in the target class, going up the"
"ReflectionUtils.java:689"$1$0$0$8$47$"	 * class hierarchy to get all declared fields."
"ReflectionUtils.java:690"$1$0$0$8$44$"	 * @param clazz the target class to analyze"
"ReflectionUtils.java:691"$0$0$0$10$51$"	 * @param fc the callback to invoke for each field"
"ReflectionUtils.java:692"$0$0$0$14$76$"	 * @param ff the filter that determines the fields to apply the callback to"
"ReflectionUtils.java:693"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:694"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:695"$0$0$0$11$94$"	public static void doWithFields(Class<?> clazz, FieldCallback fc, @Nullable FieldFilter ff) {"
"ReflectionUtils.java:696"$0$0$1$7$47$"		// Keep backing up the inheritance hierarchy."
"ReflectionUtils.java:697"$1$0$0$4$31$"		Class<?> targetClass = clazz;"
"ReflectionUtils.java:698"$0$0$0$2$6$"		do {"
"ReflectionUtils.java:699"$2$0$0$4$51$"			Field[] fields = getDeclaredFields(targetClass);"
"ReflectionUtils.java:700"$0$0$0$6$31$"			for (Field field : fields) {"
"ReflectionUtils.java:701"$0$0$0$7$43$"				if (ff != null && !ff.matches(field)) {"
"ReflectionUtils.java:702"$0$0$0$1$14$"					continue;"
"ReflectionUtils.java:703"$0$0$0$1$5$"				}"
"ReflectionUtils.java:704"$0$0$0$2$9$"				try {"
"ReflectionUtils.java:705"$0$0$0$1$22$"					fc.doWith(field);"
"ReflectionUtils.java:706"$0$0$0$1$5$"				}"
"ReflectionUtils.java:707"$0$0$0$4$39$"				catch (IllegalAccessException ex) {"
"ReflectionUtils.java:708"$1$0$0$15$101$"					throw new IllegalStateException(""Not allowed to access field '"" + field.getName() + ""': "" + ex);"
"ReflectionUtils.java:709"$0$0$0$1$5$"				}"
"ReflectionUtils.java:710"$0$0$0$1$4$"			}"
"ReflectionUtils.java:711"$3$0$0$3$45$"			targetClass = targetClass.getSuperclass();"
"ReflectionUtils.java:712"$0$0$0$1$3$"		}"
"ReflectionUtils.java:713"$2$0$0$8$61$"		while (targetClass != null && targetClass != Object.class);"
"ReflectionUtils.java:714"$0$0$0$1$2$"	}"
"ReflectionUtils.java:715"$0$0$0$0$0$""
"ReflectionUtils.java:716"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:717"$1$0$0$10$79$"	 * This variant retrieves {@link Class#getDeclaredFields()} from a local cache"
"ReflectionUtils.java:718"$0$0$0$13$82$"	 * in order to avoid the JVM's SecurityManager check and defensive array copying."
"ReflectionUtils.java:719"$0$0$0$7$40$"	 * @param clazz the class to introspect"
"ReflectionUtils.java:720"$0$0$0$7$38$"	 * @return the cached array of fields"
"ReflectionUtils.java:721"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:722"$1$0$0$3$34$"	 * @see Class#getDeclaredFields()"
"ReflectionUtils.java:723"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:724"$1$0$0$6$59$"	private static Field[] getDeclaredFields(Class<?> clazz) {"
"ReflectionUtils.java:725"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ReflectionUtils.java:726"$1$0$0$4$50$"		Field[] result = declaredFieldsCache.get(clazz);"
"ReflectionUtils.java:727"$0$0$0$5$23$"		if (result == null) {"
"ReflectionUtils.java:728"$0$0$0$2$8$"			try {"
"ReflectionUtils.java:729"$1$0$0$3$39$"				result = clazz.getDeclaredFields();"
"ReflectionUtils.java:730"$0$0$0$8$86$"				declaredFieldsCache.put(clazz, (result.length == 0 ? EMPTY_FIELD_ARRAY : result));"
"ReflectionUtils.java:731"$0$0$0$1$4$"			}"
"ReflectionUtils.java:732"$0$0$0$4$25$"			catch (Throwable ex) {"
"ReflectionUtils.java:733"$1$0$0$10$86$"				throw new IllegalStateException(""Failed to introspect Class ["" + clazz.getName() +"
"ReflectionUtils.java:734"$1$0$0$9$65$"						""] from ClassLoader ["" + clazz.getClassLoader() + ""]"", ex);"
"ReflectionUtils.java:735"$0$0$0$1$4$"			}"
"ReflectionUtils.java:736"$0$0$0$1$3$"		}"
"ReflectionUtils.java:737"$0$0$0$2$16$"		return result;"
"ReflectionUtils.java:738"$0$0$0$1$2$"	}"
"ReflectionUtils.java:739"$0$0$0$0$0$""
"ReflectionUtils.java:740"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:741"$0$0$0$14$77$"	 * Given the source object and the destination, which must be the same class"
"ReflectionUtils.java:742"$0$0$0$12$75$"	 * or a subclass, copy all fields, including inherited fields. Designed to"
"ReflectionUtils.java:743"$0$0$0$8$52$"	 * work on objects with public no-arg constructors."
"ReflectionUtils.java:744"$0$0$0$6$56$"	 * @throws IllegalStateException if introspection fails"
"ReflectionUtils.java:745"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:746"$0$0$0$10$80$"	public static void shallowCopyFieldState(final Object src, final Object dest) {"
"ReflectionUtils.java:747"$0$0$0$8$62$"		Assert.notNull(src, ""Source for field copy cannot be null"");"
"ReflectionUtils.java:748"$0$0$0$8$68$"		Assert.notNull(dest, ""Destination for field copy cannot be null"");"
"ReflectionUtils.java:749"$2$0$0$3$58$"		if (!src.getClass().isAssignableFrom(dest.getClass())) {"
"ReflectionUtils.java:750"$2$0$0$8$89$"			throw new IllegalArgumentException(""Destination class ["" + dest.getClass().getName() +"
"ReflectionUtils.java:751"$2$0$0$14$86$"					""] must be same or subclass as source class ["" + src.getClass().getName() + ""]"");"
"ReflectionUtils.java:752"$0$0$0$1$3$"		}"
"ReflectionUtils.java:753"$1$0$0$4$41$"		doWithFields(src.getClass(), field -> {"
"ReflectionUtils.java:754"$0$0$0$1$25$"			makeAccessible(field);"
"ReflectionUtils.java:755"$1$0$0$4$36$"			Object srcValue = field.get(src);"
"ReflectionUtils.java:756"$0$0$0$2$29$"			field.set(dest, srcValue);"
"ReflectionUtils.java:757"$0$0$0$2$22$"		}, COPYABLE_FIELDS);"
"ReflectionUtils.java:758"$0$0$0$1$2$"	}"
"ReflectionUtils.java:759"$0$0$0$0$0$""
"ReflectionUtils.java:760"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:761"$0$0$0$12$74$"	 * Determine whether the given field is a ""public static final"" constant."
"ReflectionUtils.java:762"$0$0$0$7$35$"	 * @param field the field to check"
"ReflectionUtils.java:763"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:764"$0$0$0$6$57$"	public static boolean isPublicStaticFinal(Field field) {"
"ReflectionUtils.java:765"$1$0$0$4$39$"		int modifiers = field.getModifiers();"
"ReflectionUtils.java:766"$0$0$0$6$103$"		return (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers));"
"ReflectionUtils.java:767"$0$0$0$1$2$"	}"
"ReflectionUtils.java:768"$0$0$0$0$0$""
"ReflectionUtils.java:769"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:770"$0$0$0$11$72$"	 * Make the given field accessible, explicitly setting it accessible if"
"ReflectionUtils.java:771"$0$0$0$9$68$"	 * necessary. The {@code setAccessible(true)} method is only called"
"ReflectionUtils.java:772"$0$0$0$11$70$"	 * when actually necessary, to avoid unnecessary conflicts with a JVM"
"ReflectionUtils.java:773"$0$0$0$4$32$"	 * SecurityManager (if active)."
"ReflectionUtils.java:774"$0$0$0$8$45$"	 * @param field the field to make accessible"
"ReflectionUtils.java:775"$0$0$0$3$46$"	 * @see java.lang.reflect.Field#setAccessible"
"ReflectionUtils.java:776"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:777"$0$0$0$5$46$"	@SuppressWarnings(""deprecation"")  // on JDK 9"
"ReflectionUtils.java:778"$0$0$0$6$49$"	public static void makeAccessible(Field field) {"
"ReflectionUtils.java:779"$1$0$0$3$50$"		if ((!Modifier.isPublic(field.getModifiers()) ||"
"ReflectionUtils.java:780"$2$0$0$2$67$"				!Modifier.isPublic(field.getDeclaringClass().getModifiers()) ||"
"ReflectionUtils.java:781"$1$0$0$4$71$"				Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {"
"ReflectionUtils.java:782"$0$0$0$1$29$"			field.setAccessible(true);"
"ReflectionUtils.java:783"$0$0$0$1$3$"		}"
"ReflectionUtils.java:784"$0$0$0$1$2$"	}"
"ReflectionUtils.java:785"$0$0$0$0$0$""
"ReflectionUtils.java:786"$0$0$0$0$0$""
"ReflectionUtils.java:787"$0$0$1$3$18$"	// Cache handling"
"ReflectionUtils.java:788"$0$0$0$0$0$""
"ReflectionUtils.java:789"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:790"$0$0$0$6$42$"	 * Clear the internal method/field cache."
"ReflectionUtils.java:791"$0$0$0$3$16$"	 * @since 4.2.4"
"ReflectionUtils.java:792"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:793"$0$0$0$5$34$"	public static void clearCache() {"
"ReflectionUtils.java:794"$0$0$0$1$31$"		declaredMethodsCache.clear();"
"ReflectionUtils.java:795"$0$0$0$1$30$"		declaredFieldsCache.clear();"
"ReflectionUtils.java:796"$0$0$0$1$2$"	}"
"ReflectionUtils.java:797"$0$0$0$0$0$""
"ReflectionUtils.java:798"$0$0$0$0$0$""
"ReflectionUtils.java:799"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:800"$0$0$0$7$34$"	 * Action to take on each method."
"ReflectionUtils.java:801"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:802"$0$0$0$1$21$"	@FunctionalInterface"
"ReflectionUtils.java:803"$0$0$0$4$34$"	public interface MethodCallback {"
"ReflectionUtils.java:804"$0$0$0$0$0$""
"ReflectionUtils.java:805"$0$0$0$1$5$"		/**"
"ReflectionUtils.java:806"$0$0$0$8$49$"		 * Perform an operation using the given method."
"ReflectionUtils.java:807"$0$0$0$8$43$"		 * @param method the method to operate on"
"ReflectionUtils.java:808"$0$0$0$1$5$"		 */"
"ReflectionUtils.java:809"$0$0$0$6$85$"		void doWith(Method method) throws IllegalArgumentException, IllegalAccessException;"
"ReflectionUtils.java:810"$0$0$0$1$2$"	}"
"ReflectionUtils.java:811"$0$0$0$0$0$""
"ReflectionUtils.java:812"$0$0$0$0$0$""
"ReflectionUtils.java:813"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:814"$0$0$0$15$86$"	 * Callback optionally used to filter methods to be operated on by a method callback."
"ReflectionUtils.java:815"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:816"$0$0$0$1$21$"	@FunctionalInterface"
"ReflectionUtils.java:817"$0$0$0$4$32$"	public interface MethodFilter {"
"ReflectionUtils.java:818"$0$0$0$0$0$""
"ReflectionUtils.java:819"$0$0$0$1$5$"		/**"
"ReflectionUtils.java:820"$0$0$0$7$48$"		 * Determine whether the given method matches."
"ReflectionUtils.java:821"$0$0$0$7$38$"		 * @param method the method to check"
"ReflectionUtils.java:822"$0$0$0$1$5$"		 */"
"ReflectionUtils.java:823"$0$0$0$3$33$"		boolean matches(Method method);"
"ReflectionUtils.java:824"$0$0$0$1$2$"	}"
"ReflectionUtils.java:825"$0$0$0$0$0$""
"ReflectionUtils.java:826"$0$0$0$0$0$""
"ReflectionUtils.java:827"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:828"$0$0$0$10$62$"	 * Callback interface invoked on each field in the hierarchy."
"ReflectionUtils.java:829"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:830"$0$0$0$1$21$"	@FunctionalInterface"
"ReflectionUtils.java:831"$0$0$0$4$33$"	public interface FieldCallback {"
"ReflectionUtils.java:832"$0$0$0$0$0$""
"ReflectionUtils.java:833"$0$0$0$1$5$"		/**"
"ReflectionUtils.java:834"$0$0$0$8$48$"		 * Perform an operation using the given field."
"ReflectionUtils.java:835"$0$0$0$8$41$"		 * @param field the field to operate on"
"ReflectionUtils.java:836"$0$0$0$1$5$"		 */"
"ReflectionUtils.java:837"$0$0$0$6$83$"		void doWith(Field field) throws IllegalArgumentException, IllegalAccessException;"
"ReflectionUtils.java:838"$0$0$0$1$2$"	}"
"ReflectionUtils.java:839"$0$0$0$0$0$""
"ReflectionUtils.java:840"$0$0$0$0$0$""
"ReflectionUtils.java:841"$0$0$0$1$4$"	/**"
"ReflectionUtils.java:842"$0$0$0$15$84$"	 * Callback optionally used to filter fields to be operated on by a field callback."
"ReflectionUtils.java:843"$0$0$0$1$4$"	 */"
"ReflectionUtils.java:844"$0$0$0$1$21$"	@FunctionalInterface"
"ReflectionUtils.java:845"$0$0$0$4$31$"	public interface FieldFilter {"
"ReflectionUtils.java:846"$0$0$0$0$0$""
"ReflectionUtils.java:847"$0$0$0$1$5$"		/**"
"ReflectionUtils.java:848"$0$0$0$7$47$"		 * Determine whether the given field matches."
"ReflectionUtils.java:849"$0$0$0$7$36$"		 * @param field the field to check"
"ReflectionUtils.java:850"$0$0$0$1$5$"		 */"
"ReflectionUtils.java:851"$0$0$0$3$31$"		boolean matches(Field field);"
"ReflectionUtils.java:852"$0$0$0$1$2$"	}"
"ReflectionUtils.java:853"$0$0$0$0$0$""
"ReflectionUtils.java:854"$0$0$0$1$1$"}"
"MutablePropertySources.java:1"$0$0$0$1$2$"/*"
"MutablePropertySources.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"MutablePropertySources.java:3"$0$0$0$1$2$" *"
"MutablePropertySources.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MutablePropertySources.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MutablePropertySources.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MutablePropertySources.java:7"$0$0$0$1$2$" *"
"MutablePropertySources.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MutablePropertySources.java:9"$0$0$0$1$2$" *"
"MutablePropertySources.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MutablePropertySources.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MutablePropertySources.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MutablePropertySources.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MutablePropertySources.java:14"$0$0$0$5$33$" * limitations under the License."
"MutablePropertySources.java:15"$0$0$0$1$3$" */"
"MutablePropertySources.java:16"$0$0$0$0$0$""
"MutablePropertySources.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"MutablePropertySources.java:18"$0$0$0$0$0$""
"MutablePropertySources.java:19"$0$0$0$2$26$"import java.util.Iterator;"
"MutablePropertySources.java:20"$0$0$0$2$22$"import java.util.List;"
"MutablePropertySources.java:21"$0$0$0$2$29$"import java.util.Spliterator;"
"MutablePropertySources.java:22"$0$0$0$2$30$"import java.util.Spliterators;"
"MutablePropertySources.java:23"$0$0$0$2$49$"import java.util.concurrent.CopyOnWriteArrayList;"
"MutablePropertySources.java:24"$0$0$0$2$31$"import java.util.stream.Stream;"
"MutablePropertySources.java:25"$0$0$0$0$0$""
"MutablePropertySources.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MutablePropertySources.java:27"$0$0$0$0$0$""
"MutablePropertySources.java:28"$0$0$0$1$3$"/**"
"MutablePropertySources.java:29"$0$0$0$9$71$" * The default implementation of the {@link PropertySources} interface."
"MutablePropertySources.java:30"$0$0$0$11$79$" * Allows manipulation of contained property sources and provides a constructor"
"MutablePropertySources.java:31"$0$0$0$8$60$" * for copying an existing {@code PropertySources} instance."
"MutablePropertySources.java:32"$0$0$0$1$2$" *"
"MutablePropertySources.java:33"$0$0$0$11$81$" * <p>Where <em>precedence</em> is mentioned in methods such as {@link #addFirst}"
"MutablePropertySources.java:34"$0$0$0$15$83$" * and {@link #addLast}, this is with regard to the order in which property sources"
"MutablePropertySources.java:35"$0$0$0$13$84$" * will be searched when resolving a given property with a {@link PropertyResolver}."
"MutablePropertySources.java:36"$0$0$0$1$2$" *"
"MutablePropertySources.java:37"$0$0$0$4$22$" * @author Chris Beams"
"MutablePropertySources.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"MutablePropertySources.java:39"$0$0$0$3$13$" * @since 3.1"
"MutablePropertySources.java:40"$0$0$0$3$39$" * @see PropertySourcesPropertyResolver"
"MutablePropertySources.java:41"$0$0$0$1$3$" */"
"MutablePropertySources.java:42"$0$0$0$6$64$"public class MutablePropertySources implements PropertySources {"
"MutablePropertySources.java:43"$0$0$0$0$0$""
"MutablePropertySources.java:44"$0$0$0$7$89$"	private final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<>();"
"MutablePropertySources.java:45"$0$0$0$0$0$""
"MutablePropertySources.java:46"$0$0$0$0$0$""
"MutablePropertySources.java:47"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:48"$0$0$0$7$55$"	 * Create a new {@link MutablePropertySources} object."
"MutablePropertySources.java:49"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:50"$0$0$0$3$34$"	public MutablePropertySources() {"
"MutablePropertySources.java:51"$0$0$0$1$2$"	}"
"MutablePropertySources.java:52"$0$0$0$0$0$""
"MutablePropertySources.java:53"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:54"$0$0$0$10$78$"	 * Create a new {@code MutablePropertySources} from the given propertySources"
"MutablePropertySources.java:55"$0$0$0$11$86$"	 * object, preserving the original order of contained {@code PropertySource} objects."
"MutablePropertySources.java:56"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:57"$0$0$0$4$65$"	public MutablePropertySources(PropertySources propertySources) {"
"MutablePropertySources.java:58"$0$0$0$1$9$"		this();"
"MutablePropertySources.java:59"$0$0$0$6$60$"		for (PropertySource<?> propertySource : propertySources) {"
"MutablePropertySources.java:60"$0$0$0$1$27$"			addLast(propertySource);"
"MutablePropertySources.java:61"$0$0$0$1$3$"		}"
"MutablePropertySources.java:62"$0$0$0$1$2$"	}"
"MutablePropertySources.java:63"$0$0$0$0$0$""
"MutablePropertySources.java:64"$0$0$0$0$0$""
"MutablePropertySources.java:65"$0$0$0$1$10$"	@Override"
"MutablePropertySources.java:66"$0$0$0$4$48$"	public Iterator<PropertySource<?>> iterator() {"
"MutablePropertySources.java:67"$0$0$0$2$44$"		return this.propertySourceList.iterator();"
"MutablePropertySources.java:68"$0$0$0$1$2$"	}"
"MutablePropertySources.java:69"$0$0$0$0$0$""
"MutablePropertySources.java:70"$0$0$0$1$10$"	@Override"
"MutablePropertySources.java:71"$0$0$0$4$54$"	public Spliterator<PropertySource<?>> spliterator() {"
"MutablePropertySources.java:72"$0$0$0$3$62$"		return Spliterators.spliterator(this.propertySourceList, 0);"
"MutablePropertySources.java:73"$0$0$0$1$2$"	}"
"MutablePropertySources.java:74"$0$0$0$0$0$""
"MutablePropertySources.java:75"$0$0$0$1$10$"	@Override"
"MutablePropertySources.java:76"$0$0$0$4$44$"	public Stream<PropertySource<?>> stream() {"
"MutablePropertySources.java:77"$0$0$0$2$42$"		return this.propertySourceList.stream();"
"MutablePropertySources.java:78"$0$0$0$1$2$"	}"
"MutablePropertySources.java:79"$0$0$0$0$0$""
"MutablePropertySources.java:80"$0$0$0$1$10$"	@Override"
"MutablePropertySources.java:81"$0$0$0$5$39$"	public boolean contains(String name) {"
"MutablePropertySources.java:82"$0$0$0$2$70$"		return this.propertySourceList.contains(PropertySource.named(name));"
"MutablePropertySources.java:83"$0$0$0$1$2$"	}"
"MutablePropertySources.java:84"$0$0$0$0$0$""
"MutablePropertySources.java:85"$0$0$0$1$10$"	@Override"
"MutablePropertySources.java:86"$0$0$0$1$10$"	@Nullable"
"MutablePropertySources.java:87"$1$0$0$5$44$"	public PropertySource<?> get(String name) {"
"MutablePropertySources.java:88"$0$0$0$4$74$"		int index = this.propertySourceList.indexOf(PropertySource.named(name));"
"MutablePropertySources.java:89"$1$0$0$8$67$"		return (index != -1 ? this.propertySourceList.get(index) : null);"
"MutablePropertySources.java:90"$0$0$0$1$2$"	}"
"MutablePropertySources.java:91"$0$0$0$0$0$""
"MutablePropertySources.java:92"$0$0$0$0$0$""
"MutablePropertySources.java:93"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:94"$0$0$0$10$65$"	 * Add the given property source object with highest precedence."
"MutablePropertySources.java:95"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:96"$0$0$0$5$57$"	public void addFirst(PropertySource<?> propertySource) {"
"MutablePropertySources.java:97"$0$0$0$1$34$"		removeIfPresent(propertySource);"
"MutablePropertySources.java:98"$0$0$0$2$49$"		this.propertySourceList.add(0, propertySource);"
"MutablePropertySources.java:99"$0$0$0$1$2$"	}"
"MutablePropertySources.java:100"$0$0$0$0$0$""
"MutablePropertySources.java:101"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:102"$0$0$0$10$64$"	 * Add the given property source object with lowest precedence."
"MutablePropertySources.java:103"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:104"$0$0$0$5$56$"	public void addLast(PropertySource<?> propertySource) {"
"MutablePropertySources.java:105"$0$0$0$1$34$"		removeIfPresent(propertySource);"
"MutablePropertySources.java:106"$0$0$0$1$46$"		this.propertySourceList.add(propertySource);"
"MutablePropertySources.java:107"$0$0$0$1$2$"	}"
"MutablePropertySources.java:108"$0$0$0$0$0$""
"MutablePropertySources.java:109"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:110"$0$0$0$11$75$"	 * Add the given property source object with precedence immediately higher"
"MutablePropertySources.java:111"$0$0$0$7$44$"	 * than the named relative property source."
"MutablePropertySources.java:112"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:113"$0$0$0$7$93$"	public void addBefore(String relativePropertySourceName, PropertySource<?> propertySource) {"
"MutablePropertySources.java:114"$0$0$0$2$74$"		assertLegalRelativeAddition(relativePropertySourceName, propertySource);"
"MutablePropertySources.java:115"$0$0$0$1$34$"		removeIfPresent(propertySource);"
"MutablePropertySources.java:116"$0$0$0$4$67$"		int index = assertPresentAndGetIndex(relativePropertySourceName);"
"MutablePropertySources.java:117"$0$0$0$2$36$"		addAtIndex(index, propertySource);"
"MutablePropertySources.java:118"$0$0$0$1$2$"	}"
"MutablePropertySources.java:119"$0$0$0$0$0$""
"MutablePropertySources.java:120"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:121"$0$0$0$11$74$"	 * Add the given property source object with precedence immediately lower"
"MutablePropertySources.java:122"$0$0$0$7$44$"	 * than the named relative property source."
"MutablePropertySources.java:123"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:124"$0$0$0$7$92$"	public void addAfter(String relativePropertySourceName, PropertySource<?> propertySource) {"
"MutablePropertySources.java:125"$0$0$0$2$74$"		assertLegalRelativeAddition(relativePropertySourceName, propertySource);"
"MutablePropertySources.java:126"$0$0$0$1$34$"		removeIfPresent(propertySource);"
"MutablePropertySources.java:127"$0$0$0$4$67$"		int index = assertPresentAndGetIndex(relativePropertySourceName);"
"MutablePropertySources.java:128"$0$0$0$4$40$"		addAtIndex(index + 1, propertySource);"
"MutablePropertySources.java:129"$0$0$0$1$2$"	}"
"MutablePropertySources.java:130"$0$0$0$0$0$""
"MutablePropertySources.java:131"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:132"$0$0$0$14$80$"	 * Return the precedence of the given property source, {@code -1} if not found."
"MutablePropertySources.java:133"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:134"$0$0$0$5$60$"	public int precedenceOf(PropertySource<?> propertySource) {"
"MutablePropertySources.java:135"$0$0$0$2$57$"		return this.propertySourceList.indexOf(propertySource);"
"MutablePropertySources.java:136"$0$0$0$1$2$"	}"
"MutablePropertySources.java:137"$0$0$0$0$0$""
"MutablePropertySources.java:138"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:139"$0$0$0$16$89$"	 * Remove and return the property source with the given name, {@code null} if not found."
"MutablePropertySources.java:140"$0$0$0$13$66$"	 * @param name the name of the property source to find and remove"
"MutablePropertySources.java:141"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:142"$0$0$0$1$10$"	@Nullable"
"MutablePropertySources.java:143"$0$0$0$5$47$"	public PropertySource<?> remove(String name) {"
"MutablePropertySources.java:144"$0$0$0$4$74$"		int index = this.propertySourceList.indexOf(PropertySource.named(name));"
"MutablePropertySources.java:145"$0$0$0$8$70$"		return (index != -1 ? this.propertySourceList.remove(index) : null);"
"MutablePropertySources.java:146"$0$0$0$1$2$"	}"
"MutablePropertySources.java:147"$0$0$0$0$0$""
"MutablePropertySources.java:148"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:149"$0$0$0$15$90$"	 * Replace the property source with the given name with the given property source object."
"MutablePropertySources.java:150"$0$0$0$13$67$"	 * @param name the name of the property source to find and replace"
"MutablePropertySources.java:151"$0$0$0$7$57$"	 * @param propertySource the replacement property source"
"MutablePropertySources.java:152"$0$0$0$13$89$"	 * @throws IllegalArgumentException if no property source with the given name is present"
"MutablePropertySources.java:153"$0$0$0$3$18$"	 * @see #contains"
"MutablePropertySources.java:154"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:155"$0$0$0$7$69$"	public void replace(String name, PropertySource<?> propertySource) {"
"MutablePropertySources.java:156"$0$0$0$4$45$"		int index = assertPresentAndGetIndex(name);"
"MutablePropertySources.java:157"$0$0$0$2$53$"		this.propertySourceList.set(index, propertySource);"
"MutablePropertySources.java:158"$0$0$0$1$2$"	}"
"MutablePropertySources.java:159"$0$0$0$0$0$""
"MutablePropertySources.java:160"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:161"$0$0$0$9$66$"	 * Return the number of {@link PropertySource} objects contained."
"MutablePropertySources.java:162"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:163"$0$0$0$4$20$"	public int size() {"
"MutablePropertySources.java:164"$0$0$0$2$40$"		return this.propertySourceList.size();"
"MutablePropertySources.java:165"$0$0$0$1$2$"	}"
"MutablePropertySources.java:166"$0$0$0$0$0$""
"MutablePropertySources.java:167"$0$0$0$1$10$"	@Override"
"MutablePropertySources.java:168"$0$0$0$4$27$"	public String toString() {"
"MutablePropertySources.java:169"$0$0$0$2$44$"		return this.propertySourceList.toString();"
"MutablePropertySources.java:170"$0$0$0$1$2$"	}"
"MutablePropertySources.java:171"$0$0$0$0$0$""
"MutablePropertySources.java:172"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:173"$0$0$0$14$80$"	 * Ensure that the given property source is not being added relative to itself."
"MutablePropertySources.java:174"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:175"$0$0$0$7$114$"	protected void assertLegalRelativeAddition(String relativePropertySourceName, PropertySource<?> propertySource) {"
"MutablePropertySources.java:176"$1$0$0$4$58$"		String newPropertySourceName = propertySource.getName();"
"MutablePropertySources.java:177"$0$0$0$3$65$"		if (relativePropertySourceName.equals(newPropertySourceName)) {"
"MutablePropertySources.java:178"$0$0$0$3$38$"			throw new IllegalArgumentException("
"MutablePropertySources.java:179"$0$0$0$13$96$"					""PropertySource named '"" + newPropertySourceName + ""' cannot be added relative to itself"");"
"MutablePropertySources.java:180"$0$0$0$1$3$"		}"
"MutablePropertySources.java:181"$0$0$0$1$2$"	}"
"MutablePropertySources.java:182"$0$0$0$0$0$""
"MutablePropertySources.java:183"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:184"$0$0$0$10$54$"	 * Remove the given property source if it is present."
"MutablePropertySources.java:185"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:186"$0$0$0$5$67$"	protected void removeIfPresent(PropertySource<?> propertySource) {"
"MutablePropertySources.java:187"$0$0$0$1$49$"		this.propertySourceList.remove(propertySource);"
"MutablePropertySources.java:188"$0$0$0$1$2$"	}"
"MutablePropertySources.java:189"$0$0$0$0$0$""
"MutablePropertySources.java:190"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:191"$0$0$0$13$68$"	 * Add the given property source at a particular index in the list."
"MutablePropertySources.java:192"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:193"$0$0$0$7$71$"	private void addAtIndex(int index, PropertySource<?> propertySource) {"
"MutablePropertySources.java:194"$0$0$0$1$34$"		removeIfPresent(propertySource);"
"MutablePropertySources.java:195"$0$0$0$2$53$"		this.propertySourceList.add(index, propertySource);"
"MutablePropertySources.java:196"$0$0$0$1$2$"	}"
"MutablePropertySources.java:197"$0$0$0$0$0$""
"MutablePropertySources.java:198"$0$0$0$1$4$"	/**"
"MutablePropertySources.java:199"$0$0$0$13$74$"	 * Assert that the named property source is present and return its index."
"MutablePropertySources.java:200"$1$0$0$12$89$"	 * @param name {@linkplain PropertySource#getName() name of the property source} to find"
"MutablePropertySources.java:201"$0$0$0$11$80$"	 * @throws IllegalArgumentException if the named property source is not present"
"MutablePropertySources.java:202"$0$0$0$1$4$"	 */"
"MutablePropertySources.java:203"$0$0$0$5$52$"	private int assertPresentAndGetIndex(String name) {"
"MutablePropertySources.java:204"$0$0$0$4$74$"		int index = this.propertySourceList.indexOf(PropertySource.named(name));"
"MutablePropertySources.java:205"$0$0$0$5$20$"		if (index == -1) {"
"MutablePropertySources.java:206"$0$0$0$12$92$"			throw new IllegalArgumentException(""PropertySource named '"" + name + ""' does not exist"");"
"MutablePropertySources.java:207"$0$0$0$1$3$"		}"
"MutablePropertySources.java:208"$0$0$0$2$15$"		return index;"
"MutablePropertySources.java:209"$0$0$0$1$2$"	}"
"MutablePropertySources.java:210"$0$0$0$0$0$""
"MutablePropertySources.java:211"$0$0$0$1$1$"}"
"ExceptionDepthComparator.java:1"$0$0$0$1$2$"/*"
"ExceptionDepthComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ExceptionDepthComparator.java:3"$0$0$0$1$2$" *"
"ExceptionDepthComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ExceptionDepthComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ExceptionDepthComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ExceptionDepthComparator.java:7"$0$0$0$1$2$" *"
"ExceptionDepthComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ExceptionDepthComparator.java:9"$0$0$0$1$2$" *"
"ExceptionDepthComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ExceptionDepthComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ExceptionDepthComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ExceptionDepthComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ExceptionDepthComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"ExceptionDepthComparator.java:15"$0$0$0$1$3$" */"
"ExceptionDepthComparator.java:16"$0$0$0$0$0$""
"ExceptionDepthComparator.java:17"$0$0$0$2$33$"package org.springframework.core;"
"ExceptionDepthComparator.java:18"$0$0$0$0$0$""
"ExceptionDepthComparator.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"ExceptionDepthComparator.java:20"$0$0$0$2$28$"import java.util.Collection;"
"ExceptionDepthComparator.java:21"$0$0$0$2$28$"import java.util.Comparator;"
"ExceptionDepthComparator.java:22"$0$0$0$2$22$"import java.util.List;"
"ExceptionDepthComparator.java:23"$0$0$0$0$0$""
"ExceptionDepthComparator.java:24"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ExceptionDepthComparator.java:25"$0$0$0$0$0$""
"ExceptionDepthComparator.java:26"$0$0$0$1$3$"/**"
"ExceptionDepthComparator.java:27"$0$0$0$15$96$" * Comparator capable of sorting exceptions based on their depth from the thrown exception type."
"ExceptionDepthComparator.java:28"$0$0$0$1$2$" *"
"ExceptionDepthComparator.java:29"$0$0$0$4$26$" * @author Juergen Hoeller"
"ExceptionDepthComparator.java:30"$0$0$0$4$24$" * @author Arjen Poutsma"
"ExceptionDepthComparator.java:31"$0$0$0$3$15$" * @since 3.0.3"
"ExceptionDepthComparator.java:32"$0$0$0$1$3$" */"
"ExceptionDepthComparator.java:33"$0$0$0$8$89$"public class ExceptionDepthComparator implements Comparator<Class<? extends Throwable>> {"
"ExceptionDepthComparator.java:34"$0$0$0$0$0$""
"ExceptionDepthComparator.java:35"$1$0$0$6$58$"	private final Class<? extends Throwable> targetException;"
"ExceptionDepthComparator.java:36"$0$0$0$0$0$""
"ExceptionDepthComparator.java:37"$0$0$0$0$0$""
"ExceptionDepthComparator.java:38"$0$0$0$1$4$"	/**"
"ExceptionDepthComparator.java:39"$0$0$0$9$66$"	 * Create a new ExceptionDepthComparator for the given exception."
"ExceptionDepthComparator.java:40"$1$0$0$13$77$"	 * @param exception the target exception to compare to when sorting by depth"
"ExceptionDepthComparator.java:41"$0$0$0$1$4$"	 */"
"ExceptionDepthComparator.java:42"$0$0$0$4$55$"	public ExceptionDepthComparator(Throwable exception) {"
"ExceptionDepthComparator.java:43"$1$0$0$7$65$"		Assert.notNull(exception, ""Target exception must not be null"");"
"ExceptionDepthComparator.java:44"$2$0$0$3$46$"		this.targetException = exception.getClass();"
"ExceptionDepthComparator.java:45"$0$0$0$1$2$"	}"
"ExceptionDepthComparator.java:46"$0$0$0$0$0$""
"ExceptionDepthComparator.java:47"$0$0$0$1$4$"	/**"
"ExceptionDepthComparator.java:48"$0$0$0$10$71$"	 * Create a new ExceptionDepthComparator for the given exception type."
"ExceptionDepthComparator.java:49"$1$0$0$14$86$"	 * @param exceptionType the target exception type to compare to when sorting by depth"
"ExceptionDepthComparator.java:50"$0$0$0$1$4$"	 */"
"ExceptionDepthComparator.java:51"$0$0$0$6$76$"	public ExceptionDepthComparator(Class<? extends Throwable> exceptionType) {"
"ExceptionDepthComparator.java:52"$1$0$0$8$74$"		Assert.notNull(exceptionType, ""Target exception type must not be null"");"
"ExceptionDepthComparator.java:53"$1$0$0$3$39$"		this.targetException = exceptionType;"
"ExceptionDepthComparator.java:54"$0$0$0$1$2$"	}"
"ExceptionDepthComparator.java:55"$0$0$0$0$0$""
"ExceptionDepthComparator.java:56"$0$0$0$0$0$""
"ExceptionDepthComparator.java:57"$0$0$0$1$10$"	@Override"
"ExceptionDepthComparator.java:58"$0$0$0$11$83$"	public int compare(Class<? extends Throwable> o1, Class<? extends Throwable> o2) {"
"ExceptionDepthComparator.java:59"$2$0$0$6$53$"		int depth1 = getDepth(o1, this.targetException, 0);"
"ExceptionDepthComparator.java:60"$2$0$0$6$53$"		int depth2 = getDepth(o2, this.targetException, 0);"
"ExceptionDepthComparator.java:61"$0$0$0$4$27$"		return (depth1 - depth2);"
"ExceptionDepthComparator.java:62"$0$0$0$1$2$"	}"
"ExceptionDepthComparator.java:63"$0$0$0$0$0$""
"ExceptionDepthComparator.java:64"$1$0$0$9$89$"	private int getDepth(Class<?> declaredException, Class<?> exceptionToMatch, int depth) {"
"ExceptionDepthComparator.java:65"$0$0$0$3$51$"		if (exceptionToMatch.equals(declaredException)) {"
"ExceptionDepthComparator.java:66"$0$0$1$3$15$"			// Found it!"
"ExceptionDepthComparator.java:67"$0$0$0$2$16$"			return depth;"
"ExceptionDepthComparator.java:68"$0$0$0$1$3$"		}"
"ExceptionDepthComparator.java:69"$0$0$1$14$62$"		// If we've gone as far as we can go and haven't found it..."
"ExceptionDepthComparator.java:70"$0$0$0$5$44$"		if (exceptionToMatch == Throwable.class) {"
"ExceptionDepthComparator.java:71"$0$0$0$2$28$"			return Integer.MAX_VALUE;"
"ExceptionDepthComparator.java:72"$0$0$0$1$3$"		}"
"ExceptionDepthComparator.java:73"$2$0$0$6$82$"		return getDepth(declaredException, exceptionToMatch.getSuperclass(), depth + 1);"
"ExceptionDepthComparator.java:74"$0$0$0$1$2$"	}"
"ExceptionDepthComparator.java:75"$0$0$0$0$0$""
"ExceptionDepthComparator.java:76"$0$0$0$0$0$""
"ExceptionDepthComparator.java:77"$0$0$0$1$4$"	/**"
"ExceptionDepthComparator.java:78"$1$0$0$15$91$"	 * Obtain the closest match from the given exception types for the given target exception."
"ExceptionDepthComparator.java:79"$0$0$0$8$59$"	 * @param exceptionTypes the collection of exception types"
"ExceptionDepthComparator.java:80"$2$0$0$11$67$"	 * @param targetException the target exception to find a match for"
"ExceptionDepthComparator.java:81"$0$0$0$11$73$"	 * @return the closest matching exception type from the given collection"
"ExceptionDepthComparator.java:82"$0$0$0$1$4$"	 */"
"ExceptionDepthComparator.java:83"$0$0$0$6$59$"	public static Class<? extends Throwable> findClosestMatch("
"ExceptionDepthComparator.java:84"$1$0$0$7$86$"			Collection<Class<? extends Throwable>> exceptionTypes, Throwable targetException) {"
"ExceptionDepthComparator.java:85"$0$0$0$0$0$""
"ExceptionDepthComparator.java:86"$0$0$0$7$71$"		Assert.notEmpty(exceptionTypes, ""Exception types must not be empty"");"
"ExceptionDepthComparator.java:87"$0$0$0$5$35$"		if (exceptionTypes.size() == 1) {"
"ExceptionDepthComparator.java:88"$0$0$0$2$43$"			return exceptionTypes.iterator().next();"
"ExceptionDepthComparator.java:89"$0$0$0$1$3$"		}"
"ExceptionDepthComparator.java:90"$0$0$0$7$87$"		List<Class<? extends Throwable>> handledExceptions = new ArrayList<>(exceptionTypes);"
"ExceptionDepthComparator.java:91"$1$0$0$2$72$"		handledExceptions.sort(new ExceptionDepthComparator(targetException));"
"ExceptionDepthComparator.java:92"$1$0$0$2$34$"		return handledExceptions.get(0);"
"ExceptionDepthComparator.java:93"$0$0$0$1$2$"	}"
"ExceptionDepthComparator.java:94"$0$0$0$0$0$""
"ExceptionDepthComparator.java:95"$0$0$0$1$1$"}"
"XmlValidationModeDetector.java:1"$0$0$0$1$2$"/*"
"XmlValidationModeDetector.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"XmlValidationModeDetector.java:3"$0$0$0$1$2$" *"
"XmlValidationModeDetector.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"XmlValidationModeDetector.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"XmlValidationModeDetector.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"XmlValidationModeDetector.java:7"$0$0$0$1$2$" *"
"XmlValidationModeDetector.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"XmlValidationModeDetector.java:9"$0$0$0$1$2$" *"
"XmlValidationModeDetector.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"XmlValidationModeDetector.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"XmlValidationModeDetector.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"XmlValidationModeDetector.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"XmlValidationModeDetector.java:14"$0$0$0$5$33$" * limitations under the License."
"XmlValidationModeDetector.java:15"$0$0$0$1$3$" */"
"XmlValidationModeDetector.java:16"$0$0$0$0$0$""
"XmlValidationModeDetector.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"XmlValidationModeDetector.java:18"$0$0$0$0$0$""
"XmlValidationModeDetector.java:19"$0$0$0$2$30$"import java.io.BufferedReader;"
"XmlValidationModeDetector.java:20"$0$0$0$2$39$"import java.io.CharConversionException;"
"XmlValidationModeDetector.java:21"$0$0$0$2$27$"import java.io.IOException;"
"XmlValidationModeDetector.java:22"$0$0$0$2$27$"import java.io.InputStream;"
"XmlValidationModeDetector.java:23"$0$0$0$2$33$"import java.io.InputStreamReader;"
"XmlValidationModeDetector.java:24"$0$0$0$0$0$""
"XmlValidationModeDetector.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"XmlValidationModeDetector.java:26"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"XmlValidationModeDetector.java:27"$0$0$0$0$0$""
"XmlValidationModeDetector.java:28"$0$0$0$1$3$"/**"
"XmlValidationModeDetector.java:29"$0$0$0$12$71$" * Detects whether an XML stream is using DTD- or XSD-based validation."
"XmlValidationModeDetector.java:30"$0$0$0$1$2$" *"
"XmlValidationModeDetector.java:31"$0$0$0$4$21$" * @author Rob Harrop"
"XmlValidationModeDetector.java:32"$0$0$0$4$26$" * @author Juergen Hoeller"
"XmlValidationModeDetector.java:33"$0$0$0$4$22$" * @author Sam Brannen"
"XmlValidationModeDetector.java:34"$0$0$0$3$13$" * @since 2.0"
"XmlValidationModeDetector.java:35"$0$0$0$1$3$" */"
"XmlValidationModeDetector.java:36"$0$0$0$4$40$"public class XmlValidationModeDetector {"
"XmlValidationModeDetector.java:37"$0$0$0$0$0$""
"XmlValidationModeDetector.java:38"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:39"$0$0$0$8$53$"	 * Indicates that the validation should be disabled."
"XmlValidationModeDetector.java:40"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:41"$0$0$0$7$45$"	public static final int VALIDATION_NONE = 0;"
"XmlValidationModeDetector.java:42"$0$0$0$0$0$""
"XmlValidationModeDetector.java:43"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:44"$0$0$0$13$83$"	 * Indicates that the validation mode should be auto-guessed, since we cannot find"
"XmlValidationModeDetector.java:45"$0$0$0$13$81$"	 * a clear indication (probably choked on some special characters, or the like)."
"XmlValidationModeDetector.java:46"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:47"$0$0$0$7$45$"	public static final int VALIDATION_AUTO = 1;"
"XmlValidationModeDetector.java:48"$0$0$0$0$0$""
"XmlValidationModeDetector.java:49"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:50"$0$0$0$13$84$"	 * Indicates that DTD validation should be used (we found a ""DOCTYPE"" declaration)."
"XmlValidationModeDetector.java:51"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:52"$0$0$0$7$44$"	public static final int VALIDATION_DTD = 2;"
"XmlValidationModeDetector.java:53"$0$0$0$0$0$""
"XmlValidationModeDetector.java:54"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:55"$0$0$0$12$82$"	 * Indicates that XSD validation should be used (found no ""DOCTYPE"" declaration)."
"XmlValidationModeDetector.java:56"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:57"$0$0$0$7$44$"	public static final int VALIDATION_XSD = 3;"
"XmlValidationModeDetector.java:58"$0$0$0$0$0$""
"XmlValidationModeDetector.java:59"$0$0$0$0$0$""
"XmlValidationModeDetector.java:60"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:61"$0$0$0$15$75$"	 * The token in a XML document that declares the DTD to use for validation"
"XmlValidationModeDetector.java:62"$0$0$0$9$47$"	 * and thus that DTD validation is being used."
"XmlValidationModeDetector.java:63"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:64"$0$0$0$7$49$"	private static final String DOCTYPE = ""DOCTYPE"";"
"XmlValidationModeDetector.java:65"$0$0$0$0$0$""
"XmlValidationModeDetector.java:66"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:67"$0$0$0$11$57$"	 * The token that indicates the start of an XML comment."
"XmlValidationModeDetector.java:68"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:69"$0$0$0$7$52$"	private static final String START_COMMENT = ""<!--"";"
"XmlValidationModeDetector.java:70"$0$0$0$0$0$""
"XmlValidationModeDetector.java:71"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:72"$0$0$0$11$55$"	 * The token that indicates the end of an XML comment."
"XmlValidationModeDetector.java:73"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:74"$0$0$0$7$49$"	private static final String END_COMMENT = ""-->"";"
"XmlValidationModeDetector.java:75"$0$0$0$0$0$""
"XmlValidationModeDetector.java:76"$0$0$0$0$0$""
"XmlValidationModeDetector.java:77"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:78"$0$0$0$14$81$"	 * Indicates whether or not the current parse position is inside an XML comment."
"XmlValidationModeDetector.java:79"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:80"$0$0$0$3$27$"	private boolean inComment;"
"XmlValidationModeDetector.java:81"$0$0$0$0$0$""
"XmlValidationModeDetector.java:82"$0$0$0$0$0$""
"XmlValidationModeDetector.java:83"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:84"$0$0$0$14$88$"	 * Detect the validation mode for the XML document in the supplied {@link InputStream}."
"XmlValidationModeDetector.java:85"$0$0$0$14$89$"	 * Note that the supplied {@link InputStream} is closed by this method before returning."
"XmlValidationModeDetector.java:86"$0$0$0$7$47$"	 * @param inputStream the InputStream to parse"
"XmlValidationModeDetector.java:87"$0$0$0$8$46$"	 * @throws IOException in case of I/O failure"
"XmlValidationModeDetector.java:88"$0$0$0$3$24$"	 * @see #VALIDATION_DTD"
"XmlValidationModeDetector.java:89"$0$0$0$3$24$"	 * @see #VALIDATION_XSD"
"XmlValidationModeDetector.java:90"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:91"$0$0$0$7$78$"	public int detectValidationMode(InputStream inputStream) throws IOException {"
"XmlValidationModeDetector.java:92"$0$0$1$9$44$"		// Peek into the file to look for DOCTYPE."
"XmlValidationModeDetector.java:93"$0$0$0$6$81$"		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));"
"XmlValidationModeDetector.java:94"$0$0$0$2$7$"		try {"
"XmlValidationModeDetector.java:95"$0$0$0$4$34$"			boolean isDtdValidated = false;"
"XmlValidationModeDetector.java:96"$0$0$0$2$18$"			String content;"
"XmlValidationModeDetector.java:97"$0$0$0$7$50$"			while ((content = reader.readLine()) != null) {"
"XmlValidationModeDetector.java:98"$0$0$0$3$44$"				content = consumeCommentTokens(content);"
"XmlValidationModeDetector.java:99"$0$0$0$5$58$"				if (this.inComment || !StringUtils.hasText(content)) {"
"XmlValidationModeDetector.java:100"$0$0$0$1$14$"					continue;"
"XmlValidationModeDetector.java:101"$0$0$0$1$5$"				}"
"XmlValidationModeDetector.java:102"$0$0$0$3$30$"				if (hasDoctype(content)) {"
"XmlValidationModeDetector.java:103"$0$0$0$3$27$"					isDtdValidated = true;"
"XmlValidationModeDetector.java:104"$0$0$0$1$11$"					break;"
"XmlValidationModeDetector.java:105"$0$0$0$1$5$"				}"
"XmlValidationModeDetector.java:106"$0$0$0$3$33$"				if (hasOpeningTag(content)) {"
"XmlValidationModeDetector.java:107"$0$0$1$5$33$"					// End of meaningful data..."
"XmlValidationModeDetector.java:108"$0$0$0$1$11$"					break;"
"XmlValidationModeDetector.java:109"$0$0$0$1$5$"				}"
"XmlValidationModeDetector.java:110"$0$0$0$1$4$"			}"
"XmlValidationModeDetector.java:111"$0$0$0$6$61$"			return (isDtdValidated ? VALIDATION_DTD : VALIDATION_XSD);"
"XmlValidationModeDetector.java:112"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:113"$0$0$0$4$38$"		catch (CharConversionException ex) {"
"XmlValidationModeDetector.java:114"$0$0$1$6$42$"			// Choked on some character encoding..."
"XmlValidationModeDetector.java:115"$0$0$1$8$42$"			// Leave the decision up to the caller."
"XmlValidationModeDetector.java:116"$0$0$0$2$26$"			return VALIDATION_AUTO;"
"XmlValidationModeDetector.java:117"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:118"$0$0$0$2$11$"		finally {"
"XmlValidationModeDetector.java:119"$0$0$0$1$18$"			reader.close();"
"XmlValidationModeDetector.java:120"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:121"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:122"$0$0$0$0$0$""
"XmlValidationModeDetector.java:123"$0$0$0$0$0$""
"XmlValidationModeDetector.java:124"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:125"$0$0$0$9$57$"	 * Does the content contain the DTD DOCTYPE declaration?"
"XmlValidationModeDetector.java:126"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:127"$0$0$0$5$45$"	private boolean hasDoctype(String content) {"
"XmlValidationModeDetector.java:128"$0$0$0$2$35$"		return content.contains(DOCTYPE);"
"XmlValidationModeDetector.java:129"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:130"$0$0$0$0$0$""
"XmlValidationModeDetector.java:131"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:132"$0$0$0$16$89$"	 * Does the supplied content contain an XML opening tag. If the parse state is currently"
"XmlValidationModeDetector.java:133"$0$0$0$17$92$"	 * in an XML comment then this method always returns false. It is expected that all comment"
"XmlValidationModeDetector.java:134"$0$0$0$16$99$"	 * tokens will have consumed for the supplied content before passing the remainder to this method."
"XmlValidationModeDetector.java:135"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:136"$0$0$0$5$48$"	private boolean hasOpeningTag(String content) {"
"XmlValidationModeDetector.java:137"$0$0$0$3$23$"		if (this.inComment) {"
"XmlValidationModeDetector.java:138"$0$0$0$2$16$"			return false;"
"XmlValidationModeDetector.java:139"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:140"$0$0$0$4$42$"		int openTagIndex = content.indexOf('<');"
"XmlValidationModeDetector.java:141"$0$0$0$11$71$"		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&"
"XmlValidationModeDetector.java:142"$0$0$0$3$58$"				Character.isLetter(content.charAt(openTagIndex + 1)));"
"XmlValidationModeDetector.java:143"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:144"$0$0$0$0$0$""
"XmlValidationModeDetector.java:145"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:146"$0$0$0$13$76$"	 * Consume all leading and trailing comments in the given String and return"
"XmlValidationModeDetector.java:147"$0$0$0$13$78$"	 * the remaining content, which may be empty since the supplied content might"
"XmlValidationModeDetector.java:148"$0$0$0$5$24$"	 * be all comment data."
"XmlValidationModeDetector.java:149"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:150"$0$0$0$1$10$"	@Nullable"
"XmlValidationModeDetector.java:151"$0$0$0$5$51$"	private String consumeCommentTokens(String line) {"
"XmlValidationModeDetector.java:152"$0$0$0$4$56$"		int indexOfStartComment = line.indexOf(START_COMMENT);"
"XmlValidationModeDetector.java:153"$0$0$0$7$65$"		if (indexOfStartComment == -1 && !line.contains(END_COMMENT)) {"
"XmlValidationModeDetector.java:154"$0$0$0$2$15$"			return line;"
"XmlValidationModeDetector.java:155"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:156"$0$0$0$0$0$""
"XmlValidationModeDetector.java:157"$0$0$0$4$21$"		String result = """";"
"XmlValidationModeDetector.java:158"$0$0$0$4$25$"		String currLine = line;"
"XmlValidationModeDetector.java:159"$0$0$0$5$33$"		if (indexOfStartComment >= 0) {"
"XmlValidationModeDetector.java:160"$0$0$0$4$51$"			result = line.substring(0, indexOfStartComment);"
"XmlValidationModeDetector.java:161"$0$0$0$3$50$"			currLine = line.substring(indexOfStartComment);"
"XmlValidationModeDetector.java:162"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:163"$0$0$0$0$0$""
"XmlValidationModeDetector.java:164"$0$0$0$7$50$"		while ((currLine = consume(currLine)) != null) {"
"XmlValidationModeDetector.java:165"$0$0$0$5$71$"			if (!this.inComment && !currLine.trim().startsWith(START_COMMENT)) {"
"XmlValidationModeDetector.java:166"$0$0$0$4$29$"				return result + currLine;"
"XmlValidationModeDetector.java:167"$0$0$0$1$4$"			}"
"XmlValidationModeDetector.java:168"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:169"$0$0$0$2$14$"		return null;"
"XmlValidationModeDetector.java:170"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:171"$0$0$0$0$0$""
"XmlValidationModeDetector.java:172"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:173"$0$0$0$10$63$"	 * Consume the next comment token, update the ""inComment"" flag"
"XmlValidationModeDetector.java:174"$0$0$0$6$37$"	 * and return the remaining content."
"XmlValidationModeDetector.java:175"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:176"$0$0$0$1$10$"	@Nullable"
"XmlValidationModeDetector.java:177"$0$0$0$5$38$"	private String consume(String line) {"
"XmlValidationModeDetector.java:178"$0$0$0$8$71$"		int index = (this.inComment ? endComment(line) : startComment(line));"
"XmlValidationModeDetector.java:179"$0$0$0$8$54$"		return (index == -1 ? null : line.substring(index));"
"XmlValidationModeDetector.java:180"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:181"$0$0$0$0$0$""
"XmlValidationModeDetector.java:182"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:183"$0$0$0$8$52$"	 * Try to consume the {@link #START_COMMENT} token."
"XmlValidationModeDetector.java:184"$0$0$0$5$47$"	 * @see #commentToken(String, String, boolean)"
"XmlValidationModeDetector.java:185"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:186"$0$0$0$5$40$"	private int startComment(String line) {"
"XmlValidationModeDetector.java:187"$0$0$0$4$49$"		return commentToken(line, START_COMMENT, true);"
"XmlValidationModeDetector.java:188"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:189"$0$0$0$0$0$""
"XmlValidationModeDetector.java:190"$0$0$0$5$38$"	private int endComment(String line) {"
"XmlValidationModeDetector.java:191"$0$0$0$4$48$"		return commentToken(line, END_COMMENT, false);"
"XmlValidationModeDetector.java:192"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:193"$0$0$0$0$0$""
"XmlValidationModeDetector.java:194"$0$0$0$1$4$"	/**"
"XmlValidationModeDetector.java:195"$0$0$0$14$81$"	 * Try to consume the supplied token against the supplied content and update the"
"XmlValidationModeDetector.java:196"$0$0$0$15$84$"	 * in comment parse state to the supplied value. Returns the index into the content"
"XmlValidationModeDetector.java:197"$0$0$0$14$61$"	 * which is after the token or -1 if the token is not found."
"XmlValidationModeDetector.java:198"$0$0$0$1$4$"	 */"
"XmlValidationModeDetector.java:199"$0$0$0$9$82$"	private int commentToken(String line, String token, boolean inCommentIfPresent) {"
"XmlValidationModeDetector.java:200"$0$0$0$4$34$"		int index = line.indexOf(token);"
"XmlValidationModeDetector.java:201"$0$0$0$6$20$"		if (index > - 1) {"
"XmlValidationModeDetector.java:202"$0$0$0$3$39$"			this.inComment = inCommentIfPresent;"
"XmlValidationModeDetector.java:203"$0$0$0$1$3$"		}"
"XmlValidationModeDetector.java:204"$0$0$0$10$56$"		return (index == -1 ? index : index + token.length());"
"XmlValidationModeDetector.java:205"$0$0$0$1$2$"	}"
"XmlValidationModeDetector.java:206"$0$0$0$0$0$""
"XmlValidationModeDetector.java:207"$0$0$0$1$1$"}"
"LimitedDataBufferList.java:1"$0$0$0$1$2$"/*"
"LimitedDataBufferList.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"LimitedDataBufferList.java:3"$0$0$0$1$2$" *"
"LimitedDataBufferList.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"LimitedDataBufferList.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"LimitedDataBufferList.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"LimitedDataBufferList.java:7"$0$0$0$1$2$" *"
"LimitedDataBufferList.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"LimitedDataBufferList.java:9"$0$0$0$1$2$" *"
"LimitedDataBufferList.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"LimitedDataBufferList.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"LimitedDataBufferList.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"LimitedDataBufferList.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"LimitedDataBufferList.java:14"$0$0$0$5$33$" * limitations under the License."
"LimitedDataBufferList.java:15"$0$0$0$1$3$" */"
"LimitedDataBufferList.java:16"$0$0$0$2$43$"package org.springframework.core.io.buffer;"
"LimitedDataBufferList.java:17"$0$0$0$0$0$""
"LimitedDataBufferList.java:18"$0$0$0$2$27$"import java.util.ArrayList;"
"LimitedDataBufferList.java:19"$0$0$0$2$28$"import java.util.Collection;"
"LimitedDataBufferList.java:20"$0$0$0$2$22$"import java.util.List;"
"LimitedDataBufferList.java:21"$0$0$0$2$36$"import java.util.function.Predicate;"
"LimitedDataBufferList.java:22"$0$0$0$0$0$""
"LimitedDataBufferList.java:23"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"LimitedDataBufferList.java:24"$0$0$0$0$0$""
"LimitedDataBufferList.java:25"$0$0$0$1$3$"/**"
"LimitedDataBufferList.java:26"$0$0$0$12$65$" * Custom {@link List} to collect data buffers with and enforce a"
"LimitedDataBufferList.java:27"$0$0$0$14$73$" * limit on the total number of bytes buffered. For use with ""collect"" or"
"LimitedDataBufferList.java:28"$0$0$0$10$68$" * other buffering operators in declarative APIs, e.g. {@link Flux}."
"LimitedDataBufferList.java:29"$0$0$0$1$2$" *"
"LimitedDataBufferList.java:30"$0$0$0$13$76$" * <p>Adding elements increases the byte count and if the limit is exceeded,"
"LimitedDataBufferList.java:31"$0$0$0$9$75$" * {@link DataBufferLimitException} is raised.  {@link #clear()} resets the"
"LimitedDataBufferList.java:32"$0$0$0$8$43$" * count. Remove and set are not supported."
"LimitedDataBufferList.java:33"$0$0$0$1$2$" *"
"LimitedDataBufferList.java:34"$0$0$0$9$74$" * <p><strong>Note:</strong> This class does not automatically release the"
"LimitedDataBufferList.java:35"$0$0$0$13$69$" * buffers it contains. It is usually preferable to use hooks such as"
"LimitedDataBufferList.java:36"$0$0$0$12$76$" * {@link Flux#doOnDiscard} that also take care of cancel and error signals,"
"LimitedDataBufferList.java:37"$0$0$0$8$55$" * or otherwise {@link #releaseAndClear()} can be used."
"LimitedDataBufferList.java:38"$0$0$0$1$2$" *"
"LimitedDataBufferList.java:39"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"LimitedDataBufferList.java:40"$0$0$0$3$16$" * @since 5.1.11"
"LimitedDataBufferList.java:41"$0$0$0$1$3$" */"
"LimitedDataBufferList.java:42"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"LimitedDataBufferList.java:43"$0$0$0$6$66$"public class LimitedDataBufferList extends ArrayList<DataBuffer> {"
"LimitedDataBufferList.java:44"$0$0$0$0$0$""
"LimitedDataBufferList.java:45"$0$0$0$4$32$"	private final int maxByteCount;"
"LimitedDataBufferList.java:46"$0$0$0$0$0$""
"LimitedDataBufferList.java:47"$0$0$0$3$23$"	private int byteCount;"
"LimitedDataBufferList.java:48"$0$0$0$0$0$""
"LimitedDataBufferList.java:49"$0$0$0$0$0$""
"LimitedDataBufferList.java:50"$0$0$0$4$49$"	public LimitedDataBufferList(int maxByteCount) {"
"LimitedDataBufferList.java:51"$0$0$0$3$35$"		this.maxByteCount = maxByteCount;"
"LimitedDataBufferList.java:52"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:53"$0$0$0$0$0$""
"LimitedDataBufferList.java:54"$0$0$0$0$0$""
"LimitedDataBufferList.java:55"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:56"$0$0$0$5$40$"	public boolean add(DataBuffer buffer) {"
"LimitedDataBufferList.java:57"$0$0$0$4$37$"		boolean result = super.add(buffer);"
"LimitedDataBufferList.java:58"$0$0$0$3$15$"		if (result) {"
"LimitedDataBufferList.java:59"$0$0$0$1$43$"			updateCount(buffer.readableByteCount());"
"LimitedDataBufferList.java:60"$0$0$0$1$3$"		}"
"LimitedDataBufferList.java:61"$0$0$0$2$16$"		return result;"
"LimitedDataBufferList.java:62"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:63"$0$0$0$0$0$""
"LimitedDataBufferList.java:64"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:65"$0$0$0$7$48$"	public void add(int index, DataBuffer buffer) {"
"LimitedDataBufferList.java:66"$0$0$0$2$27$"		super.add(index, buffer);"
"LimitedDataBufferList.java:67"$0$0$0$1$42$"		updateCount(buffer.readableByteCount());"
"LimitedDataBufferList.java:68"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:69"$0$0$0$0$0$""
"LimitedDataBufferList.java:70"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:71"$0$0$0$7$69$"	public boolean addAll(Collection<? extends DataBuffer> collection) {"
"LimitedDataBufferList.java:72"$0$0$0$4$44$"		boolean result = super.addAll(collection);"
"LimitedDataBufferList.java:73"$0$0$0$3$72$"		collection.forEach(buffer -> updateCount(buffer.readableByteCount()));"
"LimitedDataBufferList.java:74"$0$0$0$2$16$"		return result;"
"LimitedDataBufferList.java:75"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:76"$0$0$0$0$0$""
"LimitedDataBufferList.java:77"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:78"$0$0$0$9$80$"	public boolean addAll(int index, Collection<? extends DataBuffer> collection) {"
"LimitedDataBufferList.java:79"$0$0$0$5$51$"		boolean result = super.addAll(index, collection);"
"LimitedDataBufferList.java:80"$0$0$0$3$72$"		collection.forEach(buffer -> updateCount(buffer.readableByteCount()));"
"LimitedDataBufferList.java:81"$0$0$0$2$16$"		return result;"
"LimitedDataBufferList.java:82"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:83"$0$0$0$0$0$""
"LimitedDataBufferList.java:84"$0$0$0$5$43$"	private void updateCount(int bytesToAdd) {"
"LimitedDataBufferList.java:85"$0$0$0$5$30$"		if (this.maxByteCount < 0) {"
"LimitedDataBufferList.java:86"$0$0$0$1$10$"			return;"
"LimitedDataBufferList.java:87"$0$0$0$1$3$"		}"
"LimitedDataBufferList.java:88"$0$0$0$7$56$"		if (bytesToAdd > Integer.MAX_VALUE - this.byteCount) {"
"LimitedDataBufferList.java:89"$0$0$0$1$25$"			raiseLimitException();"
"LimitedDataBufferList.java:90"$0$0$0$1$3$"		}"
"LimitedDataBufferList.java:91"$0$0$0$2$8$"		else {"
"LimitedDataBufferList.java:92"$0$0$0$3$32$"			this.byteCount += bytesToAdd;"
"LimitedDataBufferList.java:93"$0$0$0$5$44$"			if (this.byteCount > this.maxByteCount) {"
"LimitedDataBufferList.java:94"$0$0$0$1$26$"				raiseLimitException();"
"LimitedDataBufferList.java:95"$0$0$0$1$4$"			}"
"LimitedDataBufferList.java:96"$0$0$0$1$3$"		}"
"LimitedDataBufferList.java:97"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:98"$0$0$0$0$0$""
"LimitedDataBufferList.java:99"$0$0$0$4$37$"	private void raiseLimitException() {"
"LimitedDataBufferList.java:100"$0$0$1$10$60$"		// Do not release here, it's likely down via doOnDiscard.."
"LimitedDataBufferList.java:101"$0$0$0$3$37$"		throw new DataBufferLimitException("
"LimitedDataBufferList.java:102"$0$0$0$11$68$"				""Exceeded limit on max bytes to buffer : "" + this.maxByteCount);"
"LimitedDataBufferList.java:103"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:104"$0$0$0$0$0$""
"LimitedDataBufferList.java:105"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:106"$0$0$0$5$38$"	public DataBuffer remove(int index) {"
"LimitedDataBufferList.java:107"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"LimitedDataBufferList.java:108"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:109"$0$0$0$0$0$""
"LimitedDataBufferList.java:110"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:111"$0$0$0$5$34$"	public boolean remove(Object o) {"
"LimitedDataBufferList.java:112"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"LimitedDataBufferList.java:113"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:114"$0$0$0$0$0$""
"LimitedDataBufferList.java:115"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:116"$0$0$0$7$57$"	protected void removeRange(int fromIndex, int toIndex) {"
"LimitedDataBufferList.java:117"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"LimitedDataBufferList.java:118"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:119"$0$0$0$0$0$""
"LimitedDataBufferList.java:120"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:121"$0$0$0$5$44$"	public boolean removeAll(Collection<?> c) {"
"LimitedDataBufferList.java:122"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"LimitedDataBufferList.java:123"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:124"$0$0$0$0$0$""
"LimitedDataBufferList.java:125"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:126"$0$0$0$7$64$"	public boolean removeIf(Predicate<? super DataBuffer> filter) {"
"LimitedDataBufferList.java:127"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"LimitedDataBufferList.java:128"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:129"$0$0$0$0$0$""
"LimitedDataBufferList.java:130"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:131"$0$0$0$7$55$"	public DataBuffer set(int index, DataBuffer element) {"
"LimitedDataBufferList.java:132"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"LimitedDataBufferList.java:133"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:134"$0$0$0$0$0$""
"LimitedDataBufferList.java:135"$0$0$0$1$10$"	@Override"
"LimitedDataBufferList.java:136"$0$0$0$4$22$"	public void clear() {"
"LimitedDataBufferList.java:137"$0$0$0$3$21$"		this.byteCount = 0;"
"LimitedDataBufferList.java:138"$0$0$0$1$16$"		super.clear();"
"LimitedDataBufferList.java:139"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:140"$0$0$0$0$0$""
"LimitedDataBufferList.java:141"$0$0$0$1$4$"	/**"
"LimitedDataBufferList.java:142"$0$0$0$10$76$"	 * Shortcut to {@link DataBufferUtils#release release} all data buffers and"
"LimitedDataBufferList.java:143"$0$0$0$4$26$"	 * then {@link #clear()}."
"LimitedDataBufferList.java:144"$0$0$0$1$4$"	 */"
"LimitedDataBufferList.java:145"$0$0$0$4$32$"	public void releaseAndClear() {"
"LimitedDataBufferList.java:146"$0$0$0$3$18$"		forEach(buf -> {"
"LimitedDataBufferList.java:147"$0$0$0$2$8$"			try {"
"LimitedDataBufferList.java:148"$0$0$0$1$33$"				DataBufferUtils.release(buf);"
"LimitedDataBufferList.java:149"$0$0$0$1$4$"			}"
"LimitedDataBufferList.java:150"$0$0$0$4$25$"			catch (Throwable ex) {"
"LimitedDataBufferList.java:151"$0$0$1$3$19$"				// Keep going.."
"LimitedDataBufferList.java:152"$0$0$0$1$4$"			}"
"LimitedDataBufferList.java:153"$0$0$0$1$5$"		});"
"LimitedDataBufferList.java:154"$0$0$0$1$10$"		clear();"
"LimitedDataBufferList.java:155"$0$0$0$1$2$"	}"
"LimitedDataBufferList.java:156"$0$0$0$0$0$""
"LimitedDataBufferList.java:157"$0$0$0$1$1$"}"
"LinkedCaseInsensitiveMap.java:1"$0$0$0$1$2$"/*"
"LinkedCaseInsensitiveMap.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"LinkedCaseInsensitiveMap.java:3"$0$0$0$1$2$" *"
"LinkedCaseInsensitiveMap.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"LinkedCaseInsensitiveMap.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"LinkedCaseInsensitiveMap.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"LinkedCaseInsensitiveMap.java:7"$0$0$0$1$2$" *"
"LinkedCaseInsensitiveMap.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"LinkedCaseInsensitiveMap.java:9"$0$0$0$1$2$" *"
"LinkedCaseInsensitiveMap.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"LinkedCaseInsensitiveMap.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"LinkedCaseInsensitiveMap.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"LinkedCaseInsensitiveMap.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"LinkedCaseInsensitiveMap.java:14"$0$0$0$5$33$" * limitations under the License."
"LinkedCaseInsensitiveMap.java:15"$0$0$0$1$3$" */"
"LinkedCaseInsensitiveMap.java:16"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:17"$0$0$0$2$33$"package org.springframework.util;"
"LinkedCaseInsensitiveMap.java:18"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"LinkedCaseInsensitiveMap.java:20"$0$0$0$2$36$"import java.util.AbstractCollection;"
"LinkedCaseInsensitiveMap.java:21"$0$0$0$2$29$"import java.util.AbstractSet;"
"LinkedCaseInsensitiveMap.java:22"$0$0$0$2$28$"import java.util.Collection;"
"LinkedCaseInsensitiveMap.java:23"$0$0$0$2$25$"import java.util.HashMap;"
"LinkedCaseInsensitiveMap.java:24"$0$0$0$2$26$"import java.util.Iterator;"
"LinkedCaseInsensitiveMap.java:25"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"LinkedCaseInsensitiveMap.java:26"$0$0$0$2$24$"import java.util.Locale;"
"LinkedCaseInsensitiveMap.java:27"$0$0$0$2$21$"import java.util.Map;"
"LinkedCaseInsensitiveMap.java:28"$0$0$0$2$21$"import java.util.Set;"
"LinkedCaseInsensitiveMap.java:29"$0$0$0$2$29$"import java.util.Spliterator;"
"LinkedCaseInsensitiveMap.java:30"$0$0$0$2$35$"import java.util.function.Consumer;"
"LinkedCaseInsensitiveMap.java:31"$0$0$0$2$35$"import java.util.function.Function;"
"LinkedCaseInsensitiveMap.java:32"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"LinkedCaseInsensitiveMap.java:34"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:35"$0$0$0$1$3$"/**"
"LinkedCaseInsensitiveMap.java:36"$0$0$0$11$78$" * {@link LinkedHashMap} variant that stores String keys in a case-insensitive"
"LinkedCaseInsensitiveMap.java:37"$0$0$0$11$63$" * manner, for example for key-based access in a results table."
"LinkedCaseInsensitiveMap.java:38"$0$0$0$1$2$" *"
"LinkedCaseInsensitiveMap.java:39"$0$0$0$13$74$" * <p>Preserves the original order as well as the original casing of keys,"
"LinkedCaseInsensitiveMap.java:40"$1$0$0$14$74$" * while allowing for contains, get and remove calls with any case of key."
"LinkedCaseInsensitiveMap.java:41"$0$0$0$1$2$" *"
"LinkedCaseInsensitiveMap.java:42"$0$0$0$7$48$" * <p>Does <i>not</i> support {@code null} keys."
"LinkedCaseInsensitiveMap.java:43"$0$0$0$1$2$" *"
"LinkedCaseInsensitiveMap.java:44"$0$0$0$4$26$" * @author Juergen Hoeller"
"LinkedCaseInsensitiveMap.java:45"$0$0$0$4$23$" * @author Phillip Webb"
"LinkedCaseInsensitiveMap.java:46"$0$0$0$3$13$" * @since 3.0"
"LinkedCaseInsensitiveMap.java:47"$0$0$0$6$28$" * @param <V> the value type"
"LinkedCaseInsensitiveMap.java:48"$0$0$0$1$3$" */"
"LinkedCaseInsensitiveMap.java:49"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"LinkedCaseInsensitiveMap.java:50"$0$0$0$9$93$"public class LinkedCaseInsensitiveMap<V> implements Map<String, V>, Serializable, Cloneable {"
"LinkedCaseInsensitiveMap.java:51"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:52"$1$0$0$5$50$"	private final LinkedHashMap<String, V> targetMap;"
"LinkedCaseInsensitiveMap.java:53"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:54"$0$0$0$5$59$"	private final HashMap<String, String> caseInsensitiveKeys;"
"LinkedCaseInsensitiveMap.java:55"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:56"$0$0$0$4$29$"	private final Locale locale;"
"LinkedCaseInsensitiveMap.java:57"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:58"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:59"$0$0$0$5$47$"	private transient volatile Set<String> keySet;"
"LinkedCaseInsensitiveMap.java:60"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:61"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:62"$0$0$0$5$49$"	private transient volatile Collection<V> values;"
"LinkedCaseInsensitiveMap.java:63"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:64"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:65"$0$0$0$6$59$"	private transient volatile Set<Entry<String, V>> entrySet;"
"LinkedCaseInsensitiveMap.java:66"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:67"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:68"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:69"$0$0$0$9$75$"	 * Create a new LinkedCaseInsensitiveMap that stores case-insensitive keys"
"LinkedCaseInsensitiveMap.java:70"$0$0$0$11$63$"	 * according to the default Locale (by default in lower case)."
"LinkedCaseInsensitiveMap.java:71"$0$0$0$3$28$"	 * @see #convertKey(String)"
"LinkedCaseInsensitiveMap.java:72"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:73"$0$0$0$3$36$"	public LinkedCaseInsensitiveMap() {"
"LinkedCaseInsensitiveMap.java:74"$0$0$0$2$22$"		this((Locale) null);"
"LinkedCaseInsensitiveMap.java:75"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:76"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:77"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:78"$0$0$0$9$75$"	 * Create a new LinkedCaseInsensitiveMap that stores case-insensitive keys"
"LinkedCaseInsensitiveMap.java:79"$0$0$0$11$61$"	 * according to the given Locale (by default in lower case)."
"LinkedCaseInsensitiveMap.java:80"$0$0$0$11$71$"	 * @param locale the Locale to use for case-insensitive key conversion"
"LinkedCaseInsensitiveMap.java:81"$0$0$0$3$28$"	 * @see #convertKey(String)"
"LinkedCaseInsensitiveMap.java:82"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:83"$0$0$0$5$59$"	public LinkedCaseInsensitiveMap(@Nullable Locale locale) {"
"LinkedCaseInsensitiveMap.java:84"$0$0$0$2$19$"		this(16, locale);"
"LinkedCaseInsensitiveMap.java:85"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:86"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:87"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:88"$0$0$0$10$76$"	 * Create a new LinkedCaseInsensitiveMap that wraps a {@link LinkedHashMap}"
"LinkedCaseInsensitiveMap.java:89"$0$0$0$10$68$"	 * with the given initial capacity and stores case-insensitive keys"
"LinkedCaseInsensitiveMap.java:90"$0$0$0$11$63$"	 * according to the default Locale (by default in lower case)."
"LinkedCaseInsensitiveMap.java:91"$0$0$0$6$47$"	 * @param initialCapacity the initial capacity"
"LinkedCaseInsensitiveMap.java:92"$0$0$0$3$28$"	 * @see #convertKey(String)"
"LinkedCaseInsensitiveMap.java:93"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:94"$0$0$0$4$55$"	public LinkedCaseInsensitiveMap(int initialCapacity) {"
"LinkedCaseInsensitiveMap.java:95"$0$0$0$2$30$"		this(initialCapacity, null);"
"LinkedCaseInsensitiveMap.java:96"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:97"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:98"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:99"$0$0$0$10$76$"	 * Create a new LinkedCaseInsensitiveMap that wraps a {@link LinkedHashMap}"
"LinkedCaseInsensitiveMap.java:100"$0$0$0$10$68$"	 * with the given initial capacity and stores case-insensitive keys"
"LinkedCaseInsensitiveMap.java:101"$0$0$0$11$61$"	 * according to the given Locale (by default in lower case)."
"LinkedCaseInsensitiveMap.java:102"$0$0$0$6$47$"	 * @param initialCapacity the initial capacity"
"LinkedCaseInsensitiveMap.java:103"$0$0$0$11$71$"	 * @param locale the Locale to use for case-insensitive key conversion"
"LinkedCaseInsensitiveMap.java:104"$0$0$0$3$28$"	 * @see #convertKey(String)"
"LinkedCaseInsensitiveMap.java:105"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:106"$0$0$0$7$80$"	public LinkedCaseInsensitiveMap(int initialCapacity, @Nullable Locale locale) {"
"LinkedCaseInsensitiveMap.java:107"$1$0$0$6$66$"		this.targetMap = new LinkedHashMap<String, V>(initialCapacity) {"
"LinkedCaseInsensitiveMap.java:108"$0$0$0$1$12$"			@Override"
"LinkedCaseInsensitiveMap.java:109"$0$0$0$5$43$"			public boolean containsKey(Object key) {"
"LinkedCaseInsensitiveMap.java:110"$0$0$0$2$58$"				return LinkedCaseInsensitiveMap.this.containsKey(key);"
"LinkedCaseInsensitiveMap.java:111"$0$0$0$1$4$"			}"
"LinkedCaseInsensitiveMap.java:112"$0$0$0$1$12$"			@Override"
"LinkedCaseInsensitiveMap.java:113"$0$0$0$6$69$"			protected boolean removeEldestEntry(Map.Entry<String, V> eldest) {"
"LinkedCaseInsensitiveMap.java:114"$0$0$0$4$79$"				boolean doRemove = LinkedCaseInsensitiveMap.this.removeEldestEntry(eldest);"
"LinkedCaseInsensitiveMap.java:115"$0$0$0$3$19$"				if (doRemove) {"
"LinkedCaseInsensitiveMap.java:116"$1$0$0$1$47$"					removeCaseInsensitiveKey(eldest.getKey());"
"LinkedCaseInsensitiveMap.java:117"$0$0$0$1$5$"				}"
"LinkedCaseInsensitiveMap.java:118"$0$0$0$2$20$"				return doRemove;"
"LinkedCaseInsensitiveMap.java:119"$0$0$0$1$4$"			}"
"LinkedCaseInsensitiveMap.java:120"$0$0$0$1$4$"		};"
"LinkedCaseInsensitiveMap.java:121"$0$0$0$4$60$"		this.caseInsensitiveKeys = new HashMap<>(initialCapacity);"
"LinkedCaseInsensitiveMap.java:122"$1$0$0$9$64$"		this.locale = (locale != null ? locale : Locale.getDefault());"
"LinkedCaseInsensitiveMap.java:123"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:124"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:125"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:126"$0$0$0$3$21$"	 * Copy constructor."
"LinkedCaseInsensitiveMap.java:127"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:128"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"LinkedCaseInsensitiveMap.java:129"$0$0$0$4$70$"	private LinkedCaseInsensitiveMap(LinkedCaseInsensitiveMap<V> other) {"
"LinkedCaseInsensitiveMap.java:130"$2$0$0$5$70$"		this.targetMap = (LinkedHashMap<String, V>) other.targetMap.clone();"
"LinkedCaseInsensitiveMap.java:131"$0$0$0$5$89$"		this.caseInsensitiveKeys = (HashMap<String, String>) other.caseInsensitiveKeys.clone();"
"LinkedCaseInsensitiveMap.java:132"$0$0$0$3$29$"		this.locale = other.locale;"
"LinkedCaseInsensitiveMap.java:133"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:134"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:135"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:136"$0$0$1$4$35$"	// Implementation of java.util.Map"
"LinkedCaseInsensitiveMap.java:137"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:138"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:139"$0$0$0$4$20$"	public int size() {"
"LinkedCaseInsensitiveMap.java:140"$1$0$0$2$31$"		return this.targetMap.size();"
"LinkedCaseInsensitiveMap.java:141"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:142"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:143"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:144"$0$0$0$4$27$"	public boolean isEmpty() {"
"LinkedCaseInsensitiveMap.java:145"$1$0$0$2$34$"		return this.targetMap.isEmpty();"
"LinkedCaseInsensitiveMap.java:146"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:147"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:148"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:149"$0$0$0$5$41$"	public boolean containsKey(Object key) {"
"LinkedCaseInsensitiveMap.java:150"$0$0$0$7$99$"		return (key instanceof String && this.caseInsensitiveKeys.containsKey(convertKey((String) key)));"
"LinkedCaseInsensitiveMap.java:151"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:152"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:153"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:154"$0$0$0$5$45$"	public boolean containsValue(Object value) {"
"LinkedCaseInsensitiveMap.java:155"$1$0$0$2$45$"		return this.targetMap.containsValue(value);"
"LinkedCaseInsensitiveMap.java:156"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:157"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:158"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:159"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:160"$1$0$0$5$27$"	public V get(Object key) {"
"LinkedCaseInsensitiveMap.java:161"$0$0$0$5$30$"		if (key instanceof String) {"
"LinkedCaseInsensitiveMap.java:162"$1$0$0$5$86$"			String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key));"
"LinkedCaseInsensitiveMap.java:163"$0$0$0$5$36$"			if (caseInsensitiveKey != null) {"
"LinkedCaseInsensitiveMap.java:164"$2$0$0$2$50$"				return this.targetMap.get(caseInsensitiveKey);"
"LinkedCaseInsensitiveMap.java:165"$0$0$0$1$4$"			}"
"LinkedCaseInsensitiveMap.java:166"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:167"$0$0$0$2$14$"		return null;"
"LinkedCaseInsensitiveMap.java:168"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:169"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:170"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:171"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:172"$1$0$0$7$52$"	public V getOrDefault(Object key, V defaultValue) {"
"LinkedCaseInsensitiveMap.java:173"$0$0$0$5$30$"		if (key instanceof String) {"
"LinkedCaseInsensitiveMap.java:174"$1$0$0$5$86$"			String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key));"
"LinkedCaseInsensitiveMap.java:175"$0$0$0$5$36$"			if (caseInsensitiveKey != null) {"
"LinkedCaseInsensitiveMap.java:176"$2$0$0$2$50$"				return this.targetMap.get(caseInsensitiveKey);"
"LinkedCaseInsensitiveMap.java:177"$0$0$0$1$4$"			}"
"LinkedCaseInsensitiveMap.java:178"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:179"$0$0$0$2$22$"		return defaultValue;"
"LinkedCaseInsensitiveMap.java:180"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:181"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:182"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:183"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:184"$0$0$0$8$46$"	public V put(String key, @Nullable V value) {"
"LinkedCaseInsensitiveMap.java:185"$0$0$0$5$69$"		String oldKey = this.caseInsensitiveKeys.put(convertKey(key), key);"
"LinkedCaseInsensitiveMap.java:186"$0$0$0$4$23$"		V oldKeyValue = null;"
"LinkedCaseInsensitiveMap.java:187"$0$0$0$7$46$"		if (oldKey != null && !oldKey.equals(key)) {"
"LinkedCaseInsensitiveMap.java:188"$1$0$0$3$47$"			oldKeyValue = this.targetMap.remove(oldKey);"
"LinkedCaseInsensitiveMap.java:189"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:190"$1$0$0$5$46$"		V oldValue = this.targetMap.put(key, value);"
"LinkedCaseInsensitiveMap.java:191"$0$0$0$8$56$"		return (oldKeyValue != null ? oldKeyValue : oldValue);"
"LinkedCaseInsensitiveMap.java:192"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:193"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:194"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:195"$0$0$0$10$61$"	public void putAll(Map<? extends String, ? extends V> map) {"
"LinkedCaseInsensitiveMap.java:196"$0$0$0$3$22$"		if (map.isEmpty()) {"
"LinkedCaseInsensitiveMap.java:197"$0$0$0$1$10$"			return;"
"LinkedCaseInsensitiveMap.java:198"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:199"$0$0$0$1$25$"		map.forEach(this::put);"
"LinkedCaseInsensitiveMap.java:200"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:201"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:202"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:203"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:204"$0$0$0$8$54$"	public V putIfAbsent(String key, @Nullable V value) {"
"LinkedCaseInsensitiveMap.java:205"$0$0$0$5$77$"		String oldKey = this.caseInsensitiveKeys.putIfAbsent(convertKey(key), key);"
"LinkedCaseInsensitiveMap.java:206"$0$0$0$5$23$"		if (oldKey != null) {"
"LinkedCaseInsensitiveMap.java:207"$2$0$0$2$37$"			return this.targetMap.get(oldKey);"
"LinkedCaseInsensitiveMap.java:208"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:209"$1$0$0$3$48$"		return this.targetMap.putIfAbsent(key, value);"
"LinkedCaseInsensitiveMap.java:210"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:211"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:212"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:213"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:214"$0$0$0$12$94$"	public V computeIfAbsent(String key, Function<? super String, ? extends V> mappingFunction) {"
"LinkedCaseInsensitiveMap.java:215"$0$0$0$5$77$"		String oldKey = this.caseInsensitiveKeys.putIfAbsent(convertKey(key), key);"
"LinkedCaseInsensitiveMap.java:216"$0$0$0$5$23$"		if (oldKey != null) {"
"LinkedCaseInsensitiveMap.java:217"$2$0$0$2$37$"			return this.targetMap.get(oldKey);"
"LinkedCaseInsensitiveMap.java:218"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:219"$1$0$0$3$62$"		return this.targetMap.computeIfAbsent(key, mappingFunction);"
"LinkedCaseInsensitiveMap.java:220"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:221"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:222"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:223"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:224"$0$0$0$5$30$"	public V remove(Object key) {"
"LinkedCaseInsensitiveMap.java:225"$0$0$0$5$30$"		if (key instanceof String) {"
"LinkedCaseInsensitiveMap.java:226"$0$0$0$5$70$"			String caseInsensitiveKey = removeCaseInsensitiveKey((String) key);"
"LinkedCaseInsensitiveMap.java:227"$0$0$0$5$36$"			if (caseInsensitiveKey != null) {"
"LinkedCaseInsensitiveMap.java:228"$1$0$0$2$53$"				return this.targetMap.remove(caseInsensitiveKey);"
"LinkedCaseInsensitiveMap.java:229"$0$0$0$1$4$"			}"
"LinkedCaseInsensitiveMap.java:230"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:231"$0$0$0$2$14$"		return null;"
"LinkedCaseInsensitiveMap.java:232"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:233"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:234"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:235"$0$0$0$4$22$"	public void clear() {"
"LinkedCaseInsensitiveMap.java:236"$0$0$0$1$35$"		this.caseInsensitiveKeys.clear();"
"LinkedCaseInsensitiveMap.java:237"$1$0$0$1$25$"		this.targetMap.clear();"
"LinkedCaseInsensitiveMap.java:238"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:239"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:240"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:241"$0$0$0$4$30$"	public Set<String> keySet() {"
"LinkedCaseInsensitiveMap.java:242"$0$0$0$4$35$"		Set<String> keySet = this.keySet;"
"LinkedCaseInsensitiveMap.java:243"$0$0$0$5$23$"		if (keySet == null) {"
"LinkedCaseInsensitiveMap.java:244"$1$0$0$4$48$"			keySet = new KeySet(this.targetMap.keySet());"
"LinkedCaseInsensitiveMap.java:245"$0$0$0$3$24$"			this.keySet = keySet;"
"LinkedCaseInsensitiveMap.java:246"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:247"$0$0$0$2$16$"		return keySet;"
"LinkedCaseInsensitiveMap.java:248"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:249"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:250"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:251"$0$0$0$4$32$"	public Collection<V> values() {"
"LinkedCaseInsensitiveMap.java:252"$0$0$0$4$37$"		Collection<V> values = this.values;"
"LinkedCaseInsensitiveMap.java:253"$0$0$0$5$23$"		if (values == null) {"
"LinkedCaseInsensitiveMap.java:254"$1$0$0$4$48$"			values = new Values(this.targetMap.values());"
"LinkedCaseInsensitiveMap.java:255"$0$0$0$3$24$"			this.values = values;"
"LinkedCaseInsensitiveMap.java:256"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:257"$0$0$0$2$16$"		return values;"
"LinkedCaseInsensitiveMap.java:258"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:259"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:260"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:261"$0$0$0$5$42$"	public Set<Entry<String, V>> entrySet() {"
"LinkedCaseInsensitiveMap.java:262"$0$0$0$5$49$"		Set<Entry<String, V>> entrySet = this.entrySet;"
"LinkedCaseInsensitiveMap.java:263"$0$0$0$5$25$"		if (entrySet == null) {"
"LinkedCaseInsensitiveMap.java:264"$1$0$0$4$54$"			entrySet = new EntrySet(this.targetMap.entrySet());"
"LinkedCaseInsensitiveMap.java:265"$0$0$0$3$28$"			this.entrySet = entrySet;"
"LinkedCaseInsensitiveMap.java:266"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:267"$0$0$0$2$18$"		return entrySet;"
"LinkedCaseInsensitiveMap.java:268"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:269"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:270"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:271"$0$0$0$4$45$"	public LinkedCaseInsensitiveMap<V> clone() {"
"LinkedCaseInsensitiveMap.java:272"$0$0$0$3$46$"		return new LinkedCaseInsensitiveMap<>(this);"
"LinkedCaseInsensitiveMap.java:273"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:274"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:275"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:276"$0$0$0$6$46$"	public boolean equals(@Nullable Object obj) {"
"LinkedCaseInsensitiveMap.java:277"$1$0$0$2$36$"		return this.targetMap.equals(obj);"
"LinkedCaseInsensitiveMap.java:278"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:279"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:280"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:281"$0$0$0$4$24$"	public int hashCode() {"
"LinkedCaseInsensitiveMap.java:282"$1$0$0$2$35$"		return this.targetMap.hashCode();"
"LinkedCaseInsensitiveMap.java:283"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:284"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:285"$0$0$0$1$10$"	@Override"
"LinkedCaseInsensitiveMap.java:286"$0$0$0$4$27$"	public String toString() {"
"LinkedCaseInsensitiveMap.java:287"$1$0$0$2$35$"		return this.targetMap.toString();"
"LinkedCaseInsensitiveMap.java:288"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:289"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:290"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:291"$0$0$1$4$40$"	// Specific to LinkedCaseInsensitiveMap"
"LinkedCaseInsensitiveMap.java:292"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:293"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:294"$0$0$0$9$68$"	 * Return the locale used by this {@code LinkedCaseInsensitiveMap}."
"LinkedCaseInsensitiveMap.java:295"$0$0$0$6$45$"	 * Used for case-insensitive key conversion."
"LinkedCaseInsensitiveMap.java:296"$0$0$0$3$17$"	 * @since 4.3.10"
"LinkedCaseInsensitiveMap.java:297"$0$0$0$3$42$"	 * @see #LinkedCaseInsensitiveMap(Locale)"
"LinkedCaseInsensitiveMap.java:298"$0$0$0$3$28$"	 * @see #convertKey(String)"
"LinkedCaseInsensitiveMap.java:299"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:300"$1$0$0$4$28$"	public Locale getLocale() {"
"LinkedCaseInsensitiveMap.java:301"$0$0$0$2$21$"		return this.locale;"
"LinkedCaseInsensitiveMap.java:302"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:303"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:304"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:305"$0$0$0$9$52$"	 * Convert the given key to a case-insensitive key."
"LinkedCaseInsensitiveMap.java:306"$0$0$0$7$50$"	 * <p>The default implementation converts the key"
"LinkedCaseInsensitiveMap.java:307"$0$0$0$8$49$"	 * to lower-case according to this Map's Locale."
"LinkedCaseInsensitiveMap.java:308"$0$0$0$6$37$"	 * @param key the user-specified key"
"LinkedCaseInsensitiveMap.java:309"$0$0$0$8$38$"	 * @return the key to use for storing"
"LinkedCaseInsensitiveMap.java:310"$0$0$0$3$35$"	 * @see String#toLowerCase(Locale)"
"LinkedCaseInsensitiveMap.java:311"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:312"$0$0$0$5$42$"	protected String convertKey(String key) {"
"LinkedCaseInsensitiveMap.java:313"$1$0$0$2$38$"		return key.toLowerCase(getLocale());"
"LinkedCaseInsensitiveMap.java:314"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:315"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:316"$0$0$0$1$4$"	/**"
"LinkedCaseInsensitiveMap.java:317"$0$0$0$11$68$"	 * Determine whether this map should remove the given eldest entry."
"LinkedCaseInsensitiveMap.java:318"$0$0$0$6$37$"	 * @param eldest the candidate entry"
"LinkedCaseInsensitiveMap.java:319"$0$0$0$12$70$"	 * @return {@code true} for removing it, {@code false} for keeping it"
"LinkedCaseInsensitiveMap.java:320"$0$0$0$3$40$"	 * @see LinkedHashMap#removeEldestEntry"
"LinkedCaseInsensitiveMap.java:321"$0$0$0$1$4$"	 */"
"LinkedCaseInsensitiveMap.java:322"$0$0$0$6$67$"	protected boolean removeEldestEntry(Map.Entry<String, V> eldest) {"
"LinkedCaseInsensitiveMap.java:323"$0$0$0$2$15$"		return false;"
"LinkedCaseInsensitiveMap.java:324"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:325"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:326"$0$0$0$1$10$"	@Nullable"
"LinkedCaseInsensitiveMap.java:327"$0$0$0$5$54$"	private String removeCaseInsensitiveKey(String key) {"
"LinkedCaseInsensitiveMap.java:328"$0$0$0$2$58$"		return this.caseInsensitiveKeys.remove(convertKey(key));"
"LinkedCaseInsensitiveMap.java:329"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:330"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:331"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:332"$0$0$0$6$51$"	private class KeySet extends AbstractSet<String> {"
"LinkedCaseInsensitiveMap.java:333"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:334"$0$0$0$4$37$"		private final Set<String> delegate;"
"LinkedCaseInsensitiveMap.java:335"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:336"$0$0$0$3$32$"		KeySet(Set<String> delegate) {"
"LinkedCaseInsensitiveMap.java:337"$0$0$0$3$28$"			this.delegate = delegate;"
"LinkedCaseInsensitiveMap.java:338"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:339"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:340"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:341"$0$0$0$4$21$"		public int size() {"
"LinkedCaseInsensitiveMap.java:342"$0$0$0$2$31$"			return this.delegate.size();"
"LinkedCaseInsensitiveMap.java:343"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:344"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:345"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:346"$0$0$0$5$37$"		public boolean contains(Object o) {"
"LinkedCaseInsensitiveMap.java:347"$0$0$0$2$36$"			return this.delegate.contains(o);"
"LinkedCaseInsensitiveMap.java:348"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:349"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:350"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:351"$0$0$0$4$38$"		public Iterator<String> iterator() {"
"LinkedCaseInsensitiveMap.java:352"$0$0$0$3$31$"			return new KeySetIterator();"
"LinkedCaseInsensitiveMap.java:353"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:354"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:355"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:356"$0$0$0$5$35$"		public boolean remove(Object o) {"
"LinkedCaseInsensitiveMap.java:357"$0$0$0$4$58$"			return LinkedCaseInsensitiveMap.this.remove(o) != null;"
"LinkedCaseInsensitiveMap.java:358"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:359"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:360"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:361"$0$0$0$4$23$"		public void clear() {"
"LinkedCaseInsensitiveMap.java:362"$0$0$0$1$41$"			LinkedCaseInsensitiveMap.this.clear();"
"LinkedCaseInsensitiveMap.java:363"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:364"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:365"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:366"$0$0$0$4$44$"		public Spliterator<String> spliterator() {"
"LinkedCaseInsensitiveMap.java:367"$0$0$0$2$38$"			return this.delegate.spliterator();"
"LinkedCaseInsensitiveMap.java:368"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:369"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:370"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:371"$0$0$0$7$56$"		public void forEach(Consumer<? super String> action) {"
"LinkedCaseInsensitiveMap.java:372"$0$0$0$1$33$"			this.delegate.forEach(action);"
"LinkedCaseInsensitiveMap.java:373"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:374"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:375"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:376"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:377"$0$0$0$6$53$"	private class Values extends AbstractCollection<V> {"
"LinkedCaseInsensitiveMap.java:378"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:379"$0$0$0$4$39$"		private final Collection<V> delegate;"
"LinkedCaseInsensitiveMap.java:380"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:381"$0$0$0$3$34$"		Values(Collection<V> delegate) {"
"LinkedCaseInsensitiveMap.java:382"$0$0$0$3$28$"			this.delegate = delegate;"
"LinkedCaseInsensitiveMap.java:383"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:384"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:385"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:386"$0$0$0$4$21$"		public int size() {"
"LinkedCaseInsensitiveMap.java:387"$0$0$0$2$31$"			return this.delegate.size();"
"LinkedCaseInsensitiveMap.java:388"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:389"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:390"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:391"$0$0$0$5$37$"		public boolean contains(Object o) {"
"LinkedCaseInsensitiveMap.java:392"$0$0$0$2$36$"			return this.delegate.contains(o);"
"LinkedCaseInsensitiveMap.java:393"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:394"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:395"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:396"$0$0$0$4$33$"		public Iterator<V> iterator() {"
"LinkedCaseInsensitiveMap.java:397"$0$0$0$3$31$"			return new ValuesIterator();"
"LinkedCaseInsensitiveMap.java:398"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:399"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:400"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:401"$0$0$0$4$23$"		public void clear() {"
"LinkedCaseInsensitiveMap.java:402"$0$0$0$1$41$"			LinkedCaseInsensitiveMap.this.clear();"
"LinkedCaseInsensitiveMap.java:403"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:404"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:405"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:406"$0$0$0$4$39$"		public Spliterator<V> spliterator() {"
"LinkedCaseInsensitiveMap.java:407"$0$0$0$2$38$"			return this.delegate.spliterator();"
"LinkedCaseInsensitiveMap.java:408"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:409"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:410"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:411"$0$0$0$7$51$"		public void forEach(Consumer<? super V> action) {"
"LinkedCaseInsensitiveMap.java:412"$0$0$0$1$33$"			this.delegate.forEach(action);"
"LinkedCaseInsensitiveMap.java:413"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:414"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:415"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:416"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:417"$0$0$0$7$63$"	private class EntrySet extends AbstractSet<Entry<String, V>> {"
"LinkedCaseInsensitiveMap.java:418"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:419"$0$0$0$5$47$"		private final Set<Entry<String, V>> delegate;"
"LinkedCaseInsensitiveMap.java:420"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:421"$0$0$0$5$51$"		public EntrySet(Set<Entry<String, V>> delegate) {"
"LinkedCaseInsensitiveMap.java:422"$0$0$0$3$28$"			this.delegate = delegate;"
"LinkedCaseInsensitiveMap.java:423"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:424"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:425"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:426"$0$0$0$4$21$"		public int size() {"
"LinkedCaseInsensitiveMap.java:427"$0$0$0$2$31$"			return this.delegate.size();"
"LinkedCaseInsensitiveMap.java:428"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:429"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:430"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:431"$0$0$0$5$37$"		public boolean contains(Object o) {"
"LinkedCaseInsensitiveMap.java:432"$0$0$0$2$36$"			return this.delegate.contains(o);"
"LinkedCaseInsensitiveMap.java:433"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:434"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:435"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:436"$0$0$0$5$48$"		public Iterator<Entry<String, V>> iterator() {"
"LinkedCaseInsensitiveMap.java:437"$0$0$0$3$33$"			return new EntrySetIterator();"
"LinkedCaseInsensitiveMap.java:438"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:439"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:440"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:441"$0$0$0$1$32$"		@SuppressWarnings(""unchecked"")"
"LinkedCaseInsensitiveMap.java:442"$0$0$0$5$35$"		public boolean remove(Object o) {"
"LinkedCaseInsensitiveMap.java:443"$0$0$0$3$33$"			if (this.delegate.remove(o)) {"
"LinkedCaseInsensitiveMap.java:444"$1$0$0$3$66$"				removeCaseInsensitiveKey(((Map.Entry<String, V>) o).getKey());"
"LinkedCaseInsensitiveMap.java:445"$0$0$0$2$16$"				return true;"
"LinkedCaseInsensitiveMap.java:446"$0$0$0$1$4$"			}"
"LinkedCaseInsensitiveMap.java:447"$0$0$0$2$16$"			return false;"
"LinkedCaseInsensitiveMap.java:448"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:449"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:450"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:451"$0$0$0$4$23$"		public void clear() {"
"LinkedCaseInsensitiveMap.java:452"$0$0$0$1$25$"			this.delegate.clear();"
"LinkedCaseInsensitiveMap.java:453"$0$0$0$1$31$"			caseInsensitiveKeys.clear();"
"LinkedCaseInsensitiveMap.java:454"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:455"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:456"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:457"$0$0$0$5$54$"		public Spliterator<Entry<String, V>> spliterator() {"
"LinkedCaseInsensitiveMap.java:458"$0$0$0$2$38$"			return this.delegate.spliterator();"
"LinkedCaseInsensitiveMap.java:459"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:460"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:461"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:462"$0$0$0$8$66$"		public void forEach(Consumer<? super Entry<String, V>> action) {"
"LinkedCaseInsensitiveMap.java:463"$0$0$0$1$33$"			this.delegate.forEach(action);"
"LinkedCaseInsensitiveMap.java:464"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:465"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:466"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:467"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:468"$0$0$0$7$65$"	private abstract class EntryIterator<T> implements Iterator<T> {"
"LinkedCaseInsensitiveMap.java:469"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:470"$0$0$0$5$52$"		private final Iterator<Entry<String, V>> delegate;"
"LinkedCaseInsensitiveMap.java:471"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:472"$0$0$0$1$11$"		@Nullable"
"LinkedCaseInsensitiveMap.java:473"$0$0$0$4$32$"		private Entry<String, V> last;"
"LinkedCaseInsensitiveMap.java:474"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:475"$0$0$0$3$26$"		public EntryIterator() {"
"LinkedCaseInsensitiveMap.java:476"$1$0$0$3$51$"			this.delegate = targetMap.entrySet().iterator();"
"LinkedCaseInsensitiveMap.java:477"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:478"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:479"$0$0$0$5$42$"		protected Entry<String, V> nextEntry() {"
"LinkedCaseInsensitiveMap.java:480"$0$0$0$5$49$"			Entry<String, V> entry = this.delegate.next();"
"LinkedCaseInsensitiveMap.java:481"$0$0$0$3$21$"			this.last = entry;"
"LinkedCaseInsensitiveMap.java:482"$0$0$0$2$16$"			return entry;"
"LinkedCaseInsensitiveMap.java:483"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:484"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:485"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:486"$0$0$0$4$28$"		public boolean hasNext() {"
"LinkedCaseInsensitiveMap.java:487"$0$0$0$2$34$"			return this.delegate.hasNext();"
"LinkedCaseInsensitiveMap.java:488"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:489"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:490"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:491"$0$0$0$4$24$"		public void remove() {"
"LinkedCaseInsensitiveMap.java:492"$0$0$0$1$26$"			this.delegate.remove();"
"LinkedCaseInsensitiveMap.java:493"$0$0$0$5$27$"			if (this.last != null) {"
"LinkedCaseInsensitiveMap.java:494"$1$0$0$1$49$"				removeCaseInsensitiveKey(this.last.getKey());"
"LinkedCaseInsensitiveMap.java:495"$0$0$0$3$21$"				this.last = null;"
"LinkedCaseInsensitiveMap.java:496"$0$0$0$1$4$"			}"
"LinkedCaseInsensitiveMap.java:497"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:498"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:499"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:500"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:501"$0$0$0$6$61$"	private class KeySetIterator extends EntryIterator<String> {"
"LinkedCaseInsensitiveMap.java:502"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:503"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:504"$0$0$0$4$24$"		public String next() {"
"LinkedCaseInsensitiveMap.java:505"$1$0$0$2$31$"			return nextEntry().getKey();"
"LinkedCaseInsensitiveMap.java:506"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:507"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:508"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:509"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:510"$0$0$0$6$56$"	private class ValuesIterator extends EntryIterator<V> {"
"LinkedCaseInsensitiveMap.java:511"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:512"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:513"$0$0$0$4$19$"		public V next() {"
"LinkedCaseInsensitiveMap.java:514"$1$0$0$2$33$"			return nextEntry().getValue();"
"LinkedCaseInsensitiveMap.java:515"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:516"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:517"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:518"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:519"$0$0$0$7$73$"	private class EntrySetIterator extends EntryIterator<Entry<String, V>> {"
"LinkedCaseInsensitiveMap.java:520"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:521"$0$0$0$1$11$"		@Override"
"LinkedCaseInsensitiveMap.java:522"$0$0$0$5$34$"		public Entry<String, V> next() {"
"LinkedCaseInsensitiveMap.java:523"$0$0$0$2$22$"			return nextEntry();"
"LinkedCaseInsensitiveMap.java:524"$0$0$0$1$3$"		}"
"LinkedCaseInsensitiveMap.java:525"$0$0$0$1$2$"	}"
"LinkedCaseInsensitiveMap.java:526"$0$0$0$0$0$""
"LinkedCaseInsensitiveMap.java:527"$0$0$0$1$1$"}"
"StaxSource.java:1"$0$0$0$1$2$"/*"
"StaxSource.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"StaxSource.java:3"$0$0$0$1$2$" *"
"StaxSource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StaxSource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StaxSource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StaxSource.java:7"$0$0$0$1$2$" *"
"StaxSource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StaxSource.java:9"$0$0$0$1$2$" *"
"StaxSource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StaxSource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StaxSource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StaxSource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StaxSource.java:14"$0$0$0$5$33$" * limitations under the License."
"StaxSource.java:15"$0$0$0$1$3$" */"
"StaxSource.java:16"$0$0$0$0$0$""
"StaxSource.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"StaxSource.java:18"$0$0$0$0$0$""
"StaxSource.java:19"$0$0$0$2$39$"import javax.xml.stream.XMLEventReader;"
"StaxSource.java:20"$0$0$0$2$40$"import javax.xml.stream.XMLStreamReader;"
"StaxSource.java:21"$0$0$0$2$41$"import javax.xml.transform.sax.SAXSource;"
"StaxSource.java:22"$0$0$0$0$0$""
"StaxSource.java:23"$0$0$0$2$31$"import org.xml.sax.InputSource;"
"StaxSource.java:24"$0$0$0$2$29$"import org.xml.sax.XMLReader;"
"StaxSource.java:25"$0$0$0$0$0$""
"StaxSource.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StaxSource.java:27"$0$0$0$0$0$""
"StaxSource.java:28"$0$0$0$1$3$"/**"
"StaxSource.java:29"$0$0$0$15$99$" * Implementation of the {@code Source} tagging interface for StAX readers. Can be constructed with"
"StaxSource.java:30"$0$0$0$8$59$" * an {@code XMLEventReader} or an {@code XMLStreamReader}."
"StaxSource.java:31"$0$0$0$1$2$" *"
"StaxSource.java:32"$0$0$0$16$99$" * <p>This class is necessary because there is no implementation of {@code Source} for StAX Readers"
"StaxSource.java:33"$0$0$0$20$98$" * in JAXP 1.3. There is a {@code StAXSource} in JAXP 1.4 (JDK 1.6), but this class is kept around"
"StaxSource.java:34"$0$0$0$5$39$" * for backwards compatibility reasons."
"StaxSource.java:35"$0$0$0$1$2$" *"
"StaxSource.java:36"$0$0$0$13$91$" * <p>Even though {@code StaxSource} extends from {@code SAXSource}, calling the methods of"
"StaxSource.java:37"$0$0$0$12$96$" * {@code SAXSource} is <strong>not supported</strong>. In general, the only supported operation"
"StaxSource.java:38"$1$0$0$17$98$" * on this class is to use the {@code XMLReader} obtained via {@link #getXMLReader()} to parse the"
"StaxSource.java:39"$1$0$0$10$96$" * input source obtained via {@link #getInputSource()}. Calling {@link #setXMLReader(XMLReader)}"
"StaxSource.java:40"$0$0$0$15$179$" * or {@link #setInputSource(InputSource)} will result in {@code UnsupportedOperationException #setInputSource(InputSource)} will result in {@code UnsupportedOperationExceptions}."
"StaxSource.java:41"$0$0$0$1$2$" *"
"StaxSource.java:42"$0$0$0$4$24$" * @author Arjen Poutsma"
"StaxSource.java:43"$0$0$0$3$13$" * @since 3.0"
"StaxSource.java:44"$0$0$0$3$22$" * @see XMLEventReader"
"StaxSource.java:45"$0$0$0$3$23$" * @see XMLStreamReader"
"StaxSource.java:46"$0$0$0$3$39$" * @see javax.xml.transform.Transformer"
"StaxSource.java:47"$0$0$0$1$3$" */"
"StaxSource.java:48"$0$0$0$5$36$"class StaxSource extends SAXSource {"
"StaxSource.java:49"$0$0$0$0$0$""
"StaxSource.java:50"$0$0$0$1$10$"	@Nullable"
"StaxSource.java:51"$0$0$0$3$36$"	private XMLEventReader eventReader;"
"StaxSource.java:52"$0$0$0$0$0$""
"StaxSource.java:53"$0$0$0$1$10$"	@Nullable"
"StaxSource.java:54"$0$0$0$3$38$"	private XMLStreamReader streamReader;"
"StaxSource.java:55"$0$0$0$0$0$""
"StaxSource.java:56"$0$0$0$0$0$""
"StaxSource.java:57"$0$0$0$1$4$"	/**"
"StaxSource.java:58"$0$0$0$14$97$"	 * Construct a new instance of the {@code StaxSource} with the specified {@code XMLEventReader}."
"StaxSource.java:59"$0$0$0$11$85$"	 * The supplied event reader must be in {@code XMLStreamConstants.START_DOCUMENT} or"
"StaxSource.java:60"$0$0$0$4$51$"	 * {@code XMLStreamConstants.START_ELEMENT} state."
"StaxSource.java:61"$0$0$0$9$62$"	 * @param eventReader the {@code XMLEventReader} to read from"
"StaxSource.java:62"$0$0$0$16$92$"	 * @throws IllegalStateException if the reader is not at the start of a document or element"
"StaxSource.java:63"$0$0$0$1$4$"	 */"
"StaxSource.java:64"$0$0$0$3$41$"	StaxSource(XMLEventReader eventReader) {"
"StaxSource.java:65"$0$0$0$4$64$"		super(new StaxEventXMLReader(eventReader), new InputSource());"
"StaxSource.java:66"$0$0$0$3$33$"		this.eventReader = eventReader;"
"StaxSource.java:67"$0$0$0$1$2$"	}"
"StaxSource.java:68"$0$0$0$0$0$""
"StaxSource.java:69"$0$0$0$1$4$"	/**"
"StaxSource.java:70"$0$0$0$14$98$"	 * Construct a new instance of the {@code StaxSource} with the specified {@code XMLStreamReader}."
"StaxSource.java:71"$0$0$0$11$86$"	 * The supplied stream reader must be in {@code XMLStreamConstants.START_DOCUMENT} or"
"StaxSource.java:72"$0$0$0$4$51$"	 * {@code XMLStreamConstants.START_ELEMENT} state."
"StaxSource.java:73"$0$0$0$9$64$"	 * @param streamReader the {@code XMLStreamReader} to read from"
"StaxSource.java:74"$0$0$0$16$92$"	 * @throws IllegalStateException if the reader is not at the start of a document or element"
"StaxSource.java:75"$0$0$0$1$4$"	 */"
"StaxSource.java:76"$0$0$0$3$43$"	StaxSource(XMLStreamReader streamReader) {"
"StaxSource.java:77"$0$0$0$4$66$"		super(new StaxStreamXMLReader(streamReader), new InputSource());"
"StaxSource.java:78"$0$0$0$3$35$"		this.streamReader = streamReader;"
"StaxSource.java:79"$0$0$0$1$2$"	}"
"StaxSource.java:80"$0$0$0$0$0$""
"StaxSource.java:81"$0$0$0$0$0$""
"StaxSource.java:82"$0$0$0$1$4$"	/**"
"StaxSource.java:83"$0$0$0$10$70$"	 * Return the {@code XMLEventReader} used by this {@code StaxSource}."
"StaxSource.java:84"$0$0$0$11$78$"	 * <p>If this {@code StaxSource} was created with an {@code XMLStreamReader},"
"StaxSource.java:85"$0$0$0$7$36$"	 * the result will be {@code null}."
"StaxSource.java:86"$0$0$0$10$53$"	 * @return the StAX event reader used by this source"
"StaxSource.java:87"$0$0$0$3$63$"	 * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)"
"StaxSource.java:88"$0$0$0$1$4$"	 */"
"StaxSource.java:89"$0$0$0$1$10$"	@Nullable"
"StaxSource.java:90"$1$0$0$3$37$"	XMLEventReader getXMLEventReader() {"
"StaxSource.java:91"$0$0$0$2$26$"		return this.eventReader;"
"StaxSource.java:92"$0$0$0$1$2$"	}"
"StaxSource.java:93"$0$0$0$0$0$""
"StaxSource.java:94"$0$0$0$1$4$"	/**"
"StaxSource.java:95"$0$0$0$10$71$"	 * Return the {@code XMLStreamReader} used by this {@code StaxSource}."
"StaxSource.java:96"$0$0$0$11$77$"	 * <p>If this {@code StaxSource} was created with an {@code XMLEventReader},"
"StaxSource.java:97"$0$0$0$7$36$"	 * the result will be {@code null}."
"StaxSource.java:98"$0$0$0$10$53$"	 * @return the StAX event reader used by this source"
"StaxSource.java:99"$0$0$0$3$63$"	 * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)"
"StaxSource.java:100"$0$0$0$1$4$"	 */"
"StaxSource.java:101"$0$0$0$1$10$"	@Nullable"
"StaxSource.java:102"$1$0$0$3$39$"	XMLStreamReader getXMLStreamReader() {"
"StaxSource.java:103"$0$0$0$2$27$"		return this.streamReader;"
"StaxSource.java:104"$0$0$0$1$2$"	}"
"StaxSource.java:105"$0$0$0$0$0$""
"StaxSource.java:106"$0$0$0$0$0$""
"StaxSource.java:107"$0$0$0$1$4$"	/**"
"StaxSource.java:108"$0$0$0$5$52$"	 * Throws an {@code UnsupportedOperationException}."
"StaxSource.java:109"$0$0$0$4$48$"	 * @throws UnsupportedOperationException always"
"StaxSource.java:110"$0$0$0$1$4$"	 */"
"StaxSource.java:111"$0$0$0$1$10$"	@Override"
"StaxSource.java:112"$0$0$0$5$54$"	public void setInputSource(InputSource inputSource) {"
"StaxSource.java:113"$0$0$0$6$77$"		throw new UnsupportedOperationException(""setInputSource is not supported"");"
"StaxSource.java:114"$0$0$0$1$2$"	}"
"StaxSource.java:115"$0$0$0$0$0$""
"StaxSource.java:116"$0$0$0$1$4$"	/**"
"StaxSource.java:117"$0$0$0$5$52$"	 * Throws an {@code UnsupportedOperationException}."
"StaxSource.java:118"$0$0$0$4$48$"	 * @throws UnsupportedOperationException always"
"StaxSource.java:119"$0$0$0$1$4$"	 */"
"StaxSource.java:120"$0$0$0$1$10$"	@Override"
"StaxSource.java:121"$0$0$0$5$45$"	public void setXMLReader(XMLReader reader) {"
"StaxSource.java:122"$0$0$0$6$75$"		throw new UnsupportedOperationException(""setXMLReader is not supported"");"
"StaxSource.java:123"$0$0$0$1$2$"	}"
"StaxSource.java:124"$0$0$0$0$0$""
"StaxSource.java:125"$0$0$0$1$1$"}"
"GenericConversionService.java:1"$0$0$0$1$2$"/*"
"GenericConversionService.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"GenericConversionService.java:3"$0$0$0$1$2$" *"
"GenericConversionService.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"GenericConversionService.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"GenericConversionService.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"GenericConversionService.java:7"$0$0$0$1$2$" *"
"GenericConversionService.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"GenericConversionService.java:9"$0$0$0$1$2$" *"
"GenericConversionService.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"GenericConversionService.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"GenericConversionService.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"GenericConversionService.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"GenericConversionService.java:14"$0$0$0$5$33$" * limitations under the License."
"GenericConversionService.java:15"$0$0$0$1$3$" */"
"GenericConversionService.java:16"$0$0$0$0$0$""
"GenericConversionService.java:17"$0$0$0$2$49$"package org.springframework.core.convert.support;"
"GenericConversionService.java:18"$0$0$0$0$0$""
"GenericConversionService.java:19"$0$0$0$2$31$"import java.lang.reflect.Array;"
"GenericConversionService.java:20"$0$0$0$2$27$"import java.util.ArrayList;"
"GenericConversionService.java:21"$0$0$0$2$29$"import java.util.Collections;"
"GenericConversionService.java:22"$0$0$0$2$25$"import java.util.HashSet;"
"GenericConversionService.java:23"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"GenericConversionService.java:24"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"GenericConversionService.java:25"$0$0$0$2$28$"import java.util.LinkedList;"
"GenericConversionService.java:26"$0$0$0$2$22$"import java.util.List;"
"GenericConversionService.java:27"$0$0$0$2$21$"import java.util.Map;"
"GenericConversionService.java:28"$0$0$0$2$26$"import java.util.Optional;"
"GenericConversionService.java:29"$0$0$0$2$21$"import java.util.Set;"
"GenericConversionService.java:30"$0$0$0$0$0$""
"GenericConversionService.java:31"$0$0$0$2$48$"import org.springframework.core.DecoratingProxy;"
"GenericConversionService.java:32"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"GenericConversionService.java:33"$0$0$0$2$60$"import org.springframework.core.convert.ConversionException;"
"GenericConversionService.java:34"$0$0$0$2$66$"import org.springframework.core.convert.ConversionFailedException;"
"GenericConversionService.java:35"$0$0$0$2$58$"import org.springframework.core.convert.ConversionService;"
"GenericConversionService.java:36"$0$0$0$2$67$"import org.springframework.core.convert.ConverterNotFoundException;"
"GenericConversionService.java:37"$0$0$0$2$55$"import org.springframework.core.convert.TypeDescriptor;"
"GenericConversionService.java:38"$0$0$0$2$71$"import org.springframework.core.convert.converter.ConditionalConverter;"
"GenericConversionService.java:39"$0$0$0$2$78$"import org.springframework.core.convert.converter.ConditionalGenericConverter;"
"GenericConversionService.java:40"$0$0$0$2$60$"import org.springframework.core.convert.converter.Converter;"
"GenericConversionService.java:41"$0$0$0$2$67$"import org.springframework.core.convert.converter.ConverterFactory;"
"GenericConversionService.java:42"$0$0$0$2$68$"import org.springframework.core.convert.converter.ConverterRegistry;"
"GenericConversionService.java:43"$0$0$0$2$67$"import org.springframework.core.convert.converter.GenericConverter;"
"GenericConversionService.java:44"$0$0$0$2$83$"import org.springframework.core.convert.converter.GenericConverter.ConvertiblePair;"
"GenericConversionService.java:45"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"GenericConversionService.java:46"$0$0$0$2$39$"import org.springframework.util.Assert;"
"GenericConversionService.java:47"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"GenericConversionService.java:48"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"GenericConversionService.java:49"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"GenericConversionService.java:50"$0$0$0$0$0$""
"GenericConversionService.java:51"$0$0$0$1$3$"/**"
"GenericConversionService.java:52"$0$0$0$11$87$" * Base {@link ConversionService} implementation suitable for use in most environments."
"GenericConversionService.java:53"$0$0$0$10$82$" * Indirectly implements {@link ConverterRegistry} as registration API through the"
"GenericConversionService.java:54"$0$0$0$4$51$" * {@link ConfigurableConversionService} interface."
"GenericConversionService.java:55"$0$0$0$1$2$" *"
"GenericConversionService.java:56"$0$0$0$4$23$" * @author Keith Donald"
"GenericConversionService.java:57"$0$0$0$4$26$" * @author Juergen Hoeller"
"GenericConversionService.java:58"$0$0$0$4$22$" * @author Chris Beams"
"GenericConversionService.java:59"$0$0$0$4$23$" * @author Phillip Webb"
"GenericConversionService.java:60"$0$0$0$4$26$" * @author David Haraburda"
"GenericConversionService.java:61"$0$0$0$3$13$" * @since 3.0"
"GenericConversionService.java:62"$0$0$0$1$3$" */"
"GenericConversionService.java:63"$0$0$0$6$80$"public class GenericConversionService implements ConfigurableConversionService {"
"GenericConversionService.java:64"$0$0$0$0$0$""
"GenericConversionService.java:65"$0$0$0$1$4$"	/**"
"GenericConversionService.java:66"$0$0$0$10$65$"	 * General NO-OP converter used when conversion is not required."
"GenericConversionService.java:67"$0$0$0$1$4$"	 */"
"GenericConversionService.java:68"$0$0$0$8$84$"	private static final GenericConverter NO_OP_CONVERTER = new NoOpConverter(""NO_OP"");"
"GenericConversionService.java:69"$0$0$0$0$0$""
"GenericConversionService.java:70"$0$0$0$1$4$"	/**"
"GenericConversionService.java:71"$0$0$0$11$57$"	 * Used as a cache entry when no converter is available."
"GenericConversionService.java:72"$0$0$0$6$37$"	 * This converter is never returned."
"GenericConversionService.java:73"$0$0$0$1$4$"	 */"
"GenericConversionService.java:74"$0$0$0$8$80$"	private static final GenericConverter NO_MATCH = new NoOpConverter(""NO_MATCH"");"
"GenericConversionService.java:75"$0$0$0$0$0$""
"GenericConversionService.java:76"$0$0$0$0$0$""
"GenericConversionService.java:77"$0$0$0$7$56$"	private final Converters converters = new Converters();"
"GenericConversionService.java:78"$0$0$0$0$0$""
"GenericConversionService.java:79"$0$0$0$8$110$"	private final Map<ConverterCacheKey, GenericConverter> converterCache = new ConcurrentReferenceHashMap<>(64);"
"GenericConversionService.java:80"$0$0$0$0$0$""
"GenericConversionService.java:81"$0$0$0$0$0$""
"GenericConversionService.java:82"$0$0$1$3$36$"	// ConverterRegistry implementation"
"GenericConversionService.java:83"$0$0$0$0$0$""
"GenericConversionService.java:84"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:85"$0$0$0$6$54$"	public void addConverter(Converter<?, ?> converter) {"
"GenericConversionService.java:86"$2$0$0$5$89$"		ResolvableType[] typeInfo = getRequiredTypeInfo(converter.getClass(), Converter.class);"
"GenericConversionService.java:87"$0$0$0$9$65$"		if (typeInfo == null && converter instanceof DecoratingProxy) {"
"GenericConversionService.java:88"$2$0$0$5$102$"			typeInfo = getRequiredTypeInfo(((DecoratingProxy) converter).getDecoratedClass(), Converter.class);"
"GenericConversionService.java:89"$0$0$0$1$3$"		}"
"GenericConversionService.java:90"$0$0$0$5$25$"		if (typeInfo == null) {"
"GenericConversionService.java:91"$1$0$0$16$107$"			throw new IllegalArgumentException(""Unable to determine source type <S> and target type <T> for your "" +"
"GenericConversionService.java:92"$2$0$0$12$101$"					""Converter ["" + converter.getClass().getName() + ""]; does the class parameterize those types?"");"
"GenericConversionService.java:93"$0$0$0$1$3$"		}"
"GenericConversionService.java:94"$0$0$0$4$74$"		addConverter(new ConverterAdapter(converter, typeInfo[0], typeInfo[1]));"
"GenericConversionService.java:95"$0$0$0$1$2$"	}"
"GenericConversionService.java:96"$0$0$0$0$0$""
"GenericConversionService.java:97"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:98"$1$0$0$16$121$"	public <S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter<? super S, ? extends T> converter) {"
"GenericConversionService.java:99"$0$0$0$2$36$"		addConverter(new ConverterAdapter("
"GenericConversionService.java:100"$1$0$0$3$90$"				converter, ResolvableType.forClass(sourceType), ResolvableType.forClass(targetType)));"
"GenericConversionService.java:101"$0$0$0$1$2$"	}"
"GenericConversionService.java:102"$0$0$0$0$0$""
"GenericConversionService.java:103"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:104"$0$0$0$5$55$"	public void addConverter(GenericConverter converter) {"
"GenericConversionService.java:105"$0$0$0$1$33$"		this.converters.add(converter);"
"GenericConversionService.java:106"$0$0$0$1$20$"		invalidateCache();"
"GenericConversionService.java:107"$0$0$0$1$2$"	}"
"GenericConversionService.java:108"$0$0$0$0$0$""
"GenericConversionService.java:109"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:110"$0$0$0$6$66$"	public void addConverterFactory(ConverterFactory<?, ?> factory) {"
"GenericConversionService.java:111"$2$0$0$5$94$"		ResolvableType[] typeInfo = getRequiredTypeInfo(factory.getClass(), ConverterFactory.class);"
"GenericConversionService.java:112"$0$0$0$9$63$"		if (typeInfo == null && factory instanceof DecoratingProxy) {"
"GenericConversionService.java:113"$2$0$0$5$107$"			typeInfo = getRequiredTypeInfo(((DecoratingProxy) factory).getDecoratedClass(), ConverterFactory.class);"
"GenericConversionService.java:114"$0$0$0$1$3$"		}"
"GenericConversionService.java:115"$0$0$0$5$25$"		if (typeInfo == null) {"
"GenericConversionService.java:116"$1$0$0$16$107$"			throw new IllegalArgumentException(""Unable to determine source type <S> and target type <T> for your "" +"
"GenericConversionService.java:117"$2$0$0$12$106$"					""ConverterFactory ["" + factory.getClass().getName() + ""]; does the class parameterize those types?"");"
"GenericConversionService.java:118"$0$0$0$1$3$"		}"
"GenericConversionService.java:119"$0$0$0$2$51$"		addConverter(new ConverterFactoryAdapter(factory,"
"GenericConversionService.java:120"$0$0$0$3$72$"				new ConvertiblePair(typeInfo[0].toClass(), typeInfo[1].toClass())));"
"GenericConversionService.java:121"$0$0$0$1$2$"	}"
"GenericConversionService.java:122"$0$0$0$0$0$""
"GenericConversionService.java:123"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:124"$1$0$0$7$74$"	public void removeConvertible(Class<?> sourceType, Class<?> targetType) {"
"GenericConversionService.java:125"$1$0$0$2$49$"		this.converters.remove(sourceType, targetType);"
"GenericConversionService.java:126"$0$0$0$1$20$"		invalidateCache();"
"GenericConversionService.java:127"$0$0$0$1$2$"	}"
"GenericConversionService.java:128"$0$0$0$0$0$""
"GenericConversionService.java:129"$0$0$0$0$0$""
"GenericConversionService.java:130"$0$0$1$3$36$"	// ConversionService implementation"
"GenericConversionService.java:131"$0$0$0$0$0$""
"GenericConversionService.java:132"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:133"$1$0$0$8$80$"	public boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType) {"
"GenericConversionService.java:134"$2$0$0$9$73$"		Assert.notNull(targetType, ""Target type to convert to cannot be null"");"
"GenericConversionService.java:135"$0$0$0$8$85$"		return canConvert((sourceType != null ? TypeDescriptor.valueOf(sourceType) : null),"
"GenericConversionService.java:136"$1$0$0$1$40$"				TypeDescriptor.valueOf(targetType));"
"GenericConversionService.java:137"$0$0$0$1$2$"	}"
"GenericConversionService.java:138"$0$0$0$0$0$""
"GenericConversionService.java:139"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:140"$1$0$0$8$92$"	public boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:141"$2$0$0$9$73$"		Assert.notNull(targetType, ""Target type to convert to cannot be null"");"
"GenericConversionService.java:142"$0$0$0$5$27$"		if (sourceType == null) {"
"GenericConversionService.java:143"$0$0$0$2$15$"			return true;"
"GenericConversionService.java:144"$0$0$0$1$3$"		}"
"GenericConversionService.java:145"$2$0$0$5$68$"		GenericConverter converter = getConverter(sourceType, targetType);"
"GenericConversionService.java:146"$0$0$0$4$29$"		return (converter != null);"
"GenericConversionService.java:147"$0$0$0$1$2$"	}"
"GenericConversionService.java:148"$0$0$0$0$0$""
"GenericConversionService.java:149"$0$0$0$1$4$"	/**"
"GenericConversionService.java:150"$1$0$0$15$90$"	 * Return whether conversion between the source type and the target type can be bypassed."
"GenericConversionService.java:151"$0$0$0$14$83$"	 * <p>More precisely, this method will return true if objects of sourceType can be"
"GenericConversionService.java:152"$1$0$0$12$74$"	 * converted to the target type by returning the source object unchanged."
"GenericConversionService.java:153"$0$0$0$11$67$"	 * @param sourceType context about the source type to convert from"
"GenericConversionService.java:154"$0$0$0$10$51$"	 * (may be {@code null} if source is {@code null})"
"GenericConversionService.java:155"$2$0$0$12$76$"	 * @param targetType context about the target type to convert to (required)"
"GenericConversionService.java:156"$0$0$0$12$79$"	 * @return {@code true} if conversion can be bypassed; {@code false} otherwise"
"GenericConversionService.java:157"$1$0$0$8$66$"	 * @throws IllegalArgumentException if targetType is {@code null}"
"GenericConversionService.java:158"$0$0$0$3$14$"	 * @since 3.2"
"GenericConversionService.java:159"$0$0$0$1$4$"	 */"
"GenericConversionService.java:160"$1$0$0$8$98$"	public boolean canBypassConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:161"$2$0$0$9$73$"		Assert.notNull(targetType, ""Target type to convert to cannot be null"");"
"GenericConversionService.java:162"$0$0$0$5$27$"		if (sourceType == null) {"
"GenericConversionService.java:163"$0$0$0$2$15$"			return true;"
"GenericConversionService.java:164"$0$0$0$1$3$"		}"
"GenericConversionService.java:165"$2$0$0$5$68$"		GenericConverter converter = getConverter(sourceType, targetType);"
"GenericConversionService.java:166"$0$0$0$4$40$"		return (converter == NO_OP_CONVERTER);"
"GenericConversionService.java:167"$0$0$0$1$2$"	}"
"GenericConversionService.java:168"$0$0$0$0$0$""
"GenericConversionService.java:169"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:170"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"GenericConversionService.java:171"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:172"$1$0$0$9$69$"	public <T> T convert(@Nullable Object source, Class<T> targetType) {"
"GenericConversionService.java:173"$2$0$0$9$73$"		Assert.notNull(targetType, ""Target type to convert to cannot be null"");"
"GenericConversionService.java:174"$1$0$0$5$99$"		return (T) convert(source, TypeDescriptor.forObject(source), TypeDescriptor.valueOf(targetType));"
"GenericConversionService.java:175"$0$0$0$1$2$"	}"
"GenericConversionService.java:176"$0$0$0$0$0$""
"GenericConversionService.java:177"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:178"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:179"$1$0$0$11$113$"	public Object convert(@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:180"$2$0$0$9$73$"		Assert.notNull(targetType, ""Target type to convert to cannot be null"");"
"GenericConversionService.java:181"$0$0$0$5$27$"		if (sourceType == null) {"
"GenericConversionService.java:182"$0$0$0$12$83$"			Assert.isTrue(source == null, ""Source must be [null] if source type == [null]"");"
"GenericConversionService.java:183"$2$0$0$5$78$"			return handleResult(null, targetType, convertNullSource(null, targetType));"
"GenericConversionService.java:184"$0$0$0$1$3$"		}"
"GenericConversionService.java:185"$1$0$0$7$73$"		if (source != null && !sourceType.getObjectType().isInstance(source)) {"
"GenericConversionService.java:186"$0$0$0$13$89$"			throw new IllegalArgumentException(""Source to convert from must be an instance of ["" +"
"GenericConversionService.java:187"$2$0$0$12$79$"					sourceType + ""]; instead it was a ["" + source.getClass().getName() + ""]"");"
"GenericConversionService.java:188"$0$0$0$1$3$"		}"
"GenericConversionService.java:189"$2$0$0$5$68$"		GenericConverter converter = getConverter(sourceType, targetType);"
"GenericConversionService.java:190"$0$0$0$5$26$"		if (converter != null) {"
"GenericConversionService.java:191"$1$0$0$7$94$"			Object result = ConversionUtils.invokeConverter(converter, source, sourceType, targetType);"
"GenericConversionService.java:192"$1$0$0$4$55$"			return handleResult(sourceType, targetType, result);"
"GenericConversionService.java:193"$0$0$0$1$3$"		}"
"GenericConversionService.java:194"$1$0$0$4$65$"		return handleConverterNotFound(source, sourceType, targetType);"
"GenericConversionService.java:195"$0$0$0$1$2$"	}"
"GenericConversionService.java:196"$0$0$0$0$0$""
"GenericConversionService.java:197"$0$0$0$1$4$"	/**"
"GenericConversionService.java:198"$1$0$0$12$85$"	 * Convenience operation for converting a source object to the specified targetType,"
"GenericConversionService.java:199"$1$0$0$13$86$"	 * where the target type is a descriptor that provides additional conversion context."
"GenericConversionService.java:200"$0$0$0$9$84$"	 * Simply delegates to {@link #convert(Object, TypeDescriptor, TypeDescriptor)} and"
"GenericConversionService.java:201"$0$0$0$10$69$"	 * encapsulates the construction of the source type descriptor using"
"GenericConversionService.java:202"$0$0$0$3$45$"	 * {@link TypeDescriptor#forObject(Object)}."
"GenericConversionService.java:203"$0$0$0$6$35$"	 * @param source the source object"
"GenericConversionService.java:204"$2$0$0$6$37$"	 * @param targetType the target type"
"GenericConversionService.java:205"$0$0$0$5$31$"	 * @return the converted value"
"GenericConversionService.java:206"$0$0$0$8$66$"	 * @throws ConversionException if a conversion exception occurred"
"GenericConversionService.java:207"$1$0$0$8$67$"	 * @throws IllegalArgumentException if targetType is {@code null},"
"GenericConversionService.java:208"$0$0$0$12$64$"	 * or sourceType is {@code null} but source is not {@code null}"
"GenericConversionService.java:209"$0$0$0$1$4$"	 */"
"GenericConversionService.java:210"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:211"$1$0$0$8$76$"	public Object convert(@Nullable Object source, TypeDescriptor targetType) {"
"GenericConversionService.java:212"$1$0$0$4$71$"		return convert(source, TypeDescriptor.forObject(source), targetType);"
"GenericConversionService.java:213"$0$0$0$1$2$"	}"
"GenericConversionService.java:214"$0$0$0$0$0$""
"GenericConversionService.java:215"$0$0$0$1$10$"	@Override"
"GenericConversionService.java:216"$0$0$0$4$27$"	public String toString() {"
"GenericConversionService.java:217"$0$0$0$2$36$"		return this.converters.toString();"
"GenericConversionService.java:218"$0$0$0$1$2$"	}"
"GenericConversionService.java:219"$0$0$0$0$0$""
"GenericConversionService.java:220"$0$0$0$0$0$""
"GenericConversionService.java:221"$0$0$1$4$30$"	// Protected template methods"
"GenericConversionService.java:222"$0$0$0$0$0$""
"GenericConversionService.java:223"$0$0$0$1$4$"	/**"
"GenericConversionService.java:224"$0$0$0$9$53$"	 * Template method to convert a {@code null} source."
"GenericConversionService.java:225"$0$0$0$11$68$"	 * <p>The default implementation returns {@code null} or the Java 8"
"GenericConversionService.java:226"$1$0$0$9$69$"	 * {@link java.util.Optional#empty()} instance if the target type is"
"GenericConversionService.java:227"$0$0$0$9$70$"	 * {@code java.util.Optional}. Subclasses may override this to return"
"GenericConversionService.java:228"$1$0$0$9$58$"	 * custom {@code null} objects for specific target types."
"GenericConversionService.java:229"$0$0$0$9$53$"	 * @param sourceType the source type to convert from"
"GenericConversionService.java:230"$2$0$0$9$51$"	 * @param targetType the target type to convert to"
"GenericConversionService.java:231"$0$0$0$6$37$"	 * @return the converted null object"
"GenericConversionService.java:232"$0$0$0$1$4$"	 */"
"GenericConversionService.java:233"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:234"$1$0$0$8$101$"	protected Object convertNullSource(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:235"$2$0$0$5$53$"		if (targetType.getObjectType() == Optional.class) {"
"GenericConversionService.java:236"$0$0$0$2$27$"			return Optional.empty();"
"GenericConversionService.java:237"$0$0$0$1$3$"		}"
"GenericConversionService.java:238"$0$0$0$2$14$"		return null;"
"GenericConversionService.java:239"$0$0$0$1$2$"	}"
"GenericConversionService.java:240"$0$0$0$0$0$""
"GenericConversionService.java:241"$0$0$0$1$4$"	/**"
"GenericConversionService.java:242"$1$0$0$12$79$"	 * Hook method to lookup the converter for a given sourceType/targetType pair."
"GenericConversionService.java:243"$0$0$0$7$59$"	 * First queries this ConversionService's converter cache."
"GenericConversionService.java:244"$0$0$0$14$81$"	 * On a cache miss, then performs an exhaustive search for a matching converter."
"GenericConversionService.java:245"$0$0$0$9$59$"	 * If no converter matches, returns the default converter."
"GenericConversionService.java:246"$0$0$0$9$53$"	 * @param sourceType the source type to convert from"
"GenericConversionService.java:247"$2$0$0$9$51$"	 * @param targetType the target type to convert to"
"GenericConversionService.java:248"$0$0$0$10$67$"	 * @return the generic converter that will perform the conversion,"
"GenericConversionService.java:249"$0$0$0$10$54$"	 * or {@code null} if no suitable converter was found"
"GenericConversionService.java:250"$1$0$0$4$61$"	 * @see #getDefaultConverter(TypeDescriptor, TypeDescriptor)"
"GenericConversionService.java:251"$0$0$0$1$4$"	 */"
"GenericConversionService.java:252"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:253"$2$0$0$7$96$"	protected GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:254"$1$0$0$6$72$"		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);"
"GenericConversionService.java:255"$1$0$0$4$60$"		GenericConverter converter = this.converterCache.get(key);"
"GenericConversionService.java:256"$0$0$0$5$26$"		if (converter != null) {"
"GenericConversionService.java:257"$0$0$0$8$53$"			return (converter != NO_MATCH ? converter : null);"
"GenericConversionService.java:258"$0$0$0$1$3$"		}"
"GenericConversionService.java:259"$0$0$0$0$0$""
"GenericConversionService.java:260"$1$0$0$4$59$"		converter = this.converters.find(sourceType, targetType);"
"GenericConversionService.java:261"$0$0$0$5$26$"		if (converter == null) {"
"GenericConversionService.java:262"$2$0$0$4$59$"			converter = getDefaultConverter(sourceType, targetType);"
"GenericConversionService.java:263"$0$0$0$1$3$"		}"
"GenericConversionService.java:264"$0$0$0$0$0$""
"GenericConversionService.java:265"$0$0$0$5$26$"		if (converter != null) {"
"GenericConversionService.java:266"$0$0$0$2$43$"			this.converterCache.put(key, converter);"
"GenericConversionService.java:267"$0$0$0$2$20$"			return converter;"
"GenericConversionService.java:268"$0$0$0$1$3$"		}"
"GenericConversionService.java:269"$0$0$0$0$0$""
"GenericConversionService.java:270"$0$0$0$2$41$"		this.converterCache.put(key, NO_MATCH);"
"GenericConversionService.java:271"$0$0$0$2$14$"		return null;"
"GenericConversionService.java:272"$0$0$0$1$2$"	}"
"GenericConversionService.java:273"$0$0$0$0$0$""
"GenericConversionService.java:274"$0$0$0$1$4$"	/**"
"GenericConversionService.java:275"$1$0$0$15$99$"	 * Return the default converter if no converter is found for the given sourceType/targetType pair."
"GenericConversionService.java:276"$1$0$0$15$85$"	 * <p>Returns a NO_OP Converter if the source type is assignable to the target type."
"GenericConversionService.java:277"$0$0$0$12$84$"	 * Returns {@code null} otherwise, indicating no suitable converter could be found."
"GenericConversionService.java:278"$0$0$0$9$53$"	 * @param sourceType the source type to convert from"
"GenericConversionService.java:279"$2$0$0$9$51$"	 * @param targetType the target type to convert to"
"GenericConversionService.java:280"$0$0$0$11$74$"	 * @return the default generic converter that will perform the conversion"
"GenericConversionService.java:281"$0$0$0$1$4$"	 */"
"GenericConversionService.java:282"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:283"$2$0$0$7$103$"	protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:284"$1$0$0$6$74$"		return (sourceType.isAssignableTo(targetType) ? NO_OP_CONVERTER : null);"
"GenericConversionService.java:285"$0$0$0$1$2$"	}"
"GenericConversionService.java:286"$0$0$0$0$0$""
"GenericConversionService.java:287"$0$0$0$0$0$""
"GenericConversionService.java:288"$0$0$1$3$20$"	// Internal helpers"
"GenericConversionService.java:289"$0$0$0$0$0$""
"GenericConversionService.java:290"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:291"$1$0$0$7$93$"	private ResolvableType[] getRequiredTypeInfo(Class<?> converterClass, Class<?> genericIfc) {"
"GenericConversionService.java:292"$0$0$0$4$89$"		ResolvableType resolvableType = ResolvableType.forClass(converterClass).as(genericIfc);"
"GenericConversionService.java:293"$1$0$0$4$59$"		ResolvableType[] generics = resolvableType.getGenerics();"
"GenericConversionService.java:294"$0$0$0$5$28$"		if (generics.length < 2) {"
"GenericConversionService.java:295"$0$0$0$2$15$"			return null;"
"GenericConversionService.java:296"$0$0$0$1$3$"		}"
"GenericConversionService.java:297"$0$0$0$4$46$"		Class<?> sourceType = generics[0].resolve();"
"GenericConversionService.java:298"$1$0$0$4$46$"		Class<?> targetType = generics[1].resolve();"
"GenericConversionService.java:299"$1$0$0$9$49$"		if (sourceType == null || targetType == null) {"
"GenericConversionService.java:300"$0$0$0$2$15$"			return null;"
"GenericConversionService.java:301"$0$0$0$1$3$"		}"
"GenericConversionService.java:302"$0$0$0$2$18$"		return generics;"
"GenericConversionService.java:303"$0$0$0$1$2$"	}"
"GenericConversionService.java:304"$0$0$0$0$0$""
"GenericConversionService.java:305"$0$0$0$4$33$"	private void invalidateCache() {"
"GenericConversionService.java:306"$0$0$0$1$30$"		this.converterCache.clear();"
"GenericConversionService.java:307"$0$0$0$1$2$"	}"
"GenericConversionService.java:308"$0$0$0$0$0$""
"GenericConversionService.java:309"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:310"$0$0$0$3$40$"	private Object handleConverterNotFound("
"GenericConversionService.java:311"$1$0$0$9$93$"			@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:312"$0$0$0$0$0$""
"GenericConversionService.java:313"$0$0$0$5$23$"		if (source == null) {"
"GenericConversionService.java:314"$2$0$0$2$56$"			assertNotPrimitiveTargetType(sourceType, targetType);"
"GenericConversionService.java:315"$0$0$0$2$15$"			return null;"
"GenericConversionService.java:316"$0$0$0$1$3$"		}"
"GenericConversionService.java:317"$1$0$0$7$70$"		if ((sourceType == null || sourceType.isAssignableTo(targetType)) &&"
"GenericConversionService.java:318"$2$0$0$2$52$"				targetType.getObjectType().isInstance(source)) {"
"GenericConversionService.java:319"$0$0$0$2$17$"			return source;"
"GenericConversionService.java:320"$0$0$0$1$3$"		}"
"GenericConversionService.java:321"$1$0$0$4$63$"		throw new ConverterNotFoundException(sourceType, targetType);"
"GenericConversionService.java:322"$0$0$0$1$2$"	}"
"GenericConversionService.java:323"$0$0$0$0$0$""
"GenericConversionService.java:324"$0$0$0$1$10$"	@Nullable"
"GenericConversionService.java:325"$1$0$0$11$119$"	private Object handleResult(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType, @Nullable Object result) {"
"GenericConversionService.java:326"$0$0$0$5$23$"		if (result == null) {"
"GenericConversionService.java:327"$2$0$0$2$56$"			assertNotPrimitiveTargetType(sourceType, targetType);"
"GenericConversionService.java:328"$0$0$0$1$3$"		}"
"GenericConversionService.java:329"$0$0$0$2$16$"		return result;"
"GenericConversionService.java:330"$0$0$0$1$2$"	}"
"GenericConversionService.java:331"$0$0$0$0$0$""
"GenericConversionService.java:332"$2$0$0$8$108$"	private void assertNotPrimitiveTargetType(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:333"$1$0$0$3$33$"		if (targetType.isPrimitive()) {"
"GenericConversionService.java:334"$1$0$0$5$68$"			throw new ConversionFailedException(sourceType, targetType, null,"
"GenericConversionService.java:335"$0$0$0$11$90$"					new IllegalArgumentException(""A null value cannot be assigned to a primitive type""));"
"GenericConversionService.java:336"$0$0$0$1$3$"		}"
"GenericConversionService.java:337"$0$0$0$1$2$"	}"
"GenericConversionService.java:338"$0$0$0$0$0$""
"GenericConversionService.java:339"$0$0$0$0$0$""
"GenericConversionService.java:340"$0$0$0$1$4$"	/**"
"GenericConversionService.java:341"$0$0$0$9$61$"	 * Adapts a {@link Converter} to a {@link GenericConverter}."
"GenericConversionService.java:342"$0$0$0$1$4$"	 */"
"GenericConversionService.java:343"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"GenericConversionService.java:344"$0$0$0$7$78$"	private final class ConverterAdapter implements ConditionalGenericConverter {"
"GenericConversionService.java:345"$0$0$0$0$0$""
"GenericConversionService.java:346"$0$0$0$5$52$"		private final Converter<Object, Object> converter;"
"GenericConversionService.java:347"$0$0$0$0$0$""
"GenericConversionService.java:348"$0$0$0$4$41$"		private final ConvertiblePair typeInfo;"
"GenericConversionService.java:349"$0$0$0$0$0$""
"GenericConversionService.java:350"$1$0$0$4$42$"		private final ResolvableType targetType;"
"GenericConversionService.java:351"$0$0$0$0$0$""
"GenericConversionService.java:352"$1$0$0$9$108$"		public ConverterAdapter(Converter<?, ?> converter, ResolvableType sourceType, ResolvableType targetType) {"
"GenericConversionService.java:353"$0$0$0$5$58$"			this.converter = (Converter<Object, Object>) converter;"
"GenericConversionService.java:354"$1$0$0$5$83$"			this.typeInfo = new ConvertiblePair(sourceType.toClass(), targetType.toClass());"
"GenericConversionService.java:355"$2$0$0$3$32$"			this.targetType = targetType;"
"GenericConversionService.java:356"$0$0$0$1$3$"		}"
"GenericConversionService.java:357"$0$0$0$0$0$""
"GenericConversionService.java:358"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:359"$1$0$0$4$53$"		public Set<ConvertiblePair> getConvertibleTypes() {"
"GenericConversionService.java:360"$0$0$0$2$47$"			return Collections.singleton(this.typeInfo);"
"GenericConversionService.java:361"$0$0$0$1$3$"		}"
"GenericConversionService.java:362"$0$0$0$0$0$""
"GenericConversionService.java:363"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:364"$1$0$0$7$80$"		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:365"$0$0$1$5$29$"			// Check raw type first..."
"GenericConversionService.java:366"$4$0$0$5$69$"			if (this.typeInfo.getTargetType() != targetType.getObjectType()) {"
"GenericConversionService.java:367"$0$0$0$2$17$"				return false;"
"GenericConversionService.java:368"$0$0$0$1$4$"			}"
"GenericConversionService.java:369"$0$0$1$9$57$"			// Full check for complex generic type match required?"
"GenericConversionService.java:370"$2$0$0$4$54$"			ResolvableType rt = targetType.getResolvableType();"
"GenericConversionService.java:371"$2$0$0$7$83$"			if (!(rt.getType() instanceof Class) && !rt.isAssignableFrom(this.targetType) &&"
"GenericConversionService.java:372"$1$0$0$2$50$"					!this.targetType.hasUnresolvableGenerics()) {"
"GenericConversionService.java:373"$0$0$0$2$17$"				return false;"
"GenericConversionService.java:374"$0$0$0$1$4$"			}"
"GenericConversionService.java:375"$0$0$0$5$62$"			return !(this.converter instanceof ConditionalConverter) ||"
"GenericConversionService.java:376"$1$0$0$3$77$"					((ConditionalConverter) this.converter).matches(sourceType, targetType);"
"GenericConversionService.java:377"$0$0$0$1$3$"		}"
"GenericConversionService.java:378"$0$0$0$0$0$""
"GenericConversionService.java:379"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:380"$0$0$0$1$11$"		@Nullable"
"GenericConversionService.java:381"$1$0$0$10$104$"		public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:382"$0$0$0$5$24$"			if (source == null) {"
"GenericConversionService.java:383"$1$0$0$3$53$"				return convertNullSource(sourceType, targetType);"
"GenericConversionService.java:384"$0$0$0$1$4$"			}"
"GenericConversionService.java:385"$0$0$0$2$41$"			return this.converter.convert(source);"
"GenericConversionService.java:386"$0$0$0$1$3$"		}"
"GenericConversionService.java:387"$0$0$0$0$0$""
"GenericConversionService.java:388"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:389"$0$0$0$4$28$"		public String toString() {"
"GenericConversionService.java:390"$0$0$0$8$51$"			return (this.typeInfo + "" : "" + this.converter);"
"GenericConversionService.java:391"$0$0$0$1$3$"		}"
"GenericConversionService.java:392"$0$0$0$1$2$"	}"
"GenericConversionService.java:393"$0$0$0$0$0$""
"GenericConversionService.java:394"$0$0$0$0$0$""
"GenericConversionService.java:395"$0$0$0$1$4$"	/**"
"GenericConversionService.java:396"$0$0$0$9$68$"	 * Adapts a {@link ConverterFactory} to a {@link GenericConverter}."
"GenericConversionService.java:397"$0$0$0$1$4$"	 */"
"GenericConversionService.java:398"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"GenericConversionService.java:399"$0$0$0$7$85$"	private final class ConverterFactoryAdapter implements ConditionalGenericConverter {"
"GenericConversionService.java:400"$0$0$0$0$0$""
"GenericConversionService.java:401"$0$0$0$5$66$"		private final ConverterFactory<Object, Object> converterFactory;"
"GenericConversionService.java:402"$0$0$0$0$0$""
"GenericConversionService.java:403"$0$0$0$4$41$"		private final ConvertiblePair typeInfo;"
"GenericConversionService.java:404"$0$0$0$0$0$""
"GenericConversionService.java:405"$0$0$0$7$101$"		public ConverterFactoryAdapter(ConverterFactory<?, ?> converterFactory, ConvertiblePair typeInfo) {"
"GenericConversionService.java:406"$0$0$0$5$79$"			this.converterFactory = (ConverterFactory<Object, Object>) converterFactory;"
"GenericConversionService.java:407"$0$0$0$3$28$"			this.typeInfo = typeInfo;"
"GenericConversionService.java:408"$0$0$0$1$3$"		}"
"GenericConversionService.java:409"$0$0$0$0$0$""
"GenericConversionService.java:410"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:411"$1$0$0$4$53$"		public Set<ConvertiblePair> getConvertibleTypes() {"
"GenericConversionService.java:412"$0$0$0$2$47$"			return Collections.singleton(this.typeInfo);"
"GenericConversionService.java:413"$0$0$0$1$3$"		}"
"GenericConversionService.java:414"$0$0$0$0$0$""
"GenericConversionService.java:415"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:416"$1$0$0$7$80$"		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:417"$0$0$0$4$26$"			boolean matches = true;"
"GenericConversionService.java:418"$0$0$0$5$63$"			if (this.converterFactory instanceof ConditionalConverter) {"
"GenericConversionService.java:419"$1$0$0$5$93$"				matches = ((ConditionalConverter) this.converterFactory).matches(sourceType, targetType);"
"GenericConversionService.java:420"$0$0$0$1$4$"			}"
"GenericConversionService.java:421"$0$0$0$3$17$"			if (matches) {"
"GenericConversionService.java:422"$3$0$0$5$89$"				Converter<?, ?> converter = this.converterFactory.getConverter(targetType.getType());"
"GenericConversionService.java:423"$0$0$0$5$52$"				if (converter instanceof ConditionalConverter) {"
"GenericConversionService.java:424"$1$0$0$5$82$"					matches = ((ConditionalConverter) converter).matches(sourceType, targetType);"
"GenericConversionService.java:425"$0$0$0$1$5$"				}"
"GenericConversionService.java:426"$0$0$0$1$4$"			}"
"GenericConversionService.java:427"$0$0$0$2$18$"			return matches;"
"GenericConversionService.java:428"$0$0$0$1$3$"		}"
"GenericConversionService.java:429"$0$0$0$0$0$""
"GenericConversionService.java:430"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:431"$0$0$0$1$11$"		@Nullable"
"GenericConversionService.java:432"$1$0$0$10$104$"		public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:433"$0$0$0$5$24$"			if (source == null) {"
"GenericConversionService.java:434"$1$0$0$3$53$"				return convertNullSource(sourceType, targetType);"
"GenericConversionService.java:435"$0$0$0$1$4$"			}"
"GenericConversionService.java:436"$3$0$0$2$89$"			return this.converterFactory.getConverter(targetType.getObjectType()).convert(source);"
"GenericConversionService.java:437"$0$0$0$1$3$"		}"
"GenericConversionService.java:438"$0$0$0$0$0$""
"GenericConversionService.java:439"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:440"$0$0$0$4$28$"		public String toString() {"
"GenericConversionService.java:441"$0$0$0$8$58$"			return (this.typeInfo + "" : "" + this.converterFactory);"
"GenericConversionService.java:442"$0$0$0$1$3$"		}"
"GenericConversionService.java:443"$0$0$0$1$2$"	}"
"GenericConversionService.java:444"$0$0$0$0$0$""
"GenericConversionService.java:445"$0$0$0$0$0$""
"GenericConversionService.java:446"$0$0$0$1$4$"	/**"
"GenericConversionService.java:447"$0$0$0$8$41$"	 * Key for use with the converter cache."
"GenericConversionService.java:448"$0$0$0$1$4$"	 */"
"GenericConversionService.java:449"$0$0$0$8$88$"	private static final class ConverterCacheKey implements Comparable<ConverterCacheKey> {"
"GenericConversionService.java:450"$0$0$0$0$0$""
"GenericConversionService.java:451"$0$0$0$4$42$"		private final TypeDescriptor sourceType;"
"GenericConversionService.java:452"$0$0$0$0$0$""
"GenericConversionService.java:453"$1$0$0$4$42$"		private final TypeDescriptor targetType;"
"GenericConversionService.java:454"$0$0$0$0$0$""
"GenericConversionService.java:455"$1$0$0$6$82$"		public ConverterCacheKey(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:456"$0$0$0$3$32$"			this.sourceType = sourceType;"
"GenericConversionService.java:457"$2$0$0$3$32$"			this.targetType = targetType;"
"GenericConversionService.java:458"$0$0$0$1$3$"		}"
"GenericConversionService.java:459"$0$0$0$0$0$""
"GenericConversionService.java:460"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:461"$0$0$0$6$49$"		public boolean equals(@Nullable Object other) {"
"GenericConversionService.java:462"$0$0$0$5$23$"			if (this == other) {"
"GenericConversionService.java:463"$0$0$0$2$16$"				return true;"
"GenericConversionService.java:464"$0$0$0$1$4$"			}"
"GenericConversionService.java:465"$0$0$0$5$47$"			if (!(other instanceof ConverterCacheKey)) {"
"GenericConversionService.java:466"$0$0$0$2$17$"				return false;"
"GenericConversionService.java:467"$0$0$0$1$4$"			}"
"GenericConversionService.java:468"$0$0$0$5$58$"			ConverterCacheKey otherKey = (ConverterCacheKey) other;"
"GenericConversionService.java:469"$0$0$0$3$58$"			return (this.sourceType.equals(otherKey.sourceType)) &&"
"GenericConversionService.java:470"$2$0$0$1$49$"					this.targetType.equals(otherKey.targetType);"
"GenericConversionService.java:471"$0$0$0$1$3$"		}"
"GenericConversionService.java:472"$0$0$0$0$0$""
"GenericConversionService.java:473"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:474"$0$0$0$4$25$"		public int hashCode() {"
"GenericConversionService.java:475"$1$0$0$6$73$"			return (this.sourceType.hashCode() * 29 + this.targetType.hashCode());"
"GenericConversionService.java:476"$0$0$0$1$3$"		}"
"GenericConversionService.java:477"$0$0$0$0$0$""
"GenericConversionService.java:478"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:479"$0$0$0$4$28$"		public String toString() {"
"GenericConversionService.java:480"$0$0$0$8$65$"			return (""ConverterCacheKey [sourceType = "" + this.sourceType +"
"GenericConversionService.java:481"$2$0$0$8$48$"					"", targetType = "" + this.targetType + ""]"");"
"GenericConversionService.java:482"$0$0$0$1$3$"		}"
"GenericConversionService.java:483"$0$0$0$0$0$""
"GenericConversionService.java:484"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:485"$0$0$0$5$49$"		public int compareTo(ConverterCacheKey other) {"
"GenericConversionService.java:486"$1$0$0$4$73$"			int result = this.sourceType.getResolvableType().toString().compareTo("
"GenericConversionService.java:487"$1$0$0$1$54$"					other.sourceType.getResolvableType().toString());"
"GenericConversionService.java:488"$0$0$0$5$21$"			if (result == 0) {"
"GenericConversionService.java:489"$2$0$0$3$70$"				result = this.targetType.getResolvableType().toString().compareTo("
"GenericConversionService.java:490"$2$0$0$1$55$"						other.targetType.getResolvableType().toString());"
"GenericConversionService.java:491"$0$0$0$1$4$"			}"
"GenericConversionService.java:492"$0$0$0$2$17$"			return result;"
"GenericConversionService.java:493"$0$0$0$1$3$"		}"
"GenericConversionService.java:494"$0$0$0$1$2$"	}"
"GenericConversionService.java:495"$0$0$0$0$0$""
"GenericConversionService.java:496"$0$0$0$0$0$""
"GenericConversionService.java:497"$0$0$0$1$4$"	/**"
"GenericConversionService.java:498"$0$0$0$8$55$"	 * Manages all converters registered with the service."
"GenericConversionService.java:499"$0$0$0$1$4$"	 */"
"GenericConversionService.java:500"$0$0$0$5$34$"	private static class Converters {"
"GenericConversionService.java:501"$0$0$0$0$0$""
"GenericConversionService.java:502"$0$0$0$7$79$"		private final Set<GenericConverter> globalConverters = new LinkedHashSet<>();"
"GenericConversionService.java:503"$0$0$0$0$0$""
"GenericConversionService.java:504"$0$0$0$8$93$"		private final Map<ConvertiblePair, ConvertersForPair> converters = new LinkedHashMap<>(36);"
"GenericConversionService.java:505"$0$0$0$0$0$""
"GenericConversionService.java:506"$0$0$0$5$47$"		public void add(GenericConverter converter) {"
"GenericConversionService.java:507"$1$0$0$4$75$"			Set<ConvertiblePair> convertibleTypes = converter.getConvertibleTypes();"
"GenericConversionService.java:508"$0$0$0$5$34$"			if (convertibleTypes == null) {"
"GenericConversionService.java:509"$0$0$0$3$59$"				Assert.state(converter instanceof ConditionalConverter,"
"GenericConversionService.java:510"$0$0$0$8$71$"						""Only conditional converters may return null convertible types"");"
"GenericConversionService.java:511"$0$0$0$1$41$"				this.globalConverters.add(converter);"
"GenericConversionService.java:512"$0$0$0$1$4$"			}"
"GenericConversionService.java:513"$0$0$0$2$9$"			else {"
"GenericConversionService.java:514"$0$0$0$6$62$"				for (ConvertiblePair convertiblePair : convertibleTypes) {"
"GenericConversionService.java:515"$1$0$0$4$83$"					ConvertersForPair convertersForPair = getMatchableConverters(convertiblePair);"
"GenericConversionService.java:516"$0$0$0$1$38$"					convertersForPair.add(converter);"
"GenericConversionService.java:517"$0$0$0$1$5$"				}"
"GenericConversionService.java:518"$0$0$0$1$4$"			}"
"GenericConversionService.java:519"$0$0$0$1$3$"		}"
"GenericConversionService.java:520"$0$0$0$0$0$""
"GenericConversionService.java:521"$1$0$0$5$85$"		private ConvertersForPair getMatchableConverters(ConvertiblePair convertiblePair) {"
"GenericConversionService.java:522"$0$0$0$6$89$"			return this.converters.computeIfAbsent(convertiblePair, k -> new ConvertersForPair());"
"GenericConversionService.java:523"$0$0$0$1$3$"		}"
"GenericConversionService.java:524"$0$0$0$0$0$""
"GenericConversionService.java:525"$1$0$0$7$64$"		public void remove(Class<?> sourceType, Class<?> targetType) {"
"GenericConversionService.java:526"$1$0$0$3$71$"			this.converters.remove(new ConvertiblePair(sourceType, targetType));"
"GenericConversionService.java:527"$0$0$0$1$3$"		}"
"GenericConversionService.java:528"$0$0$0$0$0$""
"GenericConversionService.java:529"$0$0$0$1$5$"		/**"
"GenericConversionService.java:530"$1$0$0$11$68$"		 * Find a {@link GenericConverter} given a source and target type."
"GenericConversionService.java:531"$0$0$0$12$76$"		 * <p>This method will attempt to match all possible converters by working"
"GenericConversionService.java:532"$0$0$0$10$60$"		 * through the class and interface hierarchy of the types."
"GenericConversionService.java:533"$0$0$0$6$38$"		 * @param sourceType the source type"
"GenericConversionService.java:534"$2$0$0$6$38$"		 * @param targetType the target type"
"GenericConversionService.java:535"$0$0$0$12$79$"		 * @return a matching {@link GenericConverter}, or {@code null} if none found"
"GenericConversionService.java:536"$0$0$0$1$5$"		 */"
"GenericConversionService.java:537"$0$0$0$1$11$"		@Nullable"
"GenericConversionService.java:538"$1$0$0$7$86$"		public GenericConverter find(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:539"$0$0$1$6$36$"			// Search the full type hierarchy"
"GenericConversionService.java:540"$2$0$0$4$77$"			List<Class<?>> sourceCandidates = getClassHierarchy(sourceType.getType());"
"GenericConversionService.java:541"$4$0$0$4$77$"			List<Class<?>> targetCandidates = getClassHierarchy(targetType.getType());"
"GenericConversionService.java:542"$0$0$0$6$54$"			for (Class<?> sourceCandidate : sourceCandidates) {"
"GenericConversionService.java:543"$2$0$0$6$55$"				for (Class<?> targetCandidate : targetCandidates) {"
"GenericConversionService.java:544"$1$0$0$6$93$"					ConvertiblePair convertiblePair = new ConvertiblePair(sourceCandidate, targetCandidate);"
"GenericConversionService.java:545"$2$0$0$6$98$"					GenericConverter converter = getRegisteredConverter(sourceType, targetType, convertiblePair);"
"GenericConversionService.java:546"$0$0$0$5$29$"					if (converter != null) {"
"GenericConversionService.java:547"$0$0$0$2$23$"						return converter;"
"GenericConversionService.java:548"$0$0$0$1$6$"					}"
"GenericConversionService.java:549"$0$0$0$1$5$"				}"
"GenericConversionService.java:550"$0$0$0$1$4$"			}"
"GenericConversionService.java:551"$0$0$0$2$15$"			return null;"
"GenericConversionService.java:552"$0$0$0$1$3$"		}"
"GenericConversionService.java:553"$0$0$0$0$0$""
"GenericConversionService.java:554"$0$0$0$1$11$"		@Nullable"
"GenericConversionService.java:555"$1$0$0$4$76$"		private GenericConverter getRegisteredConverter(TypeDescriptor sourceType,"
"GenericConversionService.java:556"$1$0$0$5$65$"				TypeDescriptor targetType, ConvertiblePair convertiblePair) {"
"GenericConversionService.java:557"$0$0$0$0$0$""
"GenericConversionService.java:558"$0$0$1$5$46$"			// Check specifically registered converters"
"GenericConversionService.java:559"$1$0$0$4$78$"			ConvertersForPair convertersForPair = this.converters.get(convertiblePair);"
"GenericConversionService.java:560"$0$0$0$5$35$"			if (convertersForPair != null) {"
"GenericConversionService.java:561"$2$0$0$5$88$"				GenericConverter converter = convertersForPair.getConverter(sourceType, targetType);"
"GenericConversionService.java:562"$0$0$0$5$28$"				if (converter != null) {"
"GenericConversionService.java:563"$0$0$0$2$22$"					return converter;"
"GenericConversionService.java:564"$0$0$0$1$5$"				}"
"GenericConversionService.java:565"$0$0$0$1$4$"			}"
"GenericConversionService.java:566"$0$0$1$7$53$"			// Check ConditionalConverters for a dynamic match"
"GenericConversionService.java:567"$0$0$0$6$67$"			for (GenericConverter globalConverter : this.globalConverters) {"
"GenericConversionService.java:568"$1$0$0$5$83$"				if (((ConditionalConverter) globalConverter).matches(sourceType, targetType)) {"
"GenericConversionService.java:569"$0$0$0$2$28$"					return globalConverter;"
"GenericConversionService.java:570"$0$0$0$1$5$"				}"
"GenericConversionService.java:571"$0$0$0$1$4$"			}"
"GenericConversionService.java:572"$0$0$0$2$15$"			return null;"
"GenericConversionService.java:573"$0$0$0$1$3$"		}"
"GenericConversionService.java:574"$0$0$0$0$0$""
"GenericConversionService.java:575"$0$0$0$1$5$"		/**"
"GenericConversionService.java:576"$0$0$0$10$59$"		 * Returns an ordered class hierarchy for the given type."
"GenericConversionService.java:577"$0$0$0$5$25$"		 * @param type the type"
"GenericConversionService.java:578"$0$0$0$15$85$"		 * @return an ordered list of all classes that the given type extends or implements"
"GenericConversionService.java:579"$0$0$0$1$5$"		 */"
"GenericConversionService.java:580"$1$0$0$5$59$"		private List<Class<?>> getClassHierarchy(Class<?> type) {"
"GenericConversionService.java:581"$0$0$0$5$50$"			List<Class<?>> hierarchy = new ArrayList<>(20);"
"GenericConversionService.java:582"$0$0$0$5$45$"			Set<Class<?>> visited = new HashSet<>(20);"
"GenericConversionService.java:583"$0$0$0$5$99$"			addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited);"
"GenericConversionService.java:584"$0$0$0$4$34$"			boolean array = type.isArray();"
"GenericConversionService.java:585"$0$0$0$0$0$""
"GenericConversionService.java:586"$0$0$0$4$13$"			int i = 0;"
"GenericConversionService.java:587"$0$0$0$5$33$"			while (i < hierarchy.size()) {"
"GenericConversionService.java:588"$1$0$0$4$42$"				Class<?> candidate = hierarchy.get(i);"
"GenericConversionService.java:589"$1$0$0$7$107$"				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate));"
"GenericConversionService.java:590"$1$0$0$4$52$"				Class<?> superclass = candidate.getSuperclass();"
"GenericConversionService.java:591"$0$0$0$13$87$"				if (superclass != null && superclass != Object.class && superclass != Enum.class) {"
"GenericConversionService.java:592"$1$0$0$7$86$"					addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited);"
"GenericConversionService.java:593"$0$0$0$1$5$"				}"
"GenericConversionService.java:594"$0$0$0$4$72$"				addInterfacesToClassHierarchy(candidate, array, hierarchy, visited);"
"GenericConversionService.java:595"$0$0$0$1$8$"				i++;"
"GenericConversionService.java:596"$0$0$0$1$4$"			}"
"GenericConversionService.java:597"$0$0$0$0$0$""
"GenericConversionService.java:598"$0$0$0$3$43$"			if (Enum.class.isAssignableFrom(type)) {"
"GenericConversionService.java:599"$0$0$0$5$81$"				addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited);"
"GenericConversionService.java:600"$0$0$0$5$81$"				addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited);"
"GenericConversionService.java:601"$0$0$0$4$73$"				addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited);"
"GenericConversionService.java:602"$0$0$0$1$4$"			}"
"GenericConversionService.java:603"$0$0$0$0$0$""
"GenericConversionService.java:604"$0$0$0$5$82$"			addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited);"
"GenericConversionService.java:605"$0$0$0$5$82$"			addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited);"
"GenericConversionService.java:606"$0$0$0$2$20$"			return hierarchy;"
"GenericConversionService.java:607"$0$0$0$1$3$"		}"
"GenericConversionService.java:608"$0$0$0$0$0$""
"GenericConversionService.java:609"$0$0$0$6$76$"		private void addInterfacesToClassHierarchy(Class<?> type, boolean asArray,"
"GenericConversionService.java:610"$0$0$0$5$54$"				List<Class<?>> hierarchy, Set<Class<?>> visited) {"
"GenericConversionService.java:611"$0$0$0$0$0$""
"GenericConversionService.java:612"$1$0$0$6$63$"			for (Class<?> implementedInterface : type.getInterfaces()) {"
"GenericConversionService.java:613"$0$0$0$5$93$"				addToClassHierarchy(hierarchy.size(), implementedInterface, asArray, hierarchy, visited);"
"GenericConversionService.java:614"$0$0$0$1$4$"			}"
"GenericConversionService.java:615"$0$0$0$1$3$"		}"
"GenericConversionService.java:616"$0$0$0$0$0$""
"GenericConversionService.java:617"$0$0$0$8$77$"		private void addToClassHierarchy(int index, Class<?> type, boolean asArray,"
"GenericConversionService.java:618"$0$0$0$5$54$"				List<Class<?>> hierarchy, Set<Class<?>> visited) {"
"GenericConversionService.java:619"$0$0$0$0$0$""
"GenericConversionService.java:620"$0$0$0$3$17$"			if (asArray) {"
"GenericConversionService.java:621"$1$0$0$4$49$"				type = Array.newInstance(type, 0).getClass();"
"GenericConversionService.java:622"$0$0$0$1$4$"			}"
"GenericConversionService.java:623"$0$0$0$3$27$"			if (visited.add(type)) {"
"GenericConversionService.java:624"$0$0$0$2$31$"				hierarchy.add(index, type);"
"GenericConversionService.java:625"$0$0$0$1$4$"			}"
"GenericConversionService.java:626"$0$0$0$1$3$"		}"
"GenericConversionService.java:627"$0$0$0$0$0$""
"GenericConversionService.java:628"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:629"$0$0$0$4$28$"		public String toString() {"
"GenericConversionService.java:630"$0$0$0$5$47$"			StringBuilder builder = new StringBuilder();"
"GenericConversionService.java:631"$0$0$0$3$54$"			builder.append(""ConversionService converters =\n"");"
"GenericConversionService.java:632"$1$0$0$6$57$"			for (String converterString : getConverterStrings()) {"
"GenericConversionService.java:633"$0$0$0$1$62$"				builder.append('\t').append(converterString).append('\n');"
"GenericConversionService.java:634"$0$0$0$1$4$"			}"
"GenericConversionService.java:635"$0$0$0$2$29$"			return builder.toString();"
"GenericConversionService.java:636"$0$0$0$1$3$"		}"
"GenericConversionService.java:637"$0$0$0$0$0$""
"GenericConversionService.java:638"$1$0$0$4$46$"		private List<String> getConverterStrings() {"
"GenericConversionService.java:639"$0$0$0$5$53$"			List<String> converterStrings = new ArrayList<>();"
"GenericConversionService.java:640"$0$0$0$6$73$"			for (ConvertersForPair convertersForPair : this.converters.values()) {"
"GenericConversionService.java:641"$0$0$0$1$55$"				converterStrings.add(convertersForPair.toString());"
"GenericConversionService.java:642"$0$0$0$1$4$"			}"
"GenericConversionService.java:643"$0$0$0$1$38$"			Collections.sort(converterStrings);"
"GenericConversionService.java:644"$0$0$0$2$27$"			return converterStrings;"
"GenericConversionService.java:645"$0$0$0$1$3$"		}"
"GenericConversionService.java:646"$0$0$0$1$2$"	}"
"GenericConversionService.java:647"$0$0$0$0$0$""
"GenericConversionService.java:648"$0$0$0$0$0$""
"GenericConversionService.java:649"$0$0$0$1$4$"	/**"
"GenericConversionService.java:650"$0$0$0$9$74$"	 * Manages converters registered with a specific {@link ConvertiblePair}."
"GenericConversionService.java:651"$0$0$0$1$4$"	 */"
"GenericConversionService.java:652"$0$0$0$5$41$"	private static class ConvertersForPair {"
"GenericConversionService.java:653"$0$0$0$0$0$""
"GenericConversionService.java:654"$0$0$0$7$77$"		private final LinkedList<GenericConverter> converters = new LinkedList<>();"
"GenericConversionService.java:655"$0$0$0$0$0$""
"GenericConversionService.java:656"$0$0$0$5$47$"		public void add(GenericConverter converter) {"
"GenericConversionService.java:657"$0$0$0$1$39$"			this.converters.addFirst(converter);"
"GenericConversionService.java:658"$0$0$0$1$3$"		}"
"GenericConversionService.java:659"$0$0$0$0$0$""
"GenericConversionService.java:660"$0$0$0$1$11$"		@Nullable"
"GenericConversionService.java:661"$2$0$0$7$94$"		public GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:662"$0$0$0$6$55$"			for (GenericConverter converter : this.converters) {"
"GenericConversionService.java:663"$0$0$0$5$62$"				if (!(converter instanceof ConditionalGenericConverter) ||"
"GenericConversionService.java:664"$1$0$0$4$82$"						((ConditionalGenericConverter) converter).matches(sourceType, targetType)) {"
"GenericConversionService.java:665"$0$0$0$2$22$"					return converter;"
"GenericConversionService.java:666"$0$0$0$1$5$"				}"
"GenericConversionService.java:667"$0$0$0$1$4$"			}"
"GenericConversionService.java:668"$0$0$0$2$15$"			return null;"
"GenericConversionService.java:669"$0$0$0$1$3$"		}"
"GenericConversionService.java:670"$0$0$0$0$0$""
"GenericConversionService.java:671"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:672"$0$0$0$4$28$"		public String toString() {"
"GenericConversionService.java:673"$0$0$0$2$72$"			return StringUtils.collectionToCommaDelimitedString(this.converters);"
"GenericConversionService.java:674"$0$0$0$1$3$"		}"
"GenericConversionService.java:675"$0$0$0$1$2$"	}"
"GenericConversionService.java:676"$0$0$0$0$0$""
"GenericConversionService.java:677"$0$0$0$0$0$""
"GenericConversionService.java:678"$0$0$0$1$4$"	/**"
"GenericConversionService.java:679"$0$0$0$7$50$"	 * Internal converter that performs no operation."
"GenericConversionService.java:680"$0$0$0$1$4$"	 */"
"GenericConversionService.java:681"$0$0$0$7$65$"	private static class NoOpConverter implements GenericConverter {"
"GenericConversionService.java:682"$0$0$0$0$0$""
"GenericConversionService.java:683"$0$0$0$4$28$"		private final String name;"
"GenericConversionService.java:684"$0$0$0$0$0$""
"GenericConversionService.java:685"$0$0$0$4$37$"		public NoOpConverter(String name) {"
"GenericConversionService.java:686"$0$0$0$3$20$"			this.name = name;"
"GenericConversionService.java:687"$0$0$0$1$3$"		}"
"GenericConversionService.java:688"$0$0$0$0$0$""
"GenericConversionService.java:689"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:690"$1$0$0$4$53$"		public Set<ConvertiblePair> getConvertibleTypes() {"
"GenericConversionService.java:691"$0$0$0$2$15$"			return null;"
"GenericConversionService.java:692"$0$0$0$1$3$"		}"
"GenericConversionService.java:693"$0$0$0$0$0$""
"GenericConversionService.java:694"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:695"$0$0$0$1$11$"		@Nullable"
"GenericConversionService.java:696"$1$0$0$10$104$"		public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {"
"GenericConversionService.java:697"$0$0$0$2$17$"			return source;"
"GenericConversionService.java:698"$0$0$0$1$3$"		}"
"GenericConversionService.java:699"$0$0$0$0$0$""
"GenericConversionService.java:700"$0$0$0$1$11$"		@Override"
"GenericConversionService.java:701"$0$0$0$4$28$"		public String toString() {"
"GenericConversionService.java:702"$0$0$0$2$20$"			return this.name;"
"GenericConversionService.java:703"$0$0$0$1$3$"		}"
"GenericConversionService.java:704"$0$0$0$1$2$"	}"
"GenericConversionService.java:705"$0$0$0$0$0$""
"GenericConversionService.java:706"$0$0$0$1$1$"}"
"NumberUtils.java:1"$0$0$0$1$2$"/*"
"NumberUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"NumberUtils.java:3"$0$0$0$1$2$" *"
"NumberUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"NumberUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"NumberUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"NumberUtils.java:7"$0$0$0$1$2$" *"
"NumberUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"NumberUtils.java:9"$0$0$0$1$2$" *"
"NumberUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"NumberUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"NumberUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"NumberUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"NumberUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"NumberUtils.java:15"$0$0$0$1$3$" */"
"NumberUtils.java:16"$0$0$0$0$0$""
"NumberUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"NumberUtils.java:18"$0$0$0$0$0$""
"NumberUtils.java:19"$0$0$0$2$28$"import java.math.BigDecimal;"
"NumberUtils.java:20"$0$0$0$2$28$"import java.math.BigInteger;"
"NumberUtils.java:21"$0$0$0$2$31$"import java.text.DecimalFormat;"
"NumberUtils.java:22"$0$0$0$2$30$"import java.text.NumberFormat;"
"NumberUtils.java:23"$0$0$0$2$32$"import java.text.ParseException;"
"NumberUtils.java:24"$0$0$0$2$29$"import java.util.Collections;"
"NumberUtils.java:25"$0$0$0$2$25$"import java.util.HashSet;"
"NumberUtils.java:26"$0$0$0$2$21$"import java.util.Set;"
"NumberUtils.java:27"$0$0$0$0$0$""
"NumberUtils.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"NumberUtils.java:29"$0$0$0$0$0$""
"NumberUtils.java:30"$0$0$0$1$3$"/**"
"NumberUtils.java:31"$0$0$0$9$67$" * Miscellaneous utility methods for number conversion and parsing."
"NumberUtils.java:32"$0$0$0$10$69$" * <p>Mainly for internal use within the framework; consider Apache's"
"NumberUtils.java:33"$0$0$0$11$67$" * Commons Lang for a more comprehensive suite of number utilities."
"NumberUtils.java:34"$0$0$0$1$2$" *"
"NumberUtils.java:35"$0$0$0$4$26$" * @author Juergen Hoeller"
"NumberUtils.java:36"$0$0$0$4$21$" * @author Rob Harrop"
"NumberUtils.java:37"$0$0$0$3$15$" * @since 1.1.2"
"NumberUtils.java:38"$0$0$0$1$3$" */"
"NumberUtils.java:39"$0$0$0$5$35$"public abstract class NumberUtils {"
"NumberUtils.java:40"$0$0$0$0$0$""
"NumberUtils.java:41"$0$0$0$7$79$"	private static final BigInteger LONG_MIN = BigInteger.valueOf(Long.MIN_VALUE);"
"NumberUtils.java:42"$0$0$0$0$0$""
"NumberUtils.java:43"$0$0$0$7$79$"	private static final BigInteger LONG_MAX = BigInteger.valueOf(Long.MAX_VALUE);"
"NumberUtils.java:44"$0$0$0$0$0$""
"NumberUtils.java:45"$0$0$0$1$4$"	/**"
"NumberUtils.java:46"$0$0$0$6$42$"	 * Standard number types (all immutable):"
"NumberUtils.java:47"$0$0$0$9$70$"	 * Byte, Short, Integer, Long, BigInteger, Float, Double, BigDecimal."
"NumberUtils.java:48"$0$0$0$1$4$"	 */"
"NumberUtils.java:49"$0$0$0$5$57$"	public static final Set<Class<?>> STANDARD_NUMBER_TYPES;"
"NumberUtils.java:50"$0$0$0$0$0$""
"NumberUtils.java:51"$0$0$0$2$9$"	static {"
"NumberUtils.java:52"$0$0$0$5$47$"		Set<Class<?>> numberTypes = new HashSet<>(8);"
"NumberUtils.java:53"$0$0$0$1$30$"		numberTypes.add(Byte.class);"
"NumberUtils.java:54"$0$0$0$1$31$"		numberTypes.add(Short.class);"
"NumberUtils.java:55"$0$0$0$1$33$"		numberTypes.add(Integer.class);"
"NumberUtils.java:56"$0$0$0$1$30$"		numberTypes.add(Long.class);"
"NumberUtils.java:57"$0$0$0$1$36$"		numberTypes.add(BigInteger.class);"
"NumberUtils.java:58"$0$0$0$1$31$"		numberTypes.add(Float.class);"
"NumberUtils.java:59"$0$0$0$1$32$"		numberTypes.add(Double.class);"
"NumberUtils.java:60"$0$0$0$1$36$"		numberTypes.add(BigDecimal.class);"
"NumberUtils.java:61"$0$0$0$3$67$"		STANDARD_NUMBER_TYPES = Collections.unmodifiableSet(numberTypes);"
"NumberUtils.java:62"$0$0$0$1$2$"	}"
"NumberUtils.java:63"$0$0$0$0$0$""
"NumberUtils.java:64"$0$0$0$0$0$""
"NumberUtils.java:65"$0$0$0$1$4$"	/**"
"NumberUtils.java:66"$1$0$0$13$72$"	 * Convert the given number into an instance of the given target class."
"NumberUtils.java:67"$0$0$0$7$39$"	 * @param number the number to convert"
"NumberUtils.java:68"$2$0$0$9$53$"	 * @param targetClass the target class to convert to"
"NumberUtils.java:69"$0$0$0$5$32$"	 * @return the converted number"
"NumberUtils.java:70"$1$0$0$10$73$"	 * @throws IllegalArgumentException if the target class is not supported"
"NumberUtils.java:71"$0$0$0$12$64$"	 * (i.e. not a standard Number subclass as included in the JDK)"
"NumberUtils.java:72"$0$0$0$3$23$"	 * @see java.lang.Byte"
"NumberUtils.java:73"$0$0$0$3$24$"	 * @see java.lang.Short"
"NumberUtils.java:74"$0$0$0$3$26$"	 * @see java.lang.Integer"
"NumberUtils.java:75"$0$0$0$3$23$"	 * @see java.lang.Long"
"NumberUtils.java:76"$0$0$0$3$29$"	 * @see java.math.BigInteger"
"NumberUtils.java:77"$0$0$0$3$24$"	 * @see java.lang.Float"
"NumberUtils.java:78"$0$0$0$3$25$"	 * @see java.lang.Double"
"NumberUtils.java:79"$0$0$0$3$29$"	 * @see java.math.BigDecimal"
"NumberUtils.java:80"$0$0$0$1$4$"	 */"
"NumberUtils.java:81"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"NumberUtils.java:82"$2$0$0$10$99$"	public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass)"
"NumberUtils.java:83"$0$0$0$3$36$"			throws IllegalArgumentException {"
"NumberUtils.java:84"$0$0$0$0$0$""
"NumberUtils.java:85"$0$0$0$6$52$"		Assert.notNull(number, ""Number must not be null"");"
"NumberUtils.java:86"$2$0$0$7$63$"		Assert.notNull(targetClass, ""Target class must not be null"");"
"NumberUtils.java:87"$0$0$0$0$0$""
"NumberUtils.java:88"$1$0$0$3$39$"		if (targetClass.isInstance(number)) {"
"NumberUtils.java:89"$0$0$0$3$21$"			return (T) number;"
"NumberUtils.java:90"$0$0$0$1$3$"		}"
"NumberUtils.java:91"$1$0$0$6$39$"		else if (Byte.class == targetClass) {"
"NumberUtils.java:92"$1$0$0$5$54$"			long value = checkedLongValue(number, targetClass);"
"NumberUtils.java:93"$0$0$0$9$58$"			if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {"
"NumberUtils.java:94"$1$0$0$2$48$"				raiseOverflowException(number, targetClass);"
"NumberUtils.java:95"$0$0$0$1$4$"			}"
"NumberUtils.java:96"$0$0$0$3$47$"			return (T) Byte.valueOf(number.byteValue());"
"NumberUtils.java:97"$0$0$0$1$3$"		}"
"NumberUtils.java:98"$1$0$0$6$40$"		else if (Short.class == targetClass) {"
"NumberUtils.java:99"$1$0$0$5$54$"			long value = checkedLongValue(number, targetClass);"
"NumberUtils.java:100"$0$0$0$9$60$"			if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {"
"NumberUtils.java:101"$1$0$0$2$48$"				raiseOverflowException(number, targetClass);"
"NumberUtils.java:102"$0$0$0$1$4$"			}"
"NumberUtils.java:103"$0$0$0$3$49$"			return (T) Short.valueOf(number.shortValue());"
"NumberUtils.java:104"$0$0$0$1$3$"		}"
"NumberUtils.java:105"$1$0$0$6$42$"		else if (Integer.class == targetClass) {"
"NumberUtils.java:106"$1$0$0$5$54$"			long value = checkedLongValue(number, targetClass);"
"NumberUtils.java:107"$0$0$0$9$64$"			if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {"
"NumberUtils.java:108"$1$0$0$2$48$"				raiseOverflowException(number, targetClass);"
"NumberUtils.java:109"$0$0$0$1$4$"			}"
"NumberUtils.java:110"$0$0$0$3$49$"			return (T) Integer.valueOf(number.intValue());"
"NumberUtils.java:111"$0$0$0$1$3$"		}"
"NumberUtils.java:112"$1$0$0$6$39$"		else if (Long.class == targetClass) {"
"NumberUtils.java:113"$1$0$0$5$54$"			long value = checkedLongValue(number, targetClass);"
"NumberUtils.java:114"$0$0$0$3$34$"			return (T) Long.valueOf(value);"
"NumberUtils.java:115"$0$0$0$1$3$"		}"
"NumberUtils.java:116"$1$0$0$6$45$"		else if (BigInteger.class == targetClass) {"
"NumberUtils.java:117"$0$0$0$5$38$"			if (number instanceof BigDecimal) {"
"NumberUtils.java:118"$0$0$1$10$62$"				// do not lose precision - use BigDecimal's own conversion"
"NumberUtils.java:119"$0$0$0$4$52$"				return (T) ((BigDecimal) number).toBigInteger();"
"NumberUtils.java:120"$0$0$0$1$4$"			}"
"NumberUtils.java:121"$0$0$0$2$9$"			else {"
"NumberUtils.java:122"$0$0$1$13$73$"				// original value is not a Big* number - use standard long conversion"
"NumberUtils.java:123"$0$0$0$3$54$"				return (T) BigInteger.valueOf(number.longValue());"
"NumberUtils.java:124"$0$0$0$1$4$"			}"
"NumberUtils.java:125"$0$0$0$1$3$"		}"
"NumberUtils.java:126"$1$0$0$6$40$"		else if (Float.class == targetClass) {"
"NumberUtils.java:127"$0$0$0$3$49$"			return (T) Float.valueOf(number.floatValue());"
"NumberUtils.java:128"$0$0$0$1$3$"		}"
"NumberUtils.java:129"$1$0$0$6$41$"		else if (Double.class == targetClass) {"
"NumberUtils.java:130"$0$0$0$3$51$"			return (T) Double.valueOf(number.doubleValue());"
"NumberUtils.java:131"$0$0$0$1$3$"		}"
"NumberUtils.java:132"$1$0$0$6$45$"		else if (BigDecimal.class == targetClass) {"
"NumberUtils.java:133"$0$0$1$10$88$"			// always use BigDecimal(String) here to avoid unpredictability of BigDecimal(double)"
"NumberUtils.java:134"$0$0$1$6$42$"			// (see BigDecimal javadoc for details)"
"NumberUtils.java:135"$0$0$0$4$48$"			return (T) new BigDecimal(number.toString());"
"NumberUtils.java:136"$0$0$0$1$3$"		}"
"NumberUtils.java:137"$0$0$0$2$8$"		else {"
"NumberUtils.java:138"$0$0$0$15$93$"			throw new IllegalArgumentException(""Could not convert number ["" + number + ""] of type ["" +"
"NumberUtils.java:139"$5$0$0$12$100$"					number.getClass().getName() + ""] to unsupported target class ["" + targetClass.getName() + ""]"");"
"NumberUtils.java:140"$0$0$0$1$3$"		}"
"NumberUtils.java:141"$0$0$0$1$2$"	}"
"NumberUtils.java:142"$0$0$0$0$0$""
"NumberUtils.java:143"$0$0$0$1$4$"	/**"
"NumberUtils.java:144"$0$0$0$9$67$"	 * Check for a {@code BigInteger}/{@code BigDecimal} long overflow"
"NumberUtils.java:145"$0$0$0$10$54$"	 * before returning the given number as a long value."
"NumberUtils.java:146"$0$0$0$7$39$"	 * @param number the number to convert"
"NumberUtils.java:147"$2$0$0$9$53$"	 * @param targetClass the target class to convert to"
"NumberUtils.java:148"$0$0$0$9$59$"	 * @return the long value, if convertible without overflow"
"NumberUtils.java:149"$0$0$0$8$60$"	 * @throws IllegalArgumentException if there is an overflow"
"NumberUtils.java:150"$0$0$0$3$32$"	 * @see #raiseOverflowException"
"NumberUtils.java:151"$0$0$0$1$4$"	 */"
"NumberUtils.java:152"$1$0$0$10$91$"	private static long checkedLongValue(Number number, Class<? extends Number> targetClass) {"
"NumberUtils.java:153"$0$0$0$4$27$"		BigInteger bigInt = null;"
"NumberUtils.java:154"$0$0$0$5$37$"		if (number instanceof BigInteger) {"
"NumberUtils.java:155"$0$0$0$4$32$"			bigInt = (BigInteger) number;"
"NumberUtils.java:156"$0$0$0$1$3$"		}"
"NumberUtils.java:157"$0$0$0$6$42$"		else if (number instanceof BigDecimal) {"
"NumberUtils.java:158"$0$0$0$4$49$"			bigInt = ((BigDecimal) number).toBigInteger();"
"NumberUtils.java:159"$0$0$0$1$3$"		}"
"NumberUtils.java:160"$0$0$1$7$65$"		// Effectively analogous to JDK 8's BigInteger.longValueExact()"
"NumberUtils.java:161"$0$0$0$13$93$"		if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {"
"NumberUtils.java:162"$1$0$0$2$47$"			raiseOverflowException(number, targetClass);"
"NumberUtils.java:163"$0$0$0$1$3$"		}"
"NumberUtils.java:164"$0$0$0$2$28$"		return number.longValue();"
"NumberUtils.java:165"$0$0$0$1$2$"	}"
"NumberUtils.java:166"$0$0$0$0$0$""
"NumberUtils.java:167"$0$0$0$1$4$"	/**"
"NumberUtils.java:168"$1$0$0$12$79$"	 * Raise an <em>overflow</em> exception for the given number and target class."
"NumberUtils.java:169"$0$0$0$9$48$"	 * @param number the number we tried to convert"
"NumberUtils.java:170"$2$0$0$11$62$"	 * @param targetClass the target class we tried to convert to"
"NumberUtils.java:171"$0$0$0$8$60$"	 * @throws IllegalArgumentException if there is an overflow"
"NumberUtils.java:172"$0$0$0$1$4$"	 */"
"NumberUtils.java:173"$1$0$0$8$82$"	private static void raiseOverflowException(Number number, Class<?> targetClass) {"
"NumberUtils.java:174"$0$0$0$15$92$"		throw new IllegalArgumentException(""Could not convert number ["" + number + ""] of type ["" +"
"NumberUtils.java:175"$5$0$0$12$97$"				number.getClass().getName() + ""] to target class ["" + targetClass.getName() + ""]: overflow"");"
"NumberUtils.java:176"$0$0$0$1$2$"	}"
"NumberUtils.java:177"$0$0$0$0$0$""
"NumberUtils.java:178"$0$0$0$1$4$"	/**"
"NumberUtils.java:179"$0$0$0$14$76$"	 * Parse the given {@code text} into a {@link Number} instance of the given"
"NumberUtils.java:180"$1$0$0$12$82$"	 * target class, using the corresponding {@code decode} / {@code valueOf} method."
"NumberUtils.java:181"$0$0$0$11$79$"	 * <p>Trims all whitespace (leading, trailing, and in between characters) from"
"NumberUtils.java:182"$0$0$0$11$67$"	 * the input {@code String} before attempting to parse the number."
"NumberUtils.java:183"$0$0$0$14$80$"	 * <p>Supports numbers in hex format (with leading ""0x"", ""0X"", or ""#"") as well."
"NumberUtils.java:184"$0$0$0$7$35$"	 * @param text the text to convert"
"NumberUtils.java:185"$2$0$0$9$53$"	 * @param targetClass the target class to parse into"
"NumberUtils.java:186"$0$0$0$5$29$"	 * @return the parsed number"
"NumberUtils.java:187"$1$0$0$10$73$"	 * @throws IllegalArgumentException if the target class is not supported"
"NumberUtils.java:188"$0$0$0$12$64$"	 * (i.e. not a standard Number subclass as included in the JDK)"
"NumberUtils.java:189"$0$0$0$3$20$"	 * @see Byte#decode"
"NumberUtils.java:190"$0$0$0$3$21$"	 * @see Short#decode"
"NumberUtils.java:191"$0$0$0$3$23$"	 * @see Integer#decode"
"NumberUtils.java:192"$0$0$0$3$20$"	 * @see Long#decode"
"NumberUtils.java:193"$0$0$0$3$34$"	 * @see #decodeBigInteger(String)"
"NumberUtils.java:194"$0$0$0$3$22$"	 * @see Float#valueOf"
"NumberUtils.java:195"$0$0$0$3$23$"	 * @see Double#valueOf"
"NumberUtils.java:196"$0$0$0$3$48$"	 * @see java.math.BigDecimal#BigDecimal(String)"
"NumberUtils.java:197"$0$0$0$1$4$"	 */"
"NumberUtils.java:198"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"NumberUtils.java:199"$1$0$0$11$84$"	public static <T extends Number> T parseNumber(String text, Class<T> targetClass) {"
"NumberUtils.java:200"$0$0$0$6$48$"		Assert.notNull(text, ""Text must not be null"");"
"NumberUtils.java:201"$2$0$0$7$63$"		Assert.notNull(targetClass, ""Target class must not be null"");"
"NumberUtils.java:202"$0$0$0$4$55$"		String trimmed = StringUtils.trimAllWhitespace(text);"
"NumberUtils.java:203"$0$0$0$0$0$""
"NumberUtils.java:204"$1$0$0$5$34$"		if (Byte.class == targetClass) {"
"NumberUtils.java:205"$0$0$0$7$84$"			return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed));"
"NumberUtils.java:206"$0$0$0$1$3$"		}"
"NumberUtils.java:207"$1$0$0$6$40$"		else if (Short.class == targetClass) {"
"NumberUtils.java:208"$0$0$0$7$86$"			return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed));"
"NumberUtils.java:209"$0$0$0$1$3$"		}"
"NumberUtils.java:210"$1$0$0$6$42$"		else if (Integer.class == targetClass) {"
"NumberUtils.java:211"$0$0$0$7$90$"			return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed));"
"NumberUtils.java:212"$0$0$0$1$3$"		}"
"NumberUtils.java:213"$1$0$0$6$39$"		else if (Long.class == targetClass) {"
"NumberUtils.java:214"$0$0$0$7$84$"			return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed));"
"NumberUtils.java:215"$0$0$0$1$3$"		}"
"NumberUtils.java:216"$1$0$0$6$45$"		else if (BigInteger.class == targetClass) {"
"NumberUtils.java:217"$0$0$0$8$91$"			return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed));"
"NumberUtils.java:218"$0$0$0$1$3$"		}"
"NumberUtils.java:219"$1$0$0$6$40$"		else if (Float.class == targetClass) {"
"NumberUtils.java:220"$0$0$0$3$37$"			return (T) Float.valueOf(trimmed);"
"NumberUtils.java:221"$0$0$0$1$3$"		}"
"NumberUtils.java:222"$1$0$0$6$41$"		else if (Double.class == targetClass) {"
"NumberUtils.java:223"$0$0$0$3$38$"			return (T) Double.valueOf(trimmed);"
"NumberUtils.java:224"$0$0$0$1$3$"		}"
"NumberUtils.java:225"$2$0$0$10$76$"		else if (BigDecimal.class == targetClass || Number.class == targetClass) {"
"NumberUtils.java:226"$0$0$0$4$38$"			return (T) new BigDecimal(trimmed);"
"NumberUtils.java:227"$0$0$0$1$3$"		}"
"NumberUtils.java:228"$0$0$0$2$8$"		else {"
"NumberUtils.java:229"$0$0$0$3$38$"			throw new IllegalArgumentException("
"NumberUtils.java:230"$3$0$0$16$93$"					""Cannot convert String ["" + text + ""] to target class ["" + targetClass.getName() + ""]"");"
"NumberUtils.java:231"$0$0$0$1$3$"		}"
"NumberUtils.java:232"$0$0$0$1$2$"	}"
"NumberUtils.java:233"$0$0$0$0$0$""
"NumberUtils.java:234"$0$0$0$1$4$"	/**"
"NumberUtils.java:235"$0$0$0$13$70$"	 * Parse the given {@code text} into a {@link Number} instance of the"
"NumberUtils.java:236"$1$0$0$9$64$"	 * given target class, using the supplied {@link NumberFormat}."
"NumberUtils.java:237"$0$0$0$12$76$"	 * <p>Trims the input {@code String} before attempting to parse the number."
"NumberUtils.java:238"$0$0$0$7$35$"	 * @param text the text to convert"
"NumberUtils.java:239"$2$0$0$9$53$"	 * @param targetClass the target class to parse into"
"NumberUtils.java:240"$0$0$0$11$71$"	 * @param numberFormat the {@code NumberFormat} to use for parsing (if"
"NumberUtils.java:241"$0$0$0$11$80$"	 * {@code null}, this method falls back to {@link #parseNumber(String, Class)})"
"NumberUtils.java:242"$0$0$0$5$29$"	 * @return the parsed number"
"NumberUtils.java:243"$1$0$0$10$73$"	 * @throws IllegalArgumentException if the target class is not supported"
"NumberUtils.java:244"$0$0$0$12$64$"	 * (i.e. not a standard Number subclass as included in the JDK)"
"NumberUtils.java:245"$0$0$0$3$37$"	 * @see java.text.NumberFormat#parse"
"NumberUtils.java:246"$1$0$0$3$36$"	 * @see #convertNumberToTargetClass"
"NumberUtils.java:247"$0$0$0$4$36$"	 * @see #parseNumber(String, Class)"
"NumberUtils.java:248"$0$0$0$1$4$"	 */"
"NumberUtils.java:249"$0$0$0$7$48$"	public static <T extends Number> T parseNumber("
"NumberUtils.java:250"$1$0$0$8$76$"			String text, Class<T> targetClass, @Nullable NumberFormat numberFormat) {"
"NumberUtils.java:251"$0$0$0$0$0$""
"NumberUtils.java:252"$0$0$0$5$29$"		if (numberFormat != null) {"
"NumberUtils.java:253"$0$0$0$6$49$"			Assert.notNull(text, ""Text must not be null"");"
"NumberUtils.java:254"$2$0$0$7$64$"			Assert.notNull(targetClass, ""Target class must not be null"");"
"NumberUtils.java:255"$0$0$0$4$38$"			DecimalFormat decimalFormat = null;"
"NumberUtils.java:256"$0$0$0$4$35$"			boolean resetBigDecimal = false;"
"NumberUtils.java:257"$0$0$0$5$47$"			if (numberFormat instanceof DecimalFormat) {"
"NumberUtils.java:258"$0$0$0$4$49$"				decimalFormat = (DecimalFormat) numberFormat;"
"NumberUtils.java:259"$1$0$0$7$80$"				if (BigDecimal.class == targetClass && !decimalFormat.isParseBigDecimal()) {"
"NumberUtils.java:260"$0$0$0$1$44$"					decimalFormat.setParseBigDecimal(true);"
"NumberUtils.java:261"$0$0$0$3$28$"					resetBigDecimal = true;"
"NumberUtils.java:262"$0$0$0$1$5$"				}"
"NumberUtils.java:263"$0$0$0$1$4$"			}"
"NumberUtils.java:264"$0$0$0$2$8$"			try {"
"NumberUtils.java:265"$0$0$0$4$76$"				Number number = numberFormat.parse(StringUtils.trimAllWhitespace(text));"
"NumberUtils.java:266"$2$0$0$3$59$"				return convertNumberToTargetClass(number, targetClass);"
"NumberUtils.java:267"$0$0$0$1$4$"			}"
"NumberUtils.java:268"$0$0$0$4$30$"			catch (ParseException ex) {"
"NumberUtils.java:269"$1$0$0$9$85$"				throw new IllegalArgumentException(""Could not parse number: "" + ex.getMessage());"
"NumberUtils.java:270"$0$0$0$1$4$"			}"
"NumberUtils.java:271"$0$0$0$2$12$"			finally {"
"NumberUtils.java:272"$0$0$0$3$26$"				if (resetBigDecimal) {"
"NumberUtils.java:273"$0$0$0$1$45$"					decimalFormat.setParseBigDecimal(false);"
"NumberUtils.java:274"$0$0$0$1$5$"				}"
"NumberUtils.java:275"$0$0$0$1$4$"			}"
"NumberUtils.java:276"$0$0$0$1$3$"		}"
"NumberUtils.java:277"$0$0$0$2$8$"		else {"
"NumberUtils.java:278"$1$0$0$3$41$"			return parseNumber(text, targetClass);"
"NumberUtils.java:279"$0$0$0$1$3$"		}"
"NumberUtils.java:280"$0$0$0$1$2$"	}"
"NumberUtils.java:281"$0$0$0$0$0$""
"NumberUtils.java:282"$0$0$0$1$4$"	/**"
"NumberUtils.java:283"$0$0$0$12$76$"	 * Determine whether the given {@code value} String indicates a hex number,"
"NumberUtils.java:284"$0$0$0$11$66$"	 * i.e. needs to be passed into {@code Integer.decode} instead of"
"NumberUtils.java:285"$0$0$0$4$33$"	 * {@code Integer.valueOf}, etc."
"NumberUtils.java:286"$0$0$0$1$4$"	 */"
"NumberUtils.java:287"$0$0$0$6$51$"	private static boolean isHexNumber(String value) {"
"NumberUtils.java:288"$0$0$0$8$46$"		int index = (value.startsWith(""-"") ? 1 : 0);"
"NumberUtils.java:289"$0$0$0$9$106$"		return (value.startsWith(""0x"", index) || value.startsWith(""0X"", index) || value.startsWith(""#"", index));"
"NumberUtils.java:290"$0$0$0$1$2$"	}"
"NumberUtils.java:291"$0$0$0$0$0$""
"NumberUtils.java:292"$0$0$0$1$4$"	/**"
"NumberUtils.java:293"$0$0$0$11$81$"	 * Decode a {@link java.math.BigInteger} from the supplied {@link String} value."
"NumberUtils.java:294"$0$0$0$7$49$"	 * <p>Supports decimal, hex, and octal notation."
"NumberUtils.java:295"$0$0$0$4$43$"	 * @see BigInteger#BigInteger(String, int)"
"NumberUtils.java:296"$0$0$0$1$4$"	 */"
"NumberUtils.java:297"$0$0$0$6$59$"	private static BigInteger decodeBigInteger(String value) {"
"NumberUtils.java:298"$0$0$0$4$17$"		int radix = 10;"
"NumberUtils.java:299"$0$0$0$4$16$"		int index = 0;"
"NumberUtils.java:300"$0$0$0$4$27$"		boolean negative = false;"
"NumberUtils.java:301"$0$0$0$0$0$""
"NumberUtils.java:302"$0$0$1$6$35$"		// Handle minus sign, if present."
"NumberUtils.java:303"$0$0$0$3$30$"		if (value.startsWith(""-"")) {"
"NumberUtils.java:304"$0$0$0$3$19$"			negative = true;"
"NumberUtils.java:305"$0$0$0$1$11$"			index++;"
"NumberUtils.java:306"$0$0$0$1$3$"		}"
"NumberUtils.java:307"$0$0$0$0$0$""
"NumberUtils.java:308"$0$0$1$6$40$"		// Handle radix specifier, if present."
"NumberUtils.java:309"$0$0$0$7$71$"		if (value.startsWith(""0x"", index) || value.startsWith(""0X"", index)) {"
"NumberUtils.java:310"$0$0$0$3$14$"			index += 2;"
"NumberUtils.java:311"$0$0$0$3$14$"			radix = 16;"
"NumberUtils.java:312"$0$0$0$1$3$"		}"
"NumberUtils.java:313"$0$0$0$5$42$"		else if (value.startsWith(""#"", index)) {"
"NumberUtils.java:314"$0$0$0$1$11$"			index++;"
"NumberUtils.java:315"$0$0$0$3$14$"			radix = 16;"
"NumberUtils.java:316"$0$0$0$1$3$"		}"
"NumberUtils.java:317"$0$0$0$11$72$"		else if (value.startsWith(""0"", index) && value.length() > 1 + index) {"
"NumberUtils.java:318"$0$0$0$1$11$"			index++;"
"NumberUtils.java:319"$0$0$0$3$13$"			radix = 8;"
"NumberUtils.java:320"$0$0$0$1$3$"		}"
"NumberUtils.java:321"$0$0$0$0$0$""
"NumberUtils.java:322"$0$0$0$6$68$"		BigInteger result = new BigInteger(value.substring(index), radix);"
"NumberUtils.java:323"$0$0$0$6$47$"		return (negative ? result.negate() : result);"
"NumberUtils.java:324"$0$0$0$1$2$"	}"
"NumberUtils.java:325"$0$0$0$0$0$""
"NumberUtils.java:326"$0$0$0$1$1$"}"
"DataSize.java:1"$0$0$0$1$2$"/*"
"DataSize.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"DataSize.java:3"$0$0$0$1$2$" *"
"DataSize.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DataSize.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DataSize.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DataSize.java:7"$0$0$0$1$2$" *"
"DataSize.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DataSize.java:9"$0$0$0$1$2$" *"
"DataSize.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DataSize.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DataSize.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DataSize.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DataSize.java:14"$0$0$0$5$33$" * limitations under the License."
"DataSize.java:15"$0$0$0$1$3$" */"
"DataSize.java:16"$0$0$0$0$0$""
"DataSize.java:17"$0$0$0$2$38$"package org.springframework.util.unit;"
"DataSize.java:18"$0$0$0$0$0$""
"DataSize.java:19"$0$0$0$2$31$"import java.util.regex.Matcher;"
"DataSize.java:20"$0$0$0$2$31$"import java.util.regex.Pattern;"
"DataSize.java:21"$0$0$0$0$0$""
"DataSize.java:22"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"DataSize.java:23"$0$0$0$2$39$"import org.springframework.util.Assert;"
"DataSize.java:24"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"DataSize.java:25"$0$0$0$0$0$""
"DataSize.java:26"$0$0$0$1$3$"/**"
"DataSize.java:27"$0$0$0$7$31$" * A data size, such as '12MB'."
"DataSize.java:28"$0$0$0$1$2$" *"
"DataSize.java:29"$0$0$0$15$85$" * <p>This class models data size in terms of bytes and is immutable and thread-safe."
"DataSize.java:30"$0$0$0$1$2$" *"
"DataSize.java:31"$0$0$0$12$57$" * <p>The terms and units used in this class are based on"
"DataSize.java:32"$0$0$0$4$76$" * <a href=""https://en.wikipedia.org/wiki/Binary_prefix"">binary prefixes</a>"
"DataSize.java:33"$0$0$0$12$76$" * indicating multiplication by powers of 2. Consult the following table and"
"DataSize.java:34"$0$0$0$8$48$" * the Javadoc for {@link DataUnit} for details."
"DataSize.java:35"$0$0$0$1$2$" *"
"DataSize.java:36"$0$0$0$2$6$" * <p>"
"DataSize.java:37"$0$0$0$3$21$" * <table border=""1"">"
"DataSize.java:38"$0$0$0$5$65$" * <tr><th>Term</th><th>Data Size</th><th>Size in Bytes</th></tr>"
"DataSize.java:39"$0$0$0$2$46$" * <tr><td>byte</td><td>1B</td><td>1</td></tr>"
"DataSize.java:40"$0$0$0$2$55$" * <tr><td>kilobyte</td><td>1KB</td><td>1,024</td></tr>"
"DataSize.java:41"$0$0$0$2$59$" * <tr><td>megabyte</td><td>1MB</td><td>1,048,576</td></tr>"
"DataSize.java:42"$0$0$0$2$63$" * <tr><td>gigabyte</td><td>1GB</td><td>1,073,741,824</td></tr>"
"DataSize.java:43"$0$0$0$2$67$" * <tr><td>terabyte</td><td>1TB</td><td>1,099,511,627,776</td></tr>"
"DataSize.java:44"$0$0$0$2$11$" * </table>"
"DataSize.java:45"$0$0$0$1$2$" *"
"DataSize.java:46"$0$0$0$4$26$" * @author Stephane Nicoll"
"DataSize.java:47"$0$0$0$4$22$" * @author Sam Brannen"
"DataSize.java:48"$0$0$0$3$13$" * @since 5.1"
"DataSize.java:49"$0$0$0$3$16$" * @see DataUnit"
"DataSize.java:50"$0$0$0$1$3$" */"
"DataSize.java:51"$0$0$0$7$61$"public final class DataSize implements Comparable<DataSize> {"
"DataSize.java:52"$0$0$0$0$0$""
"DataSize.java:53"$0$0$0$1$4$"	/**"
"DataSize.java:54"$0$0$0$5$28$"	 * The pattern for parsing."
"DataSize.java:55"$0$0$0$1$4$"	 */"
"DataSize.java:56"$0$0$0$7$90$"	private static final Pattern PATTERN = Pattern.compile(""^([+\\-]?\\d+)([a-zA-Z]{0,2})$"");"
"DataSize.java:57"$0$0$0$0$0$""
"DataSize.java:58"$0$0$0$1$4$"	/**"
"DataSize.java:59"$0$0$0$4$23$"	 * Bytes per Kilobyte."
"DataSize.java:60"$0$0$0$1$4$"	 */"
"DataSize.java:61"$0$0$0$7$47$"	private static final long BYTES_PER_KB = 1024;"
"DataSize.java:62"$0$0$0$0$0$""
"DataSize.java:63"$0$0$0$1$4$"	/**"
"DataSize.java:64"$0$0$0$4$23$"	 * Bytes per Megabyte."
"DataSize.java:65"$0$0$0$1$4$"	 */"
"DataSize.java:66"$0$0$0$9$62$"	private static final long BYTES_PER_MB = BYTES_PER_KB * 1024;"
"DataSize.java:67"$0$0$0$0$0$""
"DataSize.java:68"$0$0$0$1$4$"	/**"
"DataSize.java:69"$0$0$0$4$23$"	 * Bytes per Gigabyte."
"DataSize.java:70"$0$0$0$1$4$"	 */"
"DataSize.java:71"$0$0$0$9$62$"	private static final long BYTES_PER_GB = BYTES_PER_MB * 1024;"
"DataSize.java:72"$0$0$0$0$0$""
"DataSize.java:73"$0$0$0$1$4$"	/**"
"DataSize.java:74"$0$0$0$4$23$"	 * Bytes per Terabyte."
"DataSize.java:75"$0$0$0$1$4$"	 */"
"DataSize.java:76"$0$0$0$9$62$"	private static final long BYTES_PER_TB = BYTES_PER_GB * 1024;"
"DataSize.java:77"$0$0$0$0$0$""
"DataSize.java:78"$0$0$0$0$0$""
"DataSize.java:79"$0$0$0$4$26$"	private final long bytes;"
"DataSize.java:80"$0$0$0$0$0$""
"DataSize.java:81"$0$0$0$0$0$""
"DataSize.java:82"$0$0$0$4$31$"	private DataSize(long bytes) {"
"DataSize.java:83"$0$0$0$3$21$"		this.bytes = bytes;"
"DataSize.java:84"$0$0$0$1$2$"	}"
"DataSize.java:85"$0$0$0$0$0$""
"DataSize.java:86"$0$0$0$0$0$""
"DataSize.java:87"$0$0$0$1$4$"	/**"
"DataSize.java:88"$0$0$0$11$73$"	 * Obtain a {@link DataSize} representing the specified number of bytes."
"DataSize.java:89"$0$0$0$10$58$"	 * @param bytes the number of bytes, positive or negative"
"DataSize.java:90"$0$0$0$5$30$"	 * @return a {@link DataSize}"
"DataSize.java:91"$0$0$0$1$4$"	 */"
"DataSize.java:92"$0$0$0$6$45$"	public static DataSize ofBytes(long bytes) {"
"DataSize.java:93"$0$0$0$3$29$"		return new DataSize(bytes);"
"DataSize.java:94"$0$0$0$1$2$"	}"
"DataSize.java:95"$0$0$0$0$0$""
"DataSize.java:96"$0$0$0$1$4$"	/**"
"DataSize.java:97"$0$0$0$11$77$"	 * Obtain a {@link DataSize} representing the specified number of kilobytes."
"DataSize.java:98"$0$0$0$10$66$"	 * @param kilobytes the number of kilobytes, positive or negative"
"DataSize.java:99"$0$0$0$5$30$"	 * @return a {@link DataSize}"
"DataSize.java:100"$0$0$0$1$4$"	 */"
"DataSize.java:101"$0$0$0$6$53$"	public static DataSize ofKilobytes(long kilobytes) {"
"DataSize.java:102"$0$0$0$4$67$"		return new DataSize(Math.multiplyExact(kilobytes, BYTES_PER_KB));"
"DataSize.java:103"$0$0$0$1$2$"	}"
"DataSize.java:104"$0$0$0$0$0$""
"DataSize.java:105"$0$0$0$1$4$"	/**"
"DataSize.java:106"$0$0$0$11$77$"	 * Obtain a {@link DataSize} representing the specified number of megabytes."
"DataSize.java:107"$0$0$0$10$66$"	 * @param megabytes the number of megabytes, positive or negative"
"DataSize.java:108"$0$0$0$5$30$"	 * @return a {@link DataSize}"
"DataSize.java:109"$0$0$0$1$4$"	 */"
"DataSize.java:110"$0$0$0$6$53$"	public static DataSize ofMegabytes(long megabytes) {"
"DataSize.java:111"$0$0$0$4$67$"		return new DataSize(Math.multiplyExact(megabytes, BYTES_PER_MB));"
"DataSize.java:112"$0$0$0$1$2$"	}"
"DataSize.java:113"$0$0$0$0$0$""
"DataSize.java:114"$0$0$0$1$4$"	/**"
"DataSize.java:115"$0$0$0$11$77$"	 * Obtain a {@link DataSize} representing the specified number of gigabytes."
"DataSize.java:116"$0$0$0$10$66$"	 * @param gigabytes the number of gigabytes, positive or negative"
"DataSize.java:117"$0$0$0$5$30$"	 * @return a {@link DataSize}"
"DataSize.java:118"$0$0$0$1$4$"	 */"
"DataSize.java:119"$0$0$0$6$53$"	public static DataSize ofGigabytes(long gigabytes) {"
"DataSize.java:120"$0$0$0$4$67$"		return new DataSize(Math.multiplyExact(gigabytes, BYTES_PER_GB));"
"DataSize.java:121"$0$0$0$1$2$"	}"
"DataSize.java:122"$0$0$0$0$0$""
"DataSize.java:123"$0$0$0$1$4$"	/**"
"DataSize.java:124"$0$0$0$11$77$"	 * Obtain a {@link DataSize} representing the specified number of terabytes."
"DataSize.java:125"$0$0$0$10$66$"	 * @param terabytes the number of terabytes, positive or negative"
"DataSize.java:126"$0$0$0$5$30$"	 * @return a {@link DataSize}"
"DataSize.java:127"$0$0$0$1$4$"	 */"
"DataSize.java:128"$0$0$0$6$53$"	public static DataSize ofTerabytes(long terabytes) {"
"DataSize.java:129"$0$0$0$4$67$"		return new DataSize(Math.multiplyExact(terabytes, BYTES_PER_TB));"
"DataSize.java:130"$0$0$0$1$2$"	}"
"DataSize.java:131"$0$0$0$0$0$""
"DataSize.java:132"$0$0$0$1$4$"	/**"
"DataSize.java:133"$0$0$0$13$87$"	 * Obtain a {@link DataSize} representing an amount in the specified {@link DataUnit}."
"DataSize.java:134"$0$0$0$14$72$"	 * @param amount the amount of the size, measured in terms of the unit,"
"DataSize.java:135"$0$0$0$4$24$"	 * positive or negative"
"DataSize.java:136"$0$0$0$6$44$"	 * @return a corresponding {@link DataSize}"
"DataSize.java:137"$0$0$0$1$4$"	 */"
"DataSize.java:138"$0$0$0$8$56$"	public static DataSize of(long amount, DataUnit unit) {"
"DataSize.java:139"$0$0$0$6$48$"		Assert.notNull(unit, ""Unit must not be null"");"
"DataSize.java:140"$0$0$0$4$73$"		return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));"
"DataSize.java:141"$0$0$0$1$2$"	}"
"DataSize.java:142"$0$0$0$0$0$""
"DataSize.java:143"$0$0$0$1$4$"	/**"
"DataSize.java:144"$0$0$0$14$75$"	 * Obtain a {@link DataSize} from a text string such as {@code 12MB} using"
"DataSize.java:145"$0$0$0$8$51$"	 * {@link DataUnit#BYTES} if no unit is specified."
"DataSize.java:146"$0$0$0$2$7$"	 * <p>"
"DataSize.java:147"$0$0$0$2$13$"	 * Examples:"
"DataSize.java:148"$0$0$0$2$9$"	 * <pre>"
"DataSize.java:149"$0$0$0$7$38$"	 * ""12KB"" -- parses as ""12 kilobytes"""
"DataSize.java:150"$0$0$0$7$37$"	 * ""5MB""  -- parses as ""5 megabytes"""
"DataSize.java:151"$0$0$0$7$34$"	 * ""20""   -- parses as ""20 bytes"""
"DataSize.java:152"$0$0$0$2$10$"	 * </pre>"
"DataSize.java:153"$0$0$0$7$33$"	 * @param text the text to parse"
"DataSize.java:154"$0$0$0$6$39$"	 * @return the parsed {@link DataSize}"
"DataSize.java:155"$0$0$0$4$39$"	 * @see #parse(CharSequence, DataUnit)"
"DataSize.java:156"$0$0$0$1$4$"	 */"
"DataSize.java:157"$0$0$0$6$50$"	public static DataSize parse(CharSequence text) {"
"DataSize.java:158"$0$0$0$3$27$"		return parse(text, null);"
"DataSize.java:159"$0$0$0$1$2$"	}"
"DataSize.java:160"$0$0$0$0$0$""
"DataSize.java:161"$0$0$0$1$4$"	/**"
"DataSize.java:162"$0$0$0$14$75$"	 * Obtain a {@link DataSize} from a text string such as {@code 12MB} using"
"DataSize.java:163"$0$0$0$11$67$"	 * the specified default {@link DataUnit} if no unit is specified."
"DataSize.java:164"$0$0$0$2$7$"	 * <p>"
"DataSize.java:165"$0$0$0$16$85$"	 * The string starts with a number followed optionally by a unit matching one of the"
"DataSize.java:166"$0$0$0$5$45$"	 * supported {@linkplain DataUnit suffixes}."
"DataSize.java:167"$0$0$0$2$7$"	 * <p>"
"DataSize.java:168"$0$0$0$2$13$"	 * Examples:"
"DataSize.java:169"$0$0$0$2$9$"	 * <pre>"
"DataSize.java:170"$0$0$0$7$38$"	 * ""12KB"" -- parses as ""12 kilobytes"""
"DataSize.java:171"$0$0$0$7$37$"	 * ""5MB""  -- parses as ""5 megabytes"""
"DataSize.java:172"$0$0$0$14$100$"	 * ""20""   -- parses as ""20 kilobytes"" (where the {@code defaultUnit} is {@link DataUnit#KILOBYTES})"
"DataSize.java:173"$0$0$0$2$10$"	 * </pre>"
"DataSize.java:174"$0$0$0$7$33$"	 * @param text the text to parse"
"DataSize.java:175"$0$0$0$6$39$"	 * @return the parsed {@link DataSize}"
"DataSize.java:176"$0$0$0$1$4$"	 */"
"DataSize.java:177"$0$0$0$9$82$"	public static DataSize parse(CharSequence text, @Nullable DataUnit defaultUnit) {"
"DataSize.java:178"$0$0$0$6$48$"		Assert.notNull(text, ""Text must not be null"");"
"DataSize.java:179"$0$0$0$2$7$"		try {"
"DataSize.java:180"$0$0$0$4$43$"			Matcher matcher = PATTERN.matcher(text);"
"DataSize.java:181"$0$0$0$7$71$"			Assert.state(matcher.matches(), ""Does not match data size pattern"");"
"DataSize.java:182"$0$0$0$5$68$"			DataUnit unit = determineDataUnit(matcher.group(2), defaultUnit);"
"DataSize.java:183"$0$0$0$4$50$"			long amount = Long.parseLong(matcher.group(1));"
"DataSize.java:184"$0$0$0$3$36$"			return DataSize.of(amount, unit);"
"DataSize.java:185"$0$0$0$1$3$"		}"
"DataSize.java:186"$0$0$0$4$24$"		catch (Exception ex) {"
"DataSize.java:187"$0$0$0$14$85$"			throw new IllegalArgumentException(""'"" + text + ""' is not a valid data size"", ex);"
"DataSize.java:188"$0$0$0$1$3$"		}"
"DataSize.java:189"$0$0$0$1$2$"	}"
"DataSize.java:190"$0$0$0$0$0$""
"DataSize.java:191"$0$0$0$9$91$"	private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {"
"DataSize.java:192"$0$0$0$10$83$"		DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);"
"DataSize.java:193"$0$0$0$6$90$"		return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);"
"DataSize.java:194"$0$0$0$1$2$"	}"
"DataSize.java:195"$0$0$0$0$0$""
"DataSize.java:196"$0$0$0$1$4$"	/**"
"DataSize.java:197"$0$0$0$9$52$"	 * Checks if this size is negative, excluding zero."
"DataSize.java:198"$0$0$0$13$61$"	 * @return true if this size has a size less than zero bytes"
"DataSize.java:199"$0$0$0$1$4$"	 */"
"DataSize.java:200"$0$0$0$4$30$"	public boolean isNegative() {"
"DataSize.java:201"$0$0$0$4$24$"		return this.bytes < 0;"
"DataSize.java:202"$0$0$0$1$2$"	}"
"DataSize.java:203"$0$0$0$0$0$""
"DataSize.java:204"$0$0$0$1$4$"	/**"
"DataSize.java:205"$0$0$0$9$48$"	 * Return the number of bytes in this instance."
"DataSize.java:206"$0$0$0$6$31$"	 * @return the number of bytes"
"DataSize.java:207"$0$0$0$1$4$"	 */"
"DataSize.java:208"$0$0$0$4$24$"	public long toBytes() {"
"DataSize.java:209"$0$0$0$2$20$"		return this.bytes;"
"DataSize.java:210"$0$0$0$1$2$"	}"
"DataSize.java:211"$0$0$0$0$0$""
"DataSize.java:212"$0$0$0$1$4$"	/**"
"DataSize.java:213"$0$0$0$9$52$"	 * Return the number of kilobytes in this instance."
"DataSize.java:214"$0$0$0$6$35$"	 * @return the number of kilobytes"
"DataSize.java:215"$0$0$0$1$4$"	 */"
"DataSize.java:216"$0$0$0$4$28$"	public long toKilobytes() {"
"DataSize.java:217"$0$0$0$4$35$"		return this.bytes / BYTES_PER_KB;"
"DataSize.java:218"$0$0$0$1$2$"	}"
"DataSize.java:219"$0$0$0$0$0$""
"DataSize.java:220"$0$0$0$1$4$"	/**"
"DataSize.java:221"$0$0$0$9$52$"	 * Return the number of megabytes in this instance."
"DataSize.java:222"$0$0$0$6$35$"	 * @return the number of megabytes"
"DataSize.java:223"$0$0$0$1$4$"	 */"
"DataSize.java:224"$0$0$0$4$28$"	public long toMegabytes() {"
"DataSize.java:225"$0$0$0$4$35$"		return this.bytes / BYTES_PER_MB;"
"DataSize.java:226"$0$0$0$1$2$"	}"
"DataSize.java:227"$0$0$0$0$0$""
"DataSize.java:228"$0$0$0$1$4$"	/**"
"DataSize.java:229"$0$0$0$9$52$"	 * Return the number of gigabytes in this instance."
"DataSize.java:230"$0$0$0$6$35$"	 * @return the number of gigabytes"
"DataSize.java:231"$0$0$0$1$4$"	 */"
"DataSize.java:232"$0$0$0$4$28$"	public long toGigabytes() {"
"DataSize.java:233"$0$0$0$4$35$"		return this.bytes / BYTES_PER_GB;"
"DataSize.java:234"$0$0$0$1$2$"	}"
"DataSize.java:235"$0$0$0$0$0$""
"DataSize.java:236"$0$0$0$1$4$"	/**"
"DataSize.java:237"$0$0$0$9$52$"	 * Return the number of terabytes in this instance."
"DataSize.java:238"$0$0$0$6$35$"	 * @return the number of terabytes"
"DataSize.java:239"$0$0$0$1$4$"	 */"
"DataSize.java:240"$0$0$0$4$28$"	public long toTerabytes() {"
"DataSize.java:241"$0$0$0$4$35$"		return this.bytes / BYTES_PER_TB;"
"DataSize.java:242"$0$0$0$1$2$"	}"
"DataSize.java:243"$0$0$0$0$0$""
"DataSize.java:244"$0$0$0$1$10$"	@Override"
"DataSize.java:245"$0$0$0$5$39$"	public int compareTo(DataSize other) {"
"DataSize.java:246"$0$0$0$3$47$"		return Long.compare(this.bytes, other.bytes);"
"DataSize.java:247"$0$0$0$1$2$"	}"
"DataSize.java:248"$0$0$0$0$0$""
"DataSize.java:249"$0$0$0$1$10$"	@Override"
"DataSize.java:250"$0$0$0$4$27$"	public String toString() {"
"DataSize.java:251"$0$0$0$3$42$"		return String.format(""%dB"", this.bytes);"
"DataSize.java:252"$0$0$0$1$2$"	}"
"DataSize.java:253"$0$0$0$0$0$""
"DataSize.java:254"$0$0$0$0$0$""
"DataSize.java:255"$0$0$0$1$10$"	@Override"
"DataSize.java:256"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"DataSize.java:257"$0$0$0$5$22$"		if (this == other) {"
"DataSize.java:258"$0$0$0$2$15$"			return true;"
"DataSize.java:259"$0$0$0$1$3$"		}"
"DataSize.java:260"$2$0$0$9$56$"		if (other == null || getClass() != other.getClass()) {"
"DataSize.java:261"$0$0$0$2$16$"			return false;"
"DataSize.java:262"$0$0$0$1$3$"		}"
"DataSize.java:263"$0$0$0$5$40$"		DataSize otherSize = (DataSize) other;"
"DataSize.java:264"$0$0$0$4$41$"		return (this.bytes == otherSize.bytes);"
"DataSize.java:265"$0$0$0$1$2$"	}"
"DataSize.java:266"$0$0$0$0$0$""
"DataSize.java:267"$0$0$0$1$10$"	@Override"
"DataSize.java:268"$0$0$0$4$24$"	public int hashCode() {"
"DataSize.java:269"$0$0$0$2$35$"		return Long.hashCode(this.bytes);"
"DataSize.java:270"$0$0$0$1$2$"	}"
"DataSize.java:271"$0$0$0$0$0$""
"DataSize.java:272"$0$0$0$1$1$"}"
"AnnotationAwareOrderComparator.java:1"$0$0$0$1$2$"/*"
"AnnotationAwareOrderComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AnnotationAwareOrderComparator.java:3"$0$0$0$1$2$" *"
"AnnotationAwareOrderComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationAwareOrderComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationAwareOrderComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationAwareOrderComparator.java:7"$0$0$0$1$2$" *"
"AnnotationAwareOrderComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationAwareOrderComparator.java:9"$0$0$0$1$2$" *"
"AnnotationAwareOrderComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationAwareOrderComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationAwareOrderComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationAwareOrderComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationAwareOrderComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationAwareOrderComparator.java:15"$0$0$0$1$3$" */"
"AnnotationAwareOrderComparator.java:16"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AnnotationAwareOrderComparator.java:18"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:19"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"AnnotationAwareOrderComparator.java:20"$0$0$0$2$24$"import java.util.Arrays;"
"AnnotationAwareOrderComparator.java:21"$0$0$0$2$22$"import java.util.List;"
"AnnotationAwareOrderComparator.java:22"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:23"$0$0$0$2$48$"import org.springframework.core.DecoratingProxy;"
"AnnotationAwareOrderComparator.java:24"$0$0$0$2$48$"import org.springframework.core.OrderComparator;"
"AnnotationAwareOrderComparator.java:25"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"AnnotationAwareOrderComparator.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AnnotationAwareOrderComparator.java:27"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:28"$0$0$0$1$3$"/**"
"AnnotationAwareOrderComparator.java:29"$0$0$0$7$60$" * {@code AnnotationAwareOrderComparator} is an extension of"
"AnnotationAwareOrderComparator.java:30"$0$0$0$6$49$" * {@link OrderComparator} that supports Spring's"
"AnnotationAwareOrderComparator.java:31"$0$0$0$8$68$" * {@link org.springframework.core.Ordered} interface as well as the"
"AnnotationAwareOrderComparator.java:32"$0$0$0$8$71$" * {@link Order @Order} and {@link javax.annotation.Priority @Priority}"
"AnnotationAwareOrderComparator.java:33"$0$0$0$11$66$" * annotations, with an order value provided by an {@code Ordered}"
"AnnotationAwareOrderComparator.java:34"$0$0$0$10$70$" * instance overriding a statically defined annotation value (if any)."
"AnnotationAwareOrderComparator.java:35"$0$0$0$1$2$" *"
"AnnotationAwareOrderComparator.java:36"$0$0$0$11$72$" * <p>Consult the Javadoc for {@link OrderComparator} for details on the"
"AnnotationAwareOrderComparator.java:37"$0$0$0$6$42$" * sort semantics for non-ordered objects."
"AnnotationAwareOrderComparator.java:38"$0$0$0$1$2$" *"
"AnnotationAwareOrderComparator.java:39"$0$0$0$4$26$" * @author Juergen Hoeller"
"AnnotationAwareOrderComparator.java:40"$0$0$0$4$24$" * @author Oliver Gierke"
"AnnotationAwareOrderComparator.java:41"$0$0$0$4$26$" * @author Stephane Nicoll"
"AnnotationAwareOrderComparator.java:42"$0$0$0$3$15$" * @since 2.0.1"
"AnnotationAwareOrderComparator.java:43"$0$0$0$3$40$" * @see org.springframework.core.Ordered"
"AnnotationAwareOrderComparator.java:44"$0$0$0$3$49$" * @see org.springframework.core.annotation.Order"
"AnnotationAwareOrderComparator.java:45"$0$0$0$3$33$" * @see javax.annotation.Priority"
"AnnotationAwareOrderComparator.java:46"$0$0$0$1$3$" */"
"AnnotationAwareOrderComparator.java:47"$0$0$0$6$69$"public class AnnotationAwareOrderComparator extends OrderComparator {"
"AnnotationAwareOrderComparator.java:48"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:49"$0$0$0$1$4$"	/**"
"AnnotationAwareOrderComparator.java:50"$0$0$0$7$70$"	 * Shared default instance of {@code AnnotationAwareOrderComparator}."
"AnnotationAwareOrderComparator.java:51"$0$0$0$1$4$"	 */"
"AnnotationAwareOrderComparator.java:52"$0$0$0$8$100$"	public static final AnnotationAwareOrderComparator INSTANCE = new AnnotationAwareOrderComparator();"
"AnnotationAwareOrderComparator.java:53"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:54"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:55"$0$0$0$1$4$"	/**"
"AnnotationAwareOrderComparator.java:56"$0$0$0$9$58$"	 * This implementation checks for {@link Order @Order} or"
"AnnotationAwareOrderComparator.java:57"$0$0$0$8$67$"	 * {@link javax.annotation.Priority @Priority} on various kinds of"
"AnnotationAwareOrderComparator.java:58"$0$0$0$8$73$"	 * elements, in addition to the {@link org.springframework.core.Ordered}"
"AnnotationAwareOrderComparator.java:59"$0$0$0$5$28$"	 * check in the superclass."
"AnnotationAwareOrderComparator.java:60"$0$0$0$1$4$"	 */"
"AnnotationAwareOrderComparator.java:61"$0$0$0$1$10$"	@Override"
"AnnotationAwareOrderComparator.java:62"$0$0$0$1$10$"	@Nullable"
"AnnotationAwareOrderComparator.java:63"$0$0$0$5$42$"	protected Integer findOrder(Object obj) {"
"AnnotationAwareOrderComparator.java:64"$0$0$0$4$39$"		Integer order = super.findOrder(obj);"
"AnnotationAwareOrderComparator.java:65"$0$0$0$5$22$"		if (order != null) {"
"AnnotationAwareOrderComparator.java:66"$0$0$0$2$16$"			return order;"
"AnnotationAwareOrderComparator.java:67"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:68"$0$0$0$2$38$"		return findOrderFromAnnotation(obj);"
"AnnotationAwareOrderComparator.java:69"$0$0$0$1$2$"	}"
"AnnotationAwareOrderComparator.java:70"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:71"$0$0$0$1$10$"	@Nullable"
"AnnotationAwareOrderComparator.java:72"$0$0$0$5$54$"	private Integer findOrderFromAnnotation(Object obj) {"
"AnnotationAwareOrderComparator.java:73"$1$0$0$11$105$"		AnnotatedElement element = (obj instanceof AnnotatedElement ? (AnnotatedElement) obj : obj.getClass());"
"AnnotationAwareOrderComparator.java:74"$0$0$0$5$97$"		MergedAnnotations annotations = MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY);"
"AnnotationAwareOrderComparator.java:75"$1$0$0$5$75$"		Integer order = OrderUtils.getOrderFromAnnotations(element, annotations);"
"AnnotationAwareOrderComparator.java:76"$0$0$0$9$56$"		if (order == null && obj instanceof DecoratingProxy) {"
"AnnotationAwareOrderComparator.java:77"$1$0$0$3$79$"			return findOrderFromAnnotation(((DecoratingProxy) obj).getDecoratedClass());"
"AnnotationAwareOrderComparator.java:78"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:79"$0$0$0$2$15$"		return order;"
"AnnotationAwareOrderComparator.java:80"$0$0$0$1$2$"	}"
"AnnotationAwareOrderComparator.java:81"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:82"$0$0$0$1$4$"	/**"
"AnnotationAwareOrderComparator.java:83"$0$0$0$7$71$"	 * This implementation retrieves an @{@link javax.annotation.Priority}"
"AnnotationAwareOrderComparator.java:84"$0$0$0$11$76$"	 * value, allowing for additional semantics over the regular @{@link Order}"
"AnnotationAwareOrderComparator.java:85"$0$0$0$11$71$"	 * annotation: typically, selecting one object over another in case of"
"AnnotationAwareOrderComparator.java:86"$0$0$0$10$56$"	 * multiple matches but only one object to be returned."
"AnnotationAwareOrderComparator.java:87"$0$0$0$1$4$"	 */"
"AnnotationAwareOrderComparator.java:88"$0$0$0$1$10$"	@Override"
"AnnotationAwareOrderComparator.java:89"$0$0$0$1$10$"	@Nullable"
"AnnotationAwareOrderComparator.java:90"$1$0$0$5$41$"	public Integer getPriority(Object obj) {"
"AnnotationAwareOrderComparator.java:91"$0$0$0$5$29$"		if (obj instanceof Class) {"
"AnnotationAwareOrderComparator.java:92"$1$0$0$3$49$"			return OrderUtils.getPriority((Class<?>) obj);"
"AnnotationAwareOrderComparator.java:93"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:94"$2$0$0$4$60$"		Integer priority = OrderUtils.getPriority(obj.getClass());"
"AnnotationAwareOrderComparator.java:95"$0$0$0$9$60$"		if (priority == null  && obj instanceof DecoratingProxy) {"
"AnnotationAwareOrderComparator.java:96"$2$0$0$3$67$"			return getPriority(((DecoratingProxy) obj).getDecoratedClass());"
"AnnotationAwareOrderComparator.java:97"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:98"$0$0$0$2$18$"		return priority;"
"AnnotationAwareOrderComparator.java:99"$0$0$0$1$2$"	}"
"AnnotationAwareOrderComparator.java:100"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:101"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:102"$0$0$0$1$4$"	/**"
"AnnotationAwareOrderComparator.java:103"$0$0$0$10$78$"	 * Sort the given list with a default {@link AnnotationAwareOrderComparator}."
"AnnotationAwareOrderComparator.java:104"$0$0$0$12$60$"	 * <p>Optimized to skip sorting for lists with size 0 or 1,"
"AnnotationAwareOrderComparator.java:105"$0$0$0$8$51$"	 * in order to avoid unnecessary array extraction."
"AnnotationAwareOrderComparator.java:106"$0$0$0$7$32$"	 * @param list the List to sort"
"AnnotationAwareOrderComparator.java:107"$0$0$0$3$50$"	 * @see java.util.List#sort(java.util.Comparator)"
"AnnotationAwareOrderComparator.java:108"$0$0$0$1$4$"	 */"
"AnnotationAwareOrderComparator.java:109"$0$0$0$6$40$"	public static void sort(List<?> list) {"
"AnnotationAwareOrderComparator.java:110"$0$0$0$5$24$"		if (list.size() > 1) {"
"AnnotationAwareOrderComparator.java:111"$0$0$0$1$23$"			list.sort(INSTANCE);"
"AnnotationAwareOrderComparator.java:112"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:113"$0$0$0$1$2$"	}"
"AnnotationAwareOrderComparator.java:114"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:115"$0$0$0$1$4$"	/**"
"AnnotationAwareOrderComparator.java:116"$0$0$0$9$71$"	 * Sort the given array with a default AnnotationAwareOrderComparator."
"AnnotationAwareOrderComparator.java:117"$0$0$0$12$60$"	 * <p>Optimized to skip sorting for lists with size 0 or 1,"
"AnnotationAwareOrderComparator.java:118"$0$0$0$8$51$"	 * in order to avoid unnecessary array extraction."
"AnnotationAwareOrderComparator.java:119"$0$0$0$7$34$"	 * @param array the array to sort"
"AnnotationAwareOrderComparator.java:120"$0$0$0$4$62$"	 * @see java.util.Arrays#sort(Object[], java.util.Comparator)"
"AnnotationAwareOrderComparator.java:121"$0$0$0$1$4$"	 */"
"AnnotationAwareOrderComparator.java:122"$0$0$0$6$42$"	public static void sort(Object[] array) {"
"AnnotationAwareOrderComparator.java:123"$0$0$0$5$25$"		if (array.length > 1) {"
"AnnotationAwareOrderComparator.java:124"$0$0$0$2$32$"			Arrays.sort(array, INSTANCE);"
"AnnotationAwareOrderComparator.java:125"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:126"$0$0$0$1$2$"	}"
"AnnotationAwareOrderComparator.java:127"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:128"$0$0$0$1$4$"	/**"
"AnnotationAwareOrderComparator.java:129"$0$0$0$11$79$"	 * Sort the given array or List with a default AnnotationAwareOrderComparator,"
"AnnotationAwareOrderComparator.java:130"$0$0$0$11$66$"	 * if necessary. Simply skips sorting when given any other value."
"AnnotationAwareOrderComparator.java:131"$0$0$0$12$60$"	 * <p>Optimized to skip sorting for lists with size 0 or 1,"
"AnnotationAwareOrderComparator.java:132"$0$0$0$8$51$"	 * in order to avoid unnecessary array extraction."
"AnnotationAwareOrderComparator.java:133"$0$0$0$9$42$"	 * @param value the array or List to sort"
"AnnotationAwareOrderComparator.java:134"$0$0$0$4$62$"	 * @see java.util.Arrays#sort(Object[], java.util.Comparator)"
"AnnotationAwareOrderComparator.java:135"$0$0$0$1$4$"	 */"
"AnnotationAwareOrderComparator.java:136"$0$0$0$6$51$"	public static void sortIfNecessary(Object value) {"
"AnnotationAwareOrderComparator.java:137"$0$0$0$5$34$"		if (value instanceof Object[]) {"
"AnnotationAwareOrderComparator.java:138"$0$0$0$2$26$"			sort((Object[]) value);"
"AnnotationAwareOrderComparator.java:139"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:140"$0$0$0$6$35$"		else if (value instanceof List) {"
"AnnotationAwareOrderComparator.java:141"$0$0$0$2$25$"			sort((List<?>) value);"
"AnnotationAwareOrderComparator.java:142"$0$0$0$1$3$"		}"
"AnnotationAwareOrderComparator.java:143"$0$0$0$1$2$"	}"
"AnnotationAwareOrderComparator.java:144"$0$0$0$0$0$""
"AnnotationAwareOrderComparator.java:145"$0$0$0$1$1$"}"
"StaxStreamXMLReader.java:1"$0$0$0$1$2$"/*"
"StaxStreamXMLReader.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"StaxStreamXMLReader.java:3"$0$0$0$1$2$" *"
"StaxStreamXMLReader.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StaxStreamXMLReader.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StaxStreamXMLReader.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StaxStreamXMLReader.java:7"$0$0$0$1$2$" *"
"StaxStreamXMLReader.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StaxStreamXMLReader.java:9"$0$0$0$1$2$" *"
"StaxStreamXMLReader.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StaxStreamXMLReader.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StaxStreamXMLReader.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StaxStreamXMLReader.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StaxStreamXMLReader.java:14"$0$0$0$5$33$" * limitations under the License."
"StaxStreamXMLReader.java:15"$0$0$0$1$3$" */"
"StaxStreamXMLReader.java:16"$0$0$0$0$0$""
"StaxStreamXMLReader.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"StaxStreamXMLReader.java:18"$0$0$0$0$0$""
"StaxStreamXMLReader.java:19"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"StaxStreamXMLReader.java:20"$0$0$0$2$33$"import javax.xml.stream.Location;"
"StaxStreamXMLReader.java:21"$0$0$0$2$43$"import javax.xml.stream.XMLStreamConstants;"
"StaxStreamXMLReader.java:22"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"StaxStreamXMLReader.java:23"$0$0$0$2$40$"import javax.xml.stream.XMLStreamReader;"
"StaxStreamXMLReader.java:24"$0$0$0$0$0$""
"StaxStreamXMLReader.java:25"$0$0$0$2$30$"import org.xml.sax.Attributes;"
"StaxStreamXMLReader.java:26"$0$0$0$2$32$"import org.xml.sax.SAXException;"
"StaxStreamXMLReader.java:27"$0$0$0$2$32$"import org.xml.sax.ext.Locator2;"
"StaxStreamXMLReader.java:28"$0$0$0$2$42$"import org.xml.sax.helpers.AttributesImpl;"
"StaxStreamXMLReader.java:29"$0$0$0$0$0$""
"StaxStreamXMLReader.java:30"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StaxStreamXMLReader.java:31"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"StaxStreamXMLReader.java:32"$0$0$0$0$0$""
"StaxStreamXMLReader.java:33"$0$0$0$1$3$"/**"
"StaxStreamXMLReader.java:34"$0$0$0$14$86$" * SAX {@code XMLReader} that reads from a StAX {@code XMLStreamReader}. Reads from an"
"StaxStreamXMLReader.java:35"$0$0$0$13$95$" * {@code XMLStreamReader}, and calls the corresponding methods on the SAX callback interfaces."
"StaxStreamXMLReader.java:36"$0$0$0$1$2$" *"
"StaxStreamXMLReader.java:37"$0$0$0$4$24$" * @author Arjen Poutsma"
"StaxStreamXMLReader.java:38"$0$0$0$3$13$" * @since 3.0"
"StaxStreamXMLReader.java:39"$0$0$0$3$23$" * @see XMLStreamReader"
"StaxStreamXMLReader.java:40"$0$0$0$3$54$" * @see #setContentHandler(org.xml.sax.ContentHandler)"
"StaxStreamXMLReader.java:41"$0$0$0$3$46$" * @see #setDTDHandler(org.xml.sax.DTDHandler)"
"StaxStreamXMLReader.java:42"$0$0$0$3$54$" * @see #setEntityResolver(org.xml.sax.EntityResolver)"
"StaxStreamXMLReader.java:43"$0$0$0$3$50$" * @see #setErrorHandler(org.xml.sax.ErrorHandler)"
"StaxStreamXMLReader.java:44"$0$0$0$1$3$" */"
"StaxStreamXMLReader.java:45"$0$0$0$5$57$"class StaxStreamXMLReader extends AbstractStaxXMLReader {"
"StaxStreamXMLReader.java:46"$0$0$0$0$0$""
"StaxStreamXMLReader.java:47"$0$0$0$7$57$"	private static final String DEFAULT_XML_VERSION = ""1.0"";"
"StaxStreamXMLReader.java:48"$0$0$0$0$0$""
"StaxStreamXMLReader.java:49"$0$0$0$4$38$"	private final XMLStreamReader reader;"
"StaxStreamXMLReader.java:50"$0$0$0$0$0$""
"StaxStreamXMLReader.java:51"$0$0$0$5$49$"	private String xmlVersion = DEFAULT_XML_VERSION;"
"StaxStreamXMLReader.java:52"$0$0$0$0$0$""
"StaxStreamXMLReader.java:53"$0$0$0$1$10$"	@Nullable"
"StaxStreamXMLReader.java:54"$0$0$0$3$25$"	private String encoding;"
"StaxStreamXMLReader.java:55"$0$0$0$0$0$""
"StaxStreamXMLReader.java:56"$0$0$0$0$0$""
"StaxStreamXMLReader.java:57"$0$0$0$1$4$"	/**"
"StaxStreamXMLReader.java:58"$0$0$0$14$89$"	 * Construct a new instance of the {@code StaxStreamXmlReader} that reads from the given"
"StaxStreamXMLReader.java:59"$0$0$0$12$108$"	 * {@code XMLStreamReader}. The supplied stream reader must be in {@code XMLStreamConstants.START_DOCUMENT}"
"StaxStreamXMLReader.java:60"$0$0$0$5$54$"	 * or {@code XMLStreamConstants.START_ELEMENT} state."
"StaxStreamXMLReader.java:61"$0$0$0$9$57$"	 * @param reader the {@code XMLEventReader} to read from"
"StaxStreamXMLReader.java:62"$0$0$0$16$92$"	 * @throws IllegalStateException if the reader is not at the start of a document or element"
"StaxStreamXMLReader.java:63"$0$0$0$1$4$"	 */"
"StaxStreamXMLReader.java:64"$0$0$0$3$46$"	StaxStreamXMLReader(XMLStreamReader reader) {"
"StaxStreamXMLReader.java:65"$1$0$0$4$36$"		int event = reader.getEventType();"
"StaxStreamXMLReader.java:66"$0$0$0$9$99$"		if (!(event == XMLStreamConstants.START_DOCUMENT || event == XMLStreamConstants.START_ELEMENT)) {"
"StaxStreamXMLReader.java:67"$0$0$0$10$89$"			throw new IllegalStateException(""XMLEventReader not at start of document or element"");"
"StaxStreamXMLReader.java:68"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:69"$0$0$0$3$23$"		this.reader = reader;"
"StaxStreamXMLReader.java:70"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:71"$0$0$0$0$0$""
"StaxStreamXMLReader.java:72"$0$0$0$0$0$""
"StaxStreamXMLReader.java:73"$0$0$0$1$10$"	@Override"
"StaxStreamXMLReader.java:74"$0$0$0$7$73$"	protected void parseInternal() throws SAXException, XMLStreamException {"
"StaxStreamXMLReader.java:75"$0$0$0$4$34$"		boolean documentStarted = false;"
"StaxStreamXMLReader.java:76"$0$0$0$4$32$"		boolean documentEnded = false;"
"StaxStreamXMLReader.java:77"$0$0$0$4$23$"		int elementDepth = 0;"
"StaxStreamXMLReader.java:78"$1$0$0$4$45$"		int eventType = this.reader.getEventType();"
"StaxStreamXMLReader.java:79"$0$0$0$3$16$"		while (true) {"
"StaxStreamXMLReader.java:80"$0$0$0$9$104$"			if (eventType != XMLStreamConstants.START_DOCUMENT && eventType != XMLStreamConstants.END_DOCUMENT &&"
"StaxStreamXMLReader.java:81"$0$0$0$2$24$"					!documentStarted) {"
"StaxStreamXMLReader.java:82"$0$0$0$1$26$"				handleStartDocument();"
"StaxStreamXMLReader.java:83"$0$0$0$3$27$"				documentStarted = true;"
"StaxStreamXMLReader.java:84"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:85"$0$0$0$3$23$"			switch (eventType) {"
"StaxStreamXMLReader.java:86"$0$0$0$2$42$"				case XMLStreamConstants.START_ELEMENT:"
"StaxStreamXMLReader.java:87"$0$0$0$1$20$"					elementDepth++;"
"StaxStreamXMLReader.java:88"$0$0$0$1$26$"					handleStartElement();"
"StaxStreamXMLReader.java:89"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:90"$0$0$0$2$40$"				case XMLStreamConstants.END_ELEMENT:"
"StaxStreamXMLReader.java:91"$0$0$0$1$20$"					elementDepth--;"
"StaxStreamXMLReader.java:92"$0$0$0$5$29$"					if (elementDepth >= 0) {"
"StaxStreamXMLReader.java:93"$0$0$0$1$25$"						handleEndElement();"
"StaxStreamXMLReader.java:94"$0$0$0$1$6$"					}"
"StaxStreamXMLReader.java:95"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:96"$0$0$0$2$51$"				case XMLStreamConstants.PROCESSING_INSTRUCTION:"
"StaxStreamXMLReader.java:97"$0$0$0$1$35$"					handleProcessingInstruction();"
"StaxStreamXMLReader.java:98"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:99"$0$0$0$2$39$"				case XMLStreamConstants.CHARACTERS:"
"StaxStreamXMLReader.java:100"$0$0$0$2$34$"				case XMLStreamConstants.SPACE:"
"StaxStreamXMLReader.java:101"$0$0$0$2$34$"				case XMLStreamConstants.CDATA:"
"StaxStreamXMLReader.java:102"$0$0$0$1$24$"					handleCharacters();"
"StaxStreamXMLReader.java:103"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:104"$0$0$0$2$43$"				case XMLStreamConstants.START_DOCUMENT:"
"StaxStreamXMLReader.java:105"$0$0$0$1$27$"					handleStartDocument();"
"StaxStreamXMLReader.java:106"$0$0$0$3$28$"					documentStarted = true;"
"StaxStreamXMLReader.java:107"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:108"$0$0$0$2$41$"				case XMLStreamConstants.END_DOCUMENT:"
"StaxStreamXMLReader.java:109"$0$0$0$1$25$"					handleEndDocument();"
"StaxStreamXMLReader.java:110"$0$0$0$3$26$"					documentEnded = true;"
"StaxStreamXMLReader.java:111"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:112"$0$0$0$2$36$"				case XMLStreamConstants.COMMENT:"
"StaxStreamXMLReader.java:113"$0$0$0$1$21$"					handleComment();"
"StaxStreamXMLReader.java:114"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:115"$0$0$0$2$32$"				case XMLStreamConstants.DTD:"
"StaxStreamXMLReader.java:116"$0$0$0$1$17$"					handleDtd();"
"StaxStreamXMLReader.java:117"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:118"$0$0$0$2$45$"				case XMLStreamConstants.ENTITY_REFERENCE:"
"StaxStreamXMLReader.java:119"$0$0$0$1$29$"					handleEntityReference();"
"StaxStreamXMLReader.java:120"$0$0$0$1$11$"					break;"
"StaxStreamXMLReader.java:121"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:122"$0$0$0$7$52$"			if (this.reader.hasNext() && elementDepth >= 0) {"
"StaxStreamXMLReader.java:123"$0$0$0$3$35$"				eventType = this.reader.next();"
"StaxStreamXMLReader.java:124"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:125"$0$0$0$2$9$"			else {"
"StaxStreamXMLReader.java:126"$0$0$0$1$10$"				break;"
"StaxStreamXMLReader.java:127"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:128"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:129"$0$0$0$3$23$"		if (!documentEnded) {"
"StaxStreamXMLReader.java:130"$0$0$0$1$23$"			handleEndDocument();"
"StaxStreamXMLReader.java:131"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:132"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:133"$0$0$0$0$0$""
"StaxStreamXMLReader.java:134"$0$0$0$6$57$"	private void handleStartDocument() throws SAXException {"
"StaxStreamXMLReader.java:135"$1$0$0$5$72$"		if (XMLStreamConstants.START_DOCUMENT == this.reader.getEventType()) {"
"StaxStreamXMLReader.java:136"$1$0$0$4$48$"			String xmlVersion = this.reader.getVersion();"
"StaxStreamXMLReader.java:137"$0$0$0$3$43$"			if (StringUtils.hasLength(xmlVersion)) {"
"StaxStreamXMLReader.java:138"$0$0$0$3$33$"				this.xmlVersion = xmlVersion;"
"StaxStreamXMLReader.java:139"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:140"$1$0$0$3$60$"			this.encoding = this.reader.getCharacterEncodingScheme();"
"StaxStreamXMLReader.java:141"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:142"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxStreamXMLReader.java:143"$1$0$0$5$55$"			final Location location = this.reader.getLocation();"
"StaxStreamXMLReader.java:144"$1$0$0$3$58$"			getContentHandler().setDocumentLocator(new Locator2() {"
"StaxStreamXMLReader.java:145"$0$0$0$1$13$"				@Override"
"StaxStreamXMLReader.java:146"$1$0$0$4$34$"				public int getColumnNumber() {"
"StaxStreamXMLReader.java:147"$1$0$0$8$65$"					return (location != null ? location.getColumnNumber() : -1);"
"StaxStreamXMLReader.java:148"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:149"$0$0$0$1$13$"				@Override"
"StaxStreamXMLReader.java:150"$1$0$0$4$32$"				public int getLineNumber() {"
"StaxStreamXMLReader.java:151"$1$0$0$8$63$"					return (location != null ? location.getLineNumber() : -1);"
"StaxStreamXMLReader.java:152"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:153"$0$0$0$1$13$"				@Override"
"StaxStreamXMLReader.java:154"$0$0$0$1$13$"				@Nullable"
"StaxStreamXMLReader.java:155"$1$0$0$4$33$"				public String getPublicId() {"
"StaxStreamXMLReader.java:156"$1$0$0$8$63$"					return (location != null ? location.getPublicId() : null);"
"StaxStreamXMLReader.java:157"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:158"$0$0$0$1$13$"				@Override"
"StaxStreamXMLReader.java:159"$0$0$0$1$13$"				@Nullable"
"StaxStreamXMLReader.java:160"$1$0$0$4$33$"				public String getSystemId() {"
"StaxStreamXMLReader.java:161"$1$0$0$8$63$"					return (location != null ? location.getSystemId() : null);"
"StaxStreamXMLReader.java:162"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:163"$0$0$0$1$13$"				@Override"
"StaxStreamXMLReader.java:164"$1$0$0$4$35$"				public String getXMLVersion() {"
"StaxStreamXMLReader.java:165"$0$0$0$2$23$"					return xmlVersion;"
"StaxStreamXMLReader.java:166"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:167"$0$0$0$1$13$"				@Override"
"StaxStreamXMLReader.java:168"$0$0$0$1$13$"				@Nullable"
"StaxStreamXMLReader.java:169"$1$0$0$4$33$"				public String getEncoding() {"
"StaxStreamXMLReader.java:170"$0$0$0$2$21$"					return encoding;"
"StaxStreamXMLReader.java:171"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:172"$0$0$0$1$6$"			});"
"StaxStreamXMLReader.java:173"$1$0$0$1$39$"			getContentHandler().startDocument();"
"StaxStreamXMLReader.java:174"$0$0$0$3$37$"			if (this.reader.standaloneSet()) {"
"StaxStreamXMLReader.java:175"$0$0$0$1$46$"				setStandalone(this.reader.isStandalone());"
"StaxStreamXMLReader.java:176"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:177"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:178"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:179"$0$0$0$0$0$""
"StaxStreamXMLReader.java:180"$0$0$0$6$56$"	private void handleStartElement() throws SAXException {"
"StaxStreamXMLReader.java:181"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxStreamXMLReader.java:182"$1$0$0$4$39$"			QName qName = this.reader.getName();"
"StaxStreamXMLReader.java:183"$0$0$0$3$32$"			if (hasNamespacesFeature()) {"
"StaxStreamXMLReader.java:184"$1$0$0$10$63$"				for (int i = 0; i < this.reader.getNamespaceCount(); i++) {"
"StaxStreamXMLReader.java:185"$2$0$0$2$91$"					startPrefixMapping(this.reader.getNamespacePrefix(i), this.reader.getNamespaceURI(i));"
"StaxStreamXMLReader.java:186"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:187"$1$0$0$10$63$"				for (int i = 0; i < this.reader.getAttributeCount(); i++) {"
"StaxStreamXMLReader.java:188"$1$0$0$4$55$"					String prefix = this.reader.getAttributePrefix(i);"
"StaxStreamXMLReader.java:189"$1$0$0$4$61$"					String namespace = this.reader.getAttributeNamespace(i);"
"StaxStreamXMLReader.java:190"$0$0$0$3$44$"					if (StringUtils.hasLength(namespace)) {"
"StaxStreamXMLReader.java:191"$0$0$0$2$44$"						startPrefixMapping(prefix, namespace);"
"StaxStreamXMLReader.java:192"$0$0$0$1$6$"					}"
"StaxStreamXMLReader.java:193"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:194"$3$0$0$2$83$"				getContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalPart(),"
"StaxStreamXMLReader.java:195"$1$0$0$2$47$"						toQualifiedName(qName), getAttributes());"
"StaxStreamXMLReader.java:196"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:197"$0$0$0$2$9$"			else {"
"StaxStreamXMLReader.java:198"$2$0$0$4$86$"				getContentHandler().startElement("""", """", toQualifiedName(qName), getAttributes());"
"StaxStreamXMLReader.java:199"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:200"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:201"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:202"$0$0$0$0$0$""
"StaxStreamXMLReader.java:203"$0$0$0$6$54$"	private void handleEndElement() throws SAXException {"
"StaxStreamXMLReader.java:204"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxStreamXMLReader.java:205"$1$0$0$4$39$"			QName qName = this.reader.getName();"
"StaxStreamXMLReader.java:206"$0$0$0$3$32$"			if (hasNamespacesFeature()) {"
"StaxStreamXMLReader.java:207"$3$0$0$3$106$"				getContentHandler().endElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName));"
"StaxStreamXMLReader.java:208"$1$0$0$10$63$"				for (int i = 0; i < this.reader.getNamespaceCount(); i++) {"
"StaxStreamXMLReader.java:209"$1$0$0$4$55$"					String prefix = this.reader.getNamespacePrefix(i);"
"StaxStreamXMLReader.java:210"$0$0$0$5$26$"					if (prefix == null) {"
"StaxStreamXMLReader.java:211"$0$0$0$3$18$"						prefix = """";"
"StaxStreamXMLReader.java:212"$0$0$0$1$6$"					}"
"StaxStreamXMLReader.java:213"$0$0$0$1$30$"					endPrefixMapping(prefix);"
"StaxStreamXMLReader.java:214"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:215"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:216"$0$0$0$2$9$"			else {"
"StaxStreamXMLReader.java:217"$1$0$0$3$67$"				getContentHandler().endElement("""", """", toQualifiedName(qName));"
"StaxStreamXMLReader.java:218"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:219"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:220"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:221"$0$0$0$0$0$""
"StaxStreamXMLReader.java:222"$0$0$0$6$54$"	private void handleCharacters() throws SAXException {"
"StaxStreamXMLReader.java:223"$2$0$0$9$94$"		if (XMLStreamConstants.CDATA == this.reader.getEventType() && getLexicalHandler() != null) {"
"StaxStreamXMLReader.java:224"$1$0$0$1$36$"			getLexicalHandler().startCDATA();"
"StaxStreamXMLReader.java:225"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:226"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxStreamXMLReader.java:227"$2$0$0$1$66$"			getContentHandler().characters(this.reader.getTextCharacters(),"
"StaxStreamXMLReader.java:228"$2$0$0$2$62$"					this.reader.getTextStart(), this.reader.getTextLength());"
"StaxStreamXMLReader.java:229"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:230"$2$0$0$9$94$"		if (XMLStreamConstants.CDATA == this.reader.getEventType() && getLexicalHandler() != null) {"
"StaxStreamXMLReader.java:231"$1$0$0$1$34$"			getLexicalHandler().endCDATA();"
"StaxStreamXMLReader.java:232"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:233"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:234"$0$0$0$0$0$""
"StaxStreamXMLReader.java:235"$0$0$0$6$51$"	private void handleComment() throws SAXException {"
"StaxStreamXMLReader.java:236"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxStreamXMLReader.java:237"$2$0$0$1$63$"			getLexicalHandler().comment(this.reader.getTextCharacters(),"
"StaxStreamXMLReader.java:238"$2$0$0$2$62$"					this.reader.getTextStart(), this.reader.getTextLength());"
"StaxStreamXMLReader.java:239"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:240"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:241"$0$0$0$0$0$""
"StaxStreamXMLReader.java:242"$0$0$0$6$47$"	private void handleDtd() throws SAXException {"
"StaxStreamXMLReader.java:243"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxStreamXMLReader.java:244"$1$0$0$4$49$"			Location location = this.reader.getLocation();"
"StaxStreamXMLReader.java:245"$3$0$0$3$86$"			getLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());"
"StaxStreamXMLReader.java:246"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:247"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxStreamXMLReader.java:248"$1$0$0$1$32$"			getLexicalHandler().endDTD();"
"StaxStreamXMLReader.java:249"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:250"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:251"$0$0$0$0$0$""
"StaxStreamXMLReader.java:252"$0$0$0$6$59$"	private void handleEntityReference() throws SAXException {"
"StaxStreamXMLReader.java:253"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxStreamXMLReader.java:254"$2$0$0$1$63$"			getLexicalHandler().startEntity(this.reader.getLocalName());"
"StaxStreamXMLReader.java:255"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:256"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxStreamXMLReader.java:257"$2$0$0$1$61$"			getLexicalHandler().endEntity(this.reader.getLocalName());"
"StaxStreamXMLReader.java:258"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:259"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:260"$0$0$0$0$0$""
"StaxStreamXMLReader.java:261"$0$0$0$6$55$"	private void handleEndDocument() throws SAXException {"
"StaxStreamXMLReader.java:262"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxStreamXMLReader.java:263"$1$0$0$1$37$"			getContentHandler().endDocument();"
"StaxStreamXMLReader.java:264"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:265"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:266"$0$0$0$0$0$""
"StaxStreamXMLReader.java:267"$0$0$0$6$65$"	private void handleProcessingInstruction() throws SAXException {"
"StaxStreamXMLReader.java:268"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxStreamXMLReader.java:269"$4$0$0$2$97$"			getContentHandler().processingInstruction(this.reader.getPITarget(), this.reader.getPIData());"
"StaxStreamXMLReader.java:270"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:271"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:272"$0$0$0$0$0$""
"StaxStreamXMLReader.java:273"$1$0$0$4$37$"	private Attributes getAttributes() {"
"StaxStreamXMLReader.java:274"$0$0$0$5$51$"		AttributesImpl attributes = new AttributesImpl();"
"StaxStreamXMLReader.java:275"$1$0$0$10$61$"		for (int i = 0; i < this.reader.getAttributeCount(); i++) {"
"StaxStreamXMLReader.java:276"$1$0$0$4$59$"			String namespace = this.reader.getAttributeNamespace(i);"
"StaxStreamXMLReader.java:277"$0$0$0$7$54$"			if (namespace == null || !hasNamespacesFeature()) {"
"StaxStreamXMLReader.java:278"$0$0$0$3$19$"				namespace = """";"
"StaxStreamXMLReader.java:279"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:280"$1$0$0$4$49$"			String type = this.reader.getAttributeType(i);"
"StaxStreamXMLReader.java:281"$0$0$0$5$22$"			if (type == null) {"
"StaxStreamXMLReader.java:282"$0$0$0$3$19$"				type = ""CDATA"";"
"StaxStreamXMLReader.java:283"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:284"$1$0$0$2$75$"			attributes.addAttribute(namespace, this.reader.getAttributeLocalName(i),"
"StaxStreamXMLReader.java:285"$2$0$0$3$95$"					toQualifiedName(this.reader.getAttributeName(i)), type, this.reader.getAttributeValue(i));"
"StaxStreamXMLReader.java:286"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:287"$0$0$0$3$38$"		if (hasNamespacePrefixesFeature()) {"
"StaxStreamXMLReader.java:288"$1$0$0$10$62$"			for (int i = 0; i < this.reader.getNamespaceCount(); i++) {"
"StaxStreamXMLReader.java:289"$1$0$0$4$54$"				String prefix = this.reader.getNamespacePrefix(i);"
"StaxStreamXMLReader.java:290"$1$0$0$4$57$"				String namespaceUri = this.reader.getNamespaceURI(i);"
"StaxStreamXMLReader.java:291"$0$0$0$2$17$"				String qName;"
"StaxStreamXMLReader.java:292"$0$0$0$3$40$"				if (StringUtils.hasLength(prefix)) {"
"StaxStreamXMLReader.java:293"$0$0$0$5$31$"					qName = ""xmlns:"" + prefix;"
"StaxStreamXMLReader.java:294"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:295"$0$0$0$2$10$"				else {"
"StaxStreamXMLReader.java:296"$0$0$0$3$21$"					qName = ""xmlns"";"
"StaxStreamXMLReader.java:297"$0$0$0$1$5$"				}"
"StaxStreamXMLReader.java:298"$0$0$0$5$66$"				attributes.addAttribute("""", """", qName, ""CDATA"", namespaceUri);"
"StaxStreamXMLReader.java:299"$0$0$0$1$4$"			}"
"StaxStreamXMLReader.java:300"$0$0$0$1$3$"		}"
"StaxStreamXMLReader.java:301"$0$0$0$0$0$""
"StaxStreamXMLReader.java:302"$0$0$0$2$20$"		return attributes;"
"StaxStreamXMLReader.java:303"$0$0$0$1$2$"	}"
"StaxStreamXMLReader.java:304"$0$0$0$0$0$""
"StaxStreamXMLReader.java:305"$0$0$0$1$1$"}"
"OrderComparator.java:1"$0$0$0$1$2$"/*"
"OrderComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"OrderComparator.java:3"$0$0$0$1$2$" *"
"OrderComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"OrderComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"OrderComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"OrderComparator.java:7"$0$0$0$1$2$" *"
"OrderComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"OrderComparator.java:9"$0$0$0$1$2$" *"
"OrderComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"OrderComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"OrderComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"OrderComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"OrderComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"OrderComparator.java:15"$0$0$0$1$3$" */"
"OrderComparator.java:16"$0$0$0$0$0$""
"OrderComparator.java:17"$0$0$0$2$33$"package org.springframework.core;"
"OrderComparator.java:18"$0$0$0$0$0$""
"OrderComparator.java:19"$0$0$0$2$24$"import java.util.Arrays;"
"OrderComparator.java:20"$0$0$0$2$28$"import java.util.Comparator;"
"OrderComparator.java:21"$0$0$0$2$22$"import java.util.List;"
"OrderComparator.java:22"$0$0$0$0$0$""
"OrderComparator.java:23"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"OrderComparator.java:24"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"OrderComparator.java:25"$0$0$0$0$0$""
"OrderComparator.java:26"$0$0$0$1$3$"/**"
"OrderComparator.java:27"$0$0$0$9$73$" * {@link Comparator} implementation for {@link Ordered} objects, sorting"
"OrderComparator.java:28"$0$0$0$9$65$" * by order value ascending, respectively by priority descending."
"OrderComparator.java:29"$0$0$0$1$2$" *"
"OrderComparator.java:30"$0$0$0$4$43$" * <h3>{@code PriorityOrdered} Objects</h3>"
"OrderComparator.java:31"$0$0$0$11$78$" * <p>{@link PriorityOrdered} objects will be sorted with higher priority than"
"OrderComparator.java:32"$0$0$0$5$42$" * <em>plain</em> {@code Ordered} objects."
"OrderComparator.java:33"$0$0$0$1$2$" *"
"OrderComparator.java:34"$0$0$0$4$30$" * <h3>Same Order Objects</h3>"
"OrderComparator.java:35"$0$0$0$13$74$" * <p>Objects that have the same order value will be sorted with arbitrary"
"OrderComparator.java:36"$0$0$0$12$68$" * ordering with respect to other objects with the same order value."
"OrderComparator.java:37"$0$0$0$1$2$" *"
"OrderComparator.java:38"$0$0$0$3$31$" * <h3>Non-ordered Objects</h3>"
"OrderComparator.java:39"$0$0$0$13$72$" * <p>Any object that does not provide its own order value is implicitly"
"OrderComparator.java:40"$0$0$0$10$72$" * assigned a value of {@link Ordered#LOWEST_PRECEDENCE}, thus ending up"
"OrderComparator.java:41"$0$0$0$14$71$" * at the end of a sorted collection in arbitrary order with respect to"
"OrderComparator.java:42"$0$0$0$8$43$" * other objects with the same order value."
"OrderComparator.java:43"$0$0$0$1$2$" *"
"OrderComparator.java:44"$0$0$0$4$26$" * @author Juergen Hoeller"
"OrderComparator.java:45"$0$0$0$4$22$" * @author Sam Brannen"
"OrderComparator.java:46"$0$0$0$3$20$" * @since 07.04.2003"
"OrderComparator.java:47"$0$0$0$3$15$" * @see Ordered"
"OrderComparator.java:48"$0$0$0$3$23$" * @see PriorityOrdered"
"OrderComparator.java:49"$0$0$0$3$74$" * @see org.springframework.core.annotation.AnnotationAwareOrderComparator"
"OrderComparator.java:50"$0$0$0$3$49$" * @see java.util.List#sort(java.util.Comparator)"
"OrderComparator.java:51"$0$0$0$4$61$" * @see java.util.Arrays#sort(Object[], java.util.Comparator)"
"OrderComparator.java:52"$0$0$0$1$3$" */"
"OrderComparator.java:53"$0$0$0$6$60$"public class OrderComparator implements Comparator<Object> {"
"OrderComparator.java:54"$0$0$0$0$0$""
"OrderComparator.java:55"$0$0$0$1$4$"	/**"
"OrderComparator.java:56"$0$0$0$7$55$"	 * Shared default instance of {@code OrderComparator}."
"OrderComparator.java:57"$0$0$0$1$4$"	 */"
"OrderComparator.java:58"$0$0$0$8$70$"	public static final OrderComparator INSTANCE = new OrderComparator();"
"OrderComparator.java:59"$0$0$0$0$0$""
"OrderComparator.java:60"$0$0$0$0$0$""
"OrderComparator.java:61"$0$0$0$1$4$"	/**"
"OrderComparator.java:62"$0$0$0$11$69$"	 * Build an adapted order comparator with the given source provider."
"OrderComparator.java:63"$0$0$0$9$58$"	 * @param sourceProvider the order source provider to use"
"OrderComparator.java:64"$0$0$0$5$34$"	 * @return the adapted comparator"
"OrderComparator.java:65"$0$0$0$3$14$"	 * @since 4.1"
"OrderComparator.java:66"$0$0$0$1$4$"	 */"
"OrderComparator.java:67"$0$0$0$5$83$"	public Comparator<Object> withSourceProvider(OrderSourceProvider sourceProvider) {"
"OrderComparator.java:68"$0$0$0$7$55$"		return (o1, o2) -> doCompare(o1, o2, sourceProvider);"
"OrderComparator.java:69"$0$0$0$1$2$"	}"
"OrderComparator.java:70"$0$0$0$0$0$""
"OrderComparator.java:71"$0$0$0$1$10$"	@Override"
"OrderComparator.java:72"$0$0$0$9$63$"	public int compare(@Nullable Object o1, @Nullable Object o2) {"
"OrderComparator.java:73"$0$0$0$4$33$"		return doCompare(o1, o2, null);"
"OrderComparator.java:74"$0$0$0$1$2$"	}"
"OrderComparator.java:75"$0$0$0$0$0$""
"OrderComparator.java:76"$0$0$0$12$112$"	private int doCompare(@Nullable Object o1, @Nullable Object o2, @Nullable OrderSourceProvider sourceProvider) {"
"OrderComparator.java:77"$0$0$0$6$47$"		boolean p1 = (o1 instanceof PriorityOrdered);"
"OrderComparator.java:78"$0$0$0$6$47$"		boolean p2 = (o2 instanceof PriorityOrdered);"
"OrderComparator.java:79"$0$0$0$5$18$"		if (p1 && !p2) {"
"OrderComparator.java:80"$0$0$0$2$13$"			return -1;"
"OrderComparator.java:81"$0$0$0$1$3$"		}"
"OrderComparator.java:82"$0$0$0$6$23$"		else if (p2 && !p1) {"
"OrderComparator.java:83"$0$0$0$2$12$"			return 1;"
"OrderComparator.java:84"$0$0$0$1$3$"		}"
"OrderComparator.java:85"$0$0$0$0$0$""
"OrderComparator.java:86"$1$0$0$5$40$"		int i1 = getOrder(o1, sourceProvider);"
"OrderComparator.java:87"$1$0$0$5$40$"		int i2 = getOrder(o2, sourceProvider);"
"OrderComparator.java:88"$0$0$0$3$33$"		return Integer.compare(i1, i2);"
"OrderComparator.java:89"$0$0$0$1$2$"	}"
"OrderComparator.java:90"$0$0$0$0$0$""
"OrderComparator.java:91"$0$0$0$1$4$"	/**"
"OrderComparator.java:92"$0$0$0$9$51$"	 * Determine the order value for the given object."
"OrderComparator.java:93"$0$0$0$10$86$"	 * <p>The default implementation checks against the given {@link OrderSourceProvider}"
"OrderComparator.java:94"$1$0$0$13$88$"	 * using {@link #findOrder} and falls back to a regular {@link #getOrder(Object)} call."
"OrderComparator.java:95"$0$0$0$7$34$"	 * @param obj the object to check"
"OrderComparator.java:96"$0$0$0$10$77$"	 * @return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback"
"OrderComparator.java:97"$0$0$0$1$4$"	 */"
"OrderComparator.java:98"$1$0$0$9$91$"	private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {"
"OrderComparator.java:99"$0$0$0$4$23$"		Integer order = null;"
"OrderComparator.java:100"$0$0$0$9$46$"		if (obj != null && sourceProvider != null) {"
"OrderComparator.java:101"$1$0$0$4$59$"			Object orderSource = sourceProvider.getOrderSource(obj);"
"OrderComparator.java:102"$0$0$0$5$29$"			if (orderSource != null) {"
"OrderComparator.java:103"$1$0$0$3$43$"				if (orderSource.getClass().isArray()) {"
"OrderComparator.java:104"$0$0$0$4$63$"					Object[] sources = ObjectUtils.toObjectArray(orderSource);"
"OrderComparator.java:105"$0$0$0$6$36$"					for (Object source : sources) {"
"OrderComparator.java:106"$0$0$0$3$32$"						order = findOrder(source);"
"OrderComparator.java:107"$0$0$0$5$26$"						if (order != null) {"
"OrderComparator.java:108"$0$0$0$1$13$"							break;"
"OrderComparator.java:109"$0$0$0$1$7$"						}"
"OrderComparator.java:110"$0$0$0$1$6$"					}"
"OrderComparator.java:111"$0$0$0$1$5$"				}"
"OrderComparator.java:112"$0$0$0$2$10$"				else {"
"OrderComparator.java:113"$0$0$0$3$36$"					order = findOrder(orderSource);"
"OrderComparator.java:114"$0$0$0$1$5$"				}"
"OrderComparator.java:115"$0$0$0$1$4$"			}"
"OrderComparator.java:116"$0$0$0$1$3$"		}"
"OrderComparator.java:117"$1$0$0$8$49$"		return (order != null ? order : getOrder(obj));"
"OrderComparator.java:118"$0$0$0$1$2$"	}"
"OrderComparator.java:119"$0$0$0$0$0$""
"OrderComparator.java:120"$0$0$0$1$4$"	/**"
"OrderComparator.java:121"$0$0$0$9$51$"	 * Determine the order value for the given object."
"OrderComparator.java:122"$0$0$0$10$78$"	 * <p>The default implementation checks against the {@link Ordered} interface"
"OrderComparator.java:123"$0$0$0$11$78$"	 * through delegating to {@link #findOrder}. Can be overridden in subclasses."
"OrderComparator.java:124"$0$0$0$7$34$"	 * @param obj the object to check"
"OrderComparator.java:125"$0$0$0$10$77$"	 * @return the order value, or {@code Ordered.LOWEST_PRECEDENCE} as fallback"
"OrderComparator.java:126"$0$0$0$1$4$"	 */"
"OrderComparator.java:127"$1$0$0$6$47$"	protected int getOrder(@Nullable Object obj) {"
"OrderComparator.java:128"$0$0$0$5$20$"		if (obj != null) {"
"OrderComparator.java:129"$0$0$0$4$34$"			Integer order = findOrder(obj);"
"OrderComparator.java:130"$0$0$0$5$23$"			if (order != null) {"
"OrderComparator.java:131"$0$0$0$2$17$"				return order;"
"OrderComparator.java:132"$0$0$0$1$4$"			}"
"OrderComparator.java:133"$0$0$0$1$3$"		}"
"OrderComparator.java:134"$0$0$0$2$35$"		return Ordered.LOWEST_PRECEDENCE;"
"OrderComparator.java:135"$0$0$0$1$2$"	}"
"OrderComparator.java:136"$0$0$0$0$0$""
"OrderComparator.java:137"$0$0$0$1$4$"	/**"
"OrderComparator.java:138"$0$0$0$10$54$"	 * Find an order value indicated by the given object."
"OrderComparator.java:139"$0$0$0$10$79$"	 * <p>The default implementation checks against the {@link Ordered} interface."
"OrderComparator.java:140"$0$0$0$6$36$"	 * Can be overridden in subclasses."
"OrderComparator.java:141"$0$0$0$7$34$"	 * @param obj the object to check"
"OrderComparator.java:142"$0$0$0$11$58$"	 * @return the order value, or {@code null} if none found"
"OrderComparator.java:143"$0$0$0$1$4$"	 */"
"OrderComparator.java:144"$0$0$0$1$10$"	@Nullable"
"OrderComparator.java:145"$0$0$0$5$42$"	protected Integer findOrder(Object obj) {"
"OrderComparator.java:146"$1$0$0$9$70$"		return (obj instanceof Ordered ? ((Ordered) obj).getOrder() : null);"
"OrderComparator.java:147"$0$0$0$1$2$"	}"
"OrderComparator.java:148"$0$0$0$0$0$""
"OrderComparator.java:149"$0$0$0$1$4$"	/**"
"OrderComparator.java:150"$0$0$0$11$60$"	 * Determine a priority value for the given object, if any."
"OrderComparator.java:151"$0$0$0$8$62$"	 * <p>The default implementation always returns {@code null}."
"OrderComparator.java:152"$0$0$0$12$67$"	 * Subclasses may override this to give specific kinds of values a"
"OrderComparator.java:153"$0$0$0$9$70$"	 * 'priority' characteristic, in addition to their 'order' semantics."
"OrderComparator.java:154"$0$0$0$14$74$"	 * A priority indicates that it may be used for selecting one object over"
"OrderComparator.java:155"$0$0$0$12$74$"	 * another, in addition to serving for ordering purposes in a list/array."
"OrderComparator.java:156"$0$0$0$7$34$"	 * @param obj the object to check"
"OrderComparator.java:157"$0$0$0$10$55$"	 * @return the priority value, or {@code null} if none"
"OrderComparator.java:158"$0$0$0$3$14$"	 * @since 4.1"
"OrderComparator.java:159"$0$0$0$1$4$"	 */"
"OrderComparator.java:160"$0$0$0$1$10$"	@Nullable"
"OrderComparator.java:161"$1$0$0$5$41$"	public Integer getPriority(Object obj) {"
"OrderComparator.java:162"$0$0$0$2$14$"		return null;"
"OrderComparator.java:163"$0$0$0$1$2$"	}"
"OrderComparator.java:164"$0$0$0$0$0$""
"OrderComparator.java:165"$0$0$0$0$0$""
"OrderComparator.java:166"$0$0$0$1$4$"	/**"
"OrderComparator.java:167"$0$0$0$9$55$"	 * Sort the given List with a default OrderComparator."
"OrderComparator.java:168"$0$0$0$12$60$"	 * <p>Optimized to skip sorting for lists with size 0 or 1,"
"OrderComparator.java:169"$0$0$0$8$51$"	 * in order to avoid unnecessary array extraction."
"OrderComparator.java:170"$0$0$0$7$32$"	 * @param list the List to sort"
"OrderComparator.java:171"$0$0$0$3$50$"	 * @see java.util.List#sort(java.util.Comparator)"
"OrderComparator.java:172"$0$0$0$1$4$"	 */"
"OrderComparator.java:173"$0$0$0$6$40$"	public static void sort(List<?> list) {"
"OrderComparator.java:174"$0$0$0$5$24$"		if (list.size() > 1) {"
"OrderComparator.java:175"$0$0$0$1$23$"			list.sort(INSTANCE);"
"OrderComparator.java:176"$0$0$0$1$3$"		}"
"OrderComparator.java:177"$0$0$0$1$2$"	}"
"OrderComparator.java:178"$0$0$0$0$0$""
"OrderComparator.java:179"$0$0$0$1$4$"	/**"
"OrderComparator.java:180"$0$0$0$9$56$"	 * Sort the given array with a default OrderComparator."
"OrderComparator.java:181"$0$0$0$12$60$"	 * <p>Optimized to skip sorting for lists with size 0 or 1,"
"OrderComparator.java:182"$0$0$0$8$51$"	 * in order to avoid unnecessary array extraction."
"OrderComparator.java:183"$0$0$0$7$34$"	 * @param array the array to sort"
"OrderComparator.java:184"$0$0$0$4$62$"	 * @see java.util.Arrays#sort(Object[], java.util.Comparator)"
"OrderComparator.java:185"$0$0$0$1$4$"	 */"
"OrderComparator.java:186"$0$0$0$6$42$"	public static void sort(Object[] array) {"
"OrderComparator.java:187"$0$0$0$5$25$"		if (array.length > 1) {"
"OrderComparator.java:188"$0$0$0$2$32$"			Arrays.sort(array, INSTANCE);"
"OrderComparator.java:189"$0$0$0$1$3$"		}"
"OrderComparator.java:190"$0$0$0$1$2$"	}"
"OrderComparator.java:191"$0$0$0$0$0$""
"OrderComparator.java:192"$0$0$0$1$4$"	/**"
"OrderComparator.java:193"$0$0$0$11$64$"	 * Sort the given array or List with a default OrderComparator,"
"OrderComparator.java:194"$0$0$0$11$66$"	 * if necessary. Simply skips sorting when given any other value."
"OrderComparator.java:195"$0$0$0$12$60$"	 * <p>Optimized to skip sorting for lists with size 0 or 1,"
"OrderComparator.java:196"$0$0$0$8$51$"	 * in order to avoid unnecessary array extraction."
"OrderComparator.java:197"$0$0$0$9$42$"	 * @param value the array or List to sort"
"OrderComparator.java:198"$0$0$0$4$62$"	 * @see java.util.Arrays#sort(Object[], java.util.Comparator)"
"OrderComparator.java:199"$0$0$0$1$4$"	 */"
"OrderComparator.java:200"$0$0$0$6$51$"	public static void sortIfNecessary(Object value) {"
"OrderComparator.java:201"$0$0$0$5$34$"		if (value instanceof Object[]) {"
"OrderComparator.java:202"$0$0$0$2$26$"			sort((Object[]) value);"
"OrderComparator.java:203"$0$0$0$1$3$"		}"
"OrderComparator.java:204"$0$0$0$6$35$"		else if (value instanceof List) {"
"OrderComparator.java:205"$0$0$0$2$25$"			sort((List<?>) value);"
"OrderComparator.java:206"$0$0$0$1$3$"		}"
"OrderComparator.java:207"$0$0$0$1$2$"	}"
"OrderComparator.java:208"$0$0$0$0$0$""
"OrderComparator.java:209"$0$0$0$0$0$""
"OrderComparator.java:210"$0$0$0$1$4$"	/**"
"OrderComparator.java:211"$0$0$0$12$69$"	 * Strategy interface to provide an order source for a given object."
"OrderComparator.java:212"$0$0$0$3$14$"	 * @since 4.1"
"OrderComparator.java:213"$0$0$0$1$4$"	 */"
"OrderComparator.java:214"$0$0$0$1$21$"	@FunctionalInterface"
"OrderComparator.java:215"$0$0$0$4$39$"	public interface OrderSourceProvider {"
"OrderComparator.java:216"$0$0$0$0$0$""
"OrderComparator.java:217"$0$0$0$1$5$"		/**"
"OrderComparator.java:218"$0$0$0$13$73$"		 * Return an order source for the specified object, i.e. an object that"
"OrderComparator.java:219"$0$0$0$15$79$"		 * should be checked for an order value as a replacement to the given object."
"OrderComparator.java:220"$0$0$0$10$53$"		 * <p>Can also be an array of order source objects."
"OrderComparator.java:221"$0$0$0$12$74$"		 * <p>If the returned object does not indicate any order, the comparator"
"OrderComparator.java:222"$0$0$0$9$52$"		 * will fall back to checking the original object."
"OrderComparator.java:223"$0$0$0$11$54$"		 * @param obj the object to find an order source for"
"OrderComparator.java:224"$0$0$0$14$76$"		 * @return the order source for that object, or {@code null} if none found"
"OrderComparator.java:225"$0$0$0$1$5$"		 */"
"OrderComparator.java:226"$0$0$0$1$11$"		@Nullable"
"OrderComparator.java:227"$1$0$0$3$36$"		Object getOrderSource(Object obj);"
"OrderComparator.java:228"$0$0$0$1$2$"	}"
"OrderComparator.java:229"$0$0$0$0$0$""
"OrderComparator.java:230"$0$0$0$1$1$"}"
"ResourceRegionEncoder.java:1"$0$0$0$1$2$"/*"
"ResourceRegionEncoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ResourceRegionEncoder.java:3"$0$0$0$1$2$" *"
"ResourceRegionEncoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourceRegionEncoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourceRegionEncoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourceRegionEncoder.java:7"$0$0$0$1$2$" *"
"ResourceRegionEncoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourceRegionEncoder.java:9"$0$0$0$1$2$" *"
"ResourceRegionEncoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourceRegionEncoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourceRegionEncoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourceRegionEncoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourceRegionEncoder.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourceRegionEncoder.java:15"$0$0$0$1$3$" */"
"ResourceRegionEncoder.java:16"$0$0$0$0$0$""
"ResourceRegionEncoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"ResourceRegionEncoder.java:18"$0$0$0$0$0$""
"ResourceRegionEncoder.java:19"$0$0$0$2$27$"import java.io.IOException;"
"ResourceRegionEncoder.java:20"$0$0$0$2$41$"import java.nio.charset.StandardCharsets;"
"ResourceRegionEncoder.java:21"$0$0$0$2$21$"import java.util.Map;"
"ResourceRegionEncoder.java:22"$0$0$0$2$30$"import java.util.OptionalLong;"
"ResourceRegionEncoder.java:23"$0$0$0$0$0$""
"ResourceRegionEncoder.java:24"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"ResourceRegionEncoder.java:25"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"ResourceRegionEncoder.java:26"$0$0$0$2$35$"import reactor.core.publisher.Mono;"
"ResourceRegionEncoder.java:27"$0$0$0$0$0$""
"ResourceRegionEncoder.java:28"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"ResourceRegionEncoder.java:29"$0$0$0$2$55$"import org.springframework.core.io.InputStreamResource;"
"ResourceRegionEncoder.java:30"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"ResourceRegionEncoder.java:31"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"ResourceRegionEncoder.java:32"$0$0$0$2$60$"import org.springframework.core.io.buffer.DataBufferFactory;"
"ResourceRegionEncoder.java:33"$0$0$0$2$58$"import org.springframework.core.io.buffer.DataBufferUtils;"
"ResourceRegionEncoder.java:34"$0$0$0$2$58$"import org.springframework.core.io.support.ResourceRegion;"
"ResourceRegionEncoder.java:35"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResourceRegionEncoder.java:36"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ResourceRegionEncoder.java:37"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"ResourceRegionEncoder.java:38"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"ResourceRegionEncoder.java:39"$0$0$0$2$44$"import org.springframework.util.StreamUtils;"
"ResourceRegionEncoder.java:40"$0$0$0$0$0$""
"ResourceRegionEncoder.java:41"$0$0$0$1$3$"/**"
"ResourceRegionEncoder.java:42"$0$0$0$6$54$" * Encoder for {@link ResourceRegion ResourceRegions}."
"ResourceRegionEncoder.java:43"$0$0$0$1$2$" *"
"ResourceRegionEncoder.java:44"$0$0$0$4$23$" * @author Brian Clozel"
"ResourceRegionEncoder.java:45"$0$0$0$3$13$" * @since 5.0"
"ResourceRegionEncoder.java:46"$0$0$0$1$3$" */"
"ResourceRegionEncoder.java:47"$0$0$0$6$76$"public class ResourceRegionEncoder extends AbstractEncoder<ResourceRegion> {"
"ResourceRegionEncoder.java:48"$0$0$0$0$0$""
"ResourceRegionEncoder.java:49"$0$0$0$1$4$"	/**"
"ResourceRegionEncoder.java:50"$0$0$0$9$48$"	 * The default buffer size used by the encoder."
"ResourceRegionEncoder.java:51"$0$0$0$1$4$"	 */"
"ResourceRegionEncoder.java:52"$0$0$0$7$71$"	public static final int DEFAULT_BUFFER_SIZE = StreamUtils.BUFFER_SIZE;"
"ResourceRegionEncoder.java:53"$0$0$0$0$0$""
"ResourceRegionEncoder.java:54"$0$0$0$1$4$"	/**"
"ResourceRegionEncoder.java:55"$0$0$0$9$51$"	 * The hint key that contains the boundary string."
"ResourceRegionEncoder.java:56"$0$0$0$1$4$"	 */"
"ResourceRegionEncoder.java:57"$1$0$0$9$109$"	public static final String BOUNDARY_STRING_HINT = ResourceRegionEncoder.class.getName() + "".boundaryString"";"
"ResourceRegionEncoder.java:58"$0$0$0$0$0$""
"ResourceRegionEncoder.java:59"$0$0$0$4$30$"	private final int bufferSize;"
"ResourceRegionEncoder.java:60"$0$0$0$0$0$""
"ResourceRegionEncoder.java:61"$0$0$0$0$0$""
"ResourceRegionEncoder.java:62"$0$0$0$3$33$"	public ResourceRegionEncoder() {"
"ResourceRegionEncoder.java:63"$0$0$0$1$28$"		this(DEFAULT_BUFFER_SIZE);"
"ResourceRegionEncoder.java:64"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:65"$0$0$0$0$0$""
"ResourceRegionEncoder.java:66"$0$0$0$4$47$"	public ResourceRegionEncoder(int bufferSize) {"
"ResourceRegionEncoder.java:67"$0$0$0$2$67$"		super(MimeTypeUtils.APPLICATION_OCTET_STREAM, MimeTypeUtils.ALL);"
"ResourceRegionEncoder.java:68"$0$0$0$9$70$"		Assert.isTrue(bufferSize > 0, ""'bufferSize' must be larger than 0"");"
"ResourceRegionEncoder.java:69"$0$0$0$3$31$"		this.bufferSize = bufferSize;"
"ResourceRegionEncoder.java:70"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:71"$0$0$0$0$0$""
"ResourceRegionEncoder.java:72"$0$0$0$1$10$"	@Override"
"ResourceRegionEncoder.java:73"$0$0$0$8$84$"	public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"ResourceRegionEncoder.java:74"$0$0$0$3$47$"		return super.canEncode(elementType, mimeType)"
"ResourceRegionEncoder.java:75"$0$0$0$2$68$"				&& ResourceRegion.class.isAssignableFrom(elementType.toClass());"
"ResourceRegionEncoder.java:76"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:77"$0$0$0$0$0$""
"ResourceRegionEncoder.java:78"$0$0$0$1$10$"	@Override"
"ResourceRegionEncoder.java:79"$0$0$0$6$74$"	public Flux<DataBuffer> encode(Publisher<? extends ResourceRegion> input,"
"ResourceRegionEncoder.java:80"$0$0$0$7$92$"			DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,"
"ResourceRegionEncoder.java:81"$0$0$0$5$41$"			@Nullable Map<String, Object> hints) {"
"ResourceRegionEncoder.java:82"$0$0$0$0$0$""
"ResourceRegionEncoder.java:83"$0$0$0$6$58$"		Assert.notNull(input, ""'inputStream' must not be null"");"
"ResourceRegionEncoder.java:84"$0$0$0$6$68$"		Assert.notNull(bufferFactory, ""'bufferFactory' must not be null"");"
"ResourceRegionEncoder.java:85"$0$0$0$6$64$"		Assert.notNull(elementType, ""'elementType' must not be null"");"
"ResourceRegionEncoder.java:86"$0$0$0$0$0$""
"ResourceRegionEncoder.java:87"$0$0$0$5$30$"		if (input instanceof Mono) {"
"ResourceRegionEncoder.java:88"$0$0$0$2$26$"			return Mono.from(input)"
"ResourceRegionEncoder.java:89"$0$0$0$3$29$"					.flatMapMany(region -> {"
"ResourceRegionEncoder.java:90"$1$0$0$3$47$"						if (!region.getResource().isReadable()) {"
"ResourceRegionEncoder.java:91"$0$0$0$3$47$"							return Flux.error(new EncodingException("
"ResourceRegionEncoder.java:92"$1$0$0$9$67$"									""Resource "" + region.getResource() + "" is not readable""));"
"ResourceRegionEncoder.java:93"$0$0$0$1$7$"						}"
"ResourceRegionEncoder.java:94"$0$0$0$4$63$"						return writeResourceRegion(region, bufferFactory, hints);"
"ResourceRegionEncoder.java:95"$0$0$0$1$8$"					});"
"ResourceRegionEncoder.java:96"$0$0$0$1$3$"		}"
"ResourceRegionEncoder.java:97"$0$0$0$2$8$"		else {"
"ResourceRegionEncoder.java:98"$1$0$0$6$84$"			final String boundaryString = Hints.getRequiredHint(hints, BOUNDARY_STRING_HINT);"
"ResourceRegionEncoder.java:99"$0$0$0$8$75$"			byte[] startBoundary = toAsciiBytes(""\r\n--"" + boundaryString + ""\r\n"");"
"ResourceRegionEncoder.java:100"$0$0$0$16$108$"			byte[] contentType = mimeType != null ? toAsciiBytes(""Content-Type: "" + mimeType + ""\r\n"") : new byte[0];"
"ResourceRegionEncoder.java:101"$0$0$0$0$0$""
"ResourceRegionEncoder.java:102"$0$0$0$2$26$"			return Flux.from(input)"
"ResourceRegionEncoder.java:103"$0$0$0$3$27$"					.concatMap(region -> {"
"ResourceRegionEncoder.java:104"$1$0$0$3$47$"						if (!region.getResource().isReadable()) {"
"ResourceRegionEncoder.java:105"$0$0$0$3$47$"							return Flux.error(new EncodingException("
"ResourceRegionEncoder.java:106"$1$0$0$9$67$"									""Resource "" + region.getResource() + "" is not readable""));"
"ResourceRegionEncoder.java:107"$0$0$0$1$7$"						}"
"ResourceRegionEncoder.java:108"$0$0$0$4$42$"						Flux<DataBuffer> prefix = Flux.just("
"ResourceRegionEncoder.java:109"$0$0$0$1$42$"								bufferFactory.wrap(startBoundary),"
"ResourceRegionEncoder.java:110"$0$0$0$1$40$"								bufferFactory.wrap(contentType),"
"ResourceRegionEncoder.java:111"$1$0$0$6$91$"								bufferFactory.wrap(getContentRangeHeader(region))); // only wrapping, no allocation"
"ResourceRegionEncoder.java:112"$0$0$0$0$0$""
"ResourceRegionEncoder.java:113"$0$0$0$4$82$"						return prefix.concatWith(writeResourceRegion(region, bufferFactory, hints));"
"ResourceRegionEncoder.java:114"$0$0$0$1$7$"					})"
"ResourceRegionEncoder.java:115"$1$0$0$2$71$"					.concatWithValues(getRegionSuffix(bufferFactory, boundaryString));"
"ResourceRegionEncoder.java:116"$0$0$0$1$3$"		}"
"ResourceRegionEncoder.java:117"$0$0$1$7$59$"		// No doOnDiscard (no caching after DataBufferUtils#read)"
"ResourceRegionEncoder.java:118"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:119"$0$0$0$0$0$""
"ResourceRegionEncoder.java:120"$0$0$0$3$46$"	private Flux<DataBuffer> writeResourceRegion("
"ResourceRegionEncoder.java:121"$0$0$0$9$97$"			ResourceRegion region, DataBufferFactory bufferFactory, @Nullable Map<String, Object> hints) {"
"ResourceRegionEncoder.java:122"$0$0$0$0$0$""
"ResourceRegionEncoder.java:123"$1$0$0$4$43$"		Resource resource = region.getResource();"
"ResourceRegionEncoder.java:124"$1$0$0$4$39$"		long position = region.getPosition();"
"ResourceRegionEncoder.java:125"$1$0$0$4$33$"		long count = region.getCount();"
"ResourceRegionEncoder.java:126"$0$0$0$0$0$""
"ResourceRegionEncoder.java:127"$0$0$0$5$69$"		if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {"
"ResourceRegionEncoder.java:128"$1$0$0$2$43$"			logger.debug(Hints.getLogPrefix(hints) +"
"ResourceRegionEncoder.java:129"$0$0$0$19$89$"					""Writing region "" + position + ""-"" + (position + count) + "" of ["" + resource + ""]"");"
"ResourceRegionEncoder.java:130"$0$0$0$1$3$"		}"
"ResourceRegionEncoder.java:131"$0$0$0$0$0$""
"ResourceRegionEncoder.java:132"$0$0$0$7$97$"		Flux<DataBuffer> in = DataBufferUtils.read(resource, position, bufferFactory, this.bufferSize);"
"ResourceRegionEncoder.java:133"$0$0$0$3$55$"		return DataBufferUtils.takeUntilByteCount(in, count);"
"ResourceRegionEncoder.java:134"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:135"$0$0$0$0$0$""
"ResourceRegionEncoder.java:136"$1$0$0$7$93$"	private DataBuffer getRegionSuffix(DataBufferFactory bufferFactory, String boundaryString) {"
"ResourceRegionEncoder.java:137"$0$0$0$8$70$"		byte[] endBoundary = toAsciiBytes(""\r\n--"" + boundaryString + ""--"");"
"ResourceRegionEncoder.java:138"$0$0$0$2$41$"		return bufferFactory.wrap(endBoundary);"
"ResourceRegionEncoder.java:139"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:140"$0$0$0$0$0$""
"ResourceRegionEncoder.java:141"$0$0$0$5$41$"	private byte[] toAsciiBytes(String in) {"
"ResourceRegionEncoder.java:142"$1$0$0$2$48$"		return in.getBytes(StandardCharsets.US_ASCII);"
"ResourceRegionEncoder.java:143"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:144"$0$0$0$0$0$""
"ResourceRegionEncoder.java:145"$1$0$0$5$62$"	private byte[] getContentRangeHeader(ResourceRegion region) {"
"ResourceRegionEncoder.java:146"$1$0$0$4$36$"		long start = region.getPosition();"
"ResourceRegionEncoder.java:147"$1$0$0$8$43$"		long end = start + region.getCount() - 1;"
"ResourceRegionEncoder.java:148"$1$0$0$4$67$"		OptionalLong contentLength = contentLength(region.getResource());"
"ResourceRegionEncoder.java:149"$0$0$0$3$34$"		if (contentLength.isPresent()) {"
"ResourceRegionEncoder.java:150"$1$0$0$4$43$"			long length = contentLength.getAsLong();"
"ResourceRegionEncoder.java:151"$0$0$0$16$96$"			return toAsciiBytes(""Content-Range: bytes "" + start + '-' + end + '/' + length + ""\r\n\r\n"");"
"ResourceRegionEncoder.java:152"$0$0$0$1$3$"		}"
"ResourceRegionEncoder.java:153"$0$0$0$2$8$"		else {"
"ResourceRegionEncoder.java:154"$0$0$0$12$81$"			return toAsciiBytes(""Content-Range: bytes "" + start + '-' + end + ""\r\n\r\n"");"
"ResourceRegionEncoder.java:155"$0$0$0$1$3$"		}"
"ResourceRegionEncoder.java:156"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:157"$0$0$0$0$0$""
"ResourceRegionEncoder.java:158"$0$0$0$1$4$"	/**"
"ResourceRegionEncoder.java:159"$0$0$0$13$87$"	 * Determine, if possible, the contentLength of the given resource without reading it."
"ResourceRegionEncoder.java:160"$0$0$0$6$41$"	 * @param resource the resource instance"
"ResourceRegionEncoder.java:161"$0$0$0$7$45$"	 * @return the contentLength of the resource"
"ResourceRegionEncoder.java:162"$0$0$0$1$4$"	 */"
"ResourceRegionEncoder.java:163"$0$0$0$5$56$"	private OptionalLong contentLength(Resource resource) {"
"ResourceRegionEncoder.java:164"$0$0$1$13$95$"		// Don't try to determine contentLength on InputStreamResource - cannot be read afterwards..."
"ResourceRegionEncoder.java:165"$0$0$1$11$95$"		// Note: custom InputStreamResource subclasses could provide a pre-calculated content length!"
"ResourceRegionEncoder.java:166"$1$0$0$5$57$"		if (InputStreamResource.class != resource.getClass()) {"
"ResourceRegionEncoder.java:167"$0$0$0$2$8$"			try {"
"ResourceRegionEncoder.java:168"$0$0$0$2$53$"				return OptionalLong.of(resource.contentLength());"
"ResourceRegionEncoder.java:169"$0$0$0$1$4$"			}"
"ResourceRegionEncoder.java:170"$0$0$0$4$32$"			catch (IOException ignored) {"
"ResourceRegionEncoder.java:171"$0$0$0$1$4$"			}"
"ResourceRegionEncoder.java:172"$0$0$0$1$3$"		}"
"ResourceRegionEncoder.java:173"$0$0$0$2$30$"		return OptionalLong.empty();"
"ResourceRegionEncoder.java:174"$0$0$0$1$2$"	}"
"ResourceRegionEncoder.java:175"$0$0$0$0$0$""
"ResourceRegionEncoder.java:176"$0$0$0$1$1$"}"
"ResourceDecoder.java:1"$0$0$0$1$2$"/*"
"ResourceDecoder.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"ResourceDecoder.java:3"$0$0$0$1$2$" *"
"ResourceDecoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourceDecoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourceDecoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourceDecoder.java:7"$0$0$0$1$2$" *"
"ResourceDecoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourceDecoder.java:9"$0$0$0$1$2$" *"
"ResourceDecoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourceDecoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourceDecoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourceDecoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourceDecoder.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourceDecoder.java:15"$0$0$0$1$3$" */"
"ResourceDecoder.java:16"$0$0$0$0$0$""
"ResourceDecoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"ResourceDecoder.java:18"$0$0$0$0$0$""
"ResourceDecoder.java:19"$0$0$0$2$36$"import java.io.ByteArrayInputStream;"
"ResourceDecoder.java:20"$0$0$0$2$21$"import java.util.Map;"
"ResourceDecoder.java:21"$0$0$0$0$0$""
"ResourceDecoder.java:22"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"ResourceDecoder.java:23"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"ResourceDecoder.java:24"$0$0$0$0$0$""
"ResourceDecoder.java:25"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"ResourceDecoder.java:26"$0$0$0$2$53$"import org.springframework.core.io.ByteArrayResource;"
"ResourceDecoder.java:27"$0$0$0$2$55$"import org.springframework.core.io.InputStreamResource;"
"ResourceDecoder.java:28"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"ResourceDecoder.java:29"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"ResourceDecoder.java:30"$0$0$0$2$58$"import org.springframework.core.io.buffer.DataBufferUtils;"
"ResourceDecoder.java:31"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResourceDecoder.java:32"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"ResourceDecoder.java:33"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"ResourceDecoder.java:34"$0$0$0$0$0$""
"ResourceDecoder.java:35"$0$0$0$1$3$"/**"
"ResourceDecoder.java:36"$0$0$0$6$42$" * Decoder for {@link Resource Resources}."
"ResourceDecoder.java:37"$0$0$0$1$2$" *"
"ResourceDecoder.java:38"$0$0$0$4$24$" * @author Arjen Poutsma"
"ResourceDecoder.java:39"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"ResourceDecoder.java:40"$0$0$0$3$13$" * @since 5.0"
"ResourceDecoder.java:41"$0$0$0$1$3$" */"
"ResourceDecoder.java:42"$0$0$0$6$74$"public class ResourceDecoder extends AbstractDataBufferDecoder<Resource> {"
"ResourceDecoder.java:43"$0$0$0$0$0$""
"ResourceDecoder.java:44"$0$0$0$15$99$"	/** Name of hint with a filename for the resource(e.g. from ""Content-Disposition"" HTTP header). */"
"ResourceDecoder.java:45"$1$0$0$8$84$"	public static String FILENAME_HINT = ResourceDecoder.class.getName() + "".filename"";"
"ResourceDecoder.java:46"$0$0$0$0$0$""
"ResourceDecoder.java:47"$0$0$0$0$0$""
"ResourceDecoder.java:48"$0$0$0$3$27$"	public ResourceDecoder() {"
"ResourceDecoder.java:49"$0$0$0$1$27$"		super(MimeTypeUtils.ALL);"
"ResourceDecoder.java:50"$0$0$0$1$2$"	}"
"ResourceDecoder.java:51"$0$0$0$0$0$""
"ResourceDecoder.java:52"$0$0$0$0$0$""
"ResourceDecoder.java:53"$0$0$0$1$10$"	@Override"
"ResourceDecoder.java:54"$0$0$0$8$84$"	public boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"ResourceDecoder.java:55"$0$0$0$3$67$"		return (Resource.class.isAssignableFrom(elementType.toClass()) &&"
"ResourceDecoder.java:56"$0$0$0$2$44$"				super.canDecode(elementType, mimeType));"
"ResourceDecoder.java:57"$0$0$0$1$2$"	}"
"ResourceDecoder.java:58"$0$0$0$0$0$""
"ResourceDecoder.java:59"$0$0$0$1$10$"	@Override"
"ResourceDecoder.java:60"$0$0$0$6$92$"	public Flux<Resource> decode(Publisher<DataBuffer> inputStream, ResolvableType elementType,"
"ResourceDecoder.java:61"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"ResourceDecoder.java:62"$0$0$0$0$0$""
"ResourceDecoder.java:63"$0$0$0$5$76$"		return Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));"
"ResourceDecoder.java:64"$0$0$0$1$2$"	}"
"ResourceDecoder.java:65"$0$0$0$0$0$""
"ResourceDecoder.java:66"$0$0$0$1$10$"	@Override"
"ResourceDecoder.java:67"$0$0$0$6$74$"	public Resource decode(DataBuffer dataBuffer, ResolvableType elementType,"
"ResourceDecoder.java:68"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"ResourceDecoder.java:69"$0$0$0$0$0$""
"ResourceDecoder.java:70"$0$0$0$5$58$"		byte[] bytes = new byte[dataBuffer.readableByteCount()];"
"ResourceDecoder.java:71"$0$0$0$1$25$"		dataBuffer.read(bytes);"
"ResourceDecoder.java:72"$0$0$0$1$38$"		DataBufferUtils.release(dataBuffer);"
"ResourceDecoder.java:73"$0$0$0$0$0$""
"ResourceDecoder.java:74"$0$0$0$3$32$"		if (logger.isDebugEnabled()) {"
"ResourceDecoder.java:75"$1$0$0$9$79$"			logger.debug(Hints.getLogPrefix(hints) + ""Read "" + bytes.length + "" bytes"");"
"ResourceDecoder.java:76"$0$0$0$1$3$"		}"
"ResourceDecoder.java:77"$0$0$0$0$0$""
"ResourceDecoder.java:78"$0$0$0$4$41$"		Class<?> clazz = elementType.toClass();"
"ResourceDecoder.java:79"$1$0$0$11$77$"		String filename = hints != null ? (String) hints.get(FILENAME_HINT) : null;"
"ResourceDecoder.java:80"$0$0$0$5$43$"		if (clazz == InputStreamResource.class) {"
"ResourceDecoder.java:81"$0$0$0$5$68$"			return new InputStreamResource(new ByteArrayInputStream(bytes)) {"
"ResourceDecoder.java:82"$0$0$0$1$13$"				@Override"
"ResourceDecoder.java:83"$1$0$0$4$33$"				public String getFilename() {"
"ResourceDecoder.java:84"$0$0$0$2$21$"					return filename;"
"ResourceDecoder.java:85"$0$0$0$1$5$"				}"
"ResourceDecoder.java:86"$0$0$0$1$13$"				@Override"
"ResourceDecoder.java:87"$0$0$0$4$33$"				public long contentLength() {"
"ResourceDecoder.java:88"$0$0$0$2$25$"					return bytes.length;"
"ResourceDecoder.java:89"$0$0$0$1$5$"				}"
"ResourceDecoder.java:90"$0$0$0$1$5$"			};"
"ResourceDecoder.java:91"$0$0$0$1$3$"		}"
"ResourceDecoder.java:92"$0$0$0$4$52$"		else if (Resource.class.isAssignableFrom(clazz)) {"
"ResourceDecoder.java:93"$0$0$0$4$40$"			return new ByteArrayResource(bytes) {"
"ResourceDecoder.java:94"$0$0$0$1$13$"				@Override"
"ResourceDecoder.java:95"$1$0$0$4$33$"				public String getFilename() {"
"ResourceDecoder.java:96"$0$0$0$2$21$"					return filename;"
"ResourceDecoder.java:97"$0$0$0$1$5$"				}"
"ResourceDecoder.java:98"$0$0$0$1$5$"			};"
"ResourceDecoder.java:99"$0$0$0$1$3$"		}"
"ResourceDecoder.java:100"$0$0$0$2$8$"		else {"
"ResourceDecoder.java:101"$0$0$0$8$75$"			throw new IllegalStateException(""Unsupported resource class: "" + clazz);"
"ResourceDecoder.java:102"$0$0$0$1$3$"		}"
"ResourceDecoder.java:103"$0$0$0$1$2$"	}"
"ResourceDecoder.java:104"$0$0$0$0$0$""
"ResourceDecoder.java:105"$0$0$0$1$1$"}"
"SystemEnvironmentPropertySource.java:1"$0$0$0$1$2$"/*"
"SystemEnvironmentPropertySource.java:2"$0$0$0$8$54$" * Copyright 2002-2015 the original author or authors."
"SystemEnvironmentPropertySource.java:3"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SystemEnvironmentPropertySource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SystemEnvironmentPropertySource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SystemEnvironmentPropertySource.java:7"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SystemEnvironmentPropertySource.java:9"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SystemEnvironmentPropertySource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SystemEnvironmentPropertySource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SystemEnvironmentPropertySource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SystemEnvironmentPropertySource.java:14"$0$0$0$5$33$" * limitations under the License."
"SystemEnvironmentPropertySource.java:15"$0$0$0$1$3$" */"
"SystemEnvironmentPropertySource.java:16"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"SystemEnvironmentPropertySource.java:18"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:19"$0$0$0$2$21$"import java.util.Map;"
"SystemEnvironmentPropertySource.java:20"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:21"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SystemEnvironmentPropertySource.java:22"$0$0$0$2$39$"import org.springframework.util.Assert;"
"SystemEnvironmentPropertySource.java:23"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:24"$0$0$0$1$3$"/**"
"SystemEnvironmentPropertySource.java:25"$0$0$0$9$68$" * Specialization of {@link MapPropertySource} designed for use with"
"SystemEnvironmentPropertySource.java:26"$1$0$0$6$88$" * {@linkplain AbstractEnvironment#getSystemEnvironment() system environment variables}."
"SystemEnvironmentPropertySource.java:27"$0$0$0$15$87$" * Compensates for constraints in Bash and other shells that do not allow for variables"
"SystemEnvironmentPropertySource.java:28"$0$0$0$12$85$" * containing the period character and/or hyphen character; also allows for uppercase"
"SystemEnvironmentPropertySource.java:29"$0$0$0$10$61$" * variations on property names for more idiomatic shell use."
"SystemEnvironmentPropertySource.java:30"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:31"$1$0$0$14$88$" * <p>For example, a call to {@code getProperty(""foo.bar"")} will attempt to find a value"
"SystemEnvironmentPropertySource.java:32"$0$0$0$13$85$" * for the original property or any 'equivalent' property, returning the first found:"
"SystemEnvironmentPropertySource.java:33"$0$0$0$2$7$" * <ul>"
"SystemEnvironmentPropertySource.java:34"$0$0$0$7$47$" * <li>{@code foo.bar} - the original name</li>"
"SystemEnvironmentPropertySource.java:35"$0$0$0$10$67$" * <li>{@code foo_bar} - with underscores for periods (if any)</li>"
"SystemEnvironmentPropertySource.java:36"$0$0$0$8$55$" * <li>{@code FOO.BAR} - original, with upper case</li>"
"SystemEnvironmentPropertySource.java:37"$0$0$0$9$61$" * <li>{@code FOO_BAR} - with underscores and upper case</li>"
"SystemEnvironmentPropertySource.java:38"$0$0$0$2$8$" * </ul>"
"SystemEnvironmentPropertySource.java:39"$0$0$0$16$87$" * Any hyphen variant of the above would work as well, or even mix dot/hyphen variants."
"SystemEnvironmentPropertySource.java:40"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:41"$0$0$0$11$84$" * <p>The same applies for calls to {@link #containsProperty(String)}, which returns"
"SystemEnvironmentPropertySource.java:42"$0$0$0$14$84$" * {@code true} if any of the above properties are present, otherwise {@code false}."
"SystemEnvironmentPropertySource.java:43"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:44"$0$0$0$13$87$" * <p>This feature is particularly useful when specifying active or default profiles as"
"SystemEnvironmentPropertySource.java:45"$0$0$0$10$68$" * environment variables. The following is not allowable under Bash:"
"SystemEnvironmentPropertySource.java:46"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:47"$0$0$0$7$78$" * <pre class=""code"">spring.profiles.active=p1 java -classpath ... MyApp</pre>"
"SystemEnvironmentPropertySource.java:48"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:49"$0$0$0$12$76$" * However, the following syntax is permitted and is also more conventional:"
"SystemEnvironmentPropertySource.java:50"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:51"$0$0$0$7$78$" * <pre class=""code"">SPRING_PROFILES_ACTIVE=p1 java -classpath ... MyApp</pre>"
"SystemEnvironmentPropertySource.java:52"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:53"$0$0$0$13$83$" * <p>Enable debug- or trace-level logging for this class (or package) for messages"
"SystemEnvironmentPropertySource.java:54"$0$0$0$8$59$" * explaining when these 'property name resolutions' occur."
"SystemEnvironmentPropertySource.java:55"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:56"$0$0$0$11$80$" * <p>This property source is included by default in {@link StandardEnvironment}"
"SystemEnvironmentPropertySource.java:57"$0$0$0$5$26$" * and all its subclasses."
"SystemEnvironmentPropertySource.java:58"$0$0$0$1$2$" *"
"SystemEnvironmentPropertySource.java:59"$0$0$0$4$22$" * @author Chris Beams"
"SystemEnvironmentPropertySource.java:60"$0$0$0$4$26$" * @author Juergen Hoeller"
"SystemEnvironmentPropertySource.java:61"$0$0$0$3$13$" * @since 3.1"
"SystemEnvironmentPropertySource.java:62"$0$0$0$3$27$" * @see StandardEnvironment"
"SystemEnvironmentPropertySource.java:63"$1$0$0$3$50$" * @see AbstractEnvironment#getSystemEnvironment()"
"SystemEnvironmentPropertySource.java:64"$0$0$0$3$57$" * @see AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME"
"SystemEnvironmentPropertySource.java:65"$0$0$0$1$3$" */"
"SystemEnvironmentPropertySource.java:66"$0$0$0$6$72$"public class SystemEnvironmentPropertySource extends MapPropertySource {"
"SystemEnvironmentPropertySource.java:67"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:68"$0$0$0$1$4$"	/**"
"SystemEnvironmentPropertySource.java:69"$0$0$0$11$80$"	 * Create a new {@code SystemEnvironmentPropertySource} with the given name and"
"SystemEnvironmentPropertySource.java:70"$0$0$0$7$54$"	 * delegating to the given {@code MapPropertySource}."
"SystemEnvironmentPropertySource.java:71"$0$0$0$1$4$"	 */"
"SystemEnvironmentPropertySource.java:72"$0$0$0$7$82$"	public SystemEnvironmentPropertySource(String name, Map<String, Object> source) {"
"SystemEnvironmentPropertySource.java:73"$0$0$0$2$22$"		super(name, source);"
"SystemEnvironmentPropertySource.java:74"$0$0$0$1$2$"	}"
"SystemEnvironmentPropertySource.java:75"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:76"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:77"$0$0$0$1$4$"	/**"
"SystemEnvironmentPropertySource.java:78"$0$0$0$15$93$"	 * Return {@code true} if a property with the given name or any underscore/uppercase variant"
"SystemEnvironmentPropertySource.java:79"$0$0$0$7$43$"	 * thereof exists in this property source."
"SystemEnvironmentPropertySource.java:80"$0$0$0$1$4$"	 */"
"SystemEnvironmentPropertySource.java:81"$0$0$0$1$10$"	@Override"
"SystemEnvironmentPropertySource.java:82"$0$0$0$5$47$"	public boolean containsProperty(String name) {"
"SystemEnvironmentPropertySource.java:83"$1$0$0$4$37$"		return (getProperty(name) != null);"
"SystemEnvironmentPropertySource.java:84"$0$0$0$1$2$"	}"
"SystemEnvironmentPropertySource.java:85"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:86"$0$0$0$1$4$"	/**"
"SystemEnvironmentPropertySource.java:87"$0$0$0$14$81$"	 * This implementation returns {@code true} if a property with the given name or"
"SystemEnvironmentPropertySource.java:88"$0$0$0$10$76$"	 * any underscore/uppercase variant thereof exists in this property source."
"SystemEnvironmentPropertySource.java:89"$0$0$0$1$4$"	 */"
"SystemEnvironmentPropertySource.java:90"$0$0$0$1$10$"	@Override"
"SystemEnvironmentPropertySource.java:91"$0$0$0$1$10$"	@Nullable"
"SystemEnvironmentPropertySource.java:92"$1$0$0$5$41$"	public Object getProperty(String name) {"
"SystemEnvironmentPropertySource.java:93"$0$0$0$4$48$"		String actualName = resolvePropertyName(name);"
"SystemEnvironmentPropertySource.java:94"$0$0$0$5$60$"		if (logger.isDebugEnabled() && !name.equals(actualName)) {"
"SystemEnvironmentPropertySource.java:95"$1$0$0$14$89$"			logger.debug(""PropertySource '"" + getName() + ""' does not contain property '"" + name +"
"SystemEnvironmentPropertySource.java:96"$0$0$0$9$53$"					""', but found equivalent '"" + actualName + ""'"");"
"SystemEnvironmentPropertySource.java:97"$0$0$0$1$3$"		}"
"SystemEnvironmentPropertySource.java:98"$1$0$0$2$39$"		return super.getProperty(actualName);"
"SystemEnvironmentPropertySource.java:99"$0$0$0$1$2$"	}"
"SystemEnvironmentPropertySource.java:100"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:101"$0$0$0$1$4$"	/**"
"SystemEnvironmentPropertySource.java:102"$0$0$0$16$84$"	 * Check to see if this property source contains a property with the given name, or"
"SystemEnvironmentPropertySource.java:103"$0$0$0$14$84$"	 * any underscore / uppercase variation thereof. Return the resolved name if one is"
"SystemEnvironmentPropertySource.java:104"$0$0$0$11$69$"	 * found or otherwise the original name. Never returns {@code null}."
"SystemEnvironmentPropertySource.java:105"$0$0$0$1$4$"	 */"
"SystemEnvironmentPropertySource.java:106"$0$0$0$6$58$"	protected final String resolvePropertyName(String name) {"
"SystemEnvironmentPropertySource.java:107"$0$0$0$7$57$"		Assert.notNull(name, ""Property name must not be null"");"
"SystemEnvironmentPropertySource.java:108"$0$0$0$4$48$"		String resolvedName = checkPropertyName(name);"
"SystemEnvironmentPropertySource.java:109"$0$0$0$5$29$"		if (resolvedName != null) {"
"SystemEnvironmentPropertySource.java:110"$0$0$0$2$23$"			return resolvedName;"
"SystemEnvironmentPropertySource.java:111"$0$0$0$1$3$"		}"
"SystemEnvironmentPropertySource.java:112"$0$0$0$4$45$"		String uppercasedName = name.toUpperCase();"
"SystemEnvironmentPropertySource.java:113"$0$0$0$3$37$"		if (!name.equals(uppercasedName)) {"
"SystemEnvironmentPropertySource.java:114"$0$0$0$3$52$"			resolvedName = checkPropertyName(uppercasedName);"
"SystemEnvironmentPropertySource.java:115"$0$0$0$5$30$"			if (resolvedName != null) {"
"SystemEnvironmentPropertySource.java:116"$0$0$0$2$24$"				return resolvedName;"
"SystemEnvironmentPropertySource.java:117"$0$0$0$1$4$"			}"
"SystemEnvironmentPropertySource.java:118"$0$0$0$1$3$"		}"
"SystemEnvironmentPropertySource.java:119"$0$0$0$2$14$"		return name;"
"SystemEnvironmentPropertySource.java:120"$0$0$0$1$2$"	}"
"SystemEnvironmentPropertySource.java:121"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:122"$0$0$0$1$10$"	@Nullable"
"SystemEnvironmentPropertySource.java:123"$0$0$0$5$48$"	private String checkPropertyName(String name) {"
"SystemEnvironmentPropertySource.java:124"$0$0$1$4$21$"		// Check name as-is"
"SystemEnvironmentPropertySource.java:125"$0$0$0$3$26$"		if (containsKey(name)) {"
"SystemEnvironmentPropertySource.java:126"$0$0$0$2$15$"			return name;"
"SystemEnvironmentPropertySource.java:127"$0$0$0$1$3$"		}"
"SystemEnvironmentPropertySource.java:128"$0$0$1$7$39$"		// Check name with just dots replaced"
"SystemEnvironmentPropertySource.java:129"$0$0$0$5$44$"		String noDotName = name.replace('.', '_');"
"SystemEnvironmentPropertySource.java:130"$0$0$0$5$58$"		if (!name.equals(noDotName) && containsKey(noDotName)) {"
"SystemEnvironmentPropertySource.java:131"$0$0$0$2$20$"			return noDotName;"
"SystemEnvironmentPropertySource.java:132"$0$0$0$1$3$"		}"
"SystemEnvironmentPropertySource.java:133"$0$0$1$7$42$"		// Check name with just hyphens replaced"
"SystemEnvironmentPropertySource.java:134"$0$0$0$5$47$"		String noHyphenName = name.replace('-', '_');"
"SystemEnvironmentPropertySource.java:135"$0$0$0$5$64$"		if (!name.equals(noHyphenName) && containsKey(noHyphenName)) {"
"SystemEnvironmentPropertySource.java:136"$0$0$0$2$23$"			return noHyphenName;"
"SystemEnvironmentPropertySource.java:137"$0$0$0$1$3$"		}"
"SystemEnvironmentPropertySource.java:138"$0$0$1$8$46$"		// Check name with dots and hyphens replaced"
"SystemEnvironmentPropertySource.java:139"$0$0$0$5$57$"		String noDotNoHyphenName = noDotName.replace('-', '_');"
"SystemEnvironmentPropertySource.java:140"$0$0$0$5$79$"		if (!noDotName.equals(noDotNoHyphenName) && containsKey(noDotNoHyphenName)) {"
"SystemEnvironmentPropertySource.java:141"$0$0$0$2$28$"			return noDotNoHyphenName;"
"SystemEnvironmentPropertySource.java:142"$0$0$0$1$3$"		}"
"SystemEnvironmentPropertySource.java:143"$0$0$1$3$12$"		// Give up"
"SystemEnvironmentPropertySource.java:144"$0$0$0$2$14$"		return null;"
"SystemEnvironmentPropertySource.java:145"$0$0$0$1$2$"	}"
"SystemEnvironmentPropertySource.java:146"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:147"$0$0$0$5$43$"	private boolean containsKey(String name) {"
"SystemEnvironmentPropertySource.java:148"$0$0$0$6$108$"		return (isSecurityManagerPresent() ? this.source.keySet().contains(name) : this.source.containsKey(name));"
"SystemEnvironmentPropertySource.java:149"$0$0$0$1$2$"	}"
"SystemEnvironmentPropertySource.java:150"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:151"$0$0$0$4$47$"	protected boolean isSecurityManagerPresent() {"
"SystemEnvironmentPropertySource.java:152"$1$0$0$4$47$"		return (System.getSecurityManager() != null);"
"SystemEnvironmentPropertySource.java:153"$0$0$0$1$2$"	}"
"SystemEnvironmentPropertySource.java:154"$0$0$0$0$0$""
"SystemEnvironmentPropertySource.java:155"$0$0$0$1$1$"}"
"BooleanComparator.java:1"$0$0$0$1$2$"/*"
"BooleanComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"BooleanComparator.java:3"$0$0$0$1$2$" *"
"BooleanComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"BooleanComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"BooleanComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"BooleanComparator.java:7"$0$0$0$1$2$" *"
"BooleanComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"BooleanComparator.java:9"$0$0$0$1$2$" *"
"BooleanComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"BooleanComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"BooleanComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"BooleanComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"BooleanComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"BooleanComparator.java:15"$0$0$0$1$3$" */"
"BooleanComparator.java:16"$0$0$0$0$0$""
"BooleanComparator.java:17"$0$0$0$2$44$"package org.springframework.util.comparator;"
"BooleanComparator.java:18"$0$0$0$0$0$""
"BooleanComparator.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"BooleanComparator.java:20"$0$0$0$2$28$"import java.util.Comparator;"
"BooleanComparator.java:21"$0$0$0$0$0$""
"BooleanComparator.java:22"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"BooleanComparator.java:23"$0$0$0$0$0$""
"BooleanComparator.java:24"$0$0$0$1$3$"/**"
"BooleanComparator.java:25"$0$0$0$12$72$" * A {@link Comparator} for {@link Boolean} objects that can sort either"
"BooleanComparator.java:26"$0$0$0$7$39$" * {@code true} or {@code false} first."
"BooleanComparator.java:27"$0$0$0$1$2$" *"
"BooleanComparator.java:28"$0$0$0$4$23$" * @author Keith Donald"
"BooleanComparator.java:29"$0$0$0$3$15$" * @since 1.2.2"
"BooleanComparator.java:30"$0$0$0$1$3$" */"
"BooleanComparator.java:31"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"BooleanComparator.java:32"$0$0$0$7$77$"public class BooleanComparator implements Comparator<Boolean>, Serializable {"
"BooleanComparator.java:33"$0$0$0$0$0$""
"BooleanComparator.java:34"$0$0$0$1$4$"	/**"
"BooleanComparator.java:35"$0$0$0$8$49$"	 * A shared default instance of this comparator,"
"BooleanComparator.java:36"$0$0$0$8$51$"	 * treating {@code true} lower than {@code false}."
"BooleanComparator.java:37"$0$0$0$1$4$"	 */"
"BooleanComparator.java:38"$0$0$0$8$78$"	public static final BooleanComparator TRUE_LOW = new BooleanComparator(true);"
"BooleanComparator.java:39"$0$0$0$0$0$""
"BooleanComparator.java:40"$0$0$0$1$4$"	/**"
"BooleanComparator.java:41"$0$0$0$8$49$"	 * A shared default instance of this comparator,"
"BooleanComparator.java:42"$0$0$0$8$52$"	 * treating {@code true} higher than {@code false}."
"BooleanComparator.java:43"$0$0$0$1$4$"	 */"
"BooleanComparator.java:44"$0$0$0$8$80$"	public static final BooleanComparator TRUE_HIGH = new BooleanComparator(false);"
"BooleanComparator.java:45"$0$0$0$0$0$""
"BooleanComparator.java:46"$0$0$0$0$0$""
"BooleanComparator.java:47"$0$0$0$4$31$"	private final boolean trueLow;"
"BooleanComparator.java:48"$0$0$0$0$0$""
"BooleanComparator.java:49"$0$0$0$0$0$""
"BooleanComparator.java:50"$0$0$0$1$4$"	/**"
"BooleanComparator.java:51"$0$0$0$10$65$"	 * Create a BooleanComparator that sorts boolean values based on"
"BooleanComparator.java:52"$0$0$0$4$22$"	 * the provided flag."
"BooleanComparator.java:53"$0$0$0$9$63$"	 * <p>Alternatively, you can use the default shared instances:"
"BooleanComparator.java:54"$0$0$0$4$42$"	 * {@code BooleanComparator.TRUE_LOW} and"
"BooleanComparator.java:55"$0$0$0$3$40$"	 * {@code BooleanComparator.TRUE_HIGH}."
"BooleanComparator.java:56"$0$0$0$13$70$"	 * @param trueLow whether to treat true as lower or higher than false"
"BooleanComparator.java:57"$0$0$0$3$18$"	 * @see #TRUE_LOW"
"BooleanComparator.java:58"$0$0$0$3$19$"	 * @see #TRUE_HIGH"
"BooleanComparator.java:59"$0$0$0$1$4$"	 */"
"BooleanComparator.java:60"$0$0$0$4$44$"	public BooleanComparator(boolean trueLow) {"
"BooleanComparator.java:61"$0$0$0$3$25$"		this.trueLow = trueLow;"
"BooleanComparator.java:62"$0$0$0$1$2$"	}"
"BooleanComparator.java:63"$0$0$0$0$0$""
"BooleanComparator.java:64"$0$0$0$0$0$""
"BooleanComparator.java:65"$0$0$0$1$10$"	@Override"
"BooleanComparator.java:66"$0$0$0$7$45$"	public int compare(Boolean v1, Boolean v2) {"
"BooleanComparator.java:67"$0$0$0$14$56$"		return (v1 ^ v2) ? ((v1 ^ this.trueLow) ? 1 : -1) : 0;"
"BooleanComparator.java:68"$0$0$0$1$2$"	}"
"BooleanComparator.java:69"$0$0$0$0$0$""
"BooleanComparator.java:70"$0$0$0$0$0$""
"BooleanComparator.java:71"$0$0$0$1$10$"	@Override"
"BooleanComparator.java:72"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"BooleanComparator.java:73"$0$0$0$9$65$"		return (this == other || (other instanceof BooleanComparator &&"
"BooleanComparator.java:74"$0$0$0$4$58$"				this.trueLow == ((BooleanComparator) other).trueLow));"
"BooleanComparator.java:75"$0$0$0$1$2$"	}"
"BooleanComparator.java:76"$0$0$0$0$0$""
"BooleanComparator.java:77"$0$0$0$1$10$"	@Override"
"BooleanComparator.java:78"$0$0$0$4$24$"	public int hashCode() {"
"BooleanComparator.java:79"$1$0$0$8$57$"		return getClass().hashCode() * (this.trueLow ? -1 : 1);"
"BooleanComparator.java:80"$0$0$0$1$2$"	}"
"BooleanComparator.java:81"$0$0$0$0$0$""
"BooleanComparator.java:82"$0$0$0$1$10$"	@Override"
"BooleanComparator.java:83"$0$0$0$4$27$"	public String toString() {"
"BooleanComparator.java:84"$0$0$0$11$75$"		return ""BooleanComparator: "" + (this.trueLow ? ""true low"" : ""true high"");"
"BooleanComparator.java:85"$0$0$0$1$2$"	}"
"BooleanComparator.java:86"$0$0$0$0$0$""
"BooleanComparator.java:87"$0$0$0$1$1$"}"
"DefaultValueStyler.java:1"$0$0$0$1$2$"/*"
"DefaultValueStyler.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"DefaultValueStyler.java:3"$0$0$0$1$2$" *"
"DefaultValueStyler.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DefaultValueStyler.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DefaultValueStyler.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DefaultValueStyler.java:7"$0$0$0$1$2$" *"
"DefaultValueStyler.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DefaultValueStyler.java:9"$0$0$0$1$2$" *"
"DefaultValueStyler.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DefaultValueStyler.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DefaultValueStyler.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DefaultValueStyler.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DefaultValueStyler.java:14"$0$0$0$5$33$" * limitations under the License."
"DefaultValueStyler.java:15"$0$0$0$1$3$" */"
"DefaultValueStyler.java:16"$0$0$0$0$0$""
"DefaultValueStyler.java:17"$0$0$0$2$39$"package org.springframework.core.style;"
"DefaultValueStyler.java:18"$0$0$0$0$0$""
"DefaultValueStyler.java:19"$0$0$0$2$32$"import java.lang.reflect.Method;"
"DefaultValueStyler.java:20"$0$0$0$2$28$"import java.util.Collection;"
"DefaultValueStyler.java:21"$0$0$0$2$22$"import java.util.List;"
"DefaultValueStyler.java:22"$0$0$0$2$21$"import java.util.Map;"
"DefaultValueStyler.java:23"$0$0$0$2$21$"import java.util.Set;"
"DefaultValueStyler.java:24"$0$0$0$2$30$"import java.util.StringJoiner;"
"DefaultValueStyler.java:25"$0$0$0$0$0$""
"DefaultValueStyler.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"DefaultValueStyler.java:27"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"DefaultValueStyler.java:28"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"DefaultValueStyler.java:29"$0$0$0$0$0$""
"DefaultValueStyler.java:30"$0$0$0$1$3$"/**"
"DefaultValueStyler.java:31"$0$0$0$10$69$" * Converts objects to String form, generally for debugging purposes,"
"DefaultValueStyler.java:32"$0$0$0$7$55$" * using Spring's {@code toString} styling conventions."
"DefaultValueStyler.java:33"$0$0$0$1$2$" *"
"DefaultValueStyler.java:34"$0$0$0$11$71$" * <p>Uses the reflective visitor pattern underneath the hood to nicely"
"DefaultValueStyler.java:35"$0$0$0$10$65$" * encapsulate styling algorithms for each type of styled object."
"DefaultValueStyler.java:36"$0$0$0$1$2$" *"
"DefaultValueStyler.java:37"$0$0$0$4$23$" * @author Keith Donald"
"DefaultValueStyler.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"DefaultValueStyler.java:39"$0$0$0$3$15$" * @since 1.2.2"
"DefaultValueStyler.java:40"$0$0$0$1$3$" */"
"DefaultValueStyler.java:41"$0$0$0$6$56$"public class DefaultValueStyler implements ValueStyler {"
"DefaultValueStyler.java:42"$0$0$0$0$0$""
"DefaultValueStyler.java:43"$0$0$0$7$49$"	private static final String EMPTY = ""[[empty]]"";"
"DefaultValueStyler.java:44"$0$0$0$7$45$"	private static final String NULL = ""[null]"";"
"DefaultValueStyler.java:45"$0$0$0$7$55$"	private static final String COLLECTION = ""collection"";"
"DefaultValueStyler.java:46"$0$0$0$7$41$"	private static final String SET = ""set"";"
"DefaultValueStyler.java:47"$0$0$0$7$43$"	private static final String LIST = ""list"";"
"DefaultValueStyler.java:48"$0$0$0$7$41$"	private static final String MAP = ""map"";"
"DefaultValueStyler.java:49"$0$0$0$9$53$"	private static final String EMPTY_MAP = MAP + EMPTY;"
"DefaultValueStyler.java:50"$0$0$0$7$45$"	private static final String ARRAY = ""array"";"
"DefaultValueStyler.java:51"$0$0$0$0$0$""
"DefaultValueStyler.java:52"$0$0$0$0$0$""
"DefaultValueStyler.java:53"$0$0$0$1$10$"	@Override"
"DefaultValueStyler.java:54"$0$0$0$6$46$"	public String style(@Nullable Object value) {"
"DefaultValueStyler.java:55"$0$0$0$5$22$"		if (value == null) {"
"DefaultValueStyler.java:56"$0$0$0$2$15$"			return NULL;"
"DefaultValueStyler.java:57"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:58"$0$0$0$6$37$"		else if (value instanceof String) {"
"DefaultValueStyler.java:59"$0$0$0$6$30$"			return ""\'"" + value + ""\'"";"
"DefaultValueStyler.java:60"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:61"$0$0$0$6$36$"		else if (value instanceof Class) {"
"DefaultValueStyler.java:62"$1$0$0$3$52$"			return ClassUtils.getShortName((Class<?>) value);"
"DefaultValueStyler.java:63"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:64"$0$0$0$6$37$"		else if (value instanceof Method) {"
"DefaultValueStyler.java:65"$0$0$0$5$34$"			Method method = (Method) value;"
"DefaultValueStyler.java:66"$3$0$0$6$87$"			return method.getName() + ""@"" + ClassUtils.getShortName(method.getDeclaringClass());"
"DefaultValueStyler.java:67"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:68"$0$0$0$6$34$"		else if (value instanceof Map) {"
"DefaultValueStyler.java:69"$0$0$0$4$35$"			return style((Map<?, ?>) value);"
"DefaultValueStyler.java:70"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:71"$0$0$0$6$40$"		else if (value instanceof Map.Entry) {"
"DefaultValueStyler.java:72"$0$0$0$4$41$"			return style((Map.Entry<? ,?>) value);"
"DefaultValueStyler.java:73"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:74"$0$0$0$6$41$"		else if (value instanceof Collection) {"
"DefaultValueStyler.java:75"$0$0$0$3$39$"			return style((Collection<?>) value);"
"DefaultValueStyler.java:76"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:77"$1$0$0$4$40$"		else if (value.getClass().isArray()) {"
"DefaultValueStyler.java:78"$0$0$0$2$55$"			return styleArray(ObjectUtils.toObjectArray(value));"
"DefaultValueStyler.java:79"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:80"$0$0$0$2$8$"		else {"
"DefaultValueStyler.java:81"$0$0$0$2$32$"			return String.valueOf(value);"
"DefaultValueStyler.java:82"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:83"$0$0$0$1$2$"	}"
"DefaultValueStyler.java:84"$0$0$0$0$0$""
"DefaultValueStyler.java:85"$0$0$0$8$47$"	private <K, V> String style(Map<K, V> value) {"
"DefaultValueStyler.java:86"$0$0$0$3$24$"		if (value.isEmpty()) {"
"DefaultValueStyler.java:87"$0$0$0$2$20$"			return EMPTY_MAP;"
"DefaultValueStyler.java:88"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:89"$0$0$0$0$0$""
"DefaultValueStyler.java:90"$0$0$0$8$57$"		StringJoiner result = new StringJoiner("", "", ""["", ""]"");"
"DefaultValueStyler.java:91"$0$0$0$7$50$"		for (Map.Entry<K, V> entry : value.entrySet()) {"
"DefaultValueStyler.java:92"$0$0$0$1$28$"			result.add(style(entry));"
"DefaultValueStyler.java:93"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:94"$0$0$0$4$22$"		return MAP + result;"
"DefaultValueStyler.java:95"$0$0$0$1$2$"	}"
"DefaultValueStyler.java:96"$0$0$0$0$0$""
"DefaultValueStyler.java:97"$0$0$0$6$46$"	private String style(Map.Entry<?, ?> value) {"
"DefaultValueStyler.java:98"$2$0$0$8$66$"		return style(value.getKey()) + "" -> "" + style(value.getValue());"
"DefaultValueStyler.java:99"$0$0$0$1$2$"	}"
"DefaultValueStyler.java:100"$0$0$0$0$0$""
"DefaultValueStyler.java:101"$0$0$0$5$44$"	private String style(Collection<?> value) {"
"DefaultValueStyler.java:102"$1$0$0$4$57$"		String collectionType = getCollectionTypeString(value);"
"DefaultValueStyler.java:103"$0$0$0$0$0$""
"DefaultValueStyler.java:104"$0$0$0$3$24$"		if (value.isEmpty()) {"
"DefaultValueStyler.java:105"$0$0$0$4$33$"			return collectionType + EMPTY;"
"DefaultValueStyler.java:106"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:107"$0$0$0$0$0$""
"DefaultValueStyler.java:108"$0$0$0$8$57$"		StringJoiner result = new StringJoiner("", "", ""["", ""]"");"
"DefaultValueStyler.java:109"$0$0$0$6$26$"		for (Object o : value) {"
"DefaultValueStyler.java:110"$0$0$0$1$24$"			result.add(style(o));"
"DefaultValueStyler.java:111"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:112"$0$0$0$4$33$"		return collectionType + result;"
"DefaultValueStyler.java:113"$0$0$0$1$2$"	}"
"DefaultValueStyler.java:114"$0$0$0$0$0$""
"DefaultValueStyler.java:115"$1$0$0$5$62$"	private String getCollectionTypeString(Collection<?> value) {"
"DefaultValueStyler.java:116"$0$0$0$5$30$"		if (value instanceof List) {"
"DefaultValueStyler.java:117"$0$0$0$2$15$"			return LIST;"
"DefaultValueStyler.java:118"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:119"$0$0$0$6$34$"		else if (value instanceof Set) {"
"DefaultValueStyler.java:120"$0$0$0$2$14$"			return SET;"
"DefaultValueStyler.java:121"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:122"$0$0$0$2$8$"		else {"
"DefaultValueStyler.java:123"$0$0$0$2$21$"			return COLLECTION;"
"DefaultValueStyler.java:124"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:125"$0$0$0$1$2$"	}"
"DefaultValueStyler.java:126"$0$0$0$0$0$""
"DefaultValueStyler.java:127"$0$0$0$5$44$"	private String styleArray(Object[] array) {"
"DefaultValueStyler.java:128"$0$0$0$5$26$"		if (array.length == 0) {"
"DefaultValueStyler.java:129"$3$0$0$10$99$"			return ARRAY + '<' + ClassUtils.getShortName(array.getClass().getComponentType()) + '>' + EMPTY;"
"DefaultValueStyler.java:130"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:131"$0$0$0$0$0$""
"DefaultValueStyler.java:132"$0$0$0$8$57$"		StringJoiner result = new StringJoiner("", "", ""["", ""]"");"
"DefaultValueStyler.java:133"$0$0$0$6$26$"		for (Object o : array) {"
"DefaultValueStyler.java:134"$0$0$0$1$24$"			result.add(style(o));"
"DefaultValueStyler.java:135"$0$0$0$1$3$"		}"
"DefaultValueStyler.java:136"$3$0$0$10$99$"		return ARRAY + '<' + ClassUtils.getShortName(array.getClass().getComponentType()) + '>' + result;"
"DefaultValueStyler.java:137"$0$0$0$1$2$"	}"
"DefaultValueStyler.java:138"$0$0$0$0$0$""
"DefaultValueStyler.java:139"$0$0$0$1$1$"}"
"Constants.java:1"$0$0$0$1$2$"/*"
"Constants.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"Constants.java:3"$0$0$0$1$2$" *"
"Constants.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"Constants.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"Constants.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"Constants.java:7"$0$0$0$1$2$" *"
"Constants.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"Constants.java:9"$0$0$0$1$2$" *"
"Constants.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"Constants.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"Constants.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"Constants.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"Constants.java:14"$0$0$0$5$33$" * limitations under the License."
"Constants.java:15"$0$0$0$1$3$" */"
"Constants.java:16"$0$0$0$0$0$""
"Constants.java:17"$0$0$0$2$33$"package org.springframework.core;"
"Constants.java:18"$0$0$0$0$0$""
"Constants.java:19"$0$0$0$2$31$"import java.lang.reflect.Field;"
"Constants.java:20"$0$0$0$2$25$"import java.util.HashMap;"
"Constants.java:21"$0$0$0$2$25$"import java.util.HashSet;"
"Constants.java:22"$0$0$0$2$24$"import java.util.Locale;"
"Constants.java:23"$0$0$0$2$21$"import java.util.Map;"
"Constants.java:24"$0$0$0$2$21$"import java.util.Set;"
"Constants.java:25"$0$0$0$0$0$""
"Constants.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"Constants.java:27"$0$0$0$2$39$"import org.springframework.util.Assert;"
"Constants.java:28"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"Constants.java:29"$0$0$0$0$0$""
"Constants.java:30"$0$0$0$1$3$"/**"
"Constants.java:31"$0$0$0$13$80$" * This class can be used to parse other classes containing constant definitions"
"Constants.java:32"$0$0$0$13$75$" * in public static final members. The {@code asXXXX} methods of this class"
"Constants.java:33"$0$0$0$12$69$" * allow these constant values to be accessed via their string names."
"Constants.java:34"$0$0$0$1$2$" *"
"Constants.java:35"$0$0$0$13$83$" * <p>Consider class Foo containing {@code public final static int CONSTANT1 = 66;}"
"Constants.java:36"$0$0$0$14$86$" * An instance of this class wrapping {@code Foo.class} will return the constant value"
"Constants.java:37"$0$0$0$13$81$" * of 66 from its {@code asNumber} method given the argument {@code ""CONSTANT1""}."
"Constants.java:38"$0$0$0$1$2$" *"
"Constants.java:39"$0$0$0$12$70$" * <p>This class is ideal for use in PropertyEditors, enabling them to"
"Constants.java:40"$0$0$0$12$73$" * recognize the same names as the constants themselves, and freeing them"
"Constants.java:41"$0$0$0$6$38$" * from maintaining their own mapping."
"Constants.java:42"$0$0$0$1$2$" *"
"Constants.java:43"$0$0$0$4$22$" * @author Rod Johnson"
"Constants.java:44"$0$0$0$4$26$" * @author Juergen Hoeller"
"Constants.java:45"$0$0$0$3$20$" * @since 16.03.2003"
"Constants.java:46"$0$0$0$1$3$" */"
"Constants.java:47"$0$0$0$4$24$"public class Constants {"
"Constants.java:48"$0$0$0$0$0$""
"Constants.java:49"$0$0$0$8$43$"	/** The name of the introspected class. */"
"Constants.java:50"$0$0$0$4$32$"	private final String className;"
"Constants.java:51"$0$0$0$0$0$""
"Constants.java:52"$0$0$0$10$51$"	/** Map from String field name to object value. */"
"Constants.java:53"$0$0$0$8$64$"	private final Map<String, Object> fieldCache = new HashMap<>();"
"Constants.java:54"$0$0$0$0$0$""
"Constants.java:55"$0$0$0$0$0$""
"Constants.java:56"$0$0$0$1$4$"	/**"
"Constants.java:57"$0$0$0$11$68$"	 * Create a new Constants converter class wrapping the given class."
"Constants.java:58"$0$0$0$12$85$"	 * <p>All <b>public</b> static final variables will be exposed, whatever their type."
"Constants.java:59"$0$0$0$7$37$"	 * @param clazz the class to analyze"
"Constants.java:60"$0$0$0$11$82$"	 * @throws IllegalArgumentException if the supplied {@code clazz} is {@code null}"
"Constants.java:61"$0$0$0$1$4$"	 */"
"Constants.java:62"$0$0$0$4$35$"	public Constants(Class<?> clazz) {"
"Constants.java:63"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"Constants.java:64"$1$0$0$3$35$"		this.className = clazz.getName();"
"Constants.java:65"$1$0$0$4$37$"		Field[] fields = clazz.getFields();"
"Constants.java:66"$0$0$0$6$30$"		for (Field field : fields) {"
"Constants.java:67"$0$0$0$3$52$"			if (ReflectionUtils.isPublicStaticFinal(field)) {"
"Constants.java:68"$1$0$0$4$34$"				String name = field.getName();"
"Constants.java:69"$0$0$0$2$9$"				try {"
"Constants.java:70"$1$0$0$4$36$"					Object value = field.get(null);"
"Constants.java:71"$0$0$0$2$38$"					this.fieldCache.put(name, value);"
"Constants.java:72"$0$0$0$1$5$"				}"
"Constants.java:73"$0$0$0$4$39$"				catch (IllegalAccessException ex) {"
"Constants.java:74"$0$0$1$7$42$"					// just leave this field and continue"
"Constants.java:75"$0$0$0$1$5$"				}"
"Constants.java:76"$0$0$0$1$4$"			}"
"Constants.java:77"$0$0$0$1$3$"		}"
"Constants.java:78"$0$0$0$1$2$"	}"
"Constants.java:79"$0$0$0$0$0$""
"Constants.java:80"$0$0$0$0$0$""
"Constants.java:81"$0$0$0$1$4$"	/**"
"Constants.java:82"$0$0$0$8$42$"	 * Return the name of the analyzed class."
"Constants.java:83"$0$0$0$1$4$"	 */"
"Constants.java:84"$1$0$0$5$37$"	public final String getClassName() {"
"Constants.java:85"$0$0$0$2$24$"		return this.className;"
"Constants.java:86"$0$0$0$1$2$"	}"
"Constants.java:87"$0$0$0$0$0$""
"Constants.java:88"$0$0$0$1$4$"	/**"
"Constants.java:89"$0$0$0$7$43$"	 * Return the number of constants exposed."
"Constants.java:90"$0$0$0$1$4$"	 */"
"Constants.java:91"$1$0$0$5$29$"	public final int getSize() {"
"Constants.java:92"$0$0$0$2$32$"		return this.fieldCache.size();"
"Constants.java:93"$0$0$0$1$2$"	}"
"Constants.java:94"$0$0$0$0$0$""
"Constants.java:95"$0$0$0$1$4$"	/**"
"Constants.java:96"$0$0$0$7$42$"	 * Exposes the field cache to subclasses:"
"Constants.java:97"$0$0$0$10$49$"	 * a Map from String field name to object value."
"Constants.java:98"$0$0$0$1$4$"	 */"
"Constants.java:99"$1$0$0$6$54$"	protected final Map<String, Object> getFieldCache() {"
"Constants.java:100"$0$0$0$2$25$"		return this.fieldCache;"
"Constants.java:101"$0$0$0$1$2$"	}"
"Constants.java:102"$0$0$0$0$0$""
"Constants.java:103"$0$0$0$0$0$""
"Constants.java:104"$0$0$0$1$4$"	/**"
"Constants.java:105"$0$0$0$9$45$"	 * Return a constant value cast to a Number."
"Constants.java:106"$0$0$0$11$58$"	 * @param code the name of the field (never {@code null})"
"Constants.java:107"$0$0$0$5$28$"	 * @return the Number value"
"Constants.java:108"$0$0$0$9$60$"	 * @throws ConstantException if the field name wasn't found"
"Constants.java:109"$0$0$0$9$48$"	 * or if the type wasn't compatible with Number"
"Constants.java:110"$0$0$0$3$18$"	 * @see #asObject"
"Constants.java:111"$0$0$0$1$4$"	 */"
"Constants.java:112"$0$0$0$7$63$"	public Number asNumber(String code) throws ConstantException {"
"Constants.java:113"$0$0$0$4$30$"		Object obj = asObject(code);"
"Constants.java:114"$0$0$0$5$33$"		if (!(obj instanceof Number)) {"
"Constants.java:115"$0$0$0$7$69$"			throw new ConstantException(this.className, code, ""not a Number"");"
"Constants.java:116"$0$0$0$1$3$"		}"
"Constants.java:117"$0$0$0$3$22$"		return (Number) obj;"
"Constants.java:118"$0$0$0$1$2$"	}"
"Constants.java:119"$0$0$0$0$0$""
"Constants.java:120"$0$0$0$1$4$"	/**"
"Constants.java:121"$0$0$0$8$40$"	 * Return a constant value as a String."
"Constants.java:122"$0$0$0$11$58$"	 * @param code the name of the field (never {@code null})"
"Constants.java:123"$0$0$0$5$28$"	 * @return the String value"
"Constants.java:124"$0$0$0$11$65$"	 * Works even if it's not a string (invokes {@code toString()})."
"Constants.java:125"$0$0$0$9$60$"	 * @throws ConstantException if the field name wasn't found"
"Constants.java:126"$0$0$0$3$18$"	 * @see #asObject"
"Constants.java:127"$0$0$0$1$4$"	 */"
"Constants.java:128"$0$0$0$7$63$"	public String asString(String code) throws ConstantException {"
"Constants.java:129"$0$0$0$2$35$"		return asObject(code).toString();"
"Constants.java:130"$0$0$0$1$2$"	}"
"Constants.java:131"$0$0$0$0$0$""
"Constants.java:132"$0$0$0$1$4$"	/**"
"Constants.java:133"$0$0$0$12$68$"	 * Parse the given String (upper or lower case accepted) and return"
"Constants.java:134"$0$0$0$14$69$"	 * the appropriate value if it's the name of a constant field in the"
"Constants.java:135"$0$0$0$5$31$"	 * class that we're analysing."
"Constants.java:136"$0$0$0$11$58$"	 * @param code the name of the field (never {@code null})"
"Constants.java:137"$0$0$0$5$28$"	 * @return the Object value"
"Constants.java:138"$0$0$0$8$54$"	 * @throws ConstantException if there's no such field"
"Constants.java:139"$0$0$0$1$4$"	 */"
"Constants.java:140"$0$0$0$7$63$"	public Object asObject(String code) throws ConstantException {"
"Constants.java:141"$0$0$0$6$48$"		Assert.notNull(code, ""Code must not be null"");"
"Constants.java:142"$0$0$0$4$54$"		String codeToUse = code.toUpperCase(Locale.ENGLISH);"
"Constants.java:143"$1$0$0$4$46$"		Object val = this.fieldCache.get(codeToUse);"
"Constants.java:144"$0$0$0$5$20$"		if (val == null) {"
"Constants.java:145"$0$0$0$6$71$"			throw new ConstantException(this.className, codeToUse, ""not found"");"
"Constants.java:146"$0$0$0$1$3$"		}"
"Constants.java:147"$0$0$0$2$13$"		return val;"
"Constants.java:148"$0$0$0$1$2$"	}"
"Constants.java:149"$0$0$0$0$0$""
"Constants.java:150"$0$0$0$0$0$""
"Constants.java:151"$0$0$0$1$4$"	/**"
"Constants.java:152"$0$0$0$10$53$"	 * Return all names of the given group of constants."
"Constants.java:153"$0$0$0$10$61$"	 * <p>Note that this method assumes that constants are named"
"Constants.java:154"$0$0$0$10$64$"	 * in accordance with the standard Java convention for constant"
"Constants.java:155"$0$0$0$9$64$"	 * values (i.e. all uppercase). The supplied {@code namePrefix}"
"Constants.java:156"$0$0$0$10$65$"	 * will be uppercased (in a locale-insensitive fashion) prior to"
"Constants.java:157"$0$0$0$9$45$"	 * the main logic of this method kicking in."
"Constants.java:158"$0$0$0$14$82$"	 * @param namePrefix prefix of the constant names to search (may be {@code null})"
"Constants.java:159"$0$0$0$7$37$"	 * @return the set of constant names"
"Constants.java:160"$0$0$0$1$4$"	 */"
"Constants.java:161"$1$0$0$6$59$"	public Set<String> getNames(@Nullable String namePrefix) {"
"Constants.java:162"$0$0$0$10$97$"		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : """");"
"Constants.java:163"$0$0$0$5$38$"		Set<String> names = new HashSet<>();"
"Constants.java:164"$0$0$0$6$48$"		for (String code : this.fieldCache.keySet()) {"
"Constants.java:165"$0$0$0$3$38$"			if (code.startsWith(prefixToUse)) {"
"Constants.java:166"$0$0$0$1$20$"				names.add(code);"
"Constants.java:167"$0$0$0$1$4$"			}"
"Constants.java:168"$0$0$0$1$3$"		}"
"Constants.java:169"$0$0$0$2$15$"		return names;"
"Constants.java:170"$0$0$0$1$2$"	}"
"Constants.java:171"$0$0$0$0$0$""
"Constants.java:172"$0$0$0$1$4$"	/**"
"Constants.java:173"$0$0$0$11$54$"	 * Return all names of the group of constants for the"
"Constants.java:174"$0$0$0$5$29$"	 * given bean property name."
"Constants.java:175"$0$0$0$9$53$"	 * @param propertyName the name of the bean property"
"Constants.java:176"$0$0$0$6$29$"	 * @return the set of values"
"Constants.java:177"$0$0$0$3$38$"	 * @see #propertyToConstantNamePrefix"
"Constants.java:178"$0$0$0$1$4$"	 */"
"Constants.java:179"$1$0$0$5$62$"	public Set<String> getNamesForProperty(String propertyName) {"
"Constants.java:180"$1$0$0$2$62$"		return getNames(propertyToConstantNamePrefix(propertyName));"
"Constants.java:181"$0$0$0$1$2$"	}"
"Constants.java:182"$0$0$0$0$0$""
"Constants.java:183"$0$0$0$1$4$"	/**"
"Constants.java:184"$0$0$0$10$53$"	 * Return all names of the given group of constants."
"Constants.java:185"$0$0$0$10$61$"	 * <p>Note that this method assumes that constants are named"
"Constants.java:186"$0$0$0$10$64$"	 * in accordance with the standard Java convention for constant"
"Constants.java:187"$0$0$0$9$64$"	 * values (i.e. all uppercase). The supplied {@code nameSuffix}"
"Constants.java:188"$0$0$0$10$65$"	 * will be uppercased (in a locale-insensitive fashion) prior to"
"Constants.java:189"$0$0$0$9$45$"	 * the main logic of this method kicking in."
"Constants.java:190"$0$0$0$14$82$"	 * @param nameSuffix suffix of the constant names to search (may be {@code null})"
"Constants.java:191"$0$0$0$7$37$"	 * @return the set of constant names"
"Constants.java:192"$0$0$0$1$4$"	 */"
"Constants.java:193"$1$0$0$6$68$"	public Set<String> getNamesForSuffix(@Nullable String nameSuffix) {"
"Constants.java:194"$0$0$0$10$97$"		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : """");"
"Constants.java:195"$0$0$0$5$38$"		Set<String> names = new HashSet<>();"
"Constants.java:196"$0$0$0$6$48$"		for (String code : this.fieldCache.keySet()) {"
"Constants.java:197"$0$0$0$3$36$"			if (code.endsWith(suffixToUse)) {"
"Constants.java:198"$0$0$0$1$20$"				names.add(code);"
"Constants.java:199"$0$0$0$1$4$"			}"
"Constants.java:200"$0$0$0$1$3$"		}"
"Constants.java:201"$0$0$0$2$15$"		return names;"
"Constants.java:202"$0$0$0$1$2$"	}"
"Constants.java:203"$0$0$0$0$0$""
"Constants.java:204"$0$0$0$0$0$""
"Constants.java:205"$0$0$0$1$4$"	/**"
"Constants.java:206"$0$0$0$10$54$"	 * Return all values of the given group of constants."
"Constants.java:207"$0$0$0$10$61$"	 * <p>Note that this method assumes that constants are named"
"Constants.java:208"$0$0$0$10$64$"	 * in accordance with the standard Java convention for constant"
"Constants.java:209"$0$0$0$9$64$"	 * values (i.e. all uppercase). The supplied {@code namePrefix}"
"Constants.java:210"$0$0$0$10$65$"	 * will be uppercased (in a locale-insensitive fashion) prior to"
"Constants.java:211"$0$0$0$9$45$"	 * the main logic of this method kicking in."
"Constants.java:212"$0$0$0$14$82$"	 * @param namePrefix prefix of the constant names to search (may be {@code null})"
"Constants.java:213"$0$0$0$6$29$"	 * @return the set of values"
"Constants.java:214"$0$0$0$1$4$"	 */"
"Constants.java:215"$1$0$0$6$60$"	public Set<Object> getValues(@Nullable String namePrefix) {"
"Constants.java:216"$0$0$0$10$97$"		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : """");"
"Constants.java:217"$0$0$0$5$39$"		Set<Object> values = new HashSet<>();"
"Constants.java:218"$0$0$0$4$44$"		this.fieldCache.forEach((code, value) -> {"
"Constants.java:219"$0$0$0$3$38$"			if (code.startsWith(prefixToUse)) {"
"Constants.java:220"$0$0$0$1$22$"				values.add(value);"
"Constants.java:221"$0$0$0$1$4$"			}"
"Constants.java:222"$0$0$0$1$5$"		});"
"Constants.java:223"$0$0$0$2$16$"		return values;"
"Constants.java:224"$0$0$0$1$2$"	}"
"Constants.java:225"$0$0$0$0$0$""
"Constants.java:226"$0$0$0$1$4$"	/**"
"Constants.java:227"$0$0$0$11$55$"	 * Return all values of the group of constants for the"
"Constants.java:228"$0$0$0$5$29$"	 * given bean property name."
"Constants.java:229"$0$0$0$9$53$"	 * @param propertyName the name of the bean property"
"Constants.java:230"$0$0$0$6$29$"	 * @return the set of values"
"Constants.java:231"$0$0$0$3$38$"	 * @see #propertyToConstantNamePrefix"
"Constants.java:232"$0$0$0$1$4$"	 */"
"Constants.java:233"$1$0$0$5$63$"	public Set<Object> getValuesForProperty(String propertyName) {"
"Constants.java:234"$1$0$0$2$63$"		return getValues(propertyToConstantNamePrefix(propertyName));"
"Constants.java:235"$0$0$0$1$2$"	}"
"Constants.java:236"$0$0$0$0$0$""
"Constants.java:237"$0$0$0$1$4$"	/**"
"Constants.java:238"$0$0$0$10$54$"	 * Return all values of the given group of constants."
"Constants.java:239"$0$0$0$10$61$"	 * <p>Note that this method assumes that constants are named"
"Constants.java:240"$0$0$0$10$64$"	 * in accordance with the standard Java convention for constant"
"Constants.java:241"$0$0$0$9$64$"	 * values (i.e. all uppercase). The supplied {@code nameSuffix}"
"Constants.java:242"$0$0$0$10$65$"	 * will be uppercased (in a locale-insensitive fashion) prior to"
"Constants.java:243"$0$0$0$9$45$"	 * the main logic of this method kicking in."
"Constants.java:244"$0$0$0$14$82$"	 * @param nameSuffix suffix of the constant names to search (may be {@code null})"
"Constants.java:245"$0$0$0$6$29$"	 * @return the set of values"
"Constants.java:246"$0$0$0$1$4$"	 */"
"Constants.java:247"$1$0$0$6$69$"	public Set<Object> getValuesForSuffix(@Nullable String nameSuffix) {"
"Constants.java:248"$0$0$0$10$97$"		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : """");"
"Constants.java:249"$0$0$0$5$39$"		Set<Object> values = new HashSet<>();"
"Constants.java:250"$0$0$0$4$44$"		this.fieldCache.forEach((code, value) -> {"
"Constants.java:251"$0$0$0$3$36$"			if (code.endsWith(suffixToUse)) {"
"Constants.java:252"$0$0$0$1$22$"				values.add(value);"
"Constants.java:253"$0$0$0$1$4$"			}"
"Constants.java:254"$0$0$0$1$5$"		});"
"Constants.java:255"$0$0$0$2$16$"		return values;"
"Constants.java:256"$0$0$0$1$2$"	}"
"Constants.java:257"$0$0$0$0$0$""
"Constants.java:258"$0$0$0$0$0$""
"Constants.java:259"$0$0$0$1$4$"	/**"
"Constants.java:260"$0$0$0$12$64$"	 * Look up the given value within the given group of constants."
"Constants.java:261"$0$0$0$6$35$"	 * <p>Will return the first match."
"Constants.java:262"$0$0$0$8$42$"	 * @param value constant value to look up"
"Constants.java:263"$0$0$0$14$82$"	 * @param namePrefix prefix of the constant names to search (may be {@code null})"
"Constants.java:264"$0$0$0$8$42$"	 * @return the name of the constant field"
"Constants.java:265"$0$0$0$8$55$"	 * @throws ConstantException if the value wasn't found"
"Constants.java:266"$0$0$0$1$4$"	 */"
"Constants.java:267"$0$0$0$10$91$"	public String toCode(Object value, @Nullable String namePrefix) throws ConstantException {"
"Constants.java:268"$0$0$0$10$97$"		String prefixToUse = (namePrefix != null ? namePrefix.trim().toUpperCase(Locale.ENGLISH) : """");"
"Constants.java:269"$0$0$0$7$70$"		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {"
"Constants.java:270"$2$0$0$5$82$"			if (entry.getKey().startsWith(prefixToUse) && entry.getValue().equals(value)) {"
"Constants.java:271"$1$0$0$2$26$"				return entry.getKey();"
"Constants.java:272"$0$0$0$1$4$"			}"
"Constants.java:273"$0$0$0$1$3$"		}"
"Constants.java:274"$0$0$0$5$66$"		throw new ConstantException(this.className, prefixToUse, value);"
"Constants.java:275"$0$0$0$1$2$"	}"
"Constants.java:276"$0$0$0$0$0$""
"Constants.java:277"$0$0$0$1$4$"	/**"
"Constants.java:278"$0$0$0$12$61$"	 * Look up the given value within the group of constants for"
"Constants.java:279"$0$0$0$11$62$"	 * the given bean property name. Will return the first match."
"Constants.java:280"$0$0$0$8$42$"	 * @param value constant value to look up"
"Constants.java:281"$0$0$0$9$53$"	 * @param propertyName the name of the bean property"
"Constants.java:282"$0$0$0$8$42$"	 * @return the name of the constant field"
"Constants.java:283"$0$0$0$8$55$"	 * @throws ConstantException if the value wasn't found"
"Constants.java:284"$0$0$0$3$38$"	 * @see #propertyToConstantNamePrefix"
"Constants.java:285"$0$0$0$1$4$"	 */"
"Constants.java:286"$0$0$0$9$94$"	public String toCodeForProperty(Object value, String propertyName) throws ConstantException {"
"Constants.java:287"$0$0$0$3$67$"		return toCode(value, propertyToConstantNamePrefix(propertyName));"
"Constants.java:288"$0$0$0$1$2$"	}"
"Constants.java:289"$0$0$0$0$0$""
"Constants.java:290"$0$0$0$1$4$"	/**"
"Constants.java:291"$0$0$0$12$64$"	 * Look up the given value within the given group of constants."
"Constants.java:292"$0$0$0$6$35$"	 * <p>Will return the first match."
"Constants.java:293"$0$0$0$8$42$"	 * @param value constant value to look up"
"Constants.java:294"$0$0$0$14$82$"	 * @param nameSuffix suffix of the constant names to search (may be {@code null})"
"Constants.java:295"$0$0$0$8$42$"	 * @return the name of the constant field"
"Constants.java:296"$0$0$0$8$55$"	 * @throws ConstantException if the value wasn't found"
"Constants.java:297"$0$0$0$1$4$"	 */"
"Constants.java:298"$0$0$0$10$100$"	public String toCodeForSuffix(Object value, @Nullable String nameSuffix) throws ConstantException {"
"Constants.java:299"$0$0$0$10$97$"		String suffixToUse = (nameSuffix != null ? nameSuffix.trim().toUpperCase(Locale.ENGLISH) : """");"
"Constants.java:300"$0$0$0$7$70$"		for (Map.Entry<String, Object> entry : this.fieldCache.entrySet()) {"
"Constants.java:301"$2$0$0$5$80$"			if (entry.getKey().endsWith(suffixToUse) && entry.getValue().equals(value)) {"
"Constants.java:302"$1$0$0$2$26$"				return entry.getKey();"
"Constants.java:303"$0$0$0$1$4$"			}"
"Constants.java:304"$0$0$0$1$3$"		}"
"Constants.java:305"$0$0$0$5$66$"		throw new ConstantException(this.className, suffixToUse, value);"
"Constants.java:306"$0$0$0$1$2$"	}"
"Constants.java:307"$0$0$0$0$0$""
"Constants.java:308"$0$0$0$0$0$""
"Constants.java:309"$0$0$0$1$4$"	/**"
"Constants.java:310"$0$0$0$12$67$"	 * Convert the given bean property name to a constant name prefix."
"Constants.java:311"$0$0$0$12$71$"	 * <p>Uses a common naming idiom: turning all lower case characters to"
"Constants.java:312"$0$0$0$11$72$"	 * upper case, and prepending upper case characters with an underscore."
"Constants.java:313"$0$0$0$5$47$"	 * <p>Example: ""imageSize"" -> ""IMAGE_SIZE""<br>"
"Constants.java:314"$0$0$0$5$44$"	 * Example: ""imagesize"" -> ""IMAGESIZE"".<br>"
"Constants.java:315"$0$0$0$5$46$"	 * Example: ""ImageSize"" -> ""_IMAGE_SIZE"".<br>"
"Constants.java:316"$0$0$0$5$48$"	 * Example: ""IMAGESIZE"" -> ""_I_M_A_G_E_S_I_Z_E"""
"Constants.java:317"$0$0$0$9$53$"	 * @param propertyName the name of the bean property"
"Constants.java:318"$0$0$0$7$50$"	 * @return the corresponding constant name prefix"
"Constants.java:319"$1$0$0$3$30$"	 * @see #getValuesForProperty"
"Constants.java:320"$0$0$0$3$27$"	 * @see #toCodeForProperty"
"Constants.java:321"$0$0$0$1$4$"	 */"
"Constants.java:322"$0$0$0$5$66$"	public String propertyToConstantNamePrefix(String propertyName) {"
"Constants.java:323"$0$0$0$5$51$"		StringBuilder parsedPrefix = new StringBuilder();"
"Constants.java:324"$0$0$0$10$51$"		for (int i = 0; i < propertyName.length(); i++) {"
"Constants.java:325"$0$0$0$4$35$"			char c = propertyName.charAt(i);"
"Constants.java:326"$0$0$0$3$34$"			if (Character.isUpperCase(c)) {"
"Constants.java:327"$0$0$0$1$29$"				parsedPrefix.append(""_"");"
"Constants.java:328"$0$0$0$1$27$"				parsedPrefix.append(c);"
"Constants.java:329"$0$0$0$1$4$"			}"
"Constants.java:330"$0$0$0$2$9$"			else {"
"Constants.java:331"$0$0$0$1$50$"				parsedPrefix.append(Character.toUpperCase(c));"
"Constants.java:332"$0$0$0$1$4$"			}"
"Constants.java:333"$0$0$0$1$3$"		}"
"Constants.java:334"$0$0$0$2$33$"		return parsedPrefix.toString();"
"Constants.java:335"$0$0$0$1$2$"	}"
"Constants.java:336"$0$0$0$0$0$""
"Constants.java:337"$0$0$0$0$0$""
"Constants.java:338"$0$0$0$1$4$"	/**"
"Constants.java:339"$0$0$0$11$66$"	 * Exception thrown when the {@link Constants} class is asked for"
"Constants.java:340"$0$0$0$5$29$"	 * an invalid constant name."
"Constants.java:341"$0$0$0$1$4$"	 */"
"Constants.java:342"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"Constants.java:343"$0$0$0$7$73$"	public static class ConstantException extends IllegalArgumentException {"
"Constants.java:344"$0$0$0$0$0$""
"Constants.java:345"$0$0$0$1$5$"		/**"
"Constants.java:346"$0$0$0$9$55$"		 * Thrown when an invalid constant name is requested."
"Constants.java:347"$0$0$0$11$75$"		 * @param className name of the class containing the constant definitions"
"Constants.java:348"$0$0$0$6$39$"		 * @param field invalid constant name"
"Constants.java:349"$0$0$0$7$46$"		 * @param message description of the problem"
"Constants.java:350"$0$0$0$1$5$"		 */"
"Constants.java:351"$0$0$0$8$76$"		public ConstantException(String className, String field, String message) {"
"Constants.java:352"$0$0$0$18$79$"			super(""Field '"" + field + ""' "" + message + "" in class ["" + className + ""]"");"
"Constants.java:353"$0$0$0$1$3$"		}"
"Constants.java:354"$0$0$0$0$0$""
"Constants.java:355"$0$0$0$1$5$"		/**"
"Constants.java:356"$0$0$0$10$56$"		 * Thrown when an invalid constant value is looked up."
"Constants.java:357"$0$0$0$11$75$"		 * @param className name of the class containing the constant definitions"
"Constants.java:358"$0$0$0$9$60$"		 * @param namePrefix prefix of the searched constant names"
"Constants.java:359"$0$0$0$8$46$"		 * @param value the looked up constant value"
"Constants.java:360"$0$0$0$1$5$"		 */"
"Constants.java:361"$0$0$0$8$79$"		public ConstantException(String className, String namePrefix, Object value) {"
"Constants.java:362"$0$0$0$22$104$"			super(""No '"" + namePrefix + ""' field with value '"" + value + ""' found in class ["" + className + ""]"");"
"Constants.java:363"$0$0$0$1$3$"		}"
"Constants.java:364"$0$0$0$1$2$"	}"
"Constants.java:365"$0$0$0$0$0$""
"Constants.java:366"$0$0$0$1$1$"}"
"StandardEnvironment.java:1"$0$0$0$1$2$"/*"
"StandardEnvironment.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"StandardEnvironment.java:3"$0$0$0$1$2$" *"
"StandardEnvironment.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StandardEnvironment.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StandardEnvironment.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StandardEnvironment.java:7"$0$0$0$1$2$" *"
"StandardEnvironment.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StandardEnvironment.java:9"$0$0$0$1$2$" *"
"StandardEnvironment.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StandardEnvironment.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StandardEnvironment.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StandardEnvironment.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StandardEnvironment.java:14"$0$0$0$5$33$" * limitations under the License."
"StandardEnvironment.java:15"$0$0$0$1$3$" */"
"StandardEnvironment.java:16"$0$0$0$0$0$""
"StandardEnvironment.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"StandardEnvironment.java:18"$0$0$0$0$0$""
"StandardEnvironment.java:19"$0$0$0$1$3$"/**"
"StandardEnvironment.java:20"$0$0$0$11$83$" * {@link Environment} implementation suitable for use in 'standard' (i.e. non-web)"
"StandardEnvironment.java:21"$0$0$0$2$16$" * applications."
"StandardEnvironment.java:22"$0$0$0$1$2$" *"
"StandardEnvironment.java:23"$0$0$0$13$85$" * <p>In addition to the usual functions of a {@link ConfigurableEnvironment} such as"
"StandardEnvironment.java:24"$0$0$0$10$89$" * property resolution and profile-related operations, this implementation configures two"
"StandardEnvironment.java:25"$0$0$0$11$67$" * default property sources, to be searched in the following order:"
"StandardEnvironment.java:26"$0$0$0$2$7$" * <ul>"
"StandardEnvironment.java:27"$1$0$0$5$79$" * <li>{@linkplain AbstractEnvironment#getSystemProperties() system properties}"
"StandardEnvironment.java:28"$1$0$0$6$91$" * <li>{@linkplain AbstractEnvironment#getSystemEnvironment() system environment variables}"
"StandardEnvironment.java:29"$0$0$0$2$8$" * </ul>"
"StandardEnvironment.java:30"$0$0$0$1$2$" *"
"StandardEnvironment.java:31"$0$0$0$19$87$" * That is, if the key ""xyz"" is present both in the JVM system properties as well as in"
"StandardEnvironment.java:32"$0$0$0$16$88$" * the set of environment variables for the current process, the value of key ""xyz"" from"
"StandardEnvironment.java:33"$1$0$0$11$87$" * system properties will return from a call to {@code environment.getProperty(""xyz"")}."
"StandardEnvironment.java:34"$0$0$0$13$82$" * This ordering is chosen by default because system properties are per-JVM, while"
"StandardEnvironment.java:35"$0$0$0$15$84$" * environment variables may be the same across many JVMs on a given system.  Giving"
"StandardEnvironment.java:36"$0$0$0$12$83$" * system properties precedence allows for overriding of environment variables on a"
"StandardEnvironment.java:37"$0$0$0$3$17$" * per-JVM basis."
"StandardEnvironment.java:38"$0$0$0$1$2$" *"
"StandardEnvironment.java:39"$0$0$0$12$80$" * <p>These default property sources may be removed, reordered, or replaced; and"
"StandardEnvironment.java:40"$0$0$0$11$84$" * additional property sources may be added using the {@link MutablePropertySources}"
"StandardEnvironment.java:41"$1$0$0$7$61$" * instance available from {@link #getPropertySources()}. See"
"StandardEnvironment.java:42"$0$0$0$7$62$" * {@link ConfigurableEnvironment} Javadoc for usage examples."
"StandardEnvironment.java:43"$0$0$0$1$2$" *"
"StandardEnvironment.java:44"$0$0$0$10$89$" * <p>See {@link SystemEnvironmentPropertySource} javadoc for details on special handling"
"StandardEnvironment.java:45"$0$0$0$14$89$" * of property names in shell environments (e.g. Bash) that disallow period characters in"
"StandardEnvironment.java:46"$0$0$0$3$18$" * variable names."
"StandardEnvironment.java:47"$0$0$0$1$2$" *"
"StandardEnvironment.java:48"$0$0$0$4$22$" * @author Chris Beams"
"StandardEnvironment.java:49"$0$0$0$3$13$" * @since 3.1"
"StandardEnvironment.java:50"$0$0$0$3$31$" * @see ConfigurableEnvironment"
"StandardEnvironment.java:51"$0$0$0$3$39$" * @see SystemEnvironmentPropertySource"
"StandardEnvironment.java:52"$0$0$0$3$74$" * @see org.springframework.web.context.support.StandardServletEnvironment"
"StandardEnvironment.java:53"$0$0$0$1$3$" */"
"StandardEnvironment.java:54"$0$0$0$6$62$"public class StandardEnvironment extends AbstractEnvironment {"
"StandardEnvironment.java:55"$0$0$0$0$0$""
"StandardEnvironment.java:56"$0$0$0$8$58$"	/** System environment property source name: {@value}. */"
"StandardEnvironment.java:57"$0$0$0$7$90$"	public static final String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = ""systemEnvironment"";"
"StandardEnvironment.java:58"$0$0$0$0$0$""
"StandardEnvironment.java:59"$0$0$0$9$61$"	/** JVM system properties property source name: {@value}. */"
"StandardEnvironment.java:60"$0$0$0$7$88$"	public static final String SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME = ""systemProperties"";"
"StandardEnvironment.java:61"$0$0$0$0$0$""
"StandardEnvironment.java:62"$0$0$0$0$0$""
"StandardEnvironment.java:63"$0$0$0$1$4$"	/**"
"StandardEnvironment.java:64"$0$0$0$13$81$"	 * Customize the set of property sources with those appropriate for any standard"
"StandardEnvironment.java:65"$0$0$0$3$21$"	 * Java environment:"
"StandardEnvironment.java:66"$0$0$0$2$8$"	 * <ul>"
"StandardEnvironment.java:67"$0$0$0$3$56$"	 * <li>{@value #SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME}"
"StandardEnvironment.java:68"$0$0$0$3$57$"	 * <li>{@value #SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME}"
"StandardEnvironment.java:69"$0$0$0$2$9$"	 * </ul>"
"StandardEnvironment.java:70"$0$0$0$7$82$"	 * <p>Properties present in {@value #SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME} will"
"StandardEnvironment.java:71"$0$0$0$8$84$"	 * take precedence over those in {@value #SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME}."
"StandardEnvironment.java:72"$0$0$0$3$77$"	 * @see AbstractEnvironment#customizePropertySources(MutablePropertySources)"
"StandardEnvironment.java:73"$1$0$0$3$31$"	 * @see #getSystemProperties()"
"StandardEnvironment.java:74"$1$0$0$3$32$"	 * @see #getSystemEnvironment()"
"StandardEnvironment.java:75"$0$0$0$1$4$"	 */"
"StandardEnvironment.java:76"$0$0$0$1$10$"	@Override"
"StandardEnvironment.java:77"$0$0$0$5$82$"	protected void customizePropertySources(MutablePropertySources propertySources) {"
"StandardEnvironment.java:78"$0$0$0$1$26$"		propertySources.addLast("
"StandardEnvironment.java:79"$1$0$0$3$97$"				new PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));"
"StandardEnvironment.java:80"$0$0$0$1$26$"		propertySources.addLast("
"StandardEnvironment.java:81"$1$0$0$3$106$"				new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));"
"StandardEnvironment.java:82"$0$0$0$1$2$"	}"
"StandardEnvironment.java:83"$0$0$0$0$0$""
"StandardEnvironment.java:84"$0$0$0$1$1$"}"
"DataBufferUtils.java:1"$0$0$0$1$2$"/*"
"DataBufferUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"DataBufferUtils.java:3"$0$0$0$1$2$" *"
"DataBufferUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DataBufferUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DataBufferUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DataBufferUtils.java:7"$0$0$0$1$2$" *"
"DataBufferUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DataBufferUtils.java:9"$0$0$0$1$2$" *"
"DataBufferUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DataBufferUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DataBufferUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DataBufferUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DataBufferUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"DataBufferUtils.java:15"$0$0$0$1$3$" */"
"DataBufferUtils.java:16"$0$0$0$0$0$""
"DataBufferUtils.java:17"$0$0$0$2$43$"package org.springframework.core.io.buffer;"
"DataBufferUtils.java:18"$0$0$0$0$0$""
"DataBufferUtils.java:19"$0$0$0$2$20$"import java.io.File;"
"DataBufferUtils.java:20"$0$0$0$2$27$"import java.io.IOException;"
"DataBufferUtils.java:21"$0$0$0$2$27$"import java.io.InputStream;"
"DataBufferUtils.java:22"$0$0$0$2$28$"import java.io.OutputStream;"
"DataBufferUtils.java:23"$0$0$0$2$27$"import java.nio.ByteBuffer;"
"DataBufferUtils.java:24"$0$0$0$2$49$"import java.nio.channels.AsynchronousFileChannel;"
"DataBufferUtils.java:25"$0$0$0$2$33$"import java.nio.channels.Channel;"
"DataBufferUtils.java:26"$0$0$0$2$34$"import java.nio.channels.Channels;"
"DataBufferUtils.java:27"$0$0$0$2$43$"import java.nio.channels.CompletionHandler;"
"DataBufferUtils.java:28"$0$0$0$2$45$"import java.nio.channels.ReadableByteChannel;"
"DataBufferUtils.java:29"$0$0$0$2$45$"import java.nio.channels.WritableByteChannel;"
"DataBufferUtils.java:30"$0$0$0$2$32$"import java.nio.file.OpenOption;"
"DataBufferUtils.java:31"$0$0$0$2$26$"import java.nio.file.Path;"
"DataBufferUtils.java:32"$0$0$0$2$40$"import java.nio.file.StandardOpenOption;"
"DataBufferUtils.java:33"$0$0$0$2$24$"import java.util.Arrays;"
"DataBufferUtils.java:34"$0$0$0$2$25$"import java.util.HashSet;"
"DataBufferUtils.java:35"$0$0$0$2$21$"import java.util.Set;"
"DataBufferUtils.java:36"$0$0$0$2$37$"import java.util.concurrent.Callable;"
"DataBufferUtils.java:37"$0$0$0$2$49$"import java.util.concurrent.atomic.AtomicBoolean;"
"DataBufferUtils.java:38"$0$0$0$2$46$"import java.util.concurrent.atomic.AtomicLong;"
"DataBufferUtils.java:39"$0$0$0$2$51$"import java.util.concurrent.atomic.AtomicReference;"
"DataBufferUtils.java:40"$0$0$0$2$35$"import java.util.function.Consumer;"
"DataBufferUtils.java:41"$0$0$0$0$0$""
"DataBufferUtils.java:42"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"DataBufferUtils.java:43"$0$0$0$2$40$"import org.reactivestreams.Subscription;"
"DataBufferUtils.java:44"$0$0$0$2$45$"import reactor.core.publisher.BaseSubscriber;"
"DataBufferUtils.java:45"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"DataBufferUtils.java:46"$0$0$0$2$39$"import reactor.core.publisher.FluxSink;"
"DataBufferUtils.java:47"$0$0$0$2$35$"import reactor.core.publisher.Mono;"
"DataBufferUtils.java:48"$0$0$0$2$46$"import reactor.core.publisher.SynchronousSink;"
"DataBufferUtils.java:49"$0$0$0$0$0$""
"DataBufferUtils.java:50"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"DataBufferUtils.java:51"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"DataBufferUtils.java:52"$0$0$0$2$39$"import org.springframework.util.Assert;"
"DataBufferUtils.java:53"$0$0$0$0$0$""
"DataBufferUtils.java:54"$0$0$0$1$3$"/**"
"DataBufferUtils.java:55"$0$0$0$9$65$" * Utility class for working with {@link DataBuffer DataBuffers}."
"DataBufferUtils.java:56"$0$0$0$1$2$" *"
"DataBufferUtils.java:57"$0$0$0$4$24$" * @author Arjen Poutsma"
"DataBufferUtils.java:58"$0$0$0$4$23$" * @author Brian Clozel"
"DataBufferUtils.java:59"$0$0$0$3$13$" * @since 5.0"
"DataBufferUtils.java:60"$0$0$0$1$3$" */"
"DataBufferUtils.java:61"$0$0$0$5$39$"public abstract class DataBufferUtils {"
"DataBufferUtils.java:62"$0$0$0$0$0$""
"DataBufferUtils.java:63"$0$0$0$7$87$"	private static final Consumer<DataBuffer> RELEASE_CONSUMER = DataBufferUtils::release;"
"DataBufferUtils.java:64"$0$0$0$0$0$""
"DataBufferUtils.java:65"$0$0$0$0$0$""
"DataBufferUtils.java:66"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"DataBufferUtils.java:67"$0$0$1$2$11$"	// Reading"
"DataBufferUtils.java:68"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"DataBufferUtils.java:69"$0$0$0$0$0$""
"DataBufferUtils.java:70"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:71"$0$0$0$14$76$"	 * Obtain a {@link InputStream} from the given supplier, and read it into a"
"DataBufferUtils.java:72"$0$0$0$12$73$"	 * {@code Flux} of {@code DataBuffer}s. Closes the input stream when the"
"DataBufferUtils.java:73"$0$0$0$4$23$"	 * Flux is terminated."
"DataBufferUtils.java:74"$0$0$0$12$77$"	 * @param inputStreamSupplier the supplier for the input stream to read from"
"DataBufferUtils.java:75"$0$0$0$10$64$"	 * @param bufferFactory the factory to create data buffers with"
"DataBufferUtils.java:76"$0$0$0$10$58$"	 * @param bufferSize the maximum size of the data buffers"
"DataBufferUtils.java:77"$0$0$0$12$62$"	 * @return a Flux of data buffers read from the given channel"
"DataBufferUtils.java:78"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:79"$0$0$0$4$48$"	public static Flux<DataBuffer> readInputStream("
"DataBufferUtils.java:80"$0$0$0$7$96$"			Callable<InputStream> inputStreamSupplier, DataBufferFactory bufferFactory, int bufferSize) {"
"DataBufferUtils.java:81"$0$0$0$0$0$""
"DataBufferUtils.java:82"$0$0$0$6$80$"		Assert.notNull(inputStreamSupplier, ""'inputStreamSupplier' must not be null"");"
"DataBufferUtils.java:83"$0$0$0$6$107$"		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), bufferFactory, bufferSize);"
"DataBufferUtils.java:84"$0$0$0$1$2$"	}"
"DataBufferUtils.java:85"$0$0$0$0$0$""
"DataBufferUtils.java:86"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:87"$0$0$0$11$74$"	 * Obtain a {@link ReadableByteChannel} from the given supplier, and read"
"DataBufferUtils.java:88"$0$0$0$13$74$"	 * it into a {@code Flux} of {@code DataBuffer}s. Closes the channel when"
"DataBufferUtils.java:89"$0$0$0$5$27$"	 * the Flux is terminated."
"DataBufferUtils.java:90"$0$0$0$11$68$"	 * @param channelSupplier the supplier for the channel to read from"
"DataBufferUtils.java:91"$0$0$0$10$64$"	 * @param bufferFactory the factory to create data buffers with"
"DataBufferUtils.java:92"$0$0$0$10$58$"	 * @param bufferSize the maximum size of the data buffers"
"DataBufferUtils.java:93"$0$0$0$12$62$"	 * @return a Flux of data buffers read from the given channel"
"DataBufferUtils.java:94"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:95"$0$0$0$4$48$"	public static Flux<DataBuffer> readByteChannel("
"DataBufferUtils.java:96"$0$0$0$7$100$"			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory bufferFactory, int bufferSize) {"
"DataBufferUtils.java:97"$0$0$0$0$0$""
"DataBufferUtils.java:98"$0$0$0$6$72$"		Assert.notNull(channelSupplier, ""'channelSupplier' must not be null"");"
"DataBufferUtils.java:99"$0$0$0$6$72$"		Assert.notNull(bufferFactory, ""'dataBufferFactory' must not be null"");"
"DataBufferUtils.java:100"$0$0$0$8$60$"		Assert.isTrue(bufferSize > 0, ""'bufferSize' must be > 0"");"
"DataBufferUtils.java:101"$0$0$0$0$0$""
"DataBufferUtils.java:102"$0$0$0$2$36$"		return Flux.using(channelSupplier,"
"DataBufferUtils.java:103"$0$0$0$6$99$"				channel -> Flux.generate(new ReadableByteChannelGenerator(channel, bufferFactory, bufferSize)),"
"DataBufferUtils.java:104"$0$0$0$1$35$"				DataBufferUtils::closeChannel);"
"DataBufferUtils.java:105"$0$0$0$0$0$""
"DataBufferUtils.java:106"$0$0$1$9$50$"		// No doOnDiscard as operators used do not cache"
"DataBufferUtils.java:107"$0$0$0$1$2$"	}"
"DataBufferUtils.java:108"$0$0$0$0$0$""
"DataBufferUtils.java:109"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:110"$0$0$0$11$78$"	 * Obtain a {@code AsynchronousFileChannel} from the given supplier, and read"
"DataBufferUtils.java:111"$0$0$0$13$74$"	 * it into a {@code Flux} of {@code DataBuffer}s. Closes the channel when"
"DataBufferUtils.java:112"$0$0$0$5$27$"	 * the Flux is terminated."
"DataBufferUtils.java:113"$0$0$0$11$68$"	 * @param channelSupplier the supplier for the channel to read from"
"DataBufferUtils.java:114"$0$0$0$10$64$"	 * @param bufferFactory the factory to create data buffers with"
"DataBufferUtils.java:115"$0$0$0$10$58$"	 * @param bufferSize the maximum size of the data buffers"
"DataBufferUtils.java:116"$0$0$0$12$62$"	 * @return a Flux of data buffers read from the given channel"
"DataBufferUtils.java:117"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:118"$0$0$0$4$60$"	public static Flux<DataBuffer> readAsynchronousFileChannel("
"DataBufferUtils.java:119"$0$0$0$7$104$"			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory bufferFactory, int bufferSize) {"
"DataBufferUtils.java:120"$0$0$0$0$0$""
"DataBufferUtils.java:121"$0$0$0$5$84$"		return readAsynchronousFileChannel(channelSupplier, 0, bufferFactory, bufferSize);"
"DataBufferUtils.java:122"$0$0$0$1$2$"	}"
"DataBufferUtils.java:123"$0$0$0$0$0$""
"DataBufferUtils.java:124"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:125"$0$0$0$10$73$"	 * Obtain a {@code AsynchronousFileChannel} from the given supplier, and"
"DataBufferUtils.java:126"$0$0$0$14$77$"	 * read it into a {@code Flux} of {@code DataBuffer}s, starting at the given"
"DataBufferUtils.java:127"$0$0$0$10$61$"	 * position. Closes the channel when the Flux is terminated."
"DataBufferUtils.java:128"$0$0$0$11$68$"	 * @param channelSupplier the supplier for the channel to read from"
"DataBufferUtils.java:129"$0$0$0$9$54$"	 * @param position the position to start reading from"
"DataBufferUtils.java:130"$0$0$0$10$64$"	 * @param bufferFactory the factory to create data buffers with"
"DataBufferUtils.java:131"$0$0$0$10$58$"	 * @param bufferSize the maximum size of the data buffers"
"DataBufferUtils.java:132"$0$0$0$12$62$"	 * @return a Flux of data buffers read from the given channel"
"DataBufferUtils.java:133"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:134"$0$0$0$4$60$"	public static Flux<DataBuffer> readAsynchronousFileChannel("
"DataBufferUtils.java:135"$0$0$0$4$68$"			Callable<AsynchronousFileChannel> channelSupplier, long position,"
"DataBufferUtils.java:136"$0$0$0$5$53$"			DataBufferFactory bufferFactory, int bufferSize) {"
"DataBufferUtils.java:137"$0$0$0$0$0$""
"DataBufferUtils.java:138"$0$0$0$6$72$"		Assert.notNull(channelSupplier, ""'channelSupplier' must not be null"");"
"DataBufferUtils.java:139"$0$0$0$6$72$"		Assert.notNull(bufferFactory, ""'dataBufferFactory' must not be null"");"
"DataBufferUtils.java:140"$0$0$0$8$58$"		Assert.isTrue(position >= 0, ""'position' must be >= 0"");"
"DataBufferUtils.java:141"$0$0$0$8$60$"		Assert.isTrue(bufferSize > 0, ""'bufferSize' must be > 0"");"
"DataBufferUtils.java:142"$0$0$0$0$0$""
"DataBufferUtils.java:143"$0$0$0$4$53$"		Flux<DataBuffer> flux = Flux.using(channelSupplier,"
"DataBufferUtils.java:144"$0$0$0$5$36$"				channel -> Flux.create(sink -> {"
"DataBufferUtils.java:145"$0$0$0$3$36$"					ReadCompletionHandler handler ="
"DataBufferUtils.java:146"$0$0$0$6$85$"							new ReadCompletionHandler(channel, sink, position, bufferFactory, bufferSize);"
"DataBufferUtils.java:147"$0$0$0$1$36$"					sink.onCancel(handler::cancel);"
"DataBufferUtils.java:148"$0$0$0$1$38$"					sink.onRequest(handler::request);"
"DataBufferUtils.java:149"$0$0$0$1$7$"				}),"
"DataBufferUtils.java:150"$0$0$0$3$16$"				channel -> {"
"DataBufferUtils.java:151"$0$0$1$14$81$"					// Do not close channel from here, rather wait for the current read callback"
"DataBufferUtils.java:152"$0$0$1$8$57$"					// and then complete after releasing the DataBuffer."
"DataBufferUtils.java:153"$0$0$0$1$7$"				});"
"DataBufferUtils.java:154"$0$0$0$0$0$""
"DataBufferUtils.java:155"$0$0$0$3$76$"		return flux.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);"
"DataBufferUtils.java:156"$0$0$0$1$2$"	}"
"DataBufferUtils.java:157"$0$0$0$0$0$""
"DataBufferUtils.java:158"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:159"$0$0$0$16$91$"	 * Read bytes from the given file {@code Path} into a {@code Flux} of {@code DataBuffer}s."
"DataBufferUtils.java:160"$0$0$0$14$75$"	 * The method ensures that the file is closed when the flux is terminated."
"DataBufferUtils.java:161"$0$0$0$9$43$"	 * @param path the path to read bytes from"
"DataBufferUtils.java:162"$0$0$0$10$64$"	 * @param bufferFactory the factory to create data buffers with"
"DataBufferUtils.java:163"$0$0$0$10$58$"	 * @param bufferSize the maximum size of the data buffers"
"DataBufferUtils.java:164"$0$0$0$12$62$"	 * @return a Flux of data buffers read from the given channel"
"DataBufferUtils.java:165"$0$0$0$3$14$"	 * @since 5.2"
"DataBufferUtils.java:166"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:167"$0$0$0$4$37$"	public static Flux<DataBuffer> read("
"DataBufferUtils.java:168"$0$0$0$9$87$"			Path path, DataBufferFactory bufferFactory, int bufferSize, OpenOption... options) {"
"DataBufferUtils.java:169"$0$0$0$0$0$""
"DataBufferUtils.java:170"$0$0$0$6$48$"		Assert.notNull(path, ""Path must not be null"");"
"DataBufferUtils.java:171"$0$0$0$6$66$"		Assert.notNull(bufferFactory, ""BufferFactory must not be null"");"
"DataBufferUtils.java:172"$0$0$0$8$60$"		Assert.isTrue(bufferSize > 0, ""'bufferSize' must be > 0"");"
"DataBufferUtils.java:173"$0$0$0$5$27$"		if (options.length > 0) {"
"DataBufferUtils.java:174"$0$0$0$6$38$"			for (OpenOption option : options) {"
"DataBufferUtils.java:175"$0$0$0$7$95$"				Assert.isTrue(!(option == StandardOpenOption.APPEND || option == StandardOpenOption.WRITE),"
"DataBufferUtils.java:176"$0$0$0$7$38$"						""'"" + option + ""' not allowed"");"
"DataBufferUtils.java:177"$0$0$0$1$4$"			}"
"DataBufferUtils.java:178"$0$0$0$1$3$"		}"
"DataBufferUtils.java:179"$0$0$0$0$0$""
"DataBufferUtils.java:180"$0$0$0$5$87$"		return readAsynchronousFileChannel(() -> AsynchronousFileChannel.open(path, options),"
"DataBufferUtils.java:181"$0$0$0$2$31$"				bufferFactory, bufferSize);"
"DataBufferUtils.java:182"$0$0$0$1$2$"	}"
"DataBufferUtils.java:183"$0$0$0$0$0$""
"DataBufferUtils.java:184"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:185"$0$0$0$13$79$"	 * Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s."
"DataBufferUtils.java:186"$0$0$0$12$52$"	 * <p>If the resource is a file, it is read into an"
"DataBufferUtils.java:187"$0$0$0$9$66$"	 * {@code AsynchronousFileChannel} and turned to {@code Flux} via"
"DataBufferUtils.java:188"$0$0$0$7$82$"	 * {@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else"
"DataBufferUtils.java:189"$0$0$0$8$76$"	 * fall back to {@link #readByteChannel(Callable, DataBufferFactory, int)}."
"DataBufferUtils.java:190"$0$0$0$9$51$"	 * Closes the channel when the flux is terminated."
"DataBufferUtils.java:191"$0$0$0$8$45$"	 * @param resource the resource to read from"
"DataBufferUtils.java:192"$0$0$0$10$64$"	 * @param bufferFactory the factory to create data buffers with"
"DataBufferUtils.java:193"$0$0$0$10$58$"	 * @param bufferSize the maximum size of the data buffers"
"DataBufferUtils.java:194"$0$0$0$12$62$"	 * @return a Flux of data buffers read from the given channel"
"DataBufferUtils.java:195"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:196"$0$0$0$10$106$"	public static Flux<DataBuffer> read(Resource resource, DataBufferFactory bufferFactory, int bufferSize) {"
"DataBufferUtils.java:197"$0$0$0$5$54$"		return read(resource, 0, bufferFactory, bufferSize);"
"DataBufferUtils.java:198"$0$0$0$1$2$"	}"
"DataBufferUtils.java:199"$0$0$0$0$0$""
"DataBufferUtils.java:200"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:201"$0$0$0$13$78$"	 * Read the given {@code Resource} into a {@code Flux} of {@code DataBuffer}s"
"DataBufferUtils.java:202"$0$0$0$6$35$"	 * starting at the given position."
"DataBufferUtils.java:203"$0$0$0$12$52$"	 * <p>If the resource is a file, it is read into an"
"DataBufferUtils.java:204"$0$0$0$9$66$"	 * {@code AsynchronousFileChannel} and turned to {@code Flux} via"
"DataBufferUtils.java:205"$0$0$0$7$82$"	 * {@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} or else"
"DataBufferUtils.java:206"$0$0$0$8$76$"	 * fall back on {@link #readByteChannel(Callable, DataBufferFactory, int)}."
"DataBufferUtils.java:207"$0$0$0$9$51$"	 * Closes the channel when the flux is terminated."
"DataBufferUtils.java:208"$0$0$0$8$45$"	 * @param resource the resource to read from"
"DataBufferUtils.java:209"$0$0$0$9$54$"	 * @param position the position to start reading from"
"DataBufferUtils.java:210"$0$0$0$10$64$"	 * @param bufferFactory the factory to create data buffers with"
"DataBufferUtils.java:211"$0$0$0$10$58$"	 * @param bufferSize the maximum size of the data buffers"
"DataBufferUtils.java:212"$0$0$0$12$62$"	 * @return a Flux of data buffers read from the given channel"
"DataBufferUtils.java:213"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:214"$0$0$0$4$37$"	public static Flux<DataBuffer> read("
"DataBufferUtils.java:215"$0$0$0$9$87$"			Resource resource, long position, DataBufferFactory bufferFactory, int bufferSize) {"
"DataBufferUtils.java:216"$0$0$0$0$0$""
"DataBufferUtils.java:217"$0$0$0$2$7$"		try {"
"DataBufferUtils.java:218"$0$0$0$3$27$"			if (resource.isFile()) {"
"DataBufferUtils.java:219"$1$0$0$4$35$"				File file = resource.getFile();"
"DataBufferUtils.java:220"$0$0$0$2$39$"				return readAsynchronousFileChannel("
"DataBufferUtils.java:221"$0$0$0$4$81$"						() -> AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ),"
"DataBufferUtils.java:222"$0$0$0$3$43$"						position, bufferFactory, bufferSize);"
"DataBufferUtils.java:223"$0$0$0$1$4$"			}"
"DataBufferUtils.java:224"$0$0$0$1$3$"		}"
"DataBufferUtils.java:225"$0$0$0$4$30$"		catch (IOException ignore) {"
"DataBufferUtils.java:226"$0$0$1$5$51$"			// fallback to resource.readableChannel(), below"
"DataBufferUtils.java:227"$0$0$0$1$3$"		}"
"DataBufferUtils.java:228"$0$0$0$6$98$"		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, bufferFactory, bufferSize);"
"DataBufferUtils.java:229"$0$0$0$9$71$"		return position == 0 ? result : skipUntilByteCount(result, position);"
"DataBufferUtils.java:230"$0$0$0$1$2$"	}"
"DataBufferUtils.java:231"$0$0$0$0$0$""
"DataBufferUtils.java:232"$0$0$0$0$0$""
"DataBufferUtils.java:233"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"DataBufferUtils.java:234"$0$0$1$2$11$"	// Writing"
"DataBufferUtils.java:235"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"DataBufferUtils.java:236"$0$0$0$0$0$""
"DataBufferUtils.java:237"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:238"$0$0$0$12$73$"	 * Write the given stream of {@link DataBuffer DataBuffers} to the given"
"DataBufferUtils.java:239"$0$0$0$9$75$"	 * {@code OutputStream}. Does <strong>not</strong> close the output stream"
"DataBufferUtils.java:240"$0$0$0$9$62$"	 * when the flux is terminated, and does <strong>not</strong>"
"DataBufferUtils.java:241"$0$0$0$10$77$"	 * {@linkplain #release(DataBuffer) release} the data buffers in the source."
"DataBufferUtils.java:242"$0$0$0$12$73$"	 * If releasing is required, then subscribe to the returned {@code Flux}"
"DataBufferUtils.java:243"$0$0$0$5$38$"	 * with a {@link #releaseConsumer()}."
"DataBufferUtils.java:244"$0$0$0$12$70$"	 * <p>Note that the writing process does not start until the returned"
"DataBufferUtils.java:245"$0$0$0$6$34$"	 * {@code Flux} is subscribed to."
"DataBufferUtils.java:246"$0$0$0$11$58$"	 * @param source the stream of data buffers to be written"
"DataBufferUtils.java:247"$0$0$0$9$53$"	 * @param outputStream the output stream to write to"
"DataBufferUtils.java:248"$0$0$0$13$73$"	 * @return a Flux containing the same buffers as in {@code source}, that"
"DataBufferUtils.java:249"$0$0$0$12$73$"	 * starts the writing process when subscribed to, and that publishes any"
"DataBufferUtils.java:250"$0$0$0$7$44$"	 * writing errors and the completion signal"
"DataBufferUtils.java:251"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:252"$0$0$0$8$96$"	public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {"
"DataBufferUtils.java:253"$0$0$0$6$54$"		Assert.notNull(source, ""'source' must not be null"");"
"DataBufferUtils.java:254"$0$0$0$6$66$"		Assert.notNull(outputStream, ""'outputStream' must not be null"");"
"DataBufferUtils.java:255"$0$0$0$0$0$""
"DataBufferUtils.java:256"$0$0$0$4$66$"		WritableByteChannel channel = Channels.newChannel(outputStream);"
"DataBufferUtils.java:257"$0$0$0$3$32$"		return write(source, channel);"
"DataBufferUtils.java:258"$0$0$0$1$2$"	}"
"DataBufferUtils.java:259"$0$0$0$0$0$""
"DataBufferUtils.java:260"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:261"$0$0$0$12$73$"	 * Write the given stream of {@link DataBuffer DataBuffers} to the given"
"DataBufferUtils.java:262"$0$0$0$8$76$"	 * {@code WritableByteChannel}. Does <strong>not</strong> close the channel"
"DataBufferUtils.java:263"$0$0$0$9$62$"	 * when the flux is terminated, and does <strong>not</strong>"
"DataBufferUtils.java:264"$0$0$0$10$77$"	 * {@linkplain #release(DataBuffer) release} the data buffers in the source."
"DataBufferUtils.java:265"$0$0$0$12$73$"	 * If releasing is required, then subscribe to the returned {@code Flux}"
"DataBufferUtils.java:266"$0$0$0$5$38$"	 * with a {@link #releaseConsumer()}."
"DataBufferUtils.java:267"$0$0$0$12$70$"	 * <p>Note that the writing process does not start until the returned"
"DataBufferUtils.java:268"$0$0$0$6$34$"	 * {@code Flux} is subscribed to."
"DataBufferUtils.java:269"$0$0$0$11$58$"	 * @param source the stream of data buffers to be written"
"DataBufferUtils.java:270"$0$0$0$8$42$"	 * @param channel the channel to write to"
"DataBufferUtils.java:271"$0$0$0$13$73$"	 * @return a Flux containing the same buffers as in {@code source}, that"
"DataBufferUtils.java:272"$0$0$0$12$73$"	 * starts the writing process when subscribed to, and that publishes any"
"DataBufferUtils.java:273"$0$0$0$7$44$"	 * writing errors and the completion signal"
"DataBufferUtils.java:274"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:275"$0$0$0$8$98$"	public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {"
"DataBufferUtils.java:276"$0$0$0$6$54$"		Assert.notNull(source, ""'source' must not be null"");"
"DataBufferUtils.java:277"$0$0$0$6$56$"		Assert.notNull(channel, ""'channel' must not be null"");"
"DataBufferUtils.java:278"$0$0$0$0$0$""
"DataBufferUtils.java:279"$0$0$0$4$44$"		Flux<DataBuffer> flux = Flux.from(source);"
"DataBufferUtils.java:280"$0$0$0$4$30$"		return Flux.create(sink -> {"
"DataBufferUtils.java:281"$0$0$0$6$95$"			WritableByteChannelSubscriber subscriber = new WritableByteChannelSubscriber(sink, channel);"
"DataBufferUtils.java:282"$0$0$0$1$30$"			sink.onDispose(subscriber);"
"DataBufferUtils.java:283"$0$0$0$1$30$"			flux.subscribe(subscriber);"
"DataBufferUtils.java:284"$0$0$0$1$5$"		});"
"DataBufferUtils.java:285"$0$0$0$1$2$"	}"
"DataBufferUtils.java:286"$0$0$0$0$0$""
"DataBufferUtils.java:287"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:288"$0$0$0$12$73$"	 * Write the given stream of {@link DataBuffer DataBuffers} to the given"
"DataBufferUtils.java:289"$0$0$0$7$72$"	 * {@code AsynchronousFileChannel}. Does <strong>not</strong> close the"
"DataBufferUtils.java:290"$0$0$0$10$70$"	 * channel when the flux is terminated, and does <strong>not</strong>"
"DataBufferUtils.java:291"$0$0$0$10$77$"	 * {@linkplain #release(DataBuffer) release} the data buffers in the source."
"DataBufferUtils.java:292"$0$0$0$12$73$"	 * If releasing is required, then subscribe to the returned {@code Flux}"
"DataBufferUtils.java:293"$0$0$0$5$38$"	 * with a {@link #releaseConsumer()}."
"DataBufferUtils.java:294"$0$0$0$12$70$"	 * <p>Note that the writing process does not start until the returned"
"DataBufferUtils.java:295"$0$0$0$6$34$"	 * {@code Flux} is subscribed to."
"DataBufferUtils.java:296"$0$0$0$11$58$"	 * @param source the stream of data buffers to be written"
"DataBufferUtils.java:297"$0$0$0$8$42$"	 * @param channel the channel to write to"
"DataBufferUtils.java:298"$0$0$0$13$73$"	 * @return a Flux containing the same buffers as in {@code source}, that"
"DataBufferUtils.java:299"$0$0$0$12$73$"	 * starts the writing process when subscribed to, and that publishes any"
"DataBufferUtils.java:300"$0$0$0$7$44$"	 * writing errors and the completion signal"
"DataBufferUtils.java:301"$0$0$0$3$17$"	 * @since 5.0.10"
"DataBufferUtils.java:302"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:303"$0$0$0$8$102$"	public static Flux<DataBuffer> write(Publisher<DataBuffer> source, AsynchronousFileChannel channel) {"
"DataBufferUtils.java:304"$0$0$0$4$35$"		return write(source, channel, 0);"
"DataBufferUtils.java:305"$0$0$0$1$2$"	}"
"DataBufferUtils.java:306"$0$0$0$0$0$""
"DataBufferUtils.java:307"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:308"$0$0$0$12$73$"	 * Write the given stream of {@link DataBuffer DataBuffers} to the given"
"DataBufferUtils.java:309"$0$0$0$8$80$"	 * {@code AsynchronousFileChannel}. Does <strong>not</strong> close the channel"
"DataBufferUtils.java:310"$0$0$0$9$62$"	 * when the flux is terminated, and does <strong>not</strong>"
"DataBufferUtils.java:311"$0$0$0$10$77$"	 * {@linkplain #release(DataBuffer) release} the data buffers in the source."
"DataBufferUtils.java:312"$0$0$0$14$80$"	 * If releasing is required, then subscribe to the returned {@code Flux} with a"
"DataBufferUtils.java:313"$0$0$0$3$31$"	 * {@link #releaseConsumer()}."
"DataBufferUtils.java:314"$0$0$0$12$70$"	 * <p>Note that the writing process does not start until the returned"
"DataBufferUtils.java:315"$0$0$0$6$34$"	 * {@code Flux} is subscribed to."
"DataBufferUtils.java:316"$0$0$0$11$58$"	 * @param source the stream of data buffers to be written"
"DataBufferUtils.java:317"$0$0$0$8$42$"	 * @param channel the channel to write to"
"DataBufferUtils.java:318"$0$0$0$14$85$"	 * @param position the file position where writing is to begin; must be non-negative"
"DataBufferUtils.java:319"$0$0$0$13$73$"	 * @return a flux containing the same buffers as in {@code source}, that"
"DataBufferUtils.java:320"$0$0$0$12$73$"	 * starts the writing process when subscribed to, and that publishes any"
"DataBufferUtils.java:321"$0$0$0$7$44$"	 * writing errors and the completion signal"
"DataBufferUtils.java:322"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:323"$0$0$0$4$38$"	public static Flux<DataBuffer> write("
"DataBufferUtils.java:324"$0$0$0$9$92$"			Publisher<? extends DataBuffer> source, AsynchronousFileChannel channel, long position) {"
"DataBufferUtils.java:325"$0$0$0$0$0$""
"DataBufferUtils.java:326"$0$0$0$6$54$"		Assert.notNull(source, ""'source' must not be null"");"
"DataBufferUtils.java:327"$0$0$0$6$56$"		Assert.notNull(channel, ""'channel' must not be null"");"
"DataBufferUtils.java:328"$0$0$0$8$58$"		Assert.isTrue(position >= 0, ""'position' must be >= 0"");"
"DataBufferUtils.java:329"$0$0$0$0$0$""
"DataBufferUtils.java:330"$0$0$0$4$44$"		Flux<DataBuffer> flux = Flux.from(source);"
"DataBufferUtils.java:331"$0$0$0$4$30$"		return Flux.create(sink -> {"
"DataBufferUtils.java:332"$0$0$0$7$88$"			WriteCompletionHandler handler = new WriteCompletionHandler(sink, channel, position);"
"DataBufferUtils.java:333"$0$0$0$1$27$"			sink.onDispose(handler);"
"DataBufferUtils.java:334"$0$0$0$1$27$"			flux.subscribe(handler);"
"DataBufferUtils.java:335"$0$0$0$1$5$"		});"
"DataBufferUtils.java:336"$0$0$0$0$0$""
"DataBufferUtils.java:337"$0$0$0$0$0$""
"DataBufferUtils.java:338"$0$0$0$1$2$"	}"
"DataBufferUtils.java:339"$0$0$0$0$0$""
"DataBufferUtils.java:340"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:341"$0$0$0$12$73$"	 * Write the given stream of {@link DataBuffer DataBuffers} to the given"
"DataBufferUtils.java:342"$0$0$0$10$71$"	 * file {@link Path}. The optional {@code options} parameter specifies"
"DataBufferUtils.java:343"$0$0$0$10$50$"	 * how the file is created or opened (defaults to"
"DataBufferUtils.java:344"$0$0$0$4$45$"	 * {@link StandardOpenOption#CREATE CREATE},"
"DataBufferUtils.java:345"$0$0$0$5$71$"	 * {@link StandardOpenOption#TRUNCATE_EXISTING TRUNCATE_EXISTING}, and"
"DataBufferUtils.java:346"$0$0$0$4$44$"	 * {@link StandardOpenOption#WRITE WRITE})."
"DataBufferUtils.java:347"$0$0$0$11$58$"	 * @param source the stream of data buffers to be written"
"DataBufferUtils.java:348"$0$0$0$8$43$"	 * @param destination the path to the file"
"DataBufferUtils.java:349"$0$0$0$11$64$"	 * @param options the options specifying how the file is opened"
"DataBufferUtils.java:350"$0$0$0$10$61$"	 * @return a {@link Mono} that indicates completion or error"
"DataBufferUtils.java:351"$0$0$0$3$14$"	 * @since 5.2"
"DataBufferUtils.java:352"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:353"$0$0$0$10$104$"	public static Mono<Void> write(Publisher<DataBuffer> source, Path destination, OpenOption... options) {"
"DataBufferUtils.java:354"$0$0$0$6$52$"		Assert.notNull(source, ""Source must not be null"");"
"DataBufferUtils.java:355"$0$0$0$6$62$"		Assert.notNull(destination, ""Destination must not be null"");"
"DataBufferUtils.java:356"$0$0$0$0$0$""
"DataBufferUtils.java:357"$0$0$0$4$57$"		Set<OpenOption> optionSet = checkWriteOptions(options);"
"DataBufferUtils.java:358"$0$0$0$0$0$""
"DataBufferUtils.java:359"$0$0$0$4$30$"		return Mono.create(sink -> {"
"DataBufferUtils.java:360"$0$0$0$2$8$"			try {"
"DataBufferUtils.java:361"$0$0$0$6$97$"				AsynchronousFileChannel channel = AsynchronousFileChannel.open(destination, optionSet, null);"
"DataBufferUtils.java:362"$0$0$0$3$48$"				sink.onDispose(() -> closeChannel(channel));"
"DataBufferUtils.java:363"$0$0$0$2$62$"				write(source, channel).subscribe(DataBufferUtils::release,"
"DataBufferUtils.java:364"$0$0$0$1$18$"						sink::error,"
"DataBufferUtils.java:365"$0$0$0$1$21$"						sink::success);"
"DataBufferUtils.java:366"$0$0$0$1$4$"			}"
"DataBufferUtils.java:367"$0$0$0$4$27$"			catch (IOException ex) {"
"DataBufferUtils.java:368"$0$0$0$1$19$"				sink.error(ex);"
"DataBufferUtils.java:369"$0$0$0$1$4$"			}"
"DataBufferUtils.java:370"$0$0$0$1$5$"		});"
"DataBufferUtils.java:371"$0$0$0$1$2$"	}"
"DataBufferUtils.java:372"$0$0$0$0$0$""
"DataBufferUtils.java:373"$0$0$0$6$73$"	private static Set<OpenOption> checkWriteOptions(OpenOption[] options) {"
"DataBufferUtils.java:374"$0$0$0$4$30$"		int length = options.length;"
"DataBufferUtils.java:375"$0$0$0$7$53$"		Set<OpenOption> result = new HashSet<>(length + 3);"
"DataBufferUtils.java:376"$0$0$0$5$20$"		if (length == 0) {"
"DataBufferUtils.java:377"$0$0$0$1$41$"			result.add(StandardOpenOption.CREATE);"
"DataBufferUtils.java:378"$0$0$0$1$52$"			result.add(StandardOpenOption.TRUNCATE_EXISTING);"
"DataBufferUtils.java:379"$0$0$0$1$3$"		}"
"DataBufferUtils.java:380"$0$0$0$2$8$"		else {"
"DataBufferUtils.java:381"$0$0$0$6$35$"			for (OpenOption opt : options) {"
"DataBufferUtils.java:382"$0$0$0$5$41$"				if (opt == StandardOpenOption.READ) {"
"DataBufferUtils.java:383"$0$0$0$5$60$"					throw new IllegalArgumentException(""READ not allowed"");"
"DataBufferUtils.java:384"$0$0$0$1$5$"				}"
"DataBufferUtils.java:385"$0$0$0$1$20$"				result.add(opt);"
"DataBufferUtils.java:386"$0$0$0$1$4$"			}"
"DataBufferUtils.java:387"$0$0$0$1$3$"		}"
"DataBufferUtils.java:388"$0$0$0$1$39$"		result.add(StandardOpenOption.WRITE);"
"DataBufferUtils.java:389"$0$0$0$2$16$"		return result;"
"DataBufferUtils.java:390"$0$0$0$1$2$"	}"
"DataBufferUtils.java:391"$0$0$0$0$0$""
"DataBufferUtils.java:392"$0$0$0$6$54$"	static void closeChannel(@Nullable Channel channel) {"
"DataBufferUtils.java:393"$0$0$0$7$44$"		if (channel != null && channel.isOpen()) {"
"DataBufferUtils.java:394"$0$0$0$2$8$"			try {"
"DataBufferUtils.java:395"$0$0$0$1$20$"				channel.close();"
"DataBufferUtils.java:396"$0$0$0$1$4$"			}"
"DataBufferUtils.java:397"$0$0$0$4$32$"			catch (IOException ignored) {"
"DataBufferUtils.java:398"$0$0$0$1$4$"			}"
"DataBufferUtils.java:399"$0$0$0$1$3$"		}"
"DataBufferUtils.java:400"$0$0$0$1$2$"	}"
"DataBufferUtils.java:401"$0$0$0$0$0$""
"DataBufferUtils.java:402"$0$0$0$0$0$""
"DataBufferUtils.java:403"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"DataBufferUtils.java:404"$0$0$1$2$11$"	// Various"
"DataBufferUtils.java:405"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"DataBufferUtils.java:406"$0$0$0$0$0$""
"DataBufferUtils.java:407"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:408"$0$0$0$11$66$"	 * Relay buffers from the given {@link Publisher} until the total"
"DataBufferUtils.java:409"$0$0$0$6$66$"	 * {@linkplain DataBuffer#readableByteCount() byte count} reaches"
"DataBufferUtils.java:410"$0$0$0$12$69$"	 * the given maximum byte count, or until the publisher is complete."
"DataBufferUtils.java:411"$0$0$0$7$44$"	 * @param publisher the publisher to filter"
"DataBufferUtils.java:412"$0$0$0$7$46$"	 * @param maxByteCount the maximum byte count"
"DataBufferUtils.java:413"$0$0$0$11$67$"	 * @return a flux whose maximum byte count is {@code maxByteCount}"
"DataBufferUtils.java:414"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:415"$0$0$0$10$114$"	public static Flux<DataBuffer> takeUntilByteCount(Publisher<? extends DataBuffer> publisher, long maxByteCount) {"
"DataBufferUtils.java:416"$0$0$0$6$58$"		Assert.notNull(publisher, ""Publisher must not be null"");"
"DataBufferUtils.java:417"$0$0$0$9$79$"		Assert.isTrue(maxByteCount >= 0, ""'maxByteCount' must be a positive number"");"
"DataBufferUtils.java:418"$0$0$0$0$0$""
"DataBufferUtils.java:419"$0$0$0$4$27$"		return Flux.defer(() -> {"
"DataBufferUtils.java:420"$0$0$0$5$55$"			AtomicLong countDown = new AtomicLong(maxByteCount);"
"DataBufferUtils.java:421"$0$0$0$2$30$"			return Flux.from(publisher)"
"DataBufferUtils.java:422"$0$0$0$3$21$"					.map(buffer -> {"
"DataBufferUtils.java:423"$0$0$0$4$72$"						long remainder = countDown.addAndGet(-buffer.readableByteCount());"
"DataBufferUtils.java:424"$0$0$0$5$26$"						if (remainder < 0) {"
"DataBufferUtils.java:425"$0$0$0$7$65$"							int length = buffer.readableByteCount() + (int) remainder;"
"DataBufferUtils.java:426"$0$0$0$3$38$"							return buffer.slice(0, length);"
"DataBufferUtils.java:427"$0$0$0$1$7$"						}"
"DataBufferUtils.java:428"$0$0$0$2$12$"						else {"
"DataBufferUtils.java:429"$0$0$0$2$21$"							return buffer;"
"DataBufferUtils.java:430"$0$0$0$1$7$"						}"
"DataBufferUtils.java:431"$0$0$0$1$7$"					})"
"DataBufferUtils.java:432"$1$0$0$5$48$"					.takeUntil(buffer -> countDown.get() <= 0);"
"DataBufferUtils.java:433"$0$0$0$1$5$"		});"
"DataBufferUtils.java:434"$0$0$0$0$0$""
"DataBufferUtils.java:435"$0$0$1$12$69$"		// No doOnDiscard as operators used do not cache (and drop) buffers"
"DataBufferUtils.java:436"$0$0$0$1$2$"	}"
"DataBufferUtils.java:437"$0$0$0$0$0$""
"DataBufferUtils.java:438"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:439"$0$0$0$11$65$"	 * Skip buffers from the given {@link Publisher} until the total"
"DataBufferUtils.java:440"$0$0$0$6$66$"	 * {@linkplain DataBuffer#readableByteCount() byte count} reaches"
"DataBufferUtils.java:441"$0$0$0$12$69$"	 * the given maximum byte count, or until the publisher is complete."
"DataBufferUtils.java:442"$0$0$0$7$44$"	 * @param publisher the publisher to filter"
"DataBufferUtils.java:443"$0$0$0$7$46$"	 * @param maxByteCount the maximum byte count"
"DataBufferUtils.java:444"$0$0$0$12$65$"	 * @return a flux with the remaining part of the given publisher"
"DataBufferUtils.java:445"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:446"$0$0$0$10$114$"	public static Flux<DataBuffer> skipUntilByteCount(Publisher<? extends DataBuffer> publisher, long maxByteCount) {"
"DataBufferUtils.java:447"$0$0$0$6$58$"		Assert.notNull(publisher, ""Publisher must not be null"");"
"DataBufferUtils.java:448"$0$0$0$9$79$"		Assert.isTrue(maxByteCount >= 0, ""'maxByteCount' must be a positive number"");"
"DataBufferUtils.java:449"$0$0$0$0$0$""
"DataBufferUtils.java:450"$0$0$0$4$27$"		return Flux.defer(() -> {"
"DataBufferUtils.java:451"$0$0$0$5$55$"			AtomicLong countDown = new AtomicLong(maxByteCount);"
"DataBufferUtils.java:452"$0$0$0$2$30$"			return Flux.from(publisher)"
"DataBufferUtils.java:453"$0$0$0$3$27$"					.skipUntil(buffer -> {"
"DataBufferUtils.java:454"$0$0$0$4$72$"						long remainder = countDown.addAndGet(-buffer.readableByteCount());"
"DataBufferUtils.java:455"$0$0$0$4$27$"						return remainder < 0;"
"DataBufferUtils.java:456"$0$0$0$1$7$"					})"
"DataBufferUtils.java:457"$0$0$0$3$21$"					.map(buffer -> {"
"DataBufferUtils.java:458"$1$0$0$4$39$"						long remainder = countDown.get();"
"DataBufferUtils.java:459"$0$0$0$5$26$"						if (remainder < 0) {"
"DataBufferUtils.java:460"$0$0$0$1$24$"							countDown.set(0);"
"DataBufferUtils.java:461"$0$0$0$6$63$"							int start = buffer.readableByteCount() + (int)remainder;"
"DataBufferUtils.java:462"$0$0$0$5$37$"							int length = (int) -remainder;"
"DataBufferUtils.java:463"$0$0$0$3$42$"							return buffer.slice(start, length);"
"DataBufferUtils.java:464"$0$0$0$1$7$"						}"
"DataBufferUtils.java:465"$0$0$0$2$12$"						else {"
"DataBufferUtils.java:466"$0$0$0$2$21$"							return buffer;"
"DataBufferUtils.java:467"$0$0$0$1$7$"						}"
"DataBufferUtils.java:468"$0$0$0$1$8$"					});"
"DataBufferUtils.java:469"$0$0$0$2$67$"		}).doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);"
"DataBufferUtils.java:470"$0$0$0$1$2$"	}"
"DataBufferUtils.java:471"$0$0$0$0$0$""
"DataBufferUtils.java:472"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:473"$0$0$0$12$70$"	 * Retain the given data buffer, if it is a {@link PooledDataBuffer}."
"DataBufferUtils.java:474"$0$0$0$8$47$"	 * @param dataBuffer the data buffer to retain"
"DataBufferUtils.java:475"$0$0$0$5$31$"	 * @return the retained buffer"
"DataBufferUtils.java:476"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:477"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"DataBufferUtils.java:478"$0$0$0$9$62$"	public static <T extends DataBuffer> T retain(T dataBuffer) {"
"DataBufferUtils.java:479"$0$0$0$5$47$"		if (dataBuffer instanceof PooledDataBuffer) {"
"DataBufferUtils.java:480"$0$0$0$4$55$"			return (T) ((PooledDataBuffer) dataBuffer).retain();"
"DataBufferUtils.java:481"$0$0$0$1$3$"		}"
"DataBufferUtils.java:482"$0$0$0$2$8$"		else {"
"DataBufferUtils.java:483"$0$0$0$2$21$"			return dataBuffer;"
"DataBufferUtils.java:484"$0$0$0$1$3$"		}"
"DataBufferUtils.java:485"$0$0$0$1$2$"	}"
"DataBufferUtils.java:486"$0$0$0$0$0$""
"DataBufferUtils.java:487"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:488"$0$0$0$13$74$"	 * Release the given data buffer, if it is a {@link PooledDataBuffer} and"
"DataBufferUtils.java:489"$0$0$0$6$67$"	 * has been {@linkplain PooledDataBuffer#isAllocated() allocated}."
"DataBufferUtils.java:490"$0$0$0$8$48$"	 * @param dataBuffer the data buffer to release"
"DataBufferUtils.java:491"$0$0$0$12$77$"	 * @return {@code true} if the buffer was released; {@code false} otherwise."
"DataBufferUtils.java:492"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:493"$0$0$0$7$65$"	public static boolean release(@Nullable DataBuffer dataBuffer) {"
"DataBufferUtils.java:494"$0$0$0$5$47$"		if (dataBuffer instanceof PooledDataBuffer) {"
"DataBufferUtils.java:495"$0$0$0$5$69$"			PooledDataBuffer pooledDataBuffer = (PooledDataBuffer) dataBuffer;"
"DataBufferUtils.java:496"$0$0$0$3$40$"			if (pooledDataBuffer.isAllocated()) {"
"DataBufferUtils.java:497"$0$0$0$2$38$"				return pooledDataBuffer.release();"
"DataBufferUtils.java:498"$0$0$0$1$4$"			}"
"DataBufferUtils.java:499"$0$0$0$1$3$"		}"
"DataBufferUtils.java:500"$0$0$0$2$15$"		return false;"
"DataBufferUtils.java:501"$0$0$0$1$2$"	}"
"DataBufferUtils.java:502"$0$0$0$0$0$""
"DataBufferUtils.java:503"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:504"$0$0$0$10$68$"	 * Return a consumer that calls {@link #release(DataBuffer)} on all"
"DataBufferUtils.java:505"$0$0$0$4$24$"	 * passed data buffers."
"DataBufferUtils.java:506"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:507"$0$0$0$5$55$"	public static Consumer<DataBuffer> releaseConsumer() {"
"DataBufferUtils.java:508"$0$0$0$2$26$"		return RELEASE_CONSUMER;"
"DataBufferUtils.java:509"$0$0$0$1$2$"	}"
"DataBufferUtils.java:510"$0$0$0$0$0$""
"DataBufferUtils.java:511"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:512"$1$0$0$12$76$"	 * Return a new {@code DataBuffer} composed from joining together the given"
"DataBufferUtils.java:513"$0$0$0$10$75$"	 * {@code dataBuffers} elements. Depending on the {@link DataBuffer} type,"
"DataBufferUtils.java:514"$0$0$0$14$73$"	 * the returned buffer may be a single buffer containing all data of the"
"DataBufferUtils.java:515"$0$0$0$13$76$"	 * provided buffers, or it may be a zero-copy, composite with references to"
"DataBufferUtils.java:516"$0$0$0$4$22$"	 * the given buffers."
"DataBufferUtils.java:517"$0$0$0$13$71$"	 * <p>If {@code dataBuffers} produces an error or if there is a cancel"
"DataBufferUtils.java:518"$0$0$0$8$48$"	 * signal, then all accumulated buffers will be"
"DataBufferUtils.java:519"$0$0$0$4$47$"	 * {@linkplain #release(DataBuffer) released}."
"DataBufferUtils.java:520"$0$0$0$12$74$"	 * <p>Note that the given data buffers do <strong>not</strong> have to be"
"DataBufferUtils.java:521"$0$0$0$12$70$"	 * released. They will be released as part of the returned composite."
"DataBufferUtils.java:522"$0$0$0$11$63$"	 * @param dataBuffers the data buffers that are to be composed"
"DataBufferUtils.java:523"$0$0$0$12$75$"	 * @return a buffer that is composed from the {@code dataBuffers} argument"
"DataBufferUtils.java:524"$0$0$0$3$16$"	 * @since 5.0.3"
"DataBufferUtils.java:525"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:526"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"DataBufferUtils.java:527"$0$0$0$8$83$"	public static Mono<DataBuffer> join(Publisher<? extends DataBuffer> dataBuffers) {"
"DataBufferUtils.java:528"$0$0$0$3$31$"		return join(dataBuffers, -1);"
"DataBufferUtils.java:529"$0$0$0$1$2$"	}"
"DataBufferUtils.java:530"$0$0$0$0$0$""
"DataBufferUtils.java:531"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:532"$0$0$0$12$74$"	 * Variant of {@link #join(Publisher)} that behaves the same way up until"
"DataBufferUtils.java:533"$0$0$0$14$76$"	 * the specified max number of bytes to buffer. Once the limit is exceeded,"
"DataBufferUtils.java:534"$0$0$0$5$47$"	 * {@link DataBufferLimitException} is raised."
"DataBufferUtils.java:535"$0$0$0$11$59$"	 * @param buffers the data buffers that are to be composed"
"DataBufferUtils.java:536"$0$0$0$14$78$"	 * @param maxByteCount the max number of bytes to buffer, or -1 for unlimited"
"DataBufferUtils.java:537"$0$0$0$13$75$"	 * @return a buffer with the aggregated content, possibly an empty Mono if"
"DataBufferUtils.java:538"$0$0$0$10$50$"	 * the max number of bytes to buffer is exceeded."
"DataBufferUtils.java:539"$0$0$0$7$64$"	 * @throws DataBufferLimitException if maxByteCount is exceeded"
"DataBufferUtils.java:540"$0$0$0$3$17$"	 * @since 5.1.11"
"DataBufferUtils.java:541"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:542"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"DataBufferUtils.java:543"$0$0$0$10$97$"	public static Mono<DataBuffer> join(Publisher<? extends DataBuffer> buffers, int maxByteCount) {"
"DataBufferUtils.java:544"$0$0$0$6$60$"		Assert.notNull(buffers, ""'dataBuffers' must not be null"");"
"DataBufferUtils.java:545"$0$0$0$0$0$""
"DataBufferUtils.java:546"$0$0$0$5$32$"		if (buffers instanceof Mono) {"
"DataBufferUtils.java:547"$0$0$0$3$37$"			return (Mono<DataBuffer>) buffers;"
"DataBufferUtils.java:548"$0$0$0$1$3$"		}"
"DataBufferUtils.java:549"$0$0$0$0$0$""
"DataBufferUtils.java:550"$0$0$0$2$27$"		return Flux.from(buffers)"
"DataBufferUtils.java:551"$0$0$0$5$87$"				.collect(() -> new LimitedDataBufferList(maxByteCount), LimitedDataBufferList::add)"
"DataBufferUtils.java:552"$0$0$0$3$36$"				.filter(list -> !list.isEmpty())"
"DataBufferUtils.java:553"$1$0$0$3$50$"				.map(list -> list.get(0).factory().join(list))"
"DataBufferUtils.java:554"$0$0$0$2$67$"				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);"
"DataBufferUtils.java:555"$0$0$0$1$2$"	}"
"DataBufferUtils.java:556"$0$0$0$0$0$""
"DataBufferUtils.java:557"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:558"$0$0$0$9$53$"	 * Return a {@link Matcher} for the given delimiter."
"DataBufferUtils.java:559"$0$0$0$13$67$"	 * The matcher can be used to find the delimiters in data buffers."
"DataBufferUtils.java:560"$0$0$0$8$48$"	 * @param delimiter the delimiter bytes to find"
"DataBufferUtils.java:561"$0$0$0$4$23$"	 * @return the matcher"
"DataBufferUtils.java:562"$0$0$0$3$14$"	 * @since 5.2"
"DataBufferUtils.java:563"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:564"$0$0$0$6$50$"	public static Matcher matcher(byte[] delimiter) {"
"DataBufferUtils.java:565"$0$0$0$8$69$"		Assert.isTrue(delimiter.length > 0, ""Delimiter must not be empty"");"
"DataBufferUtils.java:566"$0$0$0$3$48$"		return new KnuthMorrisPrattMatcher(delimiter);"
"DataBufferUtils.java:567"$0$0$0$1$2$"	}"
"DataBufferUtils.java:568"$0$0$0$0$0$""
"DataBufferUtils.java:569"$0$0$0$9$55$"	/** Return a {@link Matcher} for the given delimiters."
"DataBufferUtils.java:570"$0$0$0$13$67$"	 * The matcher can be used to find the delimiters in data buffers."
"DataBufferUtils.java:571"$0$0$0$8$50$"	 * @param delimiters the delimiters bytes to find"
"DataBufferUtils.java:572"$0$0$0$4$23$"	 * @return the matcher"
"DataBufferUtils.java:573"$0$0$0$3$14$"	 * @since 5.2"
"DataBufferUtils.java:574"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:575"$0$0$0$6$54$"	public static Matcher matcher(byte[]... delimiters) {"
"DataBufferUtils.java:576"$0$0$0$8$71$"		Assert.isTrue(delimiters.length > 0, ""Delimiters must not be empty"");"
"DataBufferUtils.java:577"$0$0$0$5$31$"		if (delimiters.length == 1) {"
"DataBufferUtils.java:578"$0$0$0$2$33$"			return matcher(delimiters[0]);"
"DataBufferUtils.java:579"$0$0$0$1$3$"		}"
"DataBufferUtils.java:580"$0$0$0$2$8$"		else {"
"DataBufferUtils.java:581"$0$0$0$5$55$"			Matcher[] matchers = new Matcher[delimiters.length];"
"DataBufferUtils.java:582"$0$0$0$10$48$"			for (int i = 0; i < delimiters.length; i++) {"
"DataBufferUtils.java:583"$0$0$0$3$41$"				matchers[i] = matcher(delimiters[i]);"
"DataBufferUtils.java:584"$0$0$0$1$4$"			}"
"DataBufferUtils.java:585"$0$0$0$3$41$"			return new CompositeMatcher(matchers);"
"DataBufferUtils.java:586"$0$0$0$1$3$"		}"
"DataBufferUtils.java:587"$0$0$0$1$2$"	}"
"DataBufferUtils.java:588"$0$0$0$0$0$""
"DataBufferUtils.java:589"$0$0$0$0$0$""
"DataBufferUtils.java:590"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:591"$0$0$0$12$69$"	 * Defines an object that matches a data buffer against a delimiter."
"DataBufferUtils.java:592"$0$0$0$3$14$"	 * @since 5.2"
"DataBufferUtils.java:593"$0$0$0$3$27$"	 * @see #match(DataBuffer)"
"DataBufferUtils.java:594"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:595"$0$0$0$4$27$"	public interface Matcher {"
"DataBufferUtils.java:596"$0$0$0$0$0$""
"DataBufferUtils.java:597"$0$0$0$1$5$"		/**"
"DataBufferUtils.java:598"$0$0$0$15$93$"		 * Returns the position of the final matching delimiter byte that matches the given buffer,"
"DataBufferUtils.java:599"$0$0$0$7$32$"		 * or {@code -1} if not found."
"DataBufferUtils.java:600"$0$0$0$12$70$"		 * @param dataBuffer the buffer in which to search for the delimiter"
"DataBufferUtils.java:601"$0$0$0$15$86$"		 * @return the position of the final matching delimiter, or {@code -1} if not found."
"DataBufferUtils.java:602"$0$0$0$1$5$"		 */"
"DataBufferUtils.java:603"$0$0$0$3$35$"		int match(DataBuffer dataBuffer);"
"DataBufferUtils.java:604"$0$0$0$0$0$""
"DataBufferUtils.java:605"$0$0$0$1$5$"		/**"
"DataBufferUtils.java:606"$0$0$0$8$48$"		 * Return the delimiter used for this matcher."
"DataBufferUtils.java:607"$0$0$0$4$26$"		 * @return the delimiter"
"DataBufferUtils.java:608"$0$0$0$1$5$"		 */"
"DataBufferUtils.java:609"$0$0$0$2$21$"		byte[] delimiter();"
"DataBufferUtils.java:610"$0$0$0$0$0$""
"DataBufferUtils.java:611"$0$0$0$1$5$"		/**"
"DataBufferUtils.java:612"$0$0$0$7$38$"		 * Resets the state of this matcher."
"DataBufferUtils.java:613"$0$0$0$1$5$"		 */"
"DataBufferUtils.java:614"$0$0$0$2$15$"		void reset();"
"DataBufferUtils.java:615"$0$0$0$1$2$"	}"
"DataBufferUtils.java:616"$0$0$0$0$0$""
"DataBufferUtils.java:617"$0$0$0$0$0$""
"DataBufferUtils.java:618"$0$0$0$7$101$"	private static class ReadableByteChannelGenerator implements Consumer<SynchronousSink<DataBuffer>> {"
"DataBufferUtils.java:619"$0$0$0$0$0$""
"DataBufferUtils.java:620"$0$0$0$4$44$"		private final ReadableByteChannel channel;"
"DataBufferUtils.java:621"$0$0$0$0$0$""
"DataBufferUtils.java:622"$0$0$0$4$52$"		private final DataBufferFactory dataBufferFactory;"
"DataBufferUtils.java:623"$0$0$0$0$0$""
"DataBufferUtils.java:624"$0$0$0$4$31$"		private final int bufferSize;"
"DataBufferUtils.java:625"$0$0$0$0$0$""
"DataBufferUtils.java:626"$0$0$0$2$38$"		public ReadableByteChannelGenerator("
"DataBufferUtils.java:627"$0$0$0$7$87$"				ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {"
"DataBufferUtils.java:628"$0$0$0$0$0$""
"DataBufferUtils.java:629"$0$0$0$3$26$"			this.channel = channel;"
"DataBufferUtils.java:630"$0$0$0$3$46$"			this.dataBufferFactory = dataBufferFactory;"
"DataBufferUtils.java:631"$0$0$0$3$32$"			this.bufferSize = bufferSize;"
"DataBufferUtils.java:632"$0$0$0$1$3$"		}"
"DataBufferUtils.java:633"$0$0$0$0$0$""
"DataBufferUtils.java:634"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:635"$0$0$0$5$56$"		public void accept(SynchronousSink<DataBuffer> sink) {"
"DataBufferUtils.java:636"$0$0$0$4$26$"			boolean release = true;"
"DataBufferUtils.java:637"$0$0$0$4$82$"			DataBuffer dataBuffer = this.dataBufferFactory.allocateBuffer(this.bufferSize);"
"DataBufferUtils.java:638"$0$0$0$2$8$"			try {"
"DataBufferUtils.java:639"$0$0$0$2$13$"				int read;"
"DataBufferUtils.java:640"$0$0$0$5$78$"				ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, dataBuffer.capacity());"
"DataBufferUtils.java:641"$0$0$0$7$54$"				if ((read = this.channel.read(byteBuffer)) >= 0) {"
"DataBufferUtils.java:642"$0$0$0$1$36$"					dataBuffer.writePosition(read);"
"DataBufferUtils.java:643"$0$0$0$3$21$"					release = false;"
"DataBufferUtils.java:644"$0$0$0$1$27$"					sink.next(dataBuffer);"
"DataBufferUtils.java:645"$0$0$0$1$5$"				}"
"DataBufferUtils.java:646"$0$0$0$2$10$"				else {"
"DataBufferUtils.java:647"$0$0$0$1$21$"					sink.complete();"
"DataBufferUtils.java:648"$0$0$0$1$5$"				}"
"DataBufferUtils.java:649"$0$0$0$1$4$"			}"
"DataBufferUtils.java:650"$0$0$0$4$27$"			catch (IOException ex) {"
"DataBufferUtils.java:651"$0$0$0$1$19$"				sink.error(ex);"
"DataBufferUtils.java:652"$0$0$0$1$4$"			}"
"DataBufferUtils.java:653"$0$0$0$2$12$"			finally {"
"DataBufferUtils.java:654"$0$0$0$3$18$"				if (release) {"
"DataBufferUtils.java:655"$0$0$0$1$25$"					release(dataBuffer);"
"DataBufferUtils.java:656"$0$0$0$1$5$"				}"
"DataBufferUtils.java:657"$0$0$0$1$4$"			}"
"DataBufferUtils.java:658"$0$0$0$1$3$"		}"
"DataBufferUtils.java:659"$0$0$0$1$2$"	}"
"DataBufferUtils.java:660"$0$0$0$0$0$""
"DataBufferUtils.java:661"$0$0$0$0$0$""
"DataBufferUtils.java:662"$0$0$0$8$95$"	private static class ReadCompletionHandler implements CompletionHandler<Integer, DataBuffer> {"
"DataBufferUtils.java:663"$0$0$0$0$0$""
"DataBufferUtils.java:664"$0$0$0$4$48$"		private final AsynchronousFileChannel channel;"
"DataBufferUtils.java:665"$0$0$0$0$0$""
"DataBufferUtils.java:666"$0$0$0$4$42$"		private final FluxSink<DataBuffer> sink;"
"DataBufferUtils.java:667"$0$0$0$0$0$""
"DataBufferUtils.java:668"$0$0$0$4$52$"		private final DataBufferFactory dataBufferFactory;"
"DataBufferUtils.java:669"$0$0$0$0$0$""
"DataBufferUtils.java:670"$0$0$0$4$31$"		private final int bufferSize;"
"DataBufferUtils.java:671"$0$0$0$0$0$""
"DataBufferUtils.java:672"$0$0$0$4$36$"		private final AtomicLong position;"
"DataBufferUtils.java:673"$0$0$0$0$0$""
"DataBufferUtils.java:674"$0$0$0$7$60$"		private final AtomicBoolean reading = new AtomicBoolean();"
"DataBufferUtils.java:675"$0$0$0$0$0$""
"DataBufferUtils.java:676"$0$0$0$7$61$"		private final AtomicBoolean disposed = new AtomicBoolean();"
"DataBufferUtils.java:677"$0$0$0$0$0$""
"DataBufferUtils.java:678"$0$0$0$3$63$"		public ReadCompletionHandler(AsynchronousFileChannel channel,"
"DataBufferUtils.java:679"$0$0$0$9$100$"				FluxSink<DataBuffer> sink, long position, DataBufferFactory dataBufferFactory, int bufferSize) {"
"DataBufferUtils.java:680"$0$0$0$0$0$""
"DataBufferUtils.java:681"$0$0$0$3$26$"			this.channel = channel;"
"DataBufferUtils.java:682"$0$0$0$3$20$"			this.sink = sink;"
"DataBufferUtils.java:683"$0$0$0$4$44$"			this.position = new AtomicLong(position);"
"DataBufferUtils.java:684"$0$0$0$3$46$"			this.dataBufferFactory = dataBufferFactory;"
"DataBufferUtils.java:685"$0$0$0$3$32$"			this.bufferSize = bufferSize;"
"DataBufferUtils.java:686"$0$0$0$1$3$"		}"
"DataBufferUtils.java:687"$0$0$0$0$0$""
"DataBufferUtils.java:688"$0$0$0$4$22$"		public void read() {"
"DataBufferUtils.java:689"$0$0$0$5$49$"			if (this.sink.requestedFromDownstream() > 0 &&"
"DataBufferUtils.java:690"$0$0$0$2$23$"					isNotDisposed() &&"
"DataBufferUtils.java:691"$0$0$0$3$47$"					this.reading.compareAndSet(false, true)) {"
"DataBufferUtils.java:692"$0$0$0$4$83$"				DataBuffer dataBuffer = this.dataBufferFactory.allocateBuffer(this.bufferSize);"
"DataBufferUtils.java:693"$0$0$0$5$72$"				ByteBuffer byteBuffer = dataBuffer.asByteBuffer(0, this.bufferSize);"
"DataBufferUtils.java:694"$1$0$0$4$73$"				this.channel.read(byteBuffer, this.position.get(), dataBuffer, this);"
"DataBufferUtils.java:695"$0$0$0$1$4$"			}"
"DataBufferUtils.java:696"$0$0$0$1$3$"		}"
"DataBufferUtils.java:697"$0$0$0$0$0$""
"DataBufferUtils.java:698"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:699"$0$0$0$7$62$"		public void completed(Integer read, DataBuffer dataBuffer) {"
"DataBufferUtils.java:700"$0$0$0$3$25$"			if (isNotDisposed()) {"
"DataBufferUtils.java:701"$0$0$0$5$21$"				if (read != -1) {"
"DataBufferUtils.java:702"$0$0$0$1$35$"					this.position.addAndGet(read);"
"DataBufferUtils.java:703"$0$0$0$1$36$"					dataBuffer.writePosition(read);"
"DataBufferUtils.java:704"$0$0$0$1$32$"					this.sink.next(dataBuffer);"
"DataBufferUtils.java:705"$0$0$0$1$29$"					this.reading.set(false);"
"DataBufferUtils.java:706"$0$0$0$1$12$"					read();"
"DataBufferUtils.java:707"$0$0$0$1$5$"				}"
"DataBufferUtils.java:708"$0$0$0$2$10$"				else {"
"DataBufferUtils.java:709"$0$0$0$1$25$"					release(dataBuffer);"
"DataBufferUtils.java:710"$0$0$0$1$32$"					closeChannel(this.channel);"
"DataBufferUtils.java:711"$0$0$0$4$52$"					if (this.disposed.compareAndSet(false, true)) {"
"DataBufferUtils.java:712"$0$0$0$1$27$"						this.sink.complete();"
"DataBufferUtils.java:713"$0$0$0$1$6$"					}"
"DataBufferUtils.java:714"$0$0$0$1$29$"					this.reading.set(false);"
"DataBufferUtils.java:715"$0$0$0$1$5$"				}"
"DataBufferUtils.java:716"$0$0$0$1$4$"			}"
"DataBufferUtils.java:717"$0$0$0$2$9$"			else {"
"DataBufferUtils.java:718"$0$0$0$1$24$"				release(dataBuffer);"
"DataBufferUtils.java:719"$0$0$0$1$31$"				closeChannel(this.channel);"
"DataBufferUtils.java:720"$0$0$0$1$28$"				this.reading.set(false);"
"DataBufferUtils.java:721"$0$0$0$1$4$"			}"
"DataBufferUtils.java:722"$0$0$0$1$3$"		}"
"DataBufferUtils.java:723"$0$0$0$0$0$""
"DataBufferUtils.java:724"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:725"$0$0$0$7$60$"		public void failed(Throwable exc, DataBuffer dataBuffer) {"
"DataBufferUtils.java:726"$0$0$0$1$23$"			release(dataBuffer);"
"DataBufferUtils.java:727"$0$0$0$1$30$"			closeChannel(this.channel);"
"DataBufferUtils.java:728"$0$0$0$4$50$"			if (this.disposed.compareAndSet(false, true)) {"
"DataBufferUtils.java:729"$0$0$0$1$25$"				this.sink.error(exc);"
"DataBufferUtils.java:730"$0$0$0$1$4$"			}"
"DataBufferUtils.java:731"$0$0$0$1$27$"			this.reading.set(false);"
"DataBufferUtils.java:732"$0$0$0$1$3$"		}"
"DataBufferUtils.java:733"$0$0$0$0$0$""
"DataBufferUtils.java:734"$0$0$0$5$31$"		public void request(long n) {"
"DataBufferUtils.java:735"$0$0$0$1$10$"			read();"
"DataBufferUtils.java:736"$0$0$0$1$3$"		}"
"DataBufferUtils.java:737"$0$0$0$0$0$""
"DataBufferUtils.java:738"$0$0$0$4$24$"		public void cancel() {"
"DataBufferUtils.java:739"$0$0$0$4$50$"			if (this.disposed.compareAndSet(false, true)) {"
"DataBufferUtils.java:740"$1$0$0$3$30$"				if (!this.reading.get()) {"
"DataBufferUtils.java:741"$0$0$0$1$32$"					closeChannel(this.channel);"
"DataBufferUtils.java:742"$0$0$0$1$5$"				}"
"DataBufferUtils.java:743"$0$0$0$1$4$"			}"
"DataBufferUtils.java:744"$0$0$0$1$3$"		}"
"DataBufferUtils.java:745"$0$0$0$0$0$""
"DataBufferUtils.java:746"$0$0$0$4$35$"		private boolean isNotDisposed() {"
"DataBufferUtils.java:747"$1$0$0$2$31$"			return !this.disposed.get();"
"DataBufferUtils.java:748"$0$0$0$1$3$"		}"
"DataBufferUtils.java:749"$0$0$0$1$2$"	}"
"DataBufferUtils.java:750"$0$0$0$0$0$""
"DataBufferUtils.java:751"$0$0$0$0$0$""
"DataBufferUtils.java:752"$0$0$0$7$88$"	private static class WritableByteChannelSubscriber extends BaseSubscriber<DataBuffer> {"
"DataBufferUtils.java:753"$0$0$0$0$0$""
"DataBufferUtils.java:754"$0$0$0$4$42$"		private final FluxSink<DataBuffer> sink;"
"DataBufferUtils.java:755"$0$0$0$0$0$""
"DataBufferUtils.java:756"$0$0$0$4$44$"		private final WritableByteChannel channel;"
"DataBufferUtils.java:757"$0$0$0$0$0$""
"DataBufferUtils.java:758"$0$0$0$6$96$"		public WritableByteChannelSubscriber(FluxSink<DataBuffer> sink, WritableByteChannel channel) {"
"DataBufferUtils.java:759"$0$0$0$3$20$"			this.sink = sink;"
"DataBufferUtils.java:760"$0$0$0$3$26$"			this.channel = channel;"
"DataBufferUtils.java:761"$0$0$0$1$3$"		}"
"DataBufferUtils.java:762"$0$0$0$0$0$""
"DataBufferUtils.java:763"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:764"$0$0$0$5$61$"		protected void hookOnSubscribe(Subscription subscription) {"
"DataBufferUtils.java:765"$0$0$0$1$14$"			request(1);"
"DataBufferUtils.java:766"$0$0$0$1$3$"		}"
"DataBufferUtils.java:767"$0$0$0$0$0$""
"DataBufferUtils.java:768"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:769"$0$0$0$5$52$"		protected void hookOnNext(DataBuffer dataBuffer) {"
"DataBufferUtils.java:770"$0$0$0$2$8$"			try {"
"DataBufferUtils.java:771"$0$0$0$4$54$"				ByteBuffer byteBuffer = dataBuffer.asByteBuffer();"
"DataBufferUtils.java:772"$0$0$0$3$39$"				while (byteBuffer.hasRemaining()) {"
"DataBufferUtils.java:773"$0$0$0$1$36$"					this.channel.write(byteBuffer);"
"DataBufferUtils.java:774"$0$0$0$1$5$"				}"
"DataBufferUtils.java:775"$0$0$0$1$31$"				this.sink.next(dataBuffer);"
"DataBufferUtils.java:776"$0$0$0$1$15$"				request(1);"
"DataBufferUtils.java:777"$0$0$0$1$4$"			}"
"DataBufferUtils.java:778"$0$0$0$4$27$"			catch (IOException ex) {"
"DataBufferUtils.java:779"$0$0$0$1$31$"				this.sink.next(dataBuffer);"
"DataBufferUtils.java:780"$0$0$0$1$24$"				this.sink.error(ex);"
"DataBufferUtils.java:781"$0$0$0$1$4$"			}"
"DataBufferUtils.java:782"$0$0$0$1$3$"		}"
"DataBufferUtils.java:783"$0$0$0$0$0$""
"DataBufferUtils.java:784"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:785"$0$0$0$5$51$"		protected void hookOnError(Throwable throwable) {"
"DataBufferUtils.java:786"$0$0$0$1$30$"			this.sink.error(throwable);"
"DataBufferUtils.java:787"$0$0$0$1$3$"		}"
"DataBufferUtils.java:788"$0$0$0$0$0$""
"DataBufferUtils.java:789"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:790"$0$0$0$4$35$"		protected void hookOnComplete() {"
"DataBufferUtils.java:791"$0$0$0$1$24$"			this.sink.complete();"
"DataBufferUtils.java:792"$0$0$0$1$3$"		}"
"DataBufferUtils.java:793"$0$0$0$1$2$"	}"
"DataBufferUtils.java:794"$0$0$0$0$0$""
"DataBufferUtils.java:795"$0$0$0$0$0$""
"DataBufferUtils.java:796"$0$0$0$6$79$"	private static class WriteCompletionHandler extends BaseSubscriber<DataBuffer>"
"DataBufferUtils.java:797"$0$0$0$4$54$"			implements CompletionHandler<Integer, ByteBuffer> {"
"DataBufferUtils.java:798"$0$0$0$0$0$""
"DataBufferUtils.java:799"$0$0$0$4$42$"		private final FluxSink<DataBuffer> sink;"
"DataBufferUtils.java:800"$0$0$0$0$0$""
"DataBufferUtils.java:801"$0$0$0$4$48$"		private final AsynchronousFileChannel channel;"
"DataBufferUtils.java:802"$0$0$0$0$0$""
"DataBufferUtils.java:803"$0$0$0$7$62$"		private final AtomicBoolean completed = new AtomicBoolean();"
"DataBufferUtils.java:804"$0$0$0$0$0$""
"DataBufferUtils.java:805"$0$0$0$7$75$"		private final AtomicReference<Throwable> error = new AtomicReference<>();"
"DataBufferUtils.java:806"$0$0$0$0$0$""
"DataBufferUtils.java:807"$0$0$0$4$36$"		private final AtomicLong position;"
"DataBufferUtils.java:808"$0$0$0$0$0$""
"DataBufferUtils.java:809"$0$0$0$7$81$"		private final AtomicReference<DataBuffer> dataBuffer = new AtomicReference<>();"
"DataBufferUtils.java:810"$0$0$0$0$0$""
"DataBufferUtils.java:811"$0$0$0$2$32$"		public WriteCompletionHandler("
"DataBufferUtils.java:812"$0$0$0$7$80$"				FluxSink<DataBuffer> sink, AsynchronousFileChannel channel, long position) {"
"DataBufferUtils.java:813"$0$0$0$0$0$""
"DataBufferUtils.java:814"$0$0$0$3$20$"			this.sink = sink;"
"DataBufferUtils.java:815"$0$0$0$3$26$"			this.channel = channel;"
"DataBufferUtils.java:816"$0$0$0$4$44$"			this.position = new AtomicLong(position);"
"DataBufferUtils.java:817"$0$0$0$1$3$"		}"
"DataBufferUtils.java:818"$0$0$0$0$0$""
"DataBufferUtils.java:819"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:820"$0$0$0$5$61$"		protected void hookOnSubscribe(Subscription subscription) {"
"DataBufferUtils.java:821"$0$0$0$1$14$"			request(1);"
"DataBufferUtils.java:822"$0$0$0$1$3$"		}"
"DataBufferUtils.java:823"$0$0$0$0$0$""
"DataBufferUtils.java:824"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:825"$0$0$0$5$47$"		protected void hookOnNext(DataBuffer value) {"
"DataBufferUtils.java:826"$0$0$0$4$53$"			if (!this.dataBuffer.compareAndSet(null, value)) {"
"DataBufferUtils.java:827"$0$0$0$3$38$"				throw new IllegalStateException();"
"DataBufferUtils.java:828"$0$0$0$1$4$"			}"
"DataBufferUtils.java:829"$0$0$0$4$48$"			ByteBuffer byteBuffer = value.asByteBuffer();"
"DataBufferUtils.java:830"$1$0$0$4$73$"			this.channel.write(byteBuffer, this.position.get(), byteBuffer, this);"
"DataBufferUtils.java:831"$0$0$0$1$3$"		}"
"DataBufferUtils.java:832"$0$0$0$0$0$""
"DataBufferUtils.java:833"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:834"$0$0$0$5$51$"		protected void hookOnError(Throwable throwable) {"
"DataBufferUtils.java:835"$0$0$0$1$29$"			this.error.set(throwable);"
"DataBufferUtils.java:836"$0$0$0$0$0$""
"DataBufferUtils.java:837"$1$0$0$5$39$"			if (this.dataBuffer.get() == null) {"
"DataBufferUtils.java:838"$0$0$0$1$31$"				this.sink.error(throwable);"
"DataBufferUtils.java:839"$0$0$0$1$4$"			}"
"DataBufferUtils.java:840"$0$0$0$1$3$"		}"
"DataBufferUtils.java:841"$0$0$0$0$0$""
"DataBufferUtils.java:842"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:843"$0$0$0$4$35$"		protected void hookOnComplete() {"
"DataBufferUtils.java:844"$0$0$0$1$28$"			this.completed.set(true);"
"DataBufferUtils.java:845"$0$0$0$0$0$""
"DataBufferUtils.java:846"$1$0$0$5$39$"			if (this.dataBuffer.get() == null) {"
"DataBufferUtils.java:847"$0$0$0$1$25$"				this.sink.complete();"
"DataBufferUtils.java:848"$0$0$0$1$4$"			}"
"DataBufferUtils.java:849"$0$0$0$1$3$"		}"
"DataBufferUtils.java:850"$0$0$0$0$0$""
"DataBufferUtils.java:851"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:852"$0$0$0$7$65$"		public void completed(Integer written, ByteBuffer byteBuffer) {"
"DataBufferUtils.java:853"$0$0$0$4$47$"			long pos = this.position.addAndGet(written);"
"DataBufferUtils.java:854"$0$0$0$3$35$"			if (byteBuffer.hasRemaining()) {"
"DataBufferUtils.java:855"$0$0$0$4$58$"				this.channel.write(byteBuffer, pos, byteBuffer, this);"
"DataBufferUtils.java:856"$0$0$0$1$11$"				return;"
"DataBufferUtils.java:857"$0$0$0$1$4$"			}"
"DataBufferUtils.java:858"$0$0$0$1$20$"			sinkDataBuffer();"
"DataBufferUtils.java:859"$0$0$0$0$0$""
"DataBufferUtils.java:860"$1$0$0$4$42$"			Throwable throwable = this.error.get();"
"DataBufferUtils.java:861"$0$0$0$5$27$"			if (throwable != null) {"
"DataBufferUtils.java:862"$0$0$0$1$31$"				this.sink.error(throwable);"
"DataBufferUtils.java:863"$0$0$0$1$4$"			}"
"DataBufferUtils.java:864"$1$0$0$4$35$"			else if (this.completed.get()) {"
"DataBufferUtils.java:865"$0$0$0$1$25$"				this.sink.complete();"
"DataBufferUtils.java:866"$0$0$0$1$4$"			}"
"DataBufferUtils.java:867"$0$0$0$2$9$"			else {"
"DataBufferUtils.java:868"$0$0$0$1$15$"				request(1);"
"DataBufferUtils.java:869"$0$0$0$1$4$"			}"
"DataBufferUtils.java:870"$0$0$0$1$3$"		}"
"DataBufferUtils.java:871"$0$0$0$0$0$""
"DataBufferUtils.java:872"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:873"$0$0$0$7$60$"		public void failed(Throwable exc, ByteBuffer byteBuffer) {"
"DataBufferUtils.java:874"$0$0$0$1$20$"			sinkDataBuffer();"
"DataBufferUtils.java:875"$0$0$0$1$24$"			this.sink.error(exc);"
"DataBufferUtils.java:876"$0$0$0$1$3$"		}"
"DataBufferUtils.java:877"$0$0$0$0$0$""
"DataBufferUtils.java:878"$0$0$0$4$33$"		private void sinkDataBuffer() {"
"DataBufferUtils.java:879"$1$0$0$4$49$"			DataBuffer dataBuffer = this.dataBuffer.get();"
"DataBufferUtils.java:880"$0$0$0$8$69$"			Assert.state(dataBuffer != null, ""DataBuffer should not be null"");"
"DataBufferUtils.java:881"$0$0$0$1$30$"			this.sink.next(dataBuffer);"
"DataBufferUtils.java:882"$0$0$0$1$29$"			this.dataBuffer.set(null);"
"DataBufferUtils.java:883"$0$0$0$1$3$"		}"
"DataBufferUtils.java:884"$0$0$0$1$2$"	}"
"DataBufferUtils.java:885"$0$0$0$0$0$""
"DataBufferUtils.java:886"$0$0$0$0$0$""
"DataBufferUtils.java:887"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:888"$0$0$0$10$81$"	 * Implementation of {@link Matcher} that uses the Knuth-Morris-Pratt algorithm."
"DataBufferUtils.java:889"$0$0$0$6$119$"	 * @see <a href=""https://www.nayuki.io/page/knuth-morris-pratt-string-matching"">Knuth-Morris-Pratt string matching</a>"
"DataBufferUtils.java:890"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:891"$0$0$0$7$66$"	private static class KnuthMorrisPrattMatcher implements Matcher {"
"DataBufferUtils.java:892"$0$0$0$0$0$""
"DataBufferUtils.java:893"$0$0$0$4$33$"		private final byte[] delimiter;"
"DataBufferUtils.java:894"$0$0$0$0$0$""
"DataBufferUtils.java:895"$0$0$0$4$28$"		private final int[] table;"
"DataBufferUtils.java:896"$0$0$0$0$0$""
"DataBufferUtils.java:897"$0$0$0$5$26$"		private int matches = 0;"
"DataBufferUtils.java:898"$0$0$0$0$0$""
"DataBufferUtils.java:899"$0$0$0$4$52$"		public KnuthMorrisPrattMatcher(byte[] delimiter) {"
"DataBufferUtils.java:900"$0$0$0$4$63$"			this.delimiter = Arrays.copyOf(delimiter, delimiter.length);"
"DataBufferUtils.java:901"$0$0$0$3$52$"			this.table = longestSuffixPrefixTable(delimiter);"
"DataBufferUtils.java:902"$0$0$0$1$3$"		}"
"DataBufferUtils.java:903"$0$0$0$0$0$""
"DataBufferUtils.java:904"$0$0$0$6$67$"		private static int[] longestSuffixPrefixTable(byte[] delimiter) {"
"DataBufferUtils.java:905"$0$0$0$5$44$"			int[] result = new int[delimiter.length];"
"DataBufferUtils.java:906"$0$0$0$3$17$"			result[0] = 0;"
"DataBufferUtils.java:907"$0$0$0$10$47$"			for (int i = 1; i < delimiter.length; i++) {"
"DataBufferUtils.java:908"$0$0$0$6$26$"				int j = result[i - 1];"
"DataBufferUtils.java:909"$0$0$0$9$51$"				while (j > 0 && delimiter[i] != delimiter[j]) {"
"DataBufferUtils.java:910"$0$0$0$5$23$"					j = result[j - 1];"
"DataBufferUtils.java:911"$0$0$0$1$5$"				}"
"DataBufferUtils.java:912"$0$0$0$5$39$"				if (delimiter[i] == delimiter[j]) {"
"DataBufferUtils.java:913"$0$0$0$1$9$"					j++;"
"DataBufferUtils.java:914"$0$0$0$1$5$"				}"
"DataBufferUtils.java:915"$0$0$0$3$18$"				result[i] = j;"
"DataBufferUtils.java:916"$0$0$0$1$4$"			}"
"DataBufferUtils.java:917"$0$0$0$2$17$"			return result;"
"DataBufferUtils.java:918"$0$0$0$1$3$"		}"
"DataBufferUtils.java:919"$0$0$0$0$0$""
"DataBufferUtils.java:920"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:921"$0$0$0$5$43$"		public int match(DataBuffer dataBuffer) {"
"DataBufferUtils.java:922"$0$0$0$10$81$"			for (int i = dataBuffer.readPosition(); i < dataBuffer.writePosition(); i++) {"
"DataBufferUtils.java:923"$1$0$0$4$35$"				byte b = dataBuffer.getByte(i);"
"DataBufferUtils.java:924"$0$0$0$0$0$""
"DataBufferUtils.java:925"$0$0$0$9$67$"				while (this.matches > 0 && b != this.delimiter[this.matches]) {"
"DataBufferUtils.java:926"$0$0$0$5$49$"					this.matches = this.table[this.matches - 1];"
"DataBufferUtils.java:927"$0$0$0$1$5$"				}"
"DataBufferUtils.java:928"$0$0$0$0$0$""
"DataBufferUtils.java:929"$0$0$0$5$44$"				if (b == this.delimiter[this.matches]) {"
"DataBufferUtils.java:930"$0$0$0$1$20$"					this.matches++;"
"DataBufferUtils.java:931"$0$0$0$5$49$"					if (this.matches == this.delimiter.length) {"
"DataBufferUtils.java:932"$0$0$0$1$14$"						reset();"
"DataBufferUtils.java:933"$0$0$0$2$15$"						return i;"
"DataBufferUtils.java:934"$0$0$0$1$6$"					}"
"DataBufferUtils.java:935"$0$0$0$1$5$"				}"
"DataBufferUtils.java:936"$0$0$0$1$4$"			}"
"DataBufferUtils.java:937"$0$0$0$2$13$"			return -1;"
"DataBufferUtils.java:938"$0$0$0$1$3$"		}"
"DataBufferUtils.java:939"$0$0$0$0$0$""
"DataBufferUtils.java:940"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:941"$0$0$0$4$29$"		public byte[] delimiter() {"
"DataBufferUtils.java:942"$0$0$0$3$63$"			return Arrays.copyOf(this.delimiter, this.delimiter.length);"
"DataBufferUtils.java:943"$0$0$0$1$3$"		}"
"DataBufferUtils.java:944"$0$0$0$0$0$""
"DataBufferUtils.java:945"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:946"$0$0$0$4$23$"		public void reset() {"
"DataBufferUtils.java:947"$0$0$0$3$20$"			this.matches = 0;"
"DataBufferUtils.java:948"$0$0$0$1$3$"		}"
"DataBufferUtils.java:949"$0$0$0$1$2$"	}"
"DataBufferUtils.java:950"$0$0$0$0$0$""
"DataBufferUtils.java:951"$0$0$0$0$0$""
"DataBufferUtils.java:952"$0$0$0$1$4$"	/**"
"DataBufferUtils.java:953"$0$0$0$10$72$"	 * Implementation of {@link Matcher} that wraps several other matchers."
"DataBufferUtils.java:954"$0$0$0$1$4$"	 */"
"DataBufferUtils.java:955"$0$0$0$7$59$"	private static class CompositeMatcher implements Matcher {"
"DataBufferUtils.java:956"$0$0$0$0$0$""
"DataBufferUtils.java:957"$0$0$0$8$57$"		private static final byte[] NO_DELIMITER = new byte[0];"
"DataBufferUtils.java:958"$0$0$0$0$0$""
"DataBufferUtils.java:959"$0$0$0$4$35$"		private final Matcher[] matchers;"
"DataBufferUtils.java:960"$0$0$0$0$0$""
"DataBufferUtils.java:961"$0$0$0$4$41$"		byte[] longestDelimiter = NO_DELIMITER;"
"DataBufferUtils.java:962"$0$0$0$0$0$""
"DataBufferUtils.java:963"$0$0$0$4$47$"		public CompositeMatcher(Matcher[] matchers) {"
"DataBufferUtils.java:964"$0$0$0$3$28$"			this.matchers = matchers;"
"DataBufferUtils.java:965"$0$0$0$1$3$"		}"
"DataBufferUtils.java:966"$0$0$0$0$0$""
"DataBufferUtils.java:967"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:968"$0$0$0$5$43$"		public int match(DataBuffer dataBuffer) {"
"DataBufferUtils.java:969"$0$0$0$3$40$"			this.longestDelimiter = NO_DELIMITER;"
"DataBufferUtils.java:970"$0$0$0$4$38$"			int bestEndIdx = Integer.MAX_VALUE;"
"DataBufferUtils.java:971"$0$0$0$0$0$""
"DataBufferUtils.java:972"$0$0$0$0$0$""
"DataBufferUtils.java:973"$0$0$0$6$42$"			for (Matcher matcher : this.matchers) {"
"DataBufferUtils.java:974"$0$0$0$4$43$"				int endIdx = matcher.match(dataBuffer);"
"DataBufferUtils.java:975"$0$0$0$5$23$"				if (endIdx != -1 &&"
"DataBufferUtils.java:976"$0$0$0$4$29$"						endIdx <= bestEndIdx &&"
"DataBufferUtils.java:977"$0$0$0$4$66$"						matcher.delimiter().length > this.longestDelimiter.length) {"
"DataBufferUtils.java:978"$0$0$0$3$25$"					bestEndIdx = endIdx;"
"DataBufferUtils.java:979"$0$0$0$3$49$"					this.longestDelimiter = matcher.delimiter();"
"DataBufferUtils.java:980"$0$0$0$1$5$"				}"
"DataBufferUtils.java:981"$0$0$0$1$4$"			}"
"DataBufferUtils.java:982"$0$0$0$5$41$"			if (bestEndIdx == Integer.MAX_VALUE) {"
"DataBufferUtils.java:983"$0$0$0$3$41$"				this.longestDelimiter = NO_DELIMITER;"
"DataBufferUtils.java:984"$0$0$0$2$14$"				return -1;"
"DataBufferUtils.java:985"$0$0$0$1$4$"			}"
"DataBufferUtils.java:986"$0$0$0$2$9$"			else {"
"DataBufferUtils.java:987"$0$0$0$1$12$"				reset();"
"DataBufferUtils.java:988"$0$0$0$2$22$"				return bestEndIdx;"
"DataBufferUtils.java:989"$0$0$0$1$4$"			}"
"DataBufferUtils.java:990"$0$0$0$1$3$"		}"
"DataBufferUtils.java:991"$0$0$0$0$0$""
"DataBufferUtils.java:992"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:993"$0$0$0$4$29$"		public byte[] delimiter() {"
"DataBufferUtils.java:994"$0$0$0$5$73$"			Assert.state(this.longestDelimiter != NO_DELIMITER, ""Illegal state!"");"
"DataBufferUtils.java:995"$0$0$0$2$32$"			return this.longestDelimiter;"
"DataBufferUtils.java:996"$0$0$0$1$3$"		}"
"DataBufferUtils.java:997"$0$0$0$0$0$""
"DataBufferUtils.java:998"$0$0$0$1$11$"		@Override"
"DataBufferUtils.java:999"$0$0$0$4$23$"		public void reset() {"
"DataBufferUtils.java:1000"$0$0$0$6$42$"			for (Matcher matcher : this.matchers) {"
"DataBufferUtils.java:1001"$0$0$0$1$20$"				matcher.reset();"
"DataBufferUtils.java:1002"$0$0$0$1$4$"			}"
"DataBufferUtils.java:1003"$0$0$0$1$3$"		}"
"DataBufferUtils.java:1004"$0$0$0$1$2$"	}"
"DataBufferUtils.java:1005"$0$0$0$0$0$""
"DataBufferUtils.java:1006"$0$0$0$1$1$"}"
"ListenableFutureTask.java:1"$0$0$0$1$2$"/*"
"ListenableFutureTask.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ListenableFutureTask.java:3"$0$0$0$1$2$" *"
"ListenableFutureTask.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ListenableFutureTask.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ListenableFutureTask.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ListenableFutureTask.java:7"$0$0$0$1$2$" *"
"ListenableFutureTask.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ListenableFutureTask.java:9"$0$0$0$1$2$" *"
"ListenableFutureTask.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ListenableFutureTask.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ListenableFutureTask.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ListenableFutureTask.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ListenableFutureTask.java:14"$0$0$0$5$33$" * limitations under the License."
"ListenableFutureTask.java:15"$0$0$0$1$3$" */"
"ListenableFutureTask.java:16"$0$0$0$0$0$""
"ListenableFutureTask.java:17"$0$0$0$2$44$"package org.springframework.util.concurrent;"
"ListenableFutureTask.java:18"$0$0$0$0$0$""
"ListenableFutureTask.java:19"$0$0$0$2$37$"import java.util.concurrent.Callable;"
"ListenableFutureTask.java:20"$0$0$0$2$46$"import java.util.concurrent.CompletableFuture;"
"ListenableFutureTask.java:21"$0$0$0$2$47$"import java.util.concurrent.ExecutionException;"
"ListenableFutureTask.java:22"$0$0$0$2$39$"import java.util.concurrent.FutureTask;"
"ListenableFutureTask.java:23"$0$0$0$0$0$""
"ListenableFutureTask.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ListenableFutureTask.java:25"$0$0$0$0$0$""
"ListenableFutureTask.java:26"$0$0$0$1$3$"/**"
"ListenableFutureTask.java:27"$0$0$0$9$76$" * Extension of {@link FutureTask} that implements {@link ListenableFuture}."
"ListenableFutureTask.java:28"$0$0$0$1$2$" *"
"ListenableFutureTask.java:29"$0$0$0$4$24$" * @author Arjen Poutsma"
"ListenableFutureTask.java:30"$0$0$0$3$13$" * @since 4.0"
"ListenableFutureTask.java:31"$1$0$0$13$74$" * @param <T> the result type returned by this Future's {@code get} method"
"ListenableFutureTask.java:32"$0$0$0$1$3$" */"
"ListenableFutureTask.java:33"$0$0$0$8$91$"public class ListenableFutureTask<T> extends FutureTask<T> implements ListenableFuture<T> {"
"ListenableFutureTask.java:34"$0$0$0$0$0$""
"ListenableFutureTask.java:35"$0$0$0$7$104$"	private final ListenableFutureCallbackRegistry<T> callbacks = new ListenableFutureCallbackRegistry<>();"
"ListenableFutureTask.java:36"$0$0$0$0$0$""
"ListenableFutureTask.java:37"$0$0$0$0$0$""
"ListenableFutureTask.java:38"$0$0$0$1$4$"	/**"
"ListenableFutureTask.java:39"$0$0$0$10$70$"	 * Create a new {@code ListenableFutureTask} that will, upon running,"
"ListenableFutureTask.java:40"$0$0$0$6$39$"	 * execute the given {@link Callable}."
"ListenableFutureTask.java:41"$0$0$0$6$37$"	 * @param callable the callable task"
"ListenableFutureTask.java:42"$0$0$0$1$4$"	 */"
"ListenableFutureTask.java:43"$0$0$0$4$52$"	public ListenableFutureTask(Callable<T> callable) {"
"ListenableFutureTask.java:44"$0$0$0$1$18$"		super(callable);"
"ListenableFutureTask.java:45"$0$0$0$1$2$"	}"
"ListenableFutureTask.java:46"$0$0$0$0$0$""
"ListenableFutureTask.java:47"$0$0$0$1$4$"	/**"
"ListenableFutureTask.java:48"$0$0$0$9$66$"	 * Create a {@code ListenableFutureTask} that will, upon running,"
"ListenableFutureTask.java:49"$1$0$0$11$71$"	 * execute the given {@link Runnable}, and arrange that {@link #get()}"
"ListenableFutureTask.java:50"$0$0$0$9$58$"	 * will return the given result on successful completion."
"ListenableFutureTask.java:51"$0$0$0$6$37$"	 * @param runnable the runnable task"
"ListenableFutureTask.java:52"$0$0$0$10$63$"	 * @param result the result to return on successful completion"
"ListenableFutureTask.java:53"$0$0$0$1$4$"	 */"
"ListenableFutureTask.java:54"$0$0$0$7$69$"	public ListenableFutureTask(Runnable runnable, @Nullable T result) {"
"ListenableFutureTask.java:55"$0$0$0$2$26$"		super(runnable, result);"
"ListenableFutureTask.java:56"$0$0$0$1$2$"	}"
"ListenableFutureTask.java:57"$0$0$0$0$0$""
"ListenableFutureTask.java:58"$0$0$0$0$0$""
"ListenableFutureTask.java:59"$0$0$0$1$10$"	@Override"
"ListenableFutureTask.java:60"$0$0$0$7$72$"	public void addCallback(ListenableFutureCallback<? super T> callback) {"
"ListenableFutureTask.java:61"$0$0$0$1$39$"		this.callbacks.addCallback(callback);"
"ListenableFutureTask.java:62"$0$0$0$1$2$"	}"
"ListenableFutureTask.java:63"$0$0$0$0$0$""
"ListenableFutureTask.java:64"$0$0$0$1$10$"	@Override"
"ListenableFutureTask.java:65"$0$0$0$9$103$"	public void addCallback(SuccessCallback<? super T> successCallback, FailureCallback failureCallback) {"
"ListenableFutureTask.java:66"$0$0$0$1$53$"		this.callbacks.addSuccessCallback(successCallback);"
"ListenableFutureTask.java:67"$0$0$0$1$53$"		this.callbacks.addFailureCallback(failureCallback);"
"ListenableFutureTask.java:68"$0$0$0$1$2$"	}"
"ListenableFutureTask.java:69"$0$0$0$0$0$""
"ListenableFutureTask.java:70"$0$0$0$1$10$"	@Override"
"ListenableFutureTask.java:71"$0$0$0$4$44$"	public CompletableFuture<T> completable() {"
"ListenableFutureTask.java:72"$0$0$0$5$77$"		CompletableFuture<T> completable = new DelegatingCompletableFuture<>(this);"
"ListenableFutureTask.java:73"$0$0$0$1$59$"		this.callbacks.addSuccessCallback(completable::complete);"
"ListenableFutureTask.java:74"$0$0$0$1$72$"		this.callbacks.addFailureCallback(completable::completeExceptionally);"
"ListenableFutureTask.java:75"$0$0$0$2$21$"		return completable;"
"ListenableFutureTask.java:76"$0$0$0$1$2$"	}"
"ListenableFutureTask.java:77"$0$0$0$0$0$""
"ListenableFutureTask.java:78"$0$0$0$0$0$""
"ListenableFutureTask.java:79"$0$0$0$1$10$"	@Override"
"ListenableFutureTask.java:80"$0$0$0$4$24$"	protected void done() {"
"ListenableFutureTask.java:81"$0$0$0$2$18$"		Throwable cause;"
"ListenableFutureTask.java:82"$0$0$0$2$7$"		try {"
"ListenableFutureTask.java:83"$1$0$0$4$20$"			T result = get();"
"ListenableFutureTask.java:84"$0$0$0$1$34$"			this.callbacks.success(result);"
"ListenableFutureTask.java:85"$0$0$0$1$10$"			return;"
"ListenableFutureTask.java:86"$0$0$0$1$3$"		}"
"ListenableFutureTask.java:87"$0$0$0$4$35$"		catch (InterruptedException ex) {"
"ListenableFutureTask.java:88"$0$0$0$1$38$"			Thread.currentThread().interrupt();"
"ListenableFutureTask.java:89"$0$0$0$1$10$"			return;"
"ListenableFutureTask.java:90"$0$0$0$1$3$"		}"
"ListenableFutureTask.java:91"$0$0$0$4$33$"		catch (ExecutionException ex) {"
"ListenableFutureTask.java:92"$1$0$0$3$25$"			cause = ex.getCause();"
"ListenableFutureTask.java:93"$0$0$0$5$23$"			if (cause == null) {"
"ListenableFutureTask.java:94"$0$0$0$3$15$"				cause = ex;"
"ListenableFutureTask.java:95"$0$0$0$1$4$"			}"
"ListenableFutureTask.java:96"$0$0$0$1$3$"		}"
"ListenableFutureTask.java:97"$0$0$0$4$24$"		catch (Throwable ex) {"
"ListenableFutureTask.java:98"$0$0$0$3$14$"			cause = ex;"
"ListenableFutureTask.java:99"$0$0$0$1$3$"		}"
"ListenableFutureTask.java:100"$0$0$0$1$32$"		this.callbacks.failure(cause);"
"ListenableFutureTask.java:101"$0$0$0$1$2$"	}"
"ListenableFutureTask.java:102"$0$0$0$0$0$""
"ListenableFutureTask.java:103"$0$0$0$1$1$"}"
"ByteBufferConverter.java:1"$0$0$0$1$2$"/*"
"ByteBufferConverter.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ByteBufferConverter.java:3"$0$0$0$1$2$" *"
"ByteBufferConverter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ByteBufferConverter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ByteBufferConverter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ByteBufferConverter.java:7"$0$0$0$1$2$" *"
"ByteBufferConverter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ByteBufferConverter.java:9"$0$0$0$1$2$" *"
"ByteBufferConverter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ByteBufferConverter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ByteBufferConverter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ByteBufferConverter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ByteBufferConverter.java:14"$0$0$0$5$33$" * limitations under the License."
"ByteBufferConverter.java:15"$0$0$0$1$3$" */"
"ByteBufferConverter.java:16"$0$0$0$0$0$""
"ByteBufferConverter.java:17"$0$0$0$2$49$"package org.springframework.core.convert.support;"
"ByteBufferConverter.java:18"$0$0$0$0$0$""
"ByteBufferConverter.java:19"$0$0$0$2$23$"import java.nio.Buffer;"
"ByteBufferConverter.java:20"$0$0$0$2$27$"import java.nio.ByteBuffer;"
"ByteBufferConverter.java:21"$0$0$0$2$29$"import java.util.Collections;"
"ByteBufferConverter.java:22"$0$0$0$2$25$"import java.util.HashSet;"
"ByteBufferConverter.java:23"$0$0$0$2$21$"import java.util.Set;"
"ByteBufferConverter.java:24"$0$0$0$0$0$""
"ByteBufferConverter.java:25"$0$0$0$2$58$"import org.springframework.core.convert.ConversionService;"
"ByteBufferConverter.java:26"$0$0$0$2$55$"import org.springframework.core.convert.TypeDescriptor;"
"ByteBufferConverter.java:27"$0$0$0$2$78$"import org.springframework.core.convert.converter.ConditionalGenericConverter;"
"ByteBufferConverter.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ByteBufferConverter.java:29"$0$0$0$0$0$""
"ByteBufferConverter.java:30"$0$0$0$1$3$"/**"
"ByteBufferConverter.java:31"$0$0$0$20$131$" * Converts a {@link ByteBuffer} directly to and from {@code byte[] ByteBuffer} directly to and from {@code byte[]s} and indirectly"
"ByteBufferConverter.java:32"$0$0$0$12$77$" * to any type that the {@link ConversionService} support via {@code byte[]}."
"ByteBufferConverter.java:33"$0$0$0$1$2$" *"
"ByteBufferConverter.java:34"$0$0$0$4$23$" * @author Phillip Webb"
"ByteBufferConverter.java:35"$0$0$0$4$26$" * @author Juergen Hoeller"
"ByteBufferConverter.java:36"$0$0$0$3$13$" * @since 4.0"
"ByteBufferConverter.java:37"$0$0$0$1$3$" */"
"ByteBufferConverter.java:38"$0$0$0$6$72$"final class ByteBufferConverter implements ConditionalGenericConverter {"
"ByteBufferConverter.java:39"$0$0$0$0$0$""
"ByteBufferConverter.java:40"$0$0$0$7$97$"	private static final TypeDescriptor BYTE_BUFFER_TYPE = TypeDescriptor.valueOf(ByteBuffer.class);"
"ByteBufferConverter.java:41"$0$0$0$0$0$""
"ByteBufferConverter.java:42"$0$0$0$7$92$"	private static final TypeDescriptor BYTE_ARRAY_TYPE = TypeDescriptor.valueOf(byte[].class);"
"ByteBufferConverter.java:43"$0$0$0$0$0$""
"ByteBufferConverter.java:44"$0$0$0$5$61$"	private static final Set<ConvertiblePair> CONVERTIBLE_PAIRS;"
"ByteBufferConverter.java:45"$0$0$0$0$0$""
"ByteBufferConverter.java:46"$0$0$0$2$9$"	static {"
"ByteBufferConverter.java:47"$0$0$0$5$59$"		Set<ConvertiblePair> convertiblePairs = new HashSet<>(4);"
"ByteBufferConverter.java:48"$0$0$0$3$76$"		convertiblePairs.add(new ConvertiblePair(ByteBuffer.class, byte[].class));"
"ByteBufferConverter.java:49"$0$0$0$3$76$"		convertiblePairs.add(new ConvertiblePair(byte[].class, ByteBuffer.class));"
"ByteBufferConverter.java:50"$0$0$0$3$76$"		convertiblePairs.add(new ConvertiblePair(ByteBuffer.class, Object.class));"
"ByteBufferConverter.java:51"$0$0$0$3$76$"		convertiblePairs.add(new ConvertiblePair(Object.class, ByteBuffer.class));"
"ByteBufferConverter.java:52"$0$0$0$3$68$"		CONVERTIBLE_PAIRS = Collections.unmodifiableSet(convertiblePairs);"
"ByteBufferConverter.java:53"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:54"$0$0$0$0$0$""
"ByteBufferConverter.java:55"$0$0$0$0$0$""
"ByteBufferConverter.java:56"$0$0$0$4$51$"	private final ConversionService conversionService;"
"ByteBufferConverter.java:57"$0$0$0$0$0$""
"ByteBufferConverter.java:58"$0$0$0$0$0$""
"ByteBufferConverter.java:59"$0$0$0$4$66$"	public ByteBufferConverter(ConversionService conversionService) {"
"ByteBufferConverter.java:60"$0$0$0$3$45$"		this.conversionService = conversionService;"
"ByteBufferConverter.java:61"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:62"$0$0$0$0$0$""
"ByteBufferConverter.java:63"$0$0$0$0$0$""
"ByteBufferConverter.java:64"$0$0$0$1$10$"	@Override"
"ByteBufferConverter.java:65"$1$0$0$4$52$"	public Set<ConvertiblePair> getConvertibleTypes() {"
"ByteBufferConverter.java:66"$0$0$0$2$27$"		return CONVERTIBLE_PAIRS;"
"ByteBufferConverter.java:67"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:68"$0$0$0$0$0$""
"ByteBufferConverter.java:69"$0$0$0$1$10$"	@Override"
"ByteBufferConverter.java:70"$1$0$0$7$79$"	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"ByteBufferConverter.java:71"$2$0$0$4$73$"		boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);"
"ByteBufferConverter.java:72"$0$0$0$3$52$"		if (sourceType.isAssignableTo(BYTE_BUFFER_TYPE)) {"
"ByteBufferConverter.java:73"$2$0$0$4$66$"			return (byteBufferTarget || matchesFromByteBuffer(targetType));"
"ByteBufferConverter.java:74"$0$0$0$1$3$"		}"
"ByteBufferConverter.java:75"$1$0$0$4$63$"		return (byteBufferTarget && matchesToByteBuffer(sourceType));"
"ByteBufferConverter.java:76"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:77"$0$0$0$0$0$""
"ByteBufferConverter.java:78"$1$0$0$5$67$"	private boolean matchesFromByteBuffer(TypeDescriptor targetType) {"
"ByteBufferConverter.java:79"$1$0$0$3$55$"		return (targetType.isAssignableTo(BYTE_ARRAY_TYPE) ||"
"ByteBufferConverter.java:80"$1$0$0$2$68$"				this.conversionService.canConvert(BYTE_ARRAY_TYPE, targetType));"
"ByteBufferConverter.java:81"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:82"$0$0$0$0$0$""
"ByteBufferConverter.java:83"$0$0$0$5$65$"	private boolean matchesToByteBuffer(TypeDescriptor sourceType) {"
"ByteBufferConverter.java:84"$0$0$0$3$55$"		return (sourceType.isAssignableTo(BYTE_ARRAY_TYPE) ||"
"ByteBufferConverter.java:85"$0$0$0$2$68$"				this.conversionService.canConvert(sourceType, BYTE_ARRAY_TYPE));"
"ByteBufferConverter.java:86"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:87"$0$0$0$0$0$""
"ByteBufferConverter.java:88"$0$0$0$1$10$"	@Override"
"ByteBufferConverter.java:89"$0$0$0$1$10$"	@Nullable"
"ByteBufferConverter.java:90"$1$0$0$10$103$"	public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {"
"ByteBufferConverter.java:91"$2$0$0$4$73$"		boolean byteBufferTarget = targetType.isAssignableTo(BYTE_BUFFER_TYPE);"
"ByteBufferConverter.java:92"$0$0$0$5$37$"		if (source instanceof ByteBuffer) {"
"ByteBufferConverter.java:93"$0$0$0$5$43$"			ByteBuffer buffer = (ByteBuffer) source;"
"ByteBufferConverter.java:94"$2$0$0$7$94$"			return (byteBufferTarget ? buffer.duplicate() : convertFromByteBuffer(buffer, targetType));"
"ByteBufferConverter.java:95"$0$0$0$1$3$"		}"
"ByteBufferConverter.java:96"$1$0$0$3$25$"		if (byteBufferTarget) {"
"ByteBufferConverter.java:97"$0$0$0$3$50$"			return convertToByteBuffer(source, sourceType);"
"ByteBufferConverter.java:98"$0$0$0$1$3$"		}"
"ByteBufferConverter.java:99"$0$0$1$4$22$"		// Should not happen"
"ByteBufferConverter.java:100"$1$0$0$5$68$"		throw new IllegalStateException(""Unexpected source/target types"");"
"ByteBufferConverter.java:101"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:102"$0$0$0$0$0$""
"ByteBufferConverter.java:103"$0$0$0$1$10$"	@Nullable"
"ByteBufferConverter.java:104"$1$0$0$7$85$"	private Object convertFromByteBuffer(ByteBuffer source, TypeDescriptor targetType) {"
"ByteBufferConverter.java:105"$0$0$0$5$46$"		byte[] bytes = new byte[source.remaining()];"
"ByteBufferConverter.java:106"$1$0$0$1$20$"		source.get(bytes);"
"ByteBufferConverter.java:107"$0$0$0$0$0$""
"ByteBufferConverter.java:108"$1$0$0$3$51$"		if (targetType.isAssignableTo(BYTE_ARRAY_TYPE)) {"
"ByteBufferConverter.java:109"$0$0$0$2$16$"			return bytes;"
"ByteBufferConverter.java:110"$0$0$0$1$3$"		}"
"ByteBufferConverter.java:111"$1$0$0$4$76$"		return this.conversionService.convert(bytes, BYTE_ARRAY_TYPE, targetType);"
"ByteBufferConverter.java:112"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:113"$0$0$0$0$0$""
"ByteBufferConverter.java:114"$0$0$0$8$89$"	private Object convertToByteBuffer(@Nullable Object source, TypeDescriptor sourceType) {"
"ByteBufferConverter.java:115"$0$0$0$10$62$"		byte[] bytes = (byte[]) (source instanceof byte[] ? source :"
"ByteBufferConverter.java:116"$0$0$0$3$73$"				this.conversionService.convert(source, sourceType, BYTE_ARRAY_TYPE));"
"ByteBufferConverter.java:117"$0$0$0$0$0$""
"ByteBufferConverter.java:118"$0$0$0$5$22$"		if (bytes == null) {"
"ByteBufferConverter.java:119"$0$0$0$3$39$"			return ByteBuffer.wrap(new byte[0]);"
"ByteBufferConverter.java:120"$0$0$0$1$3$"		}"
"ByteBufferConverter.java:121"$0$0$0$0$0$""
"ByteBufferConverter.java:122"$0$0$0$4$60$"		ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length);"
"ByteBufferConverter.java:123"$0$0$0$1$24$"		byteBuffer.put(bytes);"
"ByteBufferConverter.java:124"$0$0$0$0$0$""
"ByteBufferConverter.java:125"$0$0$1$15$77$"		// Extra cast necessary for compiling on JDK 9 plus running on JDK 8, since"
"ByteBufferConverter.java:126"$0$0$1$10$80$"		// otherwise the overridden ByteBuffer-returning rewind method would be chosen"
"ByteBufferConverter.java:127"$0$0$1$7$36$"		// which isn't available on JDK 8."
"ByteBufferConverter.java:128"$0$0$0$3$40$"		return ((Buffer) byteBuffer).rewind();"
"ByteBufferConverter.java:129"$0$0$0$1$2$"	}"
"ByteBufferConverter.java:130"$0$0$0$0$0$""
"ByteBufferConverter.java:131"$0$0$0$1$1$"}"
"StreamConverter.java:1"$0$0$0$1$2$"/*"
"StreamConverter.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"StreamConverter.java:3"$0$0$0$1$2$" *"
"StreamConverter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StreamConverter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StreamConverter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StreamConverter.java:7"$0$0$0$1$2$" *"
"StreamConverter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StreamConverter.java:9"$0$0$0$1$2$" *"
"StreamConverter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StreamConverter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StreamConverter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StreamConverter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StreamConverter.java:14"$0$0$0$5$33$" * limitations under the License."
"StreamConverter.java:15"$0$0$0$1$3$" */"
"StreamConverter.java:16"$0$0$0$0$0$""
"StreamConverter.java:17"$0$0$0$2$49$"package org.springframework.core.convert.support;"
"StreamConverter.java:18"$0$0$0$0$0$""
"StreamConverter.java:19"$0$0$0$2$28$"import java.util.Collection;"
"StreamConverter.java:20"$0$0$0$2$29$"import java.util.Collections;"
"StreamConverter.java:21"$0$0$0$2$25$"import java.util.HashSet;"
"StreamConverter.java:22"$0$0$0$2$22$"import java.util.List;"
"StreamConverter.java:23"$0$0$0$2$21$"import java.util.Set;"
"StreamConverter.java:24"$0$0$0$2$35$"import java.util.stream.Collectors;"
"StreamConverter.java:25"$0$0$0$2$31$"import java.util.stream.Stream;"
"StreamConverter.java:26"$0$0$0$0$0$""
"StreamConverter.java:27"$0$0$0$2$58$"import org.springframework.core.convert.ConversionService;"
"StreamConverter.java:28"$0$0$0$2$55$"import org.springframework.core.convert.TypeDescriptor;"
"StreamConverter.java:29"$0$0$0$2$78$"import org.springframework.core.convert.converter.ConditionalGenericConverter;"
"StreamConverter.java:30"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StreamConverter.java:31"$0$0$0$0$0$""
"StreamConverter.java:32"$0$0$0$1$3$"/**"
"StreamConverter.java:33"$0$0$0$14$78$" * Converts a {@link Stream} to and from a collection or array, converting the"
"StreamConverter.java:34"$0$0$0$5$29$" * element type if necessary."
"StreamConverter.java:35"$0$0$0$1$2$" *"
"StreamConverter.java:36"$0$0$0$4$26$" * @author Stephane Nicoll"
"StreamConverter.java:37"$0$0$0$3$13$" * @since 4.2"
"StreamConverter.java:38"$0$0$0$1$3$" */"
"StreamConverter.java:39"$0$0$0$5$62$"class StreamConverter implements ConditionalGenericConverter {"
"StreamConverter.java:40"$0$0$0$0$0$""
"StreamConverter.java:41"$0$0$0$7$88$"	private static final TypeDescriptor STREAM_TYPE = TypeDescriptor.valueOf(Stream.class);"
"StreamConverter.java:42"$0$0$0$0$0$""
"StreamConverter.java:43"$0$0$0$7$88$"	private static final Set<ConvertiblePair> CONVERTIBLE_TYPES = createConvertibleTypes();"
"StreamConverter.java:44"$0$0$0$0$0$""
"StreamConverter.java:45"$0$0$0$4$51$"	private final ConversionService conversionService;"
"StreamConverter.java:46"$0$0$0$0$0$""
"StreamConverter.java:47"$0$0$0$0$0$""
"StreamConverter.java:48"$0$0$0$4$62$"	public StreamConverter(ConversionService conversionService) {"
"StreamConverter.java:49"$0$0$0$3$45$"		this.conversionService = conversionService;"
"StreamConverter.java:50"$0$0$0$1$2$"	}"
"StreamConverter.java:51"$0$0$0$0$0$""
"StreamConverter.java:52"$0$0$0$0$0$""
"StreamConverter.java:53"$0$0$0$1$10$"	@Override"
"StreamConverter.java:54"$1$0$0$4$52$"	public Set<ConvertiblePair> getConvertibleTypes() {"
"StreamConverter.java:55"$0$0$0$2$27$"		return CONVERTIBLE_TYPES;"
"StreamConverter.java:56"$0$0$0$1$2$"	}"
"StreamConverter.java:57"$0$0$0$0$0$""
"StreamConverter.java:58"$0$0$0$1$10$"	@Override"
"StreamConverter.java:59"$1$0$0$7$79$"	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {"
"StreamConverter.java:60"$0$0$0$3$47$"		if (sourceType.isAssignableTo(STREAM_TYPE)) {"
"StreamConverter.java:61"$2$0$0$3$79$"			return matchesFromStream(sourceType.getElementTypeDescriptor(), targetType);"
"StreamConverter.java:62"$0$0$0$1$3$"		}"
"StreamConverter.java:63"$1$0$0$3$47$"		if (targetType.isAssignableTo(STREAM_TYPE)) {"
"StreamConverter.java:64"$2$0$0$3$77$"			return matchesToStream(targetType.getElementTypeDescriptor(), sourceType);"
"StreamConverter.java:65"$0$0$0$1$3$"		}"
"StreamConverter.java:66"$0$0$0$2$15$"		return false;"
"StreamConverter.java:67"$0$0$0$1$2$"	}"
"StreamConverter.java:68"$0$0$0$0$0$""
"StreamConverter.java:69"$0$0$0$1$4$"	/**"
"StreamConverter.java:70"$0$0$0$15$84$"	 * Validate that a {@link Collection} of the elements held within the stream can be"
"StreamConverter.java:71"$1$0$0$7$50$"	 * converted to the specified {@code targetType}."
"StreamConverter.java:72"$0$0$0$9$54$"	 * @param elementType the type of the stream elements"
"StreamConverter.java:73"$1$0$0$8$44$"	 * @param targetType the type to convert to"
"StreamConverter.java:74"$0$0$0$1$4$"	 */"
"StreamConverter.java:75"$1$0$0$8$100$"	public boolean matchesFromStream(@Nullable TypeDescriptor elementType, TypeDescriptor targetType) {"
"StreamConverter.java:76"$0$0$0$5$96$"		TypeDescriptor collectionOfElement = TypeDescriptor.collection(Collection.class, elementType);"
"StreamConverter.java:77"$1$0$0$3$76$"		return this.conversionService.canConvert(collectionOfElement, targetType);"
"StreamConverter.java:78"$0$0$0$1$2$"	}"
"StreamConverter.java:79"$0$0$0$0$0$""
"StreamConverter.java:80"$0$0$0$1$4$"	/**"
"StreamConverter.java:81"$0$0$0$15$94$"	 * Validate that the specified {@code sourceType} can be converted to a {@link Collection} of"
"StreamConverter.java:82"$0$0$0$7$36$"	 * the type of the stream elements."
"StreamConverter.java:83"$0$0$0$9$54$"	 * @param elementType the type of the stream elements"
"StreamConverter.java:84"$0$0$0$8$46$"	 * @param sourceType the type to convert from"
"StreamConverter.java:85"$0$0$0$1$4$"	 */"
"StreamConverter.java:86"$0$0$0$8$98$"	public boolean matchesToStream(@Nullable TypeDescriptor elementType, TypeDescriptor sourceType) {"
"StreamConverter.java:87"$0$0$0$5$96$"		TypeDescriptor collectionOfElement = TypeDescriptor.collection(Collection.class, elementType);"
"StreamConverter.java:88"$0$0$0$3$76$"		return this.conversionService.canConvert(sourceType, collectionOfElement);"
"StreamConverter.java:89"$0$0$0$1$2$"	}"
"StreamConverter.java:90"$0$0$0$0$0$""
"StreamConverter.java:91"$0$0$0$1$10$"	@Override"
"StreamConverter.java:92"$0$0$0$1$10$"	@Nullable"
"StreamConverter.java:93"$1$0$0$10$103$"	public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {"
"StreamConverter.java:94"$0$0$0$3$47$"		if (sourceType.isAssignableTo(STREAM_TYPE)) {"
"StreamConverter.java:95"$1$0$0$5$72$"			return convertFromStream((Stream<?>) source, sourceType, targetType);"
"StreamConverter.java:96"$0$0$0$1$3$"		}"
"StreamConverter.java:97"$1$0$0$3$47$"		if (targetType.isAssignableTo(STREAM_TYPE)) {"
"StreamConverter.java:98"$1$0$0$4$58$"			return convertToStream(source, sourceType, targetType);"
"StreamConverter.java:99"$0$0$0$1$3$"		}"
"StreamConverter.java:100"$0$0$1$4$22$"		// Should not happen"
"StreamConverter.java:101"$1$0$0$5$68$"		throw new IllegalStateException(""Unexpected source/target types"");"
"StreamConverter.java:102"$0$0$0$1$2$"	}"
"StreamConverter.java:103"$0$0$0$0$0$""
"StreamConverter.java:104"$0$0$0$1$10$"	@Nullable"
"StreamConverter.java:105"$1$0$0$10$117$"	private Object convertFromStream(@Nullable Stream<?> source, TypeDescriptor streamType, TypeDescriptor targetType) {"
"StreamConverter.java:106"$0$0$0$10$114$"		List<Object> content = (source != null ? source.collect(Collectors.<Object>toList()) : Collections.emptyList());"
"StreamConverter.java:107"$1$0$0$5$105$"		TypeDescriptor listType = TypeDescriptor.collection(List.class, streamType.getElementTypeDescriptor());"
"StreamConverter.java:108"$1$0$0$4$71$"		return this.conversionService.convert(content, listType, targetType);"
"StreamConverter.java:109"$0$0$0$1$2$"	}"
"StreamConverter.java:110"$0$0$0$0$0$""
"StreamConverter.java:111"$0$0$0$10$112$"	private Object convertToStream(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor streamType) {"
"StreamConverter.java:112"$2$0$0$5$113$"		TypeDescriptor targetCollection = TypeDescriptor.collection(List.class, streamType.getElementTypeDescriptor());"
"StreamConverter.java:113"$2$0$0$7$98$"		List<?> target = (List<?>) this.conversionService.convert(source, sourceType, targetCollection);"
"StreamConverter.java:114"$1$0$0$5$23$"		if (target == null) {"
"StreamConverter.java:115"$1$0$0$3$36$"			target = Collections.emptyList();"
"StreamConverter.java:116"$0$0$0$1$3$"		}"
"StreamConverter.java:117"$1$0$0$2$25$"		return target.stream();"
"StreamConverter.java:118"$0$0$0$1$2$"	}"
"StreamConverter.java:119"$0$0$0$0$0$""
"StreamConverter.java:120"$0$0$0$0$0$""
"StreamConverter.java:121"$0$0$0$5$63$"	private static Set<ConvertiblePair> createConvertibleTypes() {"
"StreamConverter.java:122"$0$0$0$5$58$"		Set<ConvertiblePair> convertiblePairs = new HashSet<>();"
"StreamConverter.java:123"$0$0$0$3$76$"		convertiblePairs.add(new ConvertiblePair(Stream.class, Collection.class));"
"StreamConverter.java:124"$0$0$0$3$74$"		convertiblePairs.add(new ConvertiblePair(Stream.class, Object[].class));"
"StreamConverter.java:125"$0$0$0$3$76$"		convertiblePairs.add(new ConvertiblePair(Collection.class, Stream.class));"
"StreamConverter.java:126"$0$0$0$3$74$"		convertiblePairs.add(new ConvertiblePair(Object[].class, Stream.class));"
"StreamConverter.java:127"$0$0$0$2$26$"		return convertiblePairs;"
"StreamConverter.java:128"$0$0$0$1$2$"	}"
"StreamConverter.java:129"$0$0$0$0$0$""
"StreamConverter.java:130"$0$0$0$1$1$"}"
"AnnotationAttributes.java:1"$0$0$0$1$2$"/*"
"AnnotationAttributes.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AnnotationAttributes.java:3"$0$0$0$1$2$" *"
"AnnotationAttributes.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationAttributes.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationAttributes.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationAttributes.java:7"$0$0$0$1$2$" *"
"AnnotationAttributes.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationAttributes.java:9"$0$0$0$1$2$" *"
"AnnotationAttributes.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationAttributes.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationAttributes.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationAttributes.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationAttributes.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationAttributes.java:15"$0$0$0$1$3$" */"
"AnnotationAttributes.java:16"$0$0$0$0$0$""
"AnnotationAttributes.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AnnotationAttributes.java:18"$0$0$0$0$0$""
"AnnotationAttributes.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"AnnotationAttributes.java:20"$0$0$0$2$31$"import java.lang.reflect.Array;"
"AnnotationAttributes.java:21"$0$0$0$2$26$"import java.util.Iterator;"
"AnnotationAttributes.java:22"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"AnnotationAttributes.java:23"$0$0$0$2$21$"import java.util.Map;"
"AnnotationAttributes.java:24"$0$0$0$0$0$""
"AnnotationAttributes.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AnnotationAttributes.java:26"$0$0$0$2$39$"import org.springframework.util.Assert;"
"AnnotationAttributes.java:27"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"AnnotationAttributes.java:28"$0$0$0$0$0$""
"AnnotationAttributes.java:29"$0$0$0$1$3$"/**"
"AnnotationAttributes.java:30"$0$0$0$7$67$" * {@link LinkedHashMap} subclass representing annotation attribute"
"AnnotationAttributes.java:31"$0$0$0$8$63$" * <em>key-value</em> pairs as read by {@link AnnotationUtils},"
"AnnotationAttributes.java:32"$0$0$0$8$72$" * {@link AnnotatedElementUtils}, and Spring's reflection- and ASM-based"
"AnnotationAttributes.java:33"$0$0$0$4$76$" * {@link org.springframework.core.type.AnnotationMetadata} implementations."
"AnnotationAttributes.java:34"$0$0$0$1$2$" *"
"AnnotationAttributes.java:35"$0$0$0$11$78$" * <p>Provides 'pseudo-reification' to avoid noisy Map generics in the calling"
"AnnotationAttributes.java:36"$0$0$0$12$75$" * code as well as convenience methods for looking up annotation attributes"
"AnnotationAttributes.java:37"$0$0$0$5$26$" * in a type-safe fashion."
"AnnotationAttributes.java:38"$0$0$0$1$2$" *"
"AnnotationAttributes.java:39"$0$0$0$4$22$" * @author Chris Beams"
"AnnotationAttributes.java:40"$0$0$0$4$22$" * @author Sam Brannen"
"AnnotationAttributes.java:41"$0$0$0$4$26$" * @author Juergen Hoeller"
"AnnotationAttributes.java:42"$0$0$0$3$15$" * @since 3.1.1"
"AnnotationAttributes.java:43"$1$0$0$3$47$" * @see AnnotationUtils#getAnnotationAttributes"
"AnnotationAttributes.java:44"$0$0$0$3$29$" * @see AnnotatedElementUtils"
"AnnotationAttributes.java:45"$0$0$0$1$3$" */"
"AnnotationAttributes.java:46"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"AnnotationAttributes.java:47"$0$0$0$7$73$"public class AnnotationAttributes extends LinkedHashMap<String, Object> {"
"AnnotationAttributes.java:48"$0$0$0$0$0$""
"AnnotationAttributes.java:49"$0$0$0$7$49$"	private static final String UNKNOWN = ""unknown"";"
"AnnotationAttributes.java:50"$0$0$0$0$0$""
"AnnotationAttributes.java:51"$0$0$0$1$10$"	@Nullable"
"AnnotationAttributes.java:52"$0$0$0$6$58$"	private final Class<? extends Annotation> annotationType;"
"AnnotationAttributes.java:53"$0$0$0$0$0$""
"AnnotationAttributes.java:54"$0$0$0$3$26$"	final String displayName;"
"AnnotationAttributes.java:55"$0$0$0$0$0$""
"AnnotationAttributes.java:56"$0$0$0$4$27$"	boolean validated = false;"
"AnnotationAttributes.java:57"$0$0$0$0$0$""
"AnnotationAttributes.java:58"$0$0$0$0$0$""
"AnnotationAttributes.java:59"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:60"$0$0$0$8$62$"	 * Create a new, empty {@link AnnotationAttributes} instance."
"AnnotationAttributes.java:61"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:62"$0$0$0$3$32$"	public AnnotationAttributes() {"
"AnnotationAttributes.java:63"$0$0$0$3$29$"		this.annotationType = null;"
"AnnotationAttributes.java:64"$0$0$0$3$29$"		this.displayName = UNKNOWN;"
"AnnotationAttributes.java:65"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:66"$0$0$0$0$0$""
"AnnotationAttributes.java:67"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:68"$0$0$0$10$70$"	 * Create a new, empty {@link AnnotationAttributes} instance with the"
"AnnotationAttributes.java:69"$0$0$0$7$51$"	 * given initial capacity to optimize performance."
"AnnotationAttributes.java:70"$0$0$0$9$61$"	 * @param initialCapacity initial size of the underlying map"
"AnnotationAttributes.java:71"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:72"$0$0$0$4$51$"	public AnnotationAttributes(int initialCapacity) {"
"AnnotationAttributes.java:73"$0$0$0$1$25$"		super(initialCapacity);"
"AnnotationAttributes.java:74"$0$0$0$3$29$"		this.annotationType = null;"
"AnnotationAttributes.java:75"$0$0$0$3$29$"		this.displayName = UNKNOWN;"
"AnnotationAttributes.java:76"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:77"$0$0$0$0$0$""
"AnnotationAttributes.java:78"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:79"$0$0$0$10$77$"	 * Create a new {@link AnnotationAttributes} instance, wrapping the provided"
"AnnotationAttributes.java:80"$0$0$0$7$45$"	 * map and all its <em>key-value</em> pairs."
"AnnotationAttributes.java:81"$0$0$0$10$79$"	 * @param map original source of annotation attribute <em>key-value</em> pairs"
"AnnotationAttributes.java:82"$0$0$0$3$22$"	 * @see #fromMap(Map)"
"AnnotationAttributes.java:83"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:84"$0$0$0$5$55$"	public AnnotationAttributes(Map<String, Object> map) {"
"AnnotationAttributes.java:85"$0$0$0$1$13$"		super(map);"
"AnnotationAttributes.java:86"$0$0$0$3$29$"		this.annotationType = null;"
"AnnotationAttributes.java:87"$0$0$0$3$29$"		this.displayName = UNKNOWN;"
"AnnotationAttributes.java:88"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:89"$0$0$0$0$0$""
"AnnotationAttributes.java:90"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:91"$0$0$0$10$77$"	 * Create a new {@link AnnotationAttributes} instance, wrapping the provided"
"AnnotationAttributes.java:92"$0$0$0$7$45$"	 * map and all its <em>key-value</em> pairs."
"AnnotationAttributes.java:93"$0$0$0$10$81$"	 * @param other original source of annotation attribute <em>key-value</em> pairs"
"AnnotationAttributes.java:94"$0$0$0$3$22$"	 * @see #fromMap(Map)"
"AnnotationAttributes.java:95"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:96"$0$0$0$4$58$"	public AnnotationAttributes(AnnotationAttributes other) {"
"AnnotationAttributes.java:97"$0$0$0$1$15$"		super(other);"
"AnnotationAttributes.java:98"$0$0$0$3$45$"		this.annotationType = other.annotationType;"
"AnnotationAttributes.java:99"$0$0$0$3$39$"		this.displayName = other.displayName;"
"AnnotationAttributes.java:100"$0$0$0$3$35$"		this.validated = other.validated;"
"AnnotationAttributes.java:101"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:102"$0$0$0$0$0$""
"AnnotationAttributes.java:103"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:104"$0$0$0$10$69$"	 * Create a new, empty {@link AnnotationAttributes} instance for the"
"AnnotationAttributes.java:105"$0$0$0$4$37$"	 * specified {@code annotationType}."
"AnnotationAttributes.java:106"$0$0$0$10$68$"	 * @param annotationType the type of annotation represented by this"
"AnnotationAttributes.java:107"$0$0$0$7$61$"	 * {@code AnnotationAttributes} instance; never {@code null}"
"AnnotationAttributes.java:108"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationAttributes.java:109"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:110"$0$0$0$6$74$"	public AnnotationAttributes(Class<? extends Annotation> annotationType) {"
"AnnotationAttributes.java:111"$0$0$0$6$70$"		Assert.notNull(annotationType, ""'annotationType' must not be null"");"
"AnnotationAttributes.java:112"$0$0$0$3$39$"		this.annotationType = annotationType;"
"AnnotationAttributes.java:113"$1$0$0$3$46$"		this.displayName = annotationType.getName();"
"AnnotationAttributes.java:114"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:115"$0$0$0$0$0$""
"AnnotationAttributes.java:116"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:117"$0$0$0$8$50$"	 * Create a possibly already validated new, empty"
"AnnotationAttributes.java:118"$0$0$0$7$59$"	 * {@link AnnotationAttributes} instance for the specified"
"AnnotationAttributes.java:119"$0$0$0$3$27$"	 * {@code annotationType}."
"AnnotationAttributes.java:120"$0$0$0$10$68$"	 * @param annotationType the type of annotation represented by this"
"AnnotationAttributes.java:121"$0$0$0$7$61$"	 * {@code AnnotationAttributes} instance; never {@code null}"
"AnnotationAttributes.java:122"$0$0$0$10$71$"	 * @param validated if the attributes are considered already validated"
"AnnotationAttributes.java:123"$0$0$0$3$14$"	 * @since 5.2"
"AnnotationAttributes.java:124"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:125"$0$0$0$7$86$"	AnnotationAttributes(Class<? extends Annotation> annotationType, boolean validated) {"
"AnnotationAttributes.java:126"$0$0$0$6$70$"		Assert.notNull(annotationType, ""'annotationType' must not be null"");"
"AnnotationAttributes.java:127"$0$0$0$3$39$"		this.annotationType = annotationType;"
"AnnotationAttributes.java:128"$1$0$0$3$46$"		this.displayName = annotationType.getName();"
"AnnotationAttributes.java:129"$0$0$0$3$29$"		this.validated = validated;"
"AnnotationAttributes.java:130"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:131"$0$0$0$0$0$""
"AnnotationAttributes.java:132"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:133"$0$0$0$10$69$"	 * Create a new, empty {@link AnnotationAttributes} instance for the"
"AnnotationAttributes.java:134"$0$0$0$4$37$"	 * specified {@code annotationType}."
"AnnotationAttributes.java:135"$0$0$0$10$70$"	 * @param annotationType the annotation type name represented by this"
"AnnotationAttributes.java:136"$0$0$0$7$61$"	 * {@code AnnotationAttributes} instance; never {@code null}"
"AnnotationAttributes.java:137"$0$0$0$13$77$"	 * @param classLoader the ClassLoader to try to load the annotation type on,"
"AnnotationAttributes.java:138"$0$0$0$11$58$"	 * or {@code null} to just store the annotation type name"
"AnnotationAttributes.java:139"$0$0$0$3$16$"	 * @since 4.3.2"
"AnnotationAttributes.java:140"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:141"$0$0$0$7$88$"	public AnnotationAttributes(String annotationType, @Nullable ClassLoader classLoader) {"
"AnnotationAttributes.java:142"$0$0$0$6$70$"		Assert.notNull(annotationType, ""'annotationType' must not be null"");"
"AnnotationAttributes.java:143"$1$0$0$4$71$"		this.annotationType = getAnnotationType(annotationType, classLoader);"
"AnnotationAttributes.java:144"$0$0$0$3$36$"		this.displayName = annotationType;"
"AnnotationAttributes.java:145"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:146"$0$0$0$0$0$""
"AnnotationAttributes.java:147"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationAttributes.java:148"$0$0$0$1$10$"	@Nullable"
"AnnotationAttributes.java:149"$1$0$0$11$121$"	private static Class<? extends Annotation> getAnnotationType(String annotationType, @Nullable ClassLoader classLoader) {"
"AnnotationAttributes.java:150"$0$0$0$5$28$"		if (classLoader != null) {"
"AnnotationAttributes.java:151"$0$0$0$2$8$"			try {"
"AnnotationAttributes.java:152"$0$0$0$5$79$"				return (Class<? extends Annotation>) classLoader.loadClass(annotationType);"
"AnnotationAttributes.java:153"$0$0$0$1$4$"			}"
"AnnotationAttributes.java:154"$0$0$0$4$38$"			catch (ClassNotFoundException ex) {"
"AnnotationAttributes.java:155"$0$0$1$5$38$"				// Annotation Class not resolvable"
"AnnotationAttributes.java:156"$0$0$0$1$4$"			}"
"AnnotationAttributes.java:157"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:158"$0$0$0$2$14$"		return null;"
"AnnotationAttributes.java:159"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:160"$0$0$0$0$0$""
"AnnotationAttributes.java:161"$0$0$0$0$0$""
"AnnotationAttributes.java:162"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:163"$0$0$0$11$80$"	 * Get the type of annotation represented by this {@code AnnotationAttributes}."
"AnnotationAttributes.java:164"$0$0$0$10$59$"	 * @return the annotation type, or {@code null} if unknown"
"AnnotationAttributes.java:165"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationAttributes.java:166"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:167"$0$0$0$1$10$"	@Nullable"
"AnnotationAttributes.java:168"$0$0$0$6$54$"	public Class<? extends Annotation> annotationType() {"
"AnnotationAttributes.java:169"$0$0$0$2$29$"		return this.annotationType;"
"AnnotationAttributes.java:170"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:171"$0$0$0$0$0$""
"AnnotationAttributes.java:172"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:173"$0$0$0$13$79$"	 * Get the value stored under the specified {@code attributeName} as a string."
"AnnotationAttributes.java:174"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:175"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:176"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:177"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:178"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:179"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:180"$1$0$0$5$48$"	public String getString(String attributeName) {"
"AnnotationAttributes.java:181"$1$0$0$3$59$"		return getRequiredAttribute(attributeName, String.class);"
"AnnotationAttributes.java:182"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:183"$0$0$0$0$0$""
"AnnotationAttributes.java:184"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:185"$0$0$0$12$72$"	 * Get the value stored under the specified {@code attributeName} as an"
"AnnotationAttributes.java:186"$0$0$0$4$21$"	 * array of strings."
"AnnotationAttributes.java:187"$0$0$0$11$71$"	 * <p>If the value stored under the specified {@code attributeName} is"
"AnnotationAttributes.java:188"$0$0$0$12$65$"	 * a string, it will be wrapped in a single-element array before"
"AnnotationAttributes.java:189"$0$0$0$3$17$"	 * returning it."
"AnnotationAttributes.java:190"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:191"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:192"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:193"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:194"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:195"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:196"$1$0$0$5$55$"	public String[] getStringArray(String attributeName) {"
"AnnotationAttributes.java:197"$1$0$0$3$61$"		return getRequiredAttribute(attributeName, String[].class);"
"AnnotationAttributes.java:198"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:199"$0$0$0$0$0$""
"AnnotationAttributes.java:200"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:201"$0$0$0$13$80$"	 * Get the value stored under the specified {@code attributeName} as a boolean."
"AnnotationAttributes.java:202"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:203"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:204"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:205"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:206"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:207"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:208"$1$0$0$5$50$"	public boolean getBoolean(String attributeName) {"
"AnnotationAttributes.java:209"$1$0$0$3$60$"		return getRequiredAttribute(attributeName, Boolean.class);"
"AnnotationAttributes.java:210"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:211"$0$0$0$0$0$""
"AnnotationAttributes.java:212"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:213"$0$0$0$13$79$"	 * Get the value stored under the specified {@code attributeName} as a number."
"AnnotationAttributes.java:214"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:215"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:216"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:217"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:218"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:219"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:220"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationAttributes.java:221"$1$0$0$8$62$"	public <N extends Number> N getNumber(String attributeName) {"
"AnnotationAttributes.java:222"$1$0$0$4$63$"		return (N) getRequiredAttribute(attributeName, Number.class);"
"AnnotationAttributes.java:223"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:224"$0$0$0$0$0$""
"AnnotationAttributes.java:225"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:226"$0$0$0$13$78$"	 * Get the value stored under the specified {@code attributeName} as an enum."
"AnnotationAttributes.java:227"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:228"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:229"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:230"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:231"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:232"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:233"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationAttributes.java:234"$1$0$0$8$61$"	public <E extends Enum<?>> E getEnum(String attributeName) {"
"AnnotationAttributes.java:235"$1$0$0$4$61$"		return (E) getRequiredAttribute(attributeName, Enum.class);"
"AnnotationAttributes.java:236"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:237"$0$0$0$0$0$""
"AnnotationAttributes.java:238"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:239"$0$0$0$13$78$"	 * Get the value stored under the specified {@code attributeName} as a class."
"AnnotationAttributes.java:240"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:241"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:242"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:243"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:244"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:245"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:246"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationAttributes.java:247"$1$0$0$8$63$"	public <T> Class<? extends T> getClass(String attributeName) {"
"AnnotationAttributes.java:248"$1$0$0$3$58$"		return getRequiredAttribute(attributeName, Class.class);"
"AnnotationAttributes.java:249"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:250"$0$0$0$0$0$""
"AnnotationAttributes.java:251"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:252"$0$0$0$12$72$"	 * Get the value stored under the specified {@code attributeName} as an"
"AnnotationAttributes.java:253"$0$0$0$4$21$"	 * array of classes."
"AnnotationAttributes.java:254"$0$0$0$13$80$"	 * <p>If the value stored under the specified {@code attributeName} is a class,"
"AnnotationAttributes.java:255"$0$0$0$12$69$"	 * it will be wrapped in a single-element array before returning it."
"AnnotationAttributes.java:256"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:257"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:258"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:259"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:260"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:261"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:262"$1$0$0$5$56$"	public Class<?>[] getClassArray(String attributeName) {"
"AnnotationAttributes.java:263"$1$0$0$3$60$"		return getRequiredAttribute(attributeName, Class[].class);"
"AnnotationAttributes.java:264"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:265"$0$0$0$0$0$""
"AnnotationAttributes.java:266"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:267"$0$0$0$9$67$"	 * Get the {@link AnnotationAttributes} stored under the specified"
"AnnotationAttributes.java:268"$0$0$0$3$26$"	 * {@code attributeName}."
"AnnotationAttributes.java:269"$0$0$0$9$55$"	 * <p>Note: if you expect an actual annotation, invoke"
"AnnotationAttributes.java:270"$1$0$0$5$50$"	 * {@link #getAnnotation(String, Class)} instead."
"AnnotationAttributes.java:271"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:272"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:273"$0$0$0$5$44$"	 * @return the {@code AnnotationAttributes}"
"AnnotationAttributes.java:274"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:275"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:276"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:277"$1$0$0$5$66$"	public AnnotationAttributes getAnnotation(String attributeName) {"
"AnnotationAttributes.java:278"$1$0$0$3$73$"		return getRequiredAttribute(attributeName, AnnotationAttributes.class);"
"AnnotationAttributes.java:279"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:280"$0$0$0$0$0$""
"AnnotationAttributes.java:281"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:282"$0$0$0$11$70$"	 * Get the annotation of type {@code annotationType} stored under the"
"AnnotationAttributes.java:283"$0$0$0$4$36$"	 * specified {@code attributeName}."
"AnnotationAttributes.java:284"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:285"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:286"$0$0$0$10$74$"	 * @param annotationType the expected annotation type; never {@code null}"
"AnnotationAttributes.java:287"$0$0$0$4$26$"	 * @return the annotation"
"AnnotationAttributes.java:288"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:289"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:290"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationAttributes.java:291"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:292"$1$0$0$10$95$"	public <A extends Annotation> A getAnnotation(String attributeName, Class<A> annotationType) {"
"AnnotationAttributes.java:293"$1$0$0$3$61$"		return getRequiredAttribute(attributeName, annotationType);"
"AnnotationAttributes.java:294"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:295"$0$0$0$0$0$""
"AnnotationAttributes.java:296"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:297"$0$0$0$11$76$"	 * Get the array of {@link AnnotationAttributes} stored under the specified"
"AnnotationAttributes.java:298"$0$0$0$3$26$"	 * {@code attributeName}."
"AnnotationAttributes.java:299"$0$0$0$11$71$"	 * <p>If the value stored under the specified {@code attributeName} is"
"AnnotationAttributes.java:300"$0$0$0$11$70$"	 * an instance of {@code AnnotationAttributes}, it will be wrapped in"
"AnnotationAttributes.java:301"$0$0$0$7$47$"	 * a single-element array before returning it."
"AnnotationAttributes.java:302"$0$0$0$11$65$"	 * <p>Note: if you expect an actual array of annotations, invoke"
"AnnotationAttributes.java:303"$1$0$0$5$55$"	 * {@link #getAnnotationArray(String, Class)} instead."
"AnnotationAttributes.java:304"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:305"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:306"$0$0$0$7$53$"	 * @return the array of {@code AnnotationAttributes}"
"AnnotationAttributes.java:307"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:308"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:309"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:310"$1$0$0$5$73$"	public AnnotationAttributes[] getAnnotationArray(String attributeName) {"
"AnnotationAttributes.java:311"$1$0$0$3$75$"		return getRequiredAttribute(attributeName, AnnotationAttributes[].class);"
"AnnotationAttributes.java:312"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:313"$0$0$0$0$0$""
"AnnotationAttributes.java:314"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:315"$0$0$0$12$75$"	 * Get the array of type {@code annotationType} stored under the specified"
"AnnotationAttributes.java:316"$0$0$0$3$26$"	 * {@code attributeName}."
"AnnotationAttributes.java:317"$0$0$0$11$71$"	 * <p>If the value stored under the specified {@code attributeName} is"
"AnnotationAttributes.java:318"$0$0$0$12$71$"	 * an {@code Annotation}, it will be wrapped in a single-element array"
"AnnotationAttributes.java:319"$0$0$0$4$24$"	 * before returning it."
"AnnotationAttributes.java:320"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:321"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:322"$0$0$0$10$74$"	 * @param annotationType the expected annotation type; never {@code null}"
"AnnotationAttributes.java:323"$0$0$0$5$32$"	 * @return the annotation array"
"AnnotationAttributes.java:324"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:325"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:326"$0$0$0$3$14$"	 * @since 4.2"
"AnnotationAttributes.java:327"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:328"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationAttributes.java:329"$1$0$0$10$102$"	public <A extends Annotation> A[] getAnnotationArray(String attributeName, Class<A> annotationType) {"
"AnnotationAttributes.java:330"$0$0$0$5$54$"		Object array = Array.newInstance(annotationType, 0);"
"AnnotationAttributes.java:331"$2$0$0$4$69$"		return (A[]) getRequiredAttribute(attributeName, array.getClass());"
"AnnotationAttributes.java:332"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:333"$0$0$0$0$0$""
"AnnotationAttributes.java:334"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:335"$0$0$0$10$67$"	 * Get the value stored under the specified {@code attributeName},"
"AnnotationAttributes.java:336"$0$0$0$10$59$"	 * ensuring that the value is of the {@code expectedType}."
"AnnotationAttributes.java:337"$0$0$0$12$67$"	 * <p>If the {@code expectedType} is an array and the value stored"
"AnnotationAttributes.java:338"$0$0$0$12$72$"	 * under the specified {@code attributeName} is a single element of the"
"AnnotationAttributes.java:339"$0$0$0$13$73$"	 * component type of the expected array type, the single element will be"
"AnnotationAttributes.java:340"$0$0$0$11$68$"	 * wrapped in a single-element array of the appropriate type before"
"AnnotationAttributes.java:341"$0$0$0$3$17$"	 * returning it."
"AnnotationAttributes.java:342"$1$0$0$10$58$"	 * @param attributeName the name of the attribute to get;"
"AnnotationAttributes.java:343"$0$0$0$6$31$"	 * never {@code null} or empty"
"AnnotationAttributes.java:344"$0$0$0$9$61$"	 * @param expectedType the expected type; never {@code null}"
"AnnotationAttributes.java:345"$0$0$0$4$21$"	 * @return the value"
"AnnotationAttributes.java:346"$0$0$0$10$71$"	 * @throws IllegalArgumentException if the attribute does not exist or"
"AnnotationAttributes.java:347"$0$0$0$9$37$"	 * if it is not of the expected type"
"AnnotationAttributes.java:348"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:349"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationAttributes.java:350"$1$0$0$8$82$"	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {"
"AnnotationAttributes.java:351"$0$0$0$8$77$"		Assert.hasText(attributeName, ""'attributeName' must not be null or empty"");"
"AnnotationAttributes.java:352"$1$0$0$4$36$"		Object value = get(attributeName);"
"AnnotationAttributes.java:353"$0$0$0$2$48$"		assertAttributePresence(attributeName, value);"
"AnnotationAttributes.java:354"$0$0$0$2$43$"		assertNotException(attributeName, value);"
"AnnotationAttributes.java:355"$0$0$0$5$66$"		if (!expectedType.isInstance(value) && expectedType.isArray() &&"
"AnnotationAttributes.java:356"$1$0$0$2$56$"				expectedType.getComponentType().isInstance(value)) {"
"AnnotationAttributes.java:357"$1$0$0$5$72$"			Object array = Array.newInstance(expectedType.getComponentType(), 1);"
"AnnotationAttributes.java:358"$0$0$0$3$30$"			Array.set(array, 0, value);"
"AnnotationAttributes.java:359"$0$0$0$3$17$"			value = array;"
"AnnotationAttributes.java:360"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:361"$0$0$0$3$58$"		assertAttributeType(attributeName, value, expectedType);"
"AnnotationAttributes.java:362"$0$0$0$3$19$"		return (T) value;"
"AnnotationAttributes.java:363"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:364"$0$0$0$0$0$""
"AnnotationAttributes.java:365"$0$0$0$7$84$"	private void assertAttributePresence(String attributeName, Object attributeValue) {"
"AnnotationAttributes.java:366"$0$0$0$4$53$"		Assert.notNull(attributeValue, () -> String.format("
"AnnotationAttributes.java:367"$0$0$0$9$65$"				""Attribute '%s' not found in attributes for annotation [%s]"","
"AnnotationAttributes.java:368"$0$0$0$2$38$"				attributeName, this.displayName));"
"AnnotationAttributes.java:369"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:370"$0$0$0$0$0$""
"AnnotationAttributes.java:371"$0$0$0$7$79$"	private void assertNotException(String attributeName, Object attributeValue) {"
"AnnotationAttributes.java:372"$0$0$0$5$44$"		if (attributeValue instanceof Throwable) {"
"AnnotationAttributes.java:373"$0$0$0$3$52$"			throw new IllegalArgumentException(String.format("
"AnnotationAttributes.java:374"$0$0$0$12$83$"					""Attribute '%s' for annotation [%s] was not resolvable due to exception [%s]"","
"AnnotationAttributes.java:375"$0$0$0$5$83$"					attributeName, this.displayName, attributeValue), (Throwable) attributeValue);"
"AnnotationAttributes.java:376"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:377"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:378"$0$0$0$0$0$""
"AnnotationAttributes.java:379"$0$0$0$9$103$"	private void assertAttributeType(String attributeName, Object attributeValue, Class<?> expectedType) {"
"AnnotationAttributes.java:380"$0$0$0$3$49$"		if (!expectedType.isInstance(attributeValue)) {"
"AnnotationAttributes.java:381"$0$0$0$3$52$"			throw new IllegalArgumentException(String.format("
"AnnotationAttributes.java:382"$0$0$0$15$91$"					""Attribute '%s' is of type %s, but %s was expected in attributes for annotation [%s]"","
"AnnotationAttributes.java:383"$3$0$0$3$92$"					attributeName, attributeValue.getClass().getSimpleName(), expectedType.getSimpleName(),"
"AnnotationAttributes.java:384"$0$0$0$1$24$"					this.displayName));"
"AnnotationAttributes.java:385"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:386"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:387"$0$0$0$0$0$""
"AnnotationAttributes.java:388"$0$0$0$1$10$"	@Override"
"AnnotationAttributes.java:389"$0$0$0$4$27$"	public String toString() {"
"AnnotationAttributes.java:390"$0$0$0$5$70$"		Iterator<Map.Entry<String, Object>> entries = entrySet().iterator();"
"AnnotationAttributes.java:391"$0$0$0$5$44$"		StringBuilder sb = new StringBuilder(""{"");"
"AnnotationAttributes.java:392"$0$0$0$3$29$"		while (entries.hasNext()) {"
"AnnotationAttributes.java:393"$0$0$0$5$52$"			Map.Entry<String, Object> entry = entries.next();"
"AnnotationAttributes.java:394"$1$0$0$1$29$"			sb.append(entry.getKey());"
"AnnotationAttributes.java:395"$0$0$0$1$18$"			sb.append('=');"
"AnnotationAttributes.java:396"$1$0$0$1$46$"			sb.append(valueToString(entry.getValue()));"
"AnnotationAttributes.java:397"$0$0$0$6$44$"			sb.append(entries.hasNext() ? "", "" : """");"
"AnnotationAttributes.java:398"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:399"$0$0$0$1$17$"		sb.append(""}"");"
"AnnotationAttributes.java:400"$0$0$0$2$23$"		return sb.toString();"
"AnnotationAttributes.java:401"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:402"$0$0$0$0$0$""
"AnnotationAttributes.java:403"$0$0$0$5$45$"	private String valueToString(Object value) {"
"AnnotationAttributes.java:404"$0$0$0$5$22$"		if (value == this) {"
"AnnotationAttributes.java:405"$0$0$0$3$23$"			return ""(this Map)"";"
"AnnotationAttributes.java:406"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:407"$0$0$0$5$34$"		if (value instanceof Object[]) {"
"AnnotationAttributes.java:408"$0$0$0$9$81$"			return ""["" + StringUtils.arrayToDelimitedString((Object[]) value, "", "") + ""]"";"
"AnnotationAttributes.java:409"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:410"$0$0$0$2$31$"		return String.valueOf(value);"
"AnnotationAttributes.java:411"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:412"$0$0$0$0$0$""
"AnnotationAttributes.java:413"$0$0$0$0$0$""
"AnnotationAttributes.java:414"$0$0$0$1$4$"	/**"
"AnnotationAttributes.java:415"$0$0$0$11$75$"	 * Return an {@link AnnotationAttributes} instance based on the given map."
"AnnotationAttributes.java:416"$0$0$0$11$73$"	 * <p>If the map is already an {@code AnnotationAttributes} instance, it"
"AnnotationAttributes.java:417"$0$0$0$12$74$"	 * will be cast and returned immediately without creating a new instance."
"AnnotationAttributes.java:418"$0$0$0$13$72$"	 * Otherwise a new instance will be created by passing the supplied map"
"AnnotationAttributes.java:419"$0$0$0$6$58$"	 * to the {@link #AnnotationAttributes(Map)} constructor."
"AnnotationAttributes.java:420"$0$0$0$10$79$"	 * @param map original source of annotation attribute <em>key-value</em> pairs"
"AnnotationAttributes.java:421"$0$0$0$1$4$"	 */"
"AnnotationAttributes.java:422"$0$0$0$1$10$"	@Nullable"
"AnnotationAttributes.java:423"$0$0$0$8$80$"	public static AnnotationAttributes fromMap(@Nullable Map<String, Object> map) {"
"AnnotationAttributes.java:424"$0$0$0$5$20$"		if (map == null) {"
"AnnotationAttributes.java:425"$0$0$0$2$15$"			return null;"
"AnnotationAttributes.java:426"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:427"$0$0$0$5$44$"		if (map instanceof AnnotationAttributes) {"
"AnnotationAttributes.java:428"$0$0$0$3$37$"			return (AnnotationAttributes) map;"
"AnnotationAttributes.java:429"$0$0$0$1$3$"		}"
"AnnotationAttributes.java:430"$0$0$0$3$39$"		return new AnnotationAttributes(map);"
"AnnotationAttributes.java:431"$0$0$0$1$2$"	}"
"AnnotationAttributes.java:432"$0$0$0$0$0$""
"AnnotationAttributes.java:433"$0$0$0$1$1$"}"
"Base64Utils.java:1"$0$0$0$1$2$"/*"
"Base64Utils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"Base64Utils.java:3"$0$0$0$1$2$" *"
"Base64Utils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"Base64Utils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"Base64Utils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"Base64Utils.java:7"$0$0$0$1$2$" *"
"Base64Utils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"Base64Utils.java:9"$0$0$0$1$2$" *"
"Base64Utils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"Base64Utils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"Base64Utils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"Base64Utils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"Base64Utils.java:14"$0$0$0$5$33$" * limitations under the License."
"Base64Utils.java:15"$0$0$0$1$3$" */"
"Base64Utils.java:16"$0$0$0$0$0$""
"Base64Utils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"Base64Utils.java:18"$0$0$0$0$0$""
"Base64Utils.java:19"$0$0$0$2$32$"import java.nio.charset.Charset;"
"Base64Utils.java:20"$0$0$0$2$41$"import java.nio.charset.StandardCharsets;"
"Base64Utils.java:21"$0$0$0$2$24$"import java.util.Base64;"
"Base64Utils.java:22"$0$0$0$0$0$""
"Base64Utils.java:23"$0$0$0$1$3$"/**"
"Base64Utils.java:24"$0$0$0$10$59$" * A simple utility class for Base64 encoding and decoding."
"Base64Utils.java:25"$0$0$0$1$2$" *"
"Base64Utils.java:26"$0$0$0$11$75$" * <p>Adapts to Java 8's {@link java.util.Base64} in a convenience fashion."
"Base64Utils.java:27"$0$0$0$1$2$" *"
"Base64Utils.java:28"$0$0$0$4$26$" * @author Juergen Hoeller"
"Base64Utils.java:29"$0$0$0$4$23$" * @author Gary Russell"
"Base64Utils.java:30"$0$0$0$3$13$" * @since 4.1"
"Base64Utils.java:31"$0$0$0$3$24$" * @see java.util.Base64"
"Base64Utils.java:32"$0$0$0$1$3$" */"
"Base64Utils.java:33"$0$0$0$5$35$"public abstract class Base64Utils {"
"Base64Utils.java:34"$0$0$0$0$0$""
"Base64Utils.java:35"$0$0$0$7$71$"	private static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;"
"Base64Utils.java:36"$0$0$0$0$0$""
"Base64Utils.java:37"$0$0$0$0$0$""
"Base64Utils.java:38"$0$0$0$1$4$"	/**"
"Base64Utils.java:39"$0$0$0$6$39$"	 * Base64-encode the given byte array."
"Base64Utils.java:40"$0$0$0$7$38$"	 * @param src the original byte array"
"Base64Utils.java:41"$0$0$0$6$34$"	 * @return the encoded byte array"
"Base64Utils.java:42"$0$0$0$1$4$"	 */"
"Base64Utils.java:43"$0$0$0$6$42$"	public static byte[] encode(byte[] src) {"
"Base64Utils.java:44"$0$0$0$5$24$"		if (src.length == 0) {"
"Base64Utils.java:45"$0$0$0$2$14$"			return src;"
"Base64Utils.java:46"$0$0$0$1$3$"		}"
"Base64Utils.java:47"$1$0$0$2$41$"		return Base64.getEncoder().encode(src);"
"Base64Utils.java:48"$0$0$0$1$2$"	}"
"Base64Utils.java:49"$0$0$0$0$0$""
"Base64Utils.java:50"$0$0$0$1$4$"	/**"
"Base64Utils.java:51"$0$0$0$6$39$"	 * Base64-decode the given byte array."
"Base64Utils.java:52"$0$0$0$7$37$"	 * @param src the encoded byte array"
"Base64Utils.java:53"$0$0$0$6$35$"	 * @return the original byte array"
"Base64Utils.java:54"$0$0$0$1$4$"	 */"
"Base64Utils.java:55"$0$0$0$6$42$"	public static byte[] decode(byte[] src) {"
"Base64Utils.java:56"$0$0$0$5$24$"		if (src.length == 0) {"
"Base64Utils.java:57"$0$0$0$2$14$"			return src;"
"Base64Utils.java:58"$0$0$0$1$3$"		}"
"Base64Utils.java:59"$1$0$0$2$41$"		return Base64.getDecoder().decode(src);"
"Base64Utils.java:60"$0$0$0$1$2$"	}"
"Base64Utils.java:61"$0$0$0$0$0$""
"Base64Utils.java:62"$0$0$0$1$4$"	/**"
"Base64Utils.java:63"$0$0$0$10$57$"	 * Base64-encode the given byte array using the RFC 4648"
"Base64Utils.java:64"$0$0$0$6$37$"	 * ""URL and Filename Safe Alphabet""."
"Base64Utils.java:65"$0$0$0$7$38$"	 * @param src the original byte array"
"Base64Utils.java:66"$0$0$0$6$34$"	 * @return the encoded byte array"
"Base64Utils.java:67"$0$0$0$3$16$"	 * @since 4.2.4"
"Base64Utils.java:68"$0$0$0$1$4$"	 */"
"Base64Utils.java:69"$0$0$0$6$49$"	public static byte[] encodeUrlSafe(byte[] src) {"
"Base64Utils.java:70"$0$0$0$5$24$"		if (src.length == 0) {"
"Base64Utils.java:71"$0$0$0$2$14$"			return src;"
"Base64Utils.java:72"$0$0$0$1$3$"		}"
"Base64Utils.java:73"$1$0$0$2$44$"		return Base64.getUrlEncoder().encode(src);"
"Base64Utils.java:74"$0$0$0$1$2$"	}"
"Base64Utils.java:75"$0$0$0$0$0$""
"Base64Utils.java:76"$0$0$0$1$4$"	/**"
"Base64Utils.java:77"$0$0$0$10$57$"	 * Base64-decode the given byte array using the RFC 4648"
"Base64Utils.java:78"$0$0$0$6$37$"	 * ""URL and Filename Safe Alphabet""."
"Base64Utils.java:79"$0$0$0$7$37$"	 * @param src the encoded byte array"
"Base64Utils.java:80"$0$0$0$6$35$"	 * @return the original byte array"
"Base64Utils.java:81"$0$0$0$3$16$"	 * @since 4.2.4"
"Base64Utils.java:82"$0$0$0$1$4$"	 */"
"Base64Utils.java:83"$0$0$0$6$49$"	public static byte[] decodeUrlSafe(byte[] src) {"
"Base64Utils.java:84"$0$0$0$5$24$"		if (src.length == 0) {"
"Base64Utils.java:85"$0$0$0$2$14$"			return src;"
"Base64Utils.java:86"$0$0$0$1$3$"		}"
"Base64Utils.java:87"$1$0$0$2$44$"		return Base64.getUrlDecoder().decode(src);"
"Base64Utils.java:88"$0$0$0$1$2$"	}"
"Base64Utils.java:89"$0$0$0$0$0$""
"Base64Utils.java:90"$0$0$0$1$4$"	/**"
"Base64Utils.java:91"$0$0$0$9$51$"	 * Base64-encode the given byte array to a String."
"Base64Utils.java:92"$0$0$0$7$38$"	 * @param src the original byte array"
"Base64Utils.java:93"$0$0$0$10$52$"	 * @return the encoded byte array as a UTF-8 String"
"Base64Utils.java:94"$0$0$0$1$4$"	 */"
"Base64Utils.java:95"$0$0$0$6$50$"	public static String encodeToString(byte[] src) {"
"Base64Utils.java:96"$0$0$0$5$24$"		if (src.length == 0) {"
"Base64Utils.java:97"$0$0$0$2$13$"			return """";"
"Base64Utils.java:98"$0$0$0$1$3$"		}"
"Base64Utils.java:99"$0$0$0$4$50$"		return new String(encode(src), DEFAULT_CHARSET);"
"Base64Utils.java:100"$0$0$0$1$2$"	}"
"Base64Utils.java:101"$0$0$0$0$0$""
"Base64Utils.java:102"$0$0$0$1$4$"	/**"
"Base64Utils.java:103"$0$0$0$10$60$"	 * Base64-decode the given byte array from an UTF-8 String."
"Base64Utils.java:104"$0$0$0$7$39$"	 * @param src the encoded UTF-8 String"
"Base64Utils.java:105"$0$0$0$6$35$"	 * @return the original byte array"
"Base64Utils.java:106"$0$0$0$1$4$"	 */"
"Base64Utils.java:107"$0$0$0$6$52$"	public static byte[] decodeFromString(String src) {"
"Base64Utils.java:108"$0$0$0$3$22$"		if (src.isEmpty()) {"
"Base64Utils.java:109"$0$0$0$3$22$"			return new byte[0];"
"Base64Utils.java:110"$0$0$0$1$3$"		}"
"Base64Utils.java:111"$1$0$0$2$47$"		return decode(src.getBytes(DEFAULT_CHARSET));"
"Base64Utils.java:112"$0$0$0$1$2$"	}"
"Base64Utils.java:113"$0$0$0$0$0$""
"Base64Utils.java:114"$0$0$0$1$4$"	/**"
"Base64Utils.java:115"$0$0$0$13$69$"	 * Base64-encode the given byte array to a String using the RFC 4648"
"Base64Utils.java:116"$0$0$0$6$37$"	 * ""URL and Filename Safe Alphabet""."
"Base64Utils.java:117"$0$0$0$7$38$"	 * @param src the original byte array"
"Base64Utils.java:118"$0$0$0$10$52$"	 * @return the encoded byte array as a UTF-8 String"
"Base64Utils.java:119"$0$0$0$1$4$"	 */"
"Base64Utils.java:120"$0$0$0$6$57$"	public static String encodeToUrlSafeString(byte[] src) {"
"Base64Utils.java:121"$0$0$0$4$57$"		return new String(encodeUrlSafe(src), DEFAULT_CHARSET);"
"Base64Utils.java:122"$0$0$0$1$2$"	}"
"Base64Utils.java:123"$0$0$0$0$0$""
"Base64Utils.java:124"$0$0$0$1$4$"	/**"
"Base64Utils.java:125"$0$0$0$14$78$"	 * Base64-decode the given byte array from an UTF-8 String using the RFC 4648"
"Base64Utils.java:126"$0$0$0$6$37$"	 * ""URL and Filename Safe Alphabet""."
"Base64Utils.java:127"$0$0$0$7$39$"	 * @param src the encoded UTF-8 String"
"Base64Utils.java:128"$0$0$0$6$35$"	 * @return the original byte array"
"Base64Utils.java:129"$0$0$0$1$4$"	 */"
"Base64Utils.java:130"$0$0$0$6$59$"	public static byte[] decodeFromUrlSafeString(String src) {"
"Base64Utils.java:131"$1$0$0$2$54$"		return decodeUrlSafe(src.getBytes(DEFAULT_CHARSET));"
"Base64Utils.java:132"$0$0$0$1$2$"	}"
"Base64Utils.java:133"$0$0$0$0$0$""
"Base64Utils.java:134"$0$0$0$1$1$"}"
"AnnotationsScanner.java:1"$0$0$0$1$2$"/*"
"AnnotationsScanner.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AnnotationsScanner.java:3"$0$0$0$1$2$" *"
"AnnotationsScanner.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationsScanner.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationsScanner.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationsScanner.java:7"$0$0$0$1$2$" *"
"AnnotationsScanner.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationsScanner.java:9"$0$0$0$1$2$" *"
"AnnotationsScanner.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationsScanner.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationsScanner.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationsScanner.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationsScanner.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationsScanner.java:15"$0$0$0$1$3$" */"
"AnnotationsScanner.java:16"$0$0$0$0$0$""
"AnnotationsScanner.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AnnotationsScanner.java:18"$0$0$0$0$0$""
"AnnotationsScanner.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"AnnotationsScanner.java:20"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"AnnotationsScanner.java:21"$0$0$0$2$32$"import java.lang.reflect.Member;"
"AnnotationsScanner.java:22"$0$0$0$2$32$"import java.lang.reflect.Method;"
"AnnotationsScanner.java:23"$0$0$0$2$34$"import java.lang.reflect.Modifier;"
"AnnotationsScanner.java:24"$0$0$0$2$24$"import java.util.Arrays;"
"AnnotationsScanner.java:25"$0$0$0$2$21$"import java.util.Map;"
"AnnotationsScanner.java:26"$0$0$0$2$38$"import java.util.function.BiPredicate;"
"AnnotationsScanner.java:27"$0$0$0$0$0$""
"AnnotationsScanner.java:28"$0$0$0$2$53$"import org.springframework.core.BridgeMethodResolver;"
"AnnotationsScanner.java:29"$0$0$0$2$40$"import org.springframework.core.Ordered;"
"AnnotationsScanner.java:30"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"AnnotationsScanner.java:31"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"AnnotationsScanner.java:32"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AnnotationsScanner.java:33"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"AnnotationsScanner.java:34"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"AnnotationsScanner.java:35"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"AnnotationsScanner.java:36"$0$0$0$0$0$""
"AnnotationsScanner.java:37"$0$0$0$1$3$"/**"
"AnnotationsScanner.java:38"$0$0$0$13$79$" * Scanner to search for relevant annotations in the annotation hierarchy of an"
"AnnotationsScanner.java:39"$0$0$0$3$28$" * {@link AnnotatedElement}."
"AnnotationsScanner.java:40"$0$0$0$1$2$" *"
"AnnotationsScanner.java:41"$0$0$0$4$23$" * @author Phillip Webb"
"AnnotationsScanner.java:42"$0$0$0$4$22$" * @author Sam Brannen"
"AnnotationsScanner.java:43"$0$0$0$3$13$" * @since 5.2"
"AnnotationsScanner.java:44"$0$0$0$3$28$" * @see AnnotationsProcessor"
"AnnotationsScanner.java:45"$0$0$0$1$3$" */"
"AnnotationsScanner.java:46"$0$0$0$4$35$"abstract class AnnotationsScanner {"
"AnnotationsScanner.java:47"$0$0$0$0$0$""
"AnnotationsScanner.java:48"$0$0$0$7$55$"	private static final Annotation[] NO_ANNOTATIONS = {};"
"AnnotationsScanner.java:49"$0$0$0$0$0$""
"AnnotationsScanner.java:50"$0$0$0$7$47$"	private static final Method[] NO_METHODS = {};"
"AnnotationsScanner.java:51"$0$0$0$0$0$""
"AnnotationsScanner.java:52"$0$0$0$0$0$""
"AnnotationsScanner.java:53"$0$0$0$7$83$"	private static final Map<AnnotatedElement, Annotation[]> declaredAnnotationCache ="
"AnnotationsScanner.java:54"$0$0$0$2$41$"			new ConcurrentReferenceHashMap<>(256);"
"AnnotationsScanner.java:55"$0$0$0$0$0$""
"AnnotationsScanner.java:56"$0$0$0$7$68$"	private static final Map<Class<?>, Method[]> baseTypeMethodsCache ="
"AnnotationsScanner.java:57"$0$0$0$2$41$"			new ConcurrentReferenceHashMap<>(256);"
"AnnotationsScanner.java:58"$0$0$0$0$0$""
"AnnotationsScanner.java:59"$0$0$0$0$0$""
"AnnotationsScanner.java:60"$0$0$0$3$31$"	private AnnotationsScanner() {"
"AnnotationsScanner.java:61"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:62"$0$0$0$0$0$""
"AnnotationsScanner.java:63"$0$0$0$0$0$""
"AnnotationsScanner.java:64"$0$0$0$1$4$"	/**"
"AnnotationsScanner.java:65"$0$0$0$12$76$"	 * Scan the hierarchy of the specified element for relevant annotations and"
"AnnotationsScanner.java:66"$0$0$0$6$35$"	 * call the processor as required."
"AnnotationsScanner.java:67"$0$0$0$14$77$"	 * @param context an optional context object that will be passed back to the"
"AnnotationsScanner.java:68"$0$0$0$2$13$"	 * processor"
"AnnotationsScanner.java:69"$0$0$0$8$44$"	 * @param source the source element to scan"
"AnnotationsScanner.java:70"$0$0$0$8$52$"	 * @param searchStrategy the search strategy to use"
"AnnotationsScanner.java:71"$0$0$0$9$64$"	 * @param processor the processor that receives the annotations"
"AnnotationsScanner.java:72"$0$0$0$7$69$"	 * @return the result of {@link AnnotationsProcessor#finish(Object)}"
"AnnotationsScanner.java:73"$0$0$0$1$4$"	 */"
"AnnotationsScanner.java:74"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:75"$0$0$0$10$88$"	static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,"
"AnnotationsScanner.java:76"$0$0$0$4$42$"			AnnotationsProcessor<C, R> processor) {"
"AnnotationsScanner.java:77"$0$0$0$0$0$""
"AnnotationsScanner.java:78"$0$0$0$6$64$"		return scan(context, source, searchStrategy, processor, null);"
"AnnotationsScanner.java:79"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:80"$0$0$0$0$0$""
"AnnotationsScanner.java:81"$0$0$0$1$4$"	/**"
"AnnotationsScanner.java:82"$0$0$0$12$76$"	 * Scan the hierarchy of the specified element for relevant annotations and"
"AnnotationsScanner.java:83"$0$0$0$6$35$"	 * call the processor as required."
"AnnotationsScanner.java:84"$0$0$0$14$77$"	 * @param context an optional context object that will be passed back to the"
"AnnotationsScanner.java:85"$0$0$0$2$13$"	 * processor"
"AnnotationsScanner.java:86"$0$0$0$8$44$"	 * @param source the source element to scan"
"AnnotationsScanner.java:87"$0$0$0$8$52$"	 * @param searchStrategy the search strategy to use"
"AnnotationsScanner.java:88"$0$0$0$9$64$"	 * @param processor the processor that receives the annotations"
"AnnotationsScanner.java:89"$0$0$0$13$77$"	 * @param classFilter an optional filter that can be used to entirely filter"
"AnnotationsScanner.java:90"$0$0$0$8$43$"	 * out a specific class from the hierarchy"
"AnnotationsScanner.java:91"$0$0$0$7$69$"	 * @return the result of {@link AnnotationsProcessor#finish(Object)}"
"AnnotationsScanner.java:92"$0$0$0$1$4$"	 */"
"AnnotationsScanner.java:93"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:94"$0$0$0$10$88$"	static <C, R> R scan(C context, AnnotatedElement source, SearchStrategy searchStrategy,"
"AnnotationsScanner.java:95"$0$0$0$8$90$"			AnnotationsProcessor<C, R> processor, @Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:96"$0$0$0$0$0$""
"AnnotationsScanner.java:97"$0$0$0$8$78$"		R result = process(context, source, searchStrategy, processor, classFilter);"
"AnnotationsScanner.java:98"$0$0$0$2$34$"		return processor.finish(result);"
"AnnotationsScanner.java:99"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:100"$0$0$0$0$0$""
"AnnotationsScanner.java:101"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:102"$0$0$0$9$68$"	private static <C, R> R process(C context, AnnotatedElement source,"
"AnnotationsScanner.java:103"$0$0$0$5$71$"			SearchStrategy searchStrategy, AnnotationsProcessor<C, R> processor,"
"AnnotationsScanner.java:104"$0$0$0$5$52$"			@Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:105"$0$0$0$0$0$""
"AnnotationsScanner.java:106"$0$0$0$5$32$"		if (source instanceof Class) {"
"AnnotationsScanner.java:107"$0$0$0$7$91$"			return processClass(context, (Class<?>) source, searchStrategy, processor, classFilter);"
"AnnotationsScanner.java:108"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:109"$0$0$0$5$33$"		if (source instanceof Method) {"
"AnnotationsScanner.java:110"$0$0$0$7$90$"			return processMethod(context, (Method) source, searchStrategy, processor, classFilter);"
"AnnotationsScanner.java:111"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:112"$0$0$0$5$65$"		return processElement(context, source, processor, classFilter);"
"AnnotationsScanner.java:113"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:114"$0$0$0$0$0$""
"AnnotationsScanner.java:115"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:116"$0$0$0$9$65$"	private static <C, R> R processClass(C context, Class<?> source,"
"AnnotationsScanner.java:117"$0$0$0$5$71$"			SearchStrategy searchStrategy, AnnotationsProcessor<C, R> processor,"
"AnnotationsScanner.java:118"$0$0$0$5$52$"			@Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:119"$0$0$0$0$0$""
"AnnotationsScanner.java:120"$0$0$0$3$27$"		switch (searchStrategy) {"
"AnnotationsScanner.java:121"$0$0$0$2$15$"			case DIRECT:"
"AnnotationsScanner.java:122"$0$0$0$5$67$"				return processElement(context, source, processor, classFilter);"
"AnnotationsScanner.java:123"$0$0$0$2$30$"			case INHERITED_ANNOTATIONS:"
"AnnotationsScanner.java:124"$0$0$0$6$101$"				return processClassInheritedAnnotations(context, source, searchStrategy, processor, classFilter);"
"AnnotationsScanner.java:125"$0$0$0$2$19$"			case SUPERCLASS:"
"AnnotationsScanner.java:126"$0$0$0$7$88$"				return processClassHierarchy(context, source, processor, classFilter, false, false);"
"AnnotationsScanner.java:127"$0$0$0$2$23$"			case TYPE_HIERARCHY:"
"AnnotationsScanner.java:128"$0$0$0$7$87$"				return processClassHierarchy(context, source, processor, classFilter, true, false);"
"AnnotationsScanner.java:129"$0$0$0$2$45$"			case TYPE_HIERARCHY_AND_ENCLOSING_CLASSES:"
"AnnotationsScanner.java:130"$0$0$0$7$86$"				return processClassHierarchy(context, source, processor, classFilter, true, true);"
"AnnotationsScanner.java:131"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:132"$0$0$0$8$83$"		throw new IllegalStateException(""Unsupported search strategy "" + searchStrategy);"
"AnnotationsScanner.java:133"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:134"$0$0$0$0$0$""
"AnnotationsScanner.java:135"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:136"$0$0$0$9$85$"	private static <C, R> R processClassInheritedAnnotations(C context, Class<?> source,"
"AnnotationsScanner.java:137"$0$0$0$10$121$"			SearchStrategy searchStrategy, AnnotationsProcessor<C, R> processor, @Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:138"$0$0$0$0$0$""
"AnnotationsScanner.java:139"$0$0$0$2$7$"		try {"
"AnnotationsScanner.java:140"$0$0$0$4$52$"			if (isWithoutHierarchy(source, searchStrategy)) {"
"AnnotationsScanner.java:141"$0$0$0$5$67$"				return processElement(context, source, processor, classFilter);"
"AnnotationsScanner.java:142"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:143"$0$0$0$4$32$"			Annotation[] relevant = null;"
"AnnotationsScanner.java:144"$0$0$0$4$37$"			int remaining = Integer.MAX_VALUE;"
"AnnotationsScanner.java:145"$0$0$0$4$26$"			int aggregateIndex = 0;"
"AnnotationsScanner.java:146"$0$0$0$4$26$"			Class<?> root = source;"
"AnnotationsScanner.java:147"$0$0$0$13$70$"			while (source != null && source != Object.class && remaining > 0 &&"
"AnnotationsScanner.java:148"$0$0$0$2$44$"					!hasPlainJavaAnnotationsOnly(source)) {"
"AnnotationsScanner.java:149"$0$0$0$5$66$"				R result = processor.doWithAggregate(context, aggregateIndex);"
"AnnotationsScanner.java:150"$0$0$0$5$25$"				if (result != null) {"
"AnnotationsScanner.java:151"$0$0$0$2$19$"					return result;"
"AnnotationsScanner.java:152"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:153"$0$0$0$5$51$"				if (isFiltered(source, context, classFilter)) {"
"AnnotationsScanner.java:154"$0$0$0$1$14$"					continue;"
"AnnotationsScanner.java:155"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:156"$0$0$0$3$38$"				Annotation[] declaredAnnotations ="
"AnnotationsScanner.java:157"$1$0$0$4$65$"						getDeclaredAnnotations(context, source, classFilter, true);"
"AnnotationsScanner.java:158"$0$0$0$9$61$"				if (relevant == null && declaredAnnotations.length > 0) {"
"AnnotationsScanner.java:159"$1$0$0$3$38$"					relevant = root.getAnnotations();"
"AnnotationsScanner.java:160"$0$0$0$3$33$"					remaining = relevant.length;"
"AnnotationsScanner.java:161"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:162"$0$0$0$10$58$"				for (int i = 0; i < declaredAnnotations.length; i++) {"
"AnnotationsScanner.java:163"$0$0$0$5$42$"					if (declaredAnnotations[i] != null) {"
"AnnotationsScanner.java:164"$0$0$0$4$33$"						boolean isRelevant = false;"
"AnnotationsScanner.java:165"$0$0$0$10$85$"						for (int relevantIndex = 0; relevantIndex < relevant.length; relevantIndex++) {"
"AnnotationsScanner.java:166"$0$0$0$5$45$"							if (relevant[relevantIndex] != null &&"
"AnnotationsScanner.java:167"$0$0$0$4$95$"									declaredAnnotations[i].annotationType() == relevant[relevantIndex].annotationType()) {"
"AnnotationsScanner.java:168"$0$0$0$3$26$"								isRelevant = true;"
"AnnotationsScanner.java:169"$0$0$0$3$39$"								relevant[relevantIndex] = null;"
"AnnotationsScanner.java:170"$0$0$0$1$20$"								remaining--;"
"AnnotationsScanner.java:171"$0$0$0$1$14$"								break;"
"AnnotationsScanner.java:172"$0$0$0$1$8$"							}"
"AnnotationsScanner.java:173"$0$0$0$1$7$"						}"
"AnnotationsScanner.java:174"$0$0$0$3$24$"						if (!isRelevant) {"
"AnnotationsScanner.java:175"$0$0$0$3$37$"							declaredAnnotations[i] = null;"
"AnnotationsScanner.java:176"$0$0$0$1$7$"						}"
"AnnotationsScanner.java:177"$0$0$0$1$6$"					}"
"AnnotationsScanner.java:178"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:179"$0$0$0$6$95$"				result = processor.doWithAnnotations(context, aggregateIndex, source, declaredAnnotations);"
"AnnotationsScanner.java:180"$0$0$0$5$25$"				if (result != null) {"
"AnnotationsScanner.java:181"$0$0$0$2$19$"					return result;"
"AnnotationsScanner.java:182"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:183"$1$0$0$3$36$"				source = source.getSuperclass();"
"AnnotationsScanner.java:184"$0$0$0$1$21$"				aggregateIndex++;"
"AnnotationsScanner.java:185"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:186"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:187"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationsScanner.java:188"$0$0$0$2$58$"			AnnotationUtils.handleIntrospectionFailure(source, ex);"
"AnnotationsScanner.java:189"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:190"$0$0$0$2$14$"		return null;"
"AnnotationsScanner.java:191"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:192"$0$0$0$0$0$""
"AnnotationsScanner.java:193"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:194"$0$0$0$9$74$"	private static <C, R> R processClassHierarchy(C context, Class<?> source,"
"AnnotationsScanner.java:195"$0$0$0$7$88$"			AnnotationsProcessor<C, R> processor, @Nullable BiPredicate<C, Class<?>> classFilter,"
"AnnotationsScanner.java:196"$0$0$0$5$57$"			boolean includeInterfaces, boolean includeEnclosing) {"
"AnnotationsScanner.java:197"$0$0$0$0$0$""
"AnnotationsScanner.java:198"$0$0$0$7$73$"		return processClassHierarchy(context, new int[] {0}, source, processor,"
"AnnotationsScanner.java:199"$0$0$0$3$54$"				classFilter, includeInterfaces, includeEnclosing);"
"AnnotationsScanner.java:200"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:201"$0$0$0$0$0$""
"AnnotationsScanner.java:202"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:203"$0$0$0$11$96$"	private static <C, R> R processClassHierarchy(C context, int[] aggregateIndex, Class<?> source,"
"AnnotationsScanner.java:204"$0$0$0$7$88$"			AnnotationsProcessor<C, R> processor, @Nullable BiPredicate<C, Class<?>> classFilter,"
"AnnotationsScanner.java:205"$0$0$0$5$57$"			boolean includeInterfaces, boolean includeEnclosing) {"
"AnnotationsScanner.java:206"$0$0$0$0$0$""
"AnnotationsScanner.java:207"$0$0$0$2$7$"		try {"
"AnnotationsScanner.java:208"$0$0$0$5$68$"			R result = processor.doWithAggregate(context, aggregateIndex[0]);"
"AnnotationsScanner.java:209"$0$0$0$5$24$"			if (result != null) {"
"AnnotationsScanner.java:210"$0$0$0$2$18$"				return result;"
"AnnotationsScanner.java:211"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:212"$0$0$0$3$45$"			if (hasPlainJavaAnnotationsOnly(source)) {"
"AnnotationsScanner.java:213"$0$0$0$2$16$"				return null;"
"AnnotationsScanner.java:214"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:215"$1$0$0$7$90$"			Annotation[] annotations = getDeclaredAnnotations(context, source, classFilter, false);"
"AnnotationsScanner.java:216"$0$0$0$6$89$"			result = processor.doWithAnnotations(context, aggregateIndex[0], source, annotations);"
"AnnotationsScanner.java:217"$0$0$0$5$24$"			if (result != null) {"
"AnnotationsScanner.java:218"$0$0$0$2$18$"				return result;"
"AnnotationsScanner.java:219"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:220"$0$0$0$1$23$"			aggregateIndex[0]++;"
"AnnotationsScanner.java:221"$0$0$0$3$27$"			if (includeInterfaces) {"
"AnnotationsScanner.java:222"$1$0$0$6$59$"				for (Class<?> interfaceType : source.getInterfaces()) {"
"AnnotationsScanner.java:223"$0$0$0$5$72$"					R interfacesResult = processClassHierarchy(context, aggregateIndex,"
"AnnotationsScanner.java:224"$0$0$0$5$69$"						interfaceType, processor, classFilter, true, includeEnclosing);"
"AnnotationsScanner.java:225"$0$0$0$5$36$"					if (interfacesResult != null) {"
"AnnotationsScanner.java:226"$0$0$0$2$30$"						return interfacesResult;"
"AnnotationsScanner.java:227"$0$0$0$1$6$"					}"
"AnnotationsScanner.java:228"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:229"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:230"$1$0$0$4$48$"			Class<?> superclass = source.getSuperclass();"
"AnnotationsScanner.java:231"$0$0$0$9$58$"			if (superclass != Object.class && superclass != null) {"
"AnnotationsScanner.java:232"$0$0$0$5$71$"				R superclassResult = processClassHierarchy(context, aggregateIndex,"
"AnnotationsScanner.java:233"$0$0$0$5$78$"					superclass, processor, classFilter, includeInterfaces, includeEnclosing);"
"AnnotationsScanner.java:234"$0$0$0$5$35$"				if (superclassResult != null) {"
"AnnotationsScanner.java:235"$0$0$0$2$29$"					return superclassResult;"
"AnnotationsScanner.java:236"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:237"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:238"$0$0$0$3$26$"			if (includeEnclosing) {"
"AnnotationsScanner.java:239"$0$0$1$12$72$"				// Since merely attempting to load the enclosing class may result in"
"AnnotationsScanner.java:240"$0$0$1$11$71$"				// automatic loading of sibling nested classes that in turn results"
"AnnotationsScanner.java:241"$0$0$1$11$74$"				// in an exception such as NoClassDefFoundError, we wrap the following"
"AnnotationsScanner.java:242"$0$0$1$12$72$"				// in its own dedicated try-catch block in order not to preemptively"
"AnnotationsScanner.java:243"$0$0$1$6$44$"				// halt the annotation scanning process."
"AnnotationsScanner.java:244"$0$0$0$2$9$"				try {"
"AnnotationsScanner.java:245"$1$0$0$4$58$"					Class<?> enclosingClass = source.getEnclosingClass();"
"AnnotationsScanner.java:246"$0$0$0$5$34$"					if (enclosingClass != null) {"
"AnnotationsScanner.java:247"$0$0$0$5$72$"						R enclosingResult = processClassHierarchy(context, aggregateIndex,"
"AnnotationsScanner.java:248"$0$0$0$5$72$"							enclosingClass, processor, classFilter, includeInterfaces, true);"
"AnnotationsScanner.java:249"$0$0$0$5$36$"						if (enclosingResult != null) {"
"AnnotationsScanner.java:250"$0$0$0$2$30$"							return enclosingResult;"
"AnnotationsScanner.java:251"$0$0$0$1$7$"						}"
"AnnotationsScanner.java:252"$0$0$0$1$6$"					}"
"AnnotationsScanner.java:253"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:254"$0$0$0$4$26$"				catch (Throwable ex) {"
"AnnotationsScanner.java:255"$0$0$0$2$60$"					AnnotationUtils.handleIntrospectionFailure(source, ex);"
"AnnotationsScanner.java:256"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:257"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:258"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:259"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationsScanner.java:260"$0$0$0$2$58$"			AnnotationUtils.handleIntrospectionFailure(source, ex);"
"AnnotationsScanner.java:261"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:262"$0$0$0$2$14$"		return null;"
"AnnotationsScanner.java:263"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:264"$0$0$0$0$0$""
"AnnotationsScanner.java:265"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:266"$0$0$0$9$64$"	private static <C, R> R processMethod(C context, Method source,"
"AnnotationsScanner.java:267"$0$0$0$5$71$"			SearchStrategy searchStrategy, AnnotationsProcessor<C, R> processor,"
"AnnotationsScanner.java:268"$0$0$0$5$52$"			@Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:269"$0$0$0$0$0$""
"AnnotationsScanner.java:270"$0$0$0$3$27$"		switch (searchStrategy) {"
"AnnotationsScanner.java:271"$0$0$0$2$15$"			case DIRECT:"
"AnnotationsScanner.java:272"$0$0$0$2$30$"			case INHERITED_ANNOTATIONS:"
"AnnotationsScanner.java:273"$0$0$0$5$86$"				return processMethodInheritedAnnotations(context, source, processor, classFilter);"
"AnnotationsScanner.java:274"$0$0$0$2$19$"			case SUPERCLASS:"
"AnnotationsScanner.java:275"$1$0$0$6$85$"				return processMethodHierarchy(context, new int[] {0}, source.getDeclaringClass(),"
"AnnotationsScanner.java:276"$0$0$0$4$45$"						processor, classFilter, source, false);"
"AnnotationsScanner.java:277"$0$0$0$2$23$"			case TYPE_HIERARCHY:"
"AnnotationsScanner.java:278"$0$0$0$2$45$"			case TYPE_HIERARCHY_AND_ENCLOSING_CLASSES:"
"AnnotationsScanner.java:279"$1$0$0$6$85$"				return processMethodHierarchy(context, new int[] {0}, source.getDeclaringClass(),"
"AnnotationsScanner.java:280"$0$0$0$4$44$"						processor, classFilter, source, true);"
"AnnotationsScanner.java:281"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:282"$0$0$0$8$83$"		throw new IllegalStateException(""Unsupported search strategy "" + searchStrategy);"
"AnnotationsScanner.java:283"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:284"$0$0$0$0$0$""
"AnnotationsScanner.java:285"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:286"$0$0$0$9$84$"	private static <C, R> R processMethodInheritedAnnotations(C context, Method source,"
"AnnotationsScanner.java:287"$0$0$0$8$90$"			AnnotationsProcessor<C, R> processor, @Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:288"$0$0$0$0$0$""
"AnnotationsScanner.java:289"$0$0$0$2$7$"		try {"
"AnnotationsScanner.java:290"$0$0$0$5$52$"			R result = processor.doWithAggregate(context, 0);"
"AnnotationsScanner.java:291"$0$0$0$7$36$"			return (result != null ? result :"
"AnnotationsScanner.java:292"$0$0$0$5$74$"				processMethodAnnotations(context, 0, source, processor, classFilter));"
"AnnotationsScanner.java:293"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:294"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationsScanner.java:295"$0$0$0$2$58$"			AnnotationUtils.handleIntrospectionFailure(source, ex);"
"AnnotationsScanner.java:296"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:297"$0$0$0$2$14$"		return null;"
"AnnotationsScanner.java:298"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:299"$0$0$0$0$0$""
"AnnotationsScanner.java:300"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:301"$0$0$0$9$80$"	private static <C, R> R processMethodHierarchy(C context, int[] aggregateIndex,"
"AnnotationsScanner.java:302"$0$0$0$5$62$"			Class<?> sourceClass, AnnotationsProcessor<C, R> processor,"
"AnnotationsScanner.java:303"$0$0$0$6$69$"			@Nullable BiPredicate<C, Class<?>> classFilter, Method rootMethod,"
"AnnotationsScanner.java:304"$0$0$0$3$31$"			boolean includeInterfaces) {"
"AnnotationsScanner.java:305"$0$0$0$0$0$""
"AnnotationsScanner.java:306"$0$0$0$2$7$"		try {"
"AnnotationsScanner.java:307"$0$0$0$5$68$"			R result = processor.doWithAggregate(context, aggregateIndex[0]);"
"AnnotationsScanner.java:308"$0$0$0$5$24$"			if (result != null) {"
"AnnotationsScanner.java:309"$0$0$0$2$18$"				return result;"
"AnnotationsScanner.java:310"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:311"$0$0$0$3$50$"			if (hasPlainJavaAnnotationsOnly(sourceClass)) {"
"AnnotationsScanner.java:312"$0$0$0$2$16$"				return null;"
"AnnotationsScanner.java:313"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:314"$0$0$0$4$35$"			boolean calledProcessor = false;"
"AnnotationsScanner.java:315"$1$0$0$5$55$"			if (sourceClass == rootMethod.getDeclaringClass()) {"
"AnnotationsScanner.java:316"$0$0$0$4$65$"				result = processMethodAnnotations(context, aggregateIndex[0],"
"AnnotationsScanner.java:317"$0$0$0$3$41$"					rootMethod, processor, classFilter);"
"AnnotationsScanner.java:318"$0$0$0$3$27$"				calledProcessor = true;"
"AnnotationsScanner.java:319"$0$0$0$5$25$"				if (result != null) {"
"AnnotationsScanner.java:320"$0$0$0$2$19$"					return result;"
"AnnotationsScanner.java:321"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:322"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:323"$0$0$0$2$9$"			else {"
"AnnotationsScanner.java:324"$1$0$0$8$90$"				for (Method candidateMethod : getBaseTypeMethods(context, sourceClass, classFilter)) {"
"AnnotationsScanner.java:325"$0$0$0$8$78$"					if (candidateMethod != null && isOverride(rootMethod, candidateMethod)) {"
"AnnotationsScanner.java:326"$0$0$0$4$67$"						result = processMethodAnnotations(context, aggregateIndex[0],"
"AnnotationsScanner.java:327"$0$0$0$3$48$"							candidateMethod, processor, classFilter);"
"AnnotationsScanner.java:328"$0$0$0$3$29$"						calledProcessor = true;"
"AnnotationsScanner.java:329"$0$0$0$5$27$"						if (result != null) {"
"AnnotationsScanner.java:330"$0$0$0$2$21$"							return result;"
"AnnotationsScanner.java:331"$0$0$0$1$7$"						}"
"AnnotationsScanner.java:332"$0$0$0$1$6$"					}"
"AnnotationsScanner.java:333"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:334"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:335"$1$0$0$3$55$"			if (Modifier.isPrivate(rootMethod.getModifiers())) {"
"AnnotationsScanner.java:336"$0$0$0$2$16$"				return null;"
"AnnotationsScanner.java:337"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:338"$0$0$0$3$25$"			if (calledProcessor) {"
"AnnotationsScanner.java:339"$0$0$0$1$24$"				aggregateIndex[0]++;"
"AnnotationsScanner.java:340"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:341"$0$0$0$3$27$"			if (includeInterfaces) {"
"AnnotationsScanner.java:342"$1$0$0$6$64$"				for (Class<?> interfaceType : sourceClass.getInterfaces()) {"
"AnnotationsScanner.java:343"$0$0$0$5$73$"					R interfacesResult = processMethodHierarchy(context, aggregateIndex,"
"AnnotationsScanner.java:344"$0$0$0$5$63$"						interfaceType, processor, classFilter, rootMethod, true);"
"AnnotationsScanner.java:345"$0$0$0$5$36$"					if (interfacesResult != null) {"
"AnnotationsScanner.java:346"$0$0$0$2$30$"						return interfacesResult;"
"AnnotationsScanner.java:347"$0$0$0$1$6$"					}"
"AnnotationsScanner.java:348"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:349"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:350"$1$0$0$4$53$"			Class<?> superclass = sourceClass.getSuperclass();"
"AnnotationsScanner.java:351"$0$0$0$9$58$"			if (superclass != Object.class && superclass != null) {"
"AnnotationsScanner.java:352"$0$0$0$5$72$"				R superclassResult = processMethodHierarchy(context, aggregateIndex,"
"AnnotationsScanner.java:353"$0$0$0$5$72$"					superclass, processor, classFilter, rootMethod, includeInterfaces);"
"AnnotationsScanner.java:354"$0$0$0$5$35$"				if (superclassResult != null) {"
"AnnotationsScanner.java:355"$0$0$0$2$29$"					return superclassResult;"
"AnnotationsScanner.java:356"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:357"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:358"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:359"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationsScanner.java:360"$0$0$0$2$62$"			AnnotationUtils.handleIntrospectionFailure(rootMethod, ex);"
"AnnotationsScanner.java:361"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:362"$0$0$0$2$14$"		return null;"
"AnnotationsScanner.java:363"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:364"$0$0$0$0$0$""
"AnnotationsScanner.java:365"$1$0$0$5$48$"	private static <C> Method[] getBaseTypeMethods("
"AnnotationsScanner.java:366"$0$0$0$9$82$"			C context, Class<?> baseType, @Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:367"$0$0$0$0$0$""
"AnnotationsScanner.java:368"$0$0$0$7$74$"		if (baseType == Object.class || hasPlainJavaAnnotationsOnly(baseType) ||"
"AnnotationsScanner.java:369"$0$0$0$4$49$"				isFiltered(baseType, context, classFilter)) {"
"AnnotationsScanner.java:370"$0$0$0$2$21$"			return NO_METHODS;"
"AnnotationsScanner.java:371"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:372"$0$0$0$0$0$""
"AnnotationsScanner.java:373"$1$0$0$4$56$"		Method[] methods = baseTypeMethodsCache.get(baseType);"
"AnnotationsScanner.java:374"$0$0$0$5$24$"		if (methods == null) {"
"AnnotationsScanner.java:375"$0$0$0$4$48$"			boolean isInterface = baseType.isInterface();"
"AnnotationsScanner.java:376"$2$0$0$7$96$"			methods = isInterface ? baseType.getMethods() : ReflectionUtils.getDeclaredMethods(baseType);"
"AnnotationsScanner.java:377"$0$0$0$4$19$"			int cleared = 0;"
"AnnotationsScanner.java:378"$0$0$0$10$45$"			for (int i = 0; i < methods.length; i++) {"
"AnnotationsScanner.java:379"$1$0$0$5$74$"				if ((!isInterface && Modifier.isPrivate(methods[i].getModifiers())) ||"
"AnnotationsScanner.java:380"$0$0$0$2$48$"						hasPlainJavaAnnotationsOnly(methods[i]) ||"
"AnnotationsScanner.java:381"$1$0$0$5$62$"						getDeclaredAnnotations(methods[i], false).length == 0) {"
"AnnotationsScanner.java:382"$0$0$0$3$23$"					methods[i] = null;"
"AnnotationsScanner.java:383"$0$0$0$1$15$"					cleared++;"
"AnnotationsScanner.java:384"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:385"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:386"$0$0$0$5$35$"			if (cleared == methods.length) {"
"AnnotationsScanner.java:387"$0$0$0$3$25$"				methods = NO_METHODS;"
"AnnotationsScanner.java:388"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:389"$0$0$0$2$47$"			baseTypeMethodsCache.put(baseType, methods);"
"AnnotationsScanner.java:390"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:391"$0$0$0$2$17$"		return methods;"
"AnnotationsScanner.java:392"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:393"$0$0$0$0$0$""
"AnnotationsScanner.java:394"$0$0$0$8$79$"	private static boolean isOverride(Method rootMethod, Method candidateMethod) {"
"AnnotationsScanner.java:395"$1$0$0$3$64$"		return (!Modifier.isPrivate(candidateMethod.getModifiers()) &&"
"AnnotationsScanner.java:396"$2$0$0$2$61$"				candidateMethod.getName().equals(rootMethod.getName()) &&"
"AnnotationsScanner.java:397"$0$0$0$2$56$"				hasSameParameterTypes(rootMethod, candidateMethod));"
"AnnotationsScanner.java:398"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:399"$0$0$0$0$0$""
"AnnotationsScanner.java:400"$0$0$0$8$90$"	private static boolean hasSameParameterTypes(Method rootMethod, Method candidateMethod) {"
"AnnotationsScanner.java:401"$2$0$0$5$78$"		if (candidateMethod.getParameterCount() != rootMethod.getParameterCount()) {"
"AnnotationsScanner.java:402"$0$0$0$2$16$"			return false;"
"AnnotationsScanner.java:403"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:404"$1$0$0$4$65$"		Class<?>[] rootParameterTypes = rootMethod.getParameterTypes();"
"AnnotationsScanner.java:405"$1$0$0$4$75$"		Class<?>[] candidateParameterTypes = candidateMethod.getParameterTypes();"
"AnnotationsScanner.java:406"$0$0$0$4$67$"		if (Arrays.equals(candidateParameterTypes, rootParameterTypes)) {"
"AnnotationsScanner.java:407"$0$0$0$2$15$"			return true;"
"AnnotationsScanner.java:408"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:409"$0$0$0$3$66$"		return hasSameGenericTypeParameters(rootMethod, candidateMethod,"
"AnnotationsScanner.java:410"$0$0$0$1$24$"				rootParameterTypes);"
"AnnotationsScanner.java:411"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:412"$0$0$0$0$0$""
"AnnotationsScanner.java:413"$0$0$0$4$53$"	private static boolean hasSameGenericTypeParameters("
"AnnotationsScanner.java:414"$0$0$0$7$78$"			Method rootMethod, Method candidateMethod, Class<?>[] rootParameterTypes) {"
"AnnotationsScanner.java:415"$0$0$0$0$0$""
"AnnotationsScanner.java:416"$1$0$0$4$65$"		Class<?> sourceDeclaringClass = rootMethod.getDeclaringClass();"
"AnnotationsScanner.java:417"$1$0$0$4$73$"		Class<?> candidateDeclaringClass = candidateMethod.getDeclaringClass();"
"AnnotationsScanner.java:418"$0$0$0$3$72$"		if (!candidateDeclaringClass.isAssignableFrom(sourceDeclaringClass)) {"
"AnnotationsScanner.java:419"$0$0$0$2$16$"			return false;"
"AnnotationsScanner.java:420"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:421"$0$0$0$10$55$"		for (int i = 0; i < rootParameterTypes.length; i++) {"
"AnnotationsScanner.java:422"$0$0$0$4$70$"			Class<?> resolvedParameterType = ResolvableType.forMethodParameter("
"AnnotationsScanner.java:423"$0$0$0$3$57$"					candidateMethod, i, sourceDeclaringClass).resolve();"
"AnnotationsScanner.java:424"$0$0$0$5$56$"			if (rootParameterTypes[i] != resolvedParameterType) {"
"AnnotationsScanner.java:425"$0$0$0$2$17$"				return false;"
"AnnotationsScanner.java:426"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:427"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:428"$0$0$0$2$14$"		return true;"
"AnnotationsScanner.java:429"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:430"$0$0$0$0$0$""
"AnnotationsScanner.java:431"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:432"$0$0$0$11$95$"	private static <C, R> R processMethodAnnotations(C context, int aggregateIndex, Method source,"
"AnnotationsScanner.java:433"$0$0$0$8$90$"			AnnotationsProcessor<C, R> processor, @Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:434"$0$0$0$0$0$""
"AnnotationsScanner.java:435"$1$0$0$7$89$"		Annotation[] annotations = getDeclaredAnnotations(context, source, classFilter, false);"
"AnnotationsScanner.java:436"$0$0$0$7$87$"		R result = processor.doWithAnnotations(context, aggregateIndex, source, annotations);"
"AnnotationsScanner.java:437"$0$0$0$5$23$"		if (result != null) {"
"AnnotationsScanner.java:438"$0$0$0$2$17$"			return result;"
"AnnotationsScanner.java:439"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:440"$0$0$0$4$72$"		Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(source);"
"AnnotationsScanner.java:441"$0$0$0$5$32$"		if (bridgedMethod != source) {"
"AnnotationsScanner.java:442"$1$0$0$7$103$"			Annotation[] bridgedAnnotations = getDeclaredAnnotations(context, bridgedMethod, classFilter, true);"
"AnnotationsScanner.java:443"$0$0$0$10$56$"			for (int i = 0; i < bridgedAnnotations.length; i++) {"
"AnnotationsScanner.java:444"$0$0$0$4$74$"				if (ObjectUtils.containsElement(annotations, bridgedAnnotations[i])) {"
"AnnotationsScanner.java:445"$0$0$0$3$34$"					bridgedAnnotations[i] = null;"
"AnnotationsScanner.java:446"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:447"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:448"$0$0$0$5$91$"			return processor.doWithAnnotations(context, aggregateIndex, source, bridgedAnnotations);"
"AnnotationsScanner.java:449"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:450"$0$0$0$2$14$"		return null;"
"AnnotationsScanner.java:451"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:452"$0$0$0$0$0$""
"AnnotationsScanner.java:453"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:454"$0$0$0$9$75$"	private static <C, R> R processElement(C context, AnnotatedElement source,"
"AnnotationsScanner.java:455"$0$0$0$8$90$"			AnnotationsProcessor<C, R> processor, @Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:456"$0$0$0$0$0$""
"AnnotationsScanner.java:457"$0$0$0$2$7$"		try {"
"AnnotationsScanner.java:458"$0$0$0$5$52$"			R result = processor.doWithAggregate(context, 0);"
"AnnotationsScanner.java:459"$0$0$0$8$65$"			return (result != null ? result : processor.doWithAnnotations("
"AnnotationsScanner.java:460"$1$0$0$7$86$"				context, 0, source, getDeclaredAnnotations(context, source, classFilter, false)));"
"AnnotationsScanner.java:461"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:462"$0$0$0$4$24$"		catch (Throwable ex) {"
"AnnotationsScanner.java:463"$0$0$0$2$58$"			AnnotationUtils.handleIntrospectionFailure(source, ex);"
"AnnotationsScanner.java:464"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:465"$0$0$0$2$14$"		return null;"
"AnnotationsScanner.java:466"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:467"$0$0$0$0$0$""
"AnnotationsScanner.java:468"$1$0$0$7$69$"	private static <C, R> Annotation[] getDeclaredAnnotations(C context,"
"AnnotationsScanner.java:469"$0$0$0$9$91$"			AnnotatedElement source, @Nullable BiPredicate<C, Class<?>> classFilter, boolean copy) {"
"AnnotationsScanner.java:470"$0$0$0$0$0$""
"AnnotationsScanner.java:471"$0$0$0$10$87$"		if (source instanceof Class && isFiltered((Class<?>) source, context, classFilter)) {"
"AnnotationsScanner.java:472"$0$0$0$2$25$"			return NO_ANNOTATIONS;"
"AnnotationsScanner.java:473"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:474"$1$0$0$10$108$"		if (source instanceof Method && isFiltered(((Method) source).getDeclaringClass(), context, classFilter)) {"
"AnnotationsScanner.java:475"$0$0$0$2$25$"			return NO_ANNOTATIONS;"
"AnnotationsScanner.java:476"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:477"$1$0$0$3$46$"		return getDeclaredAnnotations(source, copy);"
"AnnotationsScanner.java:478"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:479"$0$0$0$0$0$""
"AnnotationsScanner.java:480"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"AnnotationsScanner.java:481"$0$0$0$1$10$"	@Nullable"
"AnnotationsScanner.java:482"$1$0$0$10$106$"	static <A extends Annotation> A getDeclaredAnnotation(AnnotatedElement source, Class<A> annotationType) {"
"AnnotationsScanner.java:483"$1$0$0$5$67$"		Annotation[] annotations = getDeclaredAnnotations(source, false);"
"AnnotationsScanner.java:484"$0$0$0$6$45$"		for (Annotation annotation : annotations) {"
"AnnotationsScanner.java:485"$0$0$0$9$77$"			if (annotation != null && annotationType == annotation.annotationType()) {"
"AnnotationsScanner.java:486"$0$0$0$3$26$"				return (A) annotation;"
"AnnotationsScanner.java:487"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:488"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:489"$0$0$0$2$14$"		return null;"
"AnnotationsScanner.java:490"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:491"$0$0$0$0$0$""
"AnnotationsScanner.java:492"$1$0$0$7$89$"	static Annotation[] getDeclaredAnnotations(AnnotatedElement source, boolean defensive) {"
"AnnotationsScanner.java:493"$0$0$0$4$25$"		boolean cached = false;"
"AnnotationsScanner.java:494"$1$0$0$4$65$"		Annotation[] annotations = declaredAnnotationCache.get(source);"
"AnnotationsScanner.java:495"$0$0$0$5$28$"		if (annotations != null) {"
"AnnotationsScanner.java:496"$0$0$0$3$17$"			cached = true;"
"AnnotationsScanner.java:497"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:498"$0$0$0$2$8$"		else {"
"AnnotationsScanner.java:499"$1$0$0$3$49$"			annotations = source.getDeclaredAnnotations();"
"AnnotationsScanner.java:500"$0$0$0$5$33$"			if (annotations.length != 0) {"
"AnnotationsScanner.java:501"$0$0$0$4$30$"				boolean allIgnored = true;"
"AnnotationsScanner.java:502"$0$0$0$10$50$"				for (int i = 0; i < annotations.length; i++) {"
"AnnotationsScanner.java:503"$0$0$0$4$44$"					Annotation annotation = annotations[i];"
"AnnotationsScanner.java:504"$0$0$0$3$52$"					if (isIgnorable(annotation.annotationType()) ||"
"AnnotationsScanner.java:505"$0$0$0$2$94$"							!AttributeMethods.forAnnotationType(annotation.annotationType()).isValid(annotation)) {"
"AnnotationsScanner.java:506"$0$0$0$3$28$"						annotations[i] = null;"
"AnnotationsScanner.java:507"$0$0$0$1$6$"					}"
"AnnotationsScanner.java:508"$0$0$0$2$11$"					else {"
"AnnotationsScanner.java:509"$0$0$0$3$25$"						allIgnored = false;"
"AnnotationsScanner.java:510"$0$0$0$1$6$"					}"
"AnnotationsScanner.java:511"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:512"$0$0$0$7$62$"				annotations = (allIgnored ? NO_ANNOTATIONS : annotations);"
"AnnotationsScanner.java:513"$0$0$0$9$62$"				if (source instanceof Class || source instanceof Member) {"
"AnnotationsScanner.java:514"$0$0$0$2$54$"					declaredAnnotationCache.put(source, annotations);"
"AnnotationsScanner.java:515"$0$0$0$3$19$"					cached = true;"
"AnnotationsScanner.java:516"$0$0$0$1$5$"				}"
"AnnotationsScanner.java:517"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:518"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:519"$0$0$0$9$57$"		if (!defensive || annotations.length == 0 || !cached) {"
"AnnotationsScanner.java:520"$0$0$0$2$22$"			return annotations;"
"AnnotationsScanner.java:521"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:522"$0$0$0$2$29$"		return annotations.clone();"
"AnnotationsScanner.java:523"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:524"$0$0$0$0$0$""
"AnnotationsScanner.java:525"$0$0$0$5$39$"	private static <C> boolean isFiltered("
"AnnotationsScanner.java:526"$0$0$0$9$85$"			Class<?> sourceClass, C context, @Nullable BiPredicate<C, Class<?>> classFilter) {"
"AnnotationsScanner.java:527"$0$0$0$0$0$""
"AnnotationsScanner.java:528"$0$0$0$7$73$"		return (classFilter != null && classFilter.test(context, sourceClass));"
"AnnotationsScanner.java:529"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:530"$0$0$0$0$0$""
"AnnotationsScanner.java:531"$0$0$0$6$62$"	private static boolean isIgnorable(Class<?> annotationType) {"
"AnnotationsScanner.java:532"$0$0$0$2$56$"		return AnnotationFilter.PLAIN.matches(annotationType);"
"AnnotationsScanner.java:533"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:534"$0$0$0$0$0$""
"AnnotationsScanner.java:535"$0$0$0$7$86$"	static boolean isKnownEmpty(AnnotatedElement source, SearchStrategy searchStrategy) {"
"AnnotationsScanner.java:536"$0$0$0$3$44$"		if (hasPlainJavaAnnotationsOnly(source)) {"
"AnnotationsScanner.java:537"$0$0$0$2$15$"			return true;"
"AnnotationsScanner.java:538"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:539"$0$0$0$8$94$"		if (searchStrategy == SearchStrategy.DIRECT || isWithoutHierarchy(source, searchStrategy)) {"
"AnnotationsScanner.java:540"$0$0$0$8$66$"			if (source instanceof Method && ((Method) source).isBridge()) {"
"AnnotationsScanner.java:541"$0$0$0$2$17$"				return false;"
"AnnotationsScanner.java:542"$0$0$0$1$4$"			}"
"AnnotationsScanner.java:543"$1$0$0$5$60$"			return getDeclaredAnnotations(source, false).length == 0;"
"AnnotationsScanner.java:544"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:545"$0$0$0$2$15$"		return false;"
"AnnotationsScanner.java:546"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:547"$0$0$0$0$0$""
"AnnotationsScanner.java:548"$0$0$0$6$80$"	static boolean hasPlainJavaAnnotationsOnly(@Nullable Object annotatedElement) {"
"AnnotationsScanner.java:549"$0$0$0$5$42$"		if (annotatedElement instanceof Class) {"
"AnnotationsScanner.java:550"$0$0$0$3$67$"			return hasPlainJavaAnnotationsOnly((Class<?>) annotatedElement);"
"AnnotationsScanner.java:551"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:552"$0$0$0$6$48$"		else if (annotatedElement instanceof Member) {"
"AnnotationsScanner.java:553"$1$0$0$3$87$"			return hasPlainJavaAnnotationsOnly(((Member) annotatedElement).getDeclaringClass());"
"AnnotationsScanner.java:554"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:555"$0$0$0$2$8$"		else {"
"AnnotationsScanner.java:556"$0$0$0$2$16$"			return false;"
"AnnotationsScanner.java:557"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:558"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:559"$0$0$0$0$0$""
"AnnotationsScanner.java:560"$0$0$0$5$60$"	static boolean hasPlainJavaAnnotationsOnly(Class<?> type) {"
"AnnotationsScanner.java:561"$1$0$0$6$71$"		return (type.getName().startsWith(""java."") || type == Ordered.class);"
"AnnotationsScanner.java:562"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:563"$0$0$0$0$0$""
"AnnotationsScanner.java:564"$0$0$0$8$100$"	private static boolean isWithoutHierarchy(AnnotatedElement source, SearchStrategy searchStrategy) {"
"AnnotationsScanner.java:565"$0$0$0$5$31$"		if (source == Object.class) {"
"AnnotationsScanner.java:566"$0$0$0$2$15$"			return true;"
"AnnotationsScanner.java:567"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:568"$0$0$0$5$32$"		if (source instanceof Class) {"
"AnnotationsScanner.java:569"$0$0$0$5$44$"			Class<?> sourceClass = (Class<?>) source;"
"AnnotationsScanner.java:570"$1$0$0$7$73$"			boolean noSuperTypes = (sourceClass.getSuperclass() == Object.class &&"
"AnnotationsScanner.java:571"$1$0$0$3$46$"					sourceClass.getInterfaces().length == 0);"
"AnnotationsScanner.java:572"$0$0$0$7$98$"			return (searchStrategy == SearchStrategy.TYPE_HIERARCHY_AND_ENCLOSING_CLASSES ? noSuperTypes &&"
"AnnotationsScanner.java:573"$1$0$0$5$61$"					sourceClass.getEnclosingClass() == null : noSuperTypes);"
"AnnotationsScanner.java:574"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:575"$0$0$0$5$33$"		if (source instanceof Method) {"
"AnnotationsScanner.java:576"$0$0$0$5$41$"			Method sourceMethod = (Method) source;"
"AnnotationsScanner.java:577"$1$0$0$3$61$"			return (Modifier.isPrivate(sourceMethod.getModifiers()) ||"
"AnnotationsScanner.java:578"$1$0$0$2$75$"					isWithoutHierarchy(sourceMethod.getDeclaringClass(), searchStrategy));"
"AnnotationsScanner.java:579"$0$0$0$1$3$"		}"
"AnnotationsScanner.java:580"$0$0$0$2$14$"		return true;"
"AnnotationsScanner.java:581"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:582"$0$0$0$0$0$""
"AnnotationsScanner.java:583"$0$0$0$4$27$"	static void clearCache() {"
"AnnotationsScanner.java:584"$0$0$0$1$34$"		declaredAnnotationCache.clear();"
"AnnotationsScanner.java:585"$0$0$0$1$31$"		baseTypeMethodsCache.clear();"
"AnnotationsScanner.java:586"$0$0$0$1$2$"	}"
"AnnotationsScanner.java:587"$0$0$0$0$0$""
"AnnotationsScanner.java:588"$0$0$0$1$1$"}"
"SerializableTypeWrapper.java:1"$0$0$0$1$2$"/*"
"SerializableTypeWrapper.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"SerializableTypeWrapper.java:3"$0$0$0$1$2$" *"
"SerializableTypeWrapper.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SerializableTypeWrapper.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SerializableTypeWrapper.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SerializableTypeWrapper.java:7"$0$0$0$1$2$" *"
"SerializableTypeWrapper.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SerializableTypeWrapper.java:9"$0$0$0$1$2$" *"
"SerializableTypeWrapper.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SerializableTypeWrapper.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SerializableTypeWrapper.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SerializableTypeWrapper.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SerializableTypeWrapper.java:14"$0$0$0$5$33$" * limitations under the License."
"SerializableTypeWrapper.java:15"$0$0$0$1$3$" */"
"SerializableTypeWrapper.java:16"$0$0$0$0$0$""
"SerializableTypeWrapper.java:17"$0$0$0$2$33$"package org.springframework.core;"
"SerializableTypeWrapper.java:18"$0$0$0$0$0$""
"SerializableTypeWrapper.java:19"$0$0$0$2$27$"import java.io.IOException;"
"SerializableTypeWrapper.java:20"$0$0$0$2$33$"import java.io.ObjectInputStream;"
"SerializableTypeWrapper.java:21"$0$0$0$2$28$"import java.io.Serializable;"
"SerializableTypeWrapper.java:22"$0$0$0$2$31$"import java.lang.reflect.Field;"
"SerializableTypeWrapper.java:23"$0$0$0$2$42$"import java.lang.reflect.GenericArrayType;"
"SerializableTypeWrapper.java:24"$0$0$0$2$43$"import java.lang.reflect.InvocationHandler;"
"SerializableTypeWrapper.java:25"$1$0$0$2$51$"import java.lang.reflect.InvocationTargetException;"
"SerializableTypeWrapper.java:26"$0$0$0$2$32$"import java.lang.reflect.Method;"
"SerializableTypeWrapper.java:27"$0$0$0$2$43$"import java.lang.reflect.ParameterizedType;"
"SerializableTypeWrapper.java:28"$0$0$0$2$31$"import java.lang.reflect.Proxy;"
"SerializableTypeWrapper.java:29"$0$0$0$2$30$"import java.lang.reflect.Type;"
"SerializableTypeWrapper.java:30"$0$0$0$2$38$"import java.lang.reflect.TypeVariable;"
"SerializableTypeWrapper.java:31"$0$0$0$2$38$"import java.lang.reflect.WildcardType;"
"SerializableTypeWrapper.java:32"$0$0$0$0$0$""
"SerializableTypeWrapper.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SerializableTypeWrapper.java:34"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"SerializableTypeWrapper.java:35"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"SerializableTypeWrapper.java:36"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"SerializableTypeWrapper.java:37"$0$0$0$0$0$""
"SerializableTypeWrapper.java:38"$0$0$0$1$3$"/**"
"SerializableTypeWrapper.java:39"$0$0$0$13$81$" * Internal utility class that can be used to obtain wrapped {@link Serializable}"
"SerializableTypeWrapper.java:40"$0$0$0$6$70$" * variants of {@link java.lang.reflect.Type java.lang.reflect.Types}."
"SerializableTypeWrapper.java:41"$0$0$0$1$2$" *"
"SerializableTypeWrapper.java:42"$0$0$0$7$84$" * <p>{@link #forField(Field) Fields} or {@link #forMethodParameter(MethodParameter)"
"SerializableTypeWrapper.java:43"$0$0$0$13$76$" * MethodParameters} can be used as the root source for a serializable type."
"SerializableTypeWrapper.java:44"$0$0$0$12$69$" * Alternatively, a regular {@link Class} can also be used as source."
"SerializableTypeWrapper.java:45"$0$0$0$1$2$" *"
"SerializableTypeWrapper.java:46"$0$0$0$15$81$" * <p>The returned type will either be a {@link Class} or a serializable proxy of"
"SerializableTypeWrapper.java:47"$0$0$0$8$79$" * {@link GenericArrayType}, {@link ParameterizedType}, {@link TypeVariable} or"
"SerializableTypeWrapper.java:48"$0$0$0$13$83$" * {@link WildcardType}. With the exception of {@link Class} (which is final) calls"
"SerializableTypeWrapper.java:49"$0$0$0$11$65$" * to methods that return further {@link Type Types} (for example"
"SerializableTypeWrapper.java:50"$1$0$0$7$85$" * {@link GenericArrayType#getGenericComponentType()}) will be automatically wrapped."
"SerializableTypeWrapper.java:51"$0$0$0$1$2$" *"
"SerializableTypeWrapper.java:52"$0$0$0$4$23$" * @author Phillip Webb"
"SerializableTypeWrapper.java:53"$0$0$0$4$26$" * @author Juergen Hoeller"
"SerializableTypeWrapper.java:54"$0$0$0$4$22$" * @author Sam Brannen"
"SerializableTypeWrapper.java:55"$0$0$0$3$13$" * @since 4.0"
"SerializableTypeWrapper.java:56"$0$0$0$1$3$" */"
"SerializableTypeWrapper.java:57"$0$0$0$4$37$"final class SerializableTypeWrapper {"
"SerializableTypeWrapper.java:58"$0$0$0$0$0$""
"SerializableTypeWrapper.java:59"$0$0$0$7$65$"	private static final Class<?>[] SUPPORTED_SERIALIZABLE_TYPES = {"
"SerializableTypeWrapper.java:60"$0$0$0$4$92$"			GenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class};"
"SerializableTypeWrapper.java:61"$0$0$0$0$0$""
"SerializableTypeWrapper.java:62"$0$0$0$8$99$"	static final ConcurrentReferenceHashMap<Type, Type> cache = new ConcurrentReferenceHashMap<>(256);"
"SerializableTypeWrapper.java:63"$0$0$0$0$0$""
"SerializableTypeWrapper.java:64"$0$0$0$0$0$""
"SerializableTypeWrapper.java:65"$0$0$0$3$36$"	private SerializableTypeWrapper() {"
"SerializableTypeWrapper.java:66"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:67"$0$0$0$0$0$""
"SerializableTypeWrapper.java:68"$0$0$0$0$0$""
"SerializableTypeWrapper.java:69"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:70"$1$0$0$9$76$"	 * Return a {@link Serializable} variant of {@link Field#getGenericType()}."
"SerializableTypeWrapper.java:71"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:72"$0$0$0$1$10$"	@Nullable"
"SerializableTypeWrapper.java:73"$0$0$0$6$43$"	public static Type forField(Field field) {"
"SerializableTypeWrapper.java:74"$0$0$0$3$55$"		return forTypeProvider(new FieldTypeProvider(field));"
"SerializableTypeWrapper.java:75"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:76"$0$0$0$0$0$""
"SerializableTypeWrapper.java:77"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:78"$0$0$0$7$44$"	 * Return a {@link Serializable} variant of"
"SerializableTypeWrapper.java:79"$1$0$0$3$54$"	 * {@link MethodParameter#getGenericParameterType()}."
"SerializableTypeWrapper.java:80"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:81"$0$0$0$1$10$"	@Nullable"
"SerializableTypeWrapper.java:82"$0$0$0$6$73$"	public static Type forMethodParameter(MethodParameter methodParameter) {"
"SerializableTypeWrapper.java:83"$0$0$0$3$75$"		return forTypeProvider(new MethodParameterTypeProvider(methodParameter));"
"SerializableTypeWrapper.java:84"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:85"$0$0$0$0$0$""
"SerializableTypeWrapper.java:86"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:87"$0$0$0$11$84$"	 * Unwrap the given type, effectively returning the original non-serializable type."
"SerializableTypeWrapper.java:88"$0$0$0$7$34$"	 * @param type the type to unwrap"
"SerializableTypeWrapper.java:89"$0$0$0$6$46$"	 * @return the original non-serializable type"
"SerializableTypeWrapper.java:90"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:91"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"SerializableTypeWrapper.java:92"$0$0$0$9$50$"	public static <T extends Type> T unwrap(T type) {"
"SerializableTypeWrapper.java:93"$0$0$0$4$24$"		Type unwrapped = null;"
"SerializableTypeWrapper.java:94"$0$0$0$5$46$"		if (type instanceof SerializableTypeProxy) {"
"SerializableTypeWrapper.java:95"$2$0$0$4$74$"			unwrapped = ((SerializableTypeProxy) type).getTypeProvider().getType();"
"SerializableTypeWrapper.java:96"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:97"$0$0$0$9$52$"		return (unwrapped != null ? (T) unwrapped : type);"
"SerializableTypeWrapper.java:98"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:99"$0$0$0$0$0$""
"SerializableTypeWrapper.java:100"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:101"$0$0$0$13$81$"	 * Return a {@link Serializable} {@link Type} backed by a {@link TypeProvider} ."
"SerializableTypeWrapper.java:102"$0$0$0$12$78$"	 * <p>If type artifacts are generally not serializable in the current runtime"
"SerializableTypeWrapper.java:103"$0$0$0$12$82$"	 * environment, this delegate will simply return the original {@code Type} as-is."
"SerializableTypeWrapper.java:104"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:105"$0$0$0$1$10$"	@Nullable"
"SerializableTypeWrapper.java:106"$0$0$0$5$53$"	static Type forTypeProvider(TypeProvider provider) {"
"SerializableTypeWrapper.java:107"$1$0$0$4$41$"		Type providedType = provider.getType();"
"SerializableTypeWrapper.java:108"$0$0$0$9$69$"		if (providedType == null || providedType instanceof Serializable) {"
"SerializableTypeWrapper.java:109"$0$0$1$9$72$"			// No serializable type wrapping necessary (e.g. for java.lang.Class)"
"SerializableTypeWrapper.java:110"$0$0$0$2$23$"			return providedType;"
"SerializableTypeWrapper.java:111"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:112"$0$0$0$5$89$"		if (GraalDetector.inImageCode() || !Serializable.class.isAssignableFrom(Class.class)) {"
"SerializableTypeWrapper.java:113"$0$0$1$13$81$"			// Let's skip any wrapping attempts if types are generally not serializable in"
"SerializableTypeWrapper.java:114"$0$0$1$11$82$"			// the current runtime environment (even java.lang.Class itself, e.g. on Graal)"
"SerializableTypeWrapper.java:115"$0$0$0$2$23$"			return providedType;"
"SerializableTypeWrapper.java:116"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:117"$0$0$0$0$0$""
"SerializableTypeWrapper.java:118"$0$0$1$10$63$"		// Obtain a serializable type proxy for the given provider..."
"SerializableTypeWrapper.java:119"$1$0$0$4$40$"		Type cached = cache.get(providedType);"
"SerializableTypeWrapper.java:120"$0$0$0$5$23$"		if (cached != null) {"
"SerializableTypeWrapper.java:121"$0$0$0$2$17$"			return cached;"
"SerializableTypeWrapper.java:122"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:123"$0$0$0$6$54$"		for (Class<?> type : SUPPORTED_SERIALIZABLE_TYPES) {"
"SerializableTypeWrapper.java:124"$0$0$0$3$39$"			if (type.isInstance(providedType)) {"
"SerializableTypeWrapper.java:125"$2$0$0$4$67$"				ClassLoader classLoader = provider.getClass().getClassLoader();"
"SerializableTypeWrapper.java:126"$0$0$0$8$99$"				Class<?>[] interfaces = new Class<?>[] {type, SerializableTypeProxy.class, Serializable.class};"
"SerializableTypeWrapper.java:127"$0$0$0$5$73$"				InvocationHandler handler = new TypeProxyInvocationHandler(provider);"
"SerializableTypeWrapper.java:128"$0$0$0$6$77$"				cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler);"
"SerializableTypeWrapper.java:129"$0$0$0$2$36$"				cache.put(providedType, cached);"
"SerializableTypeWrapper.java:130"$0$0$0$2$18$"				return cached;"
"SerializableTypeWrapper.java:131"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:132"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:133"$2$0$0$8$101$"		throw new IllegalArgumentException(""Unsupported Type class: "" + providedType.getClass().getName());"
"SerializableTypeWrapper.java:134"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:135"$0$0$0$0$0$""
"SerializableTypeWrapper.java:136"$0$0$0$0$0$""
"SerializableTypeWrapper.java:137"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:138"$0$0$0$8$55$"	 * Additional interface implemented by the type proxy."
"SerializableTypeWrapper.java:139"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:140"$0$0$0$3$34$"	interface SerializableTypeProxy {"
"SerializableTypeWrapper.java:141"$0$0$0$0$0$""
"SerializableTypeWrapper.java:142"$0$0$0$1$5$"		/**"
"SerializableTypeWrapper.java:143"$0$0$0$6$41$"		 * Return the underlying type provider."
"SerializableTypeWrapper.java:144"$0$0$0$1$5$"		 */"
"SerializableTypeWrapper.java:145"$1$0$0$2$33$"		TypeProvider getTypeProvider();"
"SerializableTypeWrapper.java:146"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:147"$0$0$0$0$0$""
"SerializableTypeWrapper.java:148"$0$0$0$0$0$""
"SerializableTypeWrapper.java:149"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:150"$0$0$0$11$72$"	 * A {@link Serializable} interface providing access to a {@link Type}."
"SerializableTypeWrapper.java:151"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:152"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"SerializableTypeWrapper.java:153"$0$0$0$5$46$"	interface TypeProvider extends Serializable {"
"SerializableTypeWrapper.java:154"$0$0$0$0$0$""
"SerializableTypeWrapper.java:155"$0$0$0$1$5$"		/**"
"SerializableTypeWrapper.java:156"$0$0$0$9$65$"		 * Return the (possibly non {@link Serializable}) {@link Type}."
"SerializableTypeWrapper.java:157"$0$0$0$1$5$"		 */"
"SerializableTypeWrapper.java:158"$0$0$0$1$11$"		@Nullable"
"SerializableTypeWrapper.java:159"$1$0$0$2$17$"		Type getType();"
"SerializableTypeWrapper.java:160"$0$0$0$0$0$""
"SerializableTypeWrapper.java:161"$0$0$0$1$5$"		/**"
"SerializableTypeWrapper.java:162"$0$0$0$13$65$"		 * Return the source of the type, or {@code null} if not known."
"SerializableTypeWrapper.java:163"$0$0$0$7$57$"		 * <p>The default implementations returns {@code null}."
"SerializableTypeWrapper.java:164"$0$0$0$1$5$"		 */"
"SerializableTypeWrapper.java:165"$0$0$0$1$11$"		@Nullable"
"SerializableTypeWrapper.java:166"$1$0$0$4$30$"		default Object getSource() {"
"SerializableTypeWrapper.java:167"$0$0$0$2$15$"			return null;"
"SerializableTypeWrapper.java:168"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:169"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:170"$0$0$0$0$0$""
"SerializableTypeWrapper.java:171"$0$0$0$0$0$""
"SerializableTypeWrapper.java:172"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:173"$0$0$0$11$84$"	 * {@link Serializable} {@link InvocationHandler} used by the proxied {@link Type}."
"SerializableTypeWrapper.java:174"$0$0$0$12$84$"	 * Provides serialization support and enhances any methods that return {@code Type}"
"SerializableTypeWrapper.java:175"$0$0$0$4$22$"	 * or {@code Type[]}."
"SerializableTypeWrapper.java:176"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:177"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"SerializableTypeWrapper.java:178"$0$0$0$8$93$"	private static class TypeProxyInvocationHandler implements InvocationHandler, Serializable {"
"SerializableTypeWrapper.java:179"$0$0$0$0$0$""
"SerializableTypeWrapper.java:180"$0$0$0$4$38$"		private final TypeProvider provider;"
"SerializableTypeWrapper.java:181"$0$0$0$0$0$""
"SerializableTypeWrapper.java:182"$0$0$0$4$60$"		public TypeProxyInvocationHandler(TypeProvider provider) {"
"SerializableTypeWrapper.java:183"$0$0$0$3$28$"			this.provider = provider;"
"SerializableTypeWrapper.java:184"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:185"$0$0$0$0$0$""
"SerializableTypeWrapper.java:186"$0$0$0$1$11$"		@Override"
"SerializableTypeWrapper.java:187"$0$0$0$1$11$"		@Nullable"
"SerializableTypeWrapper.java:188"$0$0$0$12$95$"		public Object invoke(Object proxy, Method method, @Nullable Object[] args) throws Throwable {"
"SerializableTypeWrapper.java:189"$1$0$0$7$59$"			if (method.getName().equals(""equals"") && args != null) {"
"SerializableTypeWrapper.java:190"$0$0$0$4$27$"				Object other = args[0];"
"SerializableTypeWrapper.java:191"$0$0$1$5$31$"				// Unwrap proxies for speed"
"SerializableTypeWrapper.java:192"$0$0$0$5$32$"				if (other instanceof Type) {"
"SerializableTypeWrapper.java:193"$0$0$0$4$34$"					other = unwrap((Type) other);"
"SerializableTypeWrapper.java:194"$0$0$0$1$5$"				}"
"SerializableTypeWrapper.java:195"$1$0$0$3$70$"				return ObjectUtils.nullSafeEquals(this.provider.getType(), other);"
"SerializableTypeWrapper.java:196"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:197"$1$0$0$4$50$"			else if (method.getName().equals(""hashCode"")) {"
"SerializableTypeWrapper.java:198"$1$0$0$2$65$"				return ObjectUtils.nullSafeHashCode(this.provider.getType());"
"SerializableTypeWrapper.java:199"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:200"$2$0$0$4$57$"			else if (method.getName().equals(""getTypeProvider"")) {"
"SerializableTypeWrapper.java:201"$0$0$0$2$25$"				return this.provider;"
"SerializableTypeWrapper.java:202"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:203"$0$0$0$0$0$""
"SerializableTypeWrapper.java:204"$1$0$0$9$62$"			if (Type.class == method.getReturnType() && args == null) {"
"SerializableTypeWrapper.java:205"$0$0$0$5$84$"				return forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, -1));"
"SerializableTypeWrapper.java:206"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:207"$1$0$0$10$69$"			else if (Type[].class == method.getReturnType() && args == null) {"
"SerializableTypeWrapper.java:208"$1$0$0$6$87$"				Type[] result = new Type[((Type[]) method.invoke(this.provider.getType())).length];"
"SerializableTypeWrapper.java:209"$0$0$0$10$45$"				for (int i = 0; i < result.length; i++) {"
"SerializableTypeWrapper.java:210"$0$0$0$6$89$"					result[i] = forTypeProvider(new MethodInvokeTypeProvider(this.provider, method, i));"
"SerializableTypeWrapper.java:211"$0$0$0$1$5$"				}"
"SerializableTypeWrapper.java:212"$0$0$0$2$18$"				return result;"
"SerializableTypeWrapper.java:213"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:214"$0$0$0$0$0$""
"SerializableTypeWrapper.java:215"$0$0$0$2$8$"			try {"
"SerializableTypeWrapper.java:216"$1$0$0$3$56$"				return method.invoke(this.provider.getType(), args);"
"SerializableTypeWrapper.java:217"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:218"$1$0$0$4$41$"			catch (InvocationTargetException ex) {"
"SerializableTypeWrapper.java:219"$2$0$0$2$34$"				throw ex.getTargetException();"
"SerializableTypeWrapper.java:220"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:221"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:222"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:223"$0$0$0$0$0$""
"SerializableTypeWrapper.java:224"$0$0$0$0$0$""
"SerializableTypeWrapper.java:225"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:226"$0$0$0$12$78$"	 * {@link TypeProvider} for {@link Type Types} obtained from a {@link Field}."
"SerializableTypeWrapper.java:227"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:228"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"SerializableTypeWrapper.java:229"$0$0$0$6$57$"	static class FieldTypeProvider implements TypeProvider {"
"SerializableTypeWrapper.java:230"$0$0$0$0$0$""
"SerializableTypeWrapper.java:231"$0$0$0$4$33$"		private final String fieldName;"
"SerializableTypeWrapper.java:232"$0$0$0$0$0$""
"SerializableTypeWrapper.java:233"$0$0$0$4$40$"		private final Class<?> declaringClass;"
"SerializableTypeWrapper.java:234"$0$0$0$0$0$""
"SerializableTypeWrapper.java:235"$0$0$0$4$32$"		private transient Field field;"
"SerializableTypeWrapper.java:236"$0$0$0$0$0$""
"SerializableTypeWrapper.java:237"$0$0$0$4$41$"		public FieldTypeProvider(Field field) {"
"SerializableTypeWrapper.java:238"$1$0$0$3$36$"			this.fieldName = field.getName();"
"SerializableTypeWrapper.java:239"$1$0$0$3$51$"			this.declaringClass = field.getDeclaringClass();"
"SerializableTypeWrapper.java:240"$0$0$0$3$22$"			this.field = field;"
"SerializableTypeWrapper.java:241"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:242"$0$0$0$0$0$""
"SerializableTypeWrapper.java:243"$0$0$0$1$11$"		@Override"
"SerializableTypeWrapper.java:244"$1$0$0$4$25$"		public Type getType() {"
"SerializableTypeWrapper.java:245"$1$0$0$2$38$"			return this.field.getGenericType();"
"SerializableTypeWrapper.java:246"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:247"$0$0$0$0$0$""
"SerializableTypeWrapper.java:248"$0$0$0$1$11$"		@Override"
"SerializableTypeWrapper.java:249"$1$0$0$4$29$"		public Object getSource() {"
"SerializableTypeWrapper.java:250"$0$0$0$2$21$"			return this.field;"
"SerializableTypeWrapper.java:251"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:252"$0$0$0$0$0$""
"SerializableTypeWrapper.java:253"$0$0$0$8$101$"		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {"
"SerializableTypeWrapper.java:254"$0$0$0$1$35$"			inputStream.defaultReadObject();"
"SerializableTypeWrapper.java:255"$0$0$0$2$8$"			try {"
"SerializableTypeWrapper.java:256"$1$0$0$3$70$"				this.field = this.declaringClass.getDeclaredField(this.fieldName);"
"SerializableTypeWrapper.java:257"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:258"$0$0$0$4$25$"			catch (Throwable ex) {"
"SerializableTypeWrapper.java:259"$0$0$0$9$83$"				throw new IllegalStateException(""Could not find original class structure"", ex);"
"SerializableTypeWrapper.java:260"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:261"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:262"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:263"$0$0$0$0$0$""
"SerializableTypeWrapper.java:264"$0$0$0$0$0$""
"SerializableTypeWrapper.java:265"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:266"$0$0$0$12$88$"	 * {@link TypeProvider} for {@link Type Types} obtained from a {@link MethodParameter}."
"SerializableTypeWrapper.java:267"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:268"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"SerializableTypeWrapper.java:269"$0$0$0$6$67$"	static class MethodParameterTypeProvider implements TypeProvider {"
"SerializableTypeWrapper.java:270"$0$0$0$0$0$""
"SerializableTypeWrapper.java:271"$0$0$0$1$11$"		@Nullable"
"SerializableTypeWrapper.java:272"$0$0$0$4$34$"		private final String methodName;"
"SerializableTypeWrapper.java:273"$0$0$0$0$0$""
"SerializableTypeWrapper.java:274"$0$0$0$4$42$"		private final Class<?>[] parameterTypes;"
"SerializableTypeWrapper.java:275"$0$0$0$0$0$""
"SerializableTypeWrapper.java:276"$0$0$0$4$40$"		private final Class<?> declaringClass;"
"SerializableTypeWrapper.java:277"$0$0$0$0$0$""
"SerializableTypeWrapper.java:278"$0$0$0$4$35$"		private final int parameterIndex;"
"SerializableTypeWrapper.java:279"$0$0$0$0$0$""
"SerializableTypeWrapper.java:280"$0$0$0$4$52$"		private transient MethodParameter methodParameter;"
"SerializableTypeWrapper.java:281"$0$0$0$0$0$""
"SerializableTypeWrapper.java:282"$0$0$0$4$71$"		public MethodParameterTypeProvider(MethodParameter methodParameter) {"
"SerializableTypeWrapper.java:283"$3$0$0$9$106$"			this.methodName = (methodParameter.getMethod() != null ? methodParameter.getMethod().getName() : null);"
"SerializableTypeWrapper.java:284"$2$0$0$3$77$"			this.parameterTypes = methodParameter.getExecutable().getParameterTypes();"
"SerializableTypeWrapper.java:285"$1$0$0$3$61$"			this.declaringClass = methodParameter.getDeclaringClass();"
"SerializableTypeWrapper.java:286"$1$0$0$3$61$"			this.parameterIndex = methodParameter.getParameterIndex();"
"SerializableTypeWrapper.java:287"$0$0$0$3$42$"			this.methodParameter = methodParameter;"
"SerializableTypeWrapper.java:288"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:289"$0$0$0$0$0$""
"SerializableTypeWrapper.java:290"$0$0$0$1$11$"		@Override"
"SerializableTypeWrapper.java:291"$1$0$0$4$25$"		public Type getType() {"
"SerializableTypeWrapper.java:292"$1$0$0$2$57$"			return this.methodParameter.getGenericParameterType();"
"SerializableTypeWrapper.java:293"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:294"$0$0$0$0$0$""
"SerializableTypeWrapper.java:295"$0$0$0$1$11$"		@Override"
"SerializableTypeWrapper.java:296"$1$0$0$4$29$"		public Object getSource() {"
"SerializableTypeWrapper.java:297"$0$0$0$2$31$"			return this.methodParameter;"
"SerializableTypeWrapper.java:298"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:299"$0$0$0$0$0$""
"SerializableTypeWrapper.java:300"$0$0$0$8$101$"		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {"
"SerializableTypeWrapper.java:301"$0$0$0$1$35$"			inputStream.defaultReadObject();"
"SerializableTypeWrapper.java:302"$0$0$0$2$8$"			try {"
"SerializableTypeWrapper.java:303"$0$0$0$5$34$"				if (this.methodName != null) {"
"SerializableTypeWrapper.java:304"$0$0$0$4$48$"					this.methodParameter = new MethodParameter("
"SerializableTypeWrapper.java:305"$1$0$0$3$105$"							this.declaringClass.getDeclaredMethod(this.methodName, this.parameterTypes), this.parameterIndex);"
"SerializableTypeWrapper.java:306"$0$0$0$1$5$"				}"
"SerializableTypeWrapper.java:307"$0$0$0$2$10$"				else {"
"SerializableTypeWrapper.java:308"$0$0$0$4$48$"					this.methodParameter = new MethodParameter("
"SerializableTypeWrapper.java:309"$1$0$0$2$93$"							this.declaringClass.getDeclaredConstructor(this.parameterTypes), this.parameterIndex);"
"SerializableTypeWrapper.java:310"$0$0$0$1$5$"				}"
"SerializableTypeWrapper.java:311"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:312"$0$0$0$4$25$"			catch (Throwable ex) {"
"SerializableTypeWrapper.java:313"$0$0$0$9$83$"				throw new IllegalStateException(""Could not find original class structure"", ex);"
"SerializableTypeWrapper.java:314"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:315"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:316"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:317"$0$0$0$0$0$""
"SerializableTypeWrapper.java:318"$0$0$0$0$0$""
"SerializableTypeWrapper.java:319"$0$0$0$1$4$"	/**"
"SerializableTypeWrapper.java:320"$0$0$0$13$85$"	 * {@link TypeProvider} for {@link Type Types} obtained by invoking a no-arg method."
"SerializableTypeWrapper.java:321"$0$0$0$1$4$"	 */"
"SerializableTypeWrapper.java:322"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"SerializableTypeWrapper.java:323"$0$0$0$6$64$"	static class MethodInvokeTypeProvider implements TypeProvider {"
"SerializableTypeWrapper.java:324"$0$0$0$0$0$""
"SerializableTypeWrapper.java:325"$0$0$0$4$38$"		private final TypeProvider provider;"
"SerializableTypeWrapper.java:326"$0$0$0$0$0$""
"SerializableTypeWrapper.java:327"$0$0$0$4$34$"		private final String methodName;"
"SerializableTypeWrapper.java:328"$0$0$0$0$0$""
"SerializableTypeWrapper.java:329"$0$0$0$4$40$"		private final Class<?> declaringClass;"
"SerializableTypeWrapper.java:330"$0$0$0$0$0$""
"SerializableTypeWrapper.java:331"$0$0$0$4$26$"		private final int index;"
"SerializableTypeWrapper.java:332"$0$0$0$0$0$""
"SerializableTypeWrapper.java:333"$0$0$0$4$34$"		private transient Method method;"
"SerializableTypeWrapper.java:334"$0$0$0$0$0$""
"SerializableTypeWrapper.java:335"$0$0$0$1$11$"		@Nullable"
"SerializableTypeWrapper.java:336"$0$0$0$5$43$"		private transient volatile Object result;"
"SerializableTypeWrapper.java:337"$0$0$0$0$0$""
"SerializableTypeWrapper.java:338"$0$0$0$8$84$"		public MethodInvokeTypeProvider(TypeProvider provider, Method method, int index) {"
"SerializableTypeWrapper.java:339"$0$0$0$3$28$"			this.provider = provider;"
"SerializableTypeWrapper.java:340"$1$0$0$3$38$"			this.methodName = method.getName();"
"SerializableTypeWrapper.java:341"$1$0$0$3$52$"			this.declaringClass = method.getDeclaringClass();"
"SerializableTypeWrapper.java:342"$0$0$0$3$22$"			this.index = index;"
"SerializableTypeWrapper.java:343"$0$0$0$3$24$"			this.method = method;"
"SerializableTypeWrapper.java:344"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:345"$0$0$0$0$0$""
"SerializableTypeWrapper.java:346"$0$0$0$1$11$"		@Override"
"SerializableTypeWrapper.java:347"$0$0$0$1$11$"		@Nullable"
"SerializableTypeWrapper.java:348"$1$0$0$4$25$"		public Type getType() {"
"SerializableTypeWrapper.java:349"$0$0$0$4$31$"			Object result = this.result;"
"SerializableTypeWrapper.java:350"$0$0$0$5$24$"			if (result == null) {"
"SerializableTypeWrapper.java:351"$1$0$1$11$64$"				// Lazy invocation of the target method on the provided type"
"SerializableTypeWrapper.java:352"$1$0$0$4$80$"				result = ReflectionUtils.invokeMethod(this.method, this.provider.getType());"
"SerializableTypeWrapper.java:353"$1$0$1$9$54$"				// Cache the result for further calls to getType()"
"SerializableTypeWrapper.java:354"$0$0$0$3$25$"				this.result = result;"
"SerializableTypeWrapper.java:355"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:356"$0$0$0$10$85$"			return (result instanceof Type[] ? ((Type[]) result)[this.index] : (Type) result);"
"SerializableTypeWrapper.java:357"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:358"$0$0$0$0$0$""
"SerializableTypeWrapper.java:359"$0$0$0$1$11$"		@Override"
"SerializableTypeWrapper.java:360"$0$0$0$1$11$"		@Nullable"
"SerializableTypeWrapper.java:361"$1$0$0$4$29$"		public Object getSource() {"
"SerializableTypeWrapper.java:362"$0$0$0$2$15$"			return null;"
"SerializableTypeWrapper.java:363"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:364"$0$0$0$0$0$""
"SerializableTypeWrapper.java:365"$0$0$0$8$101$"		private void readObject(ObjectInputStream inputStream) throws IOException, ClassNotFoundException {"
"SerializableTypeWrapper.java:366"$0$0$0$1$35$"			inputStream.defaultReadObject();"
"SerializableTypeWrapper.java:367"$0$0$0$5$84$"			Method method = ReflectionUtils.findMethod(this.declaringClass, this.methodName);"
"SerializableTypeWrapper.java:368"$0$0$0$5$24$"			if (method == null) {"
"SerializableTypeWrapper.java:369"$0$0$0$10$97$"				throw new IllegalStateException(""Cannot find method on deserialization: "" + this.methodName);"
"SerializableTypeWrapper.java:370"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:371"$2$0$0$9$88$"			if (method.getReturnType() != Type.class && method.getReturnType() != Type[].class) {"
"SerializableTypeWrapper.java:372"$0$0$0$3$36$"				throw new IllegalStateException("
"SerializableTypeWrapper.java:373"$0$0$0$16$92$"						""Invalid return type on deserialized method - needs to be Type or Type[]: "" + method);"
"SerializableTypeWrapper.java:374"$0$0$0$1$4$"			}"
"SerializableTypeWrapper.java:375"$0$0$0$3$24$"			this.method = method;"
"SerializableTypeWrapper.java:376"$0$0$0$1$3$"		}"
"SerializableTypeWrapper.java:377"$0$0$0$1$2$"	}"
"SerializableTypeWrapper.java:378"$0$0$0$0$0$""
"SerializableTypeWrapper.java:379"$0$0$0$1$1$"}"
"RepeatableContainers.java:1"$0$0$0$1$2$"/*"
"RepeatableContainers.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"RepeatableContainers.java:3"$0$0$0$1$2$" *"
"RepeatableContainers.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"RepeatableContainers.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"RepeatableContainers.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"RepeatableContainers.java:7"$0$0$0$1$2$" *"
"RepeatableContainers.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"RepeatableContainers.java:9"$0$0$0$1$2$" *"
"RepeatableContainers.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"RepeatableContainers.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"RepeatableContainers.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"RepeatableContainers.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"RepeatableContainers.java:14"$0$0$0$5$33$" * limitations under the License."
"RepeatableContainers.java:15"$0$0$0$1$3$" */"
"RepeatableContainers.java:16"$0$0$0$0$0$""
"RepeatableContainers.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"RepeatableContainers.java:18"$0$0$0$0$0$""
"RepeatableContainers.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"RepeatableContainers.java:20"$0$0$0$2$39$"import java.lang.annotation.Repeatable;"
"RepeatableContainers.java:21"$0$0$0$2$32$"import java.lang.reflect.Method;"
"RepeatableContainers.java:22"$0$0$0$2$21$"import java.util.Map;"
"RepeatableContainers.java:23"$0$0$0$0$0$""
"RepeatableContainers.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"RepeatableContainers.java:25"$0$0$0$2$39$"import org.springframework.util.Assert;"
"RepeatableContainers.java:26"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"RepeatableContainers.java:27"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"RepeatableContainers.java:28"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"RepeatableContainers.java:29"$0$0$0$0$0$""
"RepeatableContainers.java:30"$0$0$0$1$3$"/**"
"RepeatableContainers.java:31"$0$0$0$12$74$" * Strategy used to determine annotations that act as containers for other"
"RepeatableContainers.java:32"$0$0$0$9$76$" * annotations. The {@link #standardRepeatables()} method provides a default"
"RepeatableContainers.java:33"$0$0$0$10$75$" * strategy that respects Java's {@link Repeatable @Repeatable} support and"
"RepeatableContainers.java:34"$0$0$0$7$42$" * should be suitable for most situations."
"RepeatableContainers.java:35"$0$0$0$1$2$" *"
"RepeatableContainers.java:36"$0$0$0$12$70$" * <p>The {@link #of} method can be used to register relationships for"
"RepeatableContainers.java:37"$0$0$0$11$70$" * annotations that do not wish to use {@link Repeatable @Repeatable}."
"RepeatableContainers.java:38"$0$0$0$1$2$" *"
"RepeatableContainers.java:39"$0$0$0$9$67$" * <p>To completely disable repeatable support use {@link #none()}."
"RepeatableContainers.java:40"$0$0$0$1$2$" *"
"RepeatableContainers.java:41"$0$0$0$4$23$" * @author Phillip Webb"
"RepeatableContainers.java:42"$0$0$0$3$13$" * @since 5.2"
"RepeatableContainers.java:43"$0$0$0$1$3$" */"
"RepeatableContainers.java:44"$0$0$0$5$44$"public abstract class RepeatableContainers {"
"RepeatableContainers.java:45"$0$0$0$0$0$""
"RepeatableContainers.java:46"$0$0$0$1$10$"	@Nullable"
"RepeatableContainers.java:47"$0$0$0$4$43$"	private final RepeatableContainers parent;"
"RepeatableContainers.java:48"$0$0$0$0$0$""
"RepeatableContainers.java:49"$0$0$0$0$0$""
"RepeatableContainers.java:50"$0$0$0$5$70$"	private RepeatableContainers(@Nullable RepeatableContainers parent) {"
"RepeatableContainers.java:51"$0$0$0$3$23$"		this.parent = parent;"
"RepeatableContainers.java:52"$0$0$0$1$2$"	}"
"RepeatableContainers.java:53"$0$0$0$0$0$""
"RepeatableContainers.java:54"$0$0$0$0$0$""
"RepeatableContainers.java:55"$0$0$0$1$4$"	/**"
"RepeatableContainers.java:56"$0$0$0$10$67$"	 * Add an additional explicit relationship between a contained and"
"RepeatableContainers.java:57"$0$0$0$3$26$"	 * repeatable annotation."
"RepeatableContainers.java:58"$0$0$0$6$39$"	 * @param container the container type"
"RepeatableContainers.java:59"$0$0$0$7$51$"	 * @param repeatable the contained repeatable type"
"RepeatableContainers.java:60"$0$0$0$7$55$"	 * @return a new {@link RepeatableContainers} instance"
"RepeatableContainers.java:61"$0$0$0$1$4$"	 */"
"RepeatableContainers.java:62"$0$0$0$6$71$"	public RepeatableContainers and(Class<? extends Annotation> container,"
"RepeatableContainers.java:63"$0$0$0$5$44$"			Class<? extends Annotation> repeatable) {"
"RepeatableContainers.java:64"$0$0$0$0$0$""
"RepeatableContainers.java:65"$0$0$0$5$70$"		return new ExplicitRepeatableContainer(this, repeatable, container);"
"RepeatableContainers.java:66"$0$0$0$1$2$"	}"
"RepeatableContainers.java:67"$0$0$0$0$0$""
"RepeatableContainers.java:68"$0$0$0$1$10$"	@Nullable"
"RepeatableContainers.java:69"$0$0$0$4$62$"	Annotation[] findRepeatedAnnotations(Annotation annotation) {"
"RepeatableContainers.java:70"$0$0$0$5$28$"		if (this.parent == null) {"
"RepeatableContainers.java:71"$0$0$0$2$15$"			return null;"
"RepeatableContainers.java:72"$0$0$0$1$3$"		}"
"RepeatableContainers.java:73"$0$0$0$2$57$"		return this.parent.findRepeatedAnnotations(annotation);"
"RepeatableContainers.java:74"$0$0$0$1$2$"	}"
"RepeatableContainers.java:75"$0$0$0$0$0$""
"RepeatableContainers.java:76"$0$0$0$0$0$""
"RepeatableContainers.java:77"$0$0$0$1$10$"	@Override"
"RepeatableContainers.java:78"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"RepeatableContainers.java:79"$0$0$0$5$22$"		if (other == this) {"
"RepeatableContainers.java:80"$0$0$0$2$15$"			return true;"
"RepeatableContainers.java:81"$0$0$0$1$3$"		}"
"RepeatableContainers.java:82"$2$0$0$9$56$"		if (other == null || getClass() != other.getClass()) {"
"RepeatableContainers.java:83"$0$0$0$2$16$"			return false;"
"RepeatableContainers.java:84"$0$0$0$1$3$"		}"
"RepeatableContainers.java:85"$0$0$0$4$88$"		return ObjectUtils.nullSafeEquals(this.parent, ((RepeatableContainers) other).parent);"
"RepeatableContainers.java:86"$0$0$0$1$2$"	}"
"RepeatableContainers.java:87"$0$0$0$0$0$""
"RepeatableContainers.java:88"$0$0$0$1$10$"	@Override"
"RepeatableContainers.java:89"$0$0$0$4$24$"	public int hashCode() {"
"RepeatableContainers.java:90"$0$0$0$2$51$"		return ObjectUtils.nullSafeHashCode(this.parent);"
"RepeatableContainers.java:91"$0$0$0$1$2$"	}"
"RepeatableContainers.java:92"$0$0$0$0$0$""
"RepeatableContainers.java:93"$0$0$0$0$0$""
"RepeatableContainers.java:94"$0$0$0$1$4$"	/**"
"RepeatableContainers.java:95"$0$0$0$10$77$"	 * Create a {@link RepeatableContainers} instance that searches using Java's"
"RepeatableContainers.java:96"$0$0$0$5$46$"	 * {@link Repeatable @Repeatable} annotation."
"RepeatableContainers.java:97"$0$0$0$6$51$"	 * @return a {@link RepeatableContainers} instance"
"RepeatableContainers.java:98"$0$0$0$1$4$"	 */"
"RepeatableContainers.java:99"$0$0$0$5$59$"	public static RepeatableContainers standardRepeatables() {"
"RepeatableContainers.java:100"$0$0$0$2$47$"		return StandardRepeatableContainers.INSTANCE;"
"RepeatableContainers.java:101"$0$0$0$1$2$"	}"
"RepeatableContainers.java:102"$0$0$0$0$0$""
"RepeatableContainers.java:103"$0$0$0$1$4$"	/**"
"RepeatableContainers.java:104"$0$0$0$10$70$"	 * Create a {@link RepeatableContainers} instance that uses a defined"
"RepeatableContainers.java:105"$0$0$0$5$34$"	 * container and repeatable type."
"RepeatableContainers.java:106"$0$0$0$7$57$"	 * @param repeatable the contained repeatable annotation"
"RepeatableContainers.java:107"$0$0$0$11$76$"	 * @param container the container annotation or {@code null}. If specified,"
"RepeatableContainers.java:108"$0$0$0$12$77$"	 * this annotation must declare a {@code value} attribute returning an array"
"RepeatableContainers.java:109"$0$0$0$11$70$"	 * of repeatable annotations. If not specified, the container will be"
"RepeatableContainers.java:110"$0$0$0$9$63$"	 * deduced by inspecting the {@code @Repeatable} annotation on"
"RepeatableContainers.java:111"$0$0$0$3$23$"	 * {@code repeatable}."
"RepeatableContainers.java:112"$0$0$0$6$51$"	 * @return a {@link RepeatableContainers} instance"
"RepeatableContainers.java:113"$0$0$0$1$4$"	 */"
"RepeatableContainers.java:114"$0$0$0$4$39$"	public static RepeatableContainers of("
"RepeatableContainers.java:115"$0$0$0$10$93$"			Class<? extends Annotation> repeatable, @Nullable Class<? extends Annotation> container) {"
"RepeatableContainers.java:116"$0$0$0$0$0$""
"RepeatableContainers.java:117"$0$0$0$5$70$"		return new ExplicitRepeatableContainer(null, repeatable, container);"
"RepeatableContainers.java:118"$0$0$0$1$2$"	}"
"RepeatableContainers.java:119"$0$0$0$0$0$""
"RepeatableContainers.java:120"$0$0$0$1$4$"	/**"
"RepeatableContainers.java:121"$0$0$0$11$75$"	 * Create a {@link RepeatableContainers} instance that does not expand any"
"RepeatableContainers.java:122"$0$0$0$3$27$"	 * repeatable annotations."
"RepeatableContainers.java:123"$0$0$0$6$51$"	 * @return a {@link RepeatableContainers} instance"
"RepeatableContainers.java:124"$0$0$0$1$4$"	 */"
"RepeatableContainers.java:125"$0$0$0$5$44$"	public static RepeatableContainers none() {"
"RepeatableContainers.java:126"$0$0$0$2$41$"		return NoRepeatableContainers.INSTANCE;"
"RepeatableContainers.java:127"$0$0$0$1$2$"	}"
"RepeatableContainers.java:128"$0$0$0$0$0$""
"RepeatableContainers.java:129"$0$0$0$0$0$""
"RepeatableContainers.java:130"$0$0$0$1$4$"	/**"
"RepeatableContainers.java:131"$0$0$0$8$76$"	 * Standard {@link RepeatableContainers} implementation that searches using"
"RepeatableContainers.java:132"$0$0$0$6$53$"	 * Java's {@link Repeatable @Repeatable} annotation."
"RepeatableContainers.java:133"$0$0$0$1$4$"	 */"
"RepeatableContainers.java:134"$0$0$0$7$81$"	private static class StandardRepeatableContainers extends RepeatableContainers {"
"RepeatableContainers.java:135"$0$0$0$0$0$""
"RepeatableContainers.java:136"$0$0$0$11$107$"		private static final Map<Class<? extends Annotation>, Object> cache = new ConcurrentReferenceHashMap<>();"
"RepeatableContainers.java:137"$0$0$0$0$0$""
"RepeatableContainers.java:138"$0$0$0$8$50$"		private static final Object NONE = new Object();"
"RepeatableContainers.java:139"$0$0$0$0$0$""
"RepeatableContainers.java:140"$0$0$0$7$92$"		private static StandardRepeatableContainers INSTANCE = new StandardRepeatableContainers();"
"RepeatableContainers.java:141"$0$0$0$0$0$""
"RepeatableContainers.java:142"$0$0$0$2$34$"		StandardRepeatableContainers() {"
"RepeatableContainers.java:143"$0$0$0$1$15$"			super(null);"
"RepeatableContainers.java:144"$0$0$0$1$3$"		}"
"RepeatableContainers.java:145"$0$0$0$0$0$""
"RepeatableContainers.java:146"$0$0$0$1$11$"		@Override"
"RepeatableContainers.java:147"$0$0$0$1$11$"		@Nullable"
"RepeatableContainers.java:148"$0$0$0$4$63$"		Annotation[] findRepeatedAnnotations(Annotation annotation) {"
"RepeatableContainers.java:149"$1$0$0$4$77$"			Method method = getRepeatedAnnotationsMethod(annotation.annotationType());"
"RepeatableContainers.java:150"$0$0$0$5$24$"			if (method != null) {"
"RepeatableContainers.java:151"$0$0$0$4$75$"				return (Annotation[]) ReflectionUtils.invokeMethod(method, annotation);"
"RepeatableContainers.java:152"$0$0$0$1$4$"			}"
"RepeatableContainers.java:153"$0$0$0$2$52$"			return super.findRepeatedAnnotations(annotation);"
"RepeatableContainers.java:154"$0$0$0$1$3$"		}"
"RepeatableContainers.java:155"$0$0$0$0$0$""
"RepeatableContainers.java:156"$0$0$0$1$11$"		@Nullable"
"RepeatableContainers.java:157"$1$0$0$8$98$"		private static Method getRepeatedAnnotationsMethod(Class<? extends Annotation> annotationType) {"
"RepeatableContainers.java:158"$0$0$0$4$56$"			Object result = cache.computeIfAbsent(annotationType,"
"RepeatableContainers.java:159"$0$0$0$1$69$"					StandardRepeatableContainers::computeRepeatedAnnotationsMethod);"
"RepeatableContainers.java:160"$0$0$0$9$52$"			return (result != NONE ? (Method) result : null);"
"RepeatableContainers.java:161"$0$0$0$1$3$"		}"
"RepeatableContainers.java:162"$0$0$0$0$0$""
"RepeatableContainers.java:163"$0$0$0$8$102$"		private static Object computeRepeatedAnnotationsMethod(Class<? extends Annotation> annotationType) {"
"RepeatableContainers.java:164"$0$0$0$4$81$"			AttributeMethods methods = AttributeMethods.forAnnotationType(annotationType);"
"RepeatableContainers.java:165"$0$0$0$3$41$"			if (methods.hasOnlyValueAttribute()) {"
"RepeatableContainers.java:166"$1$0$0$4$35$"				Method method = methods.get(0);"
"RepeatableContainers.java:167"$1$0$0$4$49$"				Class<?> returnType = method.getReturnType();"
"RepeatableContainers.java:168"$0$0$0$3$31$"				if (returnType.isArray()) {"
"RepeatableContainers.java:169"$1$0$0$4$60$"					Class<?> componentType = returnType.getComponentType();"
"RepeatableContainers.java:170"$0$0$0$3$60$"					if (Annotation.class.isAssignableFrom(componentType) &&"
"RepeatableContainers.java:171"$0$0$0$2$61$"							componentType.isAnnotationPresent(Repeatable.class)) {"
"RepeatableContainers.java:172"$0$0$0$2$20$"						return method;"
"RepeatableContainers.java:173"$0$0$0$1$6$"					}"
"RepeatableContainers.java:174"$0$0$0$1$5$"				}"
"RepeatableContainers.java:175"$0$0$0$1$4$"			}"
"RepeatableContainers.java:176"$0$0$0$2$15$"			return NONE;"
"RepeatableContainers.java:177"$0$0$0$1$3$"		}"
"RepeatableContainers.java:178"$0$0$0$1$2$"	}"
"RepeatableContainers.java:179"$0$0$0$0$0$""
"RepeatableContainers.java:180"$0$0$0$0$0$""
"RepeatableContainers.java:181"$0$0$0$1$4$"	/**"
"RepeatableContainers.java:182"$0$0$0$5$30$"	 * A single explicit mapping."
"RepeatableContainers.java:183"$0$0$0$1$4$"	 */"
"RepeatableContainers.java:184"$0$0$0$7$80$"	private static class ExplicitRepeatableContainer extends RepeatableContainers {"
"RepeatableContainers.java:185"$0$0$0$0$0$""
"RepeatableContainers.java:186"$0$0$0$6$55$"		private final Class<? extends Annotation> repeatable;"
"RepeatableContainers.java:187"$0$0$0$0$0$""
"RepeatableContainers.java:188"$0$0$0$6$54$"		private final Class<? extends Annotation> container;"
"RepeatableContainers.java:189"$0$0$0$0$0$""
"RepeatableContainers.java:190"$0$0$0$4$35$"		private final Method valueMethod;"
"RepeatableContainers.java:191"$0$0$0$0$0$""
"RepeatableContainers.java:192"$0$0$0$3$68$"		ExplicitRepeatableContainer(@Nullable RepeatableContainers parent,"
"RepeatableContainers.java:193"$0$0$0$10$94$"				Class<? extends Annotation> repeatable, @Nullable Class<? extends Annotation> container) {"
"RepeatableContainers.java:194"$0$0$0$0$0$""
"RepeatableContainers.java:195"$0$0$0$1$17$"			super(parent);"
"RepeatableContainers.java:196"$0$0$0$6$61$"			Assert.notNull(repeatable, ""Repeatable must not be null"");"
"RepeatableContainers.java:197"$0$0$0$5$27$"			if (container == null) {"
"RepeatableContainers.java:198"$0$0$0$3$44$"				container = deduceContainer(repeatable);"
"RepeatableContainers.java:199"$0$0$0$1$4$"			}"
"RepeatableContainers.java:200"$1$0$0$4$98$"			Method valueMethod = AttributeMethods.forAnnotationType(container).get(MergedAnnotation.VALUE);"
"RepeatableContainers.java:201"$0$0$0$2$8$"			try {"
"RepeatableContainers.java:202"$0$0$0$5$30$"				if (valueMethod == null) {"
"RepeatableContainers.java:203"$0$0$0$6$62$"					throw new NoSuchMethodException(""No value method found"");"
"RepeatableContainers.java:204"$0$0$0$1$5$"				}"
"RepeatableContainers.java:205"$1$0$0$4$54$"				Class<?> returnType = valueMethod.getReturnType();"
"RepeatableContainers.java:206"$1$0$0$7$79$"				if (!returnType.isArray() || returnType.getComponentType() != repeatable) {"
"RepeatableContainers.java:207"$0$0$0$6$68$"					throw new AnnotationConfigurationException(""Container type ["" +"
"RepeatableContainers.java:208"$1$0$0$2$28$"							container.getName() +"
"RepeatableContainers.java:209"$0$0$0$13$68$"							""] must declare a 'value' attribute for an array of type ["" +"
"RepeatableContainers.java:210"$1$0$0$3$35$"							repeatable.getName() + ""]"");"
"RepeatableContainers.java:211"$0$0$0$1$5$"				}"
"RepeatableContainers.java:212"$0$0$0$1$4$"			}"
"RepeatableContainers.java:213"$0$0$0$4$48$"			catch (AnnotationConfigurationException ex) {"
"RepeatableContainers.java:214"$0$0$0$2$13$"				throw ex;"
"RepeatableContainers.java:215"$0$0$0$1$4$"			}"
"RepeatableContainers.java:216"$0$0$0$4$25$"			catch (Throwable ex) {"
"RepeatableContainers.java:217"$0$0$0$3$47$"				throw new AnnotationConfigurationException("
"RepeatableContainers.java:218"$1$0$0$9$71$"						""Invalid declaration of container type ["" + container.getName() +"
"RepeatableContainers.java:219"$1$0$0$9$69$"								""] for repeatable annotation ["" + repeatable.getName() + ""]"","
"RepeatableContainers.java:220"$0$0$0$1$10$"						ex);"
"RepeatableContainers.java:221"$0$0$0$1$4$"			}"
"RepeatableContainers.java:222"$0$0$0$3$32$"			this.repeatable = repeatable;"
"RepeatableContainers.java:223"$0$0$0$3$30$"			this.container = container;"
"RepeatableContainers.java:224"$0$0$0$3$34$"			this.valueMethod = valueMethod;"
"RepeatableContainers.java:225"$0$0$0$1$3$"		}"
"RepeatableContainers.java:226"$0$0$0$0$0$""
"RepeatableContainers.java:227"$0$0$0$9$95$"		private Class<? extends Annotation> deduceContainer(Class<? extends Annotation> repeatable) {"
"RepeatableContainers.java:228"$1$0$0$4$70$"			Repeatable annotation = repeatable.getAnnotation(Repeatable.class);"
"RepeatableContainers.java:229"$0$0$0$12$89$"			Assert.notNull(annotation, () -> ""Annotation type must be a repeatable annotation: "" +"
"RepeatableContainers.java:230"$1$0$0$9$70$"						""failed to resolve container type for "" + repeatable.getName());"
"RepeatableContainers.java:231"$0$0$0$2$29$"			return annotation.value();"
"RepeatableContainers.java:232"$0$0$0$1$3$"		}"
"RepeatableContainers.java:233"$0$0$0$0$0$""
"RepeatableContainers.java:234"$0$0$0$1$11$"		@Override"
"RepeatableContainers.java:235"$0$0$0$1$11$"		@Nullable"
"RepeatableContainers.java:236"$0$0$0$4$63$"		Annotation[] findRepeatedAnnotations(Annotation annotation) {"
"RepeatableContainers.java:237"$0$0$0$3$70$"			if (this.container.isAssignableFrom(annotation.annotationType())) {"
"RepeatableContainers.java:238"$0$0$0$4$85$"				return (Annotation[]) ReflectionUtils.invokeMethod(this.valueMethod, annotation);"
"RepeatableContainers.java:239"$0$0$0$1$4$"			}"
"RepeatableContainers.java:240"$0$0$0$2$52$"			return super.findRepeatedAnnotations(annotation);"
"RepeatableContainers.java:241"$0$0$0$1$3$"		}"
"RepeatableContainers.java:242"$0$0$0$0$0$""
"RepeatableContainers.java:243"$0$0$0$1$11$"		@Override"
"RepeatableContainers.java:244"$0$0$0$6$49$"		public boolean equals(@Nullable Object other) {"
"RepeatableContainers.java:245"$0$0$0$3$30$"			if (!super.equals(other)) {"
"RepeatableContainers.java:246"$0$0$0$2$17$"				return false;"
"RepeatableContainers.java:247"$0$0$0$1$4$"			}"
"RepeatableContainers.java:248"$0$0$0$5$78$"			ExplicitRepeatableContainer otherErc = (ExplicitRepeatableContainer) other;"
"RepeatableContainers.java:249"$0$0$0$4$101$"			return (this.container.equals(otherErc.container) && this.repeatable.equals(otherErc.repeatable));"
"RepeatableContainers.java:250"$0$0$0$1$3$"		}"
"RepeatableContainers.java:251"$0$0$0$0$0$""
"RepeatableContainers.java:252"$0$0$0$1$11$"		@Override"
"RepeatableContainers.java:253"$0$0$0$4$25$"		public int hashCode() {"
"RepeatableContainers.java:254"$0$0$0$4$35$"			int hashCode = super.hashCode();"
"RepeatableContainers.java:255"$0$0$0$7$56$"			hashCode = 31 * hashCode + this.container.hashCode();"
"RepeatableContainers.java:256"$0$0$0$7$57$"			hashCode = 31 * hashCode + this.repeatable.hashCode();"
"RepeatableContainers.java:257"$0$0$0$2$19$"			return hashCode;"
"RepeatableContainers.java:258"$0$0$0$1$3$"		}"
"RepeatableContainers.java:259"$0$0$0$1$2$"	}"
"RepeatableContainers.java:260"$0$0$0$0$0$""
"RepeatableContainers.java:261"$0$0$0$0$0$""
"RepeatableContainers.java:262"$0$0$0$1$4$"	/**"
"RepeatableContainers.java:263"$0$0$0$4$29$"	 * No repeatable containers."
"RepeatableContainers.java:264"$0$0$0$1$4$"	 */"
"RepeatableContainers.java:265"$0$0$0$7$75$"	private static class NoRepeatableContainers extends RepeatableContainers {"
"RepeatableContainers.java:266"$0$0$0$0$0$""
"RepeatableContainers.java:267"$0$0$0$7$80$"		private static NoRepeatableContainers INSTANCE = new NoRepeatableContainers();"
"RepeatableContainers.java:268"$0$0$0$0$0$""
"RepeatableContainers.java:269"$0$0$0$2$28$"		NoRepeatableContainers() {"
"RepeatableContainers.java:270"$0$0$0$1$15$"			super(null);"
"RepeatableContainers.java:271"$0$0$0$1$3$"		}"
"RepeatableContainers.java:272"$0$0$0$1$2$"	}"
"RepeatableContainers.java:273"$0$0$0$0$0$""
"RepeatableContainers.java:274"$0$0$0$1$1$"}"
"DataBufferDecoder.java:1"$0$0$0$1$2$"/*"
"DataBufferDecoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"DataBufferDecoder.java:3"$0$0$0$1$2$" *"
"DataBufferDecoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DataBufferDecoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DataBufferDecoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DataBufferDecoder.java:7"$0$0$0$1$2$" *"
"DataBufferDecoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DataBufferDecoder.java:9"$0$0$0$1$2$" *"
"DataBufferDecoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DataBufferDecoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DataBufferDecoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DataBufferDecoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DataBufferDecoder.java:14"$0$0$0$5$33$" * limitations under the License."
"DataBufferDecoder.java:15"$0$0$0$1$3$" */"
"DataBufferDecoder.java:16"$0$0$0$0$0$""
"DataBufferDecoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"DataBufferDecoder.java:18"$0$0$0$0$0$""
"DataBufferDecoder.java:19"$0$0$0$2$21$"import java.util.Map;"
"DataBufferDecoder.java:20"$0$0$0$0$0$""
"DataBufferDecoder.java:21"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"DataBufferDecoder.java:22"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"DataBufferDecoder.java:23"$0$0$0$0$0$""
"DataBufferDecoder.java:24"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"DataBufferDecoder.java:25"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"DataBufferDecoder.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"DataBufferDecoder.java:27"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"DataBufferDecoder.java:28"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"DataBufferDecoder.java:29"$0$0$0$0$0$""
"DataBufferDecoder.java:30"$0$0$0$1$3$"/**"
"DataBufferDecoder.java:31"$0$0$0$8$66$" * Simple pass-through decoder for {@link DataBuffer DataBuffers}."
"DataBufferDecoder.java:32"$0$0$0$1$2$" *"
"DataBufferDecoder.java:33"$0$0$0$9$68$" * <p><strong>Note:</strong> The data buffers should be released via"
"DataBufferDecoder.java:34"$0$0$0$3$81$" * {@link org.springframework.core.io.buffer.DataBufferUtils#release(DataBuffer)}"
"DataBufferDecoder.java:35"$0$0$0$13$71$" * after they have been consumed. In addition, if using {@code Flux} or"
"DataBufferDecoder.java:36"$0$0$0$12$76$" * {@code Mono} operators such as flatMap, reduce, and others that prefetch,"
"DataBufferDecoder.java:37"$0$0$0$12$66$" * cache, and skip or filter out data items internally, please add"
"DataBufferDecoder.java:38"$0$0$0$6$79$" * {@code doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release)} to the"
"DataBufferDecoder.java:39"$0$0$0$13$75$" * composition chain to ensure cached data buffers are released prior to an"
"DataBufferDecoder.java:40"$0$0$0$5$32$" * error or cancellation signal."
"DataBufferDecoder.java:41"$0$0$0$1$2$" *"
"DataBufferDecoder.java:42"$0$0$0$4$24$" * @author Arjen Poutsma"
"DataBufferDecoder.java:43"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"DataBufferDecoder.java:44"$0$0$0$3$13$" * @since 5.0"
"DataBufferDecoder.java:45"$0$0$0$1$3$" */"
"DataBufferDecoder.java:46"$0$0$0$6$78$"public class DataBufferDecoder extends AbstractDataBufferDecoder<DataBuffer> {"
"DataBufferDecoder.java:47"$0$0$0$0$0$""
"DataBufferDecoder.java:48"$0$0$0$3$29$"	public DataBufferDecoder() {"
"DataBufferDecoder.java:49"$0$0$0$1$27$"		super(MimeTypeUtils.ALL);"
"DataBufferDecoder.java:50"$0$0$0$1$2$"	}"
"DataBufferDecoder.java:51"$0$0$0$0$0$""
"DataBufferDecoder.java:52"$0$0$0$0$0$""
"DataBufferDecoder.java:53"$0$0$0$1$10$"	@Override"
"DataBufferDecoder.java:54"$0$0$0$8$84$"	public boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"DataBufferDecoder.java:55"$0$0$0$3$69$"		return (DataBuffer.class.isAssignableFrom(elementType.toClass()) &&"
"DataBufferDecoder.java:56"$0$0$0$2$44$"				super.canDecode(elementType, mimeType));"
"DataBufferDecoder.java:57"$0$0$0$1$2$"	}"
"DataBufferDecoder.java:58"$0$0$0$0$0$""
"DataBufferDecoder.java:59"$0$0$0$1$10$"	@Override"
"DataBufferDecoder.java:60"$0$0$0$6$88$"	public Flux<DataBuffer> decode(Publisher<DataBuffer> input, ResolvableType elementType,"
"DataBufferDecoder.java:61"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"DataBufferDecoder.java:62"$0$0$0$0$0$""
"DataBufferDecoder.java:63"$0$0$0$2$26$"		return Flux.from(input);"
"DataBufferDecoder.java:64"$0$0$0$1$2$"	}"
"DataBufferDecoder.java:65"$0$0$0$0$0$""
"DataBufferDecoder.java:66"$0$0$0$1$10$"	@Override"
"DataBufferDecoder.java:67"$0$0$0$6$72$"	public DataBuffer decode(DataBuffer buffer, ResolvableType elementType,"
"DataBufferDecoder.java:68"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"DataBufferDecoder.java:69"$0$0$0$0$0$""
"DataBufferDecoder.java:70"$0$0$0$3$32$"		if (logger.isDebugEnabled()) {"
"DataBufferDecoder.java:71"$1$0$0$9$93$"			logger.debug(Hints.getLogPrefix(hints) + ""Read "" + buffer.readableByteCount() + "" bytes"");"
"DataBufferDecoder.java:72"$0$0$0$1$3$"		}"
"DataBufferDecoder.java:73"$0$0$0$2$16$"		return buffer;"
"DataBufferDecoder.java:74"$0$0$0$1$2$"	}"
"DataBufferDecoder.java:75"$0$0$0$0$0$""
"DataBufferDecoder.java:76"$0$0$0$1$1$"}"
"SimpleAnnotationMetadata.java:1"$0$0$0$1$2$"/*"
"SimpleAnnotationMetadata.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"SimpleAnnotationMetadata.java:3"$0$0$0$1$2$" *"
"SimpleAnnotationMetadata.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SimpleAnnotationMetadata.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SimpleAnnotationMetadata.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SimpleAnnotationMetadata.java:7"$0$0$0$1$2$" *"
"SimpleAnnotationMetadata.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SimpleAnnotationMetadata.java:9"$0$0$0$1$2$" *"
"SimpleAnnotationMetadata.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SimpleAnnotationMetadata.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SimpleAnnotationMetadata.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SimpleAnnotationMetadata.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SimpleAnnotationMetadata.java:14"$0$0$0$5$33$" * limitations under the License."
"SimpleAnnotationMetadata.java:15"$0$0$0$1$3$" */"
"SimpleAnnotationMetadata.java:16"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:17"$0$0$0$2$51$"package org.springframework.core.type.classreading;"
"SimpleAnnotationMetadata.java:18"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:19"$0$0$0$2$29$"import java.util.Collections;"
"SimpleAnnotationMetadata.java:20"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"SimpleAnnotationMetadata.java:21"$0$0$0$2$21$"import java.util.Set;"
"SimpleAnnotationMetadata.java:22"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:23"$0$0$0$2$39$"import org.springframework.asm.Opcodes;"
"SimpleAnnotationMetadata.java:24"$0$0$0$2$61$"import org.springframework.core.annotation.MergedAnnotations;"
"SimpleAnnotationMetadata.java:25"$0$0$0$2$56$"import org.springframework.core.type.AnnotationMetadata;"
"SimpleAnnotationMetadata.java:26"$0$0$0$2$52$"import org.springframework.core.type.MethodMetadata;"
"SimpleAnnotationMetadata.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SimpleAnnotationMetadata.java:28"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:29"$0$0$0$1$3$"/**"
"SimpleAnnotationMetadata.java:30"$0$0$0$6$44$" * {@link AnnotationMetadata} created from a"
"SimpleAnnotationMetadata.java:31"$0$0$0$3$50$" * {@link SimpleAnnotationMetadataReadingVisitor}."
"SimpleAnnotationMetadata.java:32"$0$0$0$1$2$" *"
"SimpleAnnotationMetadata.java:33"$0$0$0$4$23$" * @author Phillip Webb"
"SimpleAnnotationMetadata.java:34"$0$0$0$3$13$" * @since 5.2"
"SimpleAnnotationMetadata.java:35"$0$0$0$1$3$" */"
"SimpleAnnotationMetadata.java:36"$0$0$0$6$68$"final class SimpleAnnotationMetadata implements AnnotationMetadata {"
"SimpleAnnotationMetadata.java:37"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:38"$0$0$0$4$32$"	private final String className;"
"SimpleAnnotationMetadata.java:39"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:40"$0$0$0$4$26$"	private final int access;"
"SimpleAnnotationMetadata.java:41"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:42"$0$0$0$1$10$"	@Nullable"
"SimpleAnnotationMetadata.java:43"$0$0$0$4$41$"	private final String enclosingClassName;"
"SimpleAnnotationMetadata.java:44"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:45"$0$0$0$1$10$"	@Nullable"
"SimpleAnnotationMetadata.java:46"$0$0$0$4$37$"	private final String superClassName;"
"SimpleAnnotationMetadata.java:47"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:48"$0$0$0$4$45$"	private final boolean independentInnerClass;"
"SimpleAnnotationMetadata.java:49"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:50"$0$0$0$4$39$"	private final String[] interfaceNames;"
"SimpleAnnotationMetadata.java:51"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:52"$0$0$0$4$41$"	private final String[] memberClassNames;"
"SimpleAnnotationMetadata.java:53"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:54"$0$0$0$4$49$"	private final MethodMetadata[] annotatedMethods;"
"SimpleAnnotationMetadata.java:55"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:56"$0$0$0$4$45$"	private final MergedAnnotations annotations;"
"SimpleAnnotationMetadata.java:57"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:58"$0$0$0$1$10$"	@Nullable"
"SimpleAnnotationMetadata.java:59"$0$0$0$3$37$"	private Set<String> annotationTypes;"
"SimpleAnnotationMetadata.java:60"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:61"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:62"$0$0$0$7$92$"	SimpleAnnotationMetadata(String className, int access, @Nullable String enclosingClassName,"
"SimpleAnnotationMetadata.java:63"$0$0$0$7$91$"			@Nullable String superClassName, boolean independentInnerClass, String[] interfaceNames,"
"SimpleAnnotationMetadata.java:64"$0$0$0$7$97$"			String[] memberClassNames, MethodMetadata[] annotatedMethods, MergedAnnotations annotations) {"
"SimpleAnnotationMetadata.java:65"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:66"$0$0$0$3$29$"		this.className = className;"
"SimpleAnnotationMetadata.java:67"$0$0$0$3$23$"		this.access = access;"
"SimpleAnnotationMetadata.java:68"$0$0$0$3$47$"		this.enclosingClassName = enclosingClassName;"
"SimpleAnnotationMetadata.java:69"$0$0$0$3$39$"		this.superClassName = superClassName;"
"SimpleAnnotationMetadata.java:70"$0$0$0$3$53$"		this.independentInnerClass = independentInnerClass;"
"SimpleAnnotationMetadata.java:71"$0$0$0$3$39$"		this.interfaceNames = interfaceNames;"
"SimpleAnnotationMetadata.java:72"$0$0$0$3$43$"		this.memberClassNames = memberClassNames;"
"SimpleAnnotationMetadata.java:73"$0$0$0$3$43$"		this.annotatedMethods = annotatedMethods;"
"SimpleAnnotationMetadata.java:74"$0$0$0$3$33$"		this.annotations = annotations;"
"SimpleAnnotationMetadata.java:75"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:76"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:77"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:78"$1$0$0$4$31$"	public String getClassName() {"
"SimpleAnnotationMetadata.java:79"$0$0$0$2$24$"		return this.className;"
"SimpleAnnotationMetadata.java:80"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:81"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:82"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:83"$0$0$0$4$31$"	public boolean isInterface() {"
"SimpleAnnotationMetadata.java:84"$0$0$0$6$52$"		return (this.access & Opcodes.ACC_INTERFACE) != 0;"
"SimpleAnnotationMetadata.java:85"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:86"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:87"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:88"$0$0$0$4$32$"	public boolean isAnnotation() {"
"SimpleAnnotationMetadata.java:89"$0$0$0$6$53$"		return (this.access & Opcodes.ACC_ANNOTATION) != 0;"
"SimpleAnnotationMetadata.java:90"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:91"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:92"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:93"$0$0$0$4$30$"	public boolean isAbstract() {"
"SimpleAnnotationMetadata.java:94"$0$0$0$6$51$"		return (this.access & Opcodes.ACC_ABSTRACT) != 0;"
"SimpleAnnotationMetadata.java:95"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:96"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:97"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:98"$0$0$0$4$27$"	public boolean isFinal() {"
"SimpleAnnotationMetadata.java:99"$0$0$0$6$48$"		return (this.access & Opcodes.ACC_FINAL) != 0;"
"SimpleAnnotationMetadata.java:100"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:101"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:102"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:103"$0$0$0$4$33$"	public boolean isIndependent() {"
"SimpleAnnotationMetadata.java:104"$0$0$0$6$73$"		return (this.enclosingClassName == null || this.independentInnerClass);"
"SimpleAnnotationMetadata.java:105"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:106"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:107"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:108"$0$0$0$1$10$"	@Nullable"
"SimpleAnnotationMetadata.java:109"$1$0$0$4$40$"	public String getEnclosingClassName() {"
"SimpleAnnotationMetadata.java:110"$0$0$0$2$33$"		return this.enclosingClassName;"
"SimpleAnnotationMetadata.java:111"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:112"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:113"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:114"$0$0$0$1$10$"	@Nullable"
"SimpleAnnotationMetadata.java:115"$1$0$0$4$36$"	public String getSuperClassName() {"
"SimpleAnnotationMetadata.java:116"$0$0$0$2$29$"		return this.superClassName;"
"SimpleAnnotationMetadata.java:117"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:118"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:119"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:120"$1$0$0$4$38$"	public String[] getInterfaceNames() {"
"SimpleAnnotationMetadata.java:121"$0$0$0$2$37$"		return this.interfaceNames.clone();"
"SimpleAnnotationMetadata.java:122"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:123"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:124"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:125"$1$0$0$4$40$"	public String[] getMemberClassNames() {"
"SimpleAnnotationMetadata.java:126"$0$0$0$2$39$"		return this.memberClassNames.clone();"
"SimpleAnnotationMetadata.java:127"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:128"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:129"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:130"$1$0$0$4$42$"	public Set<String> getAnnotationTypes() {"
"SimpleAnnotationMetadata.java:131"$0$0$0$4$53$"		Set<String> annotationTypes = this.annotationTypes;"
"SimpleAnnotationMetadata.java:132"$0$0$0$5$32$"		if (annotationTypes == null) {"
"SimpleAnnotationMetadata.java:133"$0$0$0$3$49$"			annotationTypes = Collections.unmodifiableSet("
"SimpleAnnotationMetadata.java:134"$1$0$0$1$52$"					AnnotationMetadata.super.getAnnotationTypes());"
"SimpleAnnotationMetadata.java:135"$0$0$0$3$42$"			this.annotationTypes = annotationTypes;"
"SimpleAnnotationMetadata.java:136"$0$0$0$1$3$"		}"
"SimpleAnnotationMetadata.java:137"$0$0$0$2$25$"		return annotationTypes;"
"SimpleAnnotationMetadata.java:138"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:139"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:140"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:141"$1$0$0$5$72$"	public Set<MethodMetadata> getAnnotatedMethods(String annotationName) {"
"SimpleAnnotationMetadata.java:142"$0$0$0$4$46$"		Set<MethodMetadata> annotatedMethods = null;"
"SimpleAnnotationMetadata.java:143"$0$0$0$10$58$"		for (int i = 0; i < this.annotatedMethods.length; i++) {"
"SimpleAnnotationMetadata.java:144"$0$0$0$3$62$"			if (this.annotatedMethods[i].isAnnotated(annotationName)) {"
"SimpleAnnotationMetadata.java:145"$0$0$0$5$35$"				if (annotatedMethods == null) {"
"SimpleAnnotationMetadata.java:146"$0$0$0$4$47$"					annotatedMethods = new LinkedHashSet<>(4);"
"SimpleAnnotationMetadata.java:147"$0$0$0$1$5$"				}"
"SimpleAnnotationMetadata.java:148"$0$0$0$1$51$"				annotatedMethods.add(this.annotatedMethods[i]);"
"SimpleAnnotationMetadata.java:149"$0$0$0$1$4$"			}"
"SimpleAnnotationMetadata.java:150"$0$0$0$1$3$"		}"
"SimpleAnnotationMetadata.java:151"$0$0$0$8$78$"		return annotatedMethods != null ? annotatedMethods : Collections.emptySet();"
"SimpleAnnotationMetadata.java:152"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:153"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:154"$0$0$0$1$10$"	@Override"
"SimpleAnnotationMetadata.java:155"$1$0$0$4$44$"	public MergedAnnotations getAnnotations() {"
"SimpleAnnotationMetadata.java:156"$0$0$0$2$26$"		return this.annotations;"
"SimpleAnnotationMetadata.java:157"$0$0$0$1$2$"	}"
"SimpleAnnotationMetadata.java:158"$0$0$0$0$0$""
"SimpleAnnotationMetadata.java:159"$0$0$0$1$1$"}"
"MissingMergedAnnotation.java:1"$0$0$0$1$2$"/*"
"MissingMergedAnnotation.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"MissingMergedAnnotation.java:3"$0$0$0$1$2$" *"
"MissingMergedAnnotation.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MissingMergedAnnotation.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MissingMergedAnnotation.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MissingMergedAnnotation.java:7"$0$0$0$1$2$" *"
"MissingMergedAnnotation.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MissingMergedAnnotation.java:9"$0$0$0$1$2$" *"
"MissingMergedAnnotation.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MissingMergedAnnotation.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MissingMergedAnnotation.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MissingMergedAnnotation.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MissingMergedAnnotation.java:14"$0$0$0$5$33$" * limitations under the License."
"MissingMergedAnnotation.java:15"$0$0$0$1$3$" */"
"MissingMergedAnnotation.java:16"$0$0$0$0$0$""
"MissingMergedAnnotation.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"MissingMergedAnnotation.java:18"$0$0$0$0$0$""
"MissingMergedAnnotation.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"MissingMergedAnnotation.java:20"$0$0$0$2$29$"import java.util.Collections;"
"MissingMergedAnnotation.java:21"$0$0$0$2$22$"import java.util.List;"
"MissingMergedAnnotation.java:22"$0$0$0$2$21$"import java.util.Map;"
"MissingMergedAnnotation.java:23"$0$0$0$2$40$"import java.util.NoSuchElementException;"
"MissingMergedAnnotation.java:24"$0$0$0$2$26$"import java.util.Optional;"
"MissingMergedAnnotation.java:25"$0$0$0$2$35$"import java.util.function.Function;"
"MissingMergedAnnotation.java:26"$0$0$0$2$36$"import java.util.function.Predicate;"
"MissingMergedAnnotation.java:27"$0$0$0$0$0$""
"MissingMergedAnnotation.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MissingMergedAnnotation.java:29"$0$0$0$0$0$""
"MissingMergedAnnotation.java:30"$0$0$0$1$3$"/**"
"MissingMergedAnnotation.java:31"$0$0$0$9$68$" * An {@link AbstractMergedAnnotation} used as the implementation of"
"MissingMergedAnnotation.java:32"$0$0$0$3$38$" * {@link MergedAnnotation#missing()}."
"MissingMergedAnnotation.java:33"$0$0$0$1$2$" *"
"MissingMergedAnnotation.java:34"$0$0$0$4$23$" * @author Phillip Webb"
"MissingMergedAnnotation.java:35"$0$0$0$4$26$" * @author Juergen Hoeller"
"MissingMergedAnnotation.java:36"$0$0$0$3$13$" * @since 5.2"
"MissingMergedAnnotation.java:37"$0$0$0$6$33$" * @param <A> the annotation type"
"MissingMergedAnnotation.java:38"$0$0$0$1$3$" */"
"MissingMergedAnnotation.java:39"$0$0$0$8$95$"final class MissingMergedAnnotation<A extends Annotation> extends AbstractMergedAnnotation<A> {"
"MissingMergedAnnotation.java:40"$0$0$0$0$0$""
"MissingMergedAnnotation.java:41"$0$0$0$8$92$"	private static final MissingMergedAnnotation<?> INSTANCE = new MissingMergedAnnotation<>();"
"MissingMergedAnnotation.java:42"$0$0$0$0$0$""
"MissingMergedAnnotation.java:43"$0$0$0$0$0$""
"MissingMergedAnnotation.java:44"$0$0$0$3$36$"	private MissingMergedAnnotation() {"
"MissingMergedAnnotation.java:45"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:46"$0$0$0$0$0$""
"MissingMergedAnnotation.java:47"$0$0$0$0$0$""
"MissingMergedAnnotation.java:48"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:49"$1$0$0$4$28$"	public Class<A> getType() {"
"MissingMergedAnnotation.java:50"$1$0$0$9$80$"		throw new NoSuchElementException(""Unable to get type for missing annotation"");"
"MissingMergedAnnotation.java:51"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:52"$0$0$0$0$0$""
"MissingMergedAnnotation.java:53"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:54"$0$0$0$4$29$"	public boolean isPresent() {"
"MissingMergedAnnotation.java:55"$0$0$0$2$15$"		return false;"
"MissingMergedAnnotation.java:56"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:57"$0$0$0$0$0$""
"MissingMergedAnnotation.java:58"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:59"$0$0$0$1$10$"	@Nullable"
"MissingMergedAnnotation.java:60"$1$0$0$4$28$"	public Object getSource() {"
"MissingMergedAnnotation.java:61"$0$0$0$2$14$"		return null;"
"MissingMergedAnnotation.java:62"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:63"$0$0$0$0$0$""
"MissingMergedAnnotation.java:64"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:65"$0$0$0$1$10$"	@Nullable"
"MissingMergedAnnotation.java:66"$1$0$0$4$45$"	public MergedAnnotation<?> getMetaSource() {"
"MissingMergedAnnotation.java:67"$0$0$0$2$14$"		return null;"
"MissingMergedAnnotation.java:68"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:69"$0$0$0$0$0$""
"MissingMergedAnnotation.java:70"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:71"$1$0$0$4$39$"	public MergedAnnotation<?> getRoot() {"
"MissingMergedAnnotation.java:72"$0$0$0$2$14$"		return this;"
"MissingMergedAnnotation.java:73"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:74"$0$0$0$0$0$""
"MissingMergedAnnotation.java:75"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:76"$1$0$0$6$58$"	public List<Class<? extends Annotation>> getMetaTypes() {"
"MissingMergedAnnotation.java:77"$0$0$0$2$33$"		return Collections.emptyList();"
"MissingMergedAnnotation.java:78"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:79"$0$0$0$0$0$""
"MissingMergedAnnotation.java:80"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:81"$1$0$0$4$27$"	public int getDistance() {"
"MissingMergedAnnotation.java:82"$0$0$0$2$12$"		return -1;"
"MissingMergedAnnotation.java:83"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:84"$0$0$0$0$0$""
"MissingMergedAnnotation.java:85"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:86"$1$0$0$4$33$"	public int getAggregateIndex() {"
"MissingMergedAnnotation.java:87"$0$0$0$2$12$"		return -1;"
"MissingMergedAnnotation.java:88"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:89"$0$0$0$0$0$""
"MissingMergedAnnotation.java:90"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:91"$0$0$0$5$58$"	public boolean hasNonDefaultValue(String attributeName) {"
"MissingMergedAnnotation.java:92"$0$0$0$3$35$"		throw new NoSuchElementException("
"MissingMergedAnnotation.java:93"$0$0$0$8$64$"				""Unable to check non-default value for missing annotation"");"
"MissingMergedAnnotation.java:94"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:95"$0$0$0$0$0$""
"MissingMergedAnnotation.java:96"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:97"$0$0$0$5$55$"	public boolean hasDefaultValue(String attributeName) {"
"MissingMergedAnnotation.java:98"$0$0$0$3$35$"		throw new NoSuchElementException("
"MissingMergedAnnotation.java:99"$0$0$0$8$60$"				""Unable to check default value for missing annotation"");"
"MissingMergedAnnotation.java:100"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:101"$0$0$0$0$0$""
"MissingMergedAnnotation.java:102"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:103"$1$0$0$8$71$"	public <T> Optional<T> getValue(String attributeName, Class<T> type) {"
"MissingMergedAnnotation.java:104"$0$0$0$2$26$"		return Optional.empty();"
"MissingMergedAnnotation.java:105"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:106"$0$0$0$0$0$""
"MissingMergedAnnotation.java:107"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:108"$1$0$0$9$88$"	public <T> Optional<T> getDefaultValue(@Nullable String attributeName, Class<T> type) {"
"MissingMergedAnnotation.java:109"$0$0$0$2$26$"		return Optional.empty();"
"MissingMergedAnnotation.java:110"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:111"$0$0$0$0$0$""
"MissingMergedAnnotation.java:112"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:113"$0$0$0$5$75$"	public MergedAnnotation<A> filterAttributes(Predicate<String> predicate) {"
"MissingMergedAnnotation.java:114"$0$0$0$2$14$"		return this;"
"MissingMergedAnnotation.java:115"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:116"$0$0$0$0$0$""
"MissingMergedAnnotation.java:117"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:118"$0$0$0$4$55$"	public MergedAnnotation<A> withNonMergedAttributes() {"
"MissingMergedAnnotation.java:119"$0$0$0$2$14$"		return this;"
"MissingMergedAnnotation.java:120"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:121"$0$0$0$0$0$""
"MissingMergedAnnotation.java:122"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:123"$0$0$0$5$75$"	public AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {"
"MissingMergedAnnotation.java:124"$0$0$0$3$36$"		return new AnnotationAttributes();"
"MissingMergedAnnotation.java:125"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:126"$0$0$0$0$0$""
"MissingMergedAnnotation.java:127"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:128"$0$0$0$6$57$"	public Map<String, Object> asMap(Adapt... adaptations) {"
"MissingMergedAnnotation.java:129"$0$0$0$2$32$"		return Collections.emptyMap();"
"MissingMergedAnnotation.java:130"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:131"$0$0$0$0$0$""
"MissingMergedAnnotation.java:132"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:133"$0$0$0$12$113$"	public <T extends Map<String, Object>> T asMap(Function<MergedAnnotation<?>, T> factory, Adapt... adaptations) {"
"MissingMergedAnnotation.java:134"$0$0$0$2$29$"		return factory.apply(this);"
"MissingMergedAnnotation.java:135"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:136"$0$0$0$0$0$""
"MissingMergedAnnotation.java:137"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:138"$0$0$0$4$27$"	public String toString() {"
"MissingMergedAnnotation.java:139"$0$0$0$2$21$"		return ""(missing)"";"
"MissingMergedAnnotation.java:140"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:141"$0$0$0$0$0$""
"MissingMergedAnnotation.java:142"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:143"$1$0$0$7$86$"	public <T extends Annotation> MergedAnnotation<T> getAnnotation(String attributeName,"
"MissingMergedAnnotation.java:144"$0$0$0$5$49$"			Class<T> type) throws NoSuchElementException {"
"MissingMergedAnnotation.java:145"$0$0$0$0$0$""
"MissingMergedAnnotation.java:146"$0$0$0$3$35$"		throw new NoSuchElementException("
"MissingMergedAnnotation.java:147"$1$0$0$8$60$"				""Unable to get attribute value for missing annotation"");"
"MissingMergedAnnotation.java:148"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:149"$0$0$0$0$0$""
"MissingMergedAnnotation.java:150"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:151"$1$0$0$6$72$"	public <T extends Annotation> MergedAnnotation<T>[] getAnnotationArray("
"MissingMergedAnnotation.java:152"$0$0$0$7$71$"			String attributeName, Class<T> type) throws NoSuchElementException {"
"MissingMergedAnnotation.java:153"$0$0$0$0$0$""
"MissingMergedAnnotation.java:154"$0$0$0$3$35$"		throw new NoSuchElementException("
"MissingMergedAnnotation.java:155"$1$0$0$8$60$"				""Unable to get attribute value for missing annotation"");"
"MissingMergedAnnotation.java:156"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:157"$0$0$0$0$0$""
"MissingMergedAnnotation.java:158"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:159"$1$0$0$8$73$"	protected <T> T getAttributeValue(String attributeName, Class<T> type) {"
"MissingMergedAnnotation.java:160"$0$0$0$3$35$"		throw new NoSuchElementException("
"MissingMergedAnnotation.java:161"$1$0$0$8$60$"				""Unable to get attribute value for missing annotation"");"
"MissingMergedAnnotation.java:162"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:163"$0$0$0$0$0$""
"MissingMergedAnnotation.java:164"$0$0$0$1$10$"	@Override"
"MissingMergedAnnotation.java:165"$0$0$0$4$34$"	protected A createSynthesized() {"
"MissingMergedAnnotation.java:166"$0$0$0$7$78$"		throw new NoSuchElementException(""Unable to synthesize missing annotation"");"
"MissingMergedAnnotation.java:167"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:168"$0$0$0$0$0$""
"MissingMergedAnnotation.java:169"$0$0$0$0$0$""
"MissingMergedAnnotation.java:170"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"MissingMergedAnnotation.java:171"$1$0$0$7$66$"	static <A extends Annotation> MergedAnnotation<A> getInstance() {"
"MissingMergedAnnotation.java:172"$0$0$0$3$40$"		return (MergedAnnotation<A>) INSTANCE;"
"MissingMergedAnnotation.java:173"$0$0$0$1$2$"	}"
"MissingMergedAnnotation.java:174"$0$0$0$0$0$""
"MissingMergedAnnotation.java:175"$0$0$0$1$1$"}"
"PrioritizedParameterNameDiscoverer.java:1"$0$0$0$1$2$"/*"
"PrioritizedParameterNameDiscoverer.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"PrioritizedParameterNameDiscoverer.java:3"$0$0$0$1$2$" *"
"PrioritizedParameterNameDiscoverer.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PrioritizedParameterNameDiscoverer.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PrioritizedParameterNameDiscoverer.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PrioritizedParameterNameDiscoverer.java:7"$0$0$0$1$2$" *"
"PrioritizedParameterNameDiscoverer.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PrioritizedParameterNameDiscoverer.java:9"$0$0$0$1$2$" *"
"PrioritizedParameterNameDiscoverer.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PrioritizedParameterNameDiscoverer.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PrioritizedParameterNameDiscoverer.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PrioritizedParameterNameDiscoverer.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PrioritizedParameterNameDiscoverer.java:14"$0$0$0$5$33$" * limitations under the License."
"PrioritizedParameterNameDiscoverer.java:15"$0$0$0$1$3$" */"
"PrioritizedParameterNameDiscoverer.java:16"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:17"$0$0$0$2$33$"package org.springframework.core;"
"PrioritizedParameterNameDiscoverer.java:18"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:19"$0$0$0$2$37$"import java.lang.reflect.Constructor;"
"PrioritizedParameterNameDiscoverer.java:20"$0$0$0$2$32$"import java.lang.reflect.Method;"
"PrioritizedParameterNameDiscoverer.java:21"$0$0$0$2$28$"import java.util.LinkedList;"
"PrioritizedParameterNameDiscoverer.java:22"$0$0$0$2$22$"import java.util.List;"
"PrioritizedParameterNameDiscoverer.java:23"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PrioritizedParameterNameDiscoverer.java:25"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:26"$0$0$0$1$3$"/**"
"PrioritizedParameterNameDiscoverer.java:27"$0$0$0$8$79$" * {@link ParameterNameDiscoverer} implementation that tries several discoverer"
"PrioritizedParameterNameDiscoverer.java:28"$0$0$0$12$81$" * delegates in succession. Those added first in the {@code addDiscoverer} method"
"PrioritizedParameterNameDiscoverer.java:29"$0$0$0$14$78$" * have highest priority. If one returns {@code null}, the next will be tried."
"PrioritizedParameterNameDiscoverer.java:30"$0$0$0$1$2$" *"
"PrioritizedParameterNameDiscoverer.java:31"$0$0$0$13$78$" * <p>The default behavior is to return {@code null} if no discoverer matches."
"PrioritizedParameterNameDiscoverer.java:32"$0$0$0$1$2$" *"
"PrioritizedParameterNameDiscoverer.java:33"$0$0$0$4$22$" * @author Rod Johnson"
"PrioritizedParameterNameDiscoverer.java:34"$0$0$0$4$26$" * @author Juergen Hoeller"
"PrioritizedParameterNameDiscoverer.java:35"$0$0$0$3$13$" * @since 2.0"
"PrioritizedParameterNameDiscoverer.java:36"$0$0$0$1$3$" */"
"PrioritizedParameterNameDiscoverer.java:37"$0$0$0$6$84$"public class PrioritizedParameterNameDiscoverer implements ParameterNameDiscoverer {"
"PrioritizedParameterNameDiscoverer.java:38"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:39"$0$0$0$7$91$"	private final List<ParameterNameDiscoverer> parameterNameDiscoverers = new LinkedList<>();"
"PrioritizedParameterNameDiscoverer.java:40"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:41"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:42"$0$0$0$1$4$"	/**"
"PrioritizedParameterNameDiscoverer.java:43"$0$0$0$11$73$"	 * Add a further {@link ParameterNameDiscoverer} delegate to the list of"
"PrioritizedParameterNameDiscoverer.java:44"$0$0$0$7$76$"	 * discoverers that this {@code PrioritizedParameterNameDiscoverer} checks."
"PrioritizedParameterNameDiscoverer.java:45"$0$0$0$1$4$"	 */"
"PrioritizedParameterNameDiscoverer.java:46"$0$0$0$5$57$"	public void addDiscoverer(ParameterNameDiscoverer pnd) {"
"PrioritizedParameterNameDiscoverer.java:47"$0$0$0$1$41$"		this.parameterNameDiscoverers.add(pnd);"
"PrioritizedParameterNameDiscoverer.java:48"$0$0$0$1$2$"	}"
"PrioritizedParameterNameDiscoverer.java:49"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:50"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:51"$0$0$0$1$10$"	@Override"
"PrioritizedParameterNameDiscoverer.java:52"$0$0$0$1$10$"	@Nullable"
"PrioritizedParameterNameDiscoverer.java:53"$1$0$0$5$51$"	public String[] getParameterNames(Method method) {"
"PrioritizedParameterNameDiscoverer.java:54"$0$0$0$6$69$"		for (ParameterNameDiscoverer pnd : this.parameterNameDiscoverers) {"
"PrioritizedParameterNameDiscoverer.java:55"$1$0$0$4$51$"			String[] result = pnd.getParameterNames(method);"
"PrioritizedParameterNameDiscoverer.java:56"$0$0$0$5$24$"			if (result != null) {"
"PrioritizedParameterNameDiscoverer.java:57"$0$0$0$2$18$"				return result;"
"PrioritizedParameterNameDiscoverer.java:58"$0$0$0$1$4$"			}"
"PrioritizedParameterNameDiscoverer.java:59"$0$0$0$1$3$"		}"
"PrioritizedParameterNameDiscoverer.java:60"$0$0$0$2$14$"		return null;"
"PrioritizedParameterNameDiscoverer.java:61"$0$0$0$1$2$"	}"
"PrioritizedParameterNameDiscoverer.java:62"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:63"$0$0$0$1$10$"	@Override"
"PrioritizedParameterNameDiscoverer.java:64"$0$0$0$1$10$"	@Nullable"
"PrioritizedParameterNameDiscoverer.java:65"$1$0$0$5$57$"	public String[] getParameterNames(Constructor<?> ctor) {"
"PrioritizedParameterNameDiscoverer.java:66"$0$0$0$6$69$"		for (ParameterNameDiscoverer pnd : this.parameterNameDiscoverers) {"
"PrioritizedParameterNameDiscoverer.java:67"$1$0$0$4$49$"			String[] result = pnd.getParameterNames(ctor);"
"PrioritizedParameterNameDiscoverer.java:68"$0$0$0$5$24$"			if (result != null) {"
"PrioritizedParameterNameDiscoverer.java:69"$0$0$0$2$18$"				return result;"
"PrioritizedParameterNameDiscoverer.java:70"$0$0$0$1$4$"			}"
"PrioritizedParameterNameDiscoverer.java:71"$0$0$0$1$3$"		}"
"PrioritizedParameterNameDiscoverer.java:72"$0$0$0$2$14$"		return null;"
"PrioritizedParameterNameDiscoverer.java:73"$0$0$0$1$2$"	}"
"PrioritizedParameterNameDiscoverer.java:74"$0$0$0$0$0$""
"PrioritizedParameterNameDiscoverer.java:75"$0$0$0$1$1$"}"
"MergedAnnotationPredicates.java:1"$0$0$0$1$2$"/*"
"MergedAnnotationPredicates.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"MergedAnnotationPredicates.java:3"$0$0$0$1$2$" *"
"MergedAnnotationPredicates.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MergedAnnotationPredicates.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MergedAnnotationPredicates.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MergedAnnotationPredicates.java:7"$0$0$0$1$2$" *"
"MergedAnnotationPredicates.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MergedAnnotationPredicates.java:9"$0$0$0$1$2$" *"
"MergedAnnotationPredicates.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MergedAnnotationPredicates.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MergedAnnotationPredicates.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MergedAnnotationPredicates.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MergedAnnotationPredicates.java:14"$0$0$0$5$33$" * limitations under the License."
"MergedAnnotationPredicates.java:15"$0$0$0$1$3$" */"
"MergedAnnotationPredicates.java:16"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"MergedAnnotationPredicates.java:18"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"MergedAnnotationPredicates.java:20"$0$0$0$2$28$"import java.util.Collection;"
"MergedAnnotationPredicates.java:21"$0$0$0$2$25$"import java.util.HashSet;"
"MergedAnnotationPredicates.java:22"$0$0$0$2$21$"import java.util.Set;"
"MergedAnnotationPredicates.java:23"$0$0$0$2$35$"import java.util.function.Function;"
"MergedAnnotationPredicates.java:24"$0$0$0$2$36$"import java.util.function.Predicate;"
"MergedAnnotationPredicates.java:25"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MergedAnnotationPredicates.java:27"$0$0$0$2$39$"import org.springframework.util.Assert;"
"MergedAnnotationPredicates.java:28"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"MergedAnnotationPredicates.java:29"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:30"$0$0$0$1$3$"/**"
"MergedAnnotationPredicates.java:31"$0$0$0$9$69$" * Predicate implementations that provide various test operations for"
"MergedAnnotationPredicates.java:32"$0$0$0$4$46$" * {@link MergedAnnotation MergedAnnotations}."
"MergedAnnotationPredicates.java:33"$0$0$0$1$2$" *"
"MergedAnnotationPredicates.java:34"$0$0$0$4$23$" * @author Phillip Webb"
"MergedAnnotationPredicates.java:35"$0$0$0$3$13$" * @since 5.2"
"MergedAnnotationPredicates.java:36"$0$0$0$1$3$" */"
"MergedAnnotationPredicates.java:37"$0$0$0$5$50$"public abstract class MergedAnnotationPredicates {"
"MergedAnnotationPredicates.java:38"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:39"$0$0$0$3$39$"	private MergedAnnotationPredicates() {"
"MergedAnnotationPredicates.java:40"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:41"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:42"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:43"$0$0$0$1$4$"	/**"
"MergedAnnotationPredicates.java:44"$0$0$0$16$84$"	 * Create a new {@link Predicate} that evaluates to {@code true} if the name of the"
"MergedAnnotationPredicates.java:45"$1$0$0$9$82$"	 * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in"
"MergedAnnotationPredicates.java:46"$0$0$0$4$24$"	 * the specified array."
"MergedAnnotationPredicates.java:47"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationPredicates.java:48"$0$0$0$9$53$"	 * @param typeNames the names that should be matched"
"MergedAnnotationPredicates.java:49"$0$0$0$10$59$"	 * @return a {@link Predicate} to test the annotation type"
"MergedAnnotationPredicates.java:50"$0$0$0$1$4$"	 */"
"MergedAnnotationPredicates.java:51"$0$0$0$11$108$"	public static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(String... typeNames) {"
"MergedAnnotationPredicates.java:52"$2$0$0$5$94$"		return annotation -> ObjectUtils.containsElement(typeNames, annotation.getType().getName());"
"MergedAnnotationPredicates.java:53"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:54"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:55"$0$0$0$1$4$"	/**"
"MergedAnnotationPredicates.java:56"$0$0$0$13$72$"	 * Create a new {@link Predicate} that evaluates to {@code true} if the"
"MergedAnnotationPredicates.java:57"$1$0$0$9$82$"	 * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in"
"MergedAnnotationPredicates.java:58"$0$0$0$4$24$"	 * the specified array."
"MergedAnnotationPredicates.java:59"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationPredicates.java:60"$0$0$0$9$49$"	 * @param types the types that should be matched"
"MergedAnnotationPredicates.java:61"$0$0$0$10$59$"	 * @return a {@link Predicate} to test the annotation type"
"MergedAnnotationPredicates.java:62"$0$0$0$1$4$"	 */"
"MergedAnnotationPredicates.java:63"$0$0$0$11$106$"	public static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Class<?>... types) {"
"MergedAnnotationPredicates.java:64"$1$0$0$5$80$"		return annotation -> ObjectUtils.containsElement(types, annotation.getType());"
"MergedAnnotationPredicates.java:65"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:66"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:67"$0$0$0$1$4$"	/**"
"MergedAnnotationPredicates.java:68"$0$0$0$13$72$"	 * Create a new {@link Predicate} that evaluates to {@code true} if the"
"MergedAnnotationPredicates.java:69"$1$0$0$9$82$"	 * {@linkplain MergedAnnotation#getType() merged annotation type} is contained in"
"MergedAnnotationPredicates.java:70"$0$0$0$4$29$"	 * the specified collection."
"MergedAnnotationPredicates.java:71"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationPredicates.java:72"$0$0$0$12$65$"	 * @param types the type names or classes that should be matched"
"MergedAnnotationPredicates.java:73"$0$0$0$10$59$"	 * @return a {@link Predicate} to test the annotation type"
"MergedAnnotationPredicates.java:74"$0$0$0$1$4$"	 */"
"MergedAnnotationPredicates.java:75"$0$0$0$11$108$"	public static <A extends Annotation> Predicate<MergedAnnotation<? extends A>> typeIn(Collection<?> types) {"
"MergedAnnotationPredicates.java:76"$0$0$0$4$37$"		return annotation -> types.stream()"
"MergedAnnotationPredicates.java:77"$1$0$0$10$87$"				.map(type -> type instanceof Class ? ((Class<?>) type).getName() : type.toString())"
"MergedAnnotationPredicates.java:78"$2$0$0$3$75$"				.anyMatch(typeName -> typeName.equals(annotation.getType().getName()));"
"MergedAnnotationPredicates.java:79"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:80"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:81"$0$0$0$1$4$"	/**"
"MergedAnnotationPredicates.java:82"$0$0$0$12$73$"	 * Create a new stateful, single use {@link Predicate} that matches only"
"MergedAnnotationPredicates.java:83"$0$0$0$10$53$"	 * the first run of an extracted value. For example,"
"MergedAnnotationPredicates.java:84"$0$0$0$3$77$"	 * {@code MergedAnnotationPredicates.firstRunOf(MergedAnnotation::distance)}"
"MergedAnnotationPredicates.java:85"$0$0$0$13$74$"	 * will match the first annotation, and any subsequent runs that have the"
"MergedAnnotationPredicates.java:86"$0$0$0$3$18$"	 * same distance."
"MergedAnnotationPredicates.java:87"$0$0$0$12$74$"	 * <p>NOTE: This predicate only matches the first run. Once the extracted"
"MergedAnnotationPredicates.java:88"$0$0$0$11$75$"	 * value changes, the predicate always returns {@code false}. For example,"
"MergedAnnotationPredicates.java:89"$0$0$0$16$77$"	 * if you have a set of annotations with distances {@code [1, 1, 2, 1]} then"
"MergedAnnotationPredicates.java:90"$0$0$0$7$34$"	 * only the first two will match."
"MergedAnnotationPredicates.java:91"$0$0$0$11$69$"	 * @param valueExtractor function used to extract the value to check"
"MergedAnnotationPredicates.java:92"$0$0$0$13$75$"	 * @return a {@link Predicate} that matches the first run of the extracted"
"MergedAnnotationPredicates.java:93"$0$0$0$2$10$"	 * values"
"MergedAnnotationPredicates.java:94"$0$0$0$1$4$"	 */"
"MergedAnnotationPredicates.java:95"$0$0$0$7$80$"	public static <A extends Annotation> Predicate<MergedAnnotation<A>> firstRunOf("
"MergedAnnotationPredicates.java:96"$0$0$0$6$61$"			Function<? super MergedAnnotation<A>, ?> valueExtractor) {"
"MergedAnnotationPredicates.java:97"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:98"$0$0$0$3$51$"		return new FirstRunOfPredicate<>(valueExtractor);"
"MergedAnnotationPredicates.java:99"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:100"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:101"$0$0$0$1$4$"	/**"
"MergedAnnotationPredicates.java:102"$0$0$0$11$68$"	 * Create a new stateful, single use {@link Predicate} that matches"
"MergedAnnotationPredicates.java:103"$0$0$0$12$71$"	 * annotations that are unique based on the extracted key. For example"
"MergedAnnotationPredicates.java:104"$1$0$0$4$77$"	 * {@code MergedAnnotationPredicates.unique(MergedAnnotation::getType)} will"
"MergedAnnotationPredicates.java:105"$0$0$0$10$54$"	 * match the first time a unique type is encountered."
"MergedAnnotationPredicates.java:106"$0$0$0$13$73$"	 * @param keyExtractor function used to extract the key used to test for"
"MergedAnnotationPredicates.java:107"$0$0$0$2$14$"	 * uniqueness"
"MergedAnnotationPredicates.java:108"$0$0$0$13$77$"	 * @return a {@link Predicate} that matches a unique annotation based on the"
"MergedAnnotationPredicates.java:109"$0$0$0$3$17$"	 * extracted key"
"MergedAnnotationPredicates.java:110"$0$0$0$1$4$"	 */"
"MergedAnnotationPredicates.java:111"$0$0$0$8$79$"	public static <A extends Annotation, K> Predicate<MergedAnnotation<A>> unique("
"MergedAnnotationPredicates.java:112"$0$0$0$6$59$"			Function<? super MergedAnnotation<A>, K> keyExtractor) {"
"MergedAnnotationPredicates.java:113"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:114"$0$0$0$3$45$"		return new UniquePredicate<>(keyExtractor);"
"MergedAnnotationPredicates.java:115"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:116"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:117"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:118"$0$0$0$1$4$"	/**"
"MergedAnnotationPredicates.java:119"$0$0$0$6$45$"	 * {@link Predicate} implementation used for"
"MergedAnnotationPredicates.java:120"$0$0$0$3$60$"	 * {@link MergedAnnotationPredicates#firstRunOf(Function)}."
"MergedAnnotationPredicates.java:121"$0$0$0$1$4$"	 */"
"MergedAnnotationPredicates.java:122"$0$0$0$9$107$"	private static class FirstRunOfPredicate<A extends Annotation> implements Predicate<MergedAnnotation<A>> {"
"MergedAnnotationPredicates.java:123"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:124"$0$0$0$7$72$"		private final Function<? super MergedAnnotation<A>, ?> valueExtractor;"
"MergedAnnotationPredicates.java:125"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:126"$0$0$0$3$31$"		private boolean hasLastValue;"
"MergedAnnotationPredicates.java:127"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:128"$0$0$0$1$11$"		@Nullable"
"MergedAnnotationPredicates.java:129"$0$0$0$3$27$"		private Object lastValue;"
"MergedAnnotationPredicates.java:130"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:131"$0$0$0$6$80$"		FirstRunOfPredicate(Function<? super MergedAnnotation<A>, ?> valueExtractor) {"
"MergedAnnotationPredicates.java:132"$0$0$0$7$70$"			Assert.notNull(valueExtractor, ""Value extractor must not be null"");"
"MergedAnnotationPredicates.java:133"$0$0$0$3$40$"			this.valueExtractor = valueExtractor;"
"MergedAnnotationPredicates.java:134"$0$0$0$1$3$"		}"
"MergedAnnotationPredicates.java:135"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:136"$0$0$0$1$11$"		@Override"
"MergedAnnotationPredicates.java:137"$0$0$0$6$65$"		public boolean test(@Nullable MergedAnnotation<A> annotation) {"
"MergedAnnotationPredicates.java:138"$0$0$0$3$28$"			if (!this.hasLastValue) {"
"MergedAnnotationPredicates.java:139"$0$0$0$3$29$"				this.hasLastValue = true;"
"MergedAnnotationPredicates.java:140"$0$0$0$3$59$"				this.lastValue = this.valueExtractor.apply(annotation);"
"MergedAnnotationPredicates.java:141"$0$0$0$1$4$"			}"
"MergedAnnotationPredicates.java:142"$0$0$0$4$56$"			Object value = this.valueExtractor.apply(annotation);"
"MergedAnnotationPredicates.java:143"$0$0$0$3$60$"			return ObjectUtils.nullSafeEquals(value, this.lastValue);"
"MergedAnnotationPredicates.java:144"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:145"$0$0$0$1$3$"		}"
"MergedAnnotationPredicates.java:146"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:147"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:148"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:149"$0$0$0$1$4$"	/**"
"MergedAnnotationPredicates.java:150"$0$0$0$6$45$"	 * {@link Predicate} implementation used for"
"MergedAnnotationPredicates.java:151"$0$0$0$3$56$"	 * {@link MergedAnnotationPredicates#unique(Function)}."
"MergedAnnotationPredicates.java:152"$0$0$0$1$4$"	 */"
"MergedAnnotationPredicates.java:153"$0$0$0$10$106$"	private static class UniquePredicate<A extends Annotation, K> implements Predicate<MergedAnnotation<A>> {"
"MergedAnnotationPredicates.java:154"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:155"$0$0$0$7$70$"		private final Function<? super MergedAnnotation<A>, K> keyExtractor;"
"MergedAnnotationPredicates.java:156"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:157"$0$0$0$7$46$"		private final Set<K> seen = new HashSet<>();"
"MergedAnnotationPredicates.java:158"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:159"$0$0$0$6$74$"		UniquePredicate(Function<? super MergedAnnotation<A>, K> keyExtractor) {"
"MergedAnnotationPredicates.java:160"$0$0$0$7$66$"			Assert.notNull(keyExtractor, ""Key extractor must not be null"");"
"MergedAnnotationPredicates.java:161"$0$0$0$3$36$"			this.keyExtractor = keyExtractor;"
"MergedAnnotationPredicates.java:162"$0$0$0$1$3$"		}"
"MergedAnnotationPredicates.java:163"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:164"$0$0$0$1$11$"		@Override"
"MergedAnnotationPredicates.java:165"$0$0$0$6$65$"		public boolean test(@Nullable MergedAnnotation<A> annotation) {"
"MergedAnnotationPredicates.java:166"$0$0$0$4$47$"			K key = this.keyExtractor.apply(annotation);"
"MergedAnnotationPredicates.java:167"$0$0$0$2$29$"			return this.seen.add(key);"
"MergedAnnotationPredicates.java:168"$0$0$0$1$3$"		}"
"MergedAnnotationPredicates.java:169"$0$0$0$1$2$"	}"
"MergedAnnotationPredicates.java:170"$0$0$0$0$0$""
"MergedAnnotationPredicates.java:171"$0$0$0$1$1$"}"
"SimpleCommandLineArgsParser.java:1"$0$0$0$1$2$"/*"
"SimpleCommandLineArgsParser.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"SimpleCommandLineArgsParser.java:3"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SimpleCommandLineArgsParser.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SimpleCommandLineArgsParser.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SimpleCommandLineArgsParser.java:7"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SimpleCommandLineArgsParser.java:9"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SimpleCommandLineArgsParser.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SimpleCommandLineArgsParser.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SimpleCommandLineArgsParser.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SimpleCommandLineArgsParser.java:14"$0$0$0$5$33$" * limitations under the License."
"SimpleCommandLineArgsParser.java:15"$0$0$0$1$3$" */"
"SimpleCommandLineArgsParser.java:16"$0$0$0$0$0$""
"SimpleCommandLineArgsParser.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"SimpleCommandLineArgsParser.java:18"$0$0$0$0$0$""
"SimpleCommandLineArgsParser.java:19"$0$0$0$1$3$"/**"
"SimpleCommandLineArgsParser.java:20"$0$0$0$14$77$" * Parses a {@code String[]} of command line arguments in order to populate a"
"SimpleCommandLineArgsParser.java:21"$0$0$0$4$34$" * {@link CommandLineArgs} object."
"SimpleCommandLineArgsParser.java:22"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:23"$0$0$0$5$41$" * <h3>Working with option arguments</h3>"
"SimpleCommandLineArgsParser.java:24"$0$0$0$9$55$" * <p>Option arguments must adhere to the exact syntax:"
"SimpleCommandLineArgsParser.java:25"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:26"$0$0$0$3$47$" * <pre class=""code"">--optName[=optValue]</pre>"
"SimpleCommandLineArgsParser.java:27"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:28"$0$0$0$15$76$" * <p>That is, options must be prefixed with ""{@code --}"" and may or may not"
"SimpleCommandLineArgsParser.java:29"$0$0$0$16$81$" * specify a value. If a value is specified, the name and value must be separated"
"SimpleCommandLineArgsParser.java:30"$0$0$0$13$79$" * <em>without spaces</em> by an equals sign (""=""). The value may optionally be"
"SimpleCommandLineArgsParser.java:31"$0$0$0$4$19$" * an empty string."
"SimpleCommandLineArgsParser.java:32"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:33"$0$0$0$6$46$" * <h4>Valid examples of option arguments</h4>"
"SimpleCommandLineArgsParser.java:34"$0$0$0$3$21$" * <pre class=""code"">"
"SimpleCommandLineArgsParser.java:35"$0$0$0$2$8$" * --foo"
"SimpleCommandLineArgsParser.java:36"$0$0$0$2$9$" * --foo="
"SimpleCommandLineArgsParser.java:37"$0$0$0$2$11$" * --foo="""""
"SimpleCommandLineArgsParser.java:38"$0$0$0$2$12$" * --foo=bar"
"SimpleCommandLineArgsParser.java:39"$0$0$0$4$23$" * --foo=""bar then baz"""
"SimpleCommandLineArgsParser.java:40"$0$0$0$2$26$" * --foo=bar,baz,biz</pre>"
"SimpleCommandLineArgsParser.java:41"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:42"$0$0$0$6$48$" * <h4>Invalid examples of option arguments</h4>"
"SimpleCommandLineArgsParser.java:43"$0$0$0$3$21$" * <pre class=""code"">"
"SimpleCommandLineArgsParser.java:44"$0$0$0$2$7$" * -foo"
"SimpleCommandLineArgsParser.java:45"$0$0$0$3$12$" * --foo bar"
"SimpleCommandLineArgsParser.java:46"$0$0$0$4$14$" * --foo = bar"
"SimpleCommandLineArgsParser.java:47"$0$0$0$4$38$" * --foo=bar --foo=baz --foo=biz</pre>"
"SimpleCommandLineArgsParser.java:48"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:49"$0$0$0$5$45$" * <h3>Working with non-option arguments</h3>"
"SimpleCommandLineArgsParser.java:50"$0$0$0$14$82$" * <p>Any and all arguments specified at the command line without the ""{@code --}"""
"SimpleCommandLineArgsParser.java:51"$0$0$0$12$80$" * option prefix will be considered as ""non-option arguments"" and made available"
"SimpleCommandLineArgsParser.java:52"$1$0$0$6$65$" * through the {@link CommandLineArgs#getNonOptionArgs()} method."
"SimpleCommandLineArgsParser.java:53"$0$0$0$1$2$" *"
"SimpleCommandLineArgsParser.java:54"$0$0$0$4$22$" * @author Chris Beams"
"SimpleCommandLineArgsParser.java:55"$0$0$0$4$22$" * @author Sam Brannen"
"SimpleCommandLineArgsParser.java:56"$0$0$0$3$13$" * @since 3.1"
"SimpleCommandLineArgsParser.java:57"$0$0$0$1$3$" */"
"SimpleCommandLineArgsParser.java:58"$0$0$0$3$35$"class SimpleCommandLineArgsParser {"
"SimpleCommandLineArgsParser.java:59"$0$0$0$0$0$""
"SimpleCommandLineArgsParser.java:60"$0$0$0$1$4$"	/**"
"SimpleCommandLineArgsParser.java:61"$0$0$0$13$81$"	 * Parse the given {@code String} array based on the rules described {@linkplain"
"SimpleCommandLineArgsParser.java:62"$0$0$0$6$67$"	 * SimpleCommandLineArgsParser above}, returning a fully-populated"
"SimpleCommandLineArgsParser.java:63"$0$0$0$4$35$"	 * {@link CommandLineArgs} object."
"SimpleCommandLineArgsParser.java:64"$0$0$0$12$78$"	 * @param args command line arguments, typically from a {@code main()} method"
"SimpleCommandLineArgsParser.java:65"$0$0$0$1$4$"	 */"
"SimpleCommandLineArgsParser.java:66"$0$0$0$5$47$"	public CommandLineArgs parse(String... args) {"
"SimpleCommandLineArgsParser.java:67"$0$0$0$5$58$"		CommandLineArgs commandLineArgs = new CommandLineArgs();"
"SimpleCommandLineArgsParser.java:68"$0$0$0$6$27$"		for (String arg : args) {"
"SimpleCommandLineArgsParser.java:69"$0$0$0$3$30$"			if (arg.startsWith(""--"")) {"
"SimpleCommandLineArgsParser.java:70"$0$0$0$4$41$"				String optionText = arg.substring(2);"
"SimpleCommandLineArgsParser.java:71"$0$0$0$2$22$"				String optionName;"
"SimpleCommandLineArgsParser.java:72"$0$0$0$4$30$"				String optionValue = null;"
"SimpleCommandLineArgsParser.java:73"$0$0$0$4$52$"				int indexOfEqualsSign = optionText.indexOf('=');"
"SimpleCommandLineArgsParser.java:74"$0$0$0$5$33$"				if (indexOfEqualsSign > -1) {"
"SimpleCommandLineArgsParser.java:75"$0$0$0$4$61$"					optionName = optionText.substring(0, indexOfEqualsSign);"
"SimpleCommandLineArgsParser.java:76"$0$0$0$5$63$"					optionValue = optionText.substring(indexOfEqualsSign + 1);"
"SimpleCommandLineArgsParser.java:77"$0$0$0$1$5$"				}"
"SimpleCommandLineArgsParser.java:78"$0$0$0$2$10$"				else {"
"SimpleCommandLineArgsParser.java:79"$0$0$0$3$29$"					optionName = optionText;"
"SimpleCommandLineArgsParser.java:80"$0$0$0$1$5$"				}"
"SimpleCommandLineArgsParser.java:81"$0$0$0$3$31$"				if (optionName.isEmpty()) {"
"SimpleCommandLineArgsParser.java:82"$0$0$0$8$75$"					throw new IllegalArgumentException(""Invalid argument syntax: "" + arg);"
"SimpleCommandLineArgsParser.java:83"$0$0$0$1$5$"				}"
"SimpleCommandLineArgsParser.java:84"$0$0$0$2$58$"				commandLineArgs.addOptionArg(optionName, optionValue);"
"SimpleCommandLineArgsParser.java:85"$0$0$0$1$4$"			}"
"SimpleCommandLineArgsParser.java:86"$0$0$0$2$9$"			else {"
"SimpleCommandLineArgsParser.java:87"$0$0$0$1$41$"				commandLineArgs.addNonOptionArg(arg);"
"SimpleCommandLineArgsParser.java:88"$0$0$0$1$4$"			}"
"SimpleCommandLineArgsParser.java:89"$0$0$0$1$3$"		}"
"SimpleCommandLineArgsParser.java:90"$0$0$0$2$25$"		return commandLineArgs;"
"SimpleCommandLineArgsParser.java:91"$0$0$0$1$2$"	}"
"SimpleCommandLineArgsParser.java:92"$0$0$0$0$0$""
"SimpleCommandLineArgsParser.java:93"$0$0$0$1$1$"}"
"StopWatch.java:1"$0$0$0$1$2$"/*"
"StopWatch.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"StopWatch.java:3"$0$0$0$1$2$" *"
"StopWatch.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StopWatch.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StopWatch.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StopWatch.java:7"$0$0$0$1$2$" *"
"StopWatch.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StopWatch.java:9"$0$0$0$1$2$" *"
"StopWatch.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StopWatch.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StopWatch.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StopWatch.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StopWatch.java:14"$0$0$0$5$33$" * limitations under the License."
"StopWatch.java:15"$0$0$0$1$3$" */"
"StopWatch.java:16"$0$0$0$0$0$""
"StopWatch.java:17"$0$0$0$2$33$"package org.springframework.util;"
"StopWatch.java:18"$0$0$0$0$0$""
"StopWatch.java:19"$0$0$0$2$30$"import java.text.NumberFormat;"
"StopWatch.java:20"$0$0$0$2$28$"import java.util.LinkedList;"
"StopWatch.java:21"$0$0$0$2$22$"import java.util.List;"
"StopWatch.java:22"$0$0$0$2$37$"import java.util.concurrent.TimeUnit;"
"StopWatch.java:23"$0$0$0$0$0$""
"StopWatch.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StopWatch.java:25"$0$0$0$0$0$""
"StopWatch.java:26"$0$0$0$1$3$"/**"
"StopWatch.java:27"$0$0$0$14$78$" * Simple stop watch, allowing for timing of a number of tasks, exposing total"
"StopWatch.java:28"$0$0$0$10$53$" * running time and running time for each named task."
"StopWatch.java:29"$0$0$0$1$2$" *"
"StopWatch.java:30"$0$0$0$10$77$" * <p>Conceals use of {@link System#nanoTime()}, improving the readability of"
"StopWatch.java:31"$0$0$0$10$70$" * application code and reducing the likelihood of calculation errors."
"StopWatch.java:32"$0$0$0$1$2$" *"
"StopWatch.java:33"$0$0$0$15$78$" * <p>Note that this object is not designed to be thread-safe and does not use"
"StopWatch.java:34"$0$0$0$2$19$" * synchronization."
"StopWatch.java:35"$0$0$0$1$2$" *"
"StopWatch.java:36"$0$0$0$11$79$" * <p>This class is normally used to verify performance during proof-of-concept"
"StopWatch.java:37"$0$0$0$12$75$" * work and in development, rather than as part of production applications."
"StopWatch.java:38"$0$0$0$1$2$" *"
"StopWatch.java:39"$0$0$0$13$73$" * <p>As of Spring Framework 5.2, running time is tracked and reported in"
"StopWatch.java:40"$0$0$0$2$15$" * nanoseconds."
"StopWatch.java:41"$0$0$0$1$2$" *"
"StopWatch.java:42"$0$0$0$4$22$" * @author Rod Johnson"
"StopWatch.java:43"$0$0$0$4$26$" * @author Juergen Hoeller"
"StopWatch.java:44"$0$0$0$4$22$" * @author Sam Brannen"
"StopWatch.java:45"$0$0$0$5$21$" * @since May 2, 2001"
"StopWatch.java:46"$0$0$0$1$3$" */"
"StopWatch.java:47"$0$0$0$4$24$"public class StopWatch {"
"StopWatch.java:48"$0$0$0$0$0$""
"StopWatch.java:49"$0$0$0$1$4$"	/**"
"StopWatch.java:50"$0$0$0$6$41$"	 * Identifier of this {@code StopWatch}."
"StopWatch.java:51"$0$0$0$13$71$"	 * <p>Handy when we have output from multiple stop watches and need to"
"StopWatch.java:52"$0$0$0$9$54$"	 * distinguish between them in log or console output."
"StopWatch.java:53"$0$0$0$1$4$"	 */"
"StopWatch.java:54"$0$0$0$4$25$"	private final String id;"
"StopWatch.java:55"$0$0$0$0$0$""
"StopWatch.java:56"$0$0$0$5$37$"	private boolean keepTaskList = true;"
"StopWatch.java:57"$0$0$0$0$0$""
"StopWatch.java:58"$0$0$0$7$60$"	private final List<TaskInfo> taskList = new LinkedList<>();"
"StopWatch.java:59"$0$0$0$0$0$""
"StopWatch.java:60"$0$0$0$8$39$"	/** Start time of the current task. */"
"StopWatch.java:61"$0$0$0$3$29$"	private long startTimeNanos;"
"StopWatch.java:62"$0$0$0$0$0$""
"StopWatch.java:63"$0$0$0$7$33$"	/** Name of the current task. */"
"StopWatch.java:64"$0$0$0$1$10$"	@Nullable"
"StopWatch.java:65"$0$0$0$3$32$"	private String currentTaskName;"
"StopWatch.java:66"$0$0$0$0$0$""
"StopWatch.java:67"$0$0$0$1$10$"	@Nullable"
"StopWatch.java:68"$0$0$0$3$31$"	private TaskInfo lastTaskInfo;"
"StopWatch.java:69"$0$0$0$0$0$""
"StopWatch.java:70"$0$0$0$3$23$"	private int taskCount;"
"StopWatch.java:71"$0$0$0$0$0$""
"StopWatch.java:72"$0$0$0$5$27$"	/** Total running time. */"
"StopWatch.java:73"$0$0$0$3$29$"	private long totalTimeNanos;"
"StopWatch.java:74"$0$0$0$0$0$""
"StopWatch.java:75"$0$0$0$0$0$""
"StopWatch.java:76"$0$0$0$1$4$"	/**"
"StopWatch.java:77"$0$0$0$6$38$"	 * Construct a new {@code StopWatch}."
"StopWatch.java:78"$0$0$0$6$31$"	 * <p>Does not start any task."
"StopWatch.java:79"$0$0$0$1$4$"	 */"
"StopWatch.java:80"$0$0$0$3$21$"	public StopWatch() {"
"StopWatch.java:81"$0$0$0$1$11$"		this("""");"
"StopWatch.java:82"$0$0$0$1$2$"	}"
"StopWatch.java:83"$0$0$0$0$0$""
"StopWatch.java:84"$0$0$0$1$4$"	/**"
"StopWatch.java:85"$0$0$0$10$56$"	 * Construct a new {@code StopWatch} with the given ID."
"StopWatch.java:86"$0$0$0$15$78$"	 * <p>The ID is handy when we have output from multiple stop watches and need"
"StopWatch.java:87"$0$0$0$5$32$"	 * to distinguish between them."
"StopWatch.java:88"$0$0$0$6$31$"	 * <p>Does not start any task."
"StopWatch.java:89"$0$0$0$8$44$"	 * @param id identifier for this stop watch"
"StopWatch.java:90"$0$0$0$1$4$"	 */"
"StopWatch.java:91"$0$0$0$4$30$"	public StopWatch(String id) {"
"StopWatch.java:92"$0$0$0$3$15$"		this.id = id;"
"StopWatch.java:93"$0$0$0$1$2$"	}"
"StopWatch.java:94"$0$0$0$0$0$""
"StopWatch.java:95"$0$0$0$0$0$""
"StopWatch.java:96"$0$0$0$1$4$"	/**"
"StopWatch.java:97"$0$0$0$12$71$"	 * Get the ID of this {@code StopWatch}, as specified on construction."
"StopWatch.java:98"$0$0$0$8$44$"	 * @return the ID (empty String by default)"
"StopWatch.java:99"$0$0$0$3$16$"	 * @since 4.2.2"
"StopWatch.java:100"$0$0$0$3$27$"	 * @see #StopWatch(String)"
"StopWatch.java:101"$0$0$0$1$4$"	 */"
"StopWatch.java:102"$1$0$0$4$24$"	public String getId() {"
"StopWatch.java:103"$0$0$0$2$17$"		return this.id;"
"StopWatch.java:104"$0$0$0$1$2$"	}"
"StopWatch.java:105"$0$0$0$0$0$""
"StopWatch.java:106"$0$0$0$1$4$"	/**"
"StopWatch.java:107"$0$0$0$11$68$"	 * Configure whether the {@link TaskInfo} array is built over time."
"StopWatch.java:108"$0$0$0$13$76$"	 * <p>Set this to {@code false} when using a {@code StopWatch} for millions"
"StopWatch.java:109"$0$0$0$10$72$"	 * of intervals; otherwise, the {@code TaskInfo} structure will consume"
"StopWatch.java:110"$0$0$0$3$21$"	 * excessive memory."
"StopWatch.java:111"$0$0$0$5$31$"	 * <p>Default is {@code true}."
"StopWatch.java:112"$0$0$0$1$4$"	 */"
"StopWatch.java:113"$0$0$0$5$52$"	public void setKeepTaskList(boolean keepTaskList) {"
"StopWatch.java:114"$0$0$0$3$35$"		this.keepTaskList = keepTaskList;"
"StopWatch.java:115"$0$0$0$1$2$"	}"
"StopWatch.java:116"$0$0$0$0$0$""
"StopWatch.java:117"$0$0$0$0$0$""
"StopWatch.java:118"$0$0$0$1$4$"	/**"
"StopWatch.java:119"$0$0$0$5$26$"	 * Start an unnamed task."
"StopWatch.java:120"$0$0$0$12$73$"	 * <p>The results are undefined if {@link #stop()} or timing methods are"
"StopWatch.java:121"$0$0$0$7$46$"	 * called without invoking this method first."
"StopWatch.java:122"$0$0$0$3$23$"	 * @see #start(String)"
"StopWatch.java:123"$0$0$0$3$16$"	 * @see #stop()"
"StopWatch.java:124"$0$0$0$1$4$"	 */"
"StopWatch.java:125"$0$0$0$6$51$"	public void start() throws IllegalStateException {"
"StopWatch.java:126"$0$0$0$1$12$"		start("""");"
"StopWatch.java:127"$0$0$0$1$2$"	}"
"StopWatch.java:128"$0$0$0$0$0$""
"StopWatch.java:129"$0$0$0$1$4$"	/**"
"StopWatch.java:130"$0$0$0$5$23$"	 * Start a named task."
"StopWatch.java:131"$0$0$0$12$73$"	 * <p>The results are undefined if {@link #stop()} or timing methods are"
"StopWatch.java:132"$0$0$0$7$46$"	 * called without invoking this method first."
"StopWatch.java:133"$0$0$0$10$49$"	 * @param taskName the name of the task to start"
"StopWatch.java:134"$0$0$0$3$17$"	 * @see #start()"
"StopWatch.java:135"$0$0$0$3$16$"	 * @see #stop()"
"StopWatch.java:136"$0$0$0$1$4$"	 */"
"StopWatch.java:137"$0$0$0$7$66$"	public void start(String taskName) throws IllegalStateException {"
"StopWatch.java:138"$0$0$0$5$37$"		if (this.currentTaskName != null) {"
"StopWatch.java:139"$0$0$0$8$82$"			throw new IllegalStateException(""Can't start StopWatch: it's already running"");"
"StopWatch.java:140"$0$0$0$1$3$"		}"
"StopWatch.java:141"$0$0$0$3$34$"		this.currentTaskName = taskName;"
"StopWatch.java:142"$0$0$0$3$42$"		this.startTimeNanos = System.nanoTime();"
"StopWatch.java:143"$0$0$0$1$2$"	}"
"StopWatch.java:144"$0$0$0$0$0$""
"StopWatch.java:145"$0$0$0$1$4$"	/**"
"StopWatch.java:146"$0$0$0$5$26$"	 * Stop the current task."
"StopWatch.java:147"$0$0$0$12$78$"	 * <p>The results are undefined if timing methods are called without invoking"
"StopWatch.java:148"$0$0$0$12$66$"	 * at least one pair of {@code start()} / {@code stop()} methods."
"StopWatch.java:149"$0$0$0$3$17$"	 * @see #start()"
"StopWatch.java:150"$0$0$0$3$23$"	 * @see #start(String)"
"StopWatch.java:151"$0$0$0$1$4$"	 */"
"StopWatch.java:152"$0$0$0$6$50$"	public void stop() throws IllegalStateException {"
"StopWatch.java:153"$0$0$0$5$37$"		if (this.currentTaskName == null) {"
"StopWatch.java:154"$0$0$0$8$77$"			throw new IllegalStateException(""Can't stop StopWatch: it's not running"");"
"StopWatch.java:155"$0$0$0$1$3$"		}"
"StopWatch.java:156"$0$0$0$6$58$"		long lastTime = System.nanoTime() - this.startTimeNanos;"
"StopWatch.java:157"$0$0$0$3$34$"		this.totalTimeNanos += lastTime;"
"StopWatch.java:158"$0$0$0$5$67$"		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime);"
"StopWatch.java:159"$0$0$0$3$26$"		if (this.keepTaskList) {"
"StopWatch.java:160"$0$0$0$1$40$"			this.taskList.add(this.lastTaskInfo);"
"StopWatch.java:161"$0$0$0$1$3$"		}"
"StopWatch.java:162"$0$0$0$1$19$"		++this.taskCount;"
"StopWatch.java:163"$0$0$0$3$30$"		this.currentTaskName = null;"
"StopWatch.java:164"$0$0$0$1$2$"	}"
"StopWatch.java:165"$0$0$0$0$0$""
"StopWatch.java:166"$0$0$0$1$4$"	/**"
"StopWatch.java:167"$0$0$0$9$66$"	 * Determine whether this {@code StopWatch} is currently running."
"StopWatch.java:168"$0$0$0$3$27$"	 * @see #currentTaskName()"
"StopWatch.java:169"$0$0$0$1$4$"	 */"
"StopWatch.java:170"$0$0$0$4$29$"	public boolean isRunning() {"
"StopWatch.java:171"$0$0$0$4$40$"		return (this.currentTaskName != null);"
"StopWatch.java:172"$0$0$0$1$2$"	}"
"StopWatch.java:173"$0$0$0$0$0$""
"StopWatch.java:174"$0$0$0$1$4$"	/**"
"StopWatch.java:175"$0$0$0$11$55$"	 * Get the name of the currently running task, if any."
"StopWatch.java:176"$0$0$0$3$16$"	 * @since 4.2.2"
"StopWatch.java:177"$0$0$0$3$21$"	 * @see #isRunning()"
"StopWatch.java:178"$0$0$0$1$4$"	 */"
"StopWatch.java:179"$0$0$0$1$10$"	@Nullable"
"StopWatch.java:180"$0$0$0$4$34$"	public String currentTaskName() {"
"StopWatch.java:181"$0$0$0$2$30$"		return this.currentTaskName;"
"StopWatch.java:182"$0$0$0$1$2$"	}"
"StopWatch.java:183"$0$0$0$0$0$""
"StopWatch.java:184"$0$0$0$1$4$"	/**"
"StopWatch.java:185"$0$0$0$11$55$"	 * Get the time taken by the last task in nanoseconds."
"StopWatch.java:186"$0$0$0$3$14$"	 * @since 5.2"
"StopWatch.java:187"$1$0$0$3$33$"	 * @see #getLastTaskTimeMillis()"
"StopWatch.java:188"$0$0$0$1$4$"	 */"
"StopWatch.java:189"$1$0$0$6$66$"	public long getLastTaskTimeNanos() throws IllegalStateException {"
"StopWatch.java:190"$0$0$0$5$34$"		if (this.lastTaskInfo == null) {"
"StopWatch.java:191"$1$0$0$10$81$"			throw new IllegalStateException(""No tasks run: can't get last task interval"");"
"StopWatch.java:192"$0$0$0$1$3$"		}"
"StopWatch.java:193"$1$0$0$2$42$"		return this.lastTaskInfo.getTimeNanos();"
"StopWatch.java:194"$0$0$0$1$2$"	}"
"StopWatch.java:195"$0$0$0$0$0$""
"StopWatch.java:196"$0$0$0$1$4$"	/**"
"StopWatch.java:197"$0$0$0$11$56$"	 * Get the time taken by the last task in milliseconds."
"StopWatch.java:198"$1$0$0$3$32$"	 * @see #getLastTaskTimeNanos()"
"StopWatch.java:199"$0$0$0$1$4$"	 */"
"StopWatch.java:200"$1$0$0$6$67$"	public long getLastTaskTimeMillis() throws IllegalStateException {"
"StopWatch.java:201"$0$0$0$5$34$"		if (this.lastTaskInfo == null) {"
"StopWatch.java:202"$1$0$0$10$81$"			throw new IllegalStateException(""No tasks run: can't get last task interval"");"
"StopWatch.java:203"$0$0$0$1$3$"		}"
"StopWatch.java:204"$1$0$0$2$43$"		return this.lastTaskInfo.getTimeMillis();"
"StopWatch.java:205"$0$0$0$1$2$"	}"
"StopWatch.java:206"$0$0$0$0$0$""
"StopWatch.java:207"$0$0$0$1$4$"	/**"
"StopWatch.java:208"$0$0$0$8$34$"	 * Get the name of the last task."
"StopWatch.java:209"$0$0$0$1$4$"	 */"
"StopWatch.java:210"$1$0$0$6$63$"	public String getLastTaskName() throws IllegalStateException {"
"StopWatch.java:211"$0$0$0$5$34$"		if (this.lastTaskInfo == null) {"
"StopWatch.java:212"$1$0$0$10$77$"			throw new IllegalStateException(""No tasks run: can't get last task name"");"
"StopWatch.java:213"$0$0$0$1$3$"		}"
"StopWatch.java:214"$1$0$0$2$41$"		return this.lastTaskInfo.getTaskName();"
"StopWatch.java:215"$0$0$0$1$2$"	}"
"StopWatch.java:216"$0$0$0$0$0$""
"StopWatch.java:217"$0$0$0$1$4$"	/**"
"StopWatch.java:218"$0$0$0$10$51$"	 * Get the last task as a {@link TaskInfo} object."
"StopWatch.java:219"$0$0$0$1$4$"	 */"
"StopWatch.java:220"$1$0$0$6$65$"	public TaskInfo getLastTaskInfo() throws IllegalStateException {"
"StopWatch.java:221"$0$0$0$5$34$"		if (this.lastTaskInfo == null) {"
"StopWatch.java:222"$1$0$0$10$77$"			throw new IllegalStateException(""No tasks run: can't get last task info"");"
"StopWatch.java:223"$0$0$0$1$3$"		}"
"StopWatch.java:224"$0$0$0$2$27$"		return this.lastTaskInfo;"
"StopWatch.java:225"$0$0$0$1$2$"	}"
"StopWatch.java:226"$0$0$0$0$0$""
"StopWatch.java:227"$0$0$0$0$0$""
"StopWatch.java:228"$0$0$0$1$4$"	/**"
"StopWatch.java:229"$0$0$0$10$52$"	 * Get the total time in nanoseconds for all tasks."
"StopWatch.java:230"$0$0$0$3$14$"	 * @since 5.2"
"StopWatch.java:231"$1$0$0$3$30$"	 * @see #getTotalTimeMillis()"
"StopWatch.java:232"$1$0$0$3$31$"	 * @see #getTotalTimeSeconds()"
"StopWatch.java:233"$0$0$0$1$4$"	 */"
"StopWatch.java:234"$1$0$0$4$34$"	public long getTotalTimeNanos() {"
"StopWatch.java:235"$0$0$0$2$29$"		return this.totalTimeNanos;"
"StopWatch.java:236"$0$0$0$1$2$"	}"
"StopWatch.java:237"$0$0$0$0$0$""
"StopWatch.java:238"$0$0$0$1$4$"	/**"
"StopWatch.java:239"$0$0$0$10$53$"	 * Get the total time in milliseconds for all tasks."
"StopWatch.java:240"$1$0$0$3$29$"	 * @see #getTotalTimeNanos()"
"StopWatch.java:241"$1$0$0$3$31$"	 * @see #getTotalTimeSeconds()"
"StopWatch.java:242"$0$0$0$1$4$"	 */"
"StopWatch.java:243"$1$0$0$4$35$"	public long getTotalTimeMillis() {"
"StopWatch.java:244"$0$0$0$2$44$"		return nanosToMillis(this.totalTimeNanos);"
"StopWatch.java:245"$0$0$0$1$2$"	}"
"StopWatch.java:246"$0$0$0$0$0$""
"StopWatch.java:247"$0$0$0$1$4$"	/**"
"StopWatch.java:248"$0$0$0$10$48$"	 * Get the total time in seconds for all tasks."
"StopWatch.java:249"$1$0$0$3$29$"	 * @see #getTotalTimeNanos()"
"StopWatch.java:250"$1$0$0$3$30$"	 * @see #getTotalTimeMillis()"
"StopWatch.java:251"$0$0$0$1$4$"	 */"
"StopWatch.java:252"$1$0$0$4$38$"	public double getTotalTimeSeconds() {"
"StopWatch.java:253"$0$0$0$2$45$"		return nanosToSeconds(this.totalTimeNanos);"
"StopWatch.java:254"$0$0$0$1$2$"	}"
"StopWatch.java:255"$0$0$0$0$0$""
"StopWatch.java:256"$0$0$0$1$4$"	/**"
"StopWatch.java:257"$0$0$0$7$34$"	 * Get the number of tasks timed."
"StopWatch.java:258"$0$0$0$1$4$"	 */"
"StopWatch.java:259"$1$0$0$4$28$"	public int getTaskCount() {"
"StopWatch.java:260"$0$0$0$2$24$"		return this.taskCount;"
"StopWatch.java:261"$0$0$0$1$2$"	}"
"StopWatch.java:262"$0$0$0$0$0$""
"StopWatch.java:263"$0$0$0$1$4$"	/**"
"StopWatch.java:264"$0$0$0$10$49$"	 * Get an array of the data for tasks performed."
"StopWatch.java:265"$0$0$0$1$4$"	 */"
"StopWatch.java:266"$1$0$0$4$34$"	public TaskInfo[] getTaskInfo() {"
"StopWatch.java:267"$0$0$0$3$27$"		if (!this.keepTaskList) {"
"StopWatch.java:268"$0$0$0$8$75$"			throw new UnsupportedOperationException(""Task info is not being kept!"");"
"StopWatch.java:269"$0$0$0$1$3$"		}"
"StopWatch.java:270"$0$0$0$3$48$"		return this.taskList.toArray(new TaskInfo[0]);"
"StopWatch.java:271"$0$0$0$1$2$"	}"
"StopWatch.java:272"$0$0$0$0$0$""
"StopWatch.java:273"$0$0$0$0$0$""
"StopWatch.java:274"$0$0$0$1$4$"	/**"
"StopWatch.java:275"$0$0$0$10$54$"	 * Get a short description of the total running time."
"StopWatch.java:276"$0$0$0$1$4$"	 */"
"StopWatch.java:277"$0$0$0$4$31$"	public String shortSummary() {"
"StopWatch.java:278"$2$0$0$16$86$"		return ""StopWatch '"" + getId() + ""': running time = "" + getTotalTimeNanos() + "" ns"";"
"StopWatch.java:279"$0$0$0$1$2$"	}"
"StopWatch.java:280"$0$0$0$0$0$""
"StopWatch.java:281"$0$0$0$1$4$"	/**"
"StopWatch.java:282"$0$0$0$11$66$"	 * Generate a string with a table describing all tasks performed."
"StopWatch.java:283"$1$0$0$12$78$"	 * <p>For custom reporting, call {@link #getTaskInfo()} and use the task info"
"StopWatch.java:284"$0$0$0$2$13$"	 * directly."
"StopWatch.java:285"$0$0$0$1$4$"	 */"
"StopWatch.java:286"$0$0$0$4$30$"	public String prettyPrint() {"
"StopWatch.java:287"$0$0$0$5$55$"		StringBuilder sb = new StringBuilder(shortSummary());"
"StopWatch.java:288"$0$0$0$1$18$"		sb.append('\n');"
"StopWatch.java:289"$0$0$0$3$27$"		if (!this.keepTaskList) {"
"StopWatch.java:290"$0$0$0$4$34$"			sb.append(""No task info kept"");"
"StopWatch.java:291"$0$0$0$1$3$"		}"
"StopWatch.java:292"$0$0$0$2$8$"		else {"
"StopWatch.java:293"$0$0$0$1$64$"			sb.append(""---------------------------------------------\n"");"
"StopWatch.java:294"$0$0$0$4$45$"			sb.append(""ns         %     Task name\n"");"
"StopWatch.java:295"$0$0$0$1$64$"			sb.append(""---------------------------------------------\n"");"
"StopWatch.java:296"$1$0$0$4$54$"			NumberFormat nf = NumberFormat.getNumberInstance();"
"StopWatch.java:297"$0$0$0$1$33$"			nf.setMinimumIntegerDigits(9);"
"StopWatch.java:298"$0$0$0$1$29$"			nf.setGroupingUsed(false);"
"StopWatch.java:299"$1$0$0$4$55$"			NumberFormat pf = NumberFormat.getPercentInstance();"
"StopWatch.java:300"$0$0$0$1$33$"			pf.setMinimumIntegerDigits(3);"
"StopWatch.java:301"$0$0$0$1$29$"			pf.setGroupingUsed(false);"
"StopWatch.java:302"$1$0$0$6$40$"			for (TaskInfo task : getTaskInfo()) {"
"StopWatch.java:303"$1$0$0$2$59$"				sb.append(nf.format(task.getTimeNanos())).append(""  "");"
"StopWatch.java:304"$2$0$0$5$90$"				sb.append(pf.format((double) task.getTimeNanos() / getTotalTimeNanos())).append(""  "");"
"StopWatch.java:305"$1$0$0$1$47$"				sb.append(task.getTaskName()).append(""\n"");"
"StopWatch.java:306"$0$0$0$1$4$"			}"
"StopWatch.java:307"$0$0$0$1$3$"		}"
"StopWatch.java:308"$0$0$0$2$23$"		return sb.toString();"
"StopWatch.java:309"$0$0$0$1$2$"	}"
"StopWatch.java:310"$0$0$0$0$0$""
"StopWatch.java:311"$0$0$0$1$4$"	/**"
"StopWatch.java:312"$0$0$0$9$65$"	 * Generate an informative string describing all tasks performed"
"StopWatch.java:313"$1$0$0$12$78$"	 * <p>For custom reporting, call {@link #getTaskInfo()} and use the task info"
"StopWatch.java:314"$0$0$0$2$13$"	 * directly."
"StopWatch.java:315"$0$0$0$1$4$"	 */"
"StopWatch.java:316"$0$0$0$1$10$"	@Override"
"StopWatch.java:317"$0$0$0$4$27$"	public String toString() {"
"StopWatch.java:318"$0$0$0$5$55$"		StringBuilder sb = new StringBuilder(shortSummary());"
"StopWatch.java:319"$0$0$0$3$26$"		if (this.keepTaskList) {"
"StopWatch.java:320"$1$0$0$6$40$"			for (TaskInfo task : getTaskInfo()) {"
"StopWatch.java:321"$2$0$0$5$108$"				sb.append(""; ["").append(task.getTaskName()).append(""] took "").append(task.getTimeNanos()).append("" ns"");"
"StopWatch.java:322"$2$0$0$8$81$"				long percent = Math.round(100.0 * task.getTimeNanos() / getTotalTimeNanos());"
"StopWatch.java:323"$0$0$0$3$49$"				sb.append("" = "").append(percent).append(""%"");"
"StopWatch.java:324"$0$0$0$1$4$"			}"
"StopWatch.java:325"$0$0$0$1$3$"		}"
"StopWatch.java:326"$0$0$0$2$8$"		else {"
"StopWatch.java:327"$0$0$0$5$36$"			sb.append(""; no task info kept"");"
"StopWatch.java:328"$0$0$0$1$3$"		}"
"StopWatch.java:329"$0$0$0$2$23$"		return sb.toString();"
"StopWatch.java:330"$0$0$0$1$2$"	}"
"StopWatch.java:331"$0$0$0$0$0$""
"StopWatch.java:332"$0$0$0$0$0$""
"StopWatch.java:333"$0$0$0$6$51$"	private static long nanosToMillis(long duration) {"
"StopWatch.java:334"$0$0$0$2$49$"		return TimeUnit.NANOSECONDS.toMillis(duration);"
"StopWatch.java:335"$0$0$0$1$2$"	}"
"StopWatch.java:336"$0$0$0$0$0$""
"StopWatch.java:337"$0$0$0$6$54$"	private static double nanosToSeconds(long duration) {"
"StopWatch.java:338"$0$0$0$4$36$"		return duration / 1_000_000_000.0;"
"StopWatch.java:339"$0$0$0$1$2$"	}"
"StopWatch.java:340"$0$0$0$0$0$""
"StopWatch.java:341"$0$0$0$0$0$""
"StopWatch.java:342"$0$0$0$1$4$"	/**"
"StopWatch.java:343"$0$0$0$14$83$"	 * Nested class to hold data about one task executed within the {@code StopWatch}."
"StopWatch.java:344"$0$0$0$1$4$"	 */"
"StopWatch.java:345"$0$0$0$6$37$"	public static final class TaskInfo {"
"StopWatch.java:346"$0$0$0$0$0$""
"StopWatch.java:347"$0$0$0$4$32$"		private final String taskName;"
"StopWatch.java:348"$0$0$0$0$0$""
"StopWatch.java:349"$0$0$0$4$31$"		private final long timeNanos;"
"StopWatch.java:350"$0$0$0$0$0$""
"StopWatch.java:351"$0$0$0$5$45$"		TaskInfo(String taskName, long timeNanos) {"
"StopWatch.java:352"$0$0$0$3$28$"			this.taskName = taskName;"
"StopWatch.java:353"$0$0$0$3$30$"			this.timeNanos = timeNanos;"
"StopWatch.java:354"$0$0$0$1$3$"		}"
"StopWatch.java:355"$0$0$0$0$0$""
"StopWatch.java:356"$0$0$0$1$5$"		/**"
"StopWatch.java:357"$0$0$0$7$31$"		 * Get the name of this task."
"StopWatch.java:358"$0$0$0$1$5$"		 */"
"StopWatch.java:359"$1$0$0$4$31$"		public String getTaskName() {"
"StopWatch.java:360"$0$0$0$2$24$"			return this.taskName;"
"StopWatch.java:361"$0$0$0$1$3$"		}"
"StopWatch.java:362"$0$0$0$0$0$""
"StopWatch.java:363"$0$0$0$1$5$"		/**"
"StopWatch.java:364"$0$0$0$9$48$"		 * Get the time in nanoseconds this task took."
"StopWatch.java:365"$0$0$0$3$15$"		 * @since 5.2"
"StopWatch.java:366"$1$0$0$3$26$"		 * @see #getTimeMillis()"
"StopWatch.java:367"$1$0$0$3$27$"		 * @see #getTimeSeconds()"
"StopWatch.java:368"$0$0$0$1$5$"		 */"
"StopWatch.java:369"$1$0$0$4$30$"		public long getTimeNanos() {"
"StopWatch.java:370"$0$0$0$2$25$"			return this.timeNanos;"
"StopWatch.java:371"$0$0$0$1$3$"		}"
"StopWatch.java:372"$0$0$0$0$0$""
"StopWatch.java:373"$0$0$0$1$5$"		/**"
"StopWatch.java:374"$0$0$0$9$49$"		 * Get the time in milliseconds this task took."
"StopWatch.java:375"$1$0$0$3$25$"		 * @see #getTimeNanos()"
"StopWatch.java:376"$1$0$0$3$27$"		 * @see #getTimeSeconds()"
"StopWatch.java:377"$0$0$0$1$5$"		 */"
"StopWatch.java:378"$1$0$0$4$31$"		public long getTimeMillis() {"
"StopWatch.java:379"$0$0$0$2$40$"			return nanosToMillis(this.timeNanos);"
"StopWatch.java:380"$0$0$0$1$3$"		}"
"StopWatch.java:381"$0$0$0$0$0$""
"StopWatch.java:382"$0$0$0$1$5$"		/**"
"StopWatch.java:383"$0$0$0$9$44$"		 * Get the time in seconds this task took."
"StopWatch.java:384"$1$0$0$3$26$"		 * @see #getTimeMillis()"
"StopWatch.java:385"$1$0$0$3$25$"		 * @see #getTimeNanos()"
"StopWatch.java:386"$0$0$0$1$5$"		 */"
"StopWatch.java:387"$1$0$0$4$34$"		public double getTimeSeconds() {"
"StopWatch.java:388"$0$0$0$2$41$"			return nanosToSeconds(this.timeNanos);"
"StopWatch.java:389"$0$0$0$1$3$"		}"
"StopWatch.java:390"$0$0$0$0$0$""
"StopWatch.java:391"$0$0$0$1$2$"	}"
"StopWatch.java:392"$0$0$0$0$0$""
"StopWatch.java:393"$0$0$0$1$1$"}"
"DataBuffer.java:1"$0$0$0$1$2$"/*"
"DataBuffer.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"DataBuffer.java:3"$0$0$0$1$2$" *"
"DataBuffer.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DataBuffer.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DataBuffer.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DataBuffer.java:7"$0$0$0$1$2$" *"
"DataBuffer.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DataBuffer.java:9"$0$0$0$1$2$" *"
"DataBuffer.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DataBuffer.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DataBuffer.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DataBuffer.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DataBuffer.java:14"$0$0$0$5$33$" * limitations under the License."
"DataBuffer.java:15"$0$0$0$1$3$" */"
"DataBuffer.java:16"$0$0$0$0$0$""
"DataBuffer.java:17"$0$0$0$2$43$"package org.springframework.core.io.buffer;"
"DataBuffer.java:18"$0$0$0$0$0$""
"DataBuffer.java:19"$0$0$0$2$27$"import java.io.InputStream;"
"DataBuffer.java:20"$0$0$0$2$28$"import java.io.OutputStream;"
"DataBuffer.java:21"$0$0$0$2$27$"import java.nio.ByteBuffer;"
"DataBuffer.java:22"$0$0$0$2$27$"import java.nio.CharBuffer;"
"DataBuffer.java:23"$0$0$0$2$32$"import java.nio.charset.Charset;"
"DataBuffer.java:24"$0$0$0$2$39$"import java.nio.charset.CharsetEncoder;"
"DataBuffer.java:25"$0$0$0$2$36$"import java.nio.charset.CoderResult;"
"DataBuffer.java:26"$0$0$0$2$42$"import java.nio.charset.CodingErrorAction;"
"DataBuffer.java:27"$0$0$0$2$39$"import java.util.function.IntPredicate;"
"DataBuffer.java:28"$0$0$0$0$0$""
"DataBuffer.java:29"$0$0$0$2$39$"import org.springframework.util.Assert;"
"DataBuffer.java:30"$0$0$0$0$0$""
"DataBuffer.java:31"$0$0$0$1$3$"/**"
"DataBuffer.java:32"$0$0$0$6$39$" * Basic abstraction over byte buffers."
"DataBuffer.java:33"$0$0$0$1$2$" *"
"DataBuffer.java:34"$0$0$0$10$78$" * <p>{@code DataBuffer}s has a separate {@linkplain #readPosition() read} and"
"DataBuffer.java:35"$0$0$0$10$83$" * {@linkplain #writePosition() write} position, as opposed to {@code ByteBuffer}'s"
"DataBuffer.java:36"$0$0$0$10$86$" * single {@linkplain ByteBuffer#position() position}. As such, the {@code DataBuffer}"
"DataBuffer.java:37"$0$0$0$14$92$" * does not require a {@linkplain ByteBuffer#flip() flip} to read after writing. In general,"
"DataBuffer.java:38"$0$0$0$14$84$" * the following invariant holds for the read and write positions, and the capacity:"
"DataBuffer.java:39"$0$0$0$1$2$" *"
"DataBuffer.java:40"$0$0$0$2$15$" * <blockquote>"
"DataBuffer.java:41"$0$0$0$3$32$" *     <tt>0</tt> <tt>&lt;=</tt>"
"DataBuffer.java:42"$0$0$0$3$41$" *     <i>readPosition</i> <tt>&lt;=</tt>"
"DataBuffer.java:43"$0$0$0$3$42$" *     <i>writePosition</i> <tt>&lt;=</tt>"
"DataBuffer.java:44"$0$0$0$2$22$" *     <i>capacity</i>"
"DataBuffer.java:45"$0$0$0$2$16$" * </blockquote>"
"DataBuffer.java:46"$0$0$0$1$2$" *"
"DataBuffer.java:47"$0$0$0$13$90$" * <p>The {@linkplain #capacity() capacity} of a {@code DataBuffer} is expanded on demand,"
"DataBuffer.java:48"$0$0$0$5$36$" * similar to {@code StringBuilder}."
"DataBuffer.java:49"$0$0$0$1$2$" *"
"DataBuffer.java:50"$0$0$0$15$95$" * <p>The main purpose of the {@code DataBuffer} abstraction is to provide a convenient wrapper"
"DataBuffer.java:51"$0$0$0$12$92$" * around {@link ByteBuffer} which is similar to Netty's {@link io.netty.buffer.ByteBuf} but"
"DataBuffer.java:52"$0$0$0$11$69$" * can also be used on non-Netty platforms (i.e. Servlet containers)."
"DataBuffer.java:53"$0$0$0$1$2$" *"
"DataBuffer.java:54"$0$0$0$4$24$" * @author Arjen Poutsma"
"DataBuffer.java:55"$0$0$0$4$23$" * @author Brian Clozel"
"DataBuffer.java:56"$0$0$0$3$13$" * @since 5.0"
"DataBuffer.java:57"$0$0$0$3$25$" * @see DataBufferFactory"
"DataBuffer.java:58"$0$0$0$1$3$" */"
"DataBuffer.java:59"$0$0$0$4$29$"public interface DataBuffer {"
"DataBuffer.java:60"$0$0$0$0$0$""
"DataBuffer.java:61"$0$0$0$1$4$"	/**"
"DataBuffer.java:62"$0$0$0$9$66$"	 * Return the {@link DataBufferFactory} that created this buffer."
"DataBuffer.java:63"$0$0$0$6$39$"	 * @return the creating buffer factory"
"DataBuffer.java:64"$0$0$0$1$4$"	 */"
"DataBuffer.java:65"$0$0$0$2$29$"	DataBufferFactory factory();"
"DataBuffer.java:66"$0$0$0$0$0$""
"DataBuffer.java:67"$0$0$0$1$4$"	/**"
"DataBuffer.java:68"$0$0$0$13$66$"	 * Return the index of the first byte in this buffer that matches"
"DataBuffer.java:69"$0$0$0$4$24$"	 * the given predicate."
"DataBuffer.java:70"$0$0$0$7$43$"	 * @param predicate the predicate to match"
"DataBuffer.java:71"$0$0$0$10$55$"	 * @param fromIndex the index to start the search from"
"DataBuffer.java:72"$0$0$0$12$71$"	 * @return the index of the first byte that matches {@code predicate};"
"DataBuffer.java:73"$0$0$0$7$31$"	 * or {@code -1} if none match"
"DataBuffer.java:74"$0$0$0$1$4$"	 */"
"DataBuffer.java:75"$0$0$0$5$52$"	int indexOf(IntPredicate predicate, int fromIndex);"
"DataBuffer.java:76"$0$0$0$0$0$""
"DataBuffer.java:77"$0$0$0$1$4$"	/**"
"DataBuffer.java:78"$0$0$0$13$65$"	 * Return the index of the last byte in this buffer that matches"
"DataBuffer.java:79"$0$0$0$4$24$"	 * the given predicate."
"DataBuffer.java:80"$0$0$0$7$43$"	 * @param predicate the predicate to match"
"DataBuffer.java:81"$0$0$0$10$55$"	 * @param fromIndex the index to start the search from"
"DataBuffer.java:82"$0$0$0$12$70$"	 * @return the index of the last byte that matches {@code predicate};"
"DataBuffer.java:83"$0$0$0$7$31$"	 * or {@code -1} if none match"
"DataBuffer.java:84"$0$0$0$1$4$"	 */"
"DataBuffer.java:85"$0$0$0$5$56$"	int lastIndexOf(IntPredicate predicate, int fromIndex);"
"DataBuffer.java:86"$0$0$0$0$0$""
"DataBuffer.java:87"$0$0$0$1$4$"	/**"
"DataBuffer.java:88"$0$0$0$14$70$"	 * Return the number of bytes that can be read from this data buffer."
"DataBuffer.java:89"$0$0$0$6$35$"	 * @return the readable byte count"
"DataBuffer.java:90"$0$0$0$1$4$"	 */"
"DataBuffer.java:91"$0$0$0$2$25$"	int readableByteCount();"
"DataBuffer.java:92"$0$0$0$0$0$""
"DataBuffer.java:93"$0$0$0$1$4$"	/**"
"DataBuffer.java:94"$0$0$0$14$71$"	 * Return the number of bytes that can be written to this data buffer."
"DataBuffer.java:95"$0$0$0$6$35$"	 * @return the writable byte count"
"DataBuffer.java:96"$0$0$0$3$16$"	 * @since 5.0.1"
"DataBuffer.java:97"$0$0$0$1$4$"	 */"
"DataBuffer.java:98"$0$0$0$2$25$"	int writableByteCount();"
"DataBuffer.java:99"$0$0$0$0$0$""
"DataBuffer.java:100"$0$0$0$1$4$"	/**"
"DataBuffer.java:101"$0$0$0$11$60$"	 * Return the number of bytes that this buffer can contain."
"DataBuffer.java:102"$0$0$0$4$24$"	 * @return the capacity"
"DataBuffer.java:103"$0$0$0$3$16$"	 * @since 5.0.1"
"DataBuffer.java:104"$0$0$0$1$4$"	 */"
"DataBuffer.java:105"$0$0$0$2$16$"	int capacity();"
"DataBuffer.java:106"$0$0$0$0$0$""
"DataBuffer.java:107"$0$0$0$1$4$"	/**"
"DataBuffer.java:108"$0$0$0$11$57$"	 * Set the number of bytes that this buffer can contain."
"DataBuffer.java:109"$0$0$0$13$75$"	 * <p>If the new capacity is lower than the current capacity, the contents"
"DataBuffer.java:110"$0$0$0$14$72$"	 * of this buffer will be truncated. If the new capacity is higher than"
"DataBuffer.java:111"$0$0$0$8$46$"	 * the current capacity, it will be expanded."
"DataBuffer.java:112"$0$0$0$6$36$"	 * @param capacity the new capacity"
"DataBuffer.java:113"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:114"$0$0$0$1$4$"	 */"
"DataBuffer.java:115"$0$0$0$3$35$"	DataBuffer capacity(int capacity);"
"DataBuffer.java:116"$0$0$0$0$0$""
"DataBuffer.java:117"$0$0$0$1$4$"	/**"
"DataBuffer.java:118"$0$0$0$10$74$"	 * Ensure that the current buffer has enough {@link #writableByteCount()}"
"DataBuffer.java:119"$0$0$0$15$73$"	 * to write the amount of data given as an argument. If not, the missing"
"DataBuffer.java:120"$0$0$0$8$41$"	 * capacity will be added to the buffer."
"DataBuffer.java:121"$0$0$0$9$54$"	 * @param capacity the writable capacity to check for"
"DataBuffer.java:122"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:123"$0$0$0$3$16$"	 * @since 5.1.4"
"DataBuffer.java:124"$0$0$0$1$4$"	 */"
"DataBuffer.java:125"$0$0$0$5$50$"	default DataBuffer ensureCapacity(int capacity) {"
"DataBuffer.java:126"$0$0$0$2$14$"		return this;"
"DataBuffer.java:127"$0$0$0$1$2$"	}"
"DataBuffer.java:128"$0$0$0$0$0$""
"DataBuffer.java:129"$0$0$0$1$4$"	/**"
"DataBuffer.java:130"$0$0$0$10$57$"	 * Return the position from which this buffer will read."
"DataBuffer.java:131"$0$0$0$5$29$"	 * @return the read position"
"DataBuffer.java:132"$0$0$0$3$16$"	 * @since 5.0.1"
"DataBuffer.java:133"$0$0$0$1$4$"	 */"
"DataBuffer.java:134"$0$0$0$2$20$"	int readPosition();"
"DataBuffer.java:135"$0$0$0$0$0$""
"DataBuffer.java:136"$0$0$0$1$4$"	/**"
"DataBuffer.java:137"$0$0$0$10$54$"	 * Set the position from which this buffer will read."
"DataBuffer.java:138"$0$0$0$7$45$"	 * @param readPosition the new read position"
"DataBuffer.java:139"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:140"$0$0$0$10$79$"	 * @throws IndexOutOfBoundsException if {@code readPosition} is smaller than 0"
"DataBuffer.java:141"$0$0$0$6$44$"	 * or greater than {@link #writePosition()}"
"DataBuffer.java:142"$0$0$0$3$16$"	 * @since 5.0.1"
"DataBuffer.java:143"$0$0$0$1$4$"	 */"
"DataBuffer.java:144"$0$0$0$3$43$"	DataBuffer readPosition(int readPosition);"
"DataBuffer.java:145"$0$0$0$0$0$""
"DataBuffer.java:146"$0$0$0$1$4$"	/**"
"DataBuffer.java:147"$0$0$0$10$56$"	 * Return the position to which this buffer will write."
"DataBuffer.java:148"$0$0$0$5$30$"	 * @return the write position"
"DataBuffer.java:149"$0$0$0$3$16$"	 * @since 5.0.1"
"DataBuffer.java:150"$0$0$0$1$4$"	 */"
"DataBuffer.java:151"$0$0$0$2$21$"	int writePosition();"
"DataBuffer.java:152"$0$0$0$0$0$""
"DataBuffer.java:153"$0$0$0$1$4$"	/**"
"DataBuffer.java:154"$0$0$0$10$53$"	 * Set the position to which this buffer will write."
"DataBuffer.java:155"$0$0$0$7$47$"	 * @param writePosition the new write position"
"DataBuffer.java:156"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:157"$0$0$0$9$78$"	 * @throws IndexOutOfBoundsException if {@code writePosition} is smaller than"
"DataBuffer.java:158"$0$0$0$8$63$"	 * {@link #readPosition()} or greater than {@link #capacity()}"
"DataBuffer.java:159"$0$0$0$3$16$"	 * @since 5.0.1"
"DataBuffer.java:160"$0$0$0$1$4$"	 */"
"DataBuffer.java:161"$0$0$0$3$45$"	DataBuffer writePosition(int writePosition);"
"DataBuffer.java:162"$0$0$0$0$0$""
"DataBuffer.java:163"$0$0$0$1$4$"	/**"
"DataBuffer.java:164"$0$0$0$13$64$"	 * Read a single byte at the given index from this data buffer."
"DataBuffer.java:165"$0$0$0$12$57$"	 * @param index the index at which the byte will be read"
"DataBuffer.java:166"$0$0$0$8$39$"	 * @return the byte at the given index"
"DataBuffer.java:167"$0$0$0$10$73$"	 * @throws IndexOutOfBoundsException when {@code index} is out of bounds"
"DataBuffer.java:168"$0$0$0$3$16$"	 * @since 5.0.4"
"DataBuffer.java:169"$0$0$0$1$4$"	 */"
"DataBuffer.java:170"$1$0$0$3$25$"	byte getByte(int index);"
"DataBuffer.java:171"$0$0$0$0$0$""
"DataBuffer.java:172"$0$0$0$1$4$"	/**"
"DataBuffer.java:173"$0$0$0$14$79$"	 * Read a single byte from the current reading position from this data buffer."
"DataBuffer.java:174"$0$0$0$10$62$"	 * @return the byte at this buffer's current reading position"
"DataBuffer.java:175"$0$0$0$1$4$"	 */"
"DataBuffer.java:176"$0$0$0$2$13$"	byte read();"
"DataBuffer.java:177"$0$0$0$0$0$""
"DataBuffer.java:178"$0$0$0$1$4$"	/**"
"DataBuffer.java:179"$0$0$0$13$83$"	 * Read this buffer's data into the specified destination, starting at the current"
"DataBuffer.java:180"$0$0$0$6$36$"	 * reading position of this buffer."
"DataBuffer.java:181"$0$0$0$13$71$"	 * @param destination the array into which the bytes are to be written"
"DataBuffer.java:182"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:183"$0$0$0$1$4$"	 */"
"DataBuffer.java:184"$0$0$0$3$37$"	DataBuffer read(byte[] destination);"
"DataBuffer.java:185"$0$0$0$0$0$""
"DataBuffer.java:186"$0$0$0$1$4$"	/**"
"DataBuffer.java:187"$0$0$0$14$84$"	 * Read at most {@code length} bytes of this buffer into the specified destination,"
"DataBuffer.java:188"$0$0$0$10$60$"	 * starting at the current reading position of this buffer."
"DataBuffer.java:189"$0$0$0$13$71$"	 * @param destination the array into which the bytes are to be written"
"DataBuffer.java:190"$0$0$0$15$86$"	 * @param offset the index within {@code destination} of the first byte to be written"
"DataBuffer.java:191"$0$0$0$14$82$"	 * @param length the maximum number of bytes to be written in {@code destination}"
"DataBuffer.java:192"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:193"$0$0$0$1$4$"	 */"
"DataBuffer.java:194"$0$0$0$7$61$"	DataBuffer read(byte[] destination, int offset, int length);"
"DataBuffer.java:195"$0$0$0$0$0$""
"DataBuffer.java:196"$0$0$0$1$4$"	/**"
"DataBuffer.java:197"$0$0$0$13$73$"	 * Write a single byte into this buffer at the current writing position."
"DataBuffer.java:198"$0$0$0$8$35$"	 * @param b the byte to be written"
"DataBuffer.java:199"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:200"$0$0$0$1$4$"	 */"
"DataBuffer.java:201"$0$0$0$3$26$"	DataBuffer write(byte b);"
"DataBuffer.java:202"$0$0$0$0$0$""
"DataBuffer.java:203"$0$0$0$1$4$"	/**"
"DataBuffer.java:204"$0$0$0$14$85$"	 * Write the given source into this buffer, starting at the current writing position"
"DataBuffer.java:205"$0$0$0$4$19$"	 * of this buffer."
"DataBuffer.java:206"$0$0$0$11$58$"	 * @param source the bytes to be written into this buffer"
"DataBuffer.java:207"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:208"$0$0$0$1$4$"	 */"
"DataBuffer.java:209"$0$0$0$3$33$"	DataBuffer write(byte[] source);"
"DataBuffer.java:210"$0$0$0$0$0$""
"DataBuffer.java:211"$0$0$0$1$4$"	/**"
"DataBuffer.java:212"$0$0$0$15$85$"	 * Write at most {@code length} bytes of the given source into this buffer, starting"
"DataBuffer.java:213"$0$0$0$9$51$"	 * at the current writing position of this buffer."
"DataBuffer.java:214"$0$0$0$11$58$"	 * @param source the bytes to be written into this buffer"
"DataBuffer.java:215"$0$0$0$12$71$"	 * @param offset the index within {@code source} to start writing from"
"DataBuffer.java:216"$0$0$0$14$79$"	 * @param length the maximum number of bytes to be written from {@code source}"
"DataBuffer.java:217"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:218"$0$0$0$1$4$"	 */"
"DataBuffer.java:219"$0$0$0$7$57$"	DataBuffer write(byte[] source, int offset, int length);"
"DataBuffer.java:220"$0$0$0$0$0$""
"DataBuffer.java:221"$0$0$0$1$4$"	/**"
"DataBuffer.java:222"$0$0$0$14$81$"	 * Write one or more {@code DataBuffer}s to this buffer, starting at the current"
"DataBuffer.java:223"$0$0$0$11$63$"	 * writing position. It is the responsibility of the caller to"
"DataBuffer.java:224"$0$0$0$8$84$"	 * {@linkplain DataBufferUtils#release(DataBuffer) release} the given data buffers."
"DataBuffer.java:225"$0$0$0$11$61$"	 * @param buffers the byte buffers to write into this buffer"
"DataBuffer.java:226"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:227"$0$0$0$1$4$"	 */"
"DataBuffer.java:228"$0$0$0$3$41$"	DataBuffer write(DataBuffer... buffers);"
"DataBuffer.java:229"$0$0$0$0$0$""
"DataBuffer.java:230"$0$0$0$1$4$"	/**"
"DataBuffer.java:231"$0$0$0$14$80$"	 * Write one or more {@link ByteBuffer} to this buffer, starting at the current"
"DataBuffer.java:232"$0$0$0$3$21$"	 * writing position."
"DataBuffer.java:233"$0$0$0$11$61$"	 * @param buffers the byte buffers to write into this buffer"
"DataBuffer.java:234"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:235"$0$0$0$1$4$"	 */"
"DataBuffer.java:236"$0$0$0$3$41$"	DataBuffer write(ByteBuffer... buffers);"
"DataBuffer.java:237"$0$0$0$0$0$""
"DataBuffer.java:238"$0$0$0$1$4$"	/**"
"DataBuffer.java:239"$0$0$0$11$73$"	 * Write the given {@code CharSequence} using the given {@code Charset},"
"DataBuffer.java:240"$0$0$0$7$45$"	 * starting at the current writing position."
"DataBuffer.java:241"$0$0$0$11$67$"	 * @param charSequence the char sequence to write into this buffer"
"DataBuffer.java:242"$0$0$0$11$63$"	 * @param charset the charset to encode the char sequence with"
"DataBuffer.java:243"$0$0$0$4$23$"	 * @return this buffer"
"DataBuffer.java:244"$0$0$0$3$16$"	 * @since 5.1.4"
"DataBuffer.java:245"$0$0$0$1$4$"	 */"
"DataBuffer.java:246"$0$0$0$7$71$"	default DataBuffer write(CharSequence charSequence, Charset charset) {"
"DataBuffer.java:247"$0$0$0$6$64$"		Assert.notNull(charSequence, ""CharSequence must not be null"");"
"DataBuffer.java:248"$0$0$0$6$54$"		Assert.notNull(charset, ""Charset must not be null"");"
"DataBuffer.java:249"$0$0$0$5$35$"		if (charSequence.length() != 0) {"
"DataBuffer.java:250"$0$0$0$4$55$"			CharsetEncoder charsetEncoder = charset.newEncoder()"
"DataBuffer.java:251"$0$0$0$1$49$"					.onMalformedInput(CodingErrorAction.REPLACE)"
"DataBuffer.java:252"$0$0$0$1$55$"					.onUnmappableCharacter(CodingErrorAction.REPLACE);"
"DataBuffer.java:253"$0$0$0$4$55$"			CharBuffer inBuffer = CharBuffer.wrap(charSequence);"
"DataBuffer.java:254"$0$0$0$7$91$"			int estimatedSize = (int) (inBuffer.remaining() * charsetEncoder.averageBytesPerChar());"
"DataBuffer.java:255"$0$0$0$4$55$"			ByteBuffer outBuffer = ensureCapacity(estimatedSize)"
"DataBuffer.java:256"$0$0$0$2$57$"					.asByteBuffer(writePosition(), writableByteCount());"
"DataBuffer.java:257"$0$0$0$3$17$"			while (true) {"
"DataBuffer.java:258"$0$0$0$5$47$"				CoderResult cr = (inBuffer.hasRemaining() ?"
"DataBuffer.java:259"$0$0$0$5$80$"						charsetEncoder.encode(inBuffer, outBuffer, true) : CoderResult.UNDERFLOW);"
"DataBuffer.java:260"$0$0$0$3$27$"				if (cr.isUnderflow()) {"
"DataBuffer.java:261"$0$0$0$3$42$"					cr = charsetEncoder.flush(outBuffer);"
"DataBuffer.java:262"$0$0$0$1$5$"				}"
"DataBuffer.java:263"$0$0$0$3$27$"				if (cr.isUnderflow()) {"
"DataBuffer.java:264"$0$0$0$1$11$"					break;"
"DataBuffer.java:265"$0$0$0$1$5$"				}"
"DataBuffer.java:266"$0$0$0$3$26$"				if (cr.isOverflow()) {"
"DataBuffer.java:267"$0$0$0$3$59$"					writePosition(writePosition() + outBuffer.position());"
"DataBuffer.java:268"$0$0$0$7$87$"					int maximumSize = (int) (inBuffer.remaining() * charsetEncoder.maxBytesPerChar());"
"DataBuffer.java:269"$0$0$0$1$33$"					ensureCapacity(maximumSize);"
"DataBuffer.java:270"$0$0$0$4$68$"					outBuffer = asByteBuffer(writePosition(), writableByteCount());"
"DataBuffer.java:271"$0$0$0$1$5$"				}"
"DataBuffer.java:272"$0$0$0$1$4$"			}"
"DataBuffer.java:273"$0$0$0$3$57$"			writePosition(writePosition() + outBuffer.position());"
"DataBuffer.java:274"$0$0$0$1$3$"		}"
"DataBuffer.java:275"$0$0$0$2$14$"		return this;"
"DataBuffer.java:276"$0$0$0$1$2$"	}"
"DataBuffer.java:277"$0$0$0$0$0$""
"DataBuffer.java:278"$0$0$0$1$4$"	/**"
"DataBuffer.java:279"$0$0$0$14$82$"	 * Create a new {@code DataBuffer} whose contents is a shared subsequence of this"
"DataBuffer.java:280"$0$0$0$14$84$"	 * data buffer's content.  Data between this data buffer and the returned buffer is"
"DataBuffer.java:281"$0$0$0$13$82$"	 * shared; though changes in the returned buffer's position will not be reflected"
"DataBuffer.java:282"$0$0$0$11$60$"	 * in the reading nor writing position of this data buffer."
"DataBuffer.java:283"$0$0$0$8$76$"	 * <p><strong>Note</strong> that this method will <strong>not</strong> call"
"DataBuffer.java:284"$0$0$0$9$84$"	 * {@link DataBufferUtils#retain(DataBuffer)} on the resulting slice: the reference"
"DataBuffer.java:285"$0$0$0$6$32$"	 * count will not be increased."
"DataBuffer.java:286"$0$0$0$11$54$"	 * @param index the index at which to start the slice"
"DataBuffer.java:287"$0$0$0$8$41$"	 * @param length the length of the slice"
"DataBuffer.java:288"$0$0$0$9$51$"	 * @return the specified slice of this data buffer"
"DataBuffer.java:289"$0$0$0$1$4$"	 */"
"DataBuffer.java:290"$0$0$0$5$41$"	DataBuffer slice(int index, int length);"
"DataBuffer.java:291"$0$0$0$0$0$""
"DataBuffer.java:292"$0$0$0$1$4$"	/**"
"DataBuffer.java:293"$0$0$0$15$92$"	 * Create a new {@code DataBuffer} whose contents is a shared, retained subsequence of this"
"DataBuffer.java:294"$0$0$0$14$84$"	 * data buffer's content.  Data between this data buffer and the returned buffer is"
"DataBuffer.java:295"$0$0$0$13$82$"	 * shared; though changes in the returned buffer's position will not be reflected"
"DataBuffer.java:296"$0$0$0$11$60$"	 * in the reading nor writing position of this data buffer."
"DataBuffer.java:297"$0$0$0$9$78$"	 * <p><strong>Note</strong> that unlike {@link #slice(int, int)}, this method"
"DataBuffer.java:298"$0$0$0$9$96$"	 * <strong>will</strong> call {@link DataBufferUtils#retain(DataBuffer)} (or equivalent) on the"
"DataBuffer.java:299"$0$0$0$3$20$"	 * resulting slice."
"DataBuffer.java:300"$0$0$0$11$54$"	 * @param index the index at which to start the slice"
"DataBuffer.java:301"$0$0$0$8$41$"	 * @param length the length of the slice"
"DataBuffer.java:302"$0$0$0$10$61$"	 * @return the specified, retained slice of this data buffer"
"DataBuffer.java:303"$0$0$0$3$14$"	 * @since 5.2"
"DataBuffer.java:304"$0$0$0$1$4$"	 */"
"DataBuffer.java:305"$0$0$0$7$58$"	default DataBuffer retainedSlice(int index, int length) {"
"DataBuffer.java:306"$0$0$0$3$54$"		return DataBufferUtils.retain(slice(index, length));"
"DataBuffer.java:307"$0$0$0$1$2$"	}"
"DataBuffer.java:308"$0$0$0$0$0$""
"DataBuffer.java:309"$0$0$0$1$4$"	/**"
"DataBuffer.java:310"$0$0$0$12$73$"	 * Expose this buffer's bytes as a {@link ByteBuffer}. Data between this"
"DataBuffer.java:311"$0$0$0$11$76$"	 * {@code DataBuffer} and the returned {@code ByteBuffer} is shared; though"
"DataBuffer.java:312"$0$0$0$9$80$"	 * changes in the returned buffer's {@linkplain ByteBuffer#position() position}"
"DataBuffer.java:313"$0$0$0$15$82$"	 * will not be reflected in the reading nor writing position of this data buffer."
"DataBuffer.java:314"$0$0$0$9$45$"	 * @return this data buffer as a byte buffer"
"DataBuffer.java:315"$0$0$0$1$4$"	 */"
"DataBuffer.java:316"$0$0$0$2$27$"	ByteBuffer asByteBuffer();"
"DataBuffer.java:317"$0$0$0$0$0$""
"DataBuffer.java:318"$0$0$0$1$4$"	/**"
"DataBuffer.java:319"$0$0$0$14$85$"	 * Expose a subsequence of this buffer's bytes as a {@link ByteBuffer}. Data between"
"DataBuffer.java:320"$0$0$0$12$81$"	 * this {@code DataBuffer} and the returned {@code ByteBuffer} is shared; though"
"DataBuffer.java:321"$0$0$0$9$80$"	 * changes in the returned buffer's {@linkplain ByteBuffer#position() position}"
"DataBuffer.java:322"$0$0$0$15$82$"	 * will not be reflected in the reading nor writing position of this data buffer."
"DataBuffer.java:323"$0$0$0$12$60$"	 * @param index the index at which to start the byte buffer"
"DataBuffer.java:324"$0$0$0$10$56$"	 * @param length the length of the returned byte buffer"
"DataBuffer.java:325"$0$0$0$9$45$"	 * @return this data buffer as a byte buffer"
"DataBuffer.java:326"$0$0$0$3$16$"	 * @since 5.0.1"
"DataBuffer.java:327"$0$0$0$1$4$"	 */"
"DataBuffer.java:328"$0$0$0$5$48$"	ByteBuffer asByteBuffer(int index, int length);"
"DataBuffer.java:329"$0$0$0$0$0$""
"DataBuffer.java:330"$0$0$0$1$4$"	/**"
"DataBuffer.java:331"$0$0$0$15$88$"	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are"
"DataBuffer.java:332"$0$0$0$14$87$"	 * shared between the returned stream and this data buffer. The underlying buffer will"
"DataBuffer.java:333"$0$0$0$6$85$"	 * <strong>not</strong> be {@linkplain DataBufferUtils#release(DataBuffer) released}"
"DataBuffer.java:334"$0$0$0$9$69$"	 * when the input stream is {@linkplain InputStream#close() closed}."
"DataBuffer.java:335"$0$0$0$9$47$"	 * @return this data buffer as an input stream"
"DataBuffer.java:336"$0$0$0$3$32$"	 * @see #asInputStream(boolean)"
"DataBuffer.java:337"$0$0$0$1$4$"	 */"
"DataBuffer.java:338"$0$0$0$2$29$"	InputStream asInputStream();"
"DataBuffer.java:339"$0$0$0$0$0$""
"DataBuffer.java:340"$0$0$0$1$4$"	/**"
"DataBuffer.java:341"$0$0$0$15$88$"	 * Expose this buffer's data as an {@link InputStream}. Both data and read position are"
"DataBuffer.java:342"$0$0$0$10$60$"	 * shared between the returned stream and this data buffer."
"DataBuffer.java:343"$0$0$0$9$63$"	 * @param releaseOnClose whether the underlying buffer will be"
"DataBuffer.java:344"$0$0$0$9$86$"	 * {@linkplain DataBufferUtils#release(DataBuffer) released} when the input stream is"
"DataBuffer.java:345"$0$0$0$4$44$"	 * {@linkplain InputStream#close() closed}."
"DataBuffer.java:346"$0$0$0$9$47$"	 * @return this data buffer as an input stream"
"DataBuffer.java:347"$0$0$0$3$16$"	 * @since 5.0.4"
"DataBuffer.java:348"$0$0$0$1$4$"	 */"
"DataBuffer.java:349"$0$0$0$3$51$"	InputStream asInputStream(boolean releaseOnClose);"
"DataBuffer.java:350"$0$0$0$0$0$""
"DataBuffer.java:351"$0$0$0$1$4$"	/**"
"DataBuffer.java:352"$0$0$0$15$90$"	 * Expose this buffer's data as an {@link OutputStream}. Both data and write position are"
"DataBuffer.java:353"$0$0$0$10$60$"	 * shared between the returned stream and this data buffer."
"DataBuffer.java:354"$0$0$0$9$48$"	 * @return this data buffer as an output stream"
"DataBuffer.java:355"$0$0$0$1$4$"	 */"
"DataBuffer.java:356"$0$0$0$2$31$"	OutputStream asOutputStream();"
"DataBuffer.java:357"$0$0$0$0$0$""
"DataBuffer.java:358"$0$0$0$1$4$"	/**"
"DataBuffer.java:359"$0$0$0$13$90$"	 * Return this buffer's data a String using the specified charset. Default implementation"
"DataBuffer.java:360"$0$0$0$7$80$"	 * delegates to {@code toString(readPosition(), readableByteCount(), charset)}."
"DataBuffer.java:361"$0$0$0$8$43$"	 * @param charset the character set to use"
"DataBuffer.java:362"$0$0$0$10$60$"	 * @return a string representation of all this buffers data"
"DataBuffer.java:363"$0$0$0$3$14$"	 * @since 5.2"
"DataBuffer.java:364"$0$0$0$1$4$"	 */"
"DataBuffer.java:365"$0$0$0$5$43$"	default String toString(Charset charset) {"
"DataBuffer.java:366"$0$0$0$6$54$"		Assert.notNull(charset, ""Charset must not be null"");"
"DataBuffer.java:367"$0$0$0$4$64$"		return toString(readPosition(), readableByteCount(), charset);"
"DataBuffer.java:368"$0$0$0$1$2$"	}"
"DataBuffer.java:369"$0$0$0$0$0$""
"DataBuffer.java:370"$0$0$0$1$4$"	/**"
"DataBuffer.java:371"$0$0$0$15$80$"	 * Return a part of this buffer's data as a String using the specified charset."
"DataBuffer.java:372"$0$0$0$11$55$"	 * @param index the index at which to start the string"
"DataBuffer.java:373"$0$0$0$12$59$"	 * @param length the number of bytes to use for the string"
"DataBuffer.java:374"$0$0$0$7$37$"	 * @param charset the charset to use"
"DataBuffer.java:375"$0$0$0$12$66$"	 * @return a string representation of a part of this buffers data"
"DataBuffer.java:376"$0$0$0$3$14$"	 * @since 5.2"
"DataBuffer.java:377"$0$0$0$1$4$"	 */"
"DataBuffer.java:378"$0$0$0$7$57$"	String toString(int index, int length, Charset charset);"
"DataBuffer.java:379"$0$0$0$0$0$""
"DataBuffer.java:380"$0$0$0$1$1$"}"
"TypeDescriptor.java:1"$0$0$0$1$2$"/*"
"TypeDescriptor.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"TypeDescriptor.java:3"$0$0$0$1$2$" *"
"TypeDescriptor.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"TypeDescriptor.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"TypeDescriptor.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"TypeDescriptor.java:7"$0$0$0$1$2$" *"
"TypeDescriptor.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"TypeDescriptor.java:9"$0$0$0$1$2$" *"
"TypeDescriptor.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"TypeDescriptor.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"TypeDescriptor.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"TypeDescriptor.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"TypeDescriptor.java:14"$0$0$0$5$33$" * limitations under the License."
"TypeDescriptor.java:15"$0$0$0$1$3$" */"
"TypeDescriptor.java:16"$0$0$0$0$0$""
"TypeDescriptor.java:17"$0$0$0$2$41$"package org.springframework.core.convert;"
"TypeDescriptor.java:18"$0$0$0$0$0$""
"TypeDescriptor.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"TypeDescriptor.java:20"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"TypeDescriptor.java:21"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"TypeDescriptor.java:22"$0$0$0$2$31$"import java.lang.reflect.Field;"
"TypeDescriptor.java:23"$0$0$0$2$30$"import java.lang.reflect.Type;"
"TypeDescriptor.java:24"$0$0$0$2$24$"import java.util.Arrays;"
"TypeDescriptor.java:25"$0$0$0$2$28$"import java.util.Collection;"
"TypeDescriptor.java:26"$0$0$0$2$25$"import java.util.HashMap;"
"TypeDescriptor.java:27"$0$0$0$2$21$"import java.util.Map;"
"TypeDescriptor.java:28"$0$0$0$2$31$"import java.util.stream.Stream;"
"TypeDescriptor.java:29"$0$0$0$0$0$""
"TypeDescriptor.java:30"$0$0$0$2$48$"import org.springframework.core.MethodParameter;"
"TypeDescriptor.java:31"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"TypeDescriptor.java:32"$0$0$0$2$65$"import org.springframework.core.annotation.AnnotatedElementUtils;"
"TypeDescriptor.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"TypeDescriptor.java:34"$0$0$0$2$39$"import org.springframework.util.Assert;"
"TypeDescriptor.java:35"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"TypeDescriptor.java:36"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"TypeDescriptor.java:37"$0$0$0$0$0$""
"TypeDescriptor.java:38"$0$0$0$1$3$"/**"
"TypeDescriptor.java:39"$0$0$0$11$60$" * Contextual descriptor about a type to convert from or to."
"TypeDescriptor.java:40"$0$0$0$9$63$" * Capable of representing arrays and generic collection types."
"TypeDescriptor.java:41"$0$0$0$1$2$" *"
"TypeDescriptor.java:42"$0$0$0$4$23$" * @author Keith Donald"
"TypeDescriptor.java:43"$0$0$0$4$23$" * @author Andy Clement"
"TypeDescriptor.java:44"$0$0$0$4$26$" * @author Juergen Hoeller"
"TypeDescriptor.java:45"$0$0$0$4$23$" * @author Phillip Webb"
"TypeDescriptor.java:46"$0$0$0$4$22$" * @author Sam Brannen"
"TypeDescriptor.java:47"$0$0$0$4$26$" * @author Stephane Nicoll"
"TypeDescriptor.java:48"$0$0$0$3$13$" * @since 3.0"
"TypeDescriptor.java:49"$0$0$0$4$68$" * @see ConversionService#canConvert(TypeDescriptor, TypeDescriptor)"
"TypeDescriptor.java:50"$0$0$0$5$73$" * @see ConversionService#convert(Object, TypeDescriptor, TypeDescriptor)"
"TypeDescriptor.java:51"$0$0$0$1$3$" */"
"TypeDescriptor.java:52"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"TypeDescriptor.java:53"$0$0$0$6$53$"public class TypeDescriptor implements Serializable {"
"TypeDescriptor.java:54"$0$0$0$0$0$""
"TypeDescriptor.java:55"$0$0$0$8$78$"	private static final Annotation[] EMPTY_ANNOTATION_ARRAY = new Annotation[0];"
"TypeDescriptor.java:56"$0$0$0$0$0$""
"TypeDescriptor.java:57"$0$0$0$9$89$"	private static final Map<Class<?>, TypeDescriptor> commonTypesCache = new HashMap<>(32);"
"TypeDescriptor.java:58"$0$0$0$0$0$""
"TypeDescriptor.java:59"$0$0$0$7$56$"	private static final Class<?>[] CACHED_COMMON_TYPES = {"
"TypeDescriptor.java:60"$0$0$0$6$85$"			boolean.class, Boolean.class, byte.class, Byte.class, char.class, Character.class,"
"TypeDescriptor.java:61"$0$0$0$6$82$"			double.class, Double.class, float.class, Float.class, int.class, Integer.class,"
"TypeDescriptor.java:62"$0$0$0$6$81$"			long.class, Long.class, short.class, Short.class, String.class, Object.class};"
"TypeDescriptor.java:63"$0$0$0$0$0$""
"TypeDescriptor.java:64"$0$0$0$2$9$"	static {"
"TypeDescriptor.java:65"$0$0$0$6$55$"		for (Class<?> preCachedClass : CACHED_COMMON_TYPES) {"
"TypeDescriptor.java:66"$0$0$0$2$65$"			commonTypesCache.put(preCachedClass, valueOf(preCachedClass));"
"TypeDescriptor.java:67"$0$0$0$1$3$"		}"
"TypeDescriptor.java:68"$0$0$0$1$2$"	}"
"TypeDescriptor.java:69"$0$0$0$0$0$""
"TypeDescriptor.java:70"$0$0$0$0$0$""
"TypeDescriptor.java:71"$0$0$0$4$29$"	private final Class<?> type;"
"TypeDescriptor.java:72"$0$0$0$0$0$""
"TypeDescriptor.java:73"$0$0$0$4$45$"	private final ResolvableType resolvableType;"
"TypeDescriptor.java:74"$0$0$0$0$0$""
"TypeDescriptor.java:75"$0$0$0$4$56$"	private final AnnotatedElementAdapter annotatedElement;"
"TypeDescriptor.java:76"$0$0$0$0$0$""
"TypeDescriptor.java:77"$0$0$0$0$0$""
"TypeDescriptor.java:78"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:79"$0$0$0$10$64$"	 * Create a new type descriptor from a {@link MethodParameter}."
"TypeDescriptor.java:80"$1$0$0$13$73$"	 * <p>Use this constructor when a source or target conversion point is a"
"TypeDescriptor.java:81"$0$0$0$9$68$"	 * constructor parameter, method parameter, or method return value."
"TypeDescriptor.java:82"$0$0$0$6$47$"	 * @param methodParameter the method parameter"
"TypeDescriptor.java:83"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:84"$0$0$0$4$57$"	public TypeDescriptor(MethodParameter methodParameter) {"
"TypeDescriptor.java:85"$0$0$0$3$75$"		this.resolvableType = ResolvableType.forMethodParameter(methodParameter);"
"TypeDescriptor.java:86"$1$0$0$3$84$"		this.type = this.resolvableType.resolve(methodParameter.getNestedParameterType());"
"TypeDescriptor.java:87"$1$0$0$7$97$"		this.annotatedElement = new AnnotatedElementAdapter(methodParameter.getParameterIndex() == -1 ?"
"TypeDescriptor.java:88"$2$0$0$3$88$"				methodParameter.getMethodAnnotations() : methodParameter.getParameterAnnotations());"
"TypeDescriptor.java:89"$0$0$0$1$2$"	}"
"TypeDescriptor.java:90"$0$0$0$0$0$""
"TypeDescriptor.java:91"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:92"$0$0$0$10$54$"	 * Create a new type descriptor from a {@link Field}."
"TypeDescriptor.java:93"$1$0$0$14$80$"	 * <p>Use this constructor when a source or target conversion point is a field."
"TypeDescriptor.java:94"$0$0$0$5$26$"	 * @param field the field"
"TypeDescriptor.java:95"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:96"$0$0$0$4$37$"	public TypeDescriptor(Field field) {"
"TypeDescriptor.java:97"$0$0$0$3$55$"		this.resolvableType = ResolvableType.forField(field);"
"TypeDescriptor.java:98"$1$0$0$3$59$"		this.type = this.resolvableType.resolve(field.getType());"
"TypeDescriptor.java:99"$1$0$0$4$78$"		this.annotatedElement = new AnnotatedElementAdapter(field.getAnnotations());"
"TypeDescriptor.java:100"$0$0$0$1$2$"	}"
"TypeDescriptor.java:101"$0$0$0$0$0$""
"TypeDescriptor.java:102"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:103"$0$0$0$10$57$"	 * Create a new type descriptor from a {@link Property}."
"TypeDescriptor.java:104"$1$0$0$13$73$"	 * <p>Use this constructor when a source or target conversion point is a"
"TypeDescriptor.java:105"$0$0$0$6$29$"	 * property on a Java class."
"TypeDescriptor.java:106"$0$0$0$5$32$"	 * @param property the property"
"TypeDescriptor.java:107"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:108"$0$0$0$4$43$"	public TypeDescriptor(Property property) {"
"TypeDescriptor.java:109"$0$0$0$6$56$"		Assert.notNull(property, ""Property must not be null"");"
"TypeDescriptor.java:110"$1$0$0$3$89$"		this.resolvableType = ResolvableType.forMethodParameter(property.getMethodParameter());"
"TypeDescriptor.java:111"$1$0$0$3$62$"		this.type = this.resolvableType.resolve(property.getType());"
"TypeDescriptor.java:112"$1$0$0$4$81$"		this.annotatedElement = new AnnotatedElementAdapter(property.getAnnotations());"
"TypeDescriptor.java:113"$0$0$0$1$2$"	}"
"TypeDescriptor.java:114"$0$0$0$0$0$""
"TypeDescriptor.java:115"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:116"$0$0$0$10$63$"	 * Create a new type descriptor from a {@link ResolvableType}."
"TypeDescriptor.java:117"$0$0$0$13$77$"	 * <p>This constructor is used internally and may also be used by subclasses"
"TypeDescriptor.java:118"$0$0$0$12$76$"	 * that support non-Java languages with extended type systems. It is public"
"TypeDescriptor.java:119"$0$0$0$9$48$"	 * as of 5.1.4 whereas it was protected before."
"TypeDescriptor.java:120"$0$0$0$6$45$"	 * @param resolvableType the resolvable type"
"TypeDescriptor.java:121"$1$0$0$14$76$"	 * @param type the backing type (or {@code null} if it should get resolved)"
"TypeDescriptor.java:122"$0$0$0$6$43$"	 * @param annotations the type annotations"
"TypeDescriptor.java:123"$0$0$0$3$14$"	 * @since 4.0"
"TypeDescriptor.java:124"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:125"$0$0$0$10$116$"	public TypeDescriptor(ResolvableType resolvableType, @Nullable Class<?> type, @Nullable Annotation[] annotations) {"
"TypeDescriptor.java:126"$0$0$0$3$39$"		this.resolvableType = resolvableType;"
"TypeDescriptor.java:127"$0$0$0$9$63$"		this.type = (type != null ? type : resolvableType.toClass());"
"TypeDescriptor.java:128"$0$0$0$4$67$"		this.annotatedElement = new AnnotatedElementAdapter(annotations);"
"TypeDescriptor.java:129"$0$0$0$1$2$"	}"
"TypeDescriptor.java:130"$0$0$0$0$0$""
"TypeDescriptor.java:131"$0$0$0$0$0$""
"TypeDescriptor.java:132"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:133"$1$0$0$12$73$"	 * Variation of {@link #getType()} that accounts for a primitive type by"
"TypeDescriptor.java:134"$0$0$0$6$38$"	 * returning its object wrapper type."
"TypeDescriptor.java:135"$0$0$0$11$73$"	 * <p>This is useful for conversion service implementations that wish to"
"TypeDescriptor.java:136"$0$0$0$12$79$"	 * normalize to object-based types and not work with primitive types directly."
"TypeDescriptor.java:137"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:138"$1$0$0$4$34$"	public Class<?> getObjectType() {"
"TypeDescriptor.java:139"$1$0$0$2$59$"		return ClassUtils.resolvePrimitiveIfNecessary(getType());"
"TypeDescriptor.java:140"$0$0$0$1$2$"	}"
"TypeDescriptor.java:141"$0$0$0$0$0$""
"TypeDescriptor.java:142"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:143"$0$0$0$12$71$"	 * The type of the backing class, method parameter, field, or property"
"TypeDescriptor.java:144"$0$0$0$5$37$"	 * described by this TypeDescriptor."
"TypeDescriptor.java:145"$1$0$0$10$72$"	 * <p>Returns primitive types as-is. See {@link #getObjectType()} for a"
"TypeDescriptor.java:146"$0$0$0$11$70$"	 * variation of this operation that resolves primitive types to their"
"TypeDescriptor.java:147"$0$0$0$6$44$"	 * corresponding Object types if necessary."
"TypeDescriptor.java:148"$1$0$0$3$25$"	 * @see #getObjectType()"
"TypeDescriptor.java:149"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:150"$1$0$0$4$28$"	public Class<?> getType() {"
"TypeDescriptor.java:151"$0$0$0$2$19$"		return this.type;"
"TypeDescriptor.java:152"$0$0$0$1$2$"	}"
"TypeDescriptor.java:153"$0$0$0$0$0$""
"TypeDescriptor.java:154"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:155"$0$0$0$6$49$"	 * Return the underlying {@link ResolvableType}."
"TypeDescriptor.java:156"$0$0$0$3$14$"	 * @since 4.0"
"TypeDescriptor.java:157"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:158"$1$0$0$4$44$"	public ResolvableType getResolvableType() {"
"TypeDescriptor.java:159"$0$0$0$2$29$"		return this.resolvableType;"
"TypeDescriptor.java:160"$0$0$0$1$2$"	}"
"TypeDescriptor.java:161"$0$0$0$0$0$""
"TypeDescriptor.java:162"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:163"$0$0$0$13$80$"	 * Return the underlying source of the descriptor. Will return a {@link Field},"
"TypeDescriptor.java:164"$0$0$0$12$87$"	 * {@link MethodParameter} or {@link Type} depending on how the {@link TypeDescriptor}"
"TypeDescriptor.java:165"$0$0$0$12$77$"	 * was constructed. This method is primarily to provide access to additional"
"TypeDescriptor.java:166"$0$0$0$11$77$"	 * type information or meta-data that alternative JVM languages may provide."
"TypeDescriptor.java:167"$0$0$0$3$14$"	 * @since 4.0"
"TypeDescriptor.java:168"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:169"$1$0$0$4$28$"	public Object getSource() {"
"TypeDescriptor.java:170"$1$0$0$2$41$"		return this.resolvableType.getSource();"
"TypeDescriptor.java:171"$0$0$0$1$2$"	}"
"TypeDescriptor.java:172"$0$0$0$0$0$""
"TypeDescriptor.java:173"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:174"$0$0$0$14$79$"	 * Narrows this {@link TypeDescriptor} by setting its type to the class of the"
"TypeDescriptor.java:175"$0$0$0$3$19$"	 * provided value."
"TypeDescriptor.java:176"$0$0$0$14$86$"	 * <p>If the value is {@code null}, no narrowing is performed and this TypeDescriptor"
"TypeDescriptor.java:177"$0$0$0$4$26$"	 * is returned unchanged."
"TypeDescriptor.java:178"$0$0$0$13$82$"	 * <p>Designed to be called by binding frameworks when they read property, field,"
"TypeDescriptor.java:179"$0$0$0$13$84$"	 * or method return values. Allows such frameworks to narrow a TypeDescriptor built"
"TypeDescriptor.java:180"$0$0$0$15$86$"	 * from a declared property, field, or method return value type. For example, a field"
"TypeDescriptor.java:181"$0$0$0$11$87$"	 * declared as {@code java.lang.Object} would be narrowed to {@code java.util.HashMap}"
"TypeDescriptor.java:182"$0$0$0$13$83$"	 * if it was set to a {@code java.util.HashMap} value. The narrowed TypeDescriptor"
"TypeDescriptor.java:183"$0$0$0$16$85$"	 * can then be used to convert the HashMap to some other type. Annotation and nested"
"TypeDescriptor.java:184"$0$0$0$9$51$"	 * type context is preserved by the narrowed copy."
"TypeDescriptor.java:185"$0$0$0$12$68$"	 * @param value the value to use for narrowing this type descriptor"
"TypeDescriptor.java:186"$0$0$0$14$85$"	 * @return this TypeDescriptor narrowed (returns a copy with its type updated to the"
"TypeDescriptor.java:187"$0$0$0$6$32$"	 * class of the provided value)"
"TypeDescriptor.java:188"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:189"$0$0$0$6$55$"	public TypeDescriptor narrow(@Nullable Object value) {"
"TypeDescriptor.java:190"$0$0$0$5$22$"		if (value == null) {"
"TypeDescriptor.java:191"$0$0$0$2$15$"			return this;"
"TypeDescriptor.java:192"$0$0$0$1$3$"		}"
"TypeDescriptor.java:193"$2$0$0$5$90$"		ResolvableType narrowed = ResolvableType.forType(value.getClass(), getResolvableType());"
"TypeDescriptor.java:194"$2$0$0$5$74$"		return new TypeDescriptor(narrowed, value.getClass(), getAnnotations());"
"TypeDescriptor.java:195"$0$0$0$1$2$"	}"
"TypeDescriptor.java:196"$0$0$0$0$0$""
"TypeDescriptor.java:197"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:198"$0$0$0$11$77$"	 * Cast this {@link TypeDescriptor} to a superclass or implemented interface"
"TypeDescriptor.java:199"$0$0$0$7$51$"	 * preserving annotations and nested type context."
"TypeDescriptor.java:200"$0$0$0$13$68$"	 * @param superType the super type to cast to (can be {@code null})"
"TypeDescriptor.java:201"$0$0$0$9$53$"	 * @return a new TypeDescriptor for the up-cast type"
"TypeDescriptor.java:202"$0$0$0$12$85$"	 * @throws IllegalArgumentException if this type is not assignable to the super-type"
"TypeDescriptor.java:203"$0$0$0$3$14$"	 * @since 3.2"
"TypeDescriptor.java:204"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:205"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:206"$0$0$0$6$61$"	public TypeDescriptor upcast(@Nullable Class<?> superType) {"
"TypeDescriptor.java:207"$0$0$0$5$26$"		if (superType == null) {"
"TypeDescriptor.java:208"$0$0$0$2$15$"			return null;"
"TypeDescriptor.java:209"$0$0$0$1$3$"		}"
"TypeDescriptor.java:210"$1$0$0$2$44$"		Assert.isAssignable(superType, getType());"
"TypeDescriptor.java:211"$2$0$0$5$92$"		return new TypeDescriptor(getResolvableType().as(superType), superType, getAnnotations());"
"TypeDescriptor.java:212"$0$0$0$1$2$"	}"
"TypeDescriptor.java:213"$0$0$0$0$0$""
"TypeDescriptor.java:214"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:215"$0$0$0$12$65$"	 * Return the name of this type: the fully qualified class name."
"TypeDescriptor.java:216"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:217"$1$0$0$4$26$"	public String getName() {"
"TypeDescriptor.java:218"$2$0$0$2$48$"		return ClassUtils.getQualifiedName(getType());"
"TypeDescriptor.java:219"$0$0$0$1$2$"	}"
"TypeDescriptor.java:220"$0$0$0$0$0$""
"TypeDescriptor.java:221"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:222"$0$0$0$7$34$"	 * Is this type a primitive type?"
"TypeDescriptor.java:223"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:224"$0$0$0$4$31$"	public boolean isPrimitive() {"
"TypeDescriptor.java:225"$1$0$0$2$33$"		return getType().isPrimitive();"
"TypeDescriptor.java:226"$0$0$0$1$2$"	}"
"TypeDescriptor.java:227"$0$0$0$0$0$""
"TypeDescriptor.java:228"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:229"$0$0$0$11$72$"	 * Return the annotations associated with this type descriptor, if any."
"TypeDescriptor.java:230"$0$0$0$10$54$"	 * @return the annotations, or an empty array if none"
"TypeDescriptor.java:231"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:232"$1$0$0$4$39$"	public Annotation[] getAnnotations() {"
"TypeDescriptor.java:233"$1$0$0$2$48$"		return this.annotatedElement.getAnnotations();"
"TypeDescriptor.java:234"$0$0$0$1$2$"	}"
"TypeDescriptor.java:235"$0$0$0$0$0$""
"TypeDescriptor.java:236"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:237"$0$0$0$10$67$"	 * Determine if this type descriptor has the specified annotation."
"TypeDescriptor.java:238"$0$0$0$11$72$"	 * <p>As of Spring Framework 4.2, this method supports arbitrary levels"
"TypeDescriptor.java:239"$0$0$0$3$24$"	 * of meta-annotations."
"TypeDescriptor.java:240"$0$0$0$6$45$"	 * @param annotationType the annotation type"
"TypeDescriptor.java:241"$0$0$0$8$54$"	 * @return <tt>true</tt> if the annotation is present"
"TypeDescriptor.java:242"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:243"$0$0$0$7$75$"	public boolean hasAnnotation(Class<? extends Annotation> annotationType) {"
"TypeDescriptor.java:244"$0$0$0$3$40$"		if (this.annotatedElement.isEmpty()) {"
"TypeDescriptor.java:245"$1$0$1$8$92$"			// Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations()"
"TypeDescriptor.java:246"$0$0$1$16$80$"			// to return a copy of the array, whereas we can do it more efficiently here."
"TypeDescriptor.java:247"$0$0$0$2$16$"			return false;"
"TypeDescriptor.java:248"$0$0$0$1$3$"		}"
"TypeDescriptor.java:249"$0$0$0$3$82$"		return AnnotatedElementUtils.isAnnotated(this.annotatedElement, annotationType);"
"TypeDescriptor.java:250"$0$0$0$1$2$"	}"
"TypeDescriptor.java:251"$0$0$0$0$0$""
"TypeDescriptor.java:252"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:253"$0$0$0$15$98$"	 * Obtain the annotation of the specified {@code annotationType} that is on this type descriptor."
"TypeDescriptor.java:254"$0$0$0$13$93$"	 * <p>As of Spring Framework 4.2, this method supports arbitrary levels of meta-annotations."
"TypeDescriptor.java:255"$0$0$0$6$45$"	 * @param annotationType the annotation type"
"TypeDescriptor.java:256"$0$0$0$16$96$"	 * @return the annotation, or {@code null} if no such annotation exists on this type descriptor"
"TypeDescriptor.java:257"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:258"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:259"$1$0$0$8$73$"	public <T extends Annotation> T getAnnotation(Class<T> annotationType) {"
"TypeDescriptor.java:260"$0$0$0$3$40$"		if (this.annotatedElement.isEmpty()) {"
"TypeDescriptor.java:261"$1$0$1$8$92$"			// Shortcut: AnnotatedElementUtils would have to expect AnnotatedElement.getAnnotations()"
"TypeDescriptor.java:262"$0$0$1$16$80$"			// to return a copy of the array, whereas we can do it more efficiently here."
"TypeDescriptor.java:263"$0$0$0$2$15$"			return null;"
"TypeDescriptor.java:264"$0$0$0$1$3$"		}"
"TypeDescriptor.java:265"$1$0$0$3$90$"		return AnnotatedElementUtils.getMergedAnnotation(this.annotatedElement, annotationType);"
"TypeDescriptor.java:266"$0$0$0$1$2$"	}"
"TypeDescriptor.java:267"$0$0$0$0$0$""
"TypeDescriptor.java:268"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:269"$0$0$0$16$85$"	 * Returns true if an object of this type descriptor can be assigned to the location"
"TypeDescriptor.java:270"$0$0$0$7$43$"	 * described by the given type descriptor."
"TypeDescriptor.java:271"$0$0$0$5$93$"	 * <p>For example, {@code valueOf(String.class).isAssignableTo(valueOf(CharSequence.class))}"
"TypeDescriptor.java:272"$0$0$0$15$91$"	 * returns {@code true} because a String value can be assigned to a CharSequence variable."
"TypeDescriptor.java:273"$0$0$0$7$91$"	 * On the other hand, {@code valueOf(Number.class).isAssignableTo(valueOf(Integer.class))}"
"TypeDescriptor.java:274"$0$0$0$15$96$"	 * returns {@code false} because, while all Integers are Numbers, not all Numbers are Integers."
"TypeDescriptor.java:275"$0$0$0$14$94$"	 * <p>For arrays, collections, and maps, element and key/value types are checked if declared."
"TypeDescriptor.java:276"$0$0$0$12$99$"	 * For example, a List&lt;String&gt; field value is assignable to a Collection&lt;CharSequence&gt;"
"TypeDescriptor.java:277"$0$0$0$9$75$"	 * field, but List&lt;Number&gt; is not assignable to List&lt;Integer&gt;."
"TypeDescriptor.java:278"$0$0$0$16$91$"	 * @return {@code true} if this type is assignable to the type represented by the provided"
"TypeDescriptor.java:279"$0$0$0$3$19$"	 * type descriptor"
"TypeDescriptor.java:280"$1$0$0$3$25$"	 * @see #getObjectType()"
"TypeDescriptor.java:281"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:282"$0$0$0$5$63$"	public boolean isAssignableTo(TypeDescriptor typeDescriptor) {"
"TypeDescriptor.java:283"$2$0$0$4$93$"		boolean typesAssignable = typeDescriptor.getObjectType().isAssignableFrom(getObjectType());"
"TypeDescriptor.java:284"$0$0$0$3$25$"		if (!typesAssignable) {"
"TypeDescriptor.java:285"$0$0$0$2$16$"			return false;"
"TypeDescriptor.java:286"$0$0$0$1$3$"		}"
"TypeDescriptor.java:287"$0$0$0$5$46$"		if (isArray() && typeDescriptor.isArray()) {"
"TypeDescriptor.java:288"$2$0$0$3$100$"			return isNestedAssignable(getElementTypeDescriptor(), typeDescriptor.getElementTypeDescriptor());"
"TypeDescriptor.java:289"$0$0$0$1$3$"		}"
"TypeDescriptor.java:290"$0$0$0$6$61$"		else if (isCollection() && typeDescriptor.isCollection()) {"
"TypeDescriptor.java:291"$2$0$0$3$100$"			return isNestedAssignable(getElementTypeDescriptor(), typeDescriptor.getElementTypeDescriptor());"
"TypeDescriptor.java:292"$0$0$0$1$3$"		}"
"TypeDescriptor.java:293"$0$0$0$6$47$"		else if (isMap() && typeDescriptor.isMap()) {"
"TypeDescriptor.java:294"$2$0$0$4$100$"			return isNestedAssignable(getMapKeyTypeDescriptor(), typeDescriptor.getMapKeyTypeDescriptor()) &&"
"TypeDescriptor.java:295"$2$0$0$2$96$"				isNestedAssignable(getMapValueTypeDescriptor(), typeDescriptor.getMapValueTypeDescriptor());"
"TypeDescriptor.java:296"$0$0$0$1$3$"		}"
"TypeDescriptor.java:297"$0$0$0$2$8$"		else {"
"TypeDescriptor.java:298"$0$0$0$2$15$"			return true;"
"TypeDescriptor.java:299"$0$0$0$1$3$"		}"
"TypeDescriptor.java:300"$0$0$0$1$2$"	}"
"TypeDescriptor.java:301"$0$0$0$0$0$""
"TypeDescriptor.java:302"$0$0$0$5$82$"	private boolean isNestedAssignable(@Nullable TypeDescriptor nestedTypeDescriptor,"
"TypeDescriptor.java:303"$0$0$0$4$56$"			@Nullable TypeDescriptor otherNestedTypeDescriptor) {"
"TypeDescriptor.java:304"$0$0$0$0$0$""
"TypeDescriptor.java:305"$0$0$0$9$78$"		return (nestedTypeDescriptor == null || otherNestedTypeDescriptor == null ||"
"TypeDescriptor.java:306"$0$0$0$1$68$"				nestedTypeDescriptor.isAssignableTo(otherNestedTypeDescriptor));"
"TypeDescriptor.java:307"$0$0$0$1$2$"	}"
"TypeDescriptor.java:308"$0$0$0$0$0$""
"TypeDescriptor.java:309"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:310"$0$0$0$8$43$"	 * Is this type a {@link Collection} type?"
"TypeDescriptor.java:311"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:312"$0$0$0$4$32$"	public boolean isCollection() {"
"TypeDescriptor.java:313"$1$0$0$2$54$"		return Collection.class.isAssignableFrom(getType());"
"TypeDescriptor.java:314"$0$0$0$1$2$"	}"
"TypeDescriptor.java:315"$0$0$0$0$0$""
"TypeDescriptor.java:316"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:317"$0$0$0$7$31$"	 * Is this type an array type?"
"TypeDescriptor.java:318"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:319"$0$0$0$4$27$"	public boolean isArray() {"
"TypeDescriptor.java:320"$1$0$0$2$29$"		return getType().isArray();"
"TypeDescriptor.java:321"$0$0$0$1$2$"	}"
"TypeDescriptor.java:322"$0$0$0$0$0$""
"TypeDescriptor.java:323"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:324"$0$0$0$12$65$"	 * If this type is an array, returns the array's component type."
"TypeDescriptor.java:325"$0$0$0$13$74$"	 * If this type is a {@code Stream}, returns the stream's component type."
"TypeDescriptor.java:326"$0$0$0$17$104$"	 * If this type is a {@link Collection} and it is parameterized, returns the Collection's element type."
"TypeDescriptor.java:327"$0$0$0$17$109$"	 * If the Collection is not parameterized, returns {@code null} indicating the element type is not declared."
"TypeDescriptor.java:328"$0$0$0$18$100$"	 * @return the array component type or Collection element type, or {@code null} if this type is not"
"TypeDescriptor.java:329"$0$0$0$16$95$"	 * an array type or a {@code java.util.Collection} or if its element type is not parameterized"
"TypeDescriptor.java:330"$0$0$0$3$39$"	 * @see #elementTypeDescriptor(Object)"
"TypeDescriptor.java:331"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:332"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:333"$1$0$0$4$51$"	public TypeDescriptor getElementTypeDescriptor() {"
"TypeDescriptor.java:334"$1$0$0$3$38$"		if (getResolvableType().isArray()) {"
"TypeDescriptor.java:335"$3$0$0$5$93$"			return new TypeDescriptor(getResolvableType().getComponentType(), null, getAnnotations());"
"TypeDescriptor.java:336"$0$0$0$1$3$"		}"
"TypeDescriptor.java:337"$1$0$0$3$49$"		if (Stream.class.isAssignableFrom(getType())) {"
"TypeDescriptor.java:338"$3$0$0$3$91$"			return getRelatedIfResolvable(this, getResolvableType().as(Stream.class).getGeneric(0));"
"TypeDescriptor.java:339"$0$0$0$1$3$"		}"
"TypeDescriptor.java:340"$3$0$0$3$88$"		return getRelatedIfResolvable(this, getResolvableType().asCollection().getGeneric(0));"
"TypeDescriptor.java:341"$0$0$0$1$2$"	}"
"TypeDescriptor.java:342"$0$0$0$0$0$""
"TypeDescriptor.java:343"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:344"$0$0$0$15$86$"	 * If this type is a {@link Collection} or an array, creates a element TypeDescriptor"
"TypeDescriptor.java:345"$0$0$0$8$50$"	 * from the provided collection or array element."
"TypeDescriptor.java:346"$1$0$0$10$88$"	 * <p>Narrows the {@link #getElementTypeDescriptor() elementType} property to the class"
"TypeDescriptor.java:347"$0$0$0$14$81$"	 * of the provided collection or array element. For example, if this describes a"
"TypeDescriptor.java:348"$0$0$0$9$81$"	 * {@code java.util.List&lt;java.lang.Number&lt;} and the element argument is an"
"TypeDescriptor.java:349"$0$0$0$10$93$"	 * {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer}."
"TypeDescriptor.java:350"$0$0$0$13$86$"	 * If this describes a {@code java.util.List&lt;?&gt;} and the element argument is an"
"TypeDescriptor.java:351"$0$0$0$10$92$"	 * {@code java.lang.Integer}, the returned TypeDescriptor will be {@code java.lang.Integer}"
"TypeDescriptor.java:352"$0$0$0$3$12$"	 * as well."
"TypeDescriptor.java:353"$0$0$0$12$75$"	 * <p>Annotation and nested type context will be preserved in the narrowed"
"TypeDescriptor.java:354"$0$0$0$5$36$"	 * TypeDescriptor that is returned."
"TypeDescriptor.java:355"$0$0$0$8$50$"	 * @param element the collection or array element"
"TypeDescriptor.java:356"$0$0$0$14$83$"	 * @return a element type descriptor, narrowed to the type of the provided element"
"TypeDescriptor.java:357"$1$0$0$3$36$"	 * @see #getElementTypeDescriptor()"
"TypeDescriptor.java:358"$0$0$0$3$24$"	 * @see #narrow(Object)"
"TypeDescriptor.java:359"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:360"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:361"$0$0$0$5$62$"	public TypeDescriptor elementTypeDescriptor(Object element) {"
"TypeDescriptor.java:362"$1$0$0$3$53$"		return narrow(element, getElementTypeDescriptor());"
"TypeDescriptor.java:363"$0$0$0$1$2$"	}"
"TypeDescriptor.java:364"$0$0$0$0$0$""
"TypeDescriptor.java:365"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:366"$0$0$0$8$36$"	 * Is this type a {@link Map} type?"
"TypeDescriptor.java:367"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:368"$0$0$0$4$25$"	public boolean isMap() {"
"TypeDescriptor.java:369"$1$0$0$2$47$"		return Map.class.isAssignableFrom(getType());"
"TypeDescriptor.java:370"$0$0$0$1$2$"	}"
"TypeDescriptor.java:371"$0$0$0$0$0$""
"TypeDescriptor.java:372"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:373"$0$0$0$14$68$"	 * If this type is a {@link Map} and its key type is parameterized,"
"TypeDescriptor.java:374"$0$0$0$14$75$"	 * returns the map's key type. If the Map's key type is not parameterized,"
"TypeDescriptor.java:375"$0$0$0$11$65$"	 * returns {@code null} indicating the key type is not declared."
"TypeDescriptor.java:376"$0$0$0$15$67$"	 * @return the Map key type, or {@code null} if this type is a Map"
"TypeDescriptor.java:377"$0$0$0$8$41$"	 * but its key type is not parameterized"
"TypeDescriptor.java:378"$0$0$0$11$77$"	 * @throws IllegalStateException if this type is not a {@code java.util.Map}"
"TypeDescriptor.java:379"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:380"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:381"$1$0$0$4$50$"	public TypeDescriptor getMapKeyTypeDescriptor() {"
"TypeDescriptor.java:382"$0$0$0$4$49$"		Assert.state(isMap(), ""Not a [java.util.Map]"");"
"TypeDescriptor.java:383"$3$0$0$3$81$"		return getRelatedIfResolvable(this, getResolvableType().asMap().getGeneric(0));"
"TypeDescriptor.java:384"$0$0$0$1$2$"	}"
"TypeDescriptor.java:385"$0$0$0$0$0$""
"TypeDescriptor.java:386"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:387"$0$0$0$13$74$"	 * If this type is a {@link Map}, creates a mapKey {@link TypeDescriptor}"
"TypeDescriptor.java:388"$0$0$0$6$30$"	 * from the provided map key."
"TypeDescriptor.java:389"$1$0$0$7$73$"	 * <p>Narrows the {@link #getMapKeyTypeDescriptor() mapKeyType} property"
"TypeDescriptor.java:390"$0$0$0$15$74$"	 * to the class of the provided map key. For example, if this describes a"
"TypeDescriptor.java:391"$0$0$0$7$79$"	 * {@code java.util.Map&lt;java.lang.Number, java.lang.String&lt;} and the key"
"TypeDescriptor.java:392"$0$0$0$11$80$"	 * argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be"
"TypeDescriptor.java:393"$0$0$0$10$84$"	 * {@code java.lang.Integer}. If this describes a {@code java.util.Map&lt;?, ?&gt;}"
"TypeDescriptor.java:394"$0$0$0$11$69$"	 * and the key argument is a {@code java.lang.Integer}, the returned"
"TypeDescriptor.java:395"$0$0$0$8$61$"	 * TypeDescriptor will be {@code java.lang.Integer} as well."
"TypeDescriptor.java:396"$0$0$0$12$75$"	 * <p>Annotation and nested type context will be preserved in the narrowed"
"TypeDescriptor.java:397"$0$0$0$5$36$"	 * TypeDescriptor that is returned."
"TypeDescriptor.java:398"$0$0$0$6$29$"	 * @param mapKey the map key"
"TypeDescriptor.java:399"$0$0$0$7$39$"	 * @return the map key type descriptor"
"TypeDescriptor.java:400"$0$0$0$11$77$"	 * @throws IllegalStateException if this type is not a {@code java.util.Map}"
"TypeDescriptor.java:401"$0$0$0$3$24$"	 * @see #narrow(Object)"
"TypeDescriptor.java:402"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:403"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:404"$1$0$0$5$63$"	public TypeDescriptor getMapKeyTypeDescriptor(Object mapKey) {"
"TypeDescriptor.java:405"$1$0$0$3$51$"		return narrow(mapKey, getMapKeyTypeDescriptor());"
"TypeDescriptor.java:406"$0$0$0$1$2$"	}"
"TypeDescriptor.java:407"$0$0$0$0$0$""
"TypeDescriptor.java:408"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:409"$0$0$0$14$70$"	 * If this type is a {@link Map} and its value type is parameterized,"
"TypeDescriptor.java:410"$0$0$0$6$33$"	 * returns the map's value type."
"TypeDescriptor.java:411"$0$0$0$12$73$"	 * <p>If the Map's value type is not parameterized, returns {@code null}"
"TypeDescriptor.java:412"$0$0$0$8$46$"	 * indicating the value type is not declared."
"TypeDescriptor.java:413"$0$0$0$15$69$"	 * @return the Map value type, or {@code null} if this type is a Map"
"TypeDescriptor.java:414"$0$0$0$8$43$"	 * but its value type is not parameterized"
"TypeDescriptor.java:415"$0$0$0$11$77$"	 * @throws IllegalStateException if this type is not a {@code java.util.Map}"
"TypeDescriptor.java:416"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:417"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:418"$1$0$0$4$52$"	public TypeDescriptor getMapValueTypeDescriptor() {"
"TypeDescriptor.java:419"$0$0$0$4$49$"		Assert.state(isMap(), ""Not a [java.util.Map]"");"
"TypeDescriptor.java:420"$3$0$0$3$81$"		return getRelatedIfResolvable(this, getResolvableType().asMap().getGeneric(1));"
"TypeDescriptor.java:421"$0$0$0$1$2$"	}"
"TypeDescriptor.java:422"$0$0$0$0$0$""
"TypeDescriptor.java:423"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:424"$0$0$0$13$76$"	 * If this type is a {@link Map}, creates a mapValue {@link TypeDescriptor}"
"TypeDescriptor.java:425"$0$0$0$6$32$"	 * from the provided map value."
"TypeDescriptor.java:426"$1$0$0$7$77$"	 * <p>Narrows the {@link #getMapValueTypeDescriptor() mapValueType} property"
"TypeDescriptor.java:427"$0$0$0$15$76$"	 * to the class of the provided map value. For example, if this describes a"
"TypeDescriptor.java:428"$0$0$0$7$81$"	 * {@code java.util.Map&lt;java.lang.String, java.lang.Number&lt;} and the value"
"TypeDescriptor.java:429"$0$0$0$11$80$"	 * argument is a {@code java.lang.Integer}, the returned TypeDescriptor will be"
"TypeDescriptor.java:430"$0$0$0$10$84$"	 * {@code java.lang.Integer}. If this describes a {@code java.util.Map&lt;?, ?&gt;}"
"TypeDescriptor.java:431"$0$0$0$11$71$"	 * and the value argument is a {@code java.lang.Integer}, the returned"
"TypeDescriptor.java:432"$0$0$0$8$61$"	 * TypeDescriptor will be {@code java.lang.Integer} as well."
"TypeDescriptor.java:433"$0$0$0$12$75$"	 * <p>Annotation and nested type context will be preserved in the narrowed"
"TypeDescriptor.java:434"$0$0$0$5$36$"	 * TypeDescriptor that is returned."
"TypeDescriptor.java:435"$0$0$0$6$33$"	 * @param mapValue the map value"
"TypeDescriptor.java:436"$0$0$0$7$41$"	 * @return the map value type descriptor"
"TypeDescriptor.java:437"$0$0$0$11$77$"	 * @throws IllegalStateException if this type is not a {@code java.util.Map}"
"TypeDescriptor.java:438"$0$0$0$3$24$"	 * @see #narrow(Object)"
"TypeDescriptor.java:439"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:440"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:441"$1$0$0$5$67$"	public TypeDescriptor getMapValueTypeDescriptor(Object mapValue) {"
"TypeDescriptor.java:442"$1$0$0$3$55$"		return narrow(mapValue, getMapValueTypeDescriptor());"
"TypeDescriptor.java:443"$0$0$0$1$2$"	}"
"TypeDescriptor.java:444"$0$0$0$0$0$""
"TypeDescriptor.java:445"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:446"$0$0$0$9$97$"	private TypeDescriptor narrow(@Nullable Object value, @Nullable TypeDescriptor typeDescriptor) {"
"TypeDescriptor.java:447"$0$0$0$5$31$"		if (typeDescriptor != null) {"
"TypeDescriptor.java:448"$0$0$0$2$39$"			return typeDescriptor.narrow(value);"
"TypeDescriptor.java:449"$0$0$0$1$3$"		}"
"TypeDescriptor.java:450"$0$0$0$5$22$"		if (value != null) {"
"TypeDescriptor.java:451"$0$0$0$2$24$"			return narrow(value);"
"TypeDescriptor.java:452"$0$0$0$1$3$"		}"
"TypeDescriptor.java:453"$0$0$0$2$14$"		return null;"
"TypeDescriptor.java:454"$0$0$0$1$2$"	}"
"TypeDescriptor.java:455"$0$0$0$0$0$""
"TypeDescriptor.java:456"$0$0$0$1$10$"	@Override"
"TypeDescriptor.java:457"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"TypeDescriptor.java:458"$0$0$0$5$22$"		if (this == other) {"
"TypeDescriptor.java:459"$0$0$0$2$15$"			return true;"
"TypeDescriptor.java:460"$0$0$0$1$3$"		}"
"TypeDescriptor.java:461"$0$0$0$5$43$"		if (!(other instanceof TypeDescriptor)) {"
"TypeDescriptor.java:462"$0$0$0$2$16$"			return false;"
"TypeDescriptor.java:463"$0$0$0$1$3$"		}"
"TypeDescriptor.java:464"$0$0$0$5$52$"		TypeDescriptor otherDesc = (TypeDescriptor) other;"
"TypeDescriptor.java:465"$2$0$0$5$41$"		if (getType() != otherDesc.getType()) {"
"TypeDescriptor.java:466"$0$0$0$2$16$"			return false;"
"TypeDescriptor.java:467"$0$0$0$1$3$"		}"
"TypeDescriptor.java:468"$0$0$0$3$37$"		if (!annotationsMatch(otherDesc)) {"
"TypeDescriptor.java:469"$0$0$0$2$16$"			return false;"
"TypeDescriptor.java:470"$0$0$0$1$3$"		}"
"TypeDescriptor.java:471"$0$0$0$5$36$"		if (isCollection() || isArray()) {"
"TypeDescriptor.java:472"$2$0$0$3$103$"			return ObjectUtils.nullSafeEquals(getElementTypeDescriptor(), otherDesc.getElementTypeDescriptor());"
"TypeDescriptor.java:473"$0$0$0$1$3$"		}"
"TypeDescriptor.java:474"$0$0$0$4$21$"		else if (isMap()) {"
"TypeDescriptor.java:475"$2$0$0$4$104$"			return (ObjectUtils.nullSafeEquals(getMapKeyTypeDescriptor(), otherDesc.getMapKeyTypeDescriptor()) &&"
"TypeDescriptor.java:476"$2$0$0$2$101$"					ObjectUtils.nullSafeEquals(getMapValueTypeDescriptor(), otherDesc.getMapValueTypeDescriptor()));"
"TypeDescriptor.java:477"$0$0$0$1$3$"		}"
"TypeDescriptor.java:478"$0$0$0$2$8$"		else {"
"TypeDescriptor.java:479"$0$0$0$2$15$"			return true;"
"TypeDescriptor.java:480"$0$0$0$1$3$"		}"
"TypeDescriptor.java:481"$0$0$0$1$2$"	}"
"TypeDescriptor.java:482"$0$0$0$0$0$""
"TypeDescriptor.java:483"$0$0$0$5$61$"	private boolean annotationsMatch(TypeDescriptor otherDesc) {"
"TypeDescriptor.java:484"$1$0$0$4$39$"		Annotation[] anns = getAnnotations();"
"TypeDescriptor.java:485"$1$0$0$4$54$"		Annotation[] otherAnns = otherDesc.getAnnotations();"
"TypeDescriptor.java:486"$0$0$0$5$26$"		if (anns == otherAnns) {"
"TypeDescriptor.java:487"$0$0$0$2$15$"			return true;"
"TypeDescriptor.java:488"$0$0$0$1$3$"		}"
"TypeDescriptor.java:489"$0$0$0$5$40$"		if (anns.length != otherAnns.length) {"
"TypeDescriptor.java:490"$0$0$0$2$16$"			return false;"
"TypeDescriptor.java:491"$0$0$0$1$3$"		}"
"TypeDescriptor.java:492"$0$0$0$5$24$"		if (anns.length > 0) {"
"TypeDescriptor.java:493"$0$0$0$10$42$"			for (int i = 0; i < anns.length; i++) {"
"TypeDescriptor.java:494"$0$0$0$4$51$"				if (!annotationEquals(anns[i], otherAnns[i])) {"
"TypeDescriptor.java:495"$0$0$0$2$18$"					return false;"
"TypeDescriptor.java:496"$0$0$0$1$5$"				}"
"TypeDescriptor.java:497"$0$0$0$1$4$"			}"
"TypeDescriptor.java:498"$0$0$0$1$3$"		}"
"TypeDescriptor.java:499"$0$0$0$2$14$"		return true;"
"TypeDescriptor.java:500"$0$0$0$1$2$"	}"
"TypeDescriptor.java:501"$0$0$0$0$0$""
"TypeDescriptor.java:502"$0$0$0$7$72$"	private boolean annotationEquals(Annotation ann, Annotation otherAnn) {"
"TypeDescriptor.java:503"$0$0$1$15$99$"		// Annotation.equals is reflective and pretty slow, so let's check identity and proxy type first."
"TypeDescriptor.java:504"$2$0$0$10$94$"		return (ann == otherAnn || (ann.getClass() == otherAnn.getClass() && ann.equals(otherAnn)));"
"TypeDescriptor.java:505"$0$0$0$1$2$"	}"
"TypeDescriptor.java:506"$0$0$0$0$0$""
"TypeDescriptor.java:507"$0$0$0$1$10$"	@Override"
"TypeDescriptor.java:508"$0$0$0$4$24$"	public int hashCode() {"
"TypeDescriptor.java:509"$1$0$0$2$30$"		return getType().hashCode();"
"TypeDescriptor.java:510"$0$0$0$1$2$"	}"
"TypeDescriptor.java:511"$0$0$0$0$0$""
"TypeDescriptor.java:512"$0$0$0$1$10$"	@Override"
"TypeDescriptor.java:513"$0$0$0$4$27$"	public String toString() {"
"TypeDescriptor.java:514"$0$0$0$5$46$"		StringBuilder builder = new StringBuilder();"
"TypeDescriptor.java:515"$1$0$0$6$43$"		for (Annotation ann : getAnnotations()) {"
"TypeDescriptor.java:516"$1$0$0$2$74$"			builder.append(""@"").append(ann.annotationType().getName()).append(' ');"
"TypeDescriptor.java:517"$0$0$0$1$3$"		}"
"TypeDescriptor.java:518"$1$0$0$1$49$"		builder.append(getResolvableType().toString());"
"TypeDescriptor.java:519"$0$0$0$2$28$"		return builder.toString();"
"TypeDescriptor.java:520"$0$0$0$1$2$"	}"
"TypeDescriptor.java:521"$0$0$0$0$0$""
"TypeDescriptor.java:522"$0$0$0$0$0$""
"TypeDescriptor.java:523"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:524"$0$0$0$9$47$"	 * Create a new type descriptor for an object."
"TypeDescriptor.java:525"$0$0$0$13$78$"	 * <p>Use this factory method to introspect a source object before asking the"
"TypeDescriptor.java:526"$0$0$0$10$57$"	 * conversion system to convert it to some another type."
"TypeDescriptor.java:527"$0$0$0$13$79$"	 * <p>If the provided object is {@code null}, returns {@code null}, else calls"
"TypeDescriptor.java:528"$0$0$0$11$78$"	 * {@link #valueOf(Class)} to build a TypeDescriptor from the object's class."
"TypeDescriptor.java:529"$0$0$0$6$35$"	 * @param source the source object"
"TypeDescriptor.java:530"$0$0$0$5$31$"	 * @return the type descriptor"
"TypeDescriptor.java:531"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:532"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:533"$0$0$0$7$66$"	public static TypeDescriptor forObject(@Nullable Object source) {"
"TypeDescriptor.java:534"$1$0$0$8$62$"		return (source != null ? valueOf(source.getClass()) : null);"
"TypeDescriptor.java:535"$0$0$0$1$2$"	}"
"TypeDescriptor.java:536"$0$0$0$0$0$""
"TypeDescriptor.java:537"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:538"$0$0$0$10$53$"	 * Create a new type descriptor from the given type."
"TypeDescriptor.java:539"$0$0$0$14$75$"	 * <p>Use this to instruct the conversion system to convert an object to a"
"TypeDescriptor.java:540"$1$0$0$14$77$"	 * specific target type, when no type location such as a method parameter or"
"TypeDescriptor.java:541"$0$0$0$9$64$"	 * field is available to provide additional conversion context."
"TypeDescriptor.java:542"$0$0$0$10$79$"	 * <p>Generally prefer use of {@link #forObject(Object)} for constructing type"
"TypeDescriptor.java:543"$0$0$0$13$80$"	 * descriptors from source objects, as it handles the {@code null} object case."
"TypeDescriptor.java:544"$0$0$0$13$80$"	 * @param type the class (may be {@code null} to indicate {@code Object.class})"
"TypeDescriptor.java:545"$0$0$0$6$45$"	 * @return the corresponding type descriptor"
"TypeDescriptor.java:546"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:547"$0$0$0$7$64$"	public static TypeDescriptor valueOf(@Nullable Class<?> type) {"
"TypeDescriptor.java:548"$0$0$0$5$21$"		if (type == null) {"
"TypeDescriptor.java:549"$0$0$0$3$23$"			type = Object.class;"
"TypeDescriptor.java:550"$0$0$0$1$3$"		}"
"TypeDescriptor.java:551"$1$0$0$4$51$"		TypeDescriptor desc = commonTypesCache.get(type);"
"TypeDescriptor.java:552"$0$0$0$11$95$"		return (desc != null ? desc : new TypeDescriptor(ResolvableType.forClass(type), null, null));"
"TypeDescriptor.java:553"$0$0$0$1$2$"	}"
"TypeDescriptor.java:554"$0$0$0$0$0$""
"TypeDescriptor.java:555"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:556"$0$0$0$11$74$"	 * Create a new type descriptor from a {@link java.util.Collection} type."
"TypeDescriptor.java:557"$0$0$0$7$50$"	 * <p>Useful for converting to typed Collections."
"TypeDescriptor.java:558"$0$0$0$11$66$"	 * <p>For example, a {@code List<String>} could be converted to a"
"TypeDescriptor.java:559"$1$0$0$12$84$"	 * {@code List<EmailAddress>} by converting to a targetType built with this method."
"TypeDescriptor.java:560"$0$0$0$13$83$"	 * The method call to construct such a {@code TypeDescriptor} would look something"
"TypeDescriptor.java:561"$0$0$0$5$85$"	 * like: {@code collection(List.class, TypeDescriptor.valueOf(EmailAddress.class));}"
"TypeDescriptor.java:562"$0$0$0$11$87$"	 * @param collectionType the collection type, which must implement {@link Collection}."
"TypeDescriptor.java:563"$0$0$0$10$80$"	 * @param elementTypeDescriptor a descriptor for the collection's element type,"
"TypeDescriptor.java:564"$0$0$0$6$39$"	 * used to convert collection elements"
"TypeDescriptor.java:565"$0$0$0$6$42$"	 * @return the collection type descriptor"
"TypeDescriptor.java:566"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:567"$0$0$0$9$115$"	public static TypeDescriptor collection(Class<?> collectionType, @Nullable TypeDescriptor elementTypeDescriptor) {"
"TypeDescriptor.java:568"$0$0$0$7$69$"		Assert.notNull(collectionType, ""Collection type must not be null"");"
"TypeDescriptor.java:569"$0$0$0$3$59$"		if (!Collection.class.isAssignableFrom(collectionType)) {"
"TypeDescriptor.java:570"$0$0$0$8$90$"			throw new IllegalArgumentException(""Collection type must be a [java.util.Collection]"");"
"TypeDescriptor.java:571"$0$0$0$1$3$"		}"
"TypeDescriptor.java:572"$0$0$0$10$105$"		ResolvableType element = (elementTypeDescriptor != null ? elementTypeDescriptor.resolvableType : null);"
"TypeDescriptor.java:573"$0$0$0$6$102$"		return new TypeDescriptor(ResolvableType.forClassWithGenerics(collectionType, element), null, null);"
"TypeDescriptor.java:574"$0$0$0$1$2$"	}"
"TypeDescriptor.java:575"$0$0$0$0$0$""
"TypeDescriptor.java:576"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:577"$0$0$0$11$67$"	 * Create a new type descriptor from a {@link java.util.Map} type."
"TypeDescriptor.java:578"$0$0$0$7$43$"	 * <p>Useful for converting to typed Maps."
"TypeDescriptor.java:579"$0$0$0$13$99$"	 * <p>For example, a Map&lt;String, String&gt; could be converted to a Map&lt;Id, EmailAddress&gt;"
"TypeDescriptor.java:580"$1$0$0$10$57$"	 * by converting to a targetType built with this method:"
"TypeDescriptor.java:581"$0$0$0$13$81$"	 * The method call to construct such a TypeDescriptor would look something like:"
"TypeDescriptor.java:582"$0$0$0$3$22$"	 * <pre class=""code"">"
"TypeDescriptor.java:583"$0$0$0$4$97$"	 * map(Map.class, TypeDescriptor.valueOf(Id.class), TypeDescriptor.valueOf(EmailAddress.class));"
"TypeDescriptor.java:584"$0$0$0$2$10$"	 * </pre>"
"TypeDescriptor.java:585"$0$0$0$11$65$"	 * @param mapType the map type, which must implement {@link Map}"
"TypeDescriptor.java:586"$0$0$0$15$90$"	 * @param keyTypeDescriptor a descriptor for the map's key type, used to convert map keys"
"TypeDescriptor.java:587"$0$0$0$12$79$"	 * @param valueTypeDescriptor the map's value type, used to convert map values"
"TypeDescriptor.java:588"$0$0$0$6$35$"	 * @return the map type descriptor"
"TypeDescriptor.java:589"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:590"$0$0$0$8$95$"	public static TypeDescriptor map(Class<?> mapType, @Nullable TypeDescriptor keyTypeDescriptor,"
"TypeDescriptor.java:591"$0$0$0$4$50$"			@Nullable TypeDescriptor valueTypeDescriptor) {"
"TypeDescriptor.java:592"$0$0$0$0$0$""
"TypeDescriptor.java:593"$0$0$0$7$55$"		Assert.notNull(mapType, ""Map type must not be null"");"
"TypeDescriptor.java:594"$0$0$0$3$45$"		if (!Map.class.isAssignableFrom(mapType)) {"
"TypeDescriptor.java:595"$0$0$0$8$76$"			throw new IllegalArgumentException(""Map type must be a [java.util.Map]"");"
"TypeDescriptor.java:596"$0$0$0$1$3$"		}"
"TypeDescriptor.java:597"$0$0$0$10$93$"		ResolvableType key = (keyTypeDescriptor != null ? keyTypeDescriptor.resolvableType : null);"
"TypeDescriptor.java:598"$0$0$0$10$99$"		ResolvableType value = (valueTypeDescriptor != null ? valueTypeDescriptor.resolvableType : null);"
"TypeDescriptor.java:599"$0$0$0$7$98$"		return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null);"
"TypeDescriptor.java:600"$0$0$0$1$2$"	}"
"TypeDescriptor.java:601"$0$0$0$0$0$""
"TypeDescriptor.java:602"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:603"$0$0$0$13$67$"	 * Create a new type descriptor as an array of the specified type."
"TypeDescriptor.java:604"$0$0$0$9$64$"	 * <p>For example to create a {@code Map<String,String>[]} use:"
"TypeDescriptor.java:605"$0$0$0$3$22$"	 * <pre class=""code"">"
"TypeDescriptor.java:606"$0$0$0$4$128$"	 * TypeDescriptor.array(TypeDescriptor.map(Map.class, TypeDescriptor.value(String.class), TypeDescriptor.value(String.class)));"
"TypeDescriptor.java:607"$0$0$0$2$10$"	 * </pre>"
"TypeDescriptor.java:608"$0$0$0$13$96$"	 * @param elementTypeDescriptor the {@link TypeDescriptor} of the array element or {@code null}"
"TypeDescriptor.java:609"$0$0$0$15$108$"	 * @return an array {@link TypeDescriptor} or {@code null} if {@code elementTypeDescriptor} is {@code null}"
"TypeDescriptor.java:610"$0$0$0$3$16$"	 * @since 3.2.1"
"TypeDescriptor.java:611"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:612"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:613"$0$0$0$7$85$"	public static TypeDescriptor array(@Nullable TypeDescriptor elementTypeDescriptor) {"
"TypeDescriptor.java:614"$0$0$0$5$38$"		if (elementTypeDescriptor == null) {"
"TypeDescriptor.java:615"$0$0$0$2$15$"			return null;"
"TypeDescriptor.java:616"$0$0$0$1$3$"		}"
"TypeDescriptor.java:617"$0$0$0$3$99$"		return new TypeDescriptor(ResolvableType.forArrayComponent(elementTypeDescriptor.resolvableType),"
"TypeDescriptor.java:618"$1$0$0$2$50$"				null, elementTypeDescriptor.getAnnotations());"
"TypeDescriptor.java:619"$0$0$0$1$2$"	}"
"TypeDescriptor.java:620"$0$0$0$0$0$""
"TypeDescriptor.java:621"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:622"$0$0$0$14$84$"	 * Create a type descriptor for a nested type declared within the method parameter."
"TypeDescriptor.java:623"$0$0$0$12$76$"	 * <p>For example, if the methodParameter is a {@code List<String>} and the"
"TypeDescriptor.java:624"$0$0$0$12$72$"	 * nesting level is 1, the nested type descriptor will be String.class."
"TypeDescriptor.java:625"$0$0$0$11$77$"	 * <p>If the methodParameter is a {@code List<List<String>>} and the nesting"
"TypeDescriptor.java:626"$0$0$0$13$71$"	 * level is 2, the nested type descriptor will also be a String.class."
"TypeDescriptor.java:627"$0$0$0$12$79$"	 * <p>If the methodParameter is a {@code Map<Integer, String>} and the nesting"
"TypeDescriptor.java:628"$0$0$0$16$86$"	 * level is 1, the nested type descriptor will be String, derived from the map value."
"TypeDescriptor.java:629"$0$0$0$11$77$"	 * <p>If the methodParameter is a {@code List<Map<Integer, String>>} and the"
"TypeDescriptor.java:630"$0$0$0$17$94$"	 * nesting level is 2, the nested type descriptor will be String, derived from the map value."
"TypeDescriptor.java:631"$0$0$0$16$92$"	 * <p>Returns {@code null} if a nested type cannot be obtained because it was not declared."
"TypeDescriptor.java:632"$0$0$0$14$78$"	 * For example, if the method parameter is a {@code List<?>}, the nested type"
"TypeDescriptor.java:633"$0$0$0$7$45$"	 * descriptor returned will be {@code null}."
"TypeDescriptor.java:634"$0$0$0$11$72$"	 * @param methodParameter the method parameter with a nestingLevel of 1"
"TypeDescriptor.java:635"$0$0$0$11$76$"	 * @param nestingLevel the nesting level of the collection/array element or"
"TypeDescriptor.java:636"$0$0$0$8$57$"	 * map key/value declaration within the method parameter"
"TypeDescriptor.java:637"$0$0$0$11$70$"	 * @return the nested type descriptor at the specified nesting level,"
"TypeDescriptor.java:638"$0$0$0$10$47$"	 * or {@code null} if it could not be obtained"
"TypeDescriptor.java:639"$0$0$0$10$70$"	 * @throws IllegalArgumentException if the nesting level of the input"
"TypeDescriptor.java:640"$0$0$0$14$72$"	 * {@link MethodParameter} argument is not 1, or if the types up to the"
"TypeDescriptor.java:641"$0$0$0$12$70$"	 * specified nesting level are not of collection, array, or map types"
"TypeDescriptor.java:642"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:643"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:644"$0$0$0$8$89$"	public static TypeDescriptor nested(MethodParameter methodParameter, int nestingLevel) {"
"TypeDescriptor.java:645"$1$0$0$5$47$"		if (methodParameter.getNestingLevel() != 1) {"
"TypeDescriptor.java:646"$0$0$0$10$83$"			throw new IllegalArgumentException(""MethodParameter nesting level must be 1: "" +"
"TypeDescriptor.java:647"$0$0$0$13$101$"					""use the nestingLevel parameter to specify the desired nestingLevel for nested type traversal"");"
"TypeDescriptor.java:648"$0$0$0$1$3$"		}"
"TypeDescriptor.java:649"$0$0$0$4$67$"		return nested(new TypeDescriptor(methodParameter), nestingLevel);"
"TypeDescriptor.java:650"$0$0$0$1$2$"	}"
"TypeDescriptor.java:651"$0$0$0$0$0$""
"TypeDescriptor.java:652"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:653"$0$0$0$13$73$"	 * Create a type descriptor for a nested type declared within the field."
"TypeDescriptor.java:654"$0$0$0$13$74$"	 * <p>For example, if the field is a {@code List<String>} and the nesting"
"TypeDescriptor.java:655"$0$0$0$12$72$"	 * level is 1, the nested type descriptor will be {@code String.class}."
"TypeDescriptor.java:656"$0$0$0$13$76$"	 * <p>If the field is a {@code List<List<String>>} and the nesting level is"
"TypeDescriptor.java:657"$0$0$0$12$70$"	 * 2, the nested type descriptor will also be a {@code String.class}."
"TypeDescriptor.java:658"$0$0$0$13$75$"	 * <p>If the field is a {@code Map<Integer, String>} and the nesting level"
"TypeDescriptor.java:659"$0$0$0$15$80$"	 * is 1, the nested type descriptor will be String, derived from the map value."
"TypeDescriptor.java:660"$0$0$0$12$75$"	 * <p>If the field is a {@code List<Map<Integer, String>>} and the nesting"
"TypeDescriptor.java:661"$0$0$0$16$86$"	 * level is 2, the nested type descriptor will be String, derived from the map value."
"TypeDescriptor.java:662"$0$0$0$15$82$"	 * <p>Returns {@code null} if a nested type cannot be obtained because it was not"
"TypeDescriptor.java:663"$0$0$0$14$77$"	 * declared. For example, if the field is a {@code List<?>}, the nested type"
"TypeDescriptor.java:664"$0$0$0$7$45$"	 * descriptor returned will be {@code null}."
"TypeDescriptor.java:665"$0$0$0$5$26$"	 * @param field the field"
"TypeDescriptor.java:666"$0$0$0$11$76$"	 * @param nestingLevel the nesting level of the collection/array element or"
"TypeDescriptor.java:667"$0$0$0$7$46$"	 * map key/value declaration within the field"
"TypeDescriptor.java:668"$0$0$0$11$70$"	 * @return the nested type descriptor at the specified nesting level,"
"TypeDescriptor.java:669"$0$0$0$10$47$"	 * or {@code null} if it could not be obtained"
"TypeDescriptor.java:670"$0$0$0$11$77$"	 * @throws IllegalArgumentException if the types up to the specified nesting"
"TypeDescriptor.java:671"$0$0$0$10$52$"	 * level are not of collection, array, or map types"
"TypeDescriptor.java:672"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:673"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:674"$0$0$0$8$69$"	public static TypeDescriptor nested(Field field, int nestingLevel) {"
"TypeDescriptor.java:675"$0$0$0$4$57$"		return nested(new TypeDescriptor(field), nestingLevel);"
"TypeDescriptor.java:676"$0$0$0$1$2$"	}"
"TypeDescriptor.java:677"$0$0$0$0$0$""
"TypeDescriptor.java:678"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:679"$0$0$0$13$76$"	 * Create a type descriptor for a nested type declared within the property."
"TypeDescriptor.java:680"$0$0$0$13$77$"	 * <p>For example, if the property is a {@code List<String>} and the nesting"
"TypeDescriptor.java:681"$0$0$0$12$72$"	 * level is 1, the nested type descriptor will be {@code String.class}."
"TypeDescriptor.java:682"$0$0$0$12$76$"	 * <p>If the property is a {@code List<List<String>>} and the nesting level"
"TypeDescriptor.java:683"$0$0$0$13$73$"	 * is 2, the nested type descriptor will also be a {@code String.class}."
"TypeDescriptor.java:684"$0$0$0$13$78$"	 * <p>If the property is a {@code Map<Integer, String>} and the nesting level"
"TypeDescriptor.java:685"$0$0$0$15$80$"	 * is 1, the nested type descriptor will be String, derived from the map value."
"TypeDescriptor.java:686"$0$0$0$12$78$"	 * <p>If the property is a {@code List<Map<Integer, String>>} and the nesting"
"TypeDescriptor.java:687"$0$0$0$16$86$"	 * level is 2, the nested type descriptor will be String, derived from the map value."
"TypeDescriptor.java:688"$0$0$0$15$82$"	 * <p>Returns {@code null} if a nested type cannot be obtained because it was not"
"TypeDescriptor.java:689"$0$0$0$14$80$"	 * declared. For example, if the property is a {@code List<?>}, the nested type"
"TypeDescriptor.java:690"$0$0$0$7$45$"	 * descriptor returned will be {@code null}."
"TypeDescriptor.java:691"$0$0$0$5$32$"	 * @param property the property"
"TypeDescriptor.java:692"$0$0$0$11$76$"	 * @param nestingLevel the nesting level of the collection/array element or"
"TypeDescriptor.java:693"$0$0$0$7$49$"	 * map key/value declaration within the property"
"TypeDescriptor.java:694"$0$0$0$12$73$"	 * @return the nested type descriptor at the specified nesting level, or"
"TypeDescriptor.java:695"$0$0$0$9$44$"	 * {@code null} if it could not be obtained"
"TypeDescriptor.java:696"$0$0$0$11$77$"	 * @throws IllegalArgumentException if the types up to the specified nesting"
"TypeDescriptor.java:697"$0$0$0$10$52$"	 * level are not of collection, array, or map types"
"TypeDescriptor.java:698"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:699"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:700"$0$0$0$8$75$"	public static TypeDescriptor nested(Property property, int nestingLevel) {"
"TypeDescriptor.java:701"$0$0$0$4$60$"		return nested(new TypeDescriptor(property), nestingLevel);"
"TypeDescriptor.java:702"$0$0$0$1$2$"	}"
"TypeDescriptor.java:703"$0$0$0$0$0$""
"TypeDescriptor.java:704"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:705"$0$0$0$8$88$"	private static TypeDescriptor nested(TypeDescriptor typeDescriptor, int nestingLevel) {"
"TypeDescriptor.java:706"$0$0$0$4$56$"		ResolvableType nested = typeDescriptor.resolvableType;"
"TypeDescriptor.java:707"$0$0$0$10$42$"		for (int i = 0; i < nestingLevel; i++) {"
"TypeDescriptor.java:708"$1$0$0$5$42$"			if (Object.class == nested.getType()) {"
"TypeDescriptor.java:709"$0$0$1$14$75$"				// Could be a collection type but we don't know about its element type,"
"TypeDescriptor.java:710"$0$0$1$13$70$"				// so let's just assume there is an element type of type Object..."
"TypeDescriptor.java:711"$0$0$0$1$4$"			}"
"TypeDescriptor.java:712"$0$0$0$2$9$"			else {"
"TypeDescriptor.java:713"$1$0$0$3$33$"				nested = nested.getNested(2);"
"TypeDescriptor.java:714"$0$0$0$1$4$"			}"
"TypeDescriptor.java:715"$0$0$0$1$3$"		}"
"TypeDescriptor.java:716"$0$0$0$5$38$"		if (nested == ResolvableType.NONE) {"
"TypeDescriptor.java:717"$0$0$0$2$15$"			return null;"
"TypeDescriptor.java:718"$0$0$0$1$3$"		}"
"TypeDescriptor.java:719"$1$0$0$3$56$"		return getRelatedIfResolvable(typeDescriptor, nested);"
"TypeDescriptor.java:720"$0$0$0$1$2$"	}"
"TypeDescriptor.java:721"$0$0$0$0$0$""
"TypeDescriptor.java:722"$0$0$0$1$10$"	@Nullable"
"TypeDescriptor.java:723"$1$0$0$8$99$"	private static TypeDescriptor getRelatedIfResolvable(TypeDescriptor source, ResolvableType type) {"
"TypeDescriptor.java:724"$0$0$0$5$31$"		if (type.resolve() == null) {"
"TypeDescriptor.java:725"$0$0$0$2$15$"			return null;"
"TypeDescriptor.java:726"$0$0$0$1$3$"		}"
"TypeDescriptor.java:727"$1$0$0$5$65$"		return new TypeDescriptor(type, null, source.getAnnotations());"
"TypeDescriptor.java:728"$0$0$0$1$2$"	}"
"TypeDescriptor.java:729"$0$0$0$0$0$""
"TypeDescriptor.java:730"$0$0$0$0$0$""
"TypeDescriptor.java:731"$0$0$0$1$4$"	/**"
"TypeDescriptor.java:732"$0$0$0$11$75$"	 * Adapter class for exposing a {@code TypeDescriptor}'s annotations as an"
"TypeDescriptor.java:733"$0$0$0$8$77$"	 * {@link AnnotatedElement}, in particular to {@link AnnotatedElementUtils}."
"TypeDescriptor.java:734"$0$0$0$4$67$"	 * @see AnnotatedElementUtils#isAnnotated(AnnotatedElement, Class)"
"TypeDescriptor.java:735"$1$0$0$4$75$"	 * @see AnnotatedElementUtils#getMergedAnnotation(AnnotatedElement, Class)"
"TypeDescriptor.java:736"$0$0$0$1$4$"	 */"
"TypeDescriptor.java:737"$0$0$0$7$82$"	private class AnnotatedElementAdapter implements AnnotatedElement, Serializable {"
"TypeDescriptor.java:738"$0$0$0$0$0$""
"TypeDescriptor.java:739"$0$0$0$1$11$"		@Nullable"
"TypeDescriptor.java:740"$0$0$0$4$41$"		private final Annotation[] annotations;"
"TypeDescriptor.java:741"$0$0$0$0$0$""
"TypeDescriptor.java:742"$0$0$0$5$70$"		public AnnotatedElementAdapter(@Nullable Annotation[] annotations) {"
"TypeDescriptor.java:743"$0$0$0$3$34$"			this.annotations = annotations;"
"TypeDescriptor.java:744"$0$0$0$1$3$"		}"
"TypeDescriptor.java:745"$0$0$0$0$0$""
"TypeDescriptor.java:746"$0$0$0$1$11$"		@Override"
"TypeDescriptor.java:747"$0$0$0$7$83$"		public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {"
"TypeDescriptor.java:748"$1$0$0$6$51$"			for (Annotation annotation : getAnnotations()) {"
"TypeDescriptor.java:749"$0$0$0$5$57$"				if (annotation.annotationType() == annotationClass) {"
"TypeDescriptor.java:750"$0$0$0$2$17$"					return true;"
"TypeDescriptor.java:751"$0$0$0$1$5$"				}"
"TypeDescriptor.java:752"$0$0$0$1$4$"			}"
"TypeDescriptor.java:753"$0$0$0$2$16$"			return false;"
"TypeDescriptor.java:754"$0$0$0$1$3$"		}"
"TypeDescriptor.java:755"$0$0$0$0$0$""
"TypeDescriptor.java:756"$0$0$0$1$11$"		@Override"
"TypeDescriptor.java:757"$0$0$0$1$11$"		@Nullable"
"TypeDescriptor.java:758"$0$0$0$1$32$"		@SuppressWarnings(""unchecked"")"
"TypeDescriptor.java:759"$1$0$0$8$75$"		public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {"
"TypeDescriptor.java:760"$1$0$0$6$51$"			for (Annotation annotation : getAnnotations()) {"
"TypeDescriptor.java:761"$0$0$0$5$57$"				if (annotation.annotationType() == annotationClass) {"
"TypeDescriptor.java:762"$0$0$0$3$27$"					return (T) annotation;"
"TypeDescriptor.java:763"$0$0$0$1$5$"				}"
"TypeDescriptor.java:764"$0$0$0$1$4$"			}"
"TypeDescriptor.java:765"$0$0$0$2$15$"			return null;"
"TypeDescriptor.java:766"$0$0$0$1$3$"		}"
"TypeDescriptor.java:767"$0$0$0$0$0$""
"TypeDescriptor.java:768"$0$0$0$1$11$"		@Override"
"TypeDescriptor.java:769"$1$0$0$4$40$"		public Annotation[] getAnnotations() {"
"TypeDescriptor.java:770"$0$0$0$8$89$"			return (this.annotations != null ? this.annotations.clone() : EMPTY_ANNOTATION_ARRAY);"
"TypeDescriptor.java:771"$0$0$0$1$3$"		}"
"TypeDescriptor.java:772"$0$0$0$0$0$""
"TypeDescriptor.java:773"$0$0$0$1$11$"		@Override"
"TypeDescriptor.java:774"$1$0$0$4$48$"		public Annotation[] getDeclaredAnnotations() {"
"TypeDescriptor.java:775"$1$0$0$2$27$"			return getAnnotations();"
"TypeDescriptor.java:776"$0$0$0$1$3$"		}"
"TypeDescriptor.java:777"$0$0$0$0$0$""
"TypeDescriptor.java:778"$0$0$0$4$28$"		public boolean isEmpty() {"
"TypeDescriptor.java:779"$0$0$0$2$48$"			return ObjectUtils.isEmpty(this.annotations);"
"TypeDescriptor.java:780"$0$0$0$1$3$"		}"
"TypeDescriptor.java:781"$0$0$0$0$0$""
"TypeDescriptor.java:782"$0$0$0$1$11$"		@Override"
"TypeDescriptor.java:783"$0$0$0$6$49$"		public boolean equals(@Nullable Object other) {"
"TypeDescriptor.java:784"$0$0$0$9$72$"			return (this == other || (other instanceof AnnotatedElementAdapter &&"
"TypeDescriptor.java:785"$0$0$0$3$86$"					Arrays.equals(this.annotations, ((AnnotatedElementAdapter) other).annotations)));"
"TypeDescriptor.java:786"$0$0$0$1$3$"		}"
"TypeDescriptor.java:787"$0$0$0$0$0$""
"TypeDescriptor.java:788"$0$0$0$1$11$"		@Override"
"TypeDescriptor.java:789"$0$0$0$4$25$"		public int hashCode() {"
"TypeDescriptor.java:790"$0$0$0$2$44$"			return Arrays.hashCode(this.annotations);"
"TypeDescriptor.java:791"$0$0$0$1$3$"		}"
"TypeDescriptor.java:792"$0$0$0$0$0$""
"TypeDescriptor.java:793"$0$0$0$1$11$"		@Override"
"TypeDescriptor.java:794"$0$0$0$4$28$"		public String toString() {"
"TypeDescriptor.java:795"$0$0$0$2$41$"			return TypeDescriptor.this.toString();"
"TypeDescriptor.java:796"$0$0$0$1$3$"		}"
"TypeDescriptor.java:797"$0$0$0$1$2$"	}"
"TypeDescriptor.java:798"$0$0$0$0$0$""
"TypeDescriptor.java:799"$0$0$0$1$1$"}"
"MimeType.java:1"$0$0$0$1$2$"/*"
"MimeType.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"MimeType.java:3"$0$0$0$1$2$" *"
"MimeType.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MimeType.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MimeType.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MimeType.java:7"$0$0$0$1$2$" *"
"MimeType.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MimeType.java:9"$0$0$0$1$2$" *"
"MimeType.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MimeType.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MimeType.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MimeType.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MimeType.java:14"$0$0$0$5$33$" * limitations under the License."
"MimeType.java:15"$0$0$0$1$3$" */"
"MimeType.java:16"$0$0$0$0$0$""
"MimeType.java:17"$0$0$0$2$33$"package org.springframework.util;"
"MimeType.java:18"$0$0$0$0$0$""
"MimeType.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"MimeType.java:20"$0$0$0$2$32$"import java.nio.charset.Charset;"
"MimeType.java:21"$0$0$0$2$24$"import java.util.BitSet;"
"MimeType.java:22"$0$0$0$2$28$"import java.util.Collection;"
"MimeType.java:23"$0$0$0$2$29$"import java.util.Collections;"
"MimeType.java:24"$0$0$0$2$28$"import java.util.Comparator;"
"MimeType.java:25"$0$0$0$2$26$"import java.util.Iterator;"
"MimeType.java:26"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"MimeType.java:27"$0$0$0$2$22$"import java.util.List;"
"MimeType.java:28"$0$0$0$2$24$"import java.util.Locale;"
"MimeType.java:29"$0$0$0$2$21$"import java.util.Map;"
"MimeType.java:30"$0$0$0$2$25$"import java.util.TreeSet;"
"MimeType.java:31"$0$0$0$0$0$""
"MimeType.java:32"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MimeType.java:33"$0$0$0$0$0$""
"MimeType.java:34"$0$0$0$1$3$"/**"
"MimeType.java:35"$0$0$0$13$77$" * Represents a MIME Type, as originally defined in RFC 2046 and subsequently"
"MimeType.java:36"$0$0$0$8$51$" * used in other Internet protocols including HTTP."
"MimeType.java:37"$0$0$0$1$2$" *"
"MimeType.java:38"$0$0$0$12$77$" * <p>This class, however, does not contain support for the q-parameters used"
"MimeType.java:39"$0$0$0$12$66$" * in HTTP content negotiation. Those can be found in the subclass"
"MimeType.java:40"$0$0$0$8$79$" * {@code org.springframework.http.MediaType} in the {@code spring-web} module."
"MimeType.java:41"$0$0$0$1$2$" *"
"MimeType.java:42"$2$0$0$12$90$" * <p>Consists of a {@linkplain #getType() type} and a {@linkplain #getSubtype() subtype}."
"MimeType.java:43"$0$0$0$14$79$" * Also has functionality to parse MIME Type values from a {@code String} using"
"MimeType.java:44"$0$0$0$10$80$" * {@link #valueOf(String)}. For more parsing options see {@link MimeTypeUtils}."
"MimeType.java:45"$0$0$0$1$2$" *"
"MimeType.java:46"$0$0$0$4$24$" * @author Arjen Poutsma"
"MimeType.java:47"$0$0$0$4$26$" * @author Juergen Hoeller"
"MimeType.java:48"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"MimeType.java:49"$0$0$0$4$22$" * @author Sam Brannen"
"MimeType.java:50"$0$0$0$3$13$" * @since 4.0"
"MimeType.java:51"$0$0$0$3$21$" * @see MimeTypeUtils"
"MimeType.java:52"$0$0$0$1$3$" */"
"MimeType.java:53"$0$0$0$7$69$"public class MimeType implements Comparable<MimeType>, Serializable {"
"MimeType.java:54"$0$0$0$0$0$""
"MimeType.java:55"$0$0$0$7$67$"	private static final long serialVersionUID = 4085923477777865903L;"
"MimeType.java:56"$0$0$0$0$0$""
"MimeType.java:57"$0$0$0$0$0$""
"MimeType.java:58"$0$0$0$7$51$"	protected static final String WILDCARD_TYPE = ""*"";"
"MimeType.java:59"$0$0$0$0$0$""
"MimeType.java:60"$0$0$0$7$55$"	private static final String PARAM_CHARSET = ""charset"";"
"MimeType.java:61"$0$0$0$0$0$""
"MimeType.java:62"$0$0$0$5$35$"	private static final BitSet TOKEN;"
"MimeType.java:63"$0$0$0$0$0$""
"MimeType.java:64"$0$0$0$2$9$"	static {"
"MimeType.java:65"$0$0$1$9$50$"		// variable names refer to RFC 2616, section 2.2"
"MimeType.java:66"$0$0$0$5$31$"		BitSet ctl = new BitSet(128);"
"MimeType.java:67"$0$0$0$10$33$"		for (int i = 0; i <= 31; i++) {"
"MimeType.java:68"$0$0$0$1$14$"			ctl.set(i);"
"MimeType.java:69"$0$0$0$1$3$"		}"
"MimeType.java:70"$0$0$0$1$15$"		ctl.set(127);"
"MimeType.java:71"$0$0$0$0$0$""
"MimeType.java:72"$0$0$0$5$38$"		BitSet separators = new BitSet(128);"
"MimeType.java:73"$0$0$0$1$22$"		separators.set('(');"
"MimeType.java:74"$0$0$0$1$22$"		separators.set(')');"
"MimeType.java:75"$0$0$0$1$22$"		separators.set('<');"
"MimeType.java:76"$0$0$0$1$22$"		separators.set('>');"
"MimeType.java:77"$0$0$0$1$22$"		separators.set('@');"
"MimeType.java:78"$0$0$0$1$22$"		separators.set(',');"
"MimeType.java:79"$0$0$0$1$22$"		separators.set(';');"
"MimeType.java:80"$0$0$0$1$22$"		separators.set(':');"
"MimeType.java:81"$0$0$0$1$23$"		separators.set('\\');"
"MimeType.java:82"$0$0$0$1$23$"		separators.set('\""');"
"MimeType.java:83"$0$0$0$1$22$"		separators.set('/');"
"MimeType.java:84"$0$0$0$1$22$"		separators.set('[');"
"MimeType.java:85"$0$0$0$1$22$"		separators.set(']');"
"MimeType.java:86"$0$0$0$1$22$"		separators.set('?');"
"MimeType.java:87"$0$0$0$1$22$"		separators.set('=');"
"MimeType.java:88"$0$0$0$1$22$"		separators.set('{');"
"MimeType.java:89"$0$0$0$1$22$"		separators.set('}');"
"MimeType.java:90"$0$0$0$2$22$"		separators.set(' ');"
"MimeType.java:91"$0$0$0$1$23$"		separators.set('\t');"
"MimeType.java:92"$0$0$0$0$0$""
"MimeType.java:93"$0$0$0$4$26$"		TOKEN = new BitSet(128);"
"MimeType.java:94"$0$0$0$2$20$"		TOKEN.set(0, 128);"
"MimeType.java:95"$0$0$0$1$20$"		TOKEN.andNot(ctl);"
"MimeType.java:96"$0$0$0$1$27$"		TOKEN.andNot(separators);"
"MimeType.java:97"$0$0$0$1$2$"	}"
"MimeType.java:98"$0$0$0$0$0$""
"MimeType.java:99"$0$0$0$0$0$""
"MimeType.java:100"$0$0$0$4$27$"	private final String type;"
"MimeType.java:101"$0$0$0$0$0$""
"MimeType.java:102"$0$0$0$4$30$"	private final String subtype;"
"MimeType.java:103"$0$0$0$0$0$""
"MimeType.java:104"$0$0$0$5$46$"	private final Map<String, String> parameters;"
"MimeType.java:105"$0$0$0$0$0$""
"MimeType.java:106"$0$0$0$1$10$"	@Nullable"
"MimeType.java:107"$0$0$0$4$39$"	private volatile String toStringValue;"
"MimeType.java:108"$0$0$0$0$0$""
"MimeType.java:109"$0$0$0$0$0$""
"MimeType.java:110"$0$0$0$1$4$"	/**"
"MimeType.java:111"$0$0$0$11$61$"	 * Create a new {@code MimeType} for the given primary type."
"MimeType.java:112"$1$0$0$9$77$"	 * <p>The {@linkplain #getSubtype() subtype} is set to <code>""&#42;""</code>,"
"MimeType.java:113"$0$0$0$6$33$"	 * and the parameters are empty."
"MimeType.java:114"$0$0$0$6$32$"	 * @param type the primary type"
"MimeType.java:115"$0$0$0$11$89$"	 * @throws IllegalArgumentException if any of the parameters contains illegal characters"
"MimeType.java:116"$0$0$0$1$4$"	 */"
"MimeType.java:117"$0$0$0$4$31$"	public MimeType(String type) {"
"MimeType.java:118"$0$0$0$2$28$"		this(type, WILDCARD_TYPE);"
"MimeType.java:119"$0$0$0$1$2$"	}"
"MimeType.java:120"$0$0$0$0$0$""
"MimeType.java:121"$0$0$0$1$4$"	/**"
"MimeType.java:122"$0$0$0$13$73$"	 * Create a new {@code MimeType} for the given primary type and subtype."
"MimeType.java:123"$0$0$0$5$32$"	 * <p>The parameters are empty."
"MimeType.java:124"$0$0$0$6$32$"	 * @param type the primary type"
"MimeType.java:125"$0$0$0$5$30$"	 * @param subtype the subtype"
"MimeType.java:126"$0$0$0$11$89$"	 * @throws IllegalArgumentException if any of the parameters contains illegal characters"
"MimeType.java:127"$0$0$0$1$4$"	 */"
"MimeType.java:128"$0$0$0$6$47$"	public MimeType(String type, String subtype) {"
"MimeType.java:129"$0$0$0$3$46$"		this(type, subtype, Collections.emptyMap());"
"MimeType.java:130"$0$0$0$1$2$"	}"
"MimeType.java:131"$0$0$0$0$0$""
"MimeType.java:132"$0$0$0$1$4$"	/**"
"MimeType.java:133"$0$0$0$14$81$"	 * Create a new {@code MimeType} for the given type, subtype, and character set."
"MimeType.java:134"$0$0$0$6$32$"	 * @param type the primary type"
"MimeType.java:135"$0$0$0$5$30$"	 * @param subtype the subtype"
"MimeType.java:136"$0$0$0$6$36$"	 * @param charset the character set"
"MimeType.java:137"$0$0$0$11$89$"	 * @throws IllegalArgumentException if any of the parameters contains illegal characters"
"MimeType.java:138"$0$0$0$1$4$"	 */"
"MimeType.java:139"$0$0$0$8$64$"	public MimeType(String type, String subtype, Charset charset) {"
"MimeType.java:140"$0$0$0$4$79$"		this(type, subtype, Collections.singletonMap(PARAM_CHARSET, charset.name()));"
"MimeType.java:141"$0$0$0$1$2$"	}"
"MimeType.java:142"$0$0$0$0$0$""
"MimeType.java:143"$0$0$0$1$4$"	/**"
"MimeType.java:144"$0$0$0$13$93$"	 * Copy-constructor that copies the type, subtype, parameters of the given {@code MimeType},"
"MimeType.java:145"$0$0$0$9$50$"	 * and allows to set the specified character set."
"MimeType.java:146"$0$0$0$6$35$"	 * @param other the other MimeType"
"MimeType.java:147"$0$0$0$6$36$"	 * @param charset the character set"
"MimeType.java:148"$0$0$0$11$89$"	 * @throws IllegalArgumentException if any of the parameters contains illegal characters"
"MimeType.java:149"$0$0$0$3$14$"	 * @since 4.3"
"MimeType.java:150"$0$0$0$1$4$"	 */"
"MimeType.java:151"$0$0$0$6$51$"	public MimeType(MimeType other, Charset charset) {"
"MimeType.java:152"$3$0$0$4$97$"		this(other.getType(), other.getSubtype(), addCharsetParameter(charset, other.getParameters()));"
"MimeType.java:153"$0$0$0$1$2$"	}"
"MimeType.java:154"$0$0$0$0$0$""
"MimeType.java:155"$0$0$0$1$4$"	/**"
"MimeType.java:156"$0$0$0$13$84$"	 * Copy-constructor that copies the type and subtype of the given {@code MimeType},"
"MimeType.java:157"$0$0$0$6$39$"	 * and allows for different parameter."
"MimeType.java:158"$0$0$0$6$35$"	 * @param other the other MimeType"
"MimeType.java:159"$0$0$0$9$58$"	 * @param parameters the parameters (may be {@code null})"
"MimeType.java:160"$0$0$0$11$89$"	 * @throws IllegalArgumentException if any of the parameters contains illegal characters"
"MimeType.java:161"$0$0$0$1$4$"	 */"
"MimeType.java:162"$0$0$0$8$76$"	public MimeType(MimeType other, @Nullable Map<String, String> parameters) {"
"MimeType.java:163"$2$0$0$3$56$"		this(other.getType(), other.getSubtype(), parameters);"
"MimeType.java:164"$0$0$0$1$2$"	}"
"MimeType.java:165"$0$0$0$0$0$""
"MimeType.java:166"$0$0$0$1$4$"	/**"
"MimeType.java:167"$0$0$0$13$78$"	 * Create a new {@code MimeType} for the given type, subtype, and parameters."
"MimeType.java:168"$0$0$0$6$32$"	 * @param type the primary type"
"MimeType.java:169"$0$0$0$5$30$"	 * @param subtype the subtype"
"MimeType.java:170"$0$0$0$9$58$"	 * @param parameters the parameters (may be {@code null})"
"MimeType.java:171"$0$0$0$11$89$"	 * @throws IllegalArgumentException if any of the parameters contains illegal characters"
"MimeType.java:172"$0$0$0$1$4$"	 */"
"MimeType.java:173"$0$0$0$10$89$"	public MimeType(String type, String subtype, @Nullable Map<String, String> parameters) {"
"MimeType.java:174"$0$0$0$6$53$"		Assert.hasLength(type, ""'type' must not be empty"");"
"MimeType.java:175"$0$0$0$6$59$"		Assert.hasLength(subtype, ""'subtype' must not be empty"");"
"MimeType.java:176"$0$0$0$1$19$"		checkToken(type);"
"MimeType.java:177"$0$0$0$1$22$"		checkToken(subtype);"
"MimeType.java:178"$0$0$0$3$47$"		this.type = type.toLowerCase(Locale.ENGLISH);"
"MimeType.java:179"$0$0$0$3$53$"		this.subtype = subtype.toLowerCase(Locale.ENGLISH);"
"MimeType.java:180"$0$0$0$3$45$"		if (!CollectionUtils.isEmpty(parameters)) {"
"MimeType.java:181"$0$0$0$7$95$"			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH);"
"MimeType.java:182"$0$0$0$4$45$"			parameters.forEach((attribute, value) -> {"
"MimeType.java:183"$0$0$0$2$38$"				checkParameters(attribute, value);"
"MimeType.java:184"$0$0$0$2$30$"				map.put(attribute, value);"
"MimeType.java:185"$0$0$0$1$6$"			});"
"MimeType.java:186"$0$0$0$3$54$"			this.parameters = Collections.unmodifiableMap(map);"
"MimeType.java:187"$0$0$0$1$3$"		}"
"MimeType.java:188"$0$0$0$2$8$"		else {"
"MimeType.java:189"$0$0$0$3$44$"			this.parameters = Collections.emptyMap();"
"MimeType.java:190"$0$0$0$1$3$"		}"
"MimeType.java:191"$0$0$0$1$2$"	}"
"MimeType.java:192"$0$0$0$0$0$""
"MimeType.java:193"$0$0$0$1$4$"	/**"
"MimeType.java:194"$0$0$0$14$81$"	 * Checks the given token string for illegal characters, as defined in RFC 2616,"
"MimeType.java:195"$0$0$0$3$16$"	 * section 2.2."
"MimeType.java:196"$0$0$0$8$66$"	 * @throws IllegalArgumentException in case of illegal characters"
"MimeType.java:197"$0$0$0$7$92$"	 * @see <a href=""https://tools.ietf.org/html/rfc2616#section-2.2"">HTTP 1.1, section 2.2</a>"
"MimeType.java:198"$0$0$0$1$4$"	 */"
"MimeType.java:199"$0$0$0$5$40$"	private void checkToken(String token) {"
"MimeType.java:200"$0$0$0$11$45$"		for (int i = 0; i < token.length(); i++ ) {"
"MimeType.java:201"$0$0$0$4$29$"			char ch = token.charAt(i);"
"MimeType.java:202"$1$0$0$3$24$"			if (!TOKEN.get(ch)) {"
"MimeType.java:203"$0$0$0$17$106$"				throw new IllegalArgumentException(""Invalid token character '"" + ch + ""' in token \"""" + token + ""\"""");"
"MimeType.java:204"$0$0$0$1$4$"			}"
"MimeType.java:205"$0$0$0$1$3$"		}"
"MimeType.java:206"$0$0$0$1$2$"	}"
"MimeType.java:207"$0$0$0$0$0$""
"MimeType.java:208"$0$0$0$7$65$"	protected void checkParameters(String attribute, String value) {"
"MimeType.java:209"$0$0$0$6$63$"		Assert.hasLength(attribute, ""'attribute' must not be empty"");"
"MimeType.java:210"$0$0$0$6$55$"		Assert.hasLength(value, ""'value' must not be empty"");"
"MimeType.java:211"$0$0$0$1$24$"		checkToken(attribute);"
"MimeType.java:212"$0$0$0$3$40$"		if (PARAM_CHARSET.equals(attribute)) {"
"MimeType.java:213"$0$0$0$3$26$"			value = unquote(value);"
"MimeType.java:214"$0$0$0$1$26$"			Charset.forName(value);"
"MimeType.java:215"$0$0$0$1$3$"		}"
"MimeType.java:216"$0$0$0$4$36$"		else if (!isQuotedString(value)) {"
"MimeType.java:217"$0$0$0$1$21$"			checkToken(value);"
"MimeType.java:218"$0$0$0$1$3$"		}"
"MimeType.java:219"$0$0$0$1$2$"	}"
"MimeType.java:220"$0$0$0$0$0$""
"MimeType.java:221"$0$0$0$5$43$"	private boolean isQuotedString(String s) {"
"MimeType.java:222"$0$0$0$5$23$"		if (s.length() < 2) {"
"MimeType.java:223"$0$0$0$2$16$"			return false;"
"MimeType.java:224"$0$0$0$1$3$"		}"
"MimeType.java:225"$0$0$0$2$8$"		else {"
"MimeType.java:226"$0$0$0$8$95$"			return ((s.startsWith(""\"""") && s.endsWith(""\"""")) || (s.startsWith(""'"") && s.endsWith(""'"")));"
"MimeType.java:227"$0$0$0$1$3$"		}"
"MimeType.java:228"$0$0$0$1$2$"	}"
"MimeType.java:229"$0$0$0$0$0$""
"MimeType.java:230"$0$0$0$5$37$"	protected String unquote(String s) {"
"MimeType.java:231"$0$0$0$9$66$"		return (isQuotedString(s) ? s.substring(1, s.length() - 1) : s);"
"MimeType.java:232"$0$0$0$1$2$"	}"
"MimeType.java:233"$0$0$0$0$0$""
"MimeType.java:234"$0$0$0$1$4$"	/**"
"MimeType.java:235"$1$0$0$11$80$"	 * Indicates whether the {@linkplain #getType() type} is the wildcard character"
"MimeType.java:236"$0$0$0$4$30$"	 * <code>&#42;</code> or not."
"MimeType.java:237"$0$0$0$1$4$"	 */"
"MimeType.java:238"$0$0$0$4$34$"	public boolean isWildcardType() {"
"MimeType.java:239"$1$0$0$2$41$"		return WILDCARD_TYPE.equals(getType());"
"MimeType.java:240"$0$0$0$1$2$"	}"
"MimeType.java:241"$0$0$0$0$0$""
"MimeType.java:242"$0$0$0$1$4$"	/**"
"MimeType.java:243"$1$0$0$10$76$"	 * Indicates whether the {@linkplain #getSubtype() subtype} is the wildcard"
"MimeType.java:244"$0$0$0$11$79$"	 * character <code>&#42;</code> or the wildcard character followed by a suffix"
"MimeType.java:245"$0$0$0$3$34$"	 * (e.g. <code>&#42;+xml</code>)."
"MimeType.java:246"$0$0$0$8$45$"	 * @return whether the subtype is a wildcard"
"MimeType.java:247"$0$0$0$1$4$"	 */"
"MimeType.java:248"$0$0$0$4$37$"	public boolean isWildcardSubtype() {"
"MimeType.java:249"$2$0$0$4$77$"		return WILDCARD_TYPE.equals(getSubtype()) || getSubtype().startsWith(""*+"");"
"MimeType.java:250"$0$0$0$1$2$"	}"
"MimeType.java:251"$0$0$0$0$0$""
"MimeType.java:252"$0$0$0$1$4$"	/**"
"MimeType.java:253"$0$0$0$13$79$"	 * Indicates whether this MIME Type is concrete, i.e. whether neither the type"
"MimeType.java:254"$0$0$0$9$63$"	 * nor the subtype is a wildcard character <code>&#42;</code>."
"MimeType.java:255"$0$0$0$8$46$"	 * @return whether this MIME Type is concrete"
"MimeType.java:256"$0$0$0$1$4$"	 */"
"MimeType.java:257"$0$0$0$4$30$"	public boolean isConcrete() {"
"MimeType.java:258"$0$0$0$4$51$"		return !isWildcardType() && !isWildcardSubtype();"
"MimeType.java:259"$0$0$0$1$2$"	}"
"MimeType.java:260"$0$0$0$0$0$""
"MimeType.java:261"$0$0$0$1$4$"	/**"
"MimeType.java:262"$0$0$0$5$28$"	 * Return the primary type."
"MimeType.java:263"$0$0$0$1$4$"	 */"
"MimeType.java:264"$1$0$0$4$26$"	public String getType() {"
"MimeType.java:265"$0$0$0$2$19$"		return this.type;"
"MimeType.java:266"$0$0$0$1$2$"	}"
"MimeType.java:267"$0$0$0$0$0$""
"MimeType.java:268"$0$0$0$1$4$"	/**"
"MimeType.java:269"$0$0$0$4$23$"	 * Return the subtype."
"MimeType.java:270"$0$0$0$1$4$"	 */"
"MimeType.java:271"$1$0$0$4$29$"	public String getSubtype() {"
"MimeType.java:272"$0$0$0$2$22$"		return this.subtype;"
"MimeType.java:273"$0$0$0$1$2$"	}"
"MimeType.java:274"$0$0$0$0$0$""
"MimeType.java:275"$0$0$0$1$4$"	/**"
"MimeType.java:276"$0$0$0$14$82$"	 * Return the character set, as indicated by a {@code charset} parameter, if any."
"MimeType.java:277"$0$0$0$11$63$"	 * @return the character set, or {@code null} if not available"
"MimeType.java:278"$0$0$0$3$14$"	 * @since 4.3"
"MimeType.java:279"$0$0$0$1$4$"	 */"
"MimeType.java:280"$0$0$0$1$10$"	@Nullable"
"MimeType.java:281"$1$0$0$4$30$"	public Charset getCharset() {"
"MimeType.java:282"$1$0$0$4$47$"		String charset = getParameter(PARAM_CHARSET);"
"MimeType.java:283"$0$0$0$8$70$"		return (charset != null ? Charset.forName(unquote(charset)) : null);"
"MimeType.java:284"$0$0$0$1$2$"	}"
"MimeType.java:285"$0$0$0$0$0$""
"MimeType.java:286"$0$0$0$1$4$"	/**"
"MimeType.java:287"$0$0$0$10$61$"	 * Return a generic parameter value, given a parameter name."
"MimeType.java:288"$0$0$0$6$34$"	 * @param name the parameter name"
"MimeType.java:289"$0$0$0$11$63$"	 * @return the parameter value, or {@code null} if not present"
"MimeType.java:290"$0$0$0$1$4$"	 */"
"MimeType.java:291"$0$0$0$1$10$"	@Nullable"
"MimeType.java:292"$1$0$0$5$42$"	public String getParameter(String name) {"
"MimeType.java:293"$1$0$0$2$35$"		return this.parameters.get(name);"
"MimeType.java:294"$0$0$0$1$2$"	}"
"MimeType.java:295"$0$0$0$0$0$""
"MimeType.java:296"$0$0$0$1$4$"	/**"
"MimeType.java:297"$0$0$0$6$40$"	 * Return all generic parameter values."
"MimeType.java:298"$0$0$0$10$64$"	 * @return a read-only map (possibly empty, never {@code null})"
"MimeType.java:299"$0$0$0$1$4$"	 */"
"MimeType.java:300"$1$0$0$5$45$"	public Map<String, String> getParameters() {"
"MimeType.java:301"$0$0$0$2$25$"		return this.parameters;"
"MimeType.java:302"$0$0$0$1$2$"	}"
"MimeType.java:303"$0$0$0$0$0$""
"MimeType.java:304"$0$0$0$1$4$"	/**"
"MimeType.java:305"$0$0$0$11$65$"	 * Indicate whether this MIME Type includes the given MIME Type."
"MimeType.java:306"$0$0$0$11$86$"	 * <p>For instance, {@code text/*} includes {@code text/plain} and {@code text/html},"
"MimeType.java:307"$0$0$0$8$77$"	 * and {@code application/*+xml} includes {@code application/soap+xml}, etc."
"MimeType.java:308"$0$0$0$6$40$"	 * This method is <b>not</b> symmetric."
"MimeType.java:309"$0$0$0$11$62$"	 * @param other the reference MIME Type with which to compare"
"MimeType.java:310"$0$0$0$13$72$"	 * @return {@code true} if this MIME Type includes the given MIME Type;"
"MimeType.java:311"$0$0$0$4$27$"	 * {@code false} otherwise"
"MimeType.java:312"$0$0$0$1$4$"	 */"
"MimeType.java:313"$0$0$0$6$52$"	public boolean includes(@Nullable MimeType other) {"
"MimeType.java:314"$0$0$0$5$22$"		if (other == null) {"
"MimeType.java:315"$0$0$0$2$16$"			return false;"
"MimeType.java:316"$0$0$0$1$3$"		}"
"MimeType.java:317"$0$0$0$3$25$"		if (isWildcardType()) {"
"MimeType.java:318"$0$0$1$4$27$"			// */* includes anything"
"MimeType.java:319"$0$0$0$2$15$"			return true;"
"MimeType.java:320"$0$0$0$1$3$"		}"
"MimeType.java:321"$2$0$0$4$47$"		else if (getType().equals(other.getType())) {"
"MimeType.java:322"$2$0$0$3$49$"			if (getSubtype().equals(other.getSubtype())) {"
"MimeType.java:323"$0$0$0$2$16$"				return true;"
"MimeType.java:324"$0$0$0$1$4$"			}"
"MimeType.java:325"$0$0$0$3$29$"			if (isWildcardSubtype()) {"
"MimeType.java:326"$0$0$1$6$51$"				// Wildcard with suffix, e.g. application/*+xml"
"MimeType.java:327"$1$0$0$4$52$"				int thisPlusIdx = getSubtype().lastIndexOf('+');"
"MimeType.java:328"$0$0$0$5$28$"				if (thisPlusIdx == -1) {"
"MimeType.java:329"$0$0$0$2$17$"					return true;"
"MimeType.java:330"$0$0$0$1$5$"				}"
"MimeType.java:331"$0$0$0$2$10$"				else {"
"MimeType.java:332"$0$0$1$4$55$"					// application/*+xml includes application/soap+xml"
"MimeType.java:333"$1$0$0$4$60$"					int otherPlusIdx = other.getSubtype().lastIndexOf('+');"
"MimeType.java:334"$0$0$0$5$30$"					if (otherPlusIdx != -1) {"
"MimeType.java:335"$1$0$0$5$74$"						String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx);"
"MimeType.java:336"$1$0$0$6$73$"						String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1);"
"MimeType.java:337"$1$0$0$6$81$"						String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1);"
"MimeType.java:338"$0$0$0$5$102$"						if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {"
"MimeType.java:339"$0$0$0$2$19$"							return true;"
"MimeType.java:340"$0$0$0$1$7$"						}"
"MimeType.java:341"$0$0$0$1$6$"					}"
"MimeType.java:342"$0$0$0$1$5$"				}"
"MimeType.java:343"$0$0$0$1$4$"			}"
"MimeType.java:344"$0$0$0$1$3$"		}"
"MimeType.java:345"$0$0$0$2$15$"		return false;"
"MimeType.java:346"$0$0$0$1$2$"	}"
"MimeType.java:347"$0$0$0$0$0$""
"MimeType.java:348"$0$0$0$1$4$"	/**"
"MimeType.java:349"$0$0$0$13$75$"	 * Indicate whether this MIME Type is compatible with the given MIME Type."
"MimeType.java:350"$0$0$0$10$74$"	 * <p>For instance, {@code text/*} is compatible with {@code text/plain},"
"MimeType.java:351"$0$0$0$13$75$"	 * {@code text/html}, and vice versa. In effect, this method is similar to"
"MimeType.java:352"$0$0$0$8$58$"	 * {@link #includes}, except that it <b>is</b> symmetric."
"MimeType.java:353"$0$0$0$11$62$"	 * @param other the reference MIME Type with which to compare"
"MimeType.java:354"$0$0$0$15$82$"	 * @return {@code true} if this MIME Type is compatible with the given MIME Type;"
"MimeType.java:355"$0$0$0$4$27$"	 * {@code false} otherwise"
"MimeType.java:356"$0$0$0$1$4$"	 */"
"MimeType.java:357"$0$0$0$6$60$"	public boolean isCompatibleWith(@Nullable MimeType other) {"
"MimeType.java:358"$0$0$0$5$22$"		if (other == null) {"
"MimeType.java:359"$0$0$0$2$16$"			return false;"
"MimeType.java:360"$0$0$0$1$3$"		}"
"MimeType.java:361"$0$0$0$5$51$"		if (isWildcardType() || other.isWildcardType()) {"
"MimeType.java:362"$0$0$0$2$15$"			return true;"
"MimeType.java:363"$0$0$0$1$3$"		}"
"MimeType.java:364"$2$0$0$4$47$"		else if (getType().equals(other.getType())) {"
"MimeType.java:365"$2$0$0$3$49$"			if (getSubtype().equals(other.getSubtype())) {"
"MimeType.java:366"$0$0$0$2$16$"				return true;"
"MimeType.java:367"$0$0$0$1$4$"			}"
"MimeType.java:368"$0$0$1$6$50$"			// Wildcard with suffix? e.g. application/*+xml"
"MimeType.java:369"$0$0$0$5$58$"			if (isWildcardSubtype() || other.isWildcardSubtype()) {"
"MimeType.java:370"$1$0$0$4$52$"				int thisPlusIdx = getSubtype().lastIndexOf('+');"
"MimeType.java:371"$1$0$0$4$59$"				int otherPlusIdx = other.getSubtype().lastIndexOf('+');"
"MimeType.java:372"$0$0$0$9$50$"				if (thisPlusIdx == -1 && otherPlusIdx == -1) {"
"MimeType.java:373"$0$0$0$2$17$"					return true;"
"MimeType.java:374"$0$0$0$1$5$"				}"
"MimeType.java:375"$0$0$0$10$55$"				else if (thisPlusIdx != -1 && otherPlusIdx != -1) {"
"MimeType.java:376"$1$0$0$5$73$"					String thisSubtypeNoSuffix = getSubtype().substring(0, thisPlusIdx);"
"MimeType.java:377"$1$0$0$5$81$"					String otherSubtypeNoSuffix = other.getSubtype().substring(0, otherPlusIdx);"
"MimeType.java:378"$1$0$0$6$72$"					String thisSubtypeSuffix = getSubtype().substring(thisPlusIdx + 1);"
"MimeType.java:379"$1$0$0$6$80$"					String otherSubtypeSuffix = other.getSubtype().substring(otherPlusIdx + 1);"
"MimeType.java:380"$0$0$0$3$56$"					if (thisSubtypeSuffix.equals(otherSubtypeSuffix) &&"
"MimeType.java:381"$0$0$0$4$99$"							(WILDCARD_TYPE.equals(thisSubtypeNoSuffix) || WILDCARD_TYPE.equals(otherSubtypeNoSuffix))) {"
"MimeType.java:382"$0$0$0$2$18$"						return true;"
"MimeType.java:383"$0$0$0$1$6$"					}"
"MimeType.java:384"$0$0$0$1$5$"				}"
"MimeType.java:385"$0$0$0$1$4$"			}"
"MimeType.java:386"$0$0$0$1$3$"		}"
"MimeType.java:387"$0$0$0$2$15$"		return false;"
"MimeType.java:388"$0$0$0$1$2$"	}"
"MimeType.java:389"$0$0$0$0$0$""
"MimeType.java:390"$0$0$0$1$4$"	/**"
"MimeType.java:391"$0$0$0$12$72$"	 * Similar to {@link #equals(Object)} but based on the type and subtype"
"MimeType.java:392"$0$0$0$5$35$"	 * only, i.e. ignoring parameters."
"MimeType.java:393"$0$0$0$10$50$"	 * @param other the other mime type to compare to"
"MimeType.java:394"$0$0$0$13$69$"	 * @return whether the two mime types have the same type and subtype"
"MimeType.java:395"$0$0$0$3$16$"	 * @since 5.1.4"
"MimeType.java:396"$0$0$0$1$4$"	 */"
"MimeType.java:397"$0$0$0$6$64$"	public boolean equalsTypeAndSubtype(@Nullable MimeType other) {"
"MimeType.java:398"$0$0$0$5$22$"		if (other == null) {"
"MimeType.java:399"$0$0$0$2$16$"			return false;"
"MimeType.java:400"$0$0$0$1$3$"		}"
"MimeType.java:401"$0$0$0$4$96$"		return this.type.equalsIgnoreCase(other.type) && this.subtype.equalsIgnoreCase(other.subtype);"
"MimeType.java:402"$0$0$0$1$2$"	}"
"MimeType.java:403"$0$0$0$0$0$""
"MimeType.java:404"$0$0$0$1$4$"	/**"
"MimeType.java:405"$0$0$0$7$62$"	 * Unlike {@link Collection#contains(Object)} which relies on"
"MimeType.java:406"$0$0$0$11$77$"	 * {@link MimeType#equals(Object)}, this method only checks the type and the"
"MimeType.java:407"$0$0$0$6$46$"	 * subtype, but otherwise ignores parameters."
"MimeType.java:408"$0$0$0$13$72$"	 * @param mimeTypes the list of mime types to perform the check against"
"MimeType.java:409"$0$0$0$10$57$"	 * @return whether the list contains the given mime type"
"MimeType.java:410"$0$0$0$3$16$"	 * @since 5.1.4"
"MimeType.java:411"$0$0$0$1$4$"	 */"
"MimeType.java:412"$0$0$0$7$71$"	public boolean isPresentIn(Collection<? extends MimeType> mimeTypes) {"
"MimeType.java:413"$0$0$0$6$39$"		for (MimeType mimeType : mimeTypes) {"
"MimeType.java:414"$0$0$0$3$45$"			if (mimeType.equalsTypeAndSubtype(this)) {"
"MimeType.java:415"$0$0$0$2$16$"				return true;"
"MimeType.java:416"$0$0$0$1$4$"			}"
"MimeType.java:417"$0$0$0$1$3$"		}"
"MimeType.java:418"$0$0$0$2$15$"		return false;"
"MimeType.java:419"$0$0$0$1$2$"	}"
"MimeType.java:420"$0$0$0$0$0$""
"MimeType.java:421"$0$0$0$0$0$""
"MimeType.java:422"$0$0$0$1$10$"	@Override"
"MimeType.java:423"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"MimeType.java:424"$0$0$0$5$22$"		if (this == other) {"
"MimeType.java:425"$0$0$0$2$15$"			return true;"
"MimeType.java:426"$0$0$0$1$3$"		}"
"MimeType.java:427"$0$0$0$5$37$"		if (!(other instanceof MimeType)) {"
"MimeType.java:428"$0$0$0$2$16$"			return false;"
"MimeType.java:429"$0$0$0$1$3$"		}"
"MimeType.java:430"$0$0$0$5$40$"		MimeType otherType = (MimeType) other;"
"MimeType.java:431"$0$0$0$3$55$"		return (this.type.equalsIgnoreCase(otherType.type) &&"
"MimeType.java:432"$0$0$0$2$55$"				this.subtype.equalsIgnoreCase(otherType.subtype) &&"
"MimeType.java:433"$0$0$0$1$35$"				parametersAreEqual(otherType));"
"MimeType.java:434"$0$0$0$1$2$"	}"
"MimeType.java:435"$0$0$0$0$0$""
"MimeType.java:436"$0$0$0$1$4$"	/**"
"MimeType.java:437"$0$0$0$12$73$"	 * Determine if the parameters in this {@code MimeType} and the supplied"
"MimeType.java:438"$0$0$0$8$71$"	 * {@code MimeType} are equal, performing case-insensitive comparisons"
"MimeType.java:439"$0$0$0$5$33$"	 * for {@link Charset Charsets}."
"MimeType.java:440"$0$0$0$3$14$"	 * @since 4.2"
"MimeType.java:441"$0$0$0$1$4$"	 */"
"MimeType.java:442"$0$0$0$5$53$"	private boolean parametersAreEqual(MimeType other) {"
"MimeType.java:443"$0$0$0$5$58$"		if (this.parameters.size() != other.parameters.size()) {"
"MimeType.java:444"$0$0$0$2$16$"			return false;"
"MimeType.java:445"$0$0$0$1$3$"		}"
"MimeType.java:446"$0$0$0$0$0$""
"MimeType.java:447"$0$0$0$7$70$"		for (Map.Entry<String, String> entry : this.parameters.entrySet()) {"
"MimeType.java:448"$1$0$0$4$31$"			String key = entry.getKey();"
"MimeType.java:449"$0$0$0$3$44$"			if (!other.parameters.containsKey(key)) {"
"MimeType.java:450"$0$0$0$2$17$"				return false;"
"MimeType.java:451"$0$0$0$1$4$"			}"
"MimeType.java:452"$0$0$0$3$35$"			if (PARAM_CHARSET.equals(key)) {"
"MimeType.java:453"$2$0$0$4$72$"				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {"
"MimeType.java:454"$0$0$0$2$18$"					return false;"
"MimeType.java:455"$0$0$0$1$5$"				}"
"MimeType.java:456"$0$0$0$1$4$"			}"
"MimeType.java:457"$2$0$0$5$87$"			else if (!ObjectUtils.nullSafeEquals(entry.getValue(), other.parameters.get(key))) {"
"MimeType.java:458"$0$0$0$2$17$"				return false;"
"MimeType.java:459"$0$0$0$1$4$"			}"
"MimeType.java:460"$0$0$0$1$3$"		}"
"MimeType.java:461"$0$0$0$0$0$""
"MimeType.java:462"$0$0$0$2$14$"		return true;"
"MimeType.java:463"$0$0$0$1$2$"	}"
"MimeType.java:464"$0$0$0$0$0$""
"MimeType.java:465"$0$0$0$1$10$"	@Override"
"MimeType.java:466"$0$0$0$4$24$"	public int hashCode() {"
"MimeType.java:467"$0$0$0$4$36$"		int result = this.type.hashCode();"
"MimeType.java:468"$0$0$0$7$49$"		result = 31 * result + this.subtype.hashCode();"
"MimeType.java:469"$0$0$0$7$52$"		result = 31 * result + this.parameters.hashCode();"
"MimeType.java:470"$0$0$0$2$16$"		return result;"
"MimeType.java:471"$0$0$0$1$2$"	}"
"MimeType.java:472"$0$0$0$0$0$""
"MimeType.java:473"$0$0$0$1$10$"	@Override"
"MimeType.java:474"$0$0$0$4$27$"	public String toString() {"
"MimeType.java:475"$0$0$0$4$36$"		String value = this.toStringValue;"
"MimeType.java:476"$0$0$0$5$22$"		if (value == null) {"
"MimeType.java:477"$0$0$0$5$47$"			StringBuilder builder = new StringBuilder();"
"MimeType.java:478"$0$0$0$1$21$"			appendTo(builder);"
"MimeType.java:479"$0$0$0$3$30$"			value = builder.toString();"
"MimeType.java:480"$0$0$0$3$30$"			this.toStringValue = value;"
"MimeType.java:481"$0$0$0$1$3$"		}"
"MimeType.java:482"$0$0$0$2$15$"		return value;"
"MimeType.java:483"$0$0$0$1$2$"	}"
"MimeType.java:484"$0$0$0$0$0$""
"MimeType.java:485"$0$0$0$5$49$"	protected void appendTo(StringBuilder builder) {"
"MimeType.java:486"$0$0$0$1$28$"		builder.append(this.type);"
"MimeType.java:487"$0$0$0$1$22$"		builder.append('/');"
"MimeType.java:488"$0$0$0$1$31$"		builder.append(this.subtype);"
"MimeType.java:489"$0$0$0$2$37$"		appendTo(this.parameters, builder);"
"MimeType.java:490"$0$0$0$1$2$"	}"
"MimeType.java:491"$0$0$0$0$0$""
"MimeType.java:492"$0$0$0$8$72$"	private void appendTo(Map<String, String> map, StringBuilder builder) {"
"MimeType.java:493"$0$0$0$4$29$"		map.forEach((key, val) -> {"
"MimeType.java:494"$0$0$0$1$23$"			builder.append(';');"
"MimeType.java:495"$0$0$0$1$23$"			builder.append(key);"
"MimeType.java:496"$0$0$0$1$23$"			builder.append('=');"
"MimeType.java:497"$0$0$0$1$23$"			builder.append(val);"
"MimeType.java:498"$0$0$0$1$5$"		});"
"MimeType.java:499"$0$0$0$1$2$"	}"
"MimeType.java:500"$0$0$0$0$0$""
"MimeType.java:501"$0$0$0$1$4$"	/**"
"MimeType.java:502"$0$0$0$8$54$"	 * Compares this MIME Type to another alphabetically."
"MimeType.java:503"$0$0$0$9$44$"	 * @param other the MIME Type to compare to"
"MimeType.java:504"$0$0$0$3$46$"	 * @see MimeTypeUtils#sortBySpecificity(List)"
"MimeType.java:505"$0$0$0$1$4$"	 */"
"MimeType.java:506"$0$0$0$1$10$"	@Override"
"MimeType.java:507"$0$0$0$5$39$"	public int compareTo(MimeType other) {"
"MimeType.java:508"$2$0$0$4$60$"		int comp = getType().compareToIgnoreCase(other.getType());"
"MimeType.java:509"$0$0$0$5$18$"		if (comp != 0) {"
"MimeType.java:510"$0$0$0$2$15$"			return comp;"
"MimeType.java:511"$0$0$0$1$3$"		}"
"MimeType.java:512"$2$0$0$3$62$"		comp = getSubtype().compareToIgnoreCase(other.getSubtype());"
"MimeType.java:513"$0$0$0$5$18$"		if (comp != 0) {"
"MimeType.java:514"$0$0$0$2$15$"			return comp;"
"MimeType.java:515"$0$0$0$1$3$"		}"
"MimeType.java:516"$2$0$0$5$63$"		comp = getParameters().size() - other.getParameters().size();"
"MimeType.java:517"$0$0$0$5$18$"		if (comp != 0) {"
"MimeType.java:518"$0$0$0$2$15$"			return comp;"
"MimeType.java:519"$0$0$0$1$3$"		}"
"MimeType.java:520"$0$0$0$0$0$""
"MimeType.java:521"$0$0$0$5$80$"		TreeSet<String> thisAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);"
"MimeType.java:522"$1$0$0$1$50$"		thisAttributes.addAll(getParameters().keySet());"
"MimeType.java:523"$0$0$0$5$81$"		TreeSet<String> otherAttributes = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);"
"MimeType.java:524"$1$0$0$1$57$"		otherAttributes.addAll(other.getParameters().keySet());"
"MimeType.java:525"$0$0$0$4$70$"		Iterator<String> thisAttributesIterator = thisAttributes.iterator();"
"MimeType.java:526"$0$0$0$4$72$"		Iterator<String> otherAttributesIterator = otherAttributes.iterator();"
"MimeType.java:527"$0$0$0$0$0$""
"MimeType.java:528"$0$0$0$3$44$"		while (thisAttributesIterator.hasNext()) {"
"MimeType.java:529"$0$0$0$4$56$"			String thisAttribute = thisAttributesIterator.next();"
"MimeType.java:530"$0$0$0$4$58$"			String otherAttribute = otherAttributesIterator.next();"
"MimeType.java:531"$0$0$0$3$60$"			comp = thisAttribute.compareToIgnoreCase(otherAttribute);"
"MimeType.java:532"$0$0$0$5$19$"			if (comp != 0) {"
"MimeType.java:533"$0$0$0$2$16$"				return comp;"
"MimeType.java:534"$0$0$0$1$4$"			}"
"MimeType.java:535"$0$0$0$3$45$"			if (PARAM_CHARSET.equals(thisAttribute)) {"
"MimeType.java:536"$1$0$0$4$39$"				Charset thisCharset = getCharset();"
"MimeType.java:537"$1$0$0$4$46$"				Charset otherCharset = other.getCharset();"
"MimeType.java:538"$0$0$0$5$38$"				if (thisCharset != otherCharset) {"
"MimeType.java:539"$0$0$0$5$31$"					if (thisCharset == null) {"
"MimeType.java:540"$0$0$0$2$16$"						return -1;"
"MimeType.java:541"$0$0$0$1$6$"					}"
"MimeType.java:542"$0$0$0$5$32$"					if (otherCharset == null) {"
"MimeType.java:543"$0$0$0$2$15$"						return 1;"
"MimeType.java:544"$0$0$0$1$6$"					}"
"MimeType.java:545"$0$0$0$3$48$"					comp = thisCharset.compareTo(otherCharset);"
"MimeType.java:546"$0$0$0$5$21$"					if (comp != 0) {"
"MimeType.java:547"$0$0$0$2$18$"						return comp;"
"MimeType.java:548"$0$0$0$1$6$"					}"
"MimeType.java:549"$0$0$0$1$5$"				}"
"MimeType.java:550"$0$0$0$1$4$"			}"
"MimeType.java:551"$0$0$0$2$9$"			else {"
"MimeType.java:552"$2$0$0$4$58$"				String thisValue = getParameters().get(thisAttribute);"
"MimeType.java:553"$2$0$0$4$66$"				String otherValue = other.getParameters().get(otherAttribute);"
"MimeType.java:554"$0$0$0$5$29$"				if (otherValue == null) {"
"MimeType.java:555"$0$0$0$3$21$"					otherValue = """";"
"MimeType.java:556"$0$0$0$1$5$"				}"
"MimeType.java:557"$0$0$0$3$43$"				comp = thisValue.compareTo(otherValue);"
"MimeType.java:558"$0$0$0$5$20$"				if (comp != 0) {"
"MimeType.java:559"$0$0$0$2$17$"					return comp;"
"MimeType.java:560"$0$0$0$1$5$"				}"
"MimeType.java:561"$0$0$0$1$4$"			}"
"MimeType.java:562"$0$0$0$1$3$"		}"
"MimeType.java:563"$0$0$0$0$0$""
"MimeType.java:564"$0$0$0$2$11$"		return 0;"
"MimeType.java:565"$0$0$0$1$2$"	}"
"MimeType.java:566"$0$0$0$0$0$""
"MimeType.java:567"$0$0$0$0$0$""
"MimeType.java:568"$0$0$0$1$4$"	/**"
"MimeType.java:569"$0$0$0$11$64$"	 * Parse the given String value into a {@code MimeType} object,"
"MimeType.java:570"$0$0$0$10$67$"	 * with this method name following the 'valueOf' naming convention"
"MimeType.java:571"$0$0$0$6$80$"	 * (as supported by {@link org.springframework.core.convert.ConversionService}."
"MimeType.java:572"$0$0$0$3$44$"	 * @see MimeTypeUtils#parseMimeType(String)"
"MimeType.java:573"$0$0$0$1$4$"	 */"
"MimeType.java:574"$0$0$0$6$47$"	public static MimeType valueOf(String value) {"
"MimeType.java:575"$0$0$0$2$44$"		return MimeTypeUtils.parseMimeType(value);"
"MimeType.java:576"$0$0$0$1$2$"	}"
"MimeType.java:577"$0$0$0$0$0$""
"MimeType.java:578"$0$0$0$10$106$"	private static Map<String, String> addCharsetParameter(Charset charset, Map<String, String> parameters) {"
"MimeType.java:579"$0$0$0$6$60$"		Map<String, String> map = new LinkedHashMap<>(parameters);"
"MimeType.java:580"$0$0$0$2$41$"		map.put(PARAM_CHARSET, charset.name());"
"MimeType.java:581"$0$0$0$2$13$"		return map;"
"MimeType.java:582"$0$0$0$1$2$"	}"
"MimeType.java:583"$0$0$0$0$0$""
"MimeType.java:584"$0$0$0$0$0$""
"MimeType.java:585"$0$0$0$1$4$"	/**"
"MimeType.java:586"$0$0$0$11$74$"	 * Comparator to sort {@link MimeType MimeTypes} in order of specificity."
"MimeType.java:587"$0$0$0$1$3$"	 *"
"MimeType.java:588"$0$0$0$15$77$"	 * @param <T> the type of mime types that may be compared by this comparator"
"MimeType.java:589"$0$0$0$1$4$"	 */"
"MimeType.java:590"$0$0$0$9$89$"	public static class SpecificityComparator<T extends MimeType> implements Comparator<T> {"
"MimeType.java:591"$0$0$0$0$0$""
"MimeType.java:592"$0$0$0$1$11$"		@Override"
"MimeType.java:593"$0$0$0$7$48$"		public int compare(T mimeType1, T mimeType2) {"
"MimeType.java:594"$0$0$0$9$85$"			if (mimeType1.isWildcardType() && !mimeType2.isWildcardType()) {  // */* < audio/*"
"MimeType.java:595"$0$0$0$2$13$"				return 1;"
"MimeType.java:596"$0$0$0$1$4$"			}"
"MimeType.java:597"$0$0$0$10$90$"			else if (mimeType2.isWildcardType() && !mimeType1.isWildcardType()) {  // audio/* > */*"
"MimeType.java:598"$0$0$0$2$14$"				return -1;"
"MimeType.java:599"$0$0$0$1$4$"			}"
"MimeType.java:600"$2$0$0$8$92$"			else if (!mimeType1.getType().equals(mimeType2.getType())) {  // audio/basic == text/html"
"MimeType.java:601"$0$0$0$2$13$"				return 0;"
"MimeType.java:602"$0$0$0$1$4$"			}"
"MimeType.java:603"$2$0$0$4$63$"			else {  // mediaType1.getType().equals(mediaType2.getType())"
"MimeType.java:604"$0$0$0$9$100$"				if (mimeType1.isWildcardSubtype() && !mimeType2.isWildcardSubtype()) {  // audio/* < audio/basic"
"MimeType.java:605"$0$0$0$2$14$"					return 1;"
"MimeType.java:606"$0$0$0$1$5$"				}"
"MimeType.java:607"$0$0$0$10$105$"				else if (mimeType2.isWildcardSubtype() && !mimeType1.isWildcardSubtype()) {  // audio/basic > audio/*"
"MimeType.java:608"$0$0$0$2$15$"					return -1;"
"MimeType.java:609"$0$0$0$1$5$"				}"
"MimeType.java:610"$2$0$0$8$100$"				else if (!mimeType1.getSubtype().equals(mimeType2.getSubtype())) {  // audio/basic == audio/wave"
"MimeType.java:611"$0$0$0$2$14$"					return 0;"
"MimeType.java:612"$0$0$0$1$5$"				}"
"MimeType.java:613"$2$0$0$4$70$"				else {  // mediaType2.getSubtype().equals(mediaType2.getSubtype())"
"MimeType.java:614"$0$0$0$3$52$"					return compareParameters(mimeType1, mimeType2);"
"MimeType.java:615"$0$0$0$1$5$"				}"
"MimeType.java:616"$0$0$0$1$4$"			}"
"MimeType.java:617"$0$0$0$1$3$"		}"
"MimeType.java:618"$0$0$0$0$0$""
"MimeType.java:619"$0$0$0$7$61$"		protected int compareParameters(T mimeType1, T mimeType2) {"
"MimeType.java:620"$1$0$0$4$54$"			int paramsSize1 = mimeType1.getParameters().size();"
"MimeType.java:621"$1$0$0$4$54$"			int paramsSize2 = mimeType2.getParameters().size();"
"MimeType.java:622"$0$0$0$7$90$"			return Integer.compare(paramsSize2, paramsSize1);  // audio/basic;level=1 < audio/basic"
"MimeType.java:623"$0$0$0$1$3$"		}"
"MimeType.java:624"$0$0$0$1$2$"	}"
"MimeType.java:625"$0$0$0$0$0$""
"MimeType.java:626"$0$0$0$1$1$"}"
"DataBufferEncoder.java:1"$0$0$0$1$2$"/*"
"DataBufferEncoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"DataBufferEncoder.java:3"$0$0$0$1$2$" *"
"DataBufferEncoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DataBufferEncoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DataBufferEncoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DataBufferEncoder.java:7"$0$0$0$1$2$" *"
"DataBufferEncoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DataBufferEncoder.java:9"$0$0$0$1$2$" *"
"DataBufferEncoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DataBufferEncoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DataBufferEncoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DataBufferEncoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DataBufferEncoder.java:14"$0$0$0$5$33$" * limitations under the License."
"DataBufferEncoder.java:15"$0$0$0$1$3$" */"
"DataBufferEncoder.java:16"$0$0$0$0$0$""
"DataBufferEncoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"DataBufferEncoder.java:18"$0$0$0$0$0$""
"DataBufferEncoder.java:19"$0$0$0$2$21$"import java.util.Map;"
"DataBufferEncoder.java:20"$0$0$0$0$0$""
"DataBufferEncoder.java:21"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"DataBufferEncoder.java:22"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"DataBufferEncoder.java:23"$0$0$0$0$0$""
"DataBufferEncoder.java:24"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"DataBufferEncoder.java:25"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"DataBufferEncoder.java:26"$0$0$0$2$60$"import org.springframework.core.io.buffer.DataBufferFactory;"
"DataBufferEncoder.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"DataBufferEncoder.java:28"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"DataBufferEncoder.java:29"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"DataBufferEncoder.java:30"$0$0$0$0$0$""
"DataBufferEncoder.java:31"$0$0$0$1$3$"/**"
"DataBufferEncoder.java:32"$0$0$0$8$66$" * Simple pass-through encoder for {@link DataBuffer DataBuffers}."
"DataBufferEncoder.java:33"$0$0$0$1$2$" *"
"DataBufferEncoder.java:34"$0$0$0$4$24$" * @author Arjen Poutsma"
"DataBufferEncoder.java:35"$0$0$0$3$13$" * @since 5.0"
"DataBufferEncoder.java:36"$0$0$0$1$3$" */"
"DataBufferEncoder.java:37"$0$0$0$6$68$"public class DataBufferEncoder extends AbstractEncoder<DataBuffer> {"
"DataBufferEncoder.java:38"$0$0$0$0$0$""
"DataBufferEncoder.java:39"$0$0$0$3$29$"	public DataBufferEncoder() {"
"DataBufferEncoder.java:40"$0$0$0$1$27$"		super(MimeTypeUtils.ALL);"
"DataBufferEncoder.java:41"$0$0$0$1$2$"	}"
"DataBufferEncoder.java:42"$0$0$0$0$0$""
"DataBufferEncoder.java:43"$0$0$0$0$0$""
"DataBufferEncoder.java:44"$0$0$0$1$10$"	@Override"
"DataBufferEncoder.java:45"$0$0$0$8$84$"	public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"DataBufferEncoder.java:46"$0$0$0$4$41$"		Class<?> clazz = elementType.toClass();"
"DataBufferEncoder.java:47"$0$0$0$5$92$"		return super.canEncode(elementType, mimeType) && DataBuffer.class.isAssignableFrom(clazz);"
"DataBufferEncoder.java:48"$0$0$0$1$2$"	}"
"DataBufferEncoder.java:49"$0$0$0$0$0$""
"DataBufferEncoder.java:50"$0$0$0$1$10$"	@Override"
"DataBufferEncoder.java:51"$0$0$0$6$76$"	public Flux<DataBuffer> encode(Publisher<? extends DataBuffer> inputStream,"
"DataBufferEncoder.java:52"$0$0$0$7$92$"			DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,"
"DataBufferEncoder.java:53"$0$0$0$5$41$"			@Nullable Map<String, Object> hints) {"
"DataBufferEncoder.java:54"$0$0$0$0$0$""
"DataBufferEncoder.java:55"$0$0$0$4$49$"		Flux<DataBuffer> flux = Flux.from(inputStream);"
"DataBufferEncoder.java:56"$0$0$0$5$69$"		if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {"
"DataBufferEncoder.java:57"$0$0$0$6$59$"			flux = flux.doOnNext(buffer -> logValue(buffer, hints));"
"DataBufferEncoder.java:58"$0$0$0$1$3$"		}"
"DataBufferEncoder.java:59"$0$0$0$2$14$"		return flux;"
"DataBufferEncoder.java:60"$0$0$0$1$2$"	}"
"DataBufferEncoder.java:61"$0$0$0$0$0$""
"DataBufferEncoder.java:62"$0$0$0$1$10$"	@Override"
"DataBufferEncoder.java:63"$0$0$0$6$82$"	public DataBuffer encodeValue(DataBuffer buffer, DataBufferFactory bufferFactory,"
"DataBufferEncoder.java:64"$0$0$0$10$96$"			ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"DataBufferEncoder.java:65"$0$0$0$0$0$""
"DataBufferEncoder.java:66"$0$0$0$5$69$"		if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {"
"DataBufferEncoder.java:67"$0$0$0$2$27$"			logValue(buffer, hints);"
"DataBufferEncoder.java:68"$0$0$0$1$3$"		}"
"DataBufferEncoder.java:69"$0$0$0$2$16$"		return buffer;"
"DataBufferEncoder.java:70"$0$0$0$1$2$"	}"
"DataBufferEncoder.java:71"$0$0$0$0$0$""
"DataBufferEncoder.java:72"$0$0$0$9$80$"	private void logValue(DataBuffer buffer, @Nullable Map<String, Object> hints) {"
"DataBufferEncoder.java:73"$1$0$0$4$47$"		String logPrefix = Hints.getLogPrefix(hints);"
"DataBufferEncoder.java:74"$0$0$0$9$79$"		logger.debug(logPrefix + ""Writing "" + buffer.readableByteCount() + "" bytes"");"
"DataBufferEncoder.java:75"$0$0$0$1$2$"	}"
"DataBufferEncoder.java:76"$0$0$0$0$0$""
"DataBufferEncoder.java:77"$0$0$0$1$1$"}"
"EncodedResource.java:1"$0$0$0$1$2$"/*"
"EncodedResource.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"EncodedResource.java:3"$0$0$0$1$2$" *"
"EncodedResource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"EncodedResource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"EncodedResource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"EncodedResource.java:7"$0$0$0$1$2$" *"
"EncodedResource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"EncodedResource.java:9"$0$0$0$1$2$" *"
"EncodedResource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"EncodedResource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"EncodedResource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"EncodedResource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"EncodedResource.java:14"$0$0$0$5$33$" * limitations under the License."
"EncodedResource.java:15"$0$0$0$1$3$" */"
"EncodedResource.java:16"$0$0$0$0$0$""
"EncodedResource.java:17"$0$0$0$2$44$"package org.springframework.core.io.support;"
"EncodedResource.java:18"$0$0$0$0$0$""
"EncodedResource.java:19"$0$0$0$2$27$"import java.io.IOException;"
"EncodedResource.java:20"$0$0$0$2$27$"import java.io.InputStream;"
"EncodedResource.java:21"$0$0$0$2$33$"import java.io.InputStreamReader;"
"EncodedResource.java:22"$0$0$0$2$22$"import java.io.Reader;"
"EncodedResource.java:23"$0$0$0$2$32$"import java.nio.charset.Charset;"
"EncodedResource.java:24"$0$0$0$0$0$""
"EncodedResource.java:25"$0$0$0$2$53$"import org.springframework.core.io.InputStreamSource;"
"EncodedResource.java:26"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"EncodedResource.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"EncodedResource.java:28"$0$0$0$2$39$"import org.springframework.util.Assert;"
"EncodedResource.java:29"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"EncodedResource.java:30"$0$0$0$0$0$""
"EncodedResource.java:31"$0$0$0$1$3$"/**"
"EncodedResource.java:32"$0$0$0$12$78$" * Holder that combines a {@link Resource} descriptor with a specific encoding"
"EncodedResource.java:33"$0$0$0$12$63$" * or {@code Charset} to be used for reading from the resource."
"EncodedResource.java:34"$0$0$0$1$2$" *"
"EncodedResource.java:35"$0$0$0$12$74$" * <p>Used as an argument for operations that support reading content with"
"EncodedResource.java:36"$0$0$0$9$63$" * a specific encoding, typically via a {@code java.io.Reader}."
"EncodedResource.java:37"$0$0$0$1$2$" *"
"EncodedResource.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"EncodedResource.java:39"$0$0$0$4$22$" * @author Sam Brannen"
"EncodedResource.java:40"$0$0$0$3$15$" * @since 1.2.6"
"EncodedResource.java:41"$1$0$0$3$33$" * @see Resource#getInputStream()"
"EncodedResource.java:42"$0$0$0$3$22$" * @see java.io.Reader"
"EncodedResource.java:43"$0$0$0$3$32$" * @see java.nio.charset.Charset"
"EncodedResource.java:44"$0$0$0$1$3$" */"
"EncodedResource.java:45"$0$0$0$6$59$"public class EncodedResource implements InputStreamSource {"
"EncodedResource.java:46"$0$0$0$0$0$""
"EncodedResource.java:47"$0$0$0$4$33$"	private final Resource resource;"
"EncodedResource.java:48"$0$0$0$0$0$""
"EncodedResource.java:49"$0$0$0$1$10$"	@Nullable"
"EncodedResource.java:50"$0$0$0$4$31$"	private final String encoding;"
"EncodedResource.java:51"$0$0$0$0$0$""
"EncodedResource.java:52"$0$0$0$1$10$"	@Nullable"
"EncodedResource.java:53"$0$0$0$4$31$"	private final Charset charset;"
"EncodedResource.java:54"$0$0$0$0$0$""
"EncodedResource.java:55"$0$0$0$0$0$""
"EncodedResource.java:56"$0$0$0$1$4$"	/**"
"EncodedResource.java:57"$0$0$0$11$72$"	 * Create a new {@code EncodedResource} for the given {@code Resource},"
"EncodedResource.java:58"$0$0$0$9$59$"	 * not specifying an explicit encoding or {@code Charset}."
"EncodedResource.java:59"$0$0$0$11$69$"	 * @param resource the {@code Resource} to hold (never {@code null})"
"EncodedResource.java:60"$0$0$0$1$4$"	 */"
"EncodedResource.java:61"$0$0$0$4$44$"	public EncodedResource(Resource resource) {"
"EncodedResource.java:62"$0$0$0$3$29$"		this(resource, null, null);"
"EncodedResource.java:63"$0$0$0$1$2$"	}"
"EncodedResource.java:64"$0$0$0$0$0$""
"EncodedResource.java:65"$0$0$0$1$4$"	/**"
"EncodedResource.java:66"$0$0$0$11$72$"	 * Create a new {@code EncodedResource} for the given {@code Resource},"
"EncodedResource.java:67"$0$0$0$6$41$"	 * using the specified {@code encoding}."
"EncodedResource.java:68"$0$0$0$11$69$"	 * @param resource the {@code Resource} to hold (never {@code null})"
"EncodedResource.java:69"$0$0$0$12$69$"	 * @param encoding the encoding to use for reading from the resource"
"EncodedResource.java:70"$0$0$0$1$4$"	 */"
"EncodedResource.java:71"$0$0$0$7$71$"	public EncodedResource(Resource resource, @Nullable String encoding) {"
"EncodedResource.java:72"$0$0$0$3$33$"		this(resource, encoding, null);"
"EncodedResource.java:73"$0$0$0$1$2$"	}"
"EncodedResource.java:74"$0$0$0$0$0$""
"EncodedResource.java:75"$0$0$0$1$4$"	/**"
"EncodedResource.java:76"$0$0$0$11$72$"	 * Create a new {@code EncodedResource} for the given {@code Resource},"
"EncodedResource.java:77"$0$0$0$6$40$"	 * using the specified {@code Charset}."
"EncodedResource.java:78"$0$0$0$11$69$"	 * @param resource the {@code Resource} to hold (never {@code null})"
"EncodedResource.java:79"$0$0$0$13$75$"	 * @param charset the {@code Charset} to use for reading from the resource"
"EncodedResource.java:80"$0$0$0$1$4$"	 */"
"EncodedResource.java:81"$0$0$0$7$71$"	public EncodedResource(Resource resource, @Nullable Charset charset) {"
"EncodedResource.java:82"$0$0$0$3$32$"		this(resource, null, charset);"
"EncodedResource.java:83"$0$0$0$1$2$"	}"
"EncodedResource.java:84"$0$0$0$0$0$""
"EncodedResource.java:85"$0$0$0$10$99$"	private EncodedResource(Resource resource, @Nullable String encoding, @Nullable Charset charset) {"
"EncodedResource.java:86"$0$0$0$1$10$"		super();"
"EncodedResource.java:87"$0$0$0$6$56$"		Assert.notNull(resource, ""Resource must not be null"");"
"EncodedResource.java:88"$0$0$0$3$27$"		this.resource = resource;"
"EncodedResource.java:89"$0$0$0$3$27$"		this.encoding = encoding;"
"EncodedResource.java:90"$0$0$0$3$25$"		this.charset = charset;"
"EncodedResource.java:91"$0$0$0$1$2$"	}"
"EncodedResource.java:92"$0$0$0$0$0$""
"EncodedResource.java:93"$0$0$0$0$0$""
"EncodedResource.java:94"$0$0$0$1$4$"	/**"
"EncodedResource.java:95"$0$0$0$10$69$"	 * Return the {@code Resource} held by this {@code EncodedResource}."
"EncodedResource.java:96"$0$0$0$1$4$"	 */"
"EncodedResource.java:97"$1$0$0$5$38$"	public final Resource getResource() {"
"EncodedResource.java:98"$0$0$0$2$23$"		return this.resource;"
"EncodedResource.java:99"$0$0$0$1$2$"	}"
"EncodedResource.java:100"$0$0$0$0$0$""
"EncodedResource.java:101"$0$0$0$1$4$"	/**"
"EncodedResource.java:102"$1$0$0$13$89$"	 * Return the encoding to use for reading from the {@linkplain #getResource() resource},"
"EncodedResource.java:103"$0$0$0$7$38$"	 * or {@code null} if none specified."
"EncodedResource.java:104"$0$0$0$1$4$"	 */"
"EncodedResource.java:105"$0$0$0$1$10$"	@Nullable"
"EncodedResource.java:106"$1$0$0$5$36$"	public final String getEncoding() {"
"EncodedResource.java:107"$0$0$0$2$23$"		return this.encoding;"
"EncodedResource.java:108"$0$0$0$1$2$"	}"
"EncodedResource.java:109"$0$0$0$0$0$""
"EncodedResource.java:110"$0$0$0$1$4$"	/**"
"EncodedResource.java:111"$1$0$0$14$96$"	 * Return the {@code Charset} to use for reading from the {@linkplain #getResource() resource},"
"EncodedResource.java:112"$0$0$0$7$38$"	 * or {@code null} if none specified."
"EncodedResource.java:113"$0$0$0$1$4$"	 */"
"EncodedResource.java:114"$0$0$0$1$10$"	@Nullable"
"EncodedResource.java:115"$1$0$0$5$36$"	public final Charset getCharset() {"
"EncodedResource.java:116"$0$0$0$2$22$"		return this.charset;"
"EncodedResource.java:117"$0$0$0$1$2$"	}"
"EncodedResource.java:118"$0$0$0$0$0$""
"EncodedResource.java:119"$0$0$0$1$4$"	/**"
"EncodedResource.java:120"$0$0$0$14$88$"	 * Determine whether a {@link Reader} is required as opposed to an {@link InputStream},"
"EncodedResource.java:121"$2$0$0$12$91$"	 * i.e. whether an {@linkplain #getEncoding() encoding} or a {@link #getCharset() Charset}"
"EncodedResource.java:122"$0$0$0$4$23$"	 * has been specified."
"EncodedResource.java:123"$1$0$0$3$21$"	 * @see #getReader()"
"EncodedResource.java:124"$1$0$0$3$26$"	 * @see #getInputStream()"
"EncodedResource.java:125"$0$0$0$1$4$"	 */"
"EncodedResource.java:126"$0$0$0$4$34$"	public boolean requiresReader() {"
"EncodedResource.java:127"$0$0$0$8$57$"		return (this.encoding != null || this.charset != null);"
"EncodedResource.java:128"$0$0$0$1$2$"	}"
"EncodedResource.java:129"$0$0$0$0$0$""
"EncodedResource.java:130"$0$0$0$1$4$"	/**"
"EncodedResource.java:131"$0$0$0$12$81$"	 * Open a {@code java.io.Reader} for the specified resource, using the specified"
"EncodedResource.java:132"$2$0$0$8$73$"	 * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}"
"EncodedResource.java:133"$0$0$0$3$13$"	 * (if any)."
"EncodedResource.java:134"$0$0$0$8$52$"	 * @throws IOException if opening the Reader failed"
"EncodedResource.java:135"$0$0$0$3$26$"	 * @see #requiresReader()"
"EncodedResource.java:136"$1$0$0$3$26$"	 * @see #getInputStream()"
"EncodedResource.java:137"$0$0$0$1$4$"	 */"
"EncodedResource.java:138"$1$0$0$6$47$"	public Reader getReader() throws IOException {"
"EncodedResource.java:139"$0$0$0$5$29$"		if (this.charset != null) {"
"EncodedResource.java:140"$1$0$0$4$78$"			return new InputStreamReader(this.resource.getInputStream(), this.charset);"
"EncodedResource.java:141"$0$0$0$1$3$"		}"
"EncodedResource.java:142"$0$0$0$6$35$"		else if (this.encoding != null) {"
"EncodedResource.java:143"$1$0$0$4$79$"			return new InputStreamReader(this.resource.getInputStream(), this.encoding);"
"EncodedResource.java:144"$0$0$0$1$3$"		}"
"EncodedResource.java:145"$0$0$0$2$8$"		else {"
"EncodedResource.java:146"$1$0$0$3$64$"			return new InputStreamReader(this.resource.getInputStream());"
"EncodedResource.java:147"$0$0$0$1$3$"		}"
"EncodedResource.java:148"$0$0$0$1$2$"	}"
"EncodedResource.java:149"$0$0$0$0$0$""
"EncodedResource.java:150"$0$0$0$1$4$"	/**"
"EncodedResource.java:151"$0$0$0$12$82$"	 * Open an {@code InputStream} for the specified resource, ignoring any specified"
"EncodedResource.java:152"$2$0$0$8$74$"	 * {@link #getCharset() Charset} or {@linkplain #getEncoding() encoding}."
"EncodedResource.java:153"$0$0$0$8$57$"	 * @throws IOException if opening the InputStream failed"
"EncodedResource.java:154"$0$0$0$3$26$"	 * @see #requiresReader()"
"EncodedResource.java:155"$1$0$0$3$21$"	 * @see #getReader()"
"EncodedResource.java:156"$0$0$0$1$4$"	 */"
"EncodedResource.java:157"$0$0$0$1$10$"	@Override"
"EncodedResource.java:158"$1$0$0$6$57$"	public InputStream getInputStream() throws IOException {"
"EncodedResource.java:159"$1$0$0$2$40$"		return this.resource.getInputStream();"
"EncodedResource.java:160"$0$0$0$1$2$"	}"
"EncodedResource.java:161"$0$0$0$0$0$""
"EncodedResource.java:162"$0$0$0$0$0$""
"EncodedResource.java:163"$0$0$0$1$10$"	@Override"
"EncodedResource.java:164"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"EncodedResource.java:165"$0$0$0$5$22$"		if (this == other) {"
"EncodedResource.java:166"$0$0$0$2$15$"			return true;"
"EncodedResource.java:167"$0$0$0$1$3$"		}"
"EncodedResource.java:168"$0$0$0$5$44$"		if (!(other instanceof EncodedResource)) {"
"EncodedResource.java:169"$0$0$0$2$16$"			return false;"
"EncodedResource.java:170"$0$0$0$1$3$"		}"
"EncodedResource.java:171"$0$0$0$5$58$"		EncodedResource otherResource = (EncodedResource) other;"
"EncodedResource.java:172"$0$0$0$3$57$"		return (this.resource.equals(otherResource.resource) &&"
"EncodedResource.java:173"$0$0$0$3$70$"				ObjectUtils.nullSafeEquals(this.charset, otherResource.charset) &&"
"EncodedResource.java:174"$0$0$0$2$71$"				ObjectUtils.nullSafeEquals(this.encoding, otherResource.encoding));"
"EncodedResource.java:175"$0$0$0$1$2$"	}"
"EncodedResource.java:176"$0$0$0$0$0$""
"EncodedResource.java:177"$0$0$0$1$10$"	@Override"
"EncodedResource.java:178"$0$0$0$4$24$"	public int hashCode() {"
"EncodedResource.java:179"$0$0$0$2$34$"		return this.resource.hashCode();"
"EncodedResource.java:180"$0$0$0$1$2$"	}"
"EncodedResource.java:181"$0$0$0$0$0$""
"EncodedResource.java:182"$0$0$0$1$10$"	@Override"
"EncodedResource.java:183"$0$0$0$4$27$"	public String toString() {"
"EncodedResource.java:184"$0$0$0$2$34$"		return this.resource.toString();"
"EncodedResource.java:185"$0$0$0$1$2$"	}"
"EncodedResource.java:186"$0$0$0$0$0$""
"EncodedResource.java:187"$0$0$0$1$1$"}"
"OrderUtils.java:1"$0$0$0$1$2$"/*"
"OrderUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"OrderUtils.java:3"$0$0$0$1$2$" *"
"OrderUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"OrderUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"OrderUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"OrderUtils.java:7"$0$0$0$1$2$" *"
"OrderUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"OrderUtils.java:9"$0$0$0$1$2$" *"
"OrderUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"OrderUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"OrderUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"OrderUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"OrderUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"OrderUtils.java:15"$0$0$0$1$3$" */"
"OrderUtils.java:16"$0$0$0$0$0$""
"OrderUtils.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"OrderUtils.java:18"$0$0$0$0$0$""
"OrderUtils.java:19"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"OrderUtils.java:20"$0$0$0$2$21$"import java.util.Map;"
"OrderUtils.java:21"$0$0$0$0$0$""
"OrderUtils.java:22"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"OrderUtils.java:23"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"OrderUtils.java:24"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"OrderUtils.java:25"$0$0$0$0$0$""
"OrderUtils.java:26"$0$0$0$1$3$"/**"
"OrderUtils.java:27"$0$0$0$15$88$" * General utility for determining the order of an object based on its type declaration."
"OrderUtils.java:28"$0$0$0$11$90$" * Handles Spring's {@link Order} annotation as well as {@link javax.annotation.Priority}."
"OrderUtils.java:29"$0$0$0$1$2$" *"
"OrderUtils.java:30"$0$0$0$4$26$" * @author Stephane Nicoll"
"OrderUtils.java:31"$0$0$0$4$26$" * @author Juergen Hoeller"
"OrderUtils.java:32"$0$0$0$3$13$" * @since 4.1"
"OrderUtils.java:33"$0$0$0$3$13$" * @see Order"
"OrderUtils.java:34"$0$0$0$3$33$" * @see javax.annotation.Priority"
"OrderUtils.java:35"$0$0$0$1$3$" */"
"OrderUtils.java:36"$0$0$0$5$34$"public abstract class OrderUtils {"
"OrderUtils.java:37"$0$0$0$0$0$""
"OrderUtils.java:38"$0$0$0$8$47$"	/** Cache marker for a non-annotated Class. */"
"OrderUtils.java:39"$0$0$0$8$58$"	private static final Object NOT_ANNOTATED = new Object();"
"OrderUtils.java:40"$0$0$0$0$0$""
"OrderUtils.java:41"$0$0$0$7$85$"	private static final String JAVAX_PRIORITY_ANNOTATION = ""javax.annotation.Priority"";"
"OrderUtils.java:42"$0$0$0$0$0$""
"OrderUtils.java:43"$0$0$0$11$67$"	/** Cache for @Order value (or NOT_ANNOTATED marker) per Class. */"
"OrderUtils.java:44"$0$0$0$9$102$"	private static final Map<AnnotatedElement, Object> orderCache = new ConcurrentReferenceHashMap<>(64);"
"OrderUtils.java:45"$0$0$0$0$0$""
"OrderUtils.java:46"$0$0$0$0$0$""
"OrderUtils.java:47"$0$0$0$1$4$"	/**"
"OrderUtils.java:48"$0$0$0$12$68$"	 * Return the order on the specified {@code type}, or the specified"
"OrderUtils.java:49"$0$0$0$8$39$"	 * default value if none can be found."
"OrderUtils.java:50"$0$0$0$10$81$"	 * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}."
"OrderUtils.java:51"$0$0$0$7$34$"	 * @param type the type to handle"
"OrderUtils.java:52"$0$0$0$15$83$"	 * @return the priority value, or the specified default order if none can be found"
"OrderUtils.java:53"$0$0$0$3$14$"	 * @since 5.0"
"OrderUtils.java:54"$1$0$0$3$28$"	 * @see #getPriority(Class)"
"OrderUtils.java:55"$0$0$0$1$4$"	 */"
"OrderUtils.java:56"$1$0$0$8$62$"	public static int getOrder(Class<?> type, int defaultOrder) {"
"OrderUtils.java:57"$1$0$0$4$33$"		Integer order = getOrder(type);"
"OrderUtils.java:58"$0$0$0$8$48$"		return (order != null ? order : defaultOrder);"
"OrderUtils.java:59"$0$0$0$1$2$"	}"
"OrderUtils.java:60"$0$0$0$0$0$""
"OrderUtils.java:61"$0$0$0$1$4$"	/**"
"OrderUtils.java:62"$0$0$0$12$68$"	 * Return the order on the specified {@code type}, or the specified"
"OrderUtils.java:63"$0$0$0$8$39$"	 * default value if none can be found."
"OrderUtils.java:64"$0$0$0$10$81$"	 * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}."
"OrderUtils.java:65"$0$0$0$7$34$"	 * @param type the type to handle"
"OrderUtils.java:66"$0$0$0$15$83$"	 * @return the priority value, or the specified default order if none can be found"
"OrderUtils.java:67"$1$0$0$3$28$"	 * @see #getPriority(Class)"
"OrderUtils.java:68"$0$0$0$1$4$"	 */"
"OrderUtils.java:69"$0$0$0$1$10$"	@Nullable"
"OrderUtils.java:70"$1$0$0$9$80$"	public static Integer getOrder(Class<?> type, @Nullable Integer defaultOrder) {"
"OrderUtils.java:71"$1$0$0$4$33$"		Integer order = getOrder(type);"
"OrderUtils.java:72"$0$0$0$8$48$"		return (order != null ? order : defaultOrder);"
"OrderUtils.java:73"$0$0$0$1$2$"	}"
"OrderUtils.java:74"$0$0$0$0$0$""
"OrderUtils.java:75"$0$0$0$1$4$"	/**"
"OrderUtils.java:76"$0$0$0$9$51$"	 * Return the order on the specified {@code type}."
"OrderUtils.java:77"$0$0$0$10$81$"	 * <p>Takes care of {@link Order @Order} and {@code @javax.annotation.Priority}."
"OrderUtils.java:78"$0$0$0$7$34$"	 * @param type the type to handle"
"OrderUtils.java:79"$0$0$0$13$65$"	 * @return the order value, or {@code null} if none can be found"
"OrderUtils.java:80"$1$0$0$3$28$"	 * @see #getPriority(Class)"
"OrderUtils.java:81"$0$0$0$1$4$"	 */"
"OrderUtils.java:82"$0$0$0$1$10$"	@Nullable"
"OrderUtils.java:83"$1$0$0$6$48$"	public static Integer getOrder(Class<?> type) {"
"OrderUtils.java:84"$1$0$0$4$100$"		return getOrderFromAnnotations(type, MergedAnnotations.from(type, SearchStrategy.TYPE_HIERARCHY));"
"OrderUtils.java:85"$0$0$0$1$2$"	}"
"OrderUtils.java:86"$0$0$0$0$0$""
"OrderUtils.java:87"$0$0$0$1$4$"	/**"
"OrderUtils.java:88"$0$0$0$9$63$"	 * Return the order from the specified annotations collection."
"OrderUtils.java:89"$0$0$0$8$45$"	 * <p>Takes care of {@link Order @Order} and"
"OrderUtils.java:90"$0$0$0$3$39$"	 * {@code @javax.annotation.Priority}."
"OrderUtils.java:91"$0$0$0$6$37$"	 * @param element the source element"
"OrderUtils.java:92"$0$0$0$7$49$"	 * @param annotations the annotation to consider"
"OrderUtils.java:93"$0$0$0$13$65$"	 * @return the order value, or {@code null} if none can be found"
"OrderUtils.java:94"$0$0$0$1$4$"	 */"
"OrderUtils.java:95"$0$0$0$1$10$"	@Nullable"
"OrderUtils.java:96"$1$0$0$7$98$"	static Integer getOrderFromAnnotations(AnnotatedElement element, MergedAnnotations annotations) {"
"OrderUtils.java:97"$0$0$0$5$36$"		if (!(element instanceof Class)) {"
"OrderUtils.java:98"$0$0$0$2$33$"			return findOrder(annotations);"
"OrderUtils.java:99"$0$0$0$1$3$"		}"
"OrderUtils.java:100"$1$0$0$4$42$"		Object cached = orderCache.get(element);"
"OrderUtils.java:101"$0$0$0$5$23$"		if (cached != null) {"
"OrderUtils.java:102"$0$0$0$9$64$"			return (cached instanceof Integer ? (Integer) cached : null);"
"OrderUtils.java:103"$0$0$0$1$3$"		}"
"OrderUtils.java:104"$0$0$0$4$42$"		Integer result = findOrder(annotations);"
"OrderUtils.java:105"$0$0$0$8$67$"		orderCache.put(element, result != null ? result : NOT_ANNOTATED);"
"OrderUtils.java:106"$0$0$0$2$16$"		return result;"
"OrderUtils.java:107"$0$0$0$1$2$"	}"
"OrderUtils.java:108"$0$0$0$0$0$""
"OrderUtils.java:109"$0$0$0$1$10$"	@Nullable"
"OrderUtils.java:110"$0$0$0$6$66$"	private static Integer findOrder(MergedAnnotations annotations) {"
"OrderUtils.java:111"$1$0$0$4$73$"		MergedAnnotation<Order> orderAnnotation = annotations.get(Order.class);"
"OrderUtils.java:112"$0$0$0$3$36$"		if (orderAnnotation.isPresent()) {"
"OrderUtils.java:113"$1$0$0$2$57$"			return orderAnnotation.getInt(MergedAnnotation.VALUE);"
"OrderUtils.java:114"$0$0$0$1$3$"		}"
"OrderUtils.java:115"$1$0$0$4$86$"		MergedAnnotation<?> priorityAnnotation = annotations.get(JAVAX_PRIORITY_ANNOTATION);"
"OrderUtils.java:116"$0$0$0$3$39$"		if (priorityAnnotation.isPresent()) {"
"OrderUtils.java:117"$1$0$0$2$60$"			return priorityAnnotation.getInt(MergedAnnotation.VALUE);"
"OrderUtils.java:118"$0$0$0$1$3$"		}"
"OrderUtils.java:119"$0$0$0$2$14$"		return null;"
"OrderUtils.java:120"$0$0$0$1$2$"	}"
"OrderUtils.java:121"$0$0$0$0$0$""
"OrderUtils.java:122"$0$0$0$1$4$"	/**"
"OrderUtils.java:123"$0$0$0$9$72$"	 * Return the value of the {@code javax.annotation.Priority} annotation"
"OrderUtils.java:124"$0$0$0$11$60$"	 * declared on the specified type, or {@code null} if none."
"OrderUtils.java:125"$0$0$0$7$34$"	 * @param type the type to handle"
"OrderUtils.java:126"$0$0$0$15$85$"	 * @return the priority value if the annotation is declared, or {@code null} if none"
"OrderUtils.java:127"$0$0$0$1$4$"	 */"
"OrderUtils.java:128"$0$0$0$1$10$"	@Nullable"
"OrderUtils.java:129"$1$0$0$6$51$"	public static Integer getPriority(Class<?> type) {"
"OrderUtils.java:130"$1$0$0$3$99$"		return MergedAnnotations.from(type, SearchStrategy.TYPE_HIERARCHY).get(JAVAX_PRIORITY_ANNOTATION)"
"OrderUtils.java:131"$1$0$0$2$66$"				.getValue(MergedAnnotation.VALUE, Integer.class).orElse(null);"
"OrderUtils.java:132"$0$0$0$1$2$"	}"
"OrderUtils.java:133"$0$0$0$0$0$""
"OrderUtils.java:134"$0$0$0$1$1$"}"
"PropertySource.java:1"$0$0$0$1$2$"/*"
"PropertySource.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"PropertySource.java:3"$0$0$0$1$2$" *"
"PropertySource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PropertySource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PropertySource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PropertySource.java:7"$0$0$0$1$2$" *"
"PropertySource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PropertySource.java:9"$0$0$0$1$2$" *"
"PropertySource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PropertySource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PropertySource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PropertySource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PropertySource.java:14"$0$0$0$5$33$" * limitations under the License."
"PropertySource.java:15"$0$0$0$1$3$" */"
"PropertySource.java:16"$0$0$0$0$0$""
"PropertySource.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"PropertySource.java:18"$0$0$0$0$0$""
"PropertySource.java:19"$0$0$0$2$38$"import org.apache.commons.logging.Log;"
"PropertySource.java:20"$0$0$0$2$45$"import org.apache.commons.logging.LogFactory;"
"PropertySource.java:21"$0$0$0$0$0$""
"PropertySource.java:22"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PropertySource.java:23"$0$0$0$2$39$"import org.springframework.util.Assert;"
"PropertySource.java:24"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"PropertySource.java:25"$0$0$0$0$0$""
"PropertySource.java:26"$0$0$0$1$3$"/**"
"PropertySource.java:27"$0$0$0$13$89$" * Abstract base class representing a source of name/value property pairs. The underlying"
"PropertySource.java:28"$1$0$0$14$89$" * {@linkplain #getSource() source object} may be of any type {@code T} that encapsulates"
"PropertySource.java:29"$0$0$0$9$91$" * properties. Examples include {@link java.util.Properties} objects, {@link java.util.Map}"
"PropertySource.java:30"$0$0$0$12$88$" * objects, {@code ServletContext} and {@code ServletConfig} objects (for access to init"
"PropertySource.java:31"$0$0$0$11$81$" * parameters). Explore the {@code PropertySource} type hierarchy to see provided"
"PropertySource.java:32"$0$0$0$2$19$" * implementations."
"PropertySource.java:33"$0$0$0$1$2$" *"
"PropertySource.java:34"$0$0$0$12$84$" * <p>{@code PropertySource} objects are not typically used in isolation, but rather"
"PropertySource.java:35"$0$0$0$12$85$" * through a {@link PropertySources} object, which aggregates property sources and in"
"PropertySource.java:36"$0$0$0$10$78$" * conjunction with a {@link PropertyResolver} implementation that can perform"
"PropertySource.java:37"$0$0$0$9$71$" * precedence-based searches across the set of {@code PropertySources}."
"PropertySource.java:38"$0$0$0$1$2$" *"
"PropertySource.java:39"$0$0$0$12$79$" * <p>{@code PropertySource} identity is determined not based on the content of"
"PropertySource.java:40"$1$0$0$13$82$" * encapsulated properties, but rather based on the {@link #getName() name} of the"
"PropertySource.java:41"$0$0$0$11$87$" * {@code PropertySource} alone. This is useful for manipulating {@code PropertySource}"
"PropertySource.java:42"$0$0$0$11$88$" * objects when in collection contexts. See operations in {@link MutablePropertySources}"
"PropertySource.java:43"$0$0$0$13$85$" * as well as the {@link #named(String)} and {@link #toString()} methods for details."
"PropertySource.java:44"$0$0$0$1$2$" *"
"PropertySource.java:45"$0$0$0$7$41$" * <p>Note that when working with @{@link"
"PropertySource.java:46"$0$0$0$5$83$" * org.springframework.context.annotation.Configuration Configuration} classes that"
"PropertySource.java:47"$0$0$0$5$84$" * the @{@link org.springframework.context.annotation.PropertySource PropertySource}"
"PropertySource.java:48"$0$0$0$14$89$" * annotation provides a convenient and declarative way of adding property sources to the"
"PropertySource.java:49"$0$0$0$4$33$" * enclosing {@code Environment}."
"PropertySource.java:50"$0$0$0$1$2$" *"
"PropertySource.java:51"$0$0$0$4$22$" * @author Chris Beams"
"PropertySource.java:52"$0$0$0$3$13$" * @since 3.1"
"PropertySource.java:53"$0$0$0$6$29$" * @param <T> the source type"
"PropertySource.java:54"$0$0$0$3$23$" * @see PropertySources"
"PropertySource.java:55"$0$0$0$3$24$" * @see PropertyResolver"
"PropertySource.java:56"$0$0$0$3$39$" * @see PropertySourcesPropertyResolver"
"PropertySource.java:57"$0$0$0$3$30$" * @see MutablePropertySources"
"PropertySource.java:58"$0$0$0$3$61$" * @see org.springframework.context.annotation.PropertySource"
"PropertySource.java:59"$0$0$0$1$3$" */"
"PropertySource.java:60"$0$0$0$5$41$"public abstract class PropertySource<T> {"
"PropertySource.java:61"$0$0$0$0$0$""
"PropertySource.java:62"$2$0$0$6$60$"	protected final Log logger = LogFactory.getLog(getClass());"
"PropertySource.java:63"$0$0$0$0$0$""
"PropertySource.java:64"$0$0$0$4$29$"	protected final String name;"
"PropertySource.java:65"$0$0$0$0$0$""
"PropertySource.java:66"$0$0$0$4$26$"	protected final T source;"
"PropertySource.java:67"$0$0$0$0$0$""
"PropertySource.java:68"$0$0$0$0$0$""
"PropertySource.java:69"$0$0$0$1$4$"	/**"
"PropertySource.java:70"$0$0$0$13$78$"	 * Create a new {@code PropertySource} with the given name and source object."
"PropertySource.java:71"$0$0$0$1$4$"	 */"
"PropertySource.java:72"$0$0$0$6$47$"	public PropertySource(String name, T source) {"
"PropertySource.java:73"$0$0$0$10$83$"		Assert.hasText(name, ""Property source name must contain at least one character"");"
"PropertySource.java:74"$0$0$0$7$61$"		Assert.notNull(source, ""Property source must not be null"");"
"PropertySource.java:75"$0$0$0$3$19$"		this.name = name;"
"PropertySource.java:76"$0$0$0$3$23$"		this.source = source;"
"PropertySource.java:77"$0$0$0$1$2$"	}"
"PropertySource.java:78"$0$0$0$0$0$""
"PropertySource.java:79"$0$0$0$1$4$"	/**"
"PropertySource.java:80"$0$0$0$14$74$"	 * Create a new {@code PropertySource} with the given name and with a new"
"PropertySource.java:81"$0$0$0$8$53$"	 * {@code Object} instance as the underlying source."
"PropertySource.java:82"$0$0$0$10$80$"	 * <p>Often useful in testing scenarios when creating anonymous implementations"
"PropertySource.java:83"$0$0$0$12$74$"	 * that never query an actual source but rather return hard-coded values."
"PropertySource.java:84"$0$0$0$1$4$"	 */"
"PropertySource.java:85"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"PropertySource.java:86"$0$0$0$4$37$"	public PropertySource(String name) {"
"PropertySource.java:87"$0$0$0$4$31$"		this(name, (T) new Object());"
"PropertySource.java:88"$0$0$0$1$2$"	}"
"PropertySource.java:89"$0$0$0$0$0$""
"PropertySource.java:90"$0$0$0$0$0$""
"PropertySource.java:91"$0$0$0$1$4$"	/**"
"PropertySource.java:92"$0$0$0$8$51$"	 * Return the name of this {@code PropertySource}."
"PropertySource.java:93"$0$0$0$1$4$"	 */"
"PropertySource.java:94"$1$0$0$4$26$"	public String getName() {"
"PropertySource.java:95"$0$0$0$2$19$"		return this.name;"
"PropertySource.java:96"$0$0$0$1$2$"	}"
"PropertySource.java:97"$0$0$0$0$0$""
"PropertySource.java:98"$0$0$0$1$4$"	/**"
"PropertySource.java:99"$0$0$0$10$72$"	 * Return the underlying source object for this {@code PropertySource}."
"PropertySource.java:100"$0$0$0$1$4$"	 */"
"PropertySource.java:101"$1$0$0$4$23$"	public T getSource() {"
"PropertySource.java:102"$0$0$0$2$21$"		return this.source;"
"PropertySource.java:103"$0$0$0$1$2$"	}"
"PropertySource.java:104"$0$0$0$0$0$""
"PropertySource.java:105"$0$0$0$1$4$"	/**"
"PropertySource.java:106"$0$0$0$10$71$"	 * Return whether this {@code PropertySource} contains the given name."
"PropertySource.java:107"$0$0$0$11$72$"	 * <p>This implementation simply checks for a {@code null} return value"
"PropertySource.java:108"$1$0$0$9$71$"	 * from {@link #getProperty(String)}. Subclasses may wish to implement"
"PropertySource.java:109"$0$0$0$7$43$"	 * a more efficient algorithm if possible."
"PropertySource.java:110"$0$0$0$8$41$"	 * @param name the property name to find"
"PropertySource.java:111"$0$0$0$1$4$"	 */"
"PropertySource.java:112"$0$0$0$5$47$"	public boolean containsProperty(String name) {"
"PropertySource.java:113"$1$0$0$4$37$"		return (getProperty(name) != null);"
"PropertySource.java:114"$0$0$0$1$2$"	}"
"PropertySource.java:115"$0$0$0$0$0$""
"PropertySource.java:116"$0$0$0$1$4$"	/**"
"PropertySource.java:117"$0$0$0$9$52$"	 * Return the value associated with the given name,"
"PropertySource.java:118"$0$0$0$7$33$"	 * or {@code null} if not found."
"PropertySource.java:119"$0$0$0$7$36$"	 * @param name the property to find"
"PropertySource.java:120"$1$0$0$3$53$"	 * @see PropertyResolver#getRequiredProperty(String)"
"PropertySource.java:121"$0$0$0$1$4$"	 */"
"PropertySource.java:122"$0$0$0$1$10$"	@Nullable"
"PropertySource.java:123"$1$0$0$5$49$"	public abstract Object getProperty(String name);"
"PropertySource.java:124"$0$0$0$0$0$""
"PropertySource.java:125"$0$0$0$0$0$""
"PropertySource.java:126"$0$0$0$1$4$"	/**"
"PropertySource.java:127"$0$0$0$12$71$"	 * This {@code PropertySource} object is equal to the given object if:"
"PropertySource.java:128"$0$0$0$2$8$"	 * <ul>"
"PropertySource.java:129"$0$0$0$6$34$"	 * <li>they are the same instance"
"PropertySource.java:130"$0$0$0$10$62$"	 * <li>the {@code name} properties for both objects are equal"
"PropertySource.java:131"$0$0$0$2$9$"	 * </ul>"
"PropertySource.java:132"$0$0$0$9$59$"	 * <p>No properties other than {@code name} are evaluated."
"PropertySource.java:133"$0$0$0$1$4$"	 */"
"PropertySource.java:134"$0$0$0$1$10$"	@Override"
"PropertySource.java:135"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"PropertySource.java:136"$0$0$0$9$62$"		return (this == other || (other instanceof PropertySource &&"
"PropertySource.java:137"$0$0$0$3$78$"				ObjectUtils.nullSafeEquals(this.name, ((PropertySource<?>) other).name)));"
"PropertySource.java:138"$0$0$0$1$2$"	}"
"PropertySource.java:139"$0$0$0$0$0$""
"PropertySource.java:140"$0$0$0$1$4$"	/**"
"PropertySource.java:141"$0$0$0$11$61$"	 * Return a hash code derived from the {@code name} property"
"PropertySource.java:142"$0$0$0$6$42$"	 * of this {@code PropertySource} object."
"PropertySource.java:143"$0$0$0$1$4$"	 */"
"PropertySource.java:144"$0$0$0$1$10$"	@Override"
"PropertySource.java:145"$0$0$0$4$24$"	public int hashCode() {"
"PropertySource.java:146"$0$0$0$2$49$"		return ObjectUtils.nullSafeHashCode(this.name);"
"PropertySource.java:147"$0$0$0$1$2$"	}"
"PropertySource.java:148"$0$0$0$0$0$""
"PropertySource.java:149"$0$0$0$1$4$"	/**"
"PropertySource.java:150"$0$0$0$15$84$"	 * Produce concise output (type and name) if the current log level does not include"
"PropertySource.java:151"$0$0$0$15$85$"	 * debug. If debug is enabled, produce verbose output including the hash code of the"
"PropertySource.java:152"$0$0$0$8$63$"	 * PropertySource instance and every name/value property pair."
"PropertySource.java:153"$0$0$0$14$87$"	 * <p>This variable verbosity is useful as a property source such as system properties"
"PropertySource.java:154"$0$0$0$12$79$"	 * or environment variables may contain an arbitrary number of property pairs,"
"PropertySource.java:155"$0$0$0$11$72$"	 * potentially leading to difficult to read exception and log messages."
"PropertySource.java:156"$0$0$0$3$29$"	 * @see Log#isDebugEnabled()"
"PropertySource.java:157"$0$0$0$1$4$"	 */"
"PropertySource.java:158"$0$0$0$1$10$"	@Override"
"PropertySource.java:159"$0$0$0$4$27$"	public String toString() {"
"PropertySource.java:160"$0$0$0$3$32$"		if (logger.isDebugEnabled()) {"
"PropertySource.java:161"$2$0$0$7$76$"			return getClass().getSimpleName() + ""@"" + System.identityHashCode(this) +"
"PropertySource.java:162"$0$0$0$11$67$"					"" {name='"" + this.name + ""', properties="" + this.source + ""}"";"
"PropertySource.java:163"$0$0$0$1$3$"		}"
"PropertySource.java:164"$0$0$0$2$8$"		else {"
"PropertySource.java:165"$2$0$0$9$69$"			return getClass().getSimpleName() + "" {name='"" + this.name + ""'}"";"
"PropertySource.java:166"$0$0$0$1$3$"		}"
"PropertySource.java:167"$0$0$0$1$2$"	}"
"PropertySource.java:168"$0$0$0$0$0$""
"PropertySource.java:169"$0$0$0$0$0$""
"PropertySource.java:170"$0$0$0$1$4$"	/**"
"PropertySource.java:171"$0$0$0$12$100$"	 * Return a {@code PropertySource} implementation intended for collection comparison purposes only."
"PropertySource.java:172"$0$0$0$15$99$"	 * <p>Primarily for internal use, but given a collection of {@code PropertySource} objects, may be"
"PropertySource.java:173"$0$0$0$4$20$"	 * used as follows:"
"PropertySource.java:174"$0$0$0$3$22$"	 * <pre class=""code"">"
"PropertySource.java:175"$0$0$0$7$80$"	 * {@code List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();"
"PropertySource.java:176"$0$0$0$4$56$"	 * sources.add(new MapPropertySource(""sourceA"", mapA));"
"PropertySource.java:177"$0$0$0$4$56$"	 * sources.add(new MapPropertySource(""sourceB"", mapB));"
"PropertySource.java:178"$0$0$0$3$61$"	 * assert sources.contains(PropertySource.named(""sourceA""));"
"PropertySource.java:179"$0$0$0$3$61$"	 * assert sources.contains(PropertySource.named(""sourceB""));"
"PropertySource.java:180"$0$0$0$3$62$"	 * assert !sources.contains(PropertySource.named(""sourceC""));"
"PropertySource.java:181"$0$0$0$2$11$"	 * }</pre>"
"PropertySource.java:182"$0$0$0$9$88$"	 * The returned {@code PropertySource} will throw {@code UnsupportedOperationException}"
"PropertySource.java:183"$0$0$0$13$96$"	 * if any methods other than {@code equals(Object)}, {@code hashCode()}, and {@code toString()}"
"PropertySource.java:184"$0$0$0$3$15$"	 * are called."
"PropertySource.java:185"$0$0$0$15$93$"	 * @param name the name of the comparison {@code PropertySource} to be created and returned."
"PropertySource.java:186"$0$0$0$1$4$"	 */"
"PropertySource.java:187"$0$0$0$6$53$"	public static PropertySource<?> named(String name) {"
"PropertySource.java:188"$0$0$0$3$44$"		return new ComparisonPropertySource(name);"
"PropertySource.java:189"$0$0$0$1$2$"	}"
"PropertySource.java:190"$0$0$0$0$0$""
"PropertySource.java:191"$0$0$0$0$0$""
"PropertySource.java:192"$0$0$0$1$4$"	/**"
"PropertySource.java:193"$0$0$0$14$79$"	 * {@code PropertySource} to be used as a placeholder in cases where an actual"
"PropertySource.java:194"$0$0$0$10$72$"	 * property source cannot be eagerly initialized at application context"
"PropertySource.java:195"$0$0$0$10$79$"	 * creation time.  For example, a {@code ServletContext}-based property source"
"PropertySource.java:196"$0$0$0$13$83$"	 * must wait until the {@code ServletContext} object is available to its enclosing"
"PropertySource.java:197"$0$0$0$14$81$"	 * {@code ApplicationContext}.  In such cases, a stub should be used to hold the"
"PropertySource.java:198"$0$0$0$11$76$"	 * intended default position/order of the property source, then be replaced"
"PropertySource.java:199"$0$0$0$4$27$"	 * during context refresh."
"PropertySource.java:200"$0$0$0$3$93$"	 * @see org.springframework.context.support.AbstractApplicationContext#initPropertySources()"
"PropertySource.java:201"$0$0$0$3$75$"	 * @see org.springframework.web.context.support.StandardServletEnvironment"
"PropertySource.java:202"$0$0$0$3$77$"	 * @see org.springframework.web.context.support.ServletContextPropertySource"
"PropertySource.java:203"$0$0$0$1$4$"	 */"
"PropertySource.java:204"$0$0$0$7$72$"	public static class StubPropertySource extends PropertySource<Object> {"
"PropertySource.java:205"$0$0$0$0$0$""
"PropertySource.java:206"$0$0$0$4$42$"		public StubPropertySource(String name) {"
"PropertySource.java:207"$0$0$0$3$29$"			super(name, new Object());"
"PropertySource.java:208"$0$0$0$1$3$"		}"
"PropertySource.java:209"$0$0$0$0$0$""
"PropertySource.java:210"$0$0$0$1$5$"		/**"
"PropertySource.java:211"$0$0$0$5$33$"		 * Always returns {@code null}."
"PropertySource.java:212"$0$0$0$1$5$"		 */"
"PropertySource.java:213"$0$0$0$1$11$"		@Override"
"PropertySource.java:214"$0$0$0$1$11$"		@Nullable"
"PropertySource.java:215"$1$0$0$5$42$"		public String getProperty(String name) {"
"PropertySource.java:216"$0$0$0$2$15$"			return null;"
"PropertySource.java:217"$0$0$0$1$3$"		}"
"PropertySource.java:218"$0$0$0$1$2$"	}"
"PropertySource.java:219"$0$0$0$0$0$""
"PropertySource.java:220"$0$0$0$0$0$""
"PropertySource.java:221"$0$0$0$1$4$"	/**"
"PropertySource.java:222"$0$0$0$9$78$"	 * A {@code PropertySource} implementation intended for collection comparison"
"PropertySource.java:223"$0$0$0$2$13$"	 * purposes."
"PropertySource.java:224"$0$0$0$1$3$"	 *"
"PropertySource.java:225"$0$0$0$3$37$"	 * @see PropertySource#named(String)"
"PropertySource.java:226"$0$0$0$1$4$"	 */"
"PropertySource.java:227"$0$0$0$6$67$"	static class ComparisonPropertySource extends StubPropertySource {"
"PropertySource.java:228"$0$0$0$0$0$""
"PropertySource.java:229"$0$0$0$6$43$"		private static final String USAGE_ERROR ="
"PropertySource.java:230"$0$0$0$9$85$"				""ComparisonPropertySource instances are for use with collection comparison only"";"
"PropertySource.java:231"$0$0$0$0$0$""
"PropertySource.java:232"$0$0$0$4$48$"		public ComparisonPropertySource(String name) {"
"PropertySource.java:233"$0$0$0$1$15$"			super(name);"
"PropertySource.java:234"$0$0$0$1$3$"		}"
"PropertySource.java:235"$0$0$0$0$0$""
"PropertySource.java:236"$0$0$0$1$11$"		@Override"
"PropertySource.java:237"$1$0$0$4$29$"		public Object getSource() {"
"PropertySource.java:238"$0$0$0$3$56$"			throw new UnsupportedOperationException(USAGE_ERROR);"
"PropertySource.java:239"$0$0$0$1$3$"		}"
"PropertySource.java:240"$0$0$0$0$0$""
"PropertySource.java:241"$0$0$0$1$11$"		@Override"
"PropertySource.java:242"$0$0$0$5$48$"		public boolean containsProperty(String name) {"
"PropertySource.java:243"$0$0$0$3$56$"			throw new UnsupportedOperationException(USAGE_ERROR);"
"PropertySource.java:244"$0$0$0$1$3$"		}"
"PropertySource.java:245"$0$0$0$0$0$""
"PropertySource.java:246"$0$0$0$1$11$"		@Override"
"PropertySource.java:247"$0$0$0$1$11$"		@Nullable"
"PropertySource.java:248"$1$0$0$5$42$"		public String getProperty(String name) {"
"PropertySource.java:249"$0$0$0$3$56$"			throw new UnsupportedOperationException(USAGE_ERROR);"
"PropertySource.java:250"$0$0$0$1$3$"		}"
"PropertySource.java:251"$0$0$0$1$2$"	}"
"PropertySource.java:252"$0$0$0$0$0$""
"PropertySource.java:253"$0$0$0$1$1$"}"
"StreamUtils.java:1"$0$0$0$1$2$"/*"
"StreamUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"StreamUtils.java:3"$0$0$0$1$2$" *"
"StreamUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StreamUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StreamUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StreamUtils.java:7"$0$0$0$1$2$" *"
"StreamUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StreamUtils.java:9"$0$0$0$1$2$" *"
"StreamUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StreamUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StreamUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StreamUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StreamUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"StreamUtils.java:15"$0$0$0$1$3$" */"
"StreamUtils.java:16"$0$0$0$0$0$""
"StreamUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"StreamUtils.java:18"$0$0$0$0$0$""
"StreamUtils.java:19"$0$0$0$2$36$"import java.io.ByteArrayInputStream;"
"StreamUtils.java:20"$0$0$0$2$37$"import java.io.ByteArrayOutputStream;"
"StreamUtils.java:21"$0$0$0$2$33$"import java.io.FilterInputStream;"
"StreamUtils.java:22"$0$0$0$2$34$"import java.io.FilterOutputStream;"
"StreamUtils.java:23"$0$0$0$2$27$"import java.io.IOException;"
"StreamUtils.java:24"$0$0$0$2$27$"import java.io.InputStream;"
"StreamUtils.java:25"$0$0$0$2$33$"import java.io.InputStreamReader;"
"StreamUtils.java:26"$0$0$0$2$28$"import java.io.OutputStream;"
"StreamUtils.java:27"$0$0$0$2$34$"import java.io.OutputStreamWriter;"
"StreamUtils.java:28"$0$0$0$2$44$"import java.io.UnsupportedEncodingException;"
"StreamUtils.java:29"$0$0$0$2$22$"import java.io.Writer;"
"StreamUtils.java:30"$0$0$0$2$32$"import java.nio.charset.Charset;"
"StreamUtils.java:31"$0$0$0$0$0$""
"StreamUtils.java:32"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StreamUtils.java:33"$0$0$0$0$0$""
"StreamUtils.java:34"$0$0$0$1$3$"/**"
"StreamUtils.java:35"$0$0$0$15$86$" * Simple utility methods for dealing with streams. The copy methods of this class are"
"StreamUtils.java:36"$0$0$0$14$89$" * similar to those defined in {@link FileCopyUtils} except that all affected streams are"
"StreamUtils.java:37"$0$0$0$15$72$" * left open when done. All copy methods use a block size of 4096 bytes."
"StreamUtils.java:38"$0$0$0$1$2$" *"
"StreamUtils.java:39"$0$0$0$13$80$" * <p>Mainly for use within the framework, but also useful for application code."
"StreamUtils.java:40"$0$0$0$1$2$" *"
"StreamUtils.java:41"$0$0$0$4$26$" * @author Juergen Hoeller"
"StreamUtils.java:42"$0$0$0$4$23$" * @author Phillip Webb"
"StreamUtils.java:43"$0$0$0$4$23$" * @author Brian Clozel"
"StreamUtils.java:44"$0$0$0$3$15$" * @since 3.2.2"
"StreamUtils.java:45"$0$0$0$3$21$" * @see FileCopyUtils"
"StreamUtils.java:46"$0$0$0$1$3$" */"
"StreamUtils.java:47"$0$0$0$5$35$"public abstract class StreamUtils {"
"StreamUtils.java:48"$0$0$0$0$0$""
"StreamUtils.java:49"$0$0$0$1$4$"	/**"
"StreamUtils.java:50"$0$0$0$9$52$"	 * The default buffer size used when copying bytes."
"StreamUtils.java:51"$0$0$0$1$4$"	 */"
"StreamUtils.java:52"$0$0$0$7$44$"	public static final int BUFFER_SIZE = 4096;"
"StreamUtils.java:53"$0$0$0$0$0$""
"StreamUtils.java:54"$0$0$0$8$57$"	private static final byte[] EMPTY_CONTENT = new byte[0];"
"StreamUtils.java:55"$0$0$0$0$0$""
"StreamUtils.java:56"$0$0$0$0$0$""
"StreamUtils.java:57"$0$0$0$1$4$"	/**"
"StreamUtils.java:58"$0$0$0$13$69$"	 * Copy the contents of the given InputStream into a new byte array."
"StreamUtils.java:59"$0$0$0$7$40$"	 * <p>Leaves the stream open when done."
"StreamUtils.java:60"$0$0$0$14$68$"	 * @param in the stream to copy from (may be {@code null} or empty)"
"StreamUtils.java:61"$0$0$0$13$71$"	 * @return the new byte array that has been copied to (possibly empty)"
"StreamUtils.java:62"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"StreamUtils.java:63"$0$0$0$1$4$"	 */"
"StreamUtils.java:64"$0$0$0$9$84$"	public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {"
"StreamUtils.java:65"$0$0$0$5$19$"		if (in == null) {"
"StreamUtils.java:66"$0$0$0$3$22$"			return new byte[0];"
"StreamUtils.java:67"$0$0$0$1$3$"		}"
"StreamUtils.java:68"$0$0$0$0$0$""
"StreamUtils.java:69"$0$0$0$5$69$"		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE);"
"StreamUtils.java:70"$0$0$0$2$16$"		copy(in, out);"
"StreamUtils.java:71"$0$0$0$2$27$"		return out.toByteArray();"
"StreamUtils.java:72"$0$0$0$1$2$"	}"
"StreamUtils.java:73"$0$0$0$0$0$""
"StreamUtils.java:74"$0$0$0$1$4$"	/**"
"StreamUtils.java:75"$0$0$0$11$61$"	 * Copy the contents of the given InputStream into a String."
"StreamUtils.java:76"$0$0$0$7$40$"	 * <p>Leaves the stream open when done."
"StreamUtils.java:77"$0$0$0$14$73$"	 * @param in the InputStream to copy from (may be {@code null} or empty)"
"StreamUtils.java:78"$0$0$0$12$65$"	 * @param charset the {@link Charset} to use to decode the bytes"
"StreamUtils.java:79"$0$0$0$11$63$"	 * @return the String that has been copied to (possibly empty)"
"StreamUtils.java:80"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"StreamUtils.java:81"$0$0$0$1$4$"	 */"
"StreamUtils.java:82"$0$0$0$11$98$"	public static String copyToString(@Nullable InputStream in, Charset charset) throws IOException {"
"StreamUtils.java:83"$0$0$0$5$19$"		if (in == null) {"
"StreamUtils.java:84"$0$0$0$2$13$"			return """";"
"StreamUtils.java:85"$0$0$0$1$3$"		}"
"StreamUtils.java:86"$0$0$0$0$0$""
"StreamUtils.java:87"$0$0$0$5$42$"		StringBuilder out = new StringBuilder();"
"StreamUtils.java:88"$0$0$0$6$64$"		InputStreamReader reader = new InputStreamReader(in, charset);"
"StreamUtils.java:89"$0$0$0$5$40$"		char[] buffer = new char[BUFFER_SIZE];"
"StreamUtils.java:90"$0$0$0$4$21$"		int bytesRead = -1;"
"StreamUtils.java:91"$0$0$0$7$51$"		while ((bytesRead = reader.read(buffer)) != -1) {"
"StreamUtils.java:92"$0$0$0$3$36$"			out.append(buffer, 0, bytesRead);"
"StreamUtils.java:93"$0$0$0$1$3$"		}"
"StreamUtils.java:94"$0$0$0$2$24$"		return out.toString();"
"StreamUtils.java:95"$0$0$0$1$2$"	}"
"StreamUtils.java:96"$0$0$0$0$0$""
"StreamUtils.java:97"$0$0$0$1$4$"	/**"
"StreamUtils.java:98"$0$0$0$13$87$"	 * Copy the contents of the given {@link ByteArrayOutputStream} into a {@link String}."
"StreamUtils.java:99"$0$0$0$12$94$"	 * <p>This is a more effective equivalent of {@code new String(baos.toByteArray(), charset)}."
"StreamUtils.java:100"$0$0$0$14$74$"	 * <p>As long as the {@code charset} is already available at the point of"
"StreamUtils.java:101"$0$0$0$12$69$"	 * invocation, no exception is expected to be thrown by this method."
"StreamUtils.java:102"$0$0$0$12$76$"	 * @param baos the {@code ByteArrayOutputStream} to be copied into a String"
"StreamUtils.java:103"$0$0$0$12$65$"	 * @param charset the {@link Charset} to use to decode the bytes"
"StreamUtils.java:104"$0$0$0$11$63$"	 * @return the String that has been copied to (possibly empty)"
"StreamUtils.java:105"$0$0$0$3$16$"	 * @since 5.2.6"
"StreamUtils.java:106"$0$0$0$1$4$"	 */"
"StreamUtils.java:107"$0$0$0$8$81$"	public static String copyToString(ByteArrayOutputStream baos, Charset charset) {"
"StreamUtils.java:108"$0$0$0$4$61$"		Assert.notNull(baos, ""No ByteArrayOutputStream specified"");"
"StreamUtils.java:109"$0$0$0$4$50$"		Assert.notNull(charset, ""No Charset specified"");"
"StreamUtils.java:110"$0$0$0$2$7$"		try {"
"StreamUtils.java:111"$0$0$0$2$40$"			return baos.toString(charset.name());"
"StreamUtils.java:112"$0$0$0$1$3$"		}"
"StreamUtils.java:113"$0$0$0$4$43$"		catch (UnsupportedEncodingException ex) {"
"StreamUtils.java:114"$0$0$0$12$100$"			throw new RuntimeException(""Failed to copy contents of ByteArrayOutputStream into a String"", ex);"
"StreamUtils.java:115"$0$0$0$1$3$"		}"
"StreamUtils.java:116"$0$0$0$1$2$"	}"
"StreamUtils.java:117"$0$0$0$0$0$""
"StreamUtils.java:118"$0$0$0$1$4$"	/**"
"StreamUtils.java:119"$0$0$0$13$72$"	 * Copy the contents of the given byte array to the given OutputStream."
"StreamUtils.java:120"$0$0$0$7$40$"	 * <p>Leaves the stream open when done."
"StreamUtils.java:121"$0$0$0$9$41$"	 * @param in the byte array to copy from"
"StreamUtils.java:122"$0$0$0$8$42$"	 * @param out the OutputStream to copy to"
"StreamUtils.java:123"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"StreamUtils.java:124"$0$0$0$1$4$"	 */"
"StreamUtils.java:125"$0$0$0$10$74$"	public static void copy(byte[] in, OutputStream out) throws IOException {"
"StreamUtils.java:126"$0$0$0$6$54$"		Assert.notNull(in, ""No input byte array specified"");"
"StreamUtils.java:127"$0$0$0$4$51$"		Assert.notNull(out, ""No OutputStream specified"");"
"StreamUtils.java:128"$0$0$0$0$0$""
"StreamUtils.java:129"$0$0$0$1$16$"		out.write(in);"
"StreamUtils.java:130"$0$0$0$1$2$"	}"
"StreamUtils.java:131"$0$0$0$0$0$""
"StreamUtils.java:132"$0$0$0$1$4$"	/**"
"StreamUtils.java:133"$0$0$0$13$75$"	 * Copy the contents of the given String to the given output OutputStream."
"StreamUtils.java:134"$0$0$0$7$40$"	 * <p>Leaves the stream open when done."
"StreamUtils.java:135"$0$0$0$8$37$"	 * @param in the String to copy from"
"StreamUtils.java:136"$0$0$0$5$30$"	 * @param charset the Charset"
"StreamUtils.java:137"$0$0$0$8$42$"	 * @param out the OutputStream to copy to"
"StreamUtils.java:138"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"StreamUtils.java:139"$0$0$0$1$4$"	 */"
"StreamUtils.java:140"$0$0$0$12$91$"	public static void copy(String in, Charset charset, OutputStream out) throws IOException {"
"StreamUtils.java:141"$0$0$0$5$50$"		Assert.notNull(in, ""No input String specified"");"
"StreamUtils.java:142"$0$0$0$4$50$"		Assert.notNull(charset, ""No Charset specified"");"
"StreamUtils.java:143"$0$0$0$4$51$"		Assert.notNull(out, ""No OutputStream specified"");"
"StreamUtils.java:144"$0$0$0$0$0$""
"StreamUtils.java:145"$0$0$0$6$55$"		Writer writer = new OutputStreamWriter(out, charset);"
"StreamUtils.java:146"$0$0$0$1$19$"		writer.write(in);"
"StreamUtils.java:147"$0$0$0$1$17$"		writer.flush();"
"StreamUtils.java:148"$0$0$0$1$2$"	}"
"StreamUtils.java:149"$0$0$0$0$0$""
"StreamUtils.java:150"$0$0$0$1$4$"	/**"
"StreamUtils.java:151"$0$0$0$12$73$"	 * Copy the contents of the given InputStream to the given OutputStream."
"StreamUtils.java:152"$0$0$0$7$42$"	 * <p>Leaves both streams open when done."
"StreamUtils.java:153"$0$0$0$8$42$"	 * @param in the InputStream to copy from"
"StreamUtils.java:154"$0$0$0$8$42$"	 * @param out the OutputStream to copy to"
"StreamUtils.java:155"$0$0$0$7$38$"	 * @return the number of bytes copied"
"StreamUtils.java:156"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"StreamUtils.java:157"$0$0$0$1$4$"	 */"
"StreamUtils.java:158"$0$0$0$10$78$"	public static int copy(InputStream in, OutputStream out) throws IOException {"
"StreamUtils.java:159"$0$0$0$4$49$"		Assert.notNull(in, ""No InputStream specified"");"
"StreamUtils.java:160"$0$0$0$4$51$"		Assert.notNull(out, ""No OutputStream specified"");"
"StreamUtils.java:161"$0$0$0$0$0$""
"StreamUtils.java:162"$0$0$0$4$20$"		int byteCount = 0;"
"StreamUtils.java:163"$0$0$0$5$40$"		byte[] buffer = new byte[BUFFER_SIZE];"
"StreamUtils.java:164"$0$0$0$4$21$"		int bytesRead = -1;"
"StreamUtils.java:165"$0$0$0$7$47$"		while ((bytesRead = in.read(buffer)) != -1) {"
"StreamUtils.java:166"$0$0$0$3$35$"			out.write(buffer, 0, bytesRead);"
"StreamUtils.java:167"$0$0$0$3$26$"			byteCount += bytesRead;"
"StreamUtils.java:168"$0$0$0$1$3$"		}"
"StreamUtils.java:169"$0$0$0$1$14$"		out.flush();"
"StreamUtils.java:170"$0$0$0$2$19$"		return byteCount;"
"StreamUtils.java:171"$0$0$0$1$2$"	}"
"StreamUtils.java:172"$0$0$0$0$0$""
"StreamUtils.java:173"$0$0$0$1$4$"	/**"
"StreamUtils.java:174"$0$0$0$14$79$"	 * Copy a range of content of the given InputStream to the given OutputStream."
"StreamUtils.java:175"$0$0$0$13$80$"	 * <p>If the specified range exceeds the length of the InputStream, this copies"
"StreamUtils.java:176"$0$0$0$16$78$"	 * up to the end of the stream and returns the actual number of copied bytes."
"StreamUtils.java:177"$0$0$0$7$42$"	 * <p>Leaves both streams open when done."
"StreamUtils.java:178"$0$0$0$8$42$"	 * @param in the InputStream to copy from"
"StreamUtils.java:179"$0$0$0$8$42$"	 * @param out the OutputStream to copy to"
"StreamUtils.java:180"$0$0$0$9$51$"	 * @param start the position to start copying from"
"StreamUtils.java:181"$0$0$0$8$42$"	 * @param end the position to end copying"
"StreamUtils.java:182"$0$0$0$7$38$"	 * @return the number of bytes copied"
"StreamUtils.java:183"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"StreamUtils.java:184"$0$0$0$3$14$"	 * @since 4.3"
"StreamUtils.java:185"$0$0$0$1$4$"	 */"
"StreamUtils.java:186"$0$0$0$14$106$"	public static long copyRange(InputStream in, OutputStream out, long start, long end) throws IOException {"
"StreamUtils.java:187"$0$0$0$4$49$"		Assert.notNull(in, ""No InputStream specified"");"
"StreamUtils.java:188"$0$0$0$4$51$"		Assert.notNull(out, ""No OutputStream specified"");"
"StreamUtils.java:189"$0$0$0$0$0$""
"StreamUtils.java:190"$0$0$0$4$32$"		long skipped = in.skip(start);"
"StreamUtils.java:191"$0$0$0$5$24$"		if (skipped < start) {"
"StreamUtils.java:192"$0$0$0$18$93$"			throw new IOException(""Skipped only "" + skipped + "" bytes out of "" + start + "" required"");"
"StreamUtils.java:193"$0$0$0$1$3$"		}"
"StreamUtils.java:194"$0$0$0$0$0$""
"StreamUtils.java:195"$0$0$0$8$37$"		long bytesToCopy = end - start + 1;"
"StreamUtils.java:196"$0$0$0$7$81$"		byte[] buffer = new byte[(int) Math.min(StreamUtils.BUFFER_SIZE, bytesToCopy)];"
"StreamUtils.java:197"$0$0$0$5$27$"		while (bytesToCopy > 0) {"
"StreamUtils.java:198"$0$0$0$4$35$"			int bytesRead = in.read(buffer);"
"StreamUtils.java:199"$0$0$0$5$25$"			if (bytesRead == -1) {"
"StreamUtils.java:200"$0$0$0$1$10$"				break;"
"StreamUtils.java:201"$0$0$0$1$4$"			}"
"StreamUtils.java:202"$0$0$0$6$39$"			else if (bytesRead <= bytesToCopy) {"
"StreamUtils.java:203"$0$0$0$3$36$"				out.write(buffer, 0, bytesRead);"
"StreamUtils.java:204"$0$0$0$3$29$"				bytesToCopy -= bytesRead;"
"StreamUtils.java:205"$0$0$0$1$4$"			}"
"StreamUtils.java:206"$0$0$0$2$9$"			else {"
"StreamUtils.java:207"$0$0$0$4$44$"				out.write(buffer, 0, (int) bytesToCopy);"
"StreamUtils.java:208"$0$0$0$3$20$"				bytesToCopy = 0;"
"StreamUtils.java:209"$0$0$0$1$4$"			}"
"StreamUtils.java:210"$0$0$0$1$3$"		}"
"StreamUtils.java:211"$0$0$0$8$41$"		return (end - start + 1 - bytesToCopy);"
"StreamUtils.java:212"$0$0$0$1$2$"	}"
"StreamUtils.java:213"$0$0$0$0$0$""
"StreamUtils.java:214"$0$0$0$1$4$"	/**"
"StreamUtils.java:215"$0$0$0$9$57$"	 * Drain the remaining content of the given InputStream."
"StreamUtils.java:216"$0$0$0$7$45$"	 * <p>Leaves the InputStream open when done."
"StreamUtils.java:217"$0$0$0$7$38$"	 * @param in the InputStream to drain"
"StreamUtils.java:218"$0$0$0$7$36$"	 * @return the number of bytes read"
"StreamUtils.java:219"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"StreamUtils.java:220"$0$0$0$3$14$"	 * @since 4.3"
"StreamUtils.java:221"$0$0$0$1$4$"	 */"
"StreamUtils.java:222"$0$0$0$8$61$"	public static int drain(InputStream in) throws IOException {"
"StreamUtils.java:223"$0$0$0$4$49$"		Assert.notNull(in, ""No InputStream specified"");"
"StreamUtils.java:224"$0$0$0$5$40$"		byte[] buffer = new byte[BUFFER_SIZE];"
"StreamUtils.java:225"$0$0$0$4$21$"		int bytesRead = -1;"
"StreamUtils.java:226"$0$0$0$4$20$"		int byteCount = 0;"
"StreamUtils.java:227"$0$0$0$7$47$"		while ((bytesRead = in.read(buffer)) != -1) {"
"StreamUtils.java:228"$0$0$0$3$26$"			byteCount += bytesRead;"
"StreamUtils.java:229"$0$0$0$1$3$"		}"
"StreamUtils.java:230"$0$0$0$2$19$"		return byteCount;"
"StreamUtils.java:231"$0$0$0$1$2$"	}"
"StreamUtils.java:232"$0$0$0$0$0$""
"StreamUtils.java:233"$0$0$0$1$4$"	/**"
"StreamUtils.java:234"$0$0$0$7$50$"	 * Return an efficient empty {@link InputStream}."
"StreamUtils.java:235"$0$0$0$11$71$"	 * @return a {@link ByteArrayInputStream} based on an empty byte array"
"StreamUtils.java:236"$0$0$0$3$16$"	 * @since 4.2.2"
"StreamUtils.java:237"$0$0$0$1$4$"	 */"
"StreamUtils.java:238"$0$0$0$5$41$"	public static InputStream emptyInput() {"
"StreamUtils.java:239"$0$0$0$3$49$"		return new ByteArrayInputStream(EMPTY_CONTENT);"
"StreamUtils.java:240"$0$0$0$1$2$"	}"
"StreamUtils.java:241"$0$0$0$0$0$""
"StreamUtils.java:242"$0$0$0$1$4$"	/**"
"StreamUtils.java:243"$0$0$0$11$67$"	 * Return a variant of the given {@link InputStream} where calling"
"StreamUtils.java:244"$0$0$0$7$54$"	 * {@link InputStream#close() close()} has no effect."
"StreamUtils.java:245"$0$0$0$7$41$"	 * @param in the InputStream to decorate"
"StreamUtils.java:246"$0$0$0$12$68$"	 * @return a version of the InputStream that ignores calls to close"
"StreamUtils.java:247"$0$0$0$1$4$"	 */"
"StreamUtils.java:248"$0$0$0$6$55$"	public static InputStream nonClosing(InputStream in) {"
"StreamUtils.java:249"$0$0$0$4$49$"		Assert.notNull(in, ""No InputStream specified"");"
"StreamUtils.java:250"$0$0$0$3$39$"		return new NonClosingInputStream(in);"
"StreamUtils.java:251"$0$0$0$1$2$"	}"
"StreamUtils.java:252"$0$0$0$0$0$""
"StreamUtils.java:253"$0$0$0$1$4$"	/**"
"StreamUtils.java:254"$0$0$0$11$68$"	 * Return a variant of the given {@link OutputStream} where calling"
"StreamUtils.java:255"$0$0$0$7$55$"	 * {@link OutputStream#close() close()} has no effect."
"StreamUtils.java:256"$0$0$0$7$43$"	 * @param out the OutputStream to decorate"
"StreamUtils.java:257"$0$0$0$12$69$"	 * @return a version of the OutputStream that ignores calls to close"
"StreamUtils.java:258"$0$0$0$1$4$"	 */"
"StreamUtils.java:259"$0$0$0$6$58$"	public static OutputStream nonClosing(OutputStream out) {"
"StreamUtils.java:260"$0$0$0$4$51$"		Assert.notNull(out, ""No OutputStream specified"");"
"StreamUtils.java:261"$0$0$0$3$41$"		return new NonClosingOutputStream(out);"
"StreamUtils.java:262"$0$0$0$1$2$"	}"
"StreamUtils.java:263"$0$0$0$0$0$""
"StreamUtils.java:264"$0$0$0$7$71$"	private static class NonClosingInputStream extends FilterInputStream {"
"StreamUtils.java:265"$0$0$0$0$0$""
"StreamUtils.java:266"$0$0$0$4$48$"		public NonClosingInputStream(InputStream in) {"
"StreamUtils.java:267"$0$0$0$1$13$"			super(in);"
"StreamUtils.java:268"$0$0$0$1$3$"		}"
"StreamUtils.java:269"$0$0$0$0$0$""
"StreamUtils.java:270"$0$0$0$1$11$"		@Override"
"StreamUtils.java:271"$0$0$0$6$42$"		public void close() throws IOException {"
"StreamUtils.java:272"$0$0$0$1$3$"		}"
"StreamUtils.java:273"$0$0$0$1$2$"	}"
"StreamUtils.java:274"$0$0$0$0$0$""
"StreamUtils.java:275"$0$0$0$0$0$""
"StreamUtils.java:276"$0$0$0$7$73$"	private static class NonClosingOutputStream extends FilterOutputStream {"
"StreamUtils.java:277"$0$0$0$0$0$""
"StreamUtils.java:278"$0$0$0$4$51$"		public NonClosingOutputStream(OutputStream out) {"
"StreamUtils.java:279"$0$0$0$1$14$"			super(out);"
"StreamUtils.java:280"$0$0$0$1$3$"		}"
"StreamUtils.java:281"$0$0$0$0$0$""
"StreamUtils.java:282"$0$0$0$1$11$"		@Override"
"StreamUtils.java:283"$0$0$0$11$68$"		public void write(byte[] b, int off, int let) throws IOException {"
"StreamUtils.java:284"$0$0$1$11$65$"			// It is critical that we override this method for performance"
"StreamUtils.java:285"$0$0$0$3$31$"			this.out.write(b, off, let);"
"StreamUtils.java:286"$0$0$0$1$3$"		}"
"StreamUtils.java:287"$0$0$0$0$0$""
"StreamUtils.java:288"$0$0$0$1$11$"		@Override"
"StreamUtils.java:289"$0$0$0$6$42$"		public void close() throws IOException {"
"StreamUtils.java:290"$0$0$0$1$3$"		}"
"StreamUtils.java:291"$0$0$0$1$2$"	}"
"StreamUtils.java:292"$0$0$0$0$0$""
"StreamUtils.java:293"$0$0$0$1$1$"}"
"TypeUtils.java:1"$0$0$0$1$2$"/*"
"TypeUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"TypeUtils.java:3"$0$0$0$1$2$" *"
"TypeUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"TypeUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"TypeUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"TypeUtils.java:7"$0$0$0$1$2$" *"
"TypeUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"TypeUtils.java:9"$0$0$0$1$2$" *"
"TypeUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"TypeUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"TypeUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"TypeUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"TypeUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"TypeUtils.java:15"$0$0$0$1$3$" */"
"TypeUtils.java:16"$0$0$0$0$0$""
"TypeUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"TypeUtils.java:18"$0$0$0$0$0$""
"TypeUtils.java:19"$0$0$0$2$42$"import java.lang.reflect.GenericArrayType;"
"TypeUtils.java:20"$0$0$0$2$43$"import java.lang.reflect.ParameterizedType;"
"TypeUtils.java:21"$0$0$0$2$30$"import java.lang.reflect.Type;"
"TypeUtils.java:22"$0$0$0$2$38$"import java.lang.reflect.WildcardType;"
"TypeUtils.java:23"$0$0$0$0$0$""
"TypeUtils.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"TypeUtils.java:25"$0$0$0$0$0$""
"TypeUtils.java:26"$0$0$0$1$3$"/**"
"TypeUtils.java:27"$0$0$0$10$55$" * Utility to work with Java 5 generic type parameters."
"TypeUtils.java:28"$0$0$0$8$48$" * Mainly for internal use within the framework."
"TypeUtils.java:29"$0$0$0$1$2$" *"
"TypeUtils.java:30"$0$0$0$4$26$" * @author Ramnivas Laddad"
"TypeUtils.java:31"$0$0$0$4$26$" * @author Juergen Hoeller"
"TypeUtils.java:32"$0$0$0$4$22$" * @author Chris Beams"
"TypeUtils.java:33"$0$0$0$3$15$" * @since 2.0.7"
"TypeUtils.java:34"$0$0$0$1$3$" */"
"TypeUtils.java:35"$0$0$0$5$33$"public abstract class TypeUtils {"
"TypeUtils.java:36"$0$0$0$0$0$""
"TypeUtils.java:37"$0$0$0$1$4$"	/**"
"TypeUtils.java:38"$0$0$0$14$75$"	 * Check if the right-hand side type may be assigned to the left-hand side"
"TypeUtils.java:39"$0$0$0$7$43$"	 * type following the Java generics rules."
"TypeUtils.java:40"$1$0$0$6$34$"	 * @param lhsType the target type"
"TypeUtils.java:41"$1$0$0$14$76$"	 * @param rhsType the value type that should be assigned to the target type"
"TypeUtils.java:42"$0$0$0$9$44$"	 * @return true if rhs is assignable to lhs"
"TypeUtils.java:43"$0$0$0$1$4$"	 */"
"TypeUtils.java:44"$0$0$0$8$65$"	public static boolean isAssignable(Type lhsType, Type rhsType) {"
"TypeUtils.java:45"$0$0$0$8$66$"		Assert.notNull(lhsType, ""Left-hand side type must not be null"");"
"TypeUtils.java:46"$0$0$0$8$67$"		Assert.notNull(rhsType, ""Right-hand side type must not be null"");"
"TypeUtils.java:47"$0$0$0$0$0$""
"TypeUtils.java:48"$0$0$1$11$63$"		// all types are assignable to themselves and to class Object"
"TypeUtils.java:49"$0$0$0$7$59$"		if (lhsType.equals(rhsType) || Object.class == lhsType) {"
"TypeUtils.java:50"$0$0$0$2$15$"			return true;"
"TypeUtils.java:51"$0$0$0$1$3$"		}"
"TypeUtils.java:52"$0$0$0$0$0$""
"TypeUtils.java:53"$0$0$0$5$33$"		if (lhsType instanceof Class) {"
"TypeUtils.java:54"$0$0$0$5$42$"			Class<?> lhsClass = (Class<?>) lhsType;"
"TypeUtils.java:55"$0$0$0$0$0$""
"TypeUtils.java:56"$0$0$1$5$32$"			// just comparing two classes"
"TypeUtils.java:57"$0$0$0$5$34$"			if (rhsType instanceof Class) {"
"TypeUtils.java:58"$0$0$0$4$65$"				return ClassUtils.isAssignable(lhsClass, (Class<?>) rhsType);"
"TypeUtils.java:59"$0$0$0$1$4$"			}"
"TypeUtils.java:60"$0$0$0$0$0$""
"TypeUtils.java:61"$0$0$0$5$46$"			if (rhsType instanceof ParameterizedType) {"
"TypeUtils.java:62"$1$0$0$5$61$"				Type rhsRaw = ((ParameterizedType) rhsType).getRawType();"
"TypeUtils.java:63"$0$0$0$0$0$""
"TypeUtils.java:64"$0$0$1$12$70$"				// a parameterized type is always assignable to its raw class type"
"TypeUtils.java:65"$0$0$0$5$34$"				if (rhsRaw instanceof Class) {"
"TypeUtils.java:66"$0$0$0$4$65$"					return ClassUtils.isAssignable(lhsClass, (Class<?>) rhsRaw);"
"TypeUtils.java:67"$0$0$0$1$5$"				}"
"TypeUtils.java:68"$0$0$0$1$4$"			}"
"TypeUtils.java:69"$0$0$0$8$72$"			else if (lhsClass.isArray() && rhsType instanceof GenericArrayType) {"
"TypeUtils.java:70"$1$0$0$5$79$"				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();"
"TypeUtils.java:71"$0$0$0$0$0$""
"TypeUtils.java:72"$1$0$0$3$67$"				return isAssignable(lhsClass.getComponentType(), rhsComponent);"
"TypeUtils.java:73"$0$0$0$1$4$"			}"
"TypeUtils.java:74"$0$0$0$1$3$"		}"
"TypeUtils.java:75"$0$0$0$0$0$""
"TypeUtils.java:76"$0$0$1$13$89$"		// parameterized types are only assignable to other parameterized types and class types"
"TypeUtils.java:77"$0$0$0$5$45$"		if (lhsType instanceof ParameterizedType) {"
"TypeUtils.java:78"$0$0$0$5$34$"			if (rhsType instanceof Class) {"
"TypeUtils.java:79"$1$0$0$5$61$"				Type lhsRaw = ((ParameterizedType) lhsType).getRawType();"
"TypeUtils.java:80"$0$0$0$0$0$""
"TypeUtils.java:81"$0$0$0$5$34$"				if (lhsRaw instanceof Class) {"
"TypeUtils.java:82"$0$0$0$5$75$"					return ClassUtils.isAssignable((Class<?>) lhsRaw, (Class<?>) rhsType);"
"TypeUtils.java:83"$0$0$0$1$5$"				}"
"TypeUtils.java:84"$0$0$0$1$4$"			}"
"TypeUtils.java:85"$0$0$0$6$51$"			else if (rhsType instanceof ParameterizedType) {"
"TypeUtils.java:86"$0$0$0$5$82$"				return isAssignable((ParameterizedType) lhsType, (ParameterizedType) rhsType);"
"TypeUtils.java:87"$0$0$0$1$4$"			}"
"TypeUtils.java:88"$0$0$0$1$3$"		}"
"TypeUtils.java:89"$0$0$0$0$0$""
"TypeUtils.java:90"$0$0$0$5$44$"		if (lhsType instanceof GenericArrayType) {"
"TypeUtils.java:91"$1$0$0$5$78$"			Type lhsComponent = ((GenericArrayType) lhsType).getGenericComponentType();"
"TypeUtils.java:92"$0$0$0$0$0$""
"TypeUtils.java:93"$0$0$0$5$34$"			if (rhsType instanceof Class) {"
"TypeUtils.java:94"$0$0$0$5$43$"				Class<?> rhsClass = (Class<?>) rhsType;"
"TypeUtils.java:95"$0$0$0$0$0$""
"TypeUtils.java:96"$0$0$0$3$29$"				if (rhsClass.isArray()) {"
"TypeUtils.java:97"$1$0$0$3$68$"					return isAssignable(lhsComponent, rhsClass.getComponentType());"
"TypeUtils.java:98"$0$0$0$1$5$"				}"
"TypeUtils.java:99"$0$0$0$1$4$"			}"
"TypeUtils.java:100"$0$0$0$6$50$"			else if (rhsType instanceof GenericArrayType) {"
"TypeUtils.java:101"$1$0$0$5$79$"				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();"
"TypeUtils.java:102"$0$0$0$0$0$""
"TypeUtils.java:103"$0$0$0$3$52$"				return isAssignable(lhsComponent, rhsComponent);"
"TypeUtils.java:104"$0$0$0$1$4$"			}"
"TypeUtils.java:105"$0$0$0$1$3$"		}"
"TypeUtils.java:106"$0$0$0$0$0$""
"TypeUtils.java:107"$0$0$0$5$40$"		if (lhsType instanceof WildcardType) {"
"TypeUtils.java:108"$0$0$0$4$56$"			return isAssignable((WildcardType) lhsType, rhsType);"
"TypeUtils.java:109"$0$0$0$1$3$"		}"
"TypeUtils.java:110"$0$0$0$0$0$""
"TypeUtils.java:111"$0$0$0$2$15$"		return false;"
"TypeUtils.java:112"$0$0$0$1$2$"	}"
"TypeUtils.java:113"$0$0$0$0$0$""
"TypeUtils.java:114"$0$0$0$8$92$"	private static boolean isAssignable(ParameterizedType lhsType, ParameterizedType rhsType) {"
"TypeUtils.java:115"$0$0$0$3$32$"		if (lhsType.equals(rhsType)) {"
"TypeUtils.java:116"$0$0$0$2$15$"			return true;"
"TypeUtils.java:117"$0$0$0$1$3$"		}"
"TypeUtils.java:118"$0$0$0$0$0$""
"TypeUtils.java:119"$1$0$0$4$61$"		Type[] lhsTypeArguments = lhsType.getActualTypeArguments();"
"TypeUtils.java:120"$1$0$0$4$61$"		Type[] rhsTypeArguments = rhsType.getActualTypeArguments();"
"TypeUtils.java:121"$0$0$0$0$0$""
"TypeUtils.java:122"$0$0$0$5$59$"		if (lhsTypeArguments.length != rhsTypeArguments.length) {"
"TypeUtils.java:123"$0$0$0$2$16$"			return false;"
"TypeUtils.java:124"$0$0$0$1$3$"		}"
"TypeUtils.java:125"$0$0$0$0$0$""
"TypeUtils.java:126"$0$0$0$13$66$"		for (int size = lhsTypeArguments.length, i = 0; i < size; ++i) {"
"TypeUtils.java:127"$0$0$0$4$37$"			Type lhsArg = lhsTypeArguments[i];"
"TypeUtils.java:128"$0$0$0$4$37$"			Type rhsArg = rhsTypeArguments[i];"
"TypeUtils.java:129"$0$0$0$0$0$""
"TypeUtils.java:130"$0$0$0$3$32$"			if (!lhsArg.equals(rhsArg) &&"
"TypeUtils.java:131"$0$0$0$8$88$"					!(lhsArg instanceof WildcardType && isAssignable((WildcardType) lhsArg, rhsArg))) {"
"TypeUtils.java:132"$0$0$0$2$17$"				return false;"
"TypeUtils.java:133"$0$0$0$1$4$"			}"
"TypeUtils.java:134"$0$0$0$1$3$"		}"
"TypeUtils.java:135"$0$0$0$0$0$""
"TypeUtils.java:136"$0$0$0$2$14$"		return true;"
"TypeUtils.java:137"$0$0$0$1$2$"	}"
"TypeUtils.java:138"$0$0$0$0$0$""
"TypeUtils.java:139"$0$0$0$8$74$"	private static boolean isAssignable(WildcardType lhsType, Type rhsType) {"
"TypeUtils.java:140"$1$0$0$4$49$"		Type[] lUpperBounds = lhsType.getUpperBounds();"
"TypeUtils.java:141"$0$0$0$0$0$""
"TypeUtils.java:142"$0$0$1$10$58$"		// supply the implicit upper bound if none are specified"
"TypeUtils.java:143"$0$0$0$5$33$"		if (lUpperBounds.length == 0) {"
"TypeUtils.java:144"$0$0$0$7$46$"			lUpperBounds = new Type[] { Object.class };"
"TypeUtils.java:145"$0$0$0$1$3$"		}"
"TypeUtils.java:146"$0$0$0$0$0$""
"TypeUtils.java:147"$1$0$0$4$49$"		Type[] lLowerBounds = lhsType.getLowerBounds();"
"TypeUtils.java:148"$0$0$0$0$0$""
"TypeUtils.java:149"$0$0$1$10$58$"		// supply the implicit lower bound if none are specified"
"TypeUtils.java:150"$0$0$0$5$33$"		if (lLowerBounds.length == 0) {"
"TypeUtils.java:151"$0$0$0$7$38$"			lLowerBounds = new Type[] { null };"
"TypeUtils.java:152"$0$0$0$1$3$"		}"
"TypeUtils.java:153"$0$0$0$0$0$""
"TypeUtils.java:154"$0$0$0$5$40$"		if (rhsType instanceof WildcardType) {"
"TypeUtils.java:155"$0$0$1$13$68$"			// both the upper and lower bounds of the right-hand side must be"
"TypeUtils.java:156"$0$0$1$12$68$"			// completely enclosed in the upper and lower bounds of the left-"
"TypeUtils.java:157"$0$0$1$3$16$"			// hand side."
"TypeUtils.java:158"$0$0$0$5$51$"			WildcardType rhsWcType = (WildcardType) rhsType;"
"TypeUtils.java:159"$1$0$0$4$52$"			Type[] rUpperBounds = rhsWcType.getUpperBounds();"
"TypeUtils.java:160"$0$0$0$0$0$""
"TypeUtils.java:161"$0$0$0$5$34$"			if (rUpperBounds.length == 0) {"
"TypeUtils.java:162"$0$0$0$7$47$"				rUpperBounds = new Type[] { Object.class };"
"TypeUtils.java:163"$0$0$0$1$4$"			}"
"TypeUtils.java:164"$0$0$0$0$0$""
"TypeUtils.java:165"$1$0$0$4$52$"			Type[] rLowerBounds = rhsWcType.getLowerBounds();"
"TypeUtils.java:166"$0$0$0$0$0$""
"TypeUtils.java:167"$0$0$0$5$34$"			if (rLowerBounds.length == 0) {"
"TypeUtils.java:168"$0$0$0$7$39$"				rLowerBounds = new Type[] { null };"
"TypeUtils.java:169"$0$0$0$1$4$"			}"
"TypeUtils.java:170"$0$0$0$0$0$""
"TypeUtils.java:171"$0$0$0$6$37$"			for (Type lBound : lUpperBounds) {"
"TypeUtils.java:172"$0$0$0$6$38$"				for (Type rBound : rUpperBounds) {"
"TypeUtils.java:173"$0$0$0$4$46$"					if (!isAssignableBound(lBound, rBound)) {"
"TypeUtils.java:174"$0$0$0$2$19$"						return false;"
"TypeUtils.java:175"$0$0$0$1$6$"					}"
"TypeUtils.java:176"$0$0$0$1$5$"				}"
"TypeUtils.java:177"$0$0$0$0$0$""
"TypeUtils.java:178"$0$0$0$6$38$"				for (Type rBound : rLowerBounds) {"
"TypeUtils.java:179"$0$0$0$4$46$"					if (!isAssignableBound(lBound, rBound)) {"
"TypeUtils.java:180"$0$0$0$2$19$"						return false;"
"TypeUtils.java:181"$0$0$0$1$6$"					}"
"TypeUtils.java:182"$0$0$0$1$5$"				}"
"TypeUtils.java:183"$0$0$0$1$4$"			}"
"TypeUtils.java:184"$0$0$0$0$0$""
"TypeUtils.java:185"$0$0$0$6$37$"			for (Type lBound : lLowerBounds) {"
"TypeUtils.java:186"$0$0$0$6$38$"				for (Type rBound : rUpperBounds) {"
"TypeUtils.java:187"$0$0$0$4$46$"					if (!isAssignableBound(rBound, lBound)) {"
"TypeUtils.java:188"$0$0$0$2$19$"						return false;"
"TypeUtils.java:189"$0$0$0$1$6$"					}"
"TypeUtils.java:190"$0$0$0$1$5$"				}"
"TypeUtils.java:191"$0$0$0$0$0$""
"TypeUtils.java:192"$0$0$0$6$38$"				for (Type rBound : rLowerBounds) {"
"TypeUtils.java:193"$0$0$0$4$46$"					if (!isAssignableBound(rBound, lBound)) {"
"TypeUtils.java:194"$0$0$0$2$19$"						return false;"
"TypeUtils.java:195"$0$0$0$1$6$"					}"
"TypeUtils.java:196"$0$0$0$1$5$"				}"
"TypeUtils.java:197"$0$0$0$1$4$"			}"
"TypeUtils.java:198"$0$0$0$1$3$"		}"
"TypeUtils.java:199"$0$0$0$2$8$"		else {"
"TypeUtils.java:200"$0$0$0$6$37$"			for (Type lBound : lUpperBounds) {"
"TypeUtils.java:201"$0$0$0$4$46$"				if (!isAssignableBound(lBound, rhsType)) {"
"TypeUtils.java:202"$0$0$0$2$18$"					return false;"
"TypeUtils.java:203"$0$0$0$1$5$"				}"
"TypeUtils.java:204"$0$0$0$1$4$"			}"
"TypeUtils.java:205"$0$0$0$0$0$""
"TypeUtils.java:206"$0$0$0$6$37$"			for (Type lBound : lLowerBounds) {"
"TypeUtils.java:207"$0$0$0$4$46$"				if (!isAssignableBound(rhsType, lBound)) {"
"TypeUtils.java:208"$0$0$0$2$18$"					return false;"
"TypeUtils.java:209"$0$0$0$1$5$"				}"
"TypeUtils.java:210"$0$0$0$1$4$"			}"
"TypeUtils.java:211"$0$0$0$1$3$"		}"
"TypeUtils.java:212"$0$0$0$0$0$""
"TypeUtils.java:213"$0$0$0$2$14$"		return true;"
"TypeUtils.java:214"$0$0$0$1$2$"	}"
"TypeUtils.java:215"$0$0$0$0$0$""
"TypeUtils.java:216"$0$0$0$10$90$"	public static boolean isAssignableBound(@Nullable Type lhsType, @Nullable Type rhsType) {"
"TypeUtils.java:217"$0$0$0$5$24$"		if (rhsType == null) {"
"TypeUtils.java:218"$0$0$0$2$15$"			return true;"
"TypeUtils.java:219"$0$0$0$1$3$"		}"
"TypeUtils.java:220"$0$0$0$5$24$"		if (lhsType == null) {"
"TypeUtils.java:221"$0$0$0$2$16$"			return false;"
"TypeUtils.java:222"$0$0$0$1$3$"		}"
"TypeUtils.java:223"$0$0$0$3$40$"		return isAssignable(lhsType, rhsType);"
"TypeUtils.java:224"$0$0$0$1$2$"	}"
"TypeUtils.java:225"$0$0$0$0$0$""
"TypeUtils.java:226"$0$0$0$1$1$"}"
"SimpleAsyncTaskExecutor.java:1"$0$0$0$1$2$"/*"
"SimpleAsyncTaskExecutor.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"SimpleAsyncTaskExecutor.java:3"$0$0$0$1$2$" *"
"SimpleAsyncTaskExecutor.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SimpleAsyncTaskExecutor.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SimpleAsyncTaskExecutor.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SimpleAsyncTaskExecutor.java:7"$0$0$0$1$2$" *"
"SimpleAsyncTaskExecutor.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SimpleAsyncTaskExecutor.java:9"$0$0$0$1$2$" *"
"SimpleAsyncTaskExecutor.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SimpleAsyncTaskExecutor.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SimpleAsyncTaskExecutor.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SimpleAsyncTaskExecutor.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SimpleAsyncTaskExecutor.java:14"$0$0$0$5$33$" * limitations under the License."
"SimpleAsyncTaskExecutor.java:15"$0$0$0$1$3$" */"
"SimpleAsyncTaskExecutor.java:16"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:17"$0$0$0$2$38$"package org.springframework.core.task;"
"SimpleAsyncTaskExecutor.java:18"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"SimpleAsyncTaskExecutor.java:20"$0$0$0$2$37$"import java.util.concurrent.Callable;"
"SimpleAsyncTaskExecutor.java:21"$0$0$0$2$35$"import java.util.concurrent.Future;"
"SimpleAsyncTaskExecutor.java:22"$0$0$0$2$39$"import java.util.concurrent.FutureTask;"
"SimpleAsyncTaskExecutor.java:23"$0$0$0$2$42$"import java.util.concurrent.ThreadFactory;"
"SimpleAsyncTaskExecutor.java:24"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SimpleAsyncTaskExecutor.java:26"$0$0$0$2$39$"import org.springframework.util.Assert;"
"SimpleAsyncTaskExecutor.java:27"$0$0$0$2$59$"import org.springframework.util.ConcurrencyThrottleSupport;"
"SimpleAsyncTaskExecutor.java:28"$0$0$0$2$58$"import org.springframework.util.CustomizableThreadCreator;"
"SimpleAsyncTaskExecutor.java:29"$0$0$0$2$60$"import org.springframework.util.concurrent.ListenableFuture;"
"SimpleAsyncTaskExecutor.java:30"$0$0$0$2$64$"import org.springframework.util.concurrent.ListenableFutureTask;"
"SimpleAsyncTaskExecutor.java:31"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:32"$0$0$0$1$3$"/**"
"SimpleAsyncTaskExecutor.java:33"$0$0$0$13$80$" * {@link TaskExecutor} implementation that fires up a new Thread for each task,"
"SimpleAsyncTaskExecutor.java:34"$0$0$0$4$31$" * executing it asynchronously."
"SimpleAsyncTaskExecutor.java:35"$0$0$0$1$2$" *"
"SimpleAsyncTaskExecutor.java:36"$0$0$0$8$73$" * <p>Supports limiting concurrent threads through the ""concurrencyLimit"""
"SimpleAsyncTaskExecutor.java:37"$0$0$0$12$76$" * bean property. By default, the number of concurrent threads is unlimited."
"SimpleAsyncTaskExecutor.java:38"$0$0$0$1$2$" *"
"SimpleAsyncTaskExecutor.java:39"$0$0$0$10$73$" * <p><b>NOTE: This implementation does not reuse threads!</b> Consider a"
"SimpleAsyncTaskExecutor.java:40"$0$0$0$8$72$" * thread-pooling TaskExecutor implementation instead, in particular for"
"SimpleAsyncTaskExecutor.java:41"$0$0$0$8$49$" * executing a large number of short-lived tasks."
"SimpleAsyncTaskExecutor.java:42"$0$0$0$1$2$" *"
"SimpleAsyncTaskExecutor.java:43"$0$0$0$4$26$" * @author Juergen Hoeller"
"SimpleAsyncTaskExecutor.java:44"$0$0$0$3$13$" * @since 2.0"
"SimpleAsyncTaskExecutor.java:45"$0$0$0$3$28$" * @see #setConcurrencyLimit"
"SimpleAsyncTaskExecutor.java:46"$0$0$0$3$24$" * @see SyncTaskExecutor"
"SimpleAsyncTaskExecutor.java:47"$0$0$0$3$72$" * @see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
"SimpleAsyncTaskExecutor.java:48"$0$0$0$3$70$" * @see org.springframework.scheduling.commonj.WorkManagerTaskExecutor"
"SimpleAsyncTaskExecutor.java:49"$0$0$0$1$3$" */"
"SimpleAsyncTaskExecutor.java:50"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"SimpleAsyncTaskExecutor.java:51"$0$0$0$5$70$"public class SimpleAsyncTaskExecutor extends CustomizableThreadCreator"
"SimpleAsyncTaskExecutor.java:52"$0$0$0$4$56$"		implements AsyncListenableTaskExecutor, Serializable {"
"SimpleAsyncTaskExecutor.java:53"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:54"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:55"$0$0$0$12$85$"	 * Permit any number of concurrent invocations: that is, don't throttle concurrency."
"SimpleAsyncTaskExecutor.java:56"$0$0$0$3$57$"	 * @see ConcurrencyThrottleSupport#UNBOUNDED_CONCURRENCY"
"SimpleAsyncTaskExecutor.java:57"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:58"$0$0$0$7$98$"	public static final int UNBOUNDED_CONCURRENCY = ConcurrencyThrottleSupport.UNBOUNDED_CONCURRENCY;"
"SimpleAsyncTaskExecutor.java:59"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:60"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:61"$0$0$0$11$78$"	 * Switch concurrency 'off': that is, don't allow any concurrent invocations."
"SimpleAsyncTaskExecutor.java:62"$0$0$0$3$50$"	 * @see ConcurrencyThrottleSupport#NO_CONCURRENCY"
"SimpleAsyncTaskExecutor.java:63"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:64"$0$0$0$7$84$"	public static final int NO_CONCURRENCY = ConcurrencyThrottleSupport.NO_CONCURRENCY;"
"SimpleAsyncTaskExecutor.java:65"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:66"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:67"$0$0$0$9$60$"	/** Internal concurrency throttle used by this executor. */"
"SimpleAsyncTaskExecutor.java:68"$0$0$0$7$97$"	private final ConcurrencyThrottleAdapter concurrencyThrottle = new ConcurrencyThrottleAdapter();"
"SimpleAsyncTaskExecutor.java:69"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:70"$0$0$0$1$10$"	@Nullable"
"SimpleAsyncTaskExecutor.java:71"$0$0$0$3$37$"	private ThreadFactory threadFactory;"
"SimpleAsyncTaskExecutor.java:72"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:73"$0$0$0$1$10$"	@Nullable"
"SimpleAsyncTaskExecutor.java:74"$0$0$0$3$37$"	private TaskDecorator taskDecorator;"
"SimpleAsyncTaskExecutor.java:75"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:76"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:77"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:78"$0$0$0$10$73$"	 * Create a new SimpleAsyncTaskExecutor with default thread name prefix."
"SimpleAsyncTaskExecutor.java:79"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:80"$0$0$0$3$35$"	public SimpleAsyncTaskExecutor() {"
"SimpleAsyncTaskExecutor.java:81"$0$0$0$1$10$"		super();"
"SimpleAsyncTaskExecutor.java:82"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:83"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:84"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:85"$0$0$0$11$75$"	 * Create a new SimpleAsyncTaskExecutor with the given thread name prefix."
"SimpleAsyncTaskExecutor.java:86"$0$0$0$14$84$"	 * @param threadNamePrefix the prefix to use for the names of newly created threads"
"SimpleAsyncTaskExecutor.java:87"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:88"$0$0$0$4$58$"	public SimpleAsyncTaskExecutor(String threadNamePrefix) {"
"SimpleAsyncTaskExecutor.java:89"$0$0$0$1$26$"		super(threadNamePrefix);"
"SimpleAsyncTaskExecutor.java:90"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:91"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:92"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:93"$0$0$0$11$80$"	 * Create a new SimpleAsyncTaskExecutor with the given external thread factory."
"SimpleAsyncTaskExecutor.java:94"$0$0$0$11$68$"	 * @param threadFactory the factory to use for creating new Threads"
"SimpleAsyncTaskExecutor.java:95"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:96"$0$0$0$4$62$"	public SimpleAsyncTaskExecutor(ThreadFactory threadFactory) {"
"SimpleAsyncTaskExecutor.java:97"$0$0$0$3$37$"		this.threadFactory = threadFactory;"
"SimpleAsyncTaskExecutor.java:98"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:99"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:100"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:101"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:102"$0$0$0$11$64$"	 * Specify an external factory to use for creating new Threads,"
"SimpleAsyncTaskExecutor.java:103"$0$0$0$11$64$"	 * instead of relying on the local properties of this executor."
"SimpleAsyncTaskExecutor.java:104"$0$0$0$13$84$"	 * <p>You may specify an inner ThreadFactory bean or also a ThreadFactory reference"
"SimpleAsyncTaskExecutor.java:105"$0$0$0$15$78$"	 * obtained from JNDI (on a Java EE 6 server) or some other lookup mechanism."
"SimpleAsyncTaskExecutor.java:106"$0$0$0$3$29$"	 * @see #setThreadNamePrefix"
"SimpleAsyncTaskExecutor.java:107"$0$0$0$3$27$"	 * @see #setThreadPriority"
"SimpleAsyncTaskExecutor.java:108"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:109"$0$0$0$6$70$"	public void setThreadFactory(@Nullable ThreadFactory threadFactory) {"
"SimpleAsyncTaskExecutor.java:110"$0$0$0$3$37$"		this.threadFactory = threadFactory;"
"SimpleAsyncTaskExecutor.java:111"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:112"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:113"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:114"$0$0$0$13$72$"	 * Return the external factory to use for creating new Threads, if any."
"SimpleAsyncTaskExecutor.java:115"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:116"$0$0$0$1$10$"	@Nullable"
"SimpleAsyncTaskExecutor.java:117"$1$0$0$5$48$"	public final ThreadFactory getThreadFactory() {"
"SimpleAsyncTaskExecutor.java:118"$0$0$0$2$28$"		return this.threadFactory;"
"SimpleAsyncTaskExecutor.java:119"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:120"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:121"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:122"$0$0$0$13$80$"	 * Specify a custom {@link TaskDecorator} to be applied to any {@link Runnable}"
"SimpleAsyncTaskExecutor.java:123"$0$0$0$5$25$"	 * about to be executed."
"SimpleAsyncTaskExecutor.java:124"$0$0$0$13$73$"	 * <p>Note that such a decorator is not necessarily being applied to the"
"SimpleAsyncTaskExecutor.java:125"$0$0$0$10$76$"	 * user-supplied {@code Runnable}/{@code Callable} but rather to the actual"
"SimpleAsyncTaskExecutor.java:126"$0$0$0$12$78$"	 * execution callback (which may be a wrapper around the user-supplied task)."
"SimpleAsyncTaskExecutor.java:127"$0$0$0$14$78$"	 * <p>The primary use case is to set some execution context around the task's"
"SimpleAsyncTaskExecutor.java:128"$0$0$0$10$76$"	 * invocation, or to provide some monitoring/statistics for task execution."
"SimpleAsyncTaskExecutor.java:129"$0$0$0$3$14$"	 * @since 4.3"
"SimpleAsyncTaskExecutor.java:130"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:131"$0$0$0$6$66$"	public final void setTaskDecorator(TaskDecorator taskDecorator) {"
"SimpleAsyncTaskExecutor.java:132"$0$0$0$3$37$"		this.taskDecorator = taskDecorator;"
"SimpleAsyncTaskExecutor.java:133"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:134"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:135"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:136"$0$0$0$9$56$"	 * Set the maximum number of parallel accesses allowed."
"SimpleAsyncTaskExecutor.java:137"$0$0$0$8$45$"	 * -1 indicates no concurrency limit at all."
"SimpleAsyncTaskExecutor.java:138"$0$0$0$10$58$"	 * <p>In principle, this limit can be changed at runtime,"
"SimpleAsyncTaskExecutor.java:139"$0$0$0$11$63$"	 * although it is generally designed as a config time setting."
"SimpleAsyncTaskExecutor.java:140"$0$0$0$13$69$"	 * NOTE: Do not switch between -1 and any concrete limit at runtime,"
"SimpleAsyncTaskExecutor.java:141"$0$0$0$11$65$"	 * as this will lead to inconsistent concurrency counts: A limit"
"SimpleAsyncTaskExecutor.java:142"$0$0$0$9$64$"	 * of -1 effectively turns off concurrency counting completely."
"SimpleAsyncTaskExecutor.java:143"$0$0$0$3$31$"	 * @see #UNBOUNDED_CONCURRENCY"
"SimpleAsyncTaskExecutor.java:144"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:145"$0$0$0$5$56$"	public void setConcurrencyLimit(int concurrencyLimit) {"
"SimpleAsyncTaskExecutor.java:146"$0$0$0$1$65$"		this.concurrencyThrottle.setConcurrencyLimit(concurrencyLimit);"
"SimpleAsyncTaskExecutor.java:147"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:148"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:149"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:150"$0$0$0$9$59$"	 * Return the maximum number of parallel accesses allowed."
"SimpleAsyncTaskExecutor.java:151"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:152"$1$0$0$5$41$"	public final int getConcurrencyLimit() {"
"SimpleAsyncTaskExecutor.java:153"$1$0$0$2$56$"		return this.concurrencyThrottle.getConcurrencyLimit();"
"SimpleAsyncTaskExecutor.java:154"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:155"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:156"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:157"$0$0$0$8$53$"	 * Return whether this throttle is currently active."
"SimpleAsyncTaskExecutor.java:158"$0$0$0$13$77$"	 * @return {@code true} if the concurrency limit for this instance is active"
"SimpleAsyncTaskExecutor.java:159"$1$0$0$3$31$"	 * @see #getConcurrencyLimit()"
"SimpleAsyncTaskExecutor.java:160"$0$0$0$3$29$"	 * @see #setConcurrencyLimit"
"SimpleAsyncTaskExecutor.java:161"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:162"$0$0$0$5$42$"	public final boolean isThrottleActive() {"
"SimpleAsyncTaskExecutor.java:163"$0$0$0$2$53$"		return this.concurrencyThrottle.isThrottleActive();"
"SimpleAsyncTaskExecutor.java:164"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:165"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:166"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:167"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:168"$0$0$0$9$58$"	 * Executes the given task, within a concurrency throttle"
"SimpleAsyncTaskExecutor.java:169"$0$0$0$7$54$"	 * if configured (through the superclass's settings)."
"SimpleAsyncTaskExecutor.java:170"$0$0$0$3$29$"	 * @see #doExecute(Runnable)"
"SimpleAsyncTaskExecutor.java:171"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:172"$0$0$0$1$10$"	@Override"
"SimpleAsyncTaskExecutor.java:173"$0$0$0$5$37$"	public void execute(Runnable task) {"
"SimpleAsyncTaskExecutor.java:174"$0$0$0$2$36$"		execute(task, TIMEOUT_INDEFINITE);"
"SimpleAsyncTaskExecutor.java:175"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:176"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:177"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:178"$0$0$0$9$58$"	 * Executes the given task, within a concurrency throttle"
"SimpleAsyncTaskExecutor.java:179"$0$0$0$7$54$"	 * if configured (through the superclass's settings)."
"SimpleAsyncTaskExecutor.java:180"$0$0$0$8$65$"	 * <p>Executes urgent tasks (with 'immediate' timeout) directly,"
"SimpleAsyncTaskExecutor.java:181"$0$0$0$9$61$"	 * bypassing the concurrency throttle (if active). All other"
"SimpleAsyncTaskExecutor.java:182"$0$0$0$6$36$"	 * tasks are subject to throttling."
"SimpleAsyncTaskExecutor.java:183"$0$0$0$3$27$"	 * @see #TIMEOUT_IMMEDIATE"
"SimpleAsyncTaskExecutor.java:184"$0$0$0$3$29$"	 * @see #doExecute(Runnable)"
"SimpleAsyncTaskExecutor.java:185"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:186"$0$0$0$1$10$"	@Override"
"SimpleAsyncTaskExecutor.java:187"$0$0$0$7$56$"	public void execute(Runnable task, long startTimeout) {"
"SimpleAsyncTaskExecutor.java:188"$0$0$0$6$52$"		Assert.notNull(task, ""Runnable must not be null"");"
"SimpleAsyncTaskExecutor.java:189"$0$0$0$10$95$"		Runnable taskToUse = (this.taskDecorator != null ? this.taskDecorator.decorate(task) : task);"
"SimpleAsyncTaskExecutor.java:190"$0$0$0$7$63$"		if (isThrottleActive() && startTimeout > TIMEOUT_IMMEDIATE) {"
"SimpleAsyncTaskExecutor.java:191"$0$0$0$1$43$"			this.concurrencyThrottle.beforeAccess();"
"SimpleAsyncTaskExecutor.java:192"$0$0$0$2$59$"			doExecute(new ConcurrencyThrottlingRunnable(taskToUse));"
"SimpleAsyncTaskExecutor.java:193"$0$0$0$1$3$"		}"
"SimpleAsyncTaskExecutor.java:194"$0$0$0$2$8$"		else {"
"SimpleAsyncTaskExecutor.java:195"$0$0$0$1$24$"			doExecute(taskToUse);"
"SimpleAsyncTaskExecutor.java:196"$0$0$0$1$3$"		}"
"SimpleAsyncTaskExecutor.java:197"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:198"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:199"$0$0$0$1$10$"	@Override"
"SimpleAsyncTaskExecutor.java:200"$0$0$0$5$41$"	public Future<?> submit(Runnable task) {"
"SimpleAsyncTaskExecutor.java:201"$0$0$0$6$59$"		FutureTask<Object> future = new FutureTask<>(task, null);"
"SimpleAsyncTaskExecutor.java:202"$0$0$0$2$38$"		execute(future, TIMEOUT_INDEFINITE);"
"SimpleAsyncTaskExecutor.java:203"$0$0$0$2$16$"		return future;"
"SimpleAsyncTaskExecutor.java:204"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:205"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:206"$0$0$0$1$10$"	@Override"
"SimpleAsyncTaskExecutor.java:207"$0$0$0$6$48$"	public <T> Future<T> submit(Callable<T> task) {"
"SimpleAsyncTaskExecutor.java:208"$0$0$0$5$48$"		FutureTask<T> future = new FutureTask<>(task);"
"SimpleAsyncTaskExecutor.java:209"$0$0$0$2$38$"		execute(future, TIMEOUT_INDEFINITE);"
"SimpleAsyncTaskExecutor.java:210"$0$0$0$2$16$"		return future;"
"SimpleAsyncTaskExecutor.java:211"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:212"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:213"$0$0$0$1$10$"	@Override"
"SimpleAsyncTaskExecutor.java:214"$0$0$0$5$61$"	public ListenableFuture<?> submitListenable(Runnable task) {"
"SimpleAsyncTaskExecutor.java:215"$0$0$0$6$79$"		ListenableFutureTask<Object> future = new ListenableFutureTask<>(task, null);"
"SimpleAsyncTaskExecutor.java:216"$0$0$0$2$38$"		execute(future, TIMEOUT_INDEFINITE);"
"SimpleAsyncTaskExecutor.java:217"$0$0$0$2$16$"		return future;"
"SimpleAsyncTaskExecutor.java:218"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:219"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:220"$0$0$0$1$10$"	@Override"
"SimpleAsyncTaskExecutor.java:221"$0$0$0$6$68$"	public <T> ListenableFuture<T> submitListenable(Callable<T> task) {"
"SimpleAsyncTaskExecutor.java:222"$0$0$0$5$68$"		ListenableFutureTask<T> future = new ListenableFutureTask<>(task);"
"SimpleAsyncTaskExecutor.java:223"$0$0$0$2$38$"		execute(future, TIMEOUT_INDEFINITE);"
"SimpleAsyncTaskExecutor.java:224"$0$0$0$2$16$"		return future;"
"SimpleAsyncTaskExecutor.java:225"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:226"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:227"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:228"$0$0$0$10$55$"	 * Template method for the actual execution of a task."
"SimpleAsyncTaskExecutor.java:229"$0$0$0$11$69$"	 * <p>The default implementation creates a new Thread and starts it."
"SimpleAsyncTaskExecutor.java:230"$0$0$0$7$39$"	 * @param task the Runnable to execute"
"SimpleAsyncTaskExecutor.java:231"$0$0$0$3$26$"	 * @see #setThreadFactory"
"SimpleAsyncTaskExecutor.java:232"$0$0$0$3$22$"	 * @see #createThread"
"SimpleAsyncTaskExecutor.java:233"$0$0$0$3$33$"	 * @see java.lang.Thread#start()"
"SimpleAsyncTaskExecutor.java:234"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:235"$0$0$0$5$42$"	protected void doExecute(Runnable task) {"
"SimpleAsyncTaskExecutor.java:236"$0$0$0$10$105$"		Thread thread = (this.threadFactory != null ? this.threadFactory.newThread(task) : createThread(task));"
"SimpleAsyncTaskExecutor.java:237"$0$0$0$1$17$"		thread.start();"
"SimpleAsyncTaskExecutor.java:238"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:239"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:240"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:241"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:242"$0$0$0$7$61$"	 * Subclass of the general ConcurrencyThrottleSupport class,"
"SimpleAsyncTaskExecutor.java:243"$0$0$0$7$59$"	 * making {@code beforeAccess()} and {@code afterAccess()}"
"SimpleAsyncTaskExecutor.java:244"$0$0$0$6$37$"	 * visible to the surrounding class."
"SimpleAsyncTaskExecutor.java:245"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:246"$0$0$0$7$85$"	private static class ConcurrencyThrottleAdapter extends ConcurrencyThrottleSupport {"
"SimpleAsyncTaskExecutor.java:247"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:248"$0$0$0$1$11$"		@Override"
"SimpleAsyncTaskExecutor.java:249"$0$0$0$4$33$"		protected void beforeAccess() {"
"SimpleAsyncTaskExecutor.java:250"$0$0$0$1$24$"			super.beforeAccess();"
"SimpleAsyncTaskExecutor.java:251"$0$0$0$1$3$"		}"
"SimpleAsyncTaskExecutor.java:252"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:253"$0$0$0$1$11$"		@Override"
"SimpleAsyncTaskExecutor.java:254"$0$0$0$4$32$"		protected void afterAccess() {"
"SimpleAsyncTaskExecutor.java:255"$0$0$0$1$23$"			super.afterAccess();"
"SimpleAsyncTaskExecutor.java:256"$0$0$0$1$3$"		}"
"SimpleAsyncTaskExecutor.java:257"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:258"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:259"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:260"$0$0$0$1$4$"	/**"
"SimpleAsyncTaskExecutor.java:261"$0$0$0$8$55$"	 * This Runnable calls {@code afterAccess()} after the"
"SimpleAsyncTaskExecutor.java:262"$1$0$0$7$47$"	 * target Runnable has finished its execution."
"SimpleAsyncTaskExecutor.java:263"$0$0$0$1$4$"	 */"
"SimpleAsyncTaskExecutor.java:264"$0$0$0$6$66$"	private class ConcurrencyThrottlingRunnable implements Runnable {"
"SimpleAsyncTaskExecutor.java:265"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:266"$1$0$0$4$32$"		private final Runnable target;"
"SimpleAsyncTaskExecutor.java:267"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:268"$1$0$0$4$57$"		public ConcurrencyThrottlingRunnable(Runnable target) {"
"SimpleAsyncTaskExecutor.java:269"$2$0$0$3$24$"			this.target = target;"
"SimpleAsyncTaskExecutor.java:270"$0$0$0$1$3$"		}"
"SimpleAsyncTaskExecutor.java:271"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:272"$0$0$0$1$11$"		@Override"
"SimpleAsyncTaskExecutor.java:273"$0$0$0$4$21$"		public void run() {"
"SimpleAsyncTaskExecutor.java:274"$0$0$0$2$8$"			try {"
"SimpleAsyncTaskExecutor.java:275"$1$0$0$1$22$"				this.target.run();"
"SimpleAsyncTaskExecutor.java:276"$0$0$0$1$4$"			}"
"SimpleAsyncTaskExecutor.java:277"$0$0$0$2$12$"			finally {"
"SimpleAsyncTaskExecutor.java:278"$0$0$0$1$38$"				concurrencyThrottle.afterAccess();"
"SimpleAsyncTaskExecutor.java:279"$0$0$0$1$4$"			}"
"SimpleAsyncTaskExecutor.java:280"$0$0$0$1$3$"		}"
"SimpleAsyncTaskExecutor.java:281"$0$0$0$1$2$"	}"
"SimpleAsyncTaskExecutor.java:282"$0$0$0$0$0$""
"SimpleAsyncTaskExecutor.java:283"$0$0$0$1$1$"}"
"ExceptionTypeFilter.java:1"$0$0$0$1$2$"/*"
"ExceptionTypeFilter.java:2"$0$0$0$8$54$" * Copyright 2002-2014 the original author or authors."
"ExceptionTypeFilter.java:3"$0$0$0$1$2$" *"
"ExceptionTypeFilter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ExceptionTypeFilter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ExceptionTypeFilter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ExceptionTypeFilter.java:7"$0$0$0$1$2$" *"
"ExceptionTypeFilter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ExceptionTypeFilter.java:9"$0$0$0$1$2$" *"
"ExceptionTypeFilter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ExceptionTypeFilter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ExceptionTypeFilter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ExceptionTypeFilter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ExceptionTypeFilter.java:14"$0$0$0$5$33$" * limitations under the License."
"ExceptionTypeFilter.java:15"$0$0$0$1$3$" */"
"ExceptionTypeFilter.java:16"$0$0$0$0$0$""
"ExceptionTypeFilter.java:17"$0$0$0$2$33$"package org.springframework.util;"
"ExceptionTypeFilter.java:18"$0$0$0$0$0$""
"ExceptionTypeFilter.java:19"$0$0$0$2$28$"import java.util.Collection;"
"ExceptionTypeFilter.java:20"$0$0$0$0$0$""
"ExceptionTypeFilter.java:21"$0$0$0$1$3$"/**"
"ExceptionTypeFilter.java:22"$0$0$0$11$80$" * An {@link InstanceFilter} implementation that handles exception types. A type"
"ExceptionTypeFilter.java:23"$0$0$0$14$78$" * will match against a given candidate if it is assignable to that candidate."
"ExceptionTypeFilter.java:24"$0$0$0$1$2$" *"
"ExceptionTypeFilter.java:25"$0$0$0$4$26$" * @author Stephane Nicoll"
"ExceptionTypeFilter.java:26"$0$0$0$3$13$" * @since 4.1"
"ExceptionTypeFilter.java:27"$0$0$0$1$3$" */"
"ExceptionTypeFilter.java:28"$0$0$0$8$85$"public class ExceptionTypeFilter extends InstanceFilter<Class<? extends Throwable>> {"
"ExceptionTypeFilter.java:29"$0$0$0$0$0$""
"ExceptionTypeFilter.java:30"$0$0$0$7$86$"	public ExceptionTypeFilter(Collection<? extends Class<? extends Throwable>> includes,"
"ExceptionTypeFilter.java:31"$0$0$0$9$85$"			Collection<? extends Class<? extends Throwable>> excludes, boolean matchIfEmpty) {"
"ExceptionTypeFilter.java:32"$0$0$0$0$0$""
"ExceptionTypeFilter.java:33"$0$0$0$3$42$"		super(includes, excludes, matchIfEmpty);"
"ExceptionTypeFilter.java:34"$0$0$0$1$2$"	}"
"ExceptionTypeFilter.java:35"$0$0$0$0$0$""
"ExceptionTypeFilter.java:36"$0$0$0$1$10$"	@Override"
"ExceptionTypeFilter.java:37"$0$0$0$11$101$"	protected boolean match(Class<? extends Throwable> instance, Class<? extends Throwable> candidate) {"
"ExceptionTypeFilter.java:38"$0$0$0$2$46$"		return candidate.isAssignableFrom(instance);"
"ExceptionTypeFilter.java:39"$0$0$0$1$2$"	}"
"ExceptionTypeFilter.java:40"$0$0$0$0$0$""
"ExceptionTypeFilter.java:41"$0$0$0$1$1$"}"
"PropertiesPersister.java:1"$0$0$0$1$2$"/*"
"PropertiesPersister.java:2"$0$0$0$8$54$" * Copyright 2002-2016 the original author or authors."
"PropertiesPersister.java:3"$0$0$0$1$2$" *"
"PropertiesPersister.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PropertiesPersister.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PropertiesPersister.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PropertiesPersister.java:7"$0$0$0$1$2$" *"
"PropertiesPersister.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PropertiesPersister.java:9"$0$0$0$1$2$" *"
"PropertiesPersister.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PropertiesPersister.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PropertiesPersister.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PropertiesPersister.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PropertiesPersister.java:14"$0$0$0$5$33$" * limitations under the License."
"PropertiesPersister.java:15"$0$0$0$1$3$" */"
"PropertiesPersister.java:16"$0$0$0$0$0$""
"PropertiesPersister.java:17"$0$0$0$2$33$"package org.springframework.util;"
"PropertiesPersister.java:18"$0$0$0$0$0$""
"PropertiesPersister.java:19"$0$0$0$2$27$"import java.io.IOException;"
"PropertiesPersister.java:20"$0$0$0$2$27$"import java.io.InputStream;"
"PropertiesPersister.java:21"$0$0$0$2$28$"import java.io.OutputStream;"
"PropertiesPersister.java:22"$0$0$0$2$22$"import java.io.Reader;"
"PropertiesPersister.java:23"$0$0$0$2$22$"import java.io.Writer;"
"PropertiesPersister.java:24"$0$0$0$2$28$"import java.util.Properties;"
"PropertiesPersister.java:25"$0$0$0$0$0$""
"PropertiesPersister.java:26"$0$0$0$1$3$"/**"
"PropertiesPersister.java:27"$0$0$0$7$66$" * Strategy interface for persisting {@code java.util.Properties},"
"PropertiesPersister.java:28"$0$0$0$6$45$" * allowing for pluggable parsing strategies."
"PropertiesPersister.java:29"$0$0$0$1$2$" *"
"PropertiesPersister.java:30"$0$0$0$6$63$" * <p>The default implementation is DefaultPropertiesPersister,"
"PropertiesPersister.java:31"$0$0$0$8$64$" * providing the native parsing of {@code java.util.Properties},"
"PropertiesPersister.java:32"$0$0$0$13$69$" * but allowing for reading from any Reader and writing to any Writer"
"PropertiesPersister.java:33"$0$0$0$11$63$" * (which allows to specify an encoding for a properties file)."
"PropertiesPersister.java:34"$0$0$0$1$2$" *"
"PropertiesPersister.java:35"$0$0$0$4$26$" * @author Juergen Hoeller"
"PropertiesPersister.java:36"$0$0$0$3$20$" * @since 10.03.2004"
"PropertiesPersister.java:37"$0$0$0$3$34$" * @see DefaultPropertiesPersister"
"PropertiesPersister.java:38"$0$0$0$3$28$" * @see java.util.Properties"
"PropertiesPersister.java:39"$0$0$0$1$3$" */"
"PropertiesPersister.java:40"$0$0$0$4$38$"public interface PropertiesPersister {"
"PropertiesPersister.java:41"$0$0$0$0$0$""
"PropertiesPersister.java:42"$0$0$0$1$4$"	/**"
"PropertiesPersister.java:43"$0$0$0$10$61$"	 * Load properties from the given InputStream into the given"
"PropertiesPersister.java:44"$0$0$0$3$22$"	 * Properties object."
"PropertiesPersister.java:45"$0$0$0$9$51$"	 * @param props the Properties object to load into"
"PropertiesPersister.java:46"$0$0$0$8$42$"	 * @param is the InputStream to load from"
"PropertiesPersister.java:47"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PropertiesPersister.java:48"$0$0$0$3$34$"	 * @see java.util.Properties#load"
"PropertiesPersister.java:49"$0$0$0$1$4$"	 */"
"PropertiesPersister.java:50"$0$0$0$7$64$"	void load(Properties props, InputStream is) throws IOException;"
"PropertiesPersister.java:51"$0$0$0$0$0$""
"PropertiesPersister.java:52"$0$0$0$1$4$"	/**"
"PropertiesPersister.java:53"$0$0$0$10$56$"	 * Load properties from the given Reader into the given"
"PropertiesPersister.java:54"$0$0$0$3$22$"	 * Properties object."
"PropertiesPersister.java:55"$0$0$0$9$51$"	 * @param props the Properties object to load into"
"PropertiesPersister.java:56"$0$0$0$8$41$"	 * @param reader the Reader to load from"
"PropertiesPersister.java:57"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PropertiesPersister.java:58"$0$0$0$1$4$"	 */"
"PropertiesPersister.java:59"$0$0$0$7$63$"	void load(Properties props, Reader reader) throws IOException;"
"PropertiesPersister.java:60"$0$0$0$0$0$""
"PropertiesPersister.java:61"$0$0$0$1$4$"	/**"
"PropertiesPersister.java:62"$0$0$0$11$60$"	 * Write the contents of the given Properties object to the"
"PropertiesPersister.java:63"$0$0$0$3$23$"	 * given OutputStream."
"PropertiesPersister.java:64"$0$0$0$8$47$"	 * @param props the Properties object to store"
"PropertiesPersister.java:65"$0$0$0$8$42$"	 * @param os the OutputStream to write to"
"PropertiesPersister.java:66"$0$0$0$9$54$"	 * @param header the description of the property list"
"PropertiesPersister.java:67"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PropertiesPersister.java:68"$0$0$0$3$35$"	 * @see java.util.Properties#store"
"PropertiesPersister.java:69"$0$0$0$1$4$"	 */"
"PropertiesPersister.java:70"$0$0$0$9$81$"	void store(Properties props, OutputStream os, String header) throws IOException;"
"PropertiesPersister.java:71"$0$0$0$0$0$""
"PropertiesPersister.java:72"$0$0$0$1$4$"	/**"
"PropertiesPersister.java:73"$0$0$0$11$60$"	 * Write the contents of the given Properties object to the"
"PropertiesPersister.java:74"$0$0$0$3$17$"	 * given Writer."
"PropertiesPersister.java:75"$0$0$0$8$47$"	 * @param props the Properties object to store"
"PropertiesPersister.java:76"$0$0$0$8$40$"	 * @param writer the Writer to write to"
"PropertiesPersister.java:77"$0$0$0$9$54$"	 * @param header the description of the property list"
"PropertiesPersister.java:78"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PropertiesPersister.java:79"$0$0$0$1$4$"	 */"
"PropertiesPersister.java:80"$0$0$0$9$79$"	void store(Properties props, Writer writer, String header) throws IOException;"
"PropertiesPersister.java:81"$0$0$0$0$0$""
"PropertiesPersister.java:82"$0$0$0$1$4$"	/**"
"PropertiesPersister.java:83"$0$0$0$10$59$"	 * Load properties from the given XML InputStream into the"
"PropertiesPersister.java:84"$0$0$0$4$28$"	 * given Properties object."
"PropertiesPersister.java:85"$0$0$0$9$51$"	 * @param props the Properties object to load into"
"PropertiesPersister.java:86"$0$0$0$8$42$"	 * @param is the InputStream to load from"
"PropertiesPersister.java:87"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PropertiesPersister.java:88"$0$0$0$3$62$"	 * @see java.util.Properties#loadFromXML(java.io.InputStream)"
"PropertiesPersister.java:89"$0$0$0$1$4$"	 */"
"PropertiesPersister.java:90"$0$0$0$7$71$"	void loadFromXml(Properties props, InputStream is) throws IOException;"
"PropertiesPersister.java:91"$0$0$0$0$0$""
"PropertiesPersister.java:92"$0$0$0$1$4$"	/**"
"PropertiesPersister.java:93"$0$0$0$11$60$"	 * Write the contents of the given Properties object to the"
"PropertiesPersister.java:94"$0$0$0$4$27$"	 * given XML OutputStream."
"PropertiesPersister.java:95"$0$0$0$8$47$"	 * @param props the Properties object to store"
"PropertiesPersister.java:96"$0$0$0$8$42$"	 * @param os the OutputStream to write to"
"PropertiesPersister.java:97"$0$0$0$9$54$"	 * @param header the description of the property list"
"PropertiesPersister.java:98"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PropertiesPersister.java:99"$0$0$0$4$70$"	 * @see java.util.Properties#storeToXML(java.io.OutputStream, String)"
"PropertiesPersister.java:100"$0$0$0$1$4$"	 */"
"PropertiesPersister.java:101"$0$0$0$9$86$"	void storeToXml(Properties props, OutputStream os, String header) throws IOException;"
"PropertiesPersister.java:102"$0$0$0$0$0$""
"PropertiesPersister.java:103"$0$0$0$1$4$"	/**"
"PropertiesPersister.java:104"$0$0$0$11$60$"	 * Write the contents of the given Properties object to the"
"PropertiesPersister.java:105"$0$0$0$4$27$"	 * given XML OutputStream."
"PropertiesPersister.java:106"$0$0$0$8$47$"	 * @param props the Properties object to store"
"PropertiesPersister.java:107"$0$0$0$8$42$"	 * @param os the OutputStream to write to"
"PropertiesPersister.java:108"$0$0$0$7$39$"	 * @param encoding the encoding to use"
"PropertiesPersister.java:109"$0$0$0$9$54$"	 * @param header the description of the property list"
"PropertiesPersister.java:110"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PropertiesPersister.java:111"$0$0$0$5$78$"	 * @see java.util.Properties#storeToXML(java.io.OutputStream, String, String)"
"PropertiesPersister.java:112"$0$0$0$1$4$"	 */"
"PropertiesPersister.java:113"$0$0$0$11$103$"	void storeToXml(Properties props, OutputStream os, String header, String encoding) throws IOException;"
"PropertiesPersister.java:114"$0$0$0$0$0$""
"PropertiesPersister.java:115"$0$0$0$1$1$"}"
"AnnotationFilter.java:1"$0$0$0$1$2$"/*"
"AnnotationFilter.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AnnotationFilter.java:3"$0$0$0$1$2$" *"
"AnnotationFilter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationFilter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationFilter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationFilter.java:7"$0$0$0$1$2$" *"
"AnnotationFilter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationFilter.java:9"$0$0$0$1$2$" *"
"AnnotationFilter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationFilter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationFilter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationFilter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationFilter.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationFilter.java:15"$0$0$0$1$3$" */"
"AnnotationFilter.java:16"$0$0$0$0$0$""
"AnnotationFilter.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AnnotationFilter.java:18"$0$0$0$0$0$""
"AnnotationFilter.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"AnnotationFilter.java:20"$0$0$0$0$0$""
"AnnotationFilter.java:21"$0$0$0$1$3$"/**"
"AnnotationFilter.java:22"$0$0$0$12$75$" * Callback interface that can be used to filter specific annotation types."
"AnnotationFilter.java:23"$0$0$0$1$2$" *"
"AnnotationFilter.java:24"$0$0$0$4$23$" * @author Phillip Webb"
"AnnotationFilter.java:25"$0$0$0$3$13$" * @since 5.2"
"AnnotationFilter.java:26"$0$0$0$1$3$" */"
"AnnotationFilter.java:27"$0$0$0$1$19$"FunctionalInterface"
"AnnotationFilter.java:28"$0$0$0$4$35$"public interface AnnotationFilter {"
"AnnotationFilter.java:29"$0$0$0$0$0$""
"AnnotationFilter.java:30"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:31"$0$0$0$8$60$"	 * {@link AnnotationFilter} that matches annotations in the"
"AnnotationFilter.java:32"$0$0$0$7$67$"	 * {@code java.lang} and {@code org.springframework.lang} packages"
"AnnotationFilter.java:33"$0$0$0$4$26$"	 * and their subpackages."
"AnnotationFilter.java:34"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:35"$0$0$0$5$76$"	AnnotationFilter PLAIN = packages(""java.lang"", ""org.springframework.lang"");"
"AnnotationFilter.java:36"$0$0$0$0$0$""
"AnnotationFilter.java:37"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:38"$0$0$0$8$60$"	 * {@link AnnotationFilter} that matches annotations in the"
"AnnotationFilter.java:39"$0$0$0$10$66$"	 * {@code java} and {@code javax} packages and their subpackages."
"AnnotationFilter.java:40"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:41"$0$0$0$5$51$"	AnnotationFilter JAVA = packages(""java"", ""javax"");"
"AnnotationFilter.java:42"$0$0$0$0$0$""
"AnnotationFilter.java:43"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:44"$0$0$0$12$72$"	 * {@link AnnotationFilter} that always matches and can be used when no"
"AnnotationFilter.java:45"$0$0$0$11$64$"	 * relevant annotation types are expected to be present at all."
"AnnotationFilter.java:46"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:47"$0$0$0$6$48$"	AnnotationFilter ALL = new AnnotationFilter() {"
"AnnotationFilter.java:48"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:49"$0$0$0$5$49$"		public boolean matches(Annotation annotation) {"
"AnnotationFilter.java:50"$0$0$0$2$15$"			return true;"
"AnnotationFilter.java:51"$0$0$0$1$3$"		}"
"AnnotationFilter.java:52"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:53"$0$0$0$5$41$"		public boolean matches(Class<?> type) {"
"AnnotationFilter.java:54"$0$0$0$2$15$"			return true;"
"AnnotationFilter.java:55"$0$0$0$1$3$"		}"
"AnnotationFilter.java:56"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:57"$0$0$0$5$43$"		public boolean matches(String typeName) {"
"AnnotationFilter.java:58"$0$0$0$2$15$"			return true;"
"AnnotationFilter.java:59"$0$0$0$1$3$"		}"
"AnnotationFilter.java:60"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:61"$0$0$0$4$28$"		public String toString() {"
"AnnotationFilter.java:62"$0$0$0$4$37$"			return ""All annotations filtered"";"
"AnnotationFilter.java:63"$0$0$0$1$3$"		}"
"AnnotationFilter.java:64"$0$0$0$1$3$"	};"
"AnnotationFilter.java:65"$0$0$0$0$0$""
"AnnotationFilter.java:66"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:67"$0$0$0$12$71$"	 * {@link AnnotationFilter} that never matches and can be used when no"
"AnnotationFilter.java:68"$0$0$0$12$74$"	 * filtering is needed (allowing for any annotation types to be present)."
"AnnotationFilter.java:69"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:70"$0$0$0$6$49$"	AnnotationFilter NONE = new AnnotationFilter() {"
"AnnotationFilter.java:71"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:72"$0$0$0$5$49$"		public boolean matches(Annotation annotation) {"
"AnnotationFilter.java:73"$0$0$0$2$16$"			return false;"
"AnnotationFilter.java:74"$0$0$0$1$3$"		}"
"AnnotationFilter.java:75"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:76"$0$0$0$5$41$"		public boolean matches(Class<?> type) {"
"AnnotationFilter.java:77"$0$0$0$2$16$"			return false;"
"AnnotationFilter.java:78"$0$0$0$1$3$"		}"
"AnnotationFilter.java:79"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:80"$0$0$0$5$43$"		public boolean matches(String typeName) {"
"AnnotationFilter.java:81"$0$0$0$2$16$"			return false;"
"AnnotationFilter.java:82"$0$0$0$1$3$"		}"
"AnnotationFilter.java:83"$0$0$0$1$11$"		@Override"
"AnnotationFilter.java:84"$0$0$0$4$28$"		public String toString() {"
"AnnotationFilter.java:85"$0$0$0$4$36$"			return ""No annotation filtering"";"
"AnnotationFilter.java:86"$0$0$0$1$3$"		}"
"AnnotationFilter.java:87"$0$0$0$1$3$"	};"
"AnnotationFilter.java:88"$0$0$0$0$0$""
"AnnotationFilter.java:89"$0$0$0$0$0$""
"AnnotationFilter.java:90"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:91"$0$0$0$9$52$"	 * Test if the given annotation matches the filter."
"AnnotationFilter.java:92"$0$0$0$7$44$"	 * @param annotation the annotation to test"
"AnnotationFilter.java:93"$0$0$0$8$50$"	 * @return {@code true} if the annotation matches"
"AnnotationFilter.java:94"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:95"$0$0$0$5$49$"	default boolean matches(Annotation annotation) {"
"AnnotationFilter.java:96"$0$0$0$2$46$"		return matches(annotation.annotationType());"
"AnnotationFilter.java:97"$0$0$0$1$2$"	}"
"AnnotationFilter.java:98"$0$0$0$0$0$""
"AnnotationFilter.java:99"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:100"$0$0$0$9$46$"	 * Test if the given type matches the filter."
"AnnotationFilter.java:101"$0$0$0$8$43$"	 * @param type the annotation type to test"
"AnnotationFilter.java:102"$0$0$0$8$50$"	 * @return {@code true} if the annotation matches"
"AnnotationFilter.java:103"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:104"$0$0$0$5$41$"	default boolean matches(Class<?> type) {"
"AnnotationFilter.java:105"$1$0$0$2$33$"		return matches(type.getName());"
"AnnotationFilter.java:106"$0$0$0$1$2$"	}"
"AnnotationFilter.java:107"$0$0$0$0$0$""
"AnnotationFilter.java:108"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:109"$0$0$0$10$51$"	 * Test if the given type name matches the filter."
"AnnotationFilter.java:110"$0$0$0$14$81$"	 * @param typeName the fully qualified class name of the annotation type to test"
"AnnotationFilter.java:111"$0$0$0$8$50$"	 * @return {@code true} if the annotation matches"
"AnnotationFilter.java:112"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:113"$0$0$0$3$34$"	boolean matches(String typeName);"
"AnnotationFilter.java:114"$0$0$0$0$0$""
"AnnotationFilter.java:115"$0$0$0$0$0$""
"AnnotationFilter.java:116"$0$0$0$1$4$"	/**"
"AnnotationFilter.java:117"$0$0$0$11$73$"	 * Create a new {@link AnnotationFilter} that matches annotations in the"
"AnnotationFilter.java:118"$0$0$0$3$23$"	 * specified packages."
"AnnotationFilter.java:119"$0$0$0$9$61$"	 * @param packages the annotation packages that should match"
"AnnotationFilter.java:120"$0$0$0$7$51$"	 * @return a new {@link AnnotationFilter} instance"
"AnnotationFilter.java:121"$0$0$0$1$4$"	 */"
"AnnotationFilter.java:122"$0$0$0$5$55$"	static AnnotationFilter packages(String... packages) {"
"AnnotationFilter.java:123"$0$0$0$3$48$"		return new PackagesAnnotationFilter(packages);"
"AnnotationFilter.java:124"$0$0$0$1$2$"	}"
"AnnotationFilter.java:125"$0$0$0$0$0$""
"AnnotationFilter.java:126"$0$0$0$1$1$"}"
"PooledDataBuffer.java:1"$0$0$0$1$2$"/*"
"PooledDataBuffer.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"PooledDataBuffer.java:3"$0$0$0$1$2$" *"
"PooledDataBuffer.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PooledDataBuffer.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PooledDataBuffer.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PooledDataBuffer.java:7"$0$0$0$1$2$" *"
"PooledDataBuffer.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PooledDataBuffer.java:9"$0$0$0$1$2$" *"
"PooledDataBuffer.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PooledDataBuffer.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PooledDataBuffer.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PooledDataBuffer.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PooledDataBuffer.java:14"$0$0$0$5$33$" * limitations under the License."
"PooledDataBuffer.java:15"$0$0$0$1$3$" */"
"PooledDataBuffer.java:16"$0$0$0$0$0$""
"PooledDataBuffer.java:17"$0$0$0$2$43$"package org.springframework.core.io.buffer;"
"PooledDataBuffer.java:18"$0$0$0$0$0$""
"PooledDataBuffer.java:19"$0$0$0$1$3$"/**"
"PooledDataBuffer.java:20"$0$0$0$11$68$" * Extension of {@link DataBuffer} that allows for buffer that share"
"PooledDataBuffer.java:21"$0$0$0$9$60$" * a memory pool. Introduces methods for reference counting."
"PooledDataBuffer.java:22"$0$0$0$1$2$" *"
"PooledDataBuffer.java:23"$0$0$0$4$24$" * @author Arjen Poutsma"
"PooledDataBuffer.java:24"$0$0$0$3$13$" * @since 5.0"
"PooledDataBuffer.java:25"$0$0$0$1$3$" */"
"PooledDataBuffer.java:26"$0$0$0$6$54$"public interface PooledDataBuffer extends DataBuffer {"
"PooledDataBuffer.java:27"$0$0$0$0$0$""
"PooledDataBuffer.java:28"$0$0$0$1$4$"	/**"
"PooledDataBuffer.java:29"$0$0$0$9$52$"	 * Return {@code true} if this buffer is allocated;"
"PooledDataBuffer.java:30"$0$0$0$8$45$"	 * {@code false} if it has been deallocated."
"PooledDataBuffer.java:31"$0$0$0$3$14$"	 * @since 5.1"
"PooledDataBuffer.java:32"$0$0$0$1$4$"	 */"
"PooledDataBuffer.java:33"$0$0$0$2$23$"	boolean isAllocated();"
"PooledDataBuffer.java:34"$0$0$0$0$0$""
"PooledDataBuffer.java:35"$0$0$0$1$4$"	/**"
"PooledDataBuffer.java:36"$0$0$0$10$56$"	 * Increase the reference count for this buffer by one."
"PooledDataBuffer.java:37"$0$0$0$4$23$"	 * @return this buffer"
"PooledDataBuffer.java:38"$0$0$0$1$4$"	 */"
"PooledDataBuffer.java:39"$0$0$0$2$27$"	PooledDataBuffer retain();"
"PooledDataBuffer.java:40"$0$0$0$0$0$""
"PooledDataBuffer.java:41"$0$0$0$1$4$"	/**"
"PooledDataBuffer.java:42"$0$0$0$10$56$"	 * Decrease the reference count for this buffer by one,"
"PooledDataBuffer.java:43"$0$0$0$9$50$"	 * and deallocate it once the count reaches zero."
"PooledDataBuffer.java:44"$0$0$0$9$55$"	 * @return {@code true} if the buffer was deallocated;"
"PooledDataBuffer.java:45"$0$0$0$4$27$"	 * {@code false} otherwise"
"PooledDataBuffer.java:46"$0$0$0$1$4$"	 */"
"PooledDataBuffer.java:47"$0$0$0$2$19$"	boolean release();"
"PooledDataBuffer.java:48"$0$0$0$0$0$""
"PooledDataBuffer.java:49"$0$0$0$1$1$"}"
"InstanceComparator.java:1"$0$0$0$1$2$"/*"
"InstanceComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"InstanceComparator.java:3"$0$0$0$1$2$" *"
"InstanceComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"InstanceComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"InstanceComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"InstanceComparator.java:7"$0$0$0$1$2$" *"
"InstanceComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"InstanceComparator.java:9"$0$0$0$1$2$" *"
"InstanceComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"InstanceComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"InstanceComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"InstanceComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"InstanceComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"InstanceComparator.java:15"$0$0$0$1$3$" */"
"InstanceComparator.java:16"$0$0$0$0$0$""
"InstanceComparator.java:17"$0$0$0$2$44$"package org.springframework.util.comparator;"
"InstanceComparator.java:18"$0$0$0$0$0$""
"InstanceComparator.java:19"$0$0$0$2$28$"import java.util.Comparator;"
"InstanceComparator.java:20"$0$0$0$0$0$""
"InstanceComparator.java:21"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"InstanceComparator.java:22"$0$0$0$2$39$"import org.springframework.util.Assert;"
"InstanceComparator.java:23"$0$0$0$0$0$""
"InstanceComparator.java:24"$0$0$0$1$3$"/**"
"InstanceComparator.java:25"$0$0$0$15$88$" * Compares objects based on an arbitrary class order. Allows objects to be sorted based"
"InstanceComparator.java:26"$0$0$0$17$87$" * on the types of class that they inherit, for example: this comparator can be used to"
"InstanceComparator.java:27"$0$0$0$14$85$" * sort a list {@code Number}s such that {@code Long}s occur before {@code Integer}s."
"InstanceComparator.java:28"$0$0$0$1$2$" *"
"InstanceComparator.java:29"$0$0$0$11$88$" * <p>Only the specified {@code instanceOrder} classes are considered during comparison."
"InstanceComparator.java:30"$0$0$0$16$86$" * If two objects are both instances of the ordered type this comparator will return a"
"InstanceComparator.java:31"$0$0$0$8$82$" * {@code 0}. Consider combining with {@link Comparator#thenComparing(Comparator)}"
"InstanceComparator.java:32"$0$0$0$6$37$" * if additional sorting is required."
"InstanceComparator.java:33"$0$0$0$1$2$" *"
"InstanceComparator.java:34"$0$0$0$4$23$" * @author Phillip Webb"
"InstanceComparator.java:35"$0$0$0$3$13$" * @since 3.2"
"InstanceComparator.java:36"$0$0$0$14$73$" * @param <T> the type of objects that may be compared by this comparator"
"InstanceComparator.java:37"$0$0$0$3$44$" * @see Comparator#thenComparing(Comparator)"
"InstanceComparator.java:38"$0$0$0$1$3$" */"
"InstanceComparator.java:39"$0$0$0$6$61$"public class InstanceComparator<T> implements Comparator<T> {"
"InstanceComparator.java:40"$0$0$0$0$0$""
"InstanceComparator.java:41"$0$0$0$4$40$"	private final Class<?>[] instanceOrder;"
"InstanceComparator.java:42"$0$0$0$0$0$""
"InstanceComparator.java:43"$0$0$0$0$0$""
"InstanceComparator.java:44"$0$0$0$1$4$"	/**"
"InstanceComparator.java:45"$0$0$0$7$53$"	 * Create a new {@link InstanceComparator} instance."
"InstanceComparator.java:46"$0$0$0$14$87$"	 * @param instanceOrder the ordered list of classes that should be used when comparing"
"InstanceComparator.java:47"$0$0$0$13$73$"	 * objects. Classes earlier in the list will be given a higher priority."
"InstanceComparator.java:48"$0$0$0$1$4$"	 */"
"InstanceComparator.java:49"$0$0$0$4$55$"	public InstanceComparator(Class<?>... instanceOrder) {"
"InstanceComparator.java:50"$0$0$0$7$74$"		Assert.notNull(instanceOrder, ""'instanceOrder' array must not be null"");"
"InstanceComparator.java:51"$0$0$0$3$37$"		this.instanceOrder = instanceOrder;"
"InstanceComparator.java:52"$0$0$0$1$2$"	}"
"InstanceComparator.java:53"$0$0$0$0$0$""
"InstanceComparator.java:54"$0$0$0$0$0$""
"InstanceComparator.java:55"$0$0$0$1$10$"	@Override"
"InstanceComparator.java:56"$0$0$0$7$33$"	public int compare(T o1, T o2) {"
"InstanceComparator.java:57"$1$0$0$4$24$"		int i1 = getOrder(o1);"
"InstanceComparator.java:58"$1$0$0$4$24$"		int i2 = getOrder(o2);"
"InstanceComparator.java:59"$0$0$0$3$35$"		return (Integer.compare(i1, i2));"
"InstanceComparator.java:60"$0$0$0$1$2$"	}"
"InstanceComparator.java:61"$0$0$0$0$0$""
"InstanceComparator.java:62"$1$0$0$6$43$"	private int getOrder(@Nullable T object) {"
"InstanceComparator.java:63"$0$0$0$5$23$"		if (object != null) {"
"InstanceComparator.java:64"$0$0$0$10$56$"			for (int i = 0; i < this.instanceOrder.length; i++) {"
"InstanceComparator.java:65"$0$0$0$3$51$"				if (this.instanceOrder[i].isInstance(object)) {"
"InstanceComparator.java:66"$0$0$0$2$14$"					return i;"
"InstanceComparator.java:67"$0$0$0$1$5$"				}"
"InstanceComparator.java:68"$0$0$0$1$4$"			}"
"InstanceComparator.java:69"$0$0$0$1$3$"		}"
"InstanceComparator.java:70"$0$0$0$2$35$"		return this.instanceOrder.length;"
"InstanceComparator.java:71"$0$0$0$1$2$"	}"
"InstanceComparator.java:72"$0$0$0$0$0$""
"InstanceComparator.java:73"$0$0$0$1$1$"}"
"ClassUtils.java:1"$0$0$0$1$2$"/*"
"ClassUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"ClassUtils.java:3"$0$0$0$1$2$" *"
"ClassUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ClassUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ClassUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ClassUtils.java:7"$0$0$0$1$2$" *"
"ClassUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ClassUtils.java:9"$0$0$0$1$2$" *"
"ClassUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ClassUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ClassUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ClassUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ClassUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"ClassUtils.java:15"$0$0$0$1$3$" */"
"ClassUtils.java:16"$0$0$0$0$0$""
"ClassUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"ClassUtils.java:18"$0$0$0$0$0$""
"ClassUtils.java:19"$0$0$0$2$31$"import java.beans.Introspector;"
"ClassUtils.java:20"$0$0$0$2$25$"import java.io.Closeable;"
"ClassUtils.java:21"$0$0$0$2$30$"import java.io.Externalizable;"
"ClassUtils.java:22"$0$0$0$2$28$"import java.io.Serializable;"
"ClassUtils.java:23"$0$0$0$2$31$"import java.lang.reflect.Array;"
"ClassUtils.java:24"$0$0$0$2$37$"import java.lang.reflect.Constructor;"
"ClassUtils.java:25"$0$0$0$2$32$"import java.lang.reflect.Method;"
"ClassUtils.java:26"$0$0$0$2$34$"import java.lang.reflect.Modifier;"
"ClassUtils.java:27"$0$0$0$2$31$"import java.lang.reflect.Proxy;"
"ClassUtils.java:28"$0$0$0$2$24$"import java.util.Arrays;"
"ClassUtils.java:29"$0$0$0$2$28$"import java.util.Collection;"
"ClassUtils.java:30"$0$0$0$2$29$"import java.util.Collections;"
"ClassUtils.java:31"$0$0$0$2$29$"import java.util.Enumeration;"
"ClassUtils.java:32"$0$0$0$2$25$"import java.util.HashMap;"
"ClassUtils.java:33"$0$0$0$2$25$"import java.util.HashSet;"
"ClassUtils.java:34"$0$0$0$2$33$"import java.util.IdentityHashMap;"
"ClassUtils.java:35"$0$0$0$2$26$"import java.util.Iterator;"
"ClassUtils.java:36"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"ClassUtils.java:37"$0$0$0$2$22$"import java.util.List;"
"ClassUtils.java:38"$0$0$0$2$21$"import java.util.Map;"
"ClassUtils.java:39"$0$0$0$2$26$"import java.util.Optional;"
"ClassUtils.java:40"$0$0$0$2$21$"import java.util.Set;"
"ClassUtils.java:41"$0$0$0$2$30$"import java.util.StringJoiner;"
"ClassUtils.java:42"$0$0$0$0$0$""
"ClassUtils.java:43"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ClassUtils.java:44"$0$0$0$0$0$""
"ClassUtils.java:45"$0$0$0$1$3$"/**"
"ClassUtils.java:46"$0$0$0$6$57$" * Miscellaneous {@code java.lang.Class} utility methods."
"ClassUtils.java:47"$0$0$0$8$48$" * Mainly for internal use within the framework."
"ClassUtils.java:48"$0$0$0$1$2$" *"
"ClassUtils.java:49"$0$0$0$4$26$" * @author Juergen Hoeller"
"ClassUtils.java:50"$0$0$0$4$23$" * @author Keith Donald"
"ClassUtils.java:51"$0$0$0$4$21$" * @author Rob Harrop"
"ClassUtils.java:52"$0$0$0$4$22$" * @author Sam Brannen"
"ClassUtils.java:53"$0$0$0$3$13$" * @since 1.1"
"ClassUtils.java:54"$0$0$0$3$17$" * @see TypeUtils"
"ClassUtils.java:55"$0$0$0$3$23$" * @see ReflectionUtils"
"ClassUtils.java:56"$0$0$0$1$3$" */"
"ClassUtils.java:57"$0$0$0$5$34$"public abstract class ClassUtils {"
"ClassUtils.java:58"$0$0$0$0$0$""
"ClassUtils.java:59"$0$0$0$9$51$"	/** Suffix for array class names: {@code ""[]""}. */"
"ClassUtils.java:60"$0$0$0$7$48$"	public static final String ARRAY_SUFFIX = ""[]"";"
"ClassUtils.java:61"$0$0$0$0$0$""
"ClassUtils.java:62"$0$0$0$10$59$"	/** Prefix for internal array class names: {@code ""[""}. */"
"ClassUtils.java:63"$0$0$0$7$57$"	private static final String INTERNAL_ARRAY_PREFIX = ""["";"
"ClassUtils.java:64"$0$0$0$0$0$""
"ClassUtils.java:65"$0$0$0$11$74$"	/** Prefix for internal non-primitive array class names: {@code ""[L""}. */"
"ClassUtils.java:66"$0$0$0$7$63$"	private static final String NON_PRIMITIVE_ARRAY_PREFIX = ""[L"";"
"ClassUtils.java:67"$0$0$0$0$0$""
"ClassUtils.java:68"$0$0$0$8$46$"	/** A reusable empty class array constant. */"
"ClassUtils.java:69"$0$0$0$7$56$"	private static final Class<?>[] EMPTY_CLASS_ARRAY = {};"
"ClassUtils.java:70"$0$0$0$0$0$""
"ClassUtils.java:71"$0$0$0$8$53$"	/** The package separator character: {@code '.'}. */"
"ClassUtils.java:72"$0$0$0$7$51$"	private static final char PACKAGE_SEPARATOR = '.';"
"ClassUtils.java:73"$0$0$0$0$0$""
"ClassUtils.java:74"$0$0$0$8$50$"	/** The path separator character: {@code '/'}. */"
"ClassUtils.java:75"$0$0$0$7$48$"	private static final char PATH_SEPARATOR = '/';"
"ClassUtils.java:76"$0$0$0$0$0$""
"ClassUtils.java:77"$0$0$0$9$57$"	/** The inner class separator character: {@code '$'}. */"
"ClassUtils.java:78"$0$0$0$7$55$"	private static final char INNER_CLASS_SEPARATOR = '$';"
"ClassUtils.java:79"$0$0$0$0$0$""
"ClassUtils.java:80"$0$0$0$8$48$"	/** The CGLIB class separator: {@code ""$$""}. */"
"ClassUtils.java:81"$0$0$0$7$57$"	public static final String CGLIB_CLASS_SEPARATOR = ""$$"";"
"ClassUtils.java:82"$0$0$0$0$0$""
"ClassUtils.java:83"$0$0$0$6$33$"	/** The "".class"" file suffix. */"
"ClassUtils.java:84"$0$0$0$7$57$"	public static final String CLASS_FILE_SUFFIX = "".class"";"
"ClassUtils.java:85"$0$0$0$0$0$""
"ClassUtils.java:86"$0$0$0$0$0$""
"ClassUtils.java:87"$0$0$0$1$4$"	/**"
"ClassUtils.java:88"$0$0$0$11$70$"	 * Map with primitive wrapper type as key and corresponding primitive"
"ClassUtils.java:89"$0$0$0$9$59$"	 * type as value, for example: Integer.class -> int.class."
"ClassUtils.java:90"$0$0$0$1$4$"	 */"
"ClassUtils.java:91"$0$0$0$9$97$"	private static final Map<Class<?>, Class<?>> primitiveWrapperTypeMap = new IdentityHashMap<>(8);"
"ClassUtils.java:92"$0$0$0$0$0$""
"ClassUtils.java:93"$0$0$0$1$4$"	/**"
"ClassUtils.java:94"$0$0$0$10$60$"	 * Map with primitive type as key and corresponding wrapper"
"ClassUtils.java:95"$0$0$0$9$59$"	 * type as value, for example: int.class -> Integer.class."
"ClassUtils.java:96"$0$0$0$1$4$"	 */"
"ClassUtils.java:97"$0$0$0$9$99$"	private static final Map<Class<?>, Class<?>> primitiveTypeToWrapperMap = new IdentityHashMap<>(8);"
"ClassUtils.java:98"$0$0$0$0$0$""
"ClassUtils.java:99"$0$0$0$1$4$"	/**"
"ClassUtils.java:100"$0$0$0$11$67$"	 * Map with primitive type name as key and corresponding primitive"
"ClassUtils.java:101"$0$0$0$9$53$"	 * type as value, for example: ""int"" -> ""int.class""."
"ClassUtils.java:102"$0$0$0$1$4$"	 */"
"ClassUtils.java:103"$0$0$0$9$85$"	private static final Map<String, Class<?>> primitiveTypeNameMap = new HashMap<>(32);"
"ClassUtils.java:104"$0$0$0$0$0$""
"ClassUtils.java:105"$0$0$0$1$4$"	/**"
"ClassUtils.java:106"$0$0$0$15$85$"	 * Map with common Java language class name as key and corresponding Class as value."
"ClassUtils.java:107"$0$0$0$8$66$"	 * Primarily for efficient deserialization of remote invocations."
"ClassUtils.java:108"$0$0$0$1$4$"	 */"
"ClassUtils.java:109"$0$0$0$9$81$"	private static final Map<String, Class<?>> commonClassCache = new HashMap<>(64);"
"ClassUtils.java:110"$0$0$0$0$0$""
"ClassUtils.java:111"$0$0$0$1$4$"	/**"
"ClassUtils.java:112"$0$0$0$11$68$"	 * Common Java language interfaces which are supposed to be ignored"
"ClassUtils.java:113"$0$0$0$7$55$"	 * when searching for 'primary' user-level interfaces."
"ClassUtils.java:114"$0$0$0$1$4$"	 */"
"ClassUtils.java:115"$0$0$0$5$59$"	private static final Set<Class<?>> javaLanguageInterfaces;"
"ClassUtils.java:116"$0$0$0$0$0$""
"ClassUtils.java:117"$0$0$0$1$4$"	/**"
"ClassUtils.java:118"$0$0$0$13$84$"	 * Cache for equivalent methods on an interface implemented by the declaring class."
"ClassUtils.java:119"$0$0$0$1$4$"	 */"
"ClassUtils.java:120"$0$0$0$9$103$"	private static final Map<Method, Method> interfaceMethodCache = new ConcurrentReferenceHashMap<>(256);"
"ClassUtils.java:121"$0$0$0$0$0$""
"ClassUtils.java:122"$0$0$0$0$0$""
"ClassUtils.java:123"$0$0$0$2$9$"	static {"
"ClassUtils.java:124"$0$0$0$2$60$"		primitiveWrapperTypeMap.put(Boolean.class, boolean.class);"
"ClassUtils.java:125"$0$0$0$2$54$"		primitiveWrapperTypeMap.put(Byte.class, byte.class);"
"ClassUtils.java:126"$0$0$0$2$59$"		primitiveWrapperTypeMap.put(Character.class, char.class);"
"ClassUtils.java:127"$0$0$0$2$58$"		primitiveWrapperTypeMap.put(Double.class, double.class);"
"ClassUtils.java:128"$0$0$0$2$56$"		primitiveWrapperTypeMap.put(Float.class, float.class);"
"ClassUtils.java:129"$0$0$0$2$56$"		primitiveWrapperTypeMap.put(Integer.class, int.class);"
"ClassUtils.java:130"$0$0$0$2$54$"		primitiveWrapperTypeMap.put(Long.class, long.class);"
"ClassUtils.java:131"$0$0$0$2$56$"		primitiveWrapperTypeMap.put(Short.class, short.class);"
"ClassUtils.java:132"$0$0$0$2$54$"		primitiveWrapperTypeMap.put(Void.class, void.class);"
"ClassUtils.java:133"$0$0$0$0$0$""
"ClassUtils.java:134"$0$0$1$13$82$"		// Map entry iteration is less expensive to initialize than forEach with lambdas"
"ClassUtils.java:135"$0$0$0$7$82$"		for (Map.Entry<Class<?>, Class<?>> entry : primitiveWrapperTypeMap.entrySet()) {"
"ClassUtils.java:136"$2$0$0$2$67$"			primitiveTypeToWrapperMap.put(entry.getValue(), entry.getKey());"
"ClassUtils.java:137"$1$0$0$1$41$"			registerCommonClasses(entry.getKey());"
"ClassUtils.java:138"$0$0$0$1$3$"		}"
"ClassUtils.java:139"$0$0$0$0$0$""
"ClassUtils.java:140"$0$0$0$5$51$"		Set<Class<?>> primitiveTypes = new HashSet<>(32);"
"ClassUtils.java:141"$0$0$0$1$58$"		primitiveTypes.addAll(primitiveWrapperTypeMap.values());"
"ClassUtils.java:142"$0$0$0$4$81$"		Collections.addAll(primitiveTypes, boolean[].class, byte[].class, char[].class,"
"ClassUtils.java:143"$0$0$0$5$77$"				double[].class, float[].class, int[].class, long[].class, short[].class);"
"ClassUtils.java:144"$0$0$0$1$33$"		primitiveTypes.add(void.class);"
"ClassUtils.java:145"$0$0$0$6$49$"		for (Class<?> primitiveType : primitiveTypes) {"
"ClassUtils.java:146"$1$0$0$2$68$"			primitiveTypeNameMap.put(primitiveType.getName(), primitiveType);"
"ClassUtils.java:147"$0$0$0$1$3$"		}"
"ClassUtils.java:148"$0$0$0$0$0$""
"ClassUtils.java:149"$0$0$0$4$89$"		registerCommonClasses(Boolean[].class, Byte[].class, Character[].class, Double[].class,"
"ClassUtils.java:150"$0$0$0$4$65$"				Float[].class, Integer[].class, Long[].class, Short[].class);"
"ClassUtils.java:151"$0$0$0$4$83$"		registerCommonClasses(Number.class, Number[].class, String.class, String[].class,"
"ClassUtils.java:152"$0$0$0$4$62$"				Class.class, Class[].class, Object.class, Object[].class);"
"ClassUtils.java:153"$0$0$0$3$81$"		registerCommonClasses(Throwable.class, Exception.class, RuntimeException.class,"
"ClassUtils.java:154"$0$0$0$3$69$"				Error.class, StackTraceElement.class, StackTraceElement[].class);"
"ClassUtils.java:155"$0$0$0$4$86$"		registerCommonClasses(Enum.class, Iterable.class, Iterator.class, Enumeration.class,"
"ClassUtils.java:156"$0$0$0$6$89$"				Collection.class, List.class, Set.class, Map.class, Map.Entry.class, Optional.class);"
"ClassUtils.java:157"$0$0$0$0$0$""
"ClassUtils.java:158"$0$0$0$5$84$"		Class<?>[] javaLanguageInterfaceArray = {Serializable.class, Externalizable.class,"
"ClassUtils.java:159"$0$0$0$4$77$"				Closeable.class, AutoCloseable.class, Cloneable.class, Comparable.class};"
"ClassUtils.java:160"$0$0$0$1$52$"		registerCommonClasses(javaLanguageInterfaceArray);"
"ClassUtils.java:161"$0$0$0$4$84$"		javaLanguageInterfaces = new HashSet<>(Arrays.asList(javaLanguageInterfaceArray));"
"ClassUtils.java:162"$0$0$0$1$2$"	}"
"ClassUtils.java:163"$0$0$0$0$0$""
"ClassUtils.java:164"$0$0$0$0$0$""
"ClassUtils.java:165"$0$0$0$1$4$"	/**"
"ClassUtils.java:166"$0$0$0$10$64$"	 * Register the given common classes with the ClassUtils cache."
"ClassUtils.java:167"$0$0$0$1$4$"	 */"
"ClassUtils.java:168"$0$0$0$6$71$"	private static void registerCommonClasses(Class<?>... commonClasses) {"
"ClassUtils.java:169"$0$0$0$6$40$"		for (Class<?> clazz : commonClasses) {"
"ClassUtils.java:170"$1$0$0$2$48$"			commonClassCache.put(clazz.getName(), clazz);"
"ClassUtils.java:171"$0$0$0$1$3$"		}"
"ClassUtils.java:172"$0$0$0$1$2$"	}"
"ClassUtils.java:173"$0$0$0$0$0$""
"ClassUtils.java:174"$0$0$0$1$4$"	/**"
"ClassUtils.java:175"$0$0$0$11$71$"	 * Return the default ClassLoader to use: typically the thread context"
"ClassUtils.java:176"$0$0$0$10$73$"	 * ClassLoader, if available; the ClassLoader that loaded the ClassUtils"
"ClassUtils.java:177"$0$0$0$7$35$"	 * class will be used as fallback."
"ClassUtils.java:178"$0$0$0$13$75$"	 * <p>Call this method if you intend to use the thread context ClassLoader"
"ClassUtils.java:179"$0$0$0$12$76$"	 * in a scenario where you clearly prefer a non-null ClassLoader reference:"
"ClassUtils.java:180"$0$0$0$12$73$"	 * for example, for class path resource loading (but not necessarily for"
"ClassUtils.java:181"$0$0$0$9$67$"	 * {@code Class.forName}, which accepts a {@code null} ClassLoader"
"ClassUtils.java:182"$0$0$0$4$23$"	 * reference as well)."
"ClassUtils.java:183"$0$0$0$12$73$"	 * @return the default ClassLoader (only {@code null} if even the system"
"ClassUtils.java:184"$0$0$0$4$33$"	 * ClassLoader isn't accessible)"
"ClassUtils.java:185"$1$0$0$3$39$"	 * @see Thread#getContextClassLoader()"
"ClassUtils.java:186"$1$0$0$3$43$"	 * @see ClassLoader#getSystemClassLoader()"
"ClassUtils.java:187"$0$0$0$1$4$"	 */"
"ClassUtils.java:188"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:189"$1$0$0$5$52$"	public static ClassLoader getDefaultClassLoader() {"
"ClassUtils.java:190"$0$0$0$4$24$"		ClassLoader cl = null;"
"ClassUtils.java:191"$0$0$0$2$7$"		try {"
"ClassUtils.java:192"$1$0$0$3$55$"			cl = Thread.currentThread().getContextClassLoader();"
"ClassUtils.java:193"$0$0$0$1$3$"		}"
"ClassUtils.java:194"$0$0$0$4$24$"		catch (Throwable ex) {"
"ClassUtils.java:195"$0$0$1$9$64$"			// Cannot access thread context ClassLoader - falling back..."
"ClassUtils.java:196"$0$0$0$1$3$"		}"
"ClassUtils.java:197"$0$0$0$5$19$"		if (cl == null) {"
"ClassUtils.java:198"$0$0$1$13$71$"			// No thread context class loader -> use class loader of this class."
"ClassUtils.java:199"$1$0$0$3$42$"			cl = ClassUtils.class.getClassLoader();"
"ClassUtils.java:200"$0$0$0$5$20$"			if (cl == null) {"
"ClassUtils.java:201"$1$0$1$8$74$"				// getClassLoader() returning null indicates the bootstrap ClassLoader"
"ClassUtils.java:202"$0$0$0$2$9$"				try {"
"ClassUtils.java:203"$1$0$0$3$45$"					cl = ClassLoader.getSystemClassLoader();"
"ClassUtils.java:204"$0$0$0$1$5$"				}"
"ClassUtils.java:205"$0$0$0$4$26$"				catch (Throwable ex) {"
"ClassUtils.java:206"$0$0$1$15$90$"					// Cannot access system ClassLoader - oh well, maybe the caller can live with null..."
"ClassUtils.java:207"$0$0$0$1$5$"				}"
"ClassUtils.java:208"$0$0$0$1$4$"			}"
"ClassUtils.java:209"$0$0$0$1$3$"		}"
"ClassUtils.java:210"$0$0$0$2$12$"		return cl;"
"ClassUtils.java:211"$0$0$0$1$2$"	}"
"ClassUtils.java:212"$0$0$0$0$0$""
"ClassUtils.java:213"$0$0$0$1$4$"	/**"
"ClassUtils.java:214"$0$0$0$11$83$"	 * Override the thread context ClassLoader with the environment's bean ClassLoader"
"ClassUtils.java:215"$0$0$0$14$78$"	 * if necessary, i.e. if the bean ClassLoader is not equivalent to the thread"
"ClassUtils.java:216"$0$0$0$4$32$"	 * context ClassLoader already."
"ClassUtils.java:217"$0$0$0$12$80$"	 * @param classLoaderToUse the actual ClassLoader to use for the thread context"
"ClassUtils.java:218"$0$0$0$13$86$"	 * @return the original thread context ClassLoader, or {@code null} if not overridden"
"ClassUtils.java:219"$0$0$0$1$4$"	 */"
"ClassUtils.java:220"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:221"$0$0$0$7$101$"	public static ClassLoader overrideThreadContextClassLoader(@Nullable ClassLoader classLoaderToUse) {"
"ClassUtils.java:222"$0$0$0$4$48$"		Thread currentThread = Thread.currentThread();"
"ClassUtils.java:223"$1$0$0$4$79$"		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader();"
"ClassUtils.java:224"$0$0$0$7$87$"		if (classLoaderToUse != null && !classLoaderToUse.equals(threadContextClassLoader)) {"
"ClassUtils.java:225"$0$0$0$1$57$"			currentThread.setContextClassLoader(classLoaderToUse);"
"ClassUtils.java:226"$0$0$0$2$35$"			return threadContextClassLoader;"
"ClassUtils.java:227"$0$0$0$1$3$"		}"
"ClassUtils.java:228"$0$0$0$2$8$"		else {"
"ClassUtils.java:229"$0$0$0$2$15$"			return null;"
"ClassUtils.java:230"$0$0$0$1$3$"		}"
"ClassUtils.java:231"$0$0$0$1$2$"	}"
"ClassUtils.java:232"$0$0$0$0$0$""
"ClassUtils.java:233"$0$0$0$1$4$"	/**"
"ClassUtils.java:234"$0$0$0$10$77$"	 * Replacement for {@code Class.forName()} that also returns Class instances"
"ClassUtils.java:235"$0$0$0$11$72$"	 * for primitives (e.g. ""int"") and array class names (e.g. ""String[]"")."
"ClassUtils.java:236"$0$0$0$14$81$"	 * Furthermore, it is also capable of resolving inner class names in Java source"
"ClassUtils.java:237"$0$0$0$7$78$"	 * style (e.g. ""java.lang.Thread.State"" instead of ""java.lang.Thread$State"")."
"ClassUtils.java:238"$0$0$0$8$37$"	 * @param name the name of the Class"
"ClassUtils.java:239"$0$0$0$8$46$"	 * @param classLoader the class loader to use"
"ClassUtils.java:240"$0$0$0$11$67$"	 * (may be {@code null}, which indicates the default class loader)"
"ClassUtils.java:241"$0$0$0$9$50$"	 * @return a class instance for the supplied name"
"ClassUtils.java:242"$0$0$0$9$61$"	 * @throws ClassNotFoundException if the class was not found"
"ClassUtils.java:243"$0$0$0$11$62$"	 * @throws LinkageError if the class file could not be loaded"
"ClassUtils.java:244"$0$0$0$5$52$"	 * @see Class#forName(String, boolean, ClassLoader)"
"ClassUtils.java:245"$0$0$0$1$4$"	 */"
"ClassUtils.java:246"$0$0$0$8$79$"	public static Class<?> forName(String name, @Nullable ClassLoader classLoader)"
"ClassUtils.java:247"$0$0$0$4$48$"			throws ClassNotFoundException, LinkageError {"
"ClassUtils.java:248"$0$0$0$0$0$""
"ClassUtils.java:249"$0$0$0$6$48$"		Assert.notNull(name, ""Name must not be null"");"
"ClassUtils.java:250"$0$0$0$0$0$""
"ClassUtils.java:251"$0$0$0$4$51$"		Class<?> clazz = resolvePrimitiveClassName(name);"
"ClassUtils.java:252"$0$0$0$5$22$"		if (clazz == null) {"
"ClassUtils.java:253"$1$0$0$3$38$"			clazz = commonClassCache.get(name);"
"ClassUtils.java:254"$0$0$0$1$3$"		}"
"ClassUtils.java:255"$0$0$0$5$22$"		if (clazz != null) {"
"ClassUtils.java:256"$0$0$0$2$16$"			return clazz;"
"ClassUtils.java:257"$0$0$0$1$3$"		}"
"ClassUtils.java:258"$0$0$0$0$0$""
"ClassUtils.java:259"$0$0$1$4$38$"		// ""java.lang.String[]"" style arrays"
"ClassUtils.java:260"$0$0$0$3$36$"		if (name.endsWith(ARRAY_SUFFIX)) {"
"ClassUtils.java:261"$0$0$0$7$86$"			String elementClassName = name.substring(0, name.length() - ARRAY_SUFFIX.length());"
"ClassUtils.java:262"$0$0$0$5$66$"			Class<?> elementClass = forName(elementClassName, classLoader);"
"ClassUtils.java:263"$1$0$0$3$56$"			return Array.newInstance(elementClass, 0).getClass();"
"ClassUtils.java:264"$0$0$0$1$3$"		}"
"ClassUtils.java:265"$0$0$0$0$0$""
"ClassUtils.java:266"$0$0$1$4$39$"		// ""[Ljava.lang.String;"" style arrays"
"ClassUtils.java:267"$0$0$0$5$74$"		if (name.startsWith(NON_PRIMITIVE_ARRAY_PREFIX) && name.endsWith("";"")) {"
"ClassUtils.java:268"$0$0$0$7$95$"			String elementName = name.substring(NON_PRIMITIVE_ARRAY_PREFIX.length(), name.length() - 1);"
"ClassUtils.java:269"$0$0$0$5$61$"			Class<?> elementClass = forName(elementName, classLoader);"
"ClassUtils.java:270"$1$0$0$3$56$"			return Array.newInstance(elementClass, 0).getClass();"
"ClassUtils.java:271"$0$0$0$1$3$"		}"
"ClassUtils.java:272"$0$0$0$0$0$""
"ClassUtils.java:273"$0$0$1$6$49$"		// ""[[I"" or ""[[Ljava.lang.String;"" style arrays"
"ClassUtils.java:274"$0$0$0$3$47$"		if (name.startsWith(INTERNAL_ARRAY_PREFIX)) {"
"ClassUtils.java:275"$0$0$0$4$71$"			String elementName = name.substring(INTERNAL_ARRAY_PREFIX.length());"
"ClassUtils.java:276"$0$0$0$5$61$"			Class<?> elementClass = forName(elementName, classLoader);"
"ClassUtils.java:277"$1$0$0$3$56$"			return Array.newInstance(elementClass, 0).getClass();"
"ClassUtils.java:278"$0$0$0$1$3$"		}"
"ClassUtils.java:279"$0$0$0$0$0$""
"ClassUtils.java:280"$0$0$0$4$36$"		ClassLoader clToUse = classLoader;"
"ClassUtils.java:281"$0$0$0$5$24$"		if (clToUse == null) {"
"ClassUtils.java:282"$1$0$0$3$37$"			clToUse = getDefaultClassLoader();"
"ClassUtils.java:283"$0$0$0$1$3$"		}"
"ClassUtils.java:284"$0$0$0$2$7$"		try {"
"ClassUtils.java:285"$0$0$0$4$46$"			return Class.forName(name, false, clToUse);"
"ClassUtils.java:286"$0$0$0$1$3$"		}"
"ClassUtils.java:287"$0$0$0$4$37$"		catch (ClassNotFoundException ex) {"
"ClassUtils.java:288"$0$0$0$4$58$"			int lastDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR);"
"ClassUtils.java:289"$0$0$0$5$28$"			if (lastDotIndex != -1) {"
"ClassUtils.java:290"$0$0$0$3$27$"				String innerClassName ="
"ClassUtils.java:291"$0$0$0$8$97$"						name.substring(0, lastDotIndex) + INNER_CLASS_SEPARATOR + name.substring(lastDotIndex + 1);"
"ClassUtils.java:292"$0$0$0$2$9$"				try {"
"ClassUtils.java:293"$0$0$0$4$58$"					return Class.forName(innerClassName, false, clToUse);"
"ClassUtils.java:294"$0$0$0$1$5$"				}"
"ClassUtils.java:295"$0$0$0$4$40$"				catch (ClassNotFoundException ex2) {"
"ClassUtils.java:296"$1$0$1$8$52$"					// Swallow - let original exception get through"
"ClassUtils.java:297"$0$0$0$1$5$"				}"
"ClassUtils.java:298"$0$0$0$1$4$"			}"
"ClassUtils.java:299"$0$0$0$2$12$"			throw ex;"
"ClassUtils.java:300"$0$0$0$1$3$"		}"
"ClassUtils.java:301"$0$0$0$1$2$"	}"
"ClassUtils.java:302"$0$0$0$0$0$""
"ClassUtils.java:303"$0$0$0$1$4$"	/**"
"ClassUtils.java:304"$0$0$0$11$64$"	 * Resolve the given class name into a Class instance. Supports"
"ClassUtils.java:305"$0$0$0$10$68$"	 * primitives (like ""int"") and array class names (like ""String[]"")."
"ClassUtils.java:306"$0$0$0$9$60$"	 * <p>This is effectively equivalent to the {@code forName}"
"ClassUtils.java:307"$0$0$0$11$66$"	 * method with the same arguments, with the only difference being"
"ClassUtils.java:308"$0$0$0$10$59$"	 * the exceptions thrown in case of class loading failure."
"ClassUtils.java:309"$0$0$0$8$42$"	 * @param className the name of the Class"
"ClassUtils.java:310"$0$0$0$8$46$"	 * @param classLoader the class loader to use"
"ClassUtils.java:311"$0$0$0$11$67$"	 * (may be {@code null}, which indicates the default class loader)"
"ClassUtils.java:312"$0$0$0$9$50$"	 * @return a class instance for the supplied name"
"ClassUtils.java:313"$0$0$0$10$73$"	 * @throws IllegalArgumentException if the class name was not resolvable"
"ClassUtils.java:314"$0$0$0$17$81$"	 * (that is, the class could not be found or the class file could not be loaded)"
"ClassUtils.java:315"$0$0$0$10$78$"	 * @throws IllegalStateException if the corresponding class is resolvable but"
"ClassUtils.java:316"$0$0$0$13$78$"	 * there was a readability mismatch in the inheritance hierarchy of the class"
"ClassUtils.java:317"$0$0$0$11$77$"	 * (typically a missing dependency declaration in a Jigsaw module definition"
"ClassUtils.java:318"$0$0$0$14$77$"	 * for a superclass or interface implemented by the class to be loaded here)"
"ClassUtils.java:319"$0$0$0$4$38$"	 * @see #forName(String, ClassLoader)"
"ClassUtils.java:320"$0$0$0$1$4$"	 */"
"ClassUtils.java:321"$0$0$0$8$93$"	public static Class<?> resolveClassName(String className, @Nullable ClassLoader classLoader)"
"ClassUtils.java:322"$0$0$0$3$36$"			throws IllegalArgumentException {"
"ClassUtils.java:323"$0$0$0$0$0$""
"ClassUtils.java:324"$0$0$0$2$7$"		try {"
"ClassUtils.java:325"$0$0$0$3$42$"			return forName(className, classLoader);"
"ClassUtils.java:326"$0$0$0$1$3$"		}"
"ClassUtils.java:327"$0$0$0$4$34$"		catch (IllegalAccessError err) {"
"ClassUtils.java:328"$0$0$0$11$95$"			throw new IllegalStateException(""Readability mismatch in inheritance hierarchy of class ["" +"
"ClassUtils.java:329"$1$0$0$7$48$"					className + ""]: "" + err.getMessage(), err);"
"ClassUtils.java:330"$0$0$0$1$3$"		}"
"ClassUtils.java:331"$0$0$0$4$28$"		catch (LinkageError err) {"
"ClassUtils.java:332"$0$0$0$13$106$"			throw new IllegalArgumentException(""Unresolvable class definition for class ["" + className + ""]"", err);"
"ClassUtils.java:333"$0$0$0$1$3$"		}"
"ClassUtils.java:334"$0$0$0$4$37$"		catch (ClassNotFoundException ex) {"
"ClassUtils.java:335"$0$0$0$12$86$"			throw new IllegalArgumentException(""Could not find class ["" + className + ""]"", ex);"
"ClassUtils.java:336"$0$0$0$1$3$"		}"
"ClassUtils.java:337"$0$0$0$1$2$"	}"
"ClassUtils.java:338"$0$0$0$0$0$""
"ClassUtils.java:339"$0$0$0$1$4$"	/**"
"ClassUtils.java:340"$0$0$0$13$82$"	 * Determine whether the {@link Class} identified by the supplied name is present"
"ClassUtils.java:341"$0$0$0$14$71$"	 * and can be loaded. Will return {@code false} if either the class or"
"ClassUtils.java:342"$0$0$0$12$63$"	 * one of its dependencies is not present or cannot be loaded."
"ClassUtils.java:343"$0$0$0$10$51$"	 * @param className the name of the class to check"
"ClassUtils.java:344"$0$0$0$8$46$"	 * @param classLoader the class loader to use"
"ClassUtils.java:345"$0$0$0$11$66$"	 * (may be {@code null} which indicates the default class loader)"
"ClassUtils.java:346"$0$0$0$12$72$"	 * @return whether the specified class is present (including all of its"
"ClassUtils.java:347"$0$0$0$4$32$"	 * superclasses and interfaces)"
"ClassUtils.java:348"$0$0$0$10$78$"	 * @throws IllegalStateException if the corresponding class is resolvable but"
"ClassUtils.java:349"$0$0$0$13$78$"	 * there was a readability mismatch in the inheritance hierarchy of the class"
"ClassUtils.java:350"$0$0$0$11$77$"	 * (typically a missing dependency declaration in a Jigsaw module definition"
"ClassUtils.java:351"$0$0$0$14$78$"	 * for a superclass or interface implemented by the class to be checked here)"
"ClassUtils.java:352"$0$0$0$1$4$"	 */"
"ClassUtils.java:353"$0$0$0$9$87$"	public static boolean isPresent(String className, @Nullable ClassLoader classLoader) {"
"ClassUtils.java:354"$0$0$0$2$7$"		try {"
"ClassUtils.java:355"$0$0$0$2$35$"			forName(className, classLoader);"
"ClassUtils.java:356"$0$0$0$2$15$"			return true;"
"ClassUtils.java:357"$0$0$0$1$3$"		}"
"ClassUtils.java:358"$0$0$0$4$34$"		catch (IllegalAccessError err) {"
"ClassUtils.java:359"$0$0$0$11$95$"			throw new IllegalStateException(""Readability mismatch in inheritance hierarchy of class ["" +"
"ClassUtils.java:360"$1$0$0$7$48$"					className + ""]: "" + err.getMessage(), err);"
"ClassUtils.java:361"$0$0$0$1$3$"		}"
"ClassUtils.java:362"$0$0$0$4$24$"		catch (Throwable ex) {"
"ClassUtils.java:363"$0$0$1$5$65$"			// Typically ClassNotFoundException or NoClassDefFoundError..."
"ClassUtils.java:364"$0$0$0$2$16$"			return false;"
"ClassUtils.java:365"$0$0$0$1$3$"		}"
"ClassUtils.java:366"$0$0$0$1$2$"	}"
"ClassUtils.java:367"$0$0$0$0$0$""
"ClassUtils.java:368"$0$0$0$1$4$"	/**"
"ClassUtils.java:369"$0$0$0$12$70$"	 * Check whether the given class is visible in the given ClassLoader."
"ClassUtils.java:370"$0$0$0$10$60$"	 * @param clazz the class to check (typically an interface)"
"ClassUtils.java:371"$0$0$0$8$55$"	 * @param classLoader the ClassLoader to check against"
"ClassUtils.java:372"$0$0$0$15$83$"	 * (may be {@code null} in which case this method will always return {@code true})"
"ClassUtils.java:373"$0$0$0$1$4$"	 */"
"ClassUtils.java:374"$0$0$0$9$85$"	public static boolean isVisible(Class<?> clazz, @Nullable ClassLoader classLoader) {"
"ClassUtils.java:375"$0$0$0$5$28$"		if (classLoader == null) {"
"ClassUtils.java:376"$0$0$0$2$15$"			return true;"
"ClassUtils.java:377"$0$0$0$1$3$"		}"
"ClassUtils.java:378"$0$0$0$2$7$"		try {"
"ClassUtils.java:379"$1$0$0$5$47$"			if (clazz.getClassLoader() == classLoader) {"
"ClassUtils.java:380"$0$0$0$2$16$"				return true;"
"ClassUtils.java:381"$0$0$0$1$4$"			}"
"ClassUtils.java:382"$0$0$0$1$3$"		}"
"ClassUtils.java:383"$0$0$0$4$32$"		catch (SecurityException ex) {"
"ClassUtils.java:384"$0$0$1$7$42$"			// Fall through to loadable check below"
"ClassUtils.java:385"$0$0$0$1$3$"		}"
"ClassUtils.java:386"$0$0$0$0$0$""
"ClassUtils.java:387"$0$0$1$11$63$"		// Visible if same Class can be loaded from given ClassLoader"
"ClassUtils.java:388"$0$0$0$3$40$"		return isLoadable(clazz, classLoader);"
"ClassUtils.java:389"$0$0$0$1$2$"	}"
"ClassUtils.java:390"$0$0$0$0$0$""
"ClassUtils.java:391"$0$0$0$1$4$"	/**"
"ClassUtils.java:392"$0$0$0$12$69$"	 * Check whether the given class is cache-safe in the given context,"
"ClassUtils.java:393"$0$0$0$15$73$"	 * i.e. whether it is loaded by the given ClassLoader or a parent of it."
"ClassUtils.java:394"$0$0$0$7$37$"	 * @param clazz the class to analyze"
"ClassUtils.java:395"$0$0$0$10$71$"	 * @param classLoader the ClassLoader to potentially cache metadata in"
"ClassUtils.java:396"$0$0$0$11$65$"	 * (may be {@code null} which indicates the system class loader)"
"ClassUtils.java:397"$0$0$0$1$4$"	 */"
"ClassUtils.java:398"$0$0$0$9$87$"	public static boolean isCacheSafe(Class<?> clazz, @Nullable ClassLoader classLoader) {"
"ClassUtils.java:399"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:400"$0$0$0$2$7$"		try {"
"ClassUtils.java:401"$2$0$0$4$47$"			ClassLoader target = clazz.getClassLoader();"
"ClassUtils.java:402"$0$0$1$3$18$"			// Common cases"
"ClassUtils.java:403"$2$0$0$9$49$"			if (target == classLoader || target == null) {"
"ClassUtils.java:404"$0$0$0$2$16$"				return true;"
"ClassUtils.java:405"$0$0$0$1$4$"			}"
"ClassUtils.java:406"$0$0$0$5$29$"			if (classLoader == null) {"
"ClassUtils.java:407"$0$0$0$2$17$"				return false;"
"ClassUtils.java:408"$0$0$0$1$4$"			}"
"ClassUtils.java:409"$0$0$1$8$46$"			// Check for match in ancestors -> positive"
"ClassUtils.java:410"$0$0$0$4$37$"			ClassLoader current = classLoader;"
"ClassUtils.java:411"$0$0$0$5$28$"			while (current != null) {"
"ClassUtils.java:412"$1$0$0$3$34$"				current = current.getParent();"
"ClassUtils.java:413"$1$0$0$5$28$"				if (current == target) {"
"ClassUtils.java:414"$0$0$0$2$17$"					return true;"
"ClassUtils.java:415"$0$0$0$1$5$"				}"
"ClassUtils.java:416"$0$0$0$1$4$"			}"
"ClassUtils.java:417"$0$0$1$8$45$"			// Check for match in children -> negative"
"ClassUtils.java:418"$1$0$0$5$27$"			while (target != null) {"
"ClassUtils.java:419"$3$0$0$3$32$"				target = target.getParent();"
"ClassUtils.java:420"$1$0$0$5$32$"				if (target == classLoader) {"
"ClassUtils.java:421"$0$0$0$2$18$"					return false;"
"ClassUtils.java:422"$0$0$0$1$5$"				}"
"ClassUtils.java:423"$0$0$0$1$4$"			}"
"ClassUtils.java:424"$0$0$0$1$3$"		}"
"ClassUtils.java:425"$0$0$0$4$32$"		catch (SecurityException ex) {"
"ClassUtils.java:426"$0$0$1$7$42$"			// Fall through to loadable check below"
"ClassUtils.java:427"$0$0$0$1$3$"		}"
"ClassUtils.java:428"$0$0$0$0$0$""
"ClassUtils.java:429"$0$0$1$7$65$"		// Fallback for ClassLoaders without parent/child relationship:"
"ClassUtils.java:430"$0$0$1$11$60$"		// safe if same Class can be loaded from given ClassLoader"
"ClassUtils.java:431"$0$0$0$7$65$"		return (classLoader != null && isLoadable(clazz, classLoader));"
"ClassUtils.java:432"$0$0$0$1$2$"	}"
"ClassUtils.java:433"$0$0$0$0$0$""
"ClassUtils.java:434"$0$0$0$1$4$"	/**"
"ClassUtils.java:435"$0$0$0$12$71$"	 * Check whether the given class is loadable in the given ClassLoader."
"ClassUtils.java:436"$0$0$0$10$60$"	 * @param clazz the class to check (typically an interface)"
"ClassUtils.java:437"$0$0$0$8$55$"	 * @param classLoader the ClassLoader to check against"
"ClassUtils.java:438"$0$0$0$3$16$"	 * @since 5.0.6"
"ClassUtils.java:439"$0$0$0$1$4$"	 */"
"ClassUtils.java:440"$0$0$0$8$77$"	private static boolean isLoadable(Class<?> clazz, ClassLoader classLoader) {"
"ClassUtils.java:441"$0$0$0$2$7$"		try {"
"ClassUtils.java:442"$1$0$0$4$60$"			return (clazz == classLoader.loadClass(clazz.getName()));"
"ClassUtils.java:443"$0$0$1$8$48$"			// Else: different class with same name found"
"ClassUtils.java:444"$0$0$0$1$3$"		}"
"ClassUtils.java:445"$0$0$0$4$37$"		catch (ClassNotFoundException ex) {"
"ClassUtils.java:446"$0$0$1$7$41$"			// No corresponding class found at all"
"ClassUtils.java:447"$0$0$0$2$16$"			return false;"
"ClassUtils.java:448"$0$0$0$1$3$"		}"
"ClassUtils.java:449"$0$0$0$1$2$"	}"
"ClassUtils.java:450"$0$0$0$0$0$""
"ClassUtils.java:451"$0$0$0$1$4$"	/**"
"ClassUtils.java:452"$0$0$0$11$68$"	 * Resolve the given class name as primitive class, if appropriate,"
"ClassUtils.java:453"$0$0$0$10$62$"	 * according to the JVM's naming rules for primitive classes."
"ClassUtils.java:454"$0$0$0$11$73$"	 * <p>Also supports the JVM's internal class names for primitive arrays."
"ClassUtils.java:455"$0$0$0$11$74$"	 * Does <i>not</i> support the ""[]"" suffix notation for primitive arrays;"
"ClassUtils.java:456"$0$0$0$9$68$"	 * this is only supported by {@link #forName(String, ClassLoader)}."
"ClassUtils.java:457"$0$0$0$10$59$"	 * @param name the name of the potentially primitive class"
"ClassUtils.java:458"$0$0$0$14$76$"	 * @return the primitive class, or {@code null} if the name does not denote"
"ClassUtils.java:459"$0$0$0$8$46$"	 * a primitive class or primitive array class"
"ClassUtils.java:460"$0$0$0$1$4$"	 */"
"ClassUtils.java:461"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:462"$0$0$0$7$74$"	public static Class<?> resolvePrimitiveClassName(@Nullable String name) {"
"ClassUtils.java:463"$0$0$0$4$25$"		Class<?> result = null;"
"ClassUtils.java:464"$0$0$1$11$63$"		// Most class names will be quite long, considering that they"
"ClassUtils.java:465"$0$0$1$12$62$"		// SHOULD sit in a package, so a length check is worthwhile."
"ClassUtils.java:466"$0$0$0$9$43$"		if (name != null && name.length() <= 7) {"
"ClassUtils.java:467"$0$0$1$7$36$"			// Could be a primitive - likely."
"ClassUtils.java:468"$1$0$0$3$43$"			result = primitiveTypeNameMap.get(name);"
"ClassUtils.java:469"$0$0$0$1$3$"		}"
"ClassUtils.java:470"$0$0$0$2$16$"		return result;"
"ClassUtils.java:471"$0$0$0$1$2$"	}"
"ClassUtils.java:472"$0$0$0$0$0$""
"ClassUtils.java:473"$0$0$0$1$4$"	/**"
"ClassUtils.java:474"$0$0$0$10$60$"	 * Check if the given class represents a primitive wrapper,"
"ClassUtils.java:475"$0$0$0$11$74$"	 * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, Double, or"
"ClassUtils.java:476"$0$0$0$2$9$"	 * Void."
"ClassUtils.java:477"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:478"$0$0$0$11$64$"	 * @return whether the given class is a primitive wrapper class"
"ClassUtils.java:479"$0$0$0$1$4$"	 */"
"ClassUtils.java:480"$0$0$0$6$59$"	public static boolean isPrimitiveWrapper(Class<?> clazz) {"
"ClassUtils.java:481"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:482"$0$0$0$2$52$"		return primitiveWrapperTypeMap.containsKey(clazz);"
"ClassUtils.java:483"$0$0$0$1$2$"	}"
"ClassUtils.java:484"$0$0$0$0$0$""
"ClassUtils.java:485"$0$0$0$1$4$"	/**"
"ClassUtils.java:486"$0$0$0$12$72$"	 * Check if the given class represents a primitive (i.e. boolean, byte,"
"ClassUtils.java:487"$0$0$0$14$77$"	 * char, short, int, long, float, or double), {@code void}, or a wrapper for"
"ClassUtils.java:488"$0$0$0$11$76$"	 * those types (i.e. Boolean, Byte, Character, Short, Integer, Long, Float,"
"ClassUtils.java:489"$0$0$0$4$21$"	 * Double, or Void)."
"ClassUtils.java:490"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:491"$0$0$0$13$76$"	 * @return {@code true} if the given class represents a primitive, void, or"
"ClassUtils.java:492"$0$0$0$4$19$"	 * a wrapper class"
"ClassUtils.java:493"$0$0$0$1$4$"	 */"
"ClassUtils.java:494"$0$0$0$6$61$"	public static boolean isPrimitiveOrWrapper(Class<?> clazz) {"
"ClassUtils.java:495"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:496"$0$0$0$4$60$"		return (clazz.isPrimitive() || isPrimitiveWrapper(clazz));"
"ClassUtils.java:497"$0$0$0$1$2$"	}"
"ClassUtils.java:498"$0$0$0$0$0$""
"ClassUtils.java:499"$0$0$0$1$4$"	/**"
"ClassUtils.java:500"$0$0$0$11$63$"	 * Check if the given class represents an array of primitives,"
"ClassUtils.java:501"$0$0$0$11$65$"	 * i.e. boolean, byte, char, short, int, long, float, or double."
"ClassUtils.java:502"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:503"$0$0$0$11$62$"	 * @return whether the given class is a primitive array class"
"ClassUtils.java:504"$0$0$0$1$4$"	 */"
"ClassUtils.java:505"$0$0$0$6$57$"	public static boolean isPrimitiveArray(Class<?> clazz) {"
"ClassUtils.java:506"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:507"$1$0$0$4$69$"		return (clazz.isArray() && clazz.getComponentType().isPrimitive());"
"ClassUtils.java:508"$0$0$0$1$2$"	}"
"ClassUtils.java:509"$0$0$0$0$0$""
"ClassUtils.java:510"$0$0$0$1$4$"	/**"
"ClassUtils.java:511"$0$0$0$12$71$"	 * Check if the given class represents an array of primitive wrappers,"
"ClassUtils.java:512"$0$0$0$11$74$"	 * i.e. Boolean, Byte, Character, Short, Integer, Long, Float, or Double."
"ClassUtils.java:513"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:514"$0$0$0$12$70$"	 * @return whether the given class is a primitive wrapper array class"
"ClassUtils.java:515"$0$0$0$1$4$"	 */"
"ClassUtils.java:516"$0$0$0$6$64$"	public static boolean isPrimitiveWrapperArray(Class<?> clazz) {"
"ClassUtils.java:517"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:518"$1$0$0$4$75$"		return (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));"
"ClassUtils.java:519"$0$0$0$1$2$"	}"
"ClassUtils.java:520"$0$0$0$0$0$""
"ClassUtils.java:521"$0$0$0$1$4$"	/**"
"ClassUtils.java:522"$0$0$0$11$55$"	 * Resolve the given class if it is a primitive class,"
"ClassUtils.java:523"$0$0$0$8$63$"	 * returning the corresponding primitive wrapper type instead."
"ClassUtils.java:524"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:525"$0$0$0$14$86$"	 * @return the original class, or a primitive wrapper for the original primitive type"
"ClassUtils.java:526"$0$0$0$1$4$"	 */"
"ClassUtils.java:527"$0$0$0$6$69$"	public static Class<?> resolvePrimitiveIfNecessary(Class<?> clazz) {"
"ClassUtils.java:528"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:529"$1$0$0$10$101$"		return (clazz.isPrimitive() && clazz != void.class ? primitiveTypeToWrapperMap.get(clazz) : clazz);"
"ClassUtils.java:530"$0$0$0$1$2$"	}"
"ClassUtils.java:531"$0$0$0$0$0$""
"ClassUtils.java:532"$0$0$0$1$4$"	/**"
"ClassUtils.java:533"$0$0$0$14$75$"	 * Check if the right-hand side type may be assigned to the left-hand side"
"ClassUtils.java:534"$0$0$0$9$69$"	 * type, assuming setting by reflection. Considers primitive wrapper"
"ClassUtils.java:535"$0$0$0$9$63$"	 * classes as assignable to the corresponding primitive types."
"ClassUtils.java:536"$1$0$0$6$34$"	 * @param lhsType the target type"
"ClassUtils.java:537"$1$0$0$14$76$"	 * @param rhsType the value type that should be assigned to the target type"
"ClassUtils.java:538"$1$0$0$12$64$"	 * @return if the target type is assignable from the value type"
"ClassUtils.java:539"$0$0$0$4$79$"	 * @see TypeUtils#isAssignable(java.lang.reflect.Type, java.lang.reflect.Type)"
"ClassUtils.java:540"$0$0$0$1$4$"	 */"
"ClassUtils.java:541"$0$0$0$8$73$"	public static boolean isAssignable(Class<?> lhsType, Class<?> rhsType) {"
"ClassUtils.java:542"$0$0$0$8$66$"		Assert.notNull(lhsType, ""Left-hand side type must not be null"");"
"ClassUtils.java:543"$0$0$0$8$67$"		Assert.notNull(rhsType, ""Right-hand side type must not be null"");"
"ClassUtils.java:544"$0$0$0$3$42$"		if (lhsType.isAssignableFrom(rhsType)) {"
"ClassUtils.java:545"$0$0$0$2$15$"			return true;"
"ClassUtils.java:546"$0$0$0$1$3$"		}"
"ClassUtils.java:547"$0$0$0$3$30$"		if (lhsType.isPrimitive()) {"
"ClassUtils.java:548"$1$0$0$4$69$"			Class<?> resolvedPrimitive = primitiveWrapperTypeMap.get(rhsType);"
"ClassUtils.java:549"$0$0$0$4$41$"			return (lhsType == resolvedPrimitive);"
"ClassUtils.java:550"$0$0$0$1$3$"		}"
"ClassUtils.java:551"$0$0$0$2$8$"		else {"
"ClassUtils.java:552"$1$0$0$4$69$"			Class<?> resolvedWrapper = primitiveTypeToWrapperMap.get(rhsType);"
"ClassUtils.java:553"$0$0$0$6$81$"			return (resolvedWrapper != null && lhsType.isAssignableFrom(resolvedWrapper));"
"ClassUtils.java:554"$0$0$0$1$3$"		}"
"ClassUtils.java:555"$0$0$0$1$2$"	}"
"ClassUtils.java:556"$0$0$0$0$0$""
"ClassUtils.java:557"$0$0$0$1$4$"	/**"
"ClassUtils.java:558"$0$0$0$12$67$"	 * Determine if the given type is assignable from the given value,"
"ClassUtils.java:559"$0$0$0$9$71$"	 * assuming setting by reflection. Considers primitive wrapper classes"
"ClassUtils.java:560"$0$0$0$8$55$"	 * as assignable to the corresponding primitive types."
"ClassUtils.java:561"$1$0$0$6$31$"	 * @param type the target type"
"ClassUtils.java:562"$0$0$0$12$62$"	 * @param value the value that should be assigned to the type"
"ClassUtils.java:563"$0$0$0$10$52$"	 * @return if the type is assignable from the value"
"ClassUtils.java:564"$0$0$0$1$4$"	 */"
"ClassUtils.java:565"$0$0$0$9$81$"	public static boolean isAssignableValue(Class<?> type, @Nullable Object value) {"
"ClassUtils.java:566"$0$0$0$6$48$"		Assert.notNull(type, ""Type must not be null"");"
"ClassUtils.java:567"$1$0$0$9$86$"		return (value != null ? isAssignable(type, value.getClass()) : !type.isPrimitive());"
"ClassUtils.java:568"$0$0$0$1$2$"	}"
"ClassUtils.java:569"$0$0$0$0$0$""
"ClassUtils.java:570"$0$0$0$1$4$"	/**"
"ClassUtils.java:571"$0$0$0$13$80$"	 * Convert a ""/""-based resource path to a "".""-based fully qualified class name."
"ClassUtils.java:572"$0$0$0$10$61$"	 * @param resourcePath the resource path pointing to a class"
"ClassUtils.java:573"$0$0$0$8$56$"	 * @return the corresponding fully qualified class name"
"ClassUtils.java:574"$0$0$0$1$4$"	 */"
"ClassUtils.java:575"$0$0$0$6$75$"	public static String convertResourcePathToClassName(String resourcePath) {"
"ClassUtils.java:576"$0$0$0$7$65$"		Assert.notNull(resourcePath, ""Resource path must not be null"");"
"ClassUtils.java:577"$0$0$0$3$65$"		return resourcePath.replace(PATH_SEPARATOR, PACKAGE_SEPARATOR);"
"ClassUtils.java:578"$0$0$0$1$2$"	}"
"ClassUtils.java:579"$0$0$0$0$0$""
"ClassUtils.java:580"$0$0$0$1$4$"	/**"
"ClassUtils.java:581"$0$0$0$13$80$"	 * Convert a "".""-based fully qualified class name to a ""/""-based resource path."
"ClassUtils.java:582"$0$0$0$8$51$"	 * @param className the fully qualified class name"
"ClassUtils.java:583"$0$0$0$10$66$"	 * @return the corresponding resource path, pointing to the class"
"ClassUtils.java:584"$0$0$0$1$4$"	 */"
"ClassUtils.java:585"$0$0$0$6$72$"	public static String convertClassNameToResourcePath(String className) {"
"ClassUtils.java:586"$0$0$0$7$59$"		Assert.notNull(className, ""Class name must not be null"");"
"ClassUtils.java:587"$0$0$0$3$62$"		return className.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);"
"ClassUtils.java:588"$0$0$0$1$2$"	}"
"ClassUtils.java:589"$0$0$0$0$0$""
"ClassUtils.java:590"$0$0$0$1$4$"	/**"
"ClassUtils.java:591"$1$0$0$10$71$"	 * Return a path suitable for use with {@code ClassLoader.getResource}"
"ClassUtils.java:592"$1$0$0$11$73$"	 * (also suitable for use with {@code Class.getResource} by prepending a"
"ClassUtils.java:593"$0$0$0$15$82$"	 * slash ('/') to the return value). Built by taking the package of the specified"
"ClassUtils.java:594"$0$0$0$14$83$"	 * class file, converting all dots ('.') to slashes ('/'), adding a trailing slash"
"ClassUtils.java:595"$0$0$0$11$72$"	 * if necessary, and concatenating the specified resource name to this."
"ClassUtils.java:596"$0$0$0$14$72$"	 * <br/>As such, this function may be used to build a path suitable for"
"ClassUtils.java:597"$0$0$0$15$72$"	 * loading a resource file that is in the same package as a class file,"
"ClassUtils.java:598"$0$0$0$6$77$"	 * although {@link org.springframework.core.io.ClassPathResource} is usually"
"ClassUtils.java:599"$0$0$0$4$25$"	 * even more convenient."
"ClassUtils.java:600"$0$0$0$13$65$"	 * @param clazz the Class whose package will be used as the base"
"ClassUtils.java:601"$0$0$0$13$81$"	 * @param resourceName the resource name to append. A leading slash is optional."
"ClassUtils.java:602"$0$0$0$6$38$"	 * @return the built-up resource path"
"ClassUtils.java:603"$1$0$0$3$32$"	 * @see ClassLoader#getResource"
"ClassUtils.java:604"$1$0$0$3$26$"	 * @see Class#getResource"
"ClassUtils.java:605"$0$0$0$1$4$"	 */"
"ClassUtils.java:606"$0$0$0$8$89$"	public static String addResourcePathToPackagePath(Class<?> clazz, String resourceName) {"
"ClassUtils.java:607"$0$0$0$7$65$"		Assert.notNull(resourceName, ""Resource name must not be null"");"
"ClassUtils.java:608"$0$0$0$3$38$"		if (!resourceName.startsWith(""/"")) {"
"ClassUtils.java:609"$0$0$0$6$65$"			return classPackageAsResourcePath(clazz) + '/' + resourceName;"
"ClassUtils.java:610"$0$0$0$1$3$"		}"
"ClassUtils.java:611"$0$0$0$4$58$"		return classPackageAsResourcePath(clazz) + resourceName;"
"ClassUtils.java:612"$0$0$0$1$2$"	}"
"ClassUtils.java:613"$0$0$0$0$0$""
"ClassUtils.java:614"$0$0$0$1$4$"	/**"
"ClassUtils.java:615"$0$0$0$13$70$"	 * Given an input class object, return a string which consists of the"
"ClassUtils.java:616"$0$0$0$14$76$"	 * class's package name as a pathname, i.e., all dots ('.') are replaced by"
"ClassUtils.java:617"$0$0$0$13$76$"	 * slashes ('/'). Neither a leading nor trailing slash is added. The result"
"ClassUtils.java:618"$0$0$0$15$73$"	 * could be concatenated with a slash and the name of a resource and fed"
"ClassUtils.java:619"$1$0$0$11$70$"	 * directly to {@code ClassLoader.getResource()}. For it to be fed to"
"ClassUtils.java:620"$1$0$0$10$70$"	 * {@code Class.getResource} instead, a leading slash would also have"
"ClassUtils.java:621"$0$0$0$8$42$"	 * to be prepended to the returned value."
"ClassUtils.java:622"$0$0$0$13$69$"	 * @param clazz the input class. A {@code null} value or the default"
"ClassUtils.java:623"$0$0$0$12$71$"	 * (empty) package will result in an empty string ("""") being returned."
"ClassUtils.java:624"$0$0$0$9$52$"	 * @return a path which represents the package name"
"ClassUtils.java:625"$1$0$0$3$32$"	 * @see ClassLoader#getResource"
"ClassUtils.java:626"$1$0$0$3$26$"	 * @see Class#getResource"
"ClassUtils.java:627"$0$0$0$1$4$"	 */"
"ClassUtils.java:628"$0$0$0$7$76$"	public static String classPackageAsResourcePath(@Nullable Class<?> clazz) {"
"ClassUtils.java:629"$0$0$0$5$22$"		if (clazz == null) {"
"ClassUtils.java:630"$0$0$0$2$13$"			return """";"
"ClassUtils.java:631"$0$0$0$1$3$"		}"
"ClassUtils.java:632"$1$0$0$4$37$"		String className = clazz.getName();"
"ClassUtils.java:633"$0$0$0$4$65$"		int packageEndIndex = className.lastIndexOf(PACKAGE_SEPARATOR);"
"ClassUtils.java:634"$0$0$0$5$30$"		if (packageEndIndex == -1) {"
"ClassUtils.java:635"$0$0$0$2$13$"			return """";"
"ClassUtils.java:636"$0$0$0$1$3$"		}"
"ClassUtils.java:637"$0$0$0$5$63$"		String packageName = className.substring(0, packageEndIndex);"
"ClassUtils.java:638"$0$0$0$3$64$"		return packageName.replace(PACKAGE_SEPARATOR, PATH_SEPARATOR);"
"ClassUtils.java:639"$0$0$0$1$2$"	}"
"ClassUtils.java:640"$0$0$0$0$0$""
"ClassUtils.java:641"$0$0$0$1$4$"	/**"
"ClassUtils.java:642"$0$0$0$12$71$"	 * Build a String that consists of the names of the classes/interfaces"
"ClassUtils.java:643"$0$0$0$5$23$"	 * in the given array."
"ClassUtils.java:644"$0$0$0$7$74$"	 * <p>Basically like {@code AbstractCollection.toString()}, but stripping"
"ClassUtils.java:645"$0$0$0$10$61$"	 * the ""class ""/""interface "" prefix before every class name."
"ClassUtils.java:646"$0$0$0$8$44$"	 * @param classes an array of Class objects"
"ClassUtils.java:647"$0$0$0$8$57$"	 * @return a String of form ""[com.foo.Bar, com.foo.Baz]"""
"ClassUtils.java:648"$0$0$0$3$48$"	 * @see java.util.AbstractCollection#toString()"
"ClassUtils.java:649"$0$0$0$1$4$"	 */"
"ClassUtils.java:650"$0$0$0$6$63$"	public static String classNamesToString(Class<?>... classes) {"
"ClassUtils.java:651"$0$0$0$2$52$"		return classNamesToString(Arrays.asList(classes));"
"ClassUtils.java:652"$0$0$0$1$2$"	}"
"ClassUtils.java:653"$0$0$0$0$0$""
"ClassUtils.java:654"$0$0$0$1$4$"	/**"
"ClassUtils.java:655"$0$0$0$12$71$"	 * Build a String that consists of the names of the classes/interfaces"
"ClassUtils.java:656"$0$0$0$5$28$"	 * in the given collection."
"ClassUtils.java:657"$0$0$0$7$74$"	 * <p>Basically like {@code AbstractCollection.toString()}, but stripping"
"ClassUtils.java:658"$0$0$0$10$61$"	 * the ""class ""/""interface "" prefix before every class name."
"ClassUtils.java:659"$0$0$0$12$70$"	 * @param classes a Collection of Class objects (may be {@code null})"
"ClassUtils.java:660"$0$0$0$8$57$"	 * @return a String of form ""[com.foo.Bar, com.foo.Baz]"""
"ClassUtils.java:661"$0$0$0$3$48$"	 * @see java.util.AbstractCollection#toString()"
"ClassUtils.java:662"$0$0$0$1$4$"	 */"
"ClassUtils.java:663"$0$0$0$7$82$"	public static String classNamesToString(@Nullable Collection<Class<?>> classes) {"
"ClassUtils.java:664"$0$0$0$3$41$"		if (CollectionUtils.isEmpty(classes)) {"
"ClassUtils.java:665"$0$0$0$2$15$"			return ""[]"";"
"ClassUtils.java:666"$0$0$0$1$3$"		}"
"ClassUtils.java:667"$0$0$0$8$63$"		StringJoiner stringJoiner = new StringJoiner("", "", ""["", ""]"");"
"ClassUtils.java:668"$0$0$0$6$34$"		for (Class<?> clazz : classes) {"
"ClassUtils.java:669"$1$0$0$1$37$"			stringJoiner.add(clazz.getName());"
"ClassUtils.java:670"$0$0$0$1$3$"		}"
"ClassUtils.java:671"$0$0$0$2$33$"		return stringJoiner.toString();"
"ClassUtils.java:672"$0$0$0$1$2$"	}"
"ClassUtils.java:673"$0$0$0$0$0$""
"ClassUtils.java:674"$0$0$0$1$4$"	/**"
"ClassUtils.java:675"$0$0$0$11$65$"	 * Copy the given {@code Collection} into a {@code Class} array."
"ClassUtils.java:676"$0$0$0$10$71$"	 * <p>The {@code Collection} must contain {@code Class} elements only."
"ClassUtils.java:677"$0$0$0$8$52$"	 * @param collection the {@code Collection} to copy"
"ClassUtils.java:678"$0$0$0$6$35$"	 * @return the {@code Class} array"
"ClassUtils.java:679"$0$0$0$3$14$"	 * @since 3.1"
"ClassUtils.java:680"$0$0$0$3$34$"	 * @see StringUtils#toStringArray"
"ClassUtils.java:681"$0$0$0$1$4$"	 */"
"ClassUtils.java:682"$0$0$0$7$83$"	public static Class<?>[] toClassArray(@Nullable Collection<Class<?>> collection) {"
"ClassUtils.java:683"$0$0$0$6$108$"		return (!CollectionUtils.isEmpty(collection) ? collection.toArray(EMPTY_CLASS_ARRAY) : EMPTY_CLASS_ARRAY);"
"ClassUtils.java:684"$0$0$0$1$2$"	}"
"ClassUtils.java:685"$0$0$0$0$0$""
"ClassUtils.java:686"$0$0$0$1$4$"	/**"
"ClassUtils.java:687"$0$0$0$12$73$"	 * Return all interfaces that the given instance implements as an array,"
"ClassUtils.java:688"$0$0$0$6$47$"	 * including ones implemented by superclasses."
"ClassUtils.java:689"$0$0$0$9$58$"	 * @param instance the instance to analyze for interfaces"
"ClassUtils.java:690"$0$0$0$12$73$"	 * @return all interfaces that the given instance implements as an array"
"ClassUtils.java:691"$0$0$0$1$4$"	 */"
"ClassUtils.java:692"$1$0$0$6$61$"	public static Class<?>[] getAllInterfaces(Object instance) {"
"ClassUtils.java:693"$0$0$0$6$56$"		Assert.notNull(instance, ""Instance must not be null"");"
"ClassUtils.java:694"$2$0$0$2$55$"		return getAllInterfacesForClass(instance.getClass());"
"ClassUtils.java:695"$0$0$0$1$2$"	}"
"ClassUtils.java:696"$0$0$0$0$0$""
"ClassUtils.java:697"$0$0$0$1$4$"	/**"
"ClassUtils.java:698"$0$0$0$12$70$"	 * Return all interfaces that the given class implements as an array,"
"ClassUtils.java:699"$0$0$0$6$47$"	 * including ones implemented by superclasses."
"ClassUtils.java:700"$1$0$0$14$79$"	 * <p>If the class itself is an interface, it gets returned as sole interface."
"ClassUtils.java:701"$0$0$0$9$52$"	 * @param clazz the class to analyze for interfaces"
"ClassUtils.java:702"$0$0$0$12$71$"	 * @return all interfaces that the given object implements as an array"
"ClassUtils.java:703"$0$0$0$1$4$"	 */"
"ClassUtils.java:704"$1$0$0$6$68$"	public static Class<?>[] getAllInterfacesForClass(Class<?> clazz) {"
"ClassUtils.java:705"$1$0$0$3$47$"		return getAllInterfacesForClass(clazz, null);"
"ClassUtils.java:706"$0$0$0$1$2$"	}"
"ClassUtils.java:707"$0$0$0$0$0$""
"ClassUtils.java:708"$0$0$0$1$4$"	/**"
"ClassUtils.java:709"$0$0$0$12$70$"	 * Return all interfaces that the given class implements as an array,"
"ClassUtils.java:710"$0$0$0$6$47$"	 * including ones implemented by superclasses."
"ClassUtils.java:711"$1$0$0$14$79$"	 * <p>If the class itself is an interface, it gets returned as sole interface."
"ClassUtils.java:712"$0$0$0$9$52$"	 * @param clazz the class to analyze for interfaces"
"ClassUtils.java:713"$0$0$0$13$80$"	 * @param classLoader the ClassLoader that the interfaces need to be visible in"
"ClassUtils.java:714"$0$0$0$10$64$"	 * (may be {@code null} when accepting all declared interfaces)"
"ClassUtils.java:715"$0$0$0$12$71$"	 * @return all interfaces that the given object implements as an array"
"ClassUtils.java:716"$0$0$0$1$4$"	 */"
"ClassUtils.java:717"$1$0$0$9$103$"	public static Class<?>[] getAllInterfacesForClass(Class<?> clazz, @Nullable ClassLoader classLoader) {"
"ClassUtils.java:718"$1$0$0$3$73$"		return toClassArray(getAllInterfacesForClassAsSet(clazz, classLoader));"
"ClassUtils.java:719"$0$0$0$1$2$"	}"
"ClassUtils.java:720"$0$0$0$0$0$""
"ClassUtils.java:721"$0$0$0$1$4$"	/**"
"ClassUtils.java:722"$0$0$0$12$70$"	 * Return all interfaces that the given instance implements as a Set,"
"ClassUtils.java:723"$0$0$0$6$47$"	 * including ones implemented by superclasses."
"ClassUtils.java:724"$0$0$0$9$58$"	 * @param instance the instance to analyze for interfaces"
"ClassUtils.java:725"$0$0$0$12$70$"	 * @return all interfaces that the given instance implements as a Set"
"ClassUtils.java:726"$0$0$0$1$4$"	 */"
"ClassUtils.java:727"$1$0$0$6$69$"	public static Set<Class<?>> getAllInterfacesAsSet(Object instance) {"
"ClassUtils.java:728"$0$0$0$6$56$"		Assert.notNull(instance, ""Instance must not be null"");"
"ClassUtils.java:729"$2$0$0$2$60$"		return getAllInterfacesForClassAsSet(instance.getClass());"
"ClassUtils.java:730"$0$0$0$1$2$"	}"
"ClassUtils.java:731"$0$0$0$0$0$""
"ClassUtils.java:732"$0$0$0$1$4$"	/**"
"ClassUtils.java:733"$0$0$0$12$67$"	 * Return all interfaces that the given class implements as a Set,"
"ClassUtils.java:734"$0$0$0$6$47$"	 * including ones implemented by superclasses."
"ClassUtils.java:735"$1$0$0$14$79$"	 * <p>If the class itself is an interface, it gets returned as sole interface."
"ClassUtils.java:736"$0$0$0$9$52$"	 * @param clazz the class to analyze for interfaces"
"ClassUtils.java:737"$0$0$0$12$68$"	 * @return all interfaces that the given object implements as a Set"
"ClassUtils.java:738"$0$0$0$1$4$"	 */"
"ClassUtils.java:739"$1$0$0$6$76$"	public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz) {"
"ClassUtils.java:740"$1$0$0$3$52$"		return getAllInterfacesForClassAsSet(clazz, null);"
"ClassUtils.java:741"$0$0$0$1$2$"	}"
"ClassUtils.java:742"$0$0$0$0$0$""
"ClassUtils.java:743"$0$0$0$1$4$"	/**"
"ClassUtils.java:744"$0$0$0$12$67$"	 * Return all interfaces that the given class implements as a Set,"
"ClassUtils.java:745"$0$0$0$6$47$"	 * including ones implemented by superclasses."
"ClassUtils.java:746"$1$0$0$14$79$"	 * <p>If the class itself is an interface, it gets returned as sole interface."
"ClassUtils.java:747"$0$0$0$9$52$"	 * @param clazz the class to analyze for interfaces"
"ClassUtils.java:748"$0$0$0$13$80$"	 * @param classLoader the ClassLoader that the interfaces need to be visible in"
"ClassUtils.java:749"$0$0$0$10$64$"	 * (may be {@code null} when accepting all declared interfaces)"
"ClassUtils.java:750"$0$0$0$12$68$"	 * @return all interfaces that the given object implements as a Set"
"ClassUtils.java:751"$0$0$0$1$4$"	 */"
"ClassUtils.java:752"$1$0$0$9$111$"	public static Set<Class<?>> getAllInterfacesForClassAsSet(Class<?> clazz, @Nullable ClassLoader classLoader) {"
"ClassUtils.java:753"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:754"$0$0$0$6$61$"		if (clazz.isInterface() && isVisible(clazz, classLoader)) {"
"ClassUtils.java:755"$0$0$0$2$39$"			return Collections.singleton(clazz);"
"ClassUtils.java:756"$0$0$0$1$3$"		}"
"ClassUtils.java:757"$0$0$0$5$51$"		Set<Class<?>> interfaces = new LinkedHashSet<>();"
"ClassUtils.java:758"$0$0$0$4$27$"		Class<?> current = clazz;"
"ClassUtils.java:759"$0$0$0$5$27$"		while (current != null) {"
"ClassUtils.java:760"$1$0$0$4$45$"			Class<?>[] ifcs = current.getInterfaces();"
"ClassUtils.java:761"$0$0$0$6$30$"			for (Class<?> ifc : ifcs) {"
"ClassUtils.java:762"$0$0$0$4$38$"				if (isVisible(ifc, classLoader)) {"
"ClassUtils.java:763"$0$0$0$1$25$"					interfaces.add(ifc);"
"ClassUtils.java:764"$0$0$0$1$5$"				}"
"ClassUtils.java:765"$0$0$0$1$4$"			}"
"ClassUtils.java:766"$1$0$0$3$37$"			current = current.getSuperclass();"
"ClassUtils.java:767"$0$0$0$1$3$"		}"
"ClassUtils.java:768"$0$0$0$2$20$"		return interfaces;"
"ClassUtils.java:769"$0$0$0$1$2$"	}"
"ClassUtils.java:770"$0$0$0$0$0$""
"ClassUtils.java:771"$0$0$0$1$4$"	/**"
"ClassUtils.java:772"$0$0$0$10$64$"	 * Create a composite interface Class for the given interfaces,"
"ClassUtils.java:773"$0$0$0$9$58$"	 * implementing the given interfaces in one single Class."
"ClassUtils.java:774"$0$0$0$12$77$"	 * <p>This implementation builds a JDK proxy class for the given interfaces."
"ClassUtils.java:775"$0$0$0$7$45$"	 * @param interfaces the interfaces to merge"
"ClassUtils.java:776"$0$0$0$11$71$"	 * @param classLoader the ClassLoader to create the composite Class in"
"ClassUtils.java:777"$0$0$0$7$41$"	 * @return the merged interface as Class"
"ClassUtils.java:778"$0$0$0$8$71$"	 * @throws IllegalArgumentException if the specified interfaces expose"
"ClassUtils.java:779"$0$0$0$10$71$"	 * conflicting method signatures (or a similar constraint is violated)"
"ClassUtils.java:780"$1$0$0$3$46$"	 * @see java.lang.reflect.Proxy#getProxyClass"
"ClassUtils.java:781"$0$0$0$1$4$"	 */"
"ClassUtils.java:782"$0$0$0$5$46$"	@SuppressWarnings(""deprecation"")  // on JDK 9"
"ClassUtils.java:783"$0$0$0$9$108$"	public static Class<?> createCompositeInterface(Class<?>[] interfaces, @Nullable ClassLoader classLoader) {"
"ClassUtils.java:784"$0$0$0$7$67$"		Assert.notEmpty(interfaces, ""Interface array must not be empty"");"
"ClassUtils.java:785"$1$0$0$3$54$"		return Proxy.getProxyClass(classLoader, interfaces);"
"ClassUtils.java:786"$0$0$0$1$2$"	}"
"ClassUtils.java:787"$0$0$0$0$0$""
"ClassUtils.java:788"$0$0$0$1$4$"	/**"
"ClassUtils.java:789"$0$0$0$11$63$"	 * Determine the common ancestor of the given classes, if any."
"ClassUtils.java:790"$0$0$0$7$41$"	 * @param clazz1 the class to introspect"
"ClassUtils.java:791"$0$0$0$8$47$"	 * @param clazz2 the other class to introspect"
"ClassUtils.java:792"$0$0$0$10$70$"	 * @return the common ancestor (i.e. common superclass, one interface"
"ClassUtils.java:793"$0$0$0$14$70$"	 * extending the other), or {@code null} if none found. If any of the"
"ClassUtils.java:794"$0$0$0$12$68$"	 * given classes is {@code null}, the other class will be returned."
"ClassUtils.java:795"$0$0$0$3$16$"	 * @since 3.2.6"
"ClassUtils.java:796"$0$0$0$1$4$"	 */"
"ClassUtils.java:797"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:798"$0$0$0$10$103$"	public static Class<?> determineCommonAncestor(@Nullable Class<?> clazz1, @Nullable Class<?> clazz2) {"
"ClassUtils.java:799"$0$0$0$5$23$"		if (clazz1 == null) {"
"ClassUtils.java:800"$0$0$0$2$17$"			return clazz2;"
"ClassUtils.java:801"$0$0$0$1$3$"		}"
"ClassUtils.java:802"$0$0$0$5$23$"		if (clazz2 == null) {"
"ClassUtils.java:803"$0$0$0$2$17$"			return clazz1;"
"ClassUtils.java:804"$0$0$0$1$3$"		}"
"ClassUtils.java:805"$0$0$0$3$40$"		if (clazz1.isAssignableFrom(clazz2)) {"
"ClassUtils.java:806"$0$0$0$2$17$"			return clazz1;"
"ClassUtils.java:807"$0$0$0$1$3$"		}"
"ClassUtils.java:808"$0$0$0$3$40$"		if (clazz2.isAssignableFrom(clazz1)) {"
"ClassUtils.java:809"$0$0$0$2$17$"			return clazz2;"
"ClassUtils.java:810"$0$0$0$1$3$"		}"
"ClassUtils.java:811"$0$0$0$4$29$"		Class<?> ancestor = clazz1;"
"ClassUtils.java:812"$0$0$0$2$6$"		do {"
"ClassUtils.java:813"$1$0$0$3$39$"			ancestor = ancestor.getSuperclass();"
"ClassUtils.java:814"$0$0$0$9$54$"			if (ancestor == null || Object.class == ancestor) {"
"ClassUtils.java:815"$0$0$0$2$16$"				return null;"
"ClassUtils.java:816"$0$0$0$1$4$"			}"
"ClassUtils.java:817"$0$0$0$1$3$"		}"
"ClassUtils.java:818"$0$0$0$2$45$"		while (!ancestor.isAssignableFrom(clazz2));"
"ClassUtils.java:819"$0$0$0$2$18$"		return ancestor;"
"ClassUtils.java:820"$0$0$0$1$2$"	}"
"ClassUtils.java:821"$0$0$0$0$0$""
"ClassUtils.java:822"$0$0$0$1$4$"	/**"
"ClassUtils.java:823"$0$0$0$12$78$"	 * Determine whether the given interface is a common Java language interface:"
"ClassUtils.java:824"$0$0$0$9$91$"	 * {@link Serializable}, {@link Externalizable}, {@link Closeable}, {@link AutoCloseable},"
"ClassUtils.java:825"$0$0$0$14$84$"	 * {@link Cloneable}, {@link Comparable} - all of which can be ignored when looking"
"ClassUtils.java:826"$0$0$0$9$81$"	 * for 'primary' user-level interfaces. Common characteristics: no service-level"
"ClassUtils.java:827"$0$0$0$9$61$"	 * operations, no bean property methods, no default methods."
"ClassUtils.java:828"$0$0$0$7$37$"	 * @param ifc the interface to check"
"ClassUtils.java:829"$0$0$0$3$16$"	 * @since 5.0.3"
"ClassUtils.java:830"$0$0$0$1$4$"	 */"
"ClassUtils.java:831"$0$0$0$6$62$"	public static boolean isJavaLanguageInterface(Class<?> ifc) {"
"ClassUtils.java:832"$0$0$0$2$46$"		return javaLanguageInterfaces.contains(ifc);"
"ClassUtils.java:833"$0$0$0$1$2$"	}"
"ClassUtils.java:834"$0$0$0$0$0$""
"ClassUtils.java:835"$0$0$0$1$4$"	/**"
"ClassUtils.java:836"$0$0$0$10$63$"	 * Determine if the supplied class is an <em>inner class</em>,"
"ClassUtils.java:837"$0$0$0$9$51$"	 * i.e. a non-static member of an enclosing class."
"ClassUtils.java:838"$0$0$0$12$64$"	 * @return {@code true} if the supplied class is an inner class"
"ClassUtils.java:839"$0$0$0$3$16$"	 * @since 5.0.5"
"ClassUtils.java:840"$0$0$0$3$30$"	 * @see Class#isMemberClass()"
"ClassUtils.java:841"$0$0$0$1$4$"	 */"
"ClassUtils.java:842"$0$0$0$6$53$"	public static boolean isInnerClass(Class<?> clazz) {"
"ClassUtils.java:843"$1$0$0$4$77$"		return (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()));"
"ClassUtils.java:844"$0$0$0$1$2$"	}"
"ClassUtils.java:845"$0$0$0$0$0$""
"ClassUtils.java:846"$0$0$0$1$4$"	/**"
"ClassUtils.java:847"$0$0$0$10$52$"	 * Check whether the given object is a CGLIB proxy."
"ClassUtils.java:848"$0$0$0$7$37$"	 * @param object the object to check"
"ClassUtils.java:849"$0$0$0$3$34$"	 * @see #isCglibProxyClass(Class)"
"ClassUtils.java:850"$0$0$0$3$70$"	 * @see org.springframework.aop.support.AopUtils#isCglibProxy(Object)"
"ClassUtils.java:851"$0$0$0$12$72$"	 * @deprecated as of 5.2, in favor of custom (possibly narrower) checks"
"ClassUtils.java:852"$0$0$0$1$4$"	 */"
"ClassUtils.java:853"$0$0$0$1$12$"	@Deprecated"
"ClassUtils.java:854"$0$0$0$6$52$"	public static boolean isCglibProxy(Object object) {"
"ClassUtils.java:855"$1$0$0$2$46$"		return isCglibProxyClass(object.getClass());"
"ClassUtils.java:856"$0$0$0$1$2$"	}"
"ClassUtils.java:857"$0$0$0$0$0$""
"ClassUtils.java:858"$0$0$0$1$4$"	/**"
"ClassUtils.java:859"$0$0$0$10$65$"	 * Check whether the specified class is a CGLIB-generated class."
"ClassUtils.java:860"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:861"$0$0$0$3$39$"	 * @see #isCglibProxyClassName(String)"
"ClassUtils.java:862"$0$0$0$12$72$"	 * @deprecated as of 5.2, in favor of custom (possibly narrower) checks"
"ClassUtils.java:863"$0$0$0$1$4$"	 */"
"ClassUtils.java:864"$0$0$0$1$12$"	@Deprecated"
"ClassUtils.java:865"$0$0$0$7$68$"	public static boolean isCglibProxyClass(@Nullable Class<?> clazz) {"
"ClassUtils.java:866"$1$0$0$6$67$"		return (clazz != null && isCglibProxyClassName(clazz.getName()));"
"ClassUtils.java:867"$0$0$0$1$2$"	}"
"ClassUtils.java:868"$0$0$0$0$0$""
"ClassUtils.java:869"$0$0$0$1$4$"	/**"
"ClassUtils.java:870"$0$0$0$11$70$"	 * Check whether the specified class name is a CGLIB-generated class."
"ClassUtils.java:871"$0$0$0$8$44$"	 * @param className the class name to check"
"ClassUtils.java:872"$0$0$0$12$72$"	 * @deprecated as of 5.2, in favor of custom (possibly narrower) checks"
"ClassUtils.java:873"$0$0$0$1$4$"	 */"
"ClassUtils.java:874"$0$0$0$1$12$"	@Deprecated"
"ClassUtils.java:875"$0$0$0$7$74$"	public static boolean isCglibProxyClassName(@Nullable String className) {"
"ClassUtils.java:876"$0$0$0$6$74$"		return (className != null && className.contains(CGLIB_CLASS_SEPARATOR));"
"ClassUtils.java:877"$0$0$0$1$2$"	}"
"ClassUtils.java:878"$0$0$0$0$0$""
"ClassUtils.java:879"$0$0$0$1$4$"	/**"
"ClassUtils.java:880"$0$0$0$11$72$"	 * Return the user-defined class for the given instance: usually simply"
"ClassUtils.java:881"$0$0$0$15$72$"	 * the class of the given instance, but the original class in case of a"
"ClassUtils.java:882"$0$0$0$3$29$"	 * CGLIB-generated subclass."
"ClassUtils.java:883"$0$0$0$7$41$"	 * @param instance the instance to check"
"ClassUtils.java:884"$0$0$0$5$34$"	 * @return the user-defined class"
"ClassUtils.java:885"$0$0$0$1$4$"	 */"
"ClassUtils.java:886"$1$0$0$6$55$"	public static Class<?> getUserClass(Object instance) {"
"ClassUtils.java:887"$0$0$0$6$56$"		Assert.notNull(instance, ""Instance must not be null"");"
"ClassUtils.java:888"$2$0$0$2$43$"		return getUserClass(instance.getClass());"
"ClassUtils.java:889"$0$0$0$1$2$"	}"
"ClassUtils.java:890"$0$0$0$0$0$""
"ClassUtils.java:891"$0$0$0$1$4$"	/**"
"ClassUtils.java:892"$0$0$0$13$79$"	 * Return the user-defined class for the given class: usually simply the given"
"ClassUtils.java:893"$0$0$0$12$72$"	 * class, but the original class in case of a CGLIB-generated subclass."
"ClassUtils.java:894"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:895"$0$0$0$5$34$"	 * @return the user-defined class"
"ClassUtils.java:896"$0$0$0$1$4$"	 */"
"ClassUtils.java:897"$1$0$0$6$54$"	public static Class<?> getUserClass(Class<?> clazz) {"
"ClassUtils.java:898"$1$0$0$3$56$"		if (clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {"
"ClassUtils.java:899"$1$0$0$4$47$"			Class<?> superclass = clazz.getSuperclass();"
"ClassUtils.java:900"$0$0$0$9$58$"			if (superclass != null && superclass != Object.class) {"
"ClassUtils.java:901"$0$0$0$2$22$"				return superclass;"
"ClassUtils.java:902"$0$0$0$1$4$"			}"
"ClassUtils.java:903"$0$0$0$1$3$"		}"
"ClassUtils.java:904"$0$0$0$2$15$"		return clazz;"
"ClassUtils.java:905"$0$0$0$1$2$"	}"
"ClassUtils.java:906"$0$0$0$0$0$""
"ClassUtils.java:907"$0$0$0$1$4$"	/**"
"ClassUtils.java:908"$0$0$0$12$73$"	 * Return a descriptive name for the given object's type: usually simply"
"ClassUtils.java:909"$0$0$0$13$68$"	 * the class name, but component type class name + ""[]"" for arrays,"
"ClassUtils.java:910"$0$0$0$11$67$"	 * and an appended list of implemented interfaces for JDK proxies."
"ClassUtils.java:911"$0$0$0$7$40$"	 * @param value the value to introspect"
"ClassUtils.java:912"$0$0$0$8$43$"	 * @return the qualified name of the class"
"ClassUtils.java:913"$0$0$0$1$4$"	 */"
"ClassUtils.java:914"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:915"$1$0$0$7$66$"	public static String getDescriptiveType(@Nullable Object value) {"
"ClassUtils.java:916"$0$0$0$5$22$"		if (value == null) {"
"ClassUtils.java:917"$0$0$0$2$15$"			return null;"
"ClassUtils.java:918"$0$0$0$1$3$"		}"
"ClassUtils.java:919"$1$0$0$4$36$"		Class<?> clazz = value.getClass();"
"ClassUtils.java:920"$0$0$0$3$34$"		if (Proxy.isProxyClass(clazz)) {"
"ClassUtils.java:921"$1$0$0$8$54$"			String prefix = clazz.getName() + "" implementing "";"
"ClassUtils.java:922"$0$0$0$7$59$"			StringJoiner result = new StringJoiner("","", prefix, """");"
"ClassUtils.java:923"$1$0$0$6$47$"			for (Class<?> ifc : clazz.getInterfaces()) {"
"ClassUtils.java:924"$1$0$0$1$30$"				result.add(ifc.getName());"
"ClassUtils.java:925"$0$0$0$1$4$"			}"
"ClassUtils.java:926"$0$0$0$2$28$"			return result.toString();"
"ClassUtils.java:927"$0$0$0$1$3$"		}"
"ClassUtils.java:928"$0$0$0$2$8$"		else {"
"ClassUtils.java:929"$1$0$0$2$30$"			return clazz.getTypeName();"
"ClassUtils.java:930"$0$0$0$1$3$"		}"
"ClassUtils.java:931"$0$0$0$1$2$"	}"
"ClassUtils.java:932"$0$0$0$0$0$""
"ClassUtils.java:933"$0$0$0$1$4$"	/**"
"ClassUtils.java:934"$0$0$0$11$71$"	 * Check whether the given class matches the user-specified type name."
"ClassUtils.java:935"$0$0$0$7$35$"	 * @param clazz the class to check"
"ClassUtils.java:936"$0$0$0$8$42$"	 * @param typeName the type name to match"
"ClassUtils.java:937"$0$0$0$1$4$"	 */"
"ClassUtils.java:938"$0$0$0$9$83$"	public static boolean matchesTypeName(Class<?> clazz, @Nullable String typeName) {"
"ClassUtils.java:939"$0$0$0$5$29$"		return (typeName != null &&"
"ClassUtils.java:940"$2$0$0$3$86$"				(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));"
"ClassUtils.java:941"$0$0$0$1$2$"	}"
"ClassUtils.java:942"$0$0$0$0$0$""
"ClassUtils.java:943"$0$0$0$1$4$"	/**"
"ClassUtils.java:944"$0$0$0$10$58$"	 * Get the class name without the qualified package name."
"ClassUtils.java:945"$1$0$0$11$60$"	 * @param className the className to get the short name for"
"ClassUtils.java:946"$0$0$0$12$64$"	 * @return the class name of the class without the package name"
"ClassUtils.java:947"$0$0$0$8$62$"	 * @throws IllegalArgumentException if the className is empty"
"ClassUtils.java:948"$0$0$0$1$4$"	 */"
"ClassUtils.java:949"$1$0$0$6$54$"	public static String getShortName(String className) {"
"ClassUtils.java:950"$0$0$0$7$62$"		Assert.hasLength(className, ""Class name must not be empty"");"
"ClassUtils.java:951"$0$0$0$4$62$"		int lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);"
"ClassUtils.java:952"$0$0$0$4$62$"		int nameEndIndex = className.indexOf(CGLIB_CLASS_SEPARATOR);"
"ClassUtils.java:953"$0$0$0$5$27$"		if (nameEndIndex == -1) {"
"ClassUtils.java:954"$0$0$0$3$37$"			nameEndIndex = className.length();"
"ClassUtils.java:955"$0$0$0$1$3$"		}"
"ClassUtils.java:956"$0$0$0$7$73$"		String shortName = className.substring(lastDotIndex + 1, nameEndIndex);"
"ClassUtils.java:957"$0$0$0$4$74$"		shortName = shortName.replace(INNER_CLASS_SEPARATOR, PACKAGE_SEPARATOR);"
"ClassUtils.java:958"$0$0$0$2$19$"		return shortName;"
"ClassUtils.java:959"$0$0$0$1$2$"	}"
"ClassUtils.java:960"$0$0$0$0$0$""
"ClassUtils.java:961"$0$0$0$1$4$"	/**"
"ClassUtils.java:962"$0$0$0$10$58$"	 * Get the class name without the qualified package name."
"ClassUtils.java:963"$1$0$0$11$52$"	 * @param clazz the class to get the short name for"
"ClassUtils.java:964"$0$0$0$12$64$"	 * @return the class name of the class without the package name"
"ClassUtils.java:965"$0$0$0$1$4$"	 */"
"ClassUtils.java:966"$1$0$0$6$52$"	public static String getShortName(Class<?> clazz) {"
"ClassUtils.java:967"$2$0$0$2$47$"		return getShortName(getQualifiedName(clazz));"
"ClassUtils.java:968"$0$0$0$1$2$"	}"
"ClassUtils.java:969"$0$0$0$0$0$""
"ClassUtils.java:970"$0$0$0$1$4$"	/**"
"ClassUtils.java:971"$0$0$0$13$75$"	 * Return the short string name of a Java class in uncapitalized JavaBeans"
"ClassUtils.java:972"$0$0$0$14$75$"	 * property format. Strips the outer class name in case of an inner class."
"ClassUtils.java:973"$0$0$0$5$26$"	 * @param clazz the class"
"ClassUtils.java:974"$0$0$0$12$75$"	 * @return the short name rendered in a standard JavaBeans property format"
"ClassUtils.java:975"$0$0$0$3$53$"	 * @see java.beans.Introspector#decapitalize(String)"
"ClassUtils.java:976"$0$0$0$1$4$"	 */"
"ClassUtils.java:977"$1$0$0$6$62$"	public static String getShortNameAsProperty(Class<?> clazz) {"
"ClassUtils.java:978"$1$0$0$4$41$"		String shortName = getShortName(clazz);"
"ClassUtils.java:979"$0$0$0$4$58$"		int dotIndex = shortName.lastIndexOf(PACKAGE_SEPARATOR);"
"ClassUtils.java:980"$0$0$0$11$79$"		shortName = (dotIndex != -1 ? shortName.substring(dotIndex + 1) : shortName);"
"ClassUtils.java:981"$0$0$0$2$46$"		return Introspector.decapitalize(shortName);"
"ClassUtils.java:982"$0$0$0$1$2$"	}"
"ClassUtils.java:983"$0$0$0$0$0$""
"ClassUtils.java:984"$0$0$0$1$4$"	/**"
"ClassUtils.java:985"$0$0$0$12$68$"	 * Determine the name of the class file, relative to the containing"
"ClassUtils.java:986"$0$0$0$4$32$"	 * package: e.g. ""String.class"""
"ClassUtils.java:987"$0$0$0$5$26$"	 * @param clazz the class"
"ClassUtils.java:988"$0$0$0$9$46$"	 * @return the file name of the "".class"" file"
"ClassUtils.java:989"$0$0$0$1$4$"	 */"
"ClassUtils.java:990"$1$0$0$6$56$"	public static String getClassFileName(Class<?> clazz) {"
"ClassUtils.java:991"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:992"$1$0$0$4$37$"		String className = clazz.getName();"
"ClassUtils.java:993"$0$0$0$4$62$"		int lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR);"
"ClassUtils.java:994"$0$0$0$6$67$"		return className.substring(lastDotIndex + 1) + CLASS_FILE_SUFFIX;"
"ClassUtils.java:995"$0$0$0$1$2$"	}"
"ClassUtils.java:996"$0$0$0$0$0$""
"ClassUtils.java:997"$0$0$0$1$4$"	/**"
"ClassUtils.java:998"$0$0$0$11$57$"	 * Determine the name of the package of the given class,"
"ClassUtils.java:999"$0$0$0$8$60$"	 * e.g. ""java.lang"" for the {@code java.lang.String} class."
"ClassUtils.java:1000"$0$0$0$5$26$"	 * @param clazz the class"
"ClassUtils.java:1001"$0$0$0$12$62$"	 * @return the package name, or the empty String if the class"
"ClassUtils.java:1002"$0$0$0$7$37$"	 * is defined in the default package"
"ClassUtils.java:1003"$0$0$0$1$4$"	 */"
"ClassUtils.java:1004"$1$0$0$6$54$"	public static String getPackageName(Class<?> clazz) {"
"ClassUtils.java:1005"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1006"$2$0$0$2$41$"		return getPackageName(clazz.getName());"
"ClassUtils.java:1007"$0$0$0$1$2$"	}"
"ClassUtils.java:1008"$0$0$0$0$0$""
"ClassUtils.java:1009"$0$0$0$1$4$"	/**"
"ClassUtils.java:1010"$0$0$0$13$78$"	 * Determine the name of the package of the given fully-qualified class name,"
"ClassUtils.java:1011"$0$0$0$9$65$"	 * e.g. ""java.lang"" for the {@code java.lang.String} class name."
"ClassUtils.java:1012"$0$0$0$7$53$"	 * @param fqClassName the fully-qualified class name"
"ClassUtils.java:1013"$0$0$0$12$62$"	 * @return the package name, or the empty String if the class"
"ClassUtils.java:1014"$0$0$0$7$37$"	 * is defined in the default package"
"ClassUtils.java:1015"$0$0$0$1$4$"	 */"
"ClassUtils.java:1016"$1$0$0$6$58$"	public static String getPackageName(String fqClassName) {"
"ClassUtils.java:1017"$0$0$0$7$61$"		Assert.notNull(fqClassName, ""Class name must not be null"");"
"ClassUtils.java:1018"$0$0$0$4$64$"		int lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);"
"ClassUtils.java:1019"$0$0$0$9$76$"		return (lastDotIndex != -1 ? fqClassName.substring(0, lastDotIndex) : """");"
"ClassUtils.java:1020"$0$0$0$1$2$"	}"
"ClassUtils.java:1021"$0$0$0$0$0$""
"ClassUtils.java:1022"$0$0$0$1$4$"	/**"
"ClassUtils.java:1023"$0$0$0$11$64$"	 * Return the qualified name of the given class: usually simply"
"ClassUtils.java:1024"$0$0$0$13$68$"	 * the class name, but component type class name + ""[]"" for arrays."
"ClassUtils.java:1025"$0$0$0$5$26$"	 * @param clazz the class"
"ClassUtils.java:1026"$0$0$0$8$43$"	 * @return the qualified name of the class"
"ClassUtils.java:1027"$0$0$0$1$4$"	 */"
"ClassUtils.java:1028"$1$0$0$6$56$"	public static String getQualifiedName(Class<?> clazz) {"
"ClassUtils.java:1029"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1030"$1$0$0$2$29$"		return clazz.getTypeName();"
"ClassUtils.java:1031"$0$0$0$1$2$"	}"
"ClassUtils.java:1032"$0$0$0$0$0$""
"ClassUtils.java:1033"$0$0$0$1$4$"	/**"
"ClassUtils.java:1034"$0$0$0$11$64$"	 * Return the qualified name of the given method, consisting of"
"ClassUtils.java:1035"$0$0$0$10$61$"	 * fully qualified interface/class name + ""."" + method name."
"ClassUtils.java:1036"$0$0$0$5$28$"	 * @param method the method"
"ClassUtils.java:1037"$0$0$0$8$44$"	 * @return the qualified name of the method"
"ClassUtils.java:1038"$0$0$0$1$4$"	 */"
"ClassUtils.java:1039"$1$0$0$6$61$"	public static String getQualifiedMethodName(Method method) {"
"ClassUtils.java:1040"$1$0$0$3$46$"		return getQualifiedMethodName(method, null);"
"ClassUtils.java:1041"$0$0$0$1$2$"	}"
"ClassUtils.java:1042"$0$0$0$0$0$""
"ClassUtils.java:1043"$0$0$0$1$4$"	/**"
"ClassUtils.java:1044"$0$0$0$11$64$"	 * Return the qualified name of the given method, consisting of"
"ClassUtils.java:1045"$0$0$0$10$61$"	 * fully qualified interface/class name + ""."" + method name."
"ClassUtils.java:1046"$0$0$0$5$28$"	 * @param method the method"
"ClassUtils.java:1047"$0$0$0$12$62$"	 * @param clazz the clazz that the method is being invoked on"
"ClassUtils.java:1048"$0$0$0$11$66$"	 * (may be {@code null} to indicate the method's declaring class)"
"ClassUtils.java:1049"$0$0$0$8$44$"	 * @return the qualified name of the method"
"ClassUtils.java:1050"$0$0$0$3$16$"	 * @since 4.3.4"
"ClassUtils.java:1051"$0$0$0$1$4$"	 */"
"ClassUtils.java:1052"$1$0$0$9$87$"	public static String getQualifiedMethodName(Method method, @Nullable Class<?> clazz) {"
"ClassUtils.java:1053"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ClassUtils.java:1054"$3$0$0$12$97$"		return (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();"
"ClassUtils.java:1055"$0$0$0$1$2$"	}"
"ClassUtils.java:1056"$0$0$0$0$0$""
"ClassUtils.java:1057"$0$0$0$1$4$"	/**"
"ClassUtils.java:1058"$0$0$0$14$88$"	 * Determine whether the given class has a public constructor with the given signature."
"ClassUtils.java:1059"$0$0$0$7$71$"	 * <p>Essentially translates {@code NoSuchMethodException} to ""false""."
"ClassUtils.java:1060"$0$0$0$7$37$"	 * @param clazz the clazz to analyze"
"ClassUtils.java:1061"$0$0$0$9$55$"	 * @param paramTypes the parameter types of the method"
"ClassUtils.java:1062"$0$0$0$9$61$"	 * @return whether the class has a corresponding constructor"
"ClassUtils.java:1063"$1$0$0$3$29$"	 * @see Class#getConstructor"
"ClassUtils.java:1064"$0$0$0$1$4$"	 */"
"ClassUtils.java:1065"$0$0$0$8$79$"	public static boolean hasConstructor(Class<?> clazz, Class<?>... paramTypes) {"
"ClassUtils.java:1066"$1$0$0$5$64$"		return (getConstructorIfAvailable(clazz, paramTypes) != null);"
"ClassUtils.java:1067"$0$0$0$1$2$"	}"
"ClassUtils.java:1068"$0$0$0$0$0$""
"ClassUtils.java:1069"$0$0$0$1$4$"	/**"
"ClassUtils.java:1070"$0$0$0$14$88$"	 * Determine whether the given class has a public constructor with the given signature,"
"ClassUtils.java:1071"$0$0$0$10$58$"	 * and return it if available (else return {@code null})."
"ClassUtils.java:1072"$0$0$0$8$76$"	 * <p>Essentially translates {@code NoSuchMethodException} to {@code null}."
"ClassUtils.java:1073"$0$0$0$7$37$"	 * @param clazz the clazz to analyze"
"ClassUtils.java:1074"$0$0$0$9$55$"	 * @param paramTypes the parameter types of the method"
"ClassUtils.java:1075"$0$0$0$10$57$"	 * @return the constructor, or {@code null} if not found"
"ClassUtils.java:1076"$1$0$0$3$29$"	 * @see Class#getConstructor"
"ClassUtils.java:1077"$0$0$0$1$4$"	 */"
"ClassUtils.java:1078"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:1079"$1$0$0$9$101$"	public static <T> Constructor<T> getConstructorIfAvailable(Class<T> clazz, Class<?>... paramTypes) {"
"ClassUtils.java:1080"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1081"$0$0$0$2$7$"		try {"
"ClassUtils.java:1082"$1$0$0$2$43$"			return clazz.getConstructor(paramTypes);"
"ClassUtils.java:1083"$0$0$0$1$3$"		}"
"ClassUtils.java:1084"$0$0$0$4$36$"		catch (NoSuchMethodException ex) {"
"ClassUtils.java:1085"$0$0$0$2$15$"			return null;"
"ClassUtils.java:1086"$0$0$0$1$3$"		}"
"ClassUtils.java:1087"$0$0$0$1$2$"	}"
"ClassUtils.java:1088"$0$0$0$0$0$""
"ClassUtils.java:1089"$0$0$0$1$4$"	/**"
"ClassUtils.java:1090"$0$0$0$14$83$"	 * Determine whether the given class has a public method with the given signature."
"ClassUtils.java:1091"$0$0$0$7$37$"	 * @param clazz the clazz to analyze"
"ClassUtils.java:1092"$0$0$0$8$40$"	 * @param method the method to look for"
"ClassUtils.java:1093"$0$0$0$9$56$"	 * @return whether the class has a corresponding method"
"ClassUtils.java:1094"$0$0$0$3$16$"	 * @since 5.2.3"
"ClassUtils.java:1095"$0$0$0$1$4$"	 */"
"ClassUtils.java:1096"$0$0$0$8$65$"	public static boolean hasMethod(Class<?> clazz, Method method) {"
"ClassUtils.java:1097"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1098"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ClassUtils.java:1099"$1$0$0$5$44$"		if (clazz == method.getDeclaringClass()) {"
"ClassUtils.java:1100"$0$0$0$2$15$"			return true;"
"ClassUtils.java:1101"$0$0$0$1$3$"		}"
"ClassUtils.java:1102"$1$0$0$4$39$"		String methodName = method.getName();"
"ClassUtils.java:1103"$1$0$0$4$53$"		Class<?>[] paramTypes = method.getParameterTypes();"
"ClassUtils.java:1104"$1$0$0$6$64$"		return getMethodOrNull(clazz, methodName, paramTypes) != null;"
"ClassUtils.java:1105"$0$0$0$1$2$"	}"
"ClassUtils.java:1106"$0$0$0$0$0$""
"ClassUtils.java:1107"$0$0$0$1$4$"	/**"
"ClassUtils.java:1108"$0$0$0$14$83$"	 * Determine whether the given class has a public method with the given signature."
"ClassUtils.java:1109"$0$0$0$7$71$"	 * <p>Essentially translates {@code NoSuchMethodException} to ""false""."
"ClassUtils.java:1110"$0$0$0$7$37$"	 * @param clazz the clazz to analyze"
"ClassUtils.java:1111"$0$0$0$8$44$"	 * @param methodName the name of the method"
"ClassUtils.java:1112"$0$0$0$9$55$"	 * @param paramTypes the parameter types of the method"
"ClassUtils.java:1113"$0$0$0$9$56$"	 * @return whether the class has a corresponding method"
"ClassUtils.java:1114"$1$0$0$3$24$"	 * @see Class#getMethod"
"ClassUtils.java:1115"$0$0$0$1$4$"	 */"
"ClassUtils.java:1116"$0$0$0$10$93$"	public static boolean hasMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {"
"ClassUtils.java:1117"$1$0$0$6$71$"		return (getMethodIfAvailable(clazz, methodName, paramTypes) != null);"
"ClassUtils.java:1118"$0$0$0$1$2$"	}"
"ClassUtils.java:1119"$0$0$0$0$0$""
"ClassUtils.java:1120"$0$0$0$1$4$"	/**"
"ClassUtils.java:1121"$0$0$0$14$83$"	 * Determine whether the given class has a public method with the given signature,"
"ClassUtils.java:1122"$0$0$0$11$78$"	 * and return it if available (else throws an {@code IllegalStateException})."
"ClassUtils.java:1123"$0$0$0$15$80$"	 * <p>In case of any signature specified, only returns the method if there is a"
"ClassUtils.java:1124"$0$0$0$12$74$"	 * unique candidate, i.e. a single public method with the specified name."
"ClassUtils.java:1125"$0$0$0$8$93$"	 * <p>Essentially translates {@code NoSuchMethodException} to {@code IllegalStateException}."
"ClassUtils.java:1126"$0$0$0$7$37$"	 * @param clazz the clazz to analyze"
"ClassUtils.java:1127"$0$0$0$8$44$"	 * @param methodName the name of the method"
"ClassUtils.java:1128"$0$0$0$9$55$"	 * @param paramTypes the parameter types of the method"
"ClassUtils.java:1129"$0$0$0$9$51$"	 * (may be {@code null} to indicate any signature)"
"ClassUtils.java:1130"$0$0$0$7$43$"	 * @return the method (never {@code null})"
"ClassUtils.java:1131"$0$0$0$10$66$"	 * @throws IllegalStateException if the method has not been found"
"ClassUtils.java:1132"$1$0$0$3$24$"	 * @see Class#getMethod"
"ClassUtils.java:1133"$0$0$0$1$4$"	 */"
"ClassUtils.java:1134"$1$0$0$11$102$"	public static Method getMethod(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes) {"
"ClassUtils.java:1135"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1136"$0$0$0$7$61$"		Assert.notNull(methodName, ""Method name must not be null"");"
"ClassUtils.java:1137"$0$0$0$5$27$"		if (paramTypes != null) {"
"ClassUtils.java:1138"$0$0$0$2$8$"			try {"
"ClassUtils.java:1139"$1$0$0$3$51$"				return clazz.getMethod(methodName, paramTypes);"
"ClassUtils.java:1140"$0$0$0$1$4$"			}"
"ClassUtils.java:1141"$0$0$0$4$37$"			catch (NoSuchMethodException ex) {"
"ClassUtils.java:1142"$0$0$0$9$72$"				throw new IllegalStateException(""Expected method not found: "" + ex);"
"ClassUtils.java:1143"$0$0$0$1$4$"			}"
"ClassUtils.java:1144"$0$0$0$1$3$"		}"
"ClassUtils.java:1145"$0$0$0$2$8$"		else {"
"ClassUtils.java:1146"$0$0$0$5$74$"			Set<Method> candidates = findMethodCandidatesByName(clazz, methodName);"
"ClassUtils.java:1147"$0$0$0$5$32$"			if (candidates.size() == 1) {"
"ClassUtils.java:1148"$0$0$0$2$40$"				return candidates.iterator().next();"
"ClassUtils.java:1149"$0$0$0$1$4$"			}"
"ClassUtils.java:1150"$0$0$0$4$35$"			else if (candidates.isEmpty()) {"
"ClassUtils.java:1151"$1$0$0$13$104$"				throw new IllegalStateException(""Expected method not found: "" + clazz.getName() + '.' + methodName);"
"ClassUtils.java:1152"$0$0$0$1$4$"			}"
"ClassUtils.java:1153"$0$0$0$2$9$"			else {"
"ClassUtils.java:1154"$1$0$0$13$101$"				throw new IllegalStateException(""No unique method found: "" + clazz.getName() + '.' + methodName);"
"ClassUtils.java:1155"$0$0$0$1$4$"			}"
"ClassUtils.java:1156"$0$0$0$1$3$"		}"
"ClassUtils.java:1157"$0$0$0$1$2$"	}"
"ClassUtils.java:1158"$0$0$0$0$0$""
"ClassUtils.java:1159"$0$0$0$1$4$"	/**"
"ClassUtils.java:1160"$0$0$0$14$83$"	 * Determine whether the given class has a public method with the given signature,"
"ClassUtils.java:1161"$0$0$0$10$58$"	 * and return it if available (else return {@code null})."
"ClassUtils.java:1162"$0$0$0$15$80$"	 * <p>In case of any signature specified, only returns the method if there is a"
"ClassUtils.java:1163"$0$0$0$12$74$"	 * unique candidate, i.e. a single public method with the specified name."
"ClassUtils.java:1164"$0$0$0$8$76$"	 * <p>Essentially translates {@code NoSuchMethodException} to {@code null}."
"ClassUtils.java:1165"$0$0$0$7$37$"	 * @param clazz the clazz to analyze"
"ClassUtils.java:1166"$0$0$0$8$44$"	 * @param methodName the name of the method"
"ClassUtils.java:1167"$0$0$0$9$55$"	 * @param paramTypes the parameter types of the method"
"ClassUtils.java:1168"$0$0$0$9$51$"	 * (may be {@code null} to indicate any signature)"
"ClassUtils.java:1169"$0$0$0$10$52$"	 * @return the method, or {@code null} if not found"
"ClassUtils.java:1170"$1$0$0$3$24$"	 * @see Class#getMethod"
"ClassUtils.java:1171"$0$0$0$1$4$"	 */"
"ClassUtils.java:1172"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:1173"$1$0$0$11$113$"	public static Method getMethodIfAvailable(Class<?> clazz, String methodName, @Nullable Class<?>... paramTypes) {"
"ClassUtils.java:1174"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1175"$0$0$0$7$61$"		Assert.notNull(methodName, ""Method name must not be null"");"
"ClassUtils.java:1176"$0$0$0$5$27$"		if (paramTypes != null) {"
"ClassUtils.java:1177"$1$0$0$4$57$"			return getMethodOrNull(clazz, methodName, paramTypes);"
"ClassUtils.java:1178"$0$0$0$1$3$"		}"
"ClassUtils.java:1179"$0$0$0$2$8$"		else {"
"ClassUtils.java:1180"$0$0$0$5$74$"			Set<Method> candidates = findMethodCandidatesByName(clazz, methodName);"
"ClassUtils.java:1181"$0$0$0$5$32$"			if (candidates.size() == 1) {"
"ClassUtils.java:1182"$0$0$0$2$40$"				return candidates.iterator().next();"
"ClassUtils.java:1183"$0$0$0$1$4$"			}"
"ClassUtils.java:1184"$0$0$0$2$15$"			return null;"
"ClassUtils.java:1185"$0$0$0$1$3$"		}"
"ClassUtils.java:1186"$0$0$0$1$2$"	}"
"ClassUtils.java:1187"$0$0$0$0$0$""
"ClassUtils.java:1188"$0$0$0$1$4$"	/**"
"ClassUtils.java:1189"$0$0$0$14$77$"	 * Return the number of methods with a given name (with any argument types),"
"ClassUtils.java:1190"$0$0$0$11$77$"	 * for the given class and/or its superclasses. Includes non-public methods."
"ClassUtils.java:1191"$0$0$0$7$35$"	 * @param clazz	the clazz to check"
"ClassUtils.java:1192"$0$0$0$8$44$"	 * @param methodName the name of the method"
"ClassUtils.java:1193"$0$0$0$10$53$"	 * @return the number of methods with the given name"
"ClassUtils.java:1194"$0$0$0$1$4$"	 */"
"ClassUtils.java:1195"$1$0$0$8$77$"	public static int getMethodCountForName(Class<?> clazz, String methodName) {"
"ClassUtils.java:1196"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1197"$0$0$0$7$61$"		Assert.notNull(methodName, ""Method name must not be null"");"
"ClassUtils.java:1198"$0$0$0$4$16$"		int count = 0;"
"ClassUtils.java:1199"$1$0$0$4$56$"		Method[] declaredMethods = clazz.getDeclaredMethods();"
"ClassUtils.java:1200"$0$0$0$6$41$"		for (Method method : declaredMethods) {"
"ClassUtils.java:1201"$1$0$0$3$45$"			if (methodName.equals(method.getName())) {"
"ClassUtils.java:1202"$0$0$0$1$12$"				count++;"
"ClassUtils.java:1203"$0$0$0$1$4$"			}"
"ClassUtils.java:1204"$0$0$0$1$3$"		}"
"ClassUtils.java:1205"$1$0$0$4$42$"		Class<?>[] ifcs = clazz.getInterfaces();"
"ClassUtils.java:1206"$0$0$0$6$29$"		for (Class<?> ifc : ifcs) {"
"ClassUtils.java:1207"$1$0$0$4$51$"			count += getMethodCountForName(ifc, methodName);"
"ClassUtils.java:1208"$0$0$0$1$3$"		}"
"ClassUtils.java:1209"$1$0$0$5$38$"		if (clazz.getSuperclass() != null) {"
"ClassUtils.java:1210"$2$0$0$4$69$"			count += getMethodCountForName(clazz.getSuperclass(), methodName);"
"ClassUtils.java:1211"$0$0$0$1$3$"		}"
"ClassUtils.java:1212"$0$0$0$2$15$"		return count;"
"ClassUtils.java:1213"$0$0$0$1$2$"	}"
"ClassUtils.java:1214"$0$0$0$0$0$""
"ClassUtils.java:1215"$0$0$0$1$4$"	/**"
"ClassUtils.java:1216"$0$0$0$16$77$"	 * Does the given class or one of its superclasses at least have one or more"
"ClassUtils.java:1217"$0$0$0$10$61$"	 * methods with the supplied name (with any argument types)?"
"ClassUtils.java:1218"$0$0$0$4$32$"	 * Includes non-public methods."
"ClassUtils.java:1219"$0$0$0$7$35$"	 * @param clazz	the clazz to check"
"ClassUtils.java:1220"$0$0$0$8$44$"	 * @param methodName the name of the method"
"ClassUtils.java:1221"$0$0$0$13$68$"	 * @return whether there is at least one method with the given name"
"ClassUtils.java:1222"$0$0$0$1$4$"	 */"
"ClassUtils.java:1223"$0$0$0$8$87$"	public static boolean hasAtLeastOneMethodWithName(Class<?> clazz, String methodName) {"
"ClassUtils.java:1224"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1225"$0$0$0$7$61$"		Assert.notNull(methodName, ""Method name must not be null"");"
"ClassUtils.java:1226"$1$0$0$4$56$"		Method[] declaredMethods = clazz.getDeclaredMethods();"
"ClassUtils.java:1227"$0$0$0$6$41$"		for (Method method : declaredMethods) {"
"ClassUtils.java:1228"$1$0$0$3$45$"			if (method.getName().equals(methodName)) {"
"ClassUtils.java:1229"$0$0$0$2$16$"				return true;"
"ClassUtils.java:1230"$0$0$0$1$4$"			}"
"ClassUtils.java:1231"$0$0$0$1$3$"		}"
"ClassUtils.java:1232"$1$0$0$4$42$"		Class<?>[] ifcs = clazz.getInterfaces();"
"ClassUtils.java:1233"$0$0$0$6$29$"		for (Class<?> ifc : ifcs) {"
"ClassUtils.java:1234"$0$0$0$4$54$"			if (hasAtLeastOneMethodWithName(ifc, methodName)) {"
"ClassUtils.java:1235"$0$0$0$2$16$"				return true;"
"ClassUtils.java:1236"$0$0$0$1$4$"			}"
"ClassUtils.java:1237"$0$0$0$1$3$"		}"
"ClassUtils.java:1238"$2$0$0$7$107$"		return (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(), methodName));"
"ClassUtils.java:1239"$0$0$0$1$2$"	}"
"ClassUtils.java:1240"$0$0$0$0$0$""
"ClassUtils.java:1241"$0$0$0$1$4$"	/**"
"ClassUtils.java:1242"$1$0$0$15$77$"	 * Given a method, which may come from an interface, and a target class used"
"ClassUtils.java:1243"$1$0$0$11$78$"	 * in the current reflective invocation, find the corresponding target method"
"ClassUtils.java:1244"$0$0$0$14$70$"	 * if there is one. E.g. the method may be {@code IFoo.bar()} and the"
"ClassUtils.java:1245"$1$0$0$14$75$"	 * target class may be {@code DefaultFoo}. In this case, the method may be"
"ClassUtils.java:1246"$0$0$0$12$81$"	 * {@code DefaultFoo.bar()}. This enables attributes on that method to be found."
"ClassUtils.java:1247"$1$0$0$7$106$"	 * <p><b>NOTE:</b> In contrast to {@link org.springframework.aop.support.AopUtils#getMostSpecificMethod},"
"ClassUtils.java:1248"$0$0$0$11$76$"	 * this method does <i>not</i> resolve Java 5 bridge methods automatically."
"ClassUtils.java:1249"$0$0$0$4$80$"	 * Call {@link org.springframework.core.BridgeMethodResolver#findBridgedMethod}"
"ClassUtils.java:1250"$0$0$0$12$78$"	 * if bridge method resolution is desirable (e.g. for obtaining metadata from"
"ClassUtils.java:1251"$0$0$0$5$36$"	 * the original method definition)."
"ClassUtils.java:1252"$0$0$0$11$85$"	 * <p><b>NOTE:</b> Since Spring 3.1.1, if Java security settings disallow reflective"
"ClassUtils.java:1253"$1$0$0$10$83$"	 * access (e.g. calls to {@code Class#getDeclaredMethods} etc, this implementation"
"ClassUtils.java:1254"$0$0$0$10$63$"	 * will fall back to returning the originally provided method."
"ClassUtils.java:1255"$0$0$0$14$76$"	 * @param method the method to be invoked, which may come from an interface"
"ClassUtils.java:1256"$2$0$0$10$66$"	 * @param targetClass the target class for the current invocation"
"ClassUtils.java:1257"$0$0$0$12$62$"	 * (may be {@code null} or may not even implement the method)"
"ClassUtils.java:1258"$1$0$0$12$69$"	 * @return the specific target method, or the original method if the"
"ClassUtils.java:1259"$1$0$0$7$45$"	 * {@code targetClass} does not implement it"
"ClassUtils.java:1260"$1$0$0$3$38$"	 * @see #getInterfaceMethodIfPossible"
"ClassUtils.java:1261"$0$0$0$1$4$"	 */"
"ClassUtils.java:1262"$2$0$0$9$92$"	public static Method getMostSpecificMethod(Method method, @Nullable Class<?> targetClass) {"
"ClassUtils.java:1263"$4$0$0$12$111$"		if (targetClass != null && targetClass != method.getDeclaringClass() && isOverridable(method, targetClass)) {"
"ClassUtils.java:1264"$0$0$0$2$8$"			try {"
"ClassUtils.java:1265"$1$0$0$3$51$"				if (Modifier.isPublic(method.getModifiers())) {"
"ClassUtils.java:1266"$0$0$0$2$10$"					try {"
"ClassUtils.java:1267"$4$0$0$3$81$"						return targetClass.getMethod(method.getName(), method.getParameterTypes());"
"ClassUtils.java:1268"$0$0$0$1$6$"					}"
"ClassUtils.java:1269"$0$0$0$4$39$"					catch (NoSuchMethodException ex) {"
"ClassUtils.java:1270"$0$0$0$2$20$"						return method;"
"ClassUtils.java:1271"$0$0$0$1$6$"					}"
"ClassUtils.java:1272"$0$0$0$1$5$"				}"
"ClassUtils.java:1273"$0$0$0$2$10$"				else {"
"ClassUtils.java:1274"$0$0$0$3$28$"					Method specificMethod ="
"ClassUtils.java:1275"$3$0$0$3$93$"							ReflectionUtils.findMethod(targetClass, method.getName(), method.getParameterTypes());"
"ClassUtils.java:1276"$0$0$0$8$63$"					return (specificMethod != null ? specificMethod : method);"
"ClassUtils.java:1277"$0$0$0$1$5$"				}"
"ClassUtils.java:1278"$0$0$0$1$4$"			}"
"ClassUtils.java:1279"$0$0$0$4$33$"			catch (SecurityException ex) {"
"ClassUtils.java:1280"$0$0$1$12$88$"				// Security settings are disallowing reflective access; fall back to 'method' below."
"ClassUtils.java:1281"$0$0$0$1$4$"			}"
"ClassUtils.java:1282"$0$0$0$1$3$"		}"
"ClassUtils.java:1283"$0$0$0$2$16$"		return method;"
"ClassUtils.java:1284"$0$0$0$1$2$"	}"
"ClassUtils.java:1285"$0$0$0$0$0$""
"ClassUtils.java:1286"$0$0$0$1$4$"	/**"
"ClassUtils.java:1287"$0$0$0$13$88$"	 * Determine a corresponding interface method for the given method handle, if possible."
"ClassUtils.java:1288"$0$0$0$14$83$"	 * <p>This is particularly useful for arriving at a public exported type on Jigsaw"
"ClassUtils.java:1289"$0$0$0$11$72$"	 * which can be reflectively invoked without an illegal access warning."
"ClassUtils.java:1290"$0$0$0$13$84$"	 * @param method the method to be invoked, potentially from an implementation class"
"ClassUtils.java:1291"$0$0$0$13$84$"	 * @return the corresponding interface method, or the original method if none found"
"ClassUtils.java:1292"$0$0$0$3$14$"	 * @since 5.1"
"ClassUtils.java:1293"$1$0$0$3$31$"	 * @see #getMostSpecificMethod"
"ClassUtils.java:1294"$0$0$0$1$4$"	 */"
"ClassUtils.java:1295"$1$0$0$6$67$"	public static Method getInterfaceMethodIfPossible(Method method) {"
"ClassUtils.java:1296"$2$0$0$5$94$"		if (!Modifier.isPublic(method.getModifiers()) || method.getDeclaringClass().isInterface()) {"
"ClassUtils.java:1297"$0$0$0$2$17$"			return method;"
"ClassUtils.java:1298"$0$0$0$1$3$"		}"
"ClassUtils.java:1299"$0$0$0$5$62$"		return interfaceMethodCache.computeIfAbsent(method, key -> {"
"ClassUtils.java:1300"$1$0$0$4$46$"			Class<?> current = key.getDeclaringClass();"
"ClassUtils.java:1301"$0$0$0$9$55$"			while (current != null && current != Object.class) {"
"ClassUtils.java:1302"$1$0$0$4$46$"				Class<?>[] ifcs = current.getInterfaces();"
"ClassUtils.java:1303"$0$0$0$6$31$"				for (Class<?> ifc : ifcs) {"
"ClassUtils.java:1304"$0$0$0$2$10$"					try {"
"ClassUtils.java:1305"$3$0$0$3$67$"						return ifc.getMethod(key.getName(), key.getParameterTypes());"
"ClassUtils.java:1306"$0$0$0$1$6$"					}"
"ClassUtils.java:1307"$0$0$0$4$39$"					catch (NoSuchMethodException ex) {"
"ClassUtils.java:1308"$0$0$1$2$15$"						// ignore"
"ClassUtils.java:1309"$0$0$0$1$6$"					}"
"ClassUtils.java:1310"$0$0$0$1$5$"				}"
"ClassUtils.java:1311"$1$0$0$3$38$"				current = current.getSuperclass();"
"ClassUtils.java:1312"$0$0$0$1$4$"			}"
"ClassUtils.java:1313"$0$0$0$2$14$"			return key;"
"ClassUtils.java:1314"$0$0$0$1$5$"		});"
"ClassUtils.java:1315"$0$0$0$1$2$"	}"
"ClassUtils.java:1316"$0$0$0$0$0$""
"ClassUtils.java:1317"$0$0$0$1$4$"	/**"
"ClassUtils.java:1318"$0$0$0$16$86$"	 * Determine whether the given method is declared by the user or at least pointing to"
"ClassUtils.java:1319"$0$0$0$4$27$"	 * a user-declared method."
"ClassUtils.java:1320"$0$0$0$11$86$"	 * <p>Checks {@link Method#isSynthetic()} (for implementation methods) as well as the"
"ClassUtils.java:1321"$0$0$0$11$86$"	 * {@code GroovyObject} interface (for interface methods; on an implementation class,"
"ClassUtils.java:1322"$0$0$0$13$92$"	 * implementations of the {@code GroovyObject} methods will be marked as synthetic anyway)."
"ClassUtils.java:1323"$0$0$0$12$97$"	 * Note that, despite being synthetic, bridge methods ({@link Method#isBridge()}) are considered"
"ClassUtils.java:1324"$0$0$0$14$95$"	 * as user-level methods since they are eventually pointing to a user-declared generic method."
"ClassUtils.java:1325"$0$0$0$7$37$"	 * @param method the method to check"
"ClassUtils.java:1326"$0$0$0$15$98$"	 * @return {@code true} if the method can be considered as user-declared; [@code false} otherwise"
"ClassUtils.java:1327"$0$0$0$1$4$"	 */"
"ClassUtils.java:1328"$0$0$0$6$57$"	public static boolean isUserLevelMethod(Method method) {"
"ClassUtils.java:1329"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ClassUtils.java:1330"$0$0$0$6$89$"		return (method.isBridge() || (!method.isSynthetic() && !isGroovyObjectMethod(method)));"
"ClassUtils.java:1331"$0$0$0$1$2$"	}"
"ClassUtils.java:1332"$0$0$0$0$0$""
"ClassUtils.java:1333"$0$0$0$6$61$"	private static boolean isGroovyObjectMethod(Method method) {"
"ClassUtils.java:1334"$2$0$0$2$81$"		return method.getDeclaringClass().getName().equals(""groovy.lang.GroovyObject"");"
"ClassUtils.java:1335"$0$0$0$1$2$"	}"
"ClassUtils.java:1336"$0$0$0$0$0$""
"ClassUtils.java:1337"$0$0$0$1$4$"	/**"
"ClassUtils.java:1338"$1$0$0$13$80$"	 * Determine whether the given method is overridable in the given target class."
"ClassUtils.java:1339"$0$0$0$7$37$"	 * @param method the method to check"
"ClassUtils.java:1340"$2$0$0$9$56$"	 * @param targetClass the target class to check against"
"ClassUtils.java:1341"$0$0$0$1$4$"	 */"
"ClassUtils.java:1342"$1$0$0$9$86$"	private static boolean isOverridable(Method method, @Nullable Class<?> targetClass) {"
"ClassUtils.java:1343"$1$0$0$3$50$"		if (Modifier.isPrivate(method.getModifiers())) {"
"ClassUtils.java:1344"$0$0$0$2$16$"			return false;"
"ClassUtils.java:1345"$0$0$0$1$3$"		}"
"ClassUtils.java:1346"$2$0$0$5$96$"		if (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {"
"ClassUtils.java:1347"$0$0$0$2$15$"			return true;"
"ClassUtils.java:1348"$0$0$0$1$3$"		}"
"ClassUtils.java:1349"$1$0$0$5$32$"		return (targetClass == null ||"
"ClassUtils.java:1350"$4$0$0$1$84$"				getPackageName(method.getDeclaringClass()).equals(getPackageName(targetClass)));"
"ClassUtils.java:1351"$0$0$0$1$2$"	}"
"ClassUtils.java:1352"$0$0$0$0$0$""
"ClassUtils.java:1353"$0$0$0$1$4$"	/**"
"ClassUtils.java:1354"$0$0$0$9$45$"	 * Return a public static method of a class."
"ClassUtils.java:1355"$0$0$0$9$51$"	 * @param clazz the class which defines the method"
"ClassUtils.java:1356"$0$0$0$7$44$"	 * @param methodName the static method name"
"ClassUtils.java:1357"$0$0$0$9$49$"	 * @param args the parameter types to the method"
"ClassUtils.java:1358"$0$0$0$14$76$"	 * @return the static method, or {@code null} if no static method was found"
"ClassUtils.java:1359"$0$0$0$14$85$"	 * @throws IllegalArgumentException if the method name is blank or the clazz is null"
"ClassUtils.java:1360"$0$0$0$1$4$"	 */"
"ClassUtils.java:1361"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:1362"$1$0$0$10$92$"	public static Method getStaticMethod(Class<?> clazz, String methodName, Class<?>... args) {"
"ClassUtils.java:1363"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ClassUtils.java:1364"$0$0$0$7$61$"		Assert.notNull(methodName, ""Method name must not be null"");"
"ClassUtils.java:1365"$0$0$0$2$7$"		try {"
"ClassUtils.java:1366"$1$0$0$5$53$"			Method method = clazz.getMethod(methodName, args);"
"ClassUtils.java:1367"$1$0$0$6$67$"			return Modifier.isStatic(method.getModifiers()) ? method : null;"
"ClassUtils.java:1368"$0$0$0$1$3$"		}"
"ClassUtils.java:1369"$0$0$0$4$36$"		catch (NoSuchMethodException ex) {"
"ClassUtils.java:1370"$0$0$0$2$15$"			return null;"
"ClassUtils.java:1371"$0$0$0$1$3$"		}"
"ClassUtils.java:1372"$0$0$0$1$2$"	}"
"ClassUtils.java:1373"$0$0$0$0$0$""
"ClassUtils.java:1374"$0$0$0$0$0$""
"ClassUtils.java:1375"$0$0$0$1$10$"	@Nullable"
"ClassUtils.java:1376"$1$0$0$10$98$"	private static Method getMethodOrNull(Class<?> clazz, String methodName, Class<?>[] paramTypes) {"
"ClassUtils.java:1377"$0$0$0$2$7$"		try {"
"ClassUtils.java:1378"$1$0$0$3$50$"			return clazz.getMethod(methodName, paramTypes);"
"ClassUtils.java:1379"$0$0$0$1$3$"		}"
"ClassUtils.java:1380"$0$0$0$4$36$"		catch (NoSuchMethodException ex) {"
"ClassUtils.java:1381"$0$0$0$2$15$"			return null;"
"ClassUtils.java:1382"$0$0$0$1$3$"		}"
"ClassUtils.java:1383"$0$0$0$1$2$"	}"
"ClassUtils.java:1384"$0$0$0$0$0$""
"ClassUtils.java:1385"$0$0$0$8$91$"	private static Set<Method> findMethodCandidatesByName(Class<?> clazz, String methodName) {"
"ClassUtils.java:1386"$0$0$0$5$44$"		Set<Method> candidates = new HashSet<>(1);"
"ClassUtils.java:1387"$1$0$0$4$40$"		Method[] methods = clazz.getMethods();"
"ClassUtils.java:1388"$0$0$0$6$33$"		for (Method method : methods) {"
"ClassUtils.java:1389"$1$0$0$3$45$"			if (methodName.equals(method.getName())) {"
"ClassUtils.java:1390"$0$0$0$1$27$"				candidates.add(method);"
"ClassUtils.java:1391"$0$0$0$1$4$"			}"
"ClassUtils.java:1392"$0$0$0$1$3$"		}"
"ClassUtils.java:1393"$0$0$0$2$20$"		return candidates;"
"ClassUtils.java:1394"$0$0$0$1$2$"	}"
"ClassUtils.java:1395"$0$0$0$0$0$""
"ClassUtils.java:1396"$0$0$0$1$1$"}"
"MergedAnnotationsCollection.java:1"$0$0$0$1$2$"/*"
"MergedAnnotationsCollection.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"MergedAnnotationsCollection.java:3"$0$0$0$1$2$" *"
"MergedAnnotationsCollection.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MergedAnnotationsCollection.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MergedAnnotationsCollection.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MergedAnnotationsCollection.java:7"$0$0$0$1$2$" *"
"MergedAnnotationsCollection.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MergedAnnotationsCollection.java:9"$0$0$0$1$2$" *"
"MergedAnnotationsCollection.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MergedAnnotationsCollection.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MergedAnnotationsCollection.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MergedAnnotationsCollection.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MergedAnnotationsCollection.java:14"$0$0$0$5$33$" * limitations under the License."
"MergedAnnotationsCollection.java:15"$0$0$0$1$3$" */"
"MergedAnnotationsCollection.java:16"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"MergedAnnotationsCollection.java:18"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"MergedAnnotationsCollection.java:20"$0$0$0$2$28$"import java.util.Collection;"
"MergedAnnotationsCollection.java:21"$0$0$0$2$26$"import java.util.Iterator;"
"MergedAnnotationsCollection.java:22"$0$0$0$2$29$"import java.util.Spliterator;"
"MergedAnnotationsCollection.java:23"$0$0$0$2$30$"import java.util.Spliterators;"
"MergedAnnotationsCollection.java:24"$0$0$0$2$35$"import java.util.function.Consumer;"
"MergedAnnotationsCollection.java:25"$0$0$0$2$36$"import java.util.function.Predicate;"
"MergedAnnotationsCollection.java:26"$0$0$0$2$31$"import java.util.stream.Stream;"
"MergedAnnotationsCollection.java:27"$0$0$0$2$38$"import java.util.stream.StreamSupport;"
"MergedAnnotationsCollection.java:28"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:29"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MergedAnnotationsCollection.java:30"$0$0$0$2$39$"import org.springframework.util.Assert;"
"MergedAnnotationsCollection.java:31"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:32"$0$0$0$1$3$"/**"
"MergedAnnotationsCollection.java:33"$0$0$0$10$77$" * {@link MergedAnnotations} implementation backed by a {@link Collection} of"
"MergedAnnotationsCollection.java:34"$0$0$0$8$72$" * {@link MergedAnnotation} instances that represent direct annotations."
"MergedAnnotationsCollection.java:35"$0$0$0$1$2$" *"
"MergedAnnotationsCollection.java:36"$0$0$0$4$23$" * @author Phillip Webb"
"MergedAnnotationsCollection.java:37"$0$0$0$3$13$" * @since 5.2"
"MergedAnnotationsCollection.java:38"$0$0$0$3$40$" * @see MergedAnnotations#of(Collection)"
"MergedAnnotationsCollection.java:39"$0$0$0$1$3$" */"
"MergedAnnotationsCollection.java:40"$0$0$0$6$70$"final class MergedAnnotationsCollection implements MergedAnnotations {"
"MergedAnnotationsCollection.java:41"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:42"$0$0$0$4$49$"	private final MergedAnnotation<?>[] annotations;"
"MergedAnnotationsCollection.java:43"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:44"$0$0$0$4$49$"	private final AnnotationTypeMappings[] mappings;"
"MergedAnnotationsCollection.java:45"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:46"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:47"$0$0$0$4$83$"	private MergedAnnotationsCollection(Collection<MergedAnnotation<?>> annotations) {"
"MergedAnnotationsCollection.java:48"$0$0$0$6$62$"		Assert.notNull(annotations, ""Annotations must not be null"");"
"MergedAnnotationsCollection.java:49"$0$0$0$4$69$"		this.annotations = annotations.toArray(new MergedAnnotation<?>[0]);"
"MergedAnnotationsCollection.java:50"$0$0$0$4$70$"		this.mappings = new AnnotationTypeMappings[this.annotations.length];"
"MergedAnnotationsCollection.java:51"$0$0$0$10$53$"		for (int i = 0; i < this.annotations.length; i++) {"
"MergedAnnotationsCollection.java:52"$0$0$0$4$56$"			MergedAnnotation<?> annotation = this.annotations[i];"
"MergedAnnotationsCollection.java:53"$0$0$0$6$61$"			Assert.notNull(annotation, ""Annotation must not be null"");"
"MergedAnnotationsCollection.java:54"$0$0$0$6$88$"			Assert.isTrue(annotation.isDirectlyPresent(), ""Annotation must be directly present"");"
"MergedAnnotationsCollection.java:55"$1$0$0$10$102$"			Assert.isTrue(annotation.getAggregateIndex() == 0, ""Annotation must have aggregate index of zero"");"
"MergedAnnotationsCollection.java:56"$1$0$0$3$85$"			this.mappings[i] = AnnotationTypeMappings.forAnnotationType(annotation.getType());"
"MergedAnnotationsCollection.java:57"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:58"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:59"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:60"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:61"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:62"$0$0$0$4$59$"	public Iterator<MergedAnnotation<Annotation>> iterator() {"
"MergedAnnotationsCollection.java:63"$0$0$0$2$46$"		return Spliterators.iterator(spliterator());"
"MergedAnnotationsCollection.java:64"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:65"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:66"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:67"$0$0$0$4$65$"	public Spliterator<MergedAnnotation<Annotation>> spliterator() {"
"MergedAnnotationsCollection.java:68"$0$0$0$2$27$"		return spliterator(null);"
"MergedAnnotationsCollection.java:69"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:70"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:71"$0$0$0$9$111$"	private <A extends Annotation> Spliterator<MergedAnnotation<A>> spliterator(@Nullable Object annotationType) {"
"MergedAnnotationsCollection.java:72"$0$0$0$3$54$"		return new AnnotationsSpliterator<>(annotationType);"
"MergedAnnotationsCollection.java:73"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:74"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:75"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:76"$0$0$0$8$75$"	public <A extends Annotation> boolean isPresent(Class<A> annotationType) {"
"MergedAnnotationsCollection.java:77"$0$0$0$3$42$"		return isPresent(annotationType, false);"
"MergedAnnotationsCollection.java:78"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:79"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:80"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:81"$0$0$0$5$50$"	public boolean isPresent(String annotationType) {"
"MergedAnnotationsCollection.java:82"$0$0$0$3$42$"		return isPresent(annotationType, false);"
"MergedAnnotationsCollection.java:83"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:84"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:85"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:86"$0$0$0$8$83$"	public <A extends Annotation> boolean isDirectlyPresent(Class<A> annotationType) {"
"MergedAnnotationsCollection.java:87"$0$0$0$3$41$"		return isPresent(annotationType, true);"
"MergedAnnotationsCollection.java:88"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:89"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:90"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:91"$0$0$0$5$58$"	public boolean isDirectlyPresent(String annotationType) {"
"MergedAnnotationsCollection.java:92"$0$0$0$3$41$"		return isPresent(annotationType, true);"
"MergedAnnotationsCollection.java:93"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:94"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:95"$0$0$0$7$69$"	private boolean isPresent(Object requiredType, boolean directOnly) {"
"MergedAnnotationsCollection.java:96"$0$0$0$6$59$"		for (MergedAnnotation<?> annotation : this.annotations) {"
"MergedAnnotationsCollection.java:97"$1$0$0$6$59$"			Class<? extends Annotation> type = annotation.getType();"
"MergedAnnotationsCollection.java:98"$1$0$0$7$69$"			if (type == requiredType || type.getName().equals(requiredType)) {"
"MergedAnnotationsCollection.java:99"$0$0$0$2$16$"				return true;"
"MergedAnnotationsCollection.java:100"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:101"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:102"$0$0$0$3$20$"		if (!directOnly) {"
"MergedAnnotationsCollection.java:103"$0$0$0$6$58$"			for (AnnotationTypeMappings mappings : this.mappings) {"
"MergedAnnotationsCollection.java:104"$0$0$0$10$47$"				for (int i = 1; i < mappings.size(); i++) {"
"MergedAnnotationsCollection.java:105"$1$0$0$4$53$"					AnnotationTypeMapping mapping = mappings.get(i);"
"MergedAnnotationsCollection.java:106"$0$0$0$4$51$"					if (isMappingForType(mapping, requiredType)) {"
"MergedAnnotationsCollection.java:107"$0$0$0$2$18$"						return true;"
"MergedAnnotationsCollection.java:108"$0$0$0$1$6$"					}"
"MergedAnnotationsCollection.java:109"$0$0$0$1$5$"				}"
"MergedAnnotationsCollection.java:110"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:111"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:112"$0$0$0$2$15$"		return false;"
"MergedAnnotationsCollection.java:113"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:114"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:115"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:116"$1$0$0$8$81$"	public <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType) {"
"MergedAnnotationsCollection.java:117"$1$0$0$4$41$"		return get(annotationType, null, null);"
"MergedAnnotationsCollection.java:118"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:119"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:120"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:121"$1$0$0$7$79$"	public <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType,"
"MergedAnnotationsCollection.java:122"$0$0$0$6$64$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate) {"
"MergedAnnotationsCollection.java:123"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:124"$1$0$0$4$46$"		return get(annotationType, predicate, null);"
"MergedAnnotationsCollection.java:125"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:126"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:127"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:128"$1$0$0$7$79$"	public <A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType,"
"MergedAnnotationsCollection.java:129"$0$0$0$5$62$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate,"
"MergedAnnotationsCollection.java:130"$0$0$0$4$52$"			@Nullable MergedAnnotationSelector<A> selector) {"
"MergedAnnotationsCollection.java:131"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:132"$0$0$0$6$73$"		MergedAnnotation<A> result = find(annotationType, predicate, selector);"
"MergedAnnotationsCollection.java:133"$0$0$0$8$64$"		return (result != null ? result : MergedAnnotation.missing());"
"MergedAnnotationsCollection.java:134"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:135"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:136"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:137"$1$0$0$8$79$"	public <A extends Annotation> MergedAnnotation<A> get(String annotationType) {"
"MergedAnnotationsCollection.java:138"$1$0$0$4$41$"		return get(annotationType, null, null);"
"MergedAnnotationsCollection.java:139"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:140"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:141"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:142"$1$0$0$7$77$"	public <A extends Annotation> MergedAnnotation<A> get(String annotationType,"
"MergedAnnotationsCollection.java:143"$0$0$0$6$64$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate) {"
"MergedAnnotationsCollection.java:144"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:145"$1$0$0$4$46$"		return get(annotationType, predicate, null);"
"MergedAnnotationsCollection.java:146"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:147"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:148"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:149"$1$0$0$7$77$"	public <A extends Annotation> MergedAnnotation<A> get(String annotationType,"
"MergedAnnotationsCollection.java:150"$0$0$0$5$62$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate,"
"MergedAnnotationsCollection.java:151"$0$0$0$4$52$"			@Nullable MergedAnnotationSelector<A> selector) {"
"MergedAnnotationsCollection.java:152"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:153"$0$0$0$6$73$"		MergedAnnotation<A> result = find(annotationType, predicate, selector);"
"MergedAnnotationsCollection.java:154"$0$0$0$8$64$"		return (result != null ? result : MergedAnnotation.missing());"
"MergedAnnotationsCollection.java:155"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:156"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:157"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"MergedAnnotationsCollection.java:158"$0$0$0$1$10$"	@Nullable"
"MergedAnnotationsCollection.java:159"$0$0$0$7$77$"	private <A extends Annotation> MergedAnnotation<A> find(Object requiredType,"
"MergedAnnotationsCollection.java:160"$0$0$0$5$62$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate,"
"MergedAnnotationsCollection.java:161"$0$0$0$4$52$"			@Nullable MergedAnnotationSelector<A> selector) {"
"MergedAnnotationsCollection.java:162"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:163"$0$0$0$5$25$"		if (selector == null) {"
"MergedAnnotationsCollection.java:164"$0$0$0$3$50$"			selector = MergedAnnotationSelectors.nearest();"
"MergedAnnotationsCollection.java:165"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:166"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:167"$0$0$0$4$36$"		MergedAnnotation<A> result = null;"
"MergedAnnotationsCollection.java:168"$0$0$0$10$53$"		for (int i = 0; i < this.annotations.length; i++) {"
"MergedAnnotationsCollection.java:169"$0$0$0$4$50$"			MergedAnnotation<?> root = this.annotations[i];"
"MergedAnnotationsCollection.java:170"$0$0$0$4$54$"			AnnotationTypeMappings mappings = this.mappings[i];"
"MergedAnnotationsCollection.java:171"$0$0$0$10$79$"			for (int mappingIndex = 0; mappingIndex < mappings.size(); mappingIndex++) {"
"MergedAnnotationsCollection.java:172"$1$0$0$4$63$"				AnnotationTypeMapping mapping = mappings.get(mappingIndex);"
"MergedAnnotationsCollection.java:173"$0$0$0$4$51$"				if (!isMappingForType(mapping, requiredType)) {"
"MergedAnnotationsCollection.java:174"$0$0$0$1$14$"					continue;"
"MergedAnnotationsCollection.java:175"$0$0$0$1$5$"				}"
"MergedAnnotationsCollection.java:176"$0$0$0$6$54$"				MergedAnnotation<A> candidate = (mappingIndex == 0"
"MergedAnnotationsCollection.java:177"$0$0$0$3$34$"						? (MergedAnnotation<A>) root"
"MergedAnnotationsCollection.java:178"$0$0$0$4$95$"						: TypeMappedAnnotation.createIfPossible(mapping, root, IntrospectionFailureLogger.INFO));"
"MergedAnnotationsCollection.java:179"$0$0$0$11$80$"				if (candidate != null && (predicate == null || predicate.test(candidate))) {"
"MergedAnnotationsCollection.java:180"$0$0$0$3$47$"					if (selector.isBestCandidate(candidate)) {"
"MergedAnnotationsCollection.java:181"$0$0$0$2$23$"						return candidate;"
"MergedAnnotationsCollection.java:182"$0$0$0$1$6$"					}"
"MergedAnnotationsCollection.java:183"$0$0$0$10$80$"					result = (result != null ? selector.select(result, candidate) : candidate);"
"MergedAnnotationsCollection.java:184"$0$0$0$1$5$"				}"
"MergedAnnotationsCollection.java:185"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:186"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:187"$0$0$0$2$16$"		return result;"
"MergedAnnotationsCollection.java:188"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:189"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:190"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:191"$0$0$0$8$92$"	public <A extends Annotation> Stream<MergedAnnotation<A>> stream(Class<A> annotationType) {"
"MergedAnnotationsCollection.java:192"$0$0$0$3$66$"		return StreamSupport.stream(spliterator(annotationType), false);"
"MergedAnnotationsCollection.java:193"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:194"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:195"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:196"$0$0$0$8$90$"	public <A extends Annotation> Stream<MergedAnnotation<A>> stream(String annotationType) {"
"MergedAnnotationsCollection.java:197"$0$0$0$3$66$"		return StreamSupport.stream(spliterator(annotationType), false);"
"MergedAnnotationsCollection.java:198"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:199"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:200"$0$0$0$1$10$"	@Override"
"MergedAnnotationsCollection.java:201"$0$0$0$4$55$"	public Stream<MergedAnnotation<Annotation>> stream() {"
"MergedAnnotationsCollection.java:202"$0$0$0$3$52$"		return StreamSupport.stream(spliterator(), false);"
"MergedAnnotationsCollection.java:203"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:204"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:205"$0$0$0$9$104$"	private static boolean isMappingForType(AnnotationTypeMapping mapping, @Nullable Object requiredType) {"
"MergedAnnotationsCollection.java:206"$0$0$0$5$29$"		if (requiredType == null) {"
"MergedAnnotationsCollection.java:207"$0$0$0$2$15$"			return true;"
"MergedAnnotationsCollection.java:208"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:209"$1$0$0$6$71$"		Class<? extends Annotation> actualType = mapping.getAnnotationType();"
"MergedAnnotationsCollection.java:210"$1$0$0$6$83$"		return (actualType == requiredType || actualType.getName().equals(requiredType));"
"MergedAnnotationsCollection.java:211"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:212"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:213"$0$0$0$5$75$"	static MergedAnnotations of(Collection<MergedAnnotation<?>> annotations) {"
"MergedAnnotationsCollection.java:214"$0$0$0$6$62$"		Assert.notNull(annotations, ""Annotations must not be null"");"
"MergedAnnotationsCollection.java:215"$0$0$0$3$30$"		if (annotations.isEmpty()) {"
"MergedAnnotationsCollection.java:216"$0$0$0$2$37$"			return TypeMappedAnnotations.NONE;"
"MergedAnnotationsCollection.java:217"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:218"$0$0$0$3$54$"		return new MergedAnnotationsCollection(annotations);"
"MergedAnnotationsCollection.java:219"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:220"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:221"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:222"$0$0$0$8$105$"	private class AnnotationsSpliterator<A extends Annotation> implements Spliterator<MergedAnnotation<A>> {"
"MergedAnnotationsCollection.java:223"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:224"$0$0$0$1$11$"		@Nullable"
"MergedAnnotationsCollection.java:225"$0$0$0$3$30$"		private Object requiredType;"
"MergedAnnotationsCollection.java:226"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:227"$0$0$0$4$37$"		private final int[] mappingCursors;"
"MergedAnnotationsCollection.java:228"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:229"$0$0$0$5$64$"		public AnnotationsSpliterator(@Nullable Object requiredType) {"
"MergedAnnotationsCollection.java:230"$0$0$0$4$53$"			this.mappingCursors = new int[annotations.length];"
"MergedAnnotationsCollection.java:231"$0$0$0$3$36$"			this.requiredType = requiredType;"
"MergedAnnotationsCollection.java:232"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:233"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:234"$0$0$0$1$11$"		@Override"
"MergedAnnotationsCollection.java:235"$0$0$0$7$75$"		public boolean tryAdvance(Consumer<? super MergedAnnotation<A>> action) {"
"MergedAnnotationsCollection.java:236"$0$0$0$4$42$"			int lowestDistance = Integer.MAX_VALUE;"
"MergedAnnotationsCollection.java:237"$0$0$0$4$29$"			int annotationResult = -1;"
"MergedAnnotationsCollection.java:238"$0$0$0$10$91$"			for (int annotationIndex = 0; annotationIndex < annotations.length; annotationIndex++) {"
"MergedAnnotationsCollection.java:239"$1$0$0$4$76$"				AnnotationTypeMapping mapping = getNextSuitableMapping(annotationIndex);"
"MergedAnnotationsCollection.java:240"$1$0$0$9$68$"				if (mapping != null && mapping.getDistance() < lowestDistance) {"
"MergedAnnotationsCollection.java:241"$0$0$0$3$40$"					annotationResult = annotationIndex;"
"MergedAnnotationsCollection.java:242"$1$0$0$3$44$"					lowestDistance = mapping.getDistance();"
"MergedAnnotationsCollection.java:243"$0$0$0$1$5$"				}"
"MergedAnnotationsCollection.java:244"$0$0$0$5$30$"				if (lowestDistance == 0) {"
"MergedAnnotationsCollection.java:245"$0$0$0$1$11$"					break;"
"MergedAnnotationsCollection.java:246"$0$0$0$1$5$"				}"
"MergedAnnotationsCollection.java:247"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:248"$0$0$0$5$32$"			if (annotationResult != -1) {"
"MergedAnnotationsCollection.java:249"$0$0$0$4$76$"				MergedAnnotation<A> mergedAnnotation = createMergedAnnotationIfPossible("
"MergedAnnotationsCollection.java:250"$0$0$0$2$63$"						annotationResult, this.mappingCursors[annotationResult]);"
"MergedAnnotationsCollection.java:251"$0$0$0$1$44$"				this.mappingCursors[annotationResult]++;"
"MergedAnnotationsCollection.java:252"$0$0$0$5$35$"				if (mergedAnnotation == null) {"
"MergedAnnotationsCollection.java:253"$0$0$0$2$31$"					return tryAdvance(action);"
"MergedAnnotationsCollection.java:254"$0$0$0$1$5$"				}"
"MergedAnnotationsCollection.java:255"$0$0$0$1$36$"				action.accept(mergedAnnotation);"
"MergedAnnotationsCollection.java:256"$0$0$0$2$16$"				return true;"
"MergedAnnotationsCollection.java:257"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:258"$0$0$0$2$16$"			return false;"
"MergedAnnotationsCollection.java:259"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:260"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:261"$0$0$0$1$11$"		@Nullable"
"MergedAnnotationsCollection.java:262"$1$0$0$5$77$"		private AnnotationTypeMapping getNextSuitableMapping(int annotationIndex) {"
"MergedAnnotationsCollection.java:263"$0$0$0$2$33$"			AnnotationTypeMapping mapping;"
"MergedAnnotationsCollection.java:264"$0$0$0$2$7$"			do {"
"MergedAnnotationsCollection.java:265"$1$0$0$4$80$"				mapping = getMapping(annotationIndex, this.mappingCursors[annotationIndex]);"
"MergedAnnotationsCollection.java:266"$0$0$0$8$74$"				if (mapping != null && isMappingForType(mapping, this.requiredType)) {"
"MergedAnnotationsCollection.java:267"$0$0$0$2$20$"					return mapping;"
"MergedAnnotationsCollection.java:268"$0$0$0$1$5$"				}"
"MergedAnnotationsCollection.java:269"$0$0$0$1$43$"				this.mappingCursors[annotationIndex]++;"
"MergedAnnotationsCollection.java:270"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:271"$0$0$0$4$27$"			while (mapping != null);"
"MergedAnnotationsCollection.java:272"$0$0$0$2$15$"			return null;"
"MergedAnnotationsCollection.java:273"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:274"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:275"$0$0$0$1$11$"		@Nullable"
"MergedAnnotationsCollection.java:276"$1$0$0$7$83$"		private AnnotationTypeMapping getMapping(int annotationIndex, int mappingIndex) {"
"MergedAnnotationsCollection.java:277"$0$0$0$4$96$"			AnnotationTypeMappings mappings = MergedAnnotationsCollection.this.mappings[annotationIndex];"
"MergedAnnotationsCollection.java:278"$1$0$0$8$79$"			return (mappingIndex < mappings.size() ? mappings.get(mappingIndex) : null);"
"MergedAnnotationsCollection.java:279"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:280"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:281"$0$0$0$1$11$"		@Nullable"
"MergedAnnotationsCollection.java:282"$0$0$0$1$32$"		@SuppressWarnings(""unchecked"")"
"MergedAnnotationsCollection.java:283"$0$0$0$7$103$"		private MergedAnnotation<A> createMergedAnnotationIfPossible(int annotationIndex, int mappingIndex) {"
"MergedAnnotationsCollection.java:284"$0$0$0$4$59$"			MergedAnnotation<?> root = annotations[annotationIndex];"
"MergedAnnotationsCollection.java:285"$0$0$0$5$27$"			if (mappingIndex == 0) {"
"MergedAnnotationsCollection.java:286"$0$0$0$3$38$"				return (MergedAnnotation<A>) root;"
"MergedAnnotationsCollection.java:287"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:288"$0$0$0$7$67$"			IntrospectionFailureLogger logger = (this.requiredType != null ?"
"MergedAnnotationsCollection.java:289"$0$0$0$3$73$"					IntrospectionFailureLogger.INFO : IntrospectionFailureLogger.DEBUG);"
"MergedAnnotationsCollection.java:290"$0$0$0$2$48$"			return TypeMappedAnnotation.createIfPossible("
"MergedAnnotationsCollection.java:291"$1$0$0$3$64$"					mappings[annotationIndex].get(mappingIndex), root, logger);"
"MergedAnnotationsCollection.java:292"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:293"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:294"$0$0$0$1$11$"		@Override"
"MergedAnnotationsCollection.java:295"$0$0$0$1$11$"		@Nullable"
"MergedAnnotationsCollection.java:296"$0$0$0$4$54$"		public Spliterator<MergedAnnotation<A>> trySplit() {"
"MergedAnnotationsCollection.java:297"$0$0$0$2$15$"			return null;"
"MergedAnnotationsCollection.java:298"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:299"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:300"$0$0$0$1$11$"		@Override"
"MergedAnnotationsCollection.java:301"$0$0$0$4$30$"		public long estimateSize() {"
"MergedAnnotationsCollection.java:302"$0$0$0$4$16$"			int size = 0;"
"MergedAnnotationsCollection.java:303"$0$0$0$10$49$"			for (int i = 0; i < annotations.length; i++) {"
"MergedAnnotationsCollection.java:304"$0$0$0$4$83$"				AnnotationTypeMappings mappings = MergedAnnotationsCollection.this.mappings[i];"
"MergedAnnotationsCollection.java:305"$0$0$0$4$43$"				int numberOfMappings = mappings.size();"
"MergedAnnotationsCollection.java:306"$0$0$0$4$74$"				numberOfMappings -= Math.min(this.mappingCursors[i], mappings.size());"
"MergedAnnotationsCollection.java:307"$0$0$0$3$29$"				size += numberOfMappings;"
"MergedAnnotationsCollection.java:308"$0$0$0$1$4$"			}"
"MergedAnnotationsCollection.java:309"$0$0$0$2$15$"			return size;"
"MergedAnnotationsCollection.java:310"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:311"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:312"$0$0$0$1$11$"		@Override"
"MergedAnnotationsCollection.java:313"$0$0$0$4$32$"		public int characteristics() {"
"MergedAnnotationsCollection.java:314"$0$0$0$4$30$"			return NONNULL | IMMUTABLE;"
"MergedAnnotationsCollection.java:315"$0$0$0$1$3$"		}"
"MergedAnnotationsCollection.java:316"$0$0$0$1$2$"	}"
"MergedAnnotationsCollection.java:317"$0$0$0$0$0$""
"MergedAnnotationsCollection.java:318"$0$0$0$1$1$"}"
"MethodMetadataReadingVisitor.java:1"$0$0$0$1$2$"/*"
"MethodMetadataReadingVisitor.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"MethodMetadataReadingVisitor.java:3"$0$0$0$1$2$" *"
"MethodMetadataReadingVisitor.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MethodMetadataReadingVisitor.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MethodMetadataReadingVisitor.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MethodMetadataReadingVisitor.java:7"$0$0$0$1$2$" *"
"MethodMetadataReadingVisitor.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MethodMetadataReadingVisitor.java:9"$0$0$0$1$2$" *"
"MethodMetadataReadingVisitor.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MethodMetadataReadingVisitor.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MethodMetadataReadingVisitor.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MethodMetadataReadingVisitor.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MethodMetadataReadingVisitor.java:14"$0$0$0$5$33$" * limitations under the License."
"MethodMetadataReadingVisitor.java:15"$0$0$0$1$3$" */"
"MethodMetadataReadingVisitor.java:16"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:17"$0$0$0$2$51$"package org.springframework.core.type.classreading;"
"MethodMetadataReadingVisitor.java:18"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:19"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"MethodMetadataReadingVisitor.java:20"$0$0$0$2$22$"import java.util.List;"
"MethodMetadataReadingVisitor.java:21"$0$0$0$2$21$"import java.util.Map;"
"MethodMetadataReadingVisitor.java:22"$0$0$0$2$21$"import java.util.Set;"
"MethodMetadataReadingVisitor.java:23"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:24"$0$0$0$2$49$"import org.springframework.asm.AnnotationVisitor;"
"MethodMetadataReadingVisitor.java:25"$0$0$0$2$45$"import org.springframework.asm.MethodVisitor;"
"MethodMetadataReadingVisitor.java:26"$0$0$0$2$39$"import org.springframework.asm.Opcodes;"
"MethodMetadataReadingVisitor.java:27"$0$0$0$2$45$"import org.springframework.asm.SpringAsmInfo;"
"MethodMetadataReadingVisitor.java:28"$0$0$0$2$36$"import org.springframework.asm.Type;"
"MethodMetadataReadingVisitor.java:29"$0$0$0$2$64$"import org.springframework.core.annotation.AnnotationAttributes;"
"MethodMetadataReadingVisitor.java:30"$0$0$0$2$61$"import org.springframework.core.annotation.MergedAnnotations;"
"MethodMetadataReadingVisitor.java:31"$0$0$0$2$52$"import org.springframework.core.type.MethodMetadata;"
"MethodMetadataReadingVisitor.java:32"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MethodMetadataReadingVisitor.java:33"$0$0$0$2$52$"import org.springframework.util.LinkedMultiValueMap;"
"MethodMetadataReadingVisitor.java:34"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"MethodMetadataReadingVisitor.java:35"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:36"$0$0$0$1$3$"/**"
"MethodMetadataReadingVisitor.java:37"$0$0$0$13$74$" * ASM method visitor which looks for the annotations defined on a method,"
"MethodMetadataReadingVisitor.java:38"$0$0$0$7$81$" * exposing them through the {@link org.springframework.core.type.MethodMetadata}"
"MethodMetadataReadingVisitor.java:39"$0$0$0$2$13$" * interface."
"MethodMetadataReadingVisitor.java:40"$0$0$0$1$2$" *"
"MethodMetadataReadingVisitor.java:41"$0$0$0$4$26$" * @author Juergen Hoeller"
"MethodMetadataReadingVisitor.java:42"$0$0$0$4$23$" * @author Mark Pollack"
"MethodMetadataReadingVisitor.java:43"$0$0$0$4$22$" * @author Costin Leau"
"MethodMetadataReadingVisitor.java:44"$0$0$0$4$22$" * @author Chris Beams"
"MethodMetadataReadingVisitor.java:45"$0$0$0$4$23$" * @author Phillip Webb"
"MethodMetadataReadingVisitor.java:46"$0$0$0$3$13$" * @since 3.0"
"MethodMetadataReadingVisitor.java:47"$0$0$0$14$81$" * @deprecated As of Spring Framework 5.2, this class and related classes in this"
"MethodMetadataReadingVisitor.java:48"$0$0$0$8$79$" * package have been replaced by {@link SimpleAnnotationMetadataReadingVisitor}"
"MethodMetadataReadingVisitor.java:49"$0$0$0$10$61$" * and related classes for internal use within the framework."
"MethodMetadataReadingVisitor.java:50"$0$0$0$1$3$" */"
"MethodMetadataReadingVisitor.java:51"$0$0$0$1$10$"Deprecated"
"MethodMetadataReadingVisitor.java:52"$0$0$0$8$91$"public class MethodMetadataReadingVisitor extends MethodVisitor implements MethodMetadata {"
"MethodMetadataReadingVisitor.java:53"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:54"$0$0$0$4$35$"	protected final String methodName;"
"MethodMetadataReadingVisitor.java:55"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:56"$0$0$0$4$28$"	protected final int access;"
"MethodMetadataReadingVisitor.java:57"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:58"$0$0$0$4$43$"	protected final String declaringClassName;"
"MethodMetadataReadingVisitor.java:59"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:60"$0$0$0$4$39$"	protected final String returnTypeName;"
"MethodMetadataReadingVisitor.java:61"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:62"$0$0$0$1$10$"	@Nullable"
"MethodMetadataReadingVisitor.java:63"$0$0$0$4$41$"	protected final ClassLoader classLoader;"
"MethodMetadataReadingVisitor.java:64"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:65"$0$0$0$4$55$"	protected final Set<MethodMetadata> methodMetadataSet;"
"MethodMetadataReadingVisitor.java:66"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:67"$0$0$0$8$85$"	protected final Map<String, Set<String>> metaAnnotationMap = new LinkedHashMap<>(4);"
"MethodMetadataReadingVisitor.java:68"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:69"$0$0$0$8$112$"	protected final LinkedMultiValueMap<String, AnnotationAttributes> attributesMap = new LinkedMultiValueMap<>(4);"
"MethodMetadataReadingVisitor.java:70"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:71"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:72"$0$0$0$7$94$"	public MethodMetadataReadingVisitor(String methodName, int access, String declaringClassName,"
"MethodMetadataReadingVisitor.java:73"$0$0$0$8$101$"			String returnTypeName, @Nullable ClassLoader classLoader, Set<MethodMetadata> methodMetadataSet) {"
"MethodMetadataReadingVisitor.java:74"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:75"$0$0$0$1$35$"		super(SpringAsmInfo.ASM_VERSION);"
"MethodMetadataReadingVisitor.java:76"$0$0$0$3$31$"		this.methodName = methodName;"
"MethodMetadataReadingVisitor.java:77"$0$0$0$3$23$"		this.access = access;"
"MethodMetadataReadingVisitor.java:78"$0$0$0$3$47$"		this.declaringClassName = declaringClassName;"
"MethodMetadataReadingVisitor.java:79"$0$0$0$3$39$"		this.returnTypeName = returnTypeName;"
"MethodMetadataReadingVisitor.java:80"$0$0$0$3$33$"		this.classLoader = classLoader;"
"MethodMetadataReadingVisitor.java:81"$0$0$0$3$45$"		this.methodMetadataSet = methodMetadataSet;"
"MethodMetadataReadingVisitor.java:82"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:83"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:84"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:85"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:86"$1$0$0$4$44$"	public MergedAnnotations getAnnotations() {"
"MethodMetadataReadingVisitor.java:87"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"MethodMetadataReadingVisitor.java:88"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:89"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:90"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:91"$0$0$0$1$10$"	@Nullable"
"MethodMetadataReadingVisitor.java:92"$0$0$0$8$79$"	public AnnotationVisitor visitAnnotation(final String desc, boolean visible) {"
"MethodMetadataReadingVisitor.java:93"$0$0$0$3$17$"		if (!visible) {"
"MethodMetadataReadingVisitor.java:94"$0$0$0$2$15$"			return null;"
"MethodMetadataReadingVisitor.java:95"$0$0$0$1$3$"		}"
"MethodMetadataReadingVisitor.java:96"$0$0$0$1$35$"		this.methodMetadataSet.add(this);"
"MethodMetadataReadingVisitor.java:97"$2$0$0$4$55$"		String className = Type.getType(desc).getClassName();"
"MethodMetadataReadingVisitor.java:98"$0$0$0$3$48$"		return new AnnotationAttributesReadingVisitor("
"MethodMetadataReadingVisitor.java:99"$0$0$0$4$77$"				className, this.attributesMap, this.metaAnnotationMap, this.classLoader);"
"MethodMetadataReadingVisitor.java:100"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:101"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:102"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:103"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:104"$1$0$0$4$32$"	public String getMethodName() {"
"MethodMetadataReadingVisitor.java:105"$0$0$0$2$25$"		return this.methodName;"
"MethodMetadataReadingVisitor.java:106"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:107"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:108"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:109"$0$0$0$4$30$"	public boolean isAbstract() {"
"MethodMetadataReadingVisitor.java:110"$0$0$0$6$53$"		return ((this.access & Opcodes.ACC_ABSTRACT) != 0);"
"MethodMetadataReadingVisitor.java:111"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:112"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:113"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:114"$0$0$0$4$28$"	public boolean isStatic() {"
"MethodMetadataReadingVisitor.java:115"$0$0$0$6$51$"		return ((this.access & Opcodes.ACC_STATIC) != 0);"
"MethodMetadataReadingVisitor.java:116"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:117"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:118"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:119"$0$0$0$4$27$"	public boolean isFinal() {"
"MethodMetadataReadingVisitor.java:120"$0$0$0$6$50$"		return ((this.access & Opcodes.ACC_FINAL) != 0);"
"MethodMetadataReadingVisitor.java:121"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:122"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:123"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:124"$0$0$0$4$33$"	public boolean isOverridable() {"
"MethodMetadataReadingVisitor.java:125"$0$0$0$10$83$"		return (!isStatic() && !isFinal() && ((this.access & Opcodes.ACC_PRIVATE) == 0));"
"MethodMetadataReadingVisitor.java:126"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:127"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:128"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:129"$0$0$0$5$52$"	public boolean isAnnotated(String annotationName) {"
"MethodMetadataReadingVisitor.java:130"$0$0$0$2$56$"		return this.attributesMap.containsKey(annotationName);"
"MethodMetadataReadingVisitor.java:131"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:132"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:133"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:134"$0$0$0$1$10$"	@Nullable"
"MethodMetadataReadingVisitor.java:135"$1$0$0$7$106$"	public AnnotationAttributes getAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"MethodMetadataReadingVisitor.java:136"$1$0$0$4$89$"		AnnotationAttributes raw = AnnotationReadingVisitorUtils.getMergedAnnotationAttributes("
"MethodMetadataReadingVisitor.java:137"$0$0$0$3$64$"				this.attributesMap, this.metaAnnotationMap, annotationName);"
"MethodMetadataReadingVisitor.java:138"$0$0$0$5$20$"		if (raw == null) {"
"MethodMetadataReadingVisitor.java:139"$0$0$0$2$15$"			return null;"
"MethodMetadataReadingVisitor.java:140"$0$0$0$1$3$"		}"
"MethodMetadataReadingVisitor.java:141"$0$0$0$2$58$"		return AnnotationReadingVisitorUtils.convertClassValues("
"MethodMetadataReadingVisitor.java:142"$1$0$0$9$84$"				""method '"" + getMethodName() + ""'"", this.classLoader, raw, classValuesAsString);"
"MethodMetadataReadingVisitor.java:143"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:144"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:145"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:146"$0$0$0$1$10$"	@Nullable"
"MethodMetadataReadingVisitor.java:147"$1$0$0$8$118$"	public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"MethodMetadataReadingVisitor.java:148"$0$0$0$3$56$"		if (!this.attributesMap.containsKey(annotationName)) {"
"MethodMetadataReadingVisitor.java:149"$0$0$0$2$15$"			return null;"
"MethodMetadataReadingVisitor.java:150"$0$0$0$1$3$"		}"
"MethodMetadataReadingVisitor.java:151"$0$0$0$6$76$"		MultiValueMap<String, Object> allAttributes = new LinkedMultiValueMap<>();"
"MethodMetadataReadingVisitor.java:152"$1$0$0$4$85$"		List<AnnotationAttributes> attributesList = this.attributesMap.get(annotationName);"
"MethodMetadataReadingVisitor.java:153"$0$0$0$5$31$"		if (attributesList != null) {"
"MethodMetadataReadingVisitor.java:154"$1$0$0$9$65$"			String annotatedElement = ""method '"" + getMethodName() + '\'';"
"MethodMetadataReadingVisitor.java:155"$0$0$0$6$69$"			for (AnnotationAttributes annotationAttributes : attributesList) {"
"MethodMetadataReadingVisitor.java:156"$0$0$0$4$96$"				AnnotationAttributes convertedAttributes = AnnotationReadingVisitorUtils.convertClassValues("
"MethodMetadataReadingVisitor.java:157"$0$0$0$4$85$"						annotatedElement, this.classLoader, annotationAttributes, classValuesAsString);"
"MethodMetadataReadingVisitor.java:158"$0$0$0$1$52$"				convertedAttributes.forEach(allAttributes::add);"
"MethodMetadataReadingVisitor.java:159"$0$0$0$1$4$"			}"
"MethodMetadataReadingVisitor.java:160"$0$0$0$1$3$"		}"
"MethodMetadataReadingVisitor.java:161"$0$0$0$2$23$"		return allAttributes;"
"MethodMetadataReadingVisitor.java:162"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:163"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:164"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:165"$1$0$0$4$40$"	public String getDeclaringClassName() {"
"MethodMetadataReadingVisitor.java:166"$0$0$0$2$33$"		return this.declaringClassName;"
"MethodMetadataReadingVisitor.java:167"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:168"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:169"$0$0$0$1$10$"	@Override"
"MethodMetadataReadingVisitor.java:170"$1$0$0$4$36$"	public String getReturnTypeName() {"
"MethodMetadataReadingVisitor.java:171"$0$0$0$2$29$"		return this.returnTypeName;"
"MethodMetadataReadingVisitor.java:172"$0$0$0$1$2$"	}"
"MethodMetadataReadingVisitor.java:173"$0$0$0$0$0$""
"MethodMetadataReadingVisitor.java:174"$0$0$0$1$1$"}"
"SimpleAliasRegistry.java:1"$0$0$0$1$2$"/*"
"SimpleAliasRegistry.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"SimpleAliasRegistry.java:3"$0$0$0$1$2$" *"
"SimpleAliasRegistry.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SimpleAliasRegistry.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SimpleAliasRegistry.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SimpleAliasRegistry.java:7"$0$0$0$1$2$" *"
"SimpleAliasRegistry.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SimpleAliasRegistry.java:9"$0$0$0$1$2$" *"
"SimpleAliasRegistry.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SimpleAliasRegistry.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SimpleAliasRegistry.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SimpleAliasRegistry.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SimpleAliasRegistry.java:14"$0$0$0$5$33$" * limitations under the License."
"SimpleAliasRegistry.java:15"$0$0$0$1$3$" */"
"SimpleAliasRegistry.java:16"$0$0$0$0$0$""
"SimpleAliasRegistry.java:17"$0$0$0$2$33$"package org.springframework.core;"
"SimpleAliasRegistry.java:18"$0$0$0$0$0$""
"SimpleAliasRegistry.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"SimpleAliasRegistry.java:20"$0$0$0$2$25$"import java.util.HashMap;"
"SimpleAliasRegistry.java:21"$0$0$0$2$22$"import java.util.List;"
"SimpleAliasRegistry.java:22"$0$0$0$2$21$"import java.util.Map;"
"SimpleAliasRegistry.java:23"$0$0$0$2$46$"import java.util.concurrent.ConcurrentHashMap;"
"SimpleAliasRegistry.java:24"$0$0$0$0$0$""
"SimpleAliasRegistry.java:25"$0$0$0$2$38$"import org.apache.commons.logging.Log;"
"SimpleAliasRegistry.java:26"$0$0$0$2$45$"import org.apache.commons.logging.LogFactory;"
"SimpleAliasRegistry.java:27"$0$0$0$0$0$""
"SimpleAliasRegistry.java:28"$0$0$0$2$39$"import org.springframework.util.Assert;"
"SimpleAliasRegistry.java:29"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"SimpleAliasRegistry.java:30"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"SimpleAliasRegistry.java:31"$0$0$0$2$52$"import org.springframework.util.StringValueResolver;"
"SimpleAliasRegistry.java:32"$0$0$0$0$0$""
"SimpleAliasRegistry.java:33"$0$0$0$1$3$"/**"
"SimpleAliasRegistry.java:34"$0$0$0$8$64$" * Simple implementation of the {@link AliasRegistry} interface."
"SimpleAliasRegistry.java:35"$0$0$0$6$30$" * <p>Serves as base class for"
"SimpleAliasRegistry.java:36"$0$0$0$3$75$" * {@link org.springframework.beans.factory.support.BeanDefinitionRegistry}"
"SimpleAliasRegistry.java:37"$0$0$0$2$19$" * implementations."
"SimpleAliasRegistry.java:38"$0$0$0$1$2$" *"
"SimpleAliasRegistry.java:39"$0$0$0$4$26$" * @author Juergen Hoeller"
"SimpleAliasRegistry.java:40"$0$0$0$4$22$" * @author Qimiao Chen"
"SimpleAliasRegistry.java:41"$0$0$0$3$15$" * @since 2.5.2"
"SimpleAliasRegistry.java:42"$0$0$0$1$3$" */"
"SimpleAliasRegistry.java:43"$0$0$0$6$59$"public class SimpleAliasRegistry implements AliasRegistry {"
"SimpleAliasRegistry.java:44"$0$0$0$0$0$""
"SimpleAliasRegistry.java:45"$0$0$0$6$39$"	/** Logger available to subclasses. */"
"SimpleAliasRegistry.java:46"$2$0$0$6$60$"	protected final Log logger = LogFactory.getLog(getClass());"
"SimpleAliasRegistry.java:47"$0$0$0$0$0$""
"SimpleAliasRegistry.java:48"$0$0$0$8$41$"	/** Map from alias to canonical name. */"
"SimpleAliasRegistry.java:49"$0$0$0$8$74$"	private final Map<String, String> aliasMap = new ConcurrentHashMap<>(16);"
"SimpleAliasRegistry.java:50"$0$0$0$0$0$""
"SimpleAliasRegistry.java:51"$0$0$0$0$0$""
"SimpleAliasRegistry.java:52"$0$0$0$1$10$"	@Override"
"SimpleAliasRegistry.java:53"$0$0$0$7$55$"	public void registerAlias(String name, String alias) {"
"SimpleAliasRegistry.java:54"$0$0$0$6$51$"		Assert.hasText(name, ""'name' must not be empty"");"
"SimpleAliasRegistry.java:55"$0$0$0$6$53$"		Assert.hasText(alias, ""'alias' must not be empty"");"
"SimpleAliasRegistry.java:56"$0$0$0$3$32$"		synchronized (this.aliasMap) {"
"SimpleAliasRegistry.java:57"$0$0$0$3$28$"			if (alias.equals(name)) {"
"SimpleAliasRegistry.java:58"$0$0$0$1$32$"				this.aliasMap.remove(alias);"
"SimpleAliasRegistry.java:59"$0$0$0$3$34$"				if (logger.isDebugEnabled()) {"
"SimpleAliasRegistry.java:60"$0$0$0$14$91$"					logger.debug(""Alias definition '"" + alias + ""' ignored since it points to same name"");"
"SimpleAliasRegistry.java:61"$0$0$0$1$5$"				}"
"SimpleAliasRegistry.java:62"$0$0$0$1$4$"			}"
"SimpleAliasRegistry.java:63"$0$0$0$2$9$"			else {"
"SimpleAliasRegistry.java:64"$1$0$0$4$53$"				String registeredName = this.aliasMap.get(alias);"
"SimpleAliasRegistry.java:65"$0$0$0$5$33$"				if (registeredName != null) {"
"SimpleAliasRegistry.java:66"$0$0$0$3$39$"					if (registeredName.equals(name)) {"
"SimpleAliasRegistry.java:67"$0$0$1$9$51$"						// An existing alias - no need to re-register"
"SimpleAliasRegistry.java:68"$0$0$0$1$13$"						return;"
"SimpleAliasRegistry.java:69"$0$0$0$1$6$"					}"
"SimpleAliasRegistry.java:70"$0$0$0$3$35$"					if (!allowAliasOverriding()) {"
"SimpleAliasRegistry.java:71"$0$0$0$14$88$"						throw new IllegalStateException(""Cannot define alias '"" + alias + ""' for name '"" +"
"SimpleAliasRegistry.java:72"$0$0$0$14$81$"								name + ""': It is already registered for name '"" + registeredName + ""'."");"
"SimpleAliasRegistry.java:73"$0$0$0$1$6$"					}"
"SimpleAliasRegistry.java:74"$0$0$0$3$35$"					if (logger.isDebugEnabled()) {"
"SimpleAliasRegistry.java:75"$0$0$0$13$88$"						logger.debug(""Overriding alias '"" + alias + ""' definition for registered name '"" +"
"SimpleAliasRegistry.java:76"$1$0$0$12$66$"								registeredName + ""' with new target name '"" + name + ""'"");"
"SimpleAliasRegistry.java:77"$0$0$0$1$6$"					}"
"SimpleAliasRegistry.java:78"$0$0$0$1$5$"				}"
"SimpleAliasRegistry.java:79"$0$0$0$2$37$"				checkForAliasCircle(name, alias);"
"SimpleAliasRegistry.java:80"$0$0$0$2$35$"				this.aliasMap.put(alias, name);"
"SimpleAliasRegistry.java:81"$0$0$0$3$34$"				if (logger.isTraceEnabled()) {"
"SimpleAliasRegistry.java:82"$0$0$0$15$89$"					logger.trace(""Alias definition '"" + alias + ""' registered for name '"" + name + ""'"");"
"SimpleAliasRegistry.java:83"$0$0$0$1$5$"				}"
"SimpleAliasRegistry.java:84"$0$0$0$1$4$"			}"
"SimpleAliasRegistry.java:85"$0$0$0$1$3$"		}"
"SimpleAliasRegistry.java:86"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:87"$0$0$0$0$0$""
"SimpleAliasRegistry.java:88"$0$0$0$1$4$"	/**"
"SimpleAliasRegistry.java:89"$0$0$0$7$50$"	 * Determine whether alias overriding is allowed."
"SimpleAliasRegistry.java:90"$0$0$0$5$31$"	 * <p>Default is {@code true}."
"SimpleAliasRegistry.java:91"$0$0$0$1$4$"	 */"
"SimpleAliasRegistry.java:92"$0$0$0$4$43$"	protected boolean allowAliasOverriding() {"
"SimpleAliasRegistry.java:93"$0$0$0$2$14$"		return true;"
"SimpleAliasRegistry.java:94"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:95"$0$0$0$0$0$""
"SimpleAliasRegistry.java:96"$0$0$0$1$4$"	/**"
"SimpleAliasRegistry.java:97"$0$0$0$11$68$"	 * Determine whether the given name has the given alias registered."
"SimpleAliasRegistry.java:98"$0$0$0$7$33$"	 * @param name the name to check"
"SimpleAliasRegistry.java:99"$0$0$0$8$38$"	 * @param alias the alias to look for"
"SimpleAliasRegistry.java:100"$0$0$0$3$16$"	 * @since 4.2.1"
"SimpleAliasRegistry.java:101"$0$0$0$1$4$"	 */"
"SimpleAliasRegistry.java:102"$0$0$0$7$53$"	public boolean hasAlias(String name, String alias) {"
"SimpleAliasRegistry.java:103"$1$0$0$4$51$"		String registeredName = this.aliasMap.get(alias);"
"SimpleAliasRegistry.java:104"$0$0$0$7$84$"		return ObjectUtils.nullSafeEquals(registeredName, name) || (registeredName != null"
"SimpleAliasRegistry.java:105"$0$0$0$3$39$"				&& hasAlias(name, registeredName));"
"SimpleAliasRegistry.java:106"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:107"$0$0$0$0$0$""
"SimpleAliasRegistry.java:108"$0$0$0$1$10$"	@Override"
"SimpleAliasRegistry.java:109"$0$0$0$5$40$"	public void removeAlias(String alias) {"
"SimpleAliasRegistry.java:110"$0$0$0$3$32$"		synchronized (this.aliasMap) {"
"SimpleAliasRegistry.java:111"$0$0$0$4$45$"			String name = this.aliasMap.remove(alias);"
"SimpleAliasRegistry.java:112"$0$0$0$5$22$"			if (name == null) {"
"SimpleAliasRegistry.java:113"$0$0$0$10$75$"				throw new IllegalStateException(""No alias '"" + alias + ""' registered"");"
"SimpleAliasRegistry.java:114"$0$0$0$1$4$"			}"
"SimpleAliasRegistry.java:115"$0$0$0$1$3$"		}"
"SimpleAliasRegistry.java:116"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:117"$0$0$0$0$0$""
"SimpleAliasRegistry.java:118"$0$0$0$1$10$"	@Override"
"SimpleAliasRegistry.java:119"$0$0$0$5$38$"	public boolean isAlias(String name) {"
"SimpleAliasRegistry.java:120"$0$0$0$2$41$"		return this.aliasMap.containsKey(name);"
"SimpleAliasRegistry.java:121"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:122"$0$0$0$0$0$""
"SimpleAliasRegistry.java:123"$0$0$0$1$10$"	@Override"
"SimpleAliasRegistry.java:124"$1$0$0$5$42$"	public String[] getAliases(String name) {"
"SimpleAliasRegistry.java:125"$0$0$0$5$42$"		List<String> result = new ArrayList<>();"
"SimpleAliasRegistry.java:126"$0$0$0$3$32$"		synchronized (this.aliasMap) {"
"SimpleAliasRegistry.java:127"$0$0$0$2$33$"			retrieveAliases(name, result);"
"SimpleAliasRegistry.java:128"$0$0$0$1$3$"		}"
"SimpleAliasRegistry.java:129"$0$0$0$2$43$"		return StringUtils.toStringArray(result);"
"SimpleAliasRegistry.java:130"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:131"$0$0$0$0$0$""
"SimpleAliasRegistry.java:132"$0$0$0$1$4$"	/**"
"SimpleAliasRegistry.java:133"$0$0$0$9$57$"	 * Transitively retrieve all aliases for the given name."
"SimpleAliasRegistry.java:134"$1$0$0$10$51$"	 * @param name the target name to find aliases for"
"SimpleAliasRegistry.java:135"$0$0$0$7$44$"	 * @param result the resulting aliases list"
"SimpleAliasRegistry.java:136"$0$0$0$1$4$"	 */"
"SimpleAliasRegistry.java:137"$0$0$0$7$65$"	private void retrieveAliases(String name, List<String> result) {"
"SimpleAliasRegistry.java:138"$0$0$0$4$52$"		this.aliasMap.forEach((alias, registeredName) -> {"
"SimpleAliasRegistry.java:139"$0$0$0$3$37$"			if (registeredName.equals(name)) {"
"SimpleAliasRegistry.java:140"$0$0$0$1$22$"				result.add(alias);"
"SimpleAliasRegistry.java:141"$0$0$0$2$35$"				retrieveAliases(alias, result);"
"SimpleAliasRegistry.java:142"$0$0$0$1$4$"			}"
"SimpleAliasRegistry.java:143"$0$0$0$1$5$"		});"
"SimpleAliasRegistry.java:144"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:145"$0$0$0$0$0$""
"SimpleAliasRegistry.java:146"$0$0$0$1$4$"	/**"
"SimpleAliasRegistry.java:147"$1$0$0$11$65$"	 * Resolve all alias target names and aliases registered in this"
"SimpleAliasRegistry.java:148"$0$0$0$9$69$"	 * registry, applying the given {@link StringValueResolver} to them."
"SimpleAliasRegistry.java:149"$0$0$0$9$62$"	 * <p>The value resolver may for example resolve placeholders"
"SimpleAliasRegistry.java:150"$1$0$0$10$49$"	 * in target bean names and even in alias names."
"SimpleAliasRegistry.java:151"$0$0$0$7$57$"	 * @param valueResolver the StringValueResolver to apply"
"SimpleAliasRegistry.java:152"$0$0$0$1$4$"	 */"
"SimpleAliasRegistry.java:153"$0$0$0$5$64$"	public void resolveAliases(StringValueResolver valueResolver) {"
"SimpleAliasRegistry.java:154"$0$0$0$6$72$"		Assert.notNull(valueResolver, ""StringValueResolver must not be null"");"
"SimpleAliasRegistry.java:155"$0$0$0$3$32$"		synchronized (this.aliasMap) {"
"SimpleAliasRegistry.java:156"$0$0$0$6$64$"			Map<String, String> aliasCopy = new HashMap<>(this.aliasMap);"
"SimpleAliasRegistry.java:157"$0$0$0$4$49$"			aliasCopy.forEach((alias, registeredName) -> {"
"SimpleAliasRegistry.java:158"$0$0$0$4$67$"				String resolvedAlias = valueResolver.resolveStringValue(alias);"
"SimpleAliasRegistry.java:159"$0$0$0$4$75$"				String resolvedName = valueResolver.resolveStringValue(registeredName);"
"SimpleAliasRegistry.java:160"$0$0$0$11$94$"				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {"
"SimpleAliasRegistry.java:161"$0$0$0$1$33$"					this.aliasMap.remove(alias);"
"SimpleAliasRegistry.java:162"$0$0$0$1$5$"				}"
"SimpleAliasRegistry.java:163"$0$0$0$4$44$"				else if (!resolvedAlias.equals(alias)) {"
"SimpleAliasRegistry.java:164"$1$0$0$4$60$"					String existingName = this.aliasMap.get(resolvedAlias);"
"SimpleAliasRegistry.java:165"$0$0$0$5$32$"					if (existingName != null) {"
"SimpleAliasRegistry.java:166"$0$0$0$3$46$"						if (existingName.equals(resolvedName)) {"
"SimpleAliasRegistry.java:167"$0$0$1$9$62$"							// Pointing to existing alias - just remove placeholder"
"SimpleAliasRegistry.java:168"$0$0$0$1$35$"							this.aliasMap.remove(alias);"
"SimpleAliasRegistry.java:169"$0$0$0$1$14$"							return;"
"SimpleAliasRegistry.java:170"$0$0$0$1$7$"						}"
"SimpleAliasRegistry.java:171"$0$0$0$3$38$"						throw new IllegalStateException("
"SimpleAliasRegistry.java:172"$0$0$0$14$87$"								""Cannot register resolved alias '"" + resolvedAlias + ""' (original: '"" + alias +"
"SimpleAliasRegistry.java:173"$0$0$0$16$83$"								""') for name '"" + resolvedName + ""': It is already registered for name '"" +"
"SimpleAliasRegistry.java:174"$0$0$0$3$31$"								registeredName + ""'."");"
"SimpleAliasRegistry.java:175"$0$0$0$1$6$"					}"
"SimpleAliasRegistry.java:176"$0$0$0$2$54$"					checkForAliasCircle(resolvedName, resolvedAlias);"
"SimpleAliasRegistry.java:177"$0$0$0$1$33$"					this.aliasMap.remove(alias);"
"SimpleAliasRegistry.java:178"$0$0$0$2$52$"					this.aliasMap.put(resolvedAlias, resolvedName);"
"SimpleAliasRegistry.java:179"$0$0$0$1$5$"				}"
"SimpleAliasRegistry.java:180"$0$0$0$4$52$"				else if (!registeredName.equals(resolvedName)) {"
"SimpleAliasRegistry.java:181"$0$0$0$2$44$"					this.aliasMap.put(alias, resolvedName);"
"SimpleAliasRegistry.java:182"$0$0$0$1$5$"				}"
"SimpleAliasRegistry.java:183"$0$0$0$1$6$"			});"
"SimpleAliasRegistry.java:184"$0$0$0$1$3$"		}"
"SimpleAliasRegistry.java:185"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:186"$0$0$0$0$0$""
"SimpleAliasRegistry.java:187"$0$0$0$1$4$"	/**"
"SimpleAliasRegistry.java:188"$0$0$0$15$75$"	 * Check whether the given name points back to the given alias as an alias"
"SimpleAliasRegistry.java:189"$0$0$0$11$73$"	 * in the other direction already, catching a circular reference upfront"
"SimpleAliasRegistry.java:190"$0$0$0$6$55$"	 * and throwing a corresponding IllegalStateException."
"SimpleAliasRegistry.java:191"$0$0$0$6$34$"	 * @param name the candidate name"
"SimpleAliasRegistry.java:192"$0$0$0$6$36$"	 * @param alias the candidate alias"
"SimpleAliasRegistry.java:193"$0$0$0$3$23$"	 * @see #registerAlias"
"SimpleAliasRegistry.java:194"$0$0$0$3$18$"	 * @see #hasAlias"
"SimpleAliasRegistry.java:195"$0$0$0$1$4$"	 */"
"SimpleAliasRegistry.java:196"$0$0$0$7$64$"	protected void checkForAliasCircle(String name, String alias) {"
"SimpleAliasRegistry.java:197"$0$0$0$4$30$"		if (hasAlias(alias, name)) {"
"SimpleAliasRegistry.java:198"$0$0$0$9$70$"			throw new IllegalStateException(""Cannot register alias '"" + alias +"
"SimpleAliasRegistry.java:199"$0$0$0$13$58$"					""' for name '"" + name + ""': Circular reference - '"" +"
"SimpleAliasRegistry.java:200"$0$0$0$16$75$"					name + ""' is a direct or indirect alias for '"" + alias + ""' already"");"
"SimpleAliasRegistry.java:201"$0$0$0$1$3$"		}"
"SimpleAliasRegistry.java:202"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:203"$0$0$0$0$0$""
"SimpleAliasRegistry.java:204"$0$0$0$1$4$"	/**"
"SimpleAliasRegistry.java:205"$0$0$0$10$65$"	 * Determine the raw name, resolving aliases to canonical names."
"SimpleAliasRegistry.java:206"$0$0$0$6$39$"	 * @param name the user-specified name"
"SimpleAliasRegistry.java:207"$0$0$0$5$32$"	 * @return the transformed name"
"SimpleAliasRegistry.java:208"$0$0$0$1$4$"	 */"
"SimpleAliasRegistry.java:209"$0$0$0$5$43$"	public String canonicalName(String name) {"
"SimpleAliasRegistry.java:210"$0$0$0$4$30$"		String canonicalName = name;"
"SimpleAliasRegistry.java:211"$0$0$1$3$23$"		// Handle aliasing..."
"SimpleAliasRegistry.java:212"$0$0$0$2$22$"		String resolvedName;"
"SimpleAliasRegistry.java:213"$0$0$0$2$6$"		do {"
"SimpleAliasRegistry.java:214"$1$0$0$3$51$"			resolvedName = this.aliasMap.get(canonicalName);"
"SimpleAliasRegistry.java:215"$0$0$0$5$30$"			if (resolvedName != null) {"
"SimpleAliasRegistry.java:216"$0$0$0$3$33$"				canonicalName = resolvedName;"
"SimpleAliasRegistry.java:217"$0$0$0$1$4$"			}"
"SimpleAliasRegistry.java:218"$0$0$0$1$3$"		}"
"SimpleAliasRegistry.java:219"$0$0$0$4$31$"		while (resolvedName != null);"
"SimpleAliasRegistry.java:220"$0$0$0$2$23$"		return canonicalName;"
"SimpleAliasRegistry.java:221"$0$0$0$1$2$"	}"
"SimpleAliasRegistry.java:222"$0$0$0$0$0$""
"SimpleAliasRegistry.java:223"$0$0$0$1$1$"}"
"MergedAnnotationCollectors.java:1"$0$0$0$1$2$"/*"
"MergedAnnotationCollectors.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"MergedAnnotationCollectors.java:3"$0$0$0$1$2$" *"
"MergedAnnotationCollectors.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MergedAnnotationCollectors.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MergedAnnotationCollectors.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MergedAnnotationCollectors.java:7"$0$0$0$1$2$" *"
"MergedAnnotationCollectors.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MergedAnnotationCollectors.java:9"$0$0$0$1$2$" *"
"MergedAnnotationCollectors.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MergedAnnotationCollectors.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MergedAnnotationCollectors.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MergedAnnotationCollectors.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MergedAnnotationCollectors.java:14"$0$0$0$5$33$" * limitations under the License."
"MergedAnnotationCollectors.java:15"$0$0$0$1$3$" */"
"MergedAnnotationCollectors.java:16"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"MergedAnnotationCollectors.java:18"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"MergedAnnotationCollectors.java:20"$0$0$0$2$27$"import java.util.ArrayList;"
"MergedAnnotationCollectors.java:21"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"MergedAnnotationCollectors.java:22"$0$0$0$2$22$"import java.util.List;"
"MergedAnnotationCollectors.java:23"$0$0$0$2$21$"import java.util.Set;"
"MergedAnnotationCollectors.java:24"$0$0$0$2$35$"import java.util.function.Function;"
"MergedAnnotationCollectors.java:25"$0$0$0$2$38$"import java.util.function.IntFunction;"
"MergedAnnotationCollectors.java:26"$0$0$0$2$34$"import java.util.stream.Collector;"
"MergedAnnotationCollectors.java:27"$0$0$0$2$50$"import java.util.stream.Collector.Characteristics;"
"MergedAnnotationCollectors.java:28"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:29"$0$0$0$2$66$"import org.springframework.core.annotation.MergedAnnotation.Adapt;"
"MergedAnnotationCollectors.java:30"$0$0$0$2$52$"import org.springframework.util.LinkedMultiValueMap;"
"MergedAnnotationCollectors.java:31"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"MergedAnnotationCollectors.java:32"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:33"$0$0$0$1$3$"/**"
"MergedAnnotationCollectors.java:34"$0$0$0$9$74$" * Collector implementations that provide various reduction operations for"
"MergedAnnotationCollectors.java:35"$0$0$0$4$38$" * {@link MergedAnnotation} instances."
"MergedAnnotationCollectors.java:36"$0$0$0$1$2$" *"
"MergedAnnotationCollectors.java:37"$0$0$0$4$23$" * @author Phillip Webb"
"MergedAnnotationCollectors.java:38"$0$0$0$3$13$" * @since 5.2"
"MergedAnnotationCollectors.java:39"$0$0$0$1$3$" */"
"MergedAnnotationCollectors.java:40"$0$0$0$5$50$"public abstract class MergedAnnotationCollectors {"
"MergedAnnotationCollectors.java:41"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:42"$0$0$0$7$64$"	private static final Characteristics[] NO_CHARACTERISTICS = {};"
"MergedAnnotationCollectors.java:43"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:44"$0$0$0$7$108$"	private static final Characteristics[] IDENTITY_FINISH_CHARACTERISTICS = {Characteristics.IDENTITY_FINISH};"
"MergedAnnotationCollectors.java:45"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:46"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:47"$0$0$0$3$39$"	private MergedAnnotationCollectors() {"
"MergedAnnotationCollectors.java:48"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:49"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:50"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:51"$0$0$0$1$4$"	/**"
"MergedAnnotationCollectors.java:52"$0$0$0$12$75$"	 * Create a new {@link Collector} that accumulates merged annotations to a"
"MergedAnnotationCollectors.java:53"$0$0$0$6$78$"	 * {@link LinkedHashSet} containing {@linkplain MergedAnnotation#synthesize()"
"MergedAnnotationCollectors.java:54"$0$0$0$3$26$"	 * synthesized} versions."
"MergedAnnotationCollectors.java:55"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationCollectors.java:56"$0$0$0$10$66$"	 * @return a {@link Collector} which collects and synthesizes the"
"MergedAnnotationCollectors.java:57"$0$0$0$6$34$"	 * annotations into a {@link Set}"
"MergedAnnotationCollectors.java:58"$0$0$0$1$4$"	 */"
"MergedAnnotationCollectors.java:59"$0$0$0$10$99$"	public static <A extends Annotation> Collector<MergedAnnotation<A>, ?, Set<A>> toAnnotationSet() {"
"MergedAnnotationCollectors.java:60"$0$0$0$6$97$"		return Collector.of(ArrayList<A>::new, (list, annotation) -> list.add(annotation.synthesize()),"
"MergedAnnotationCollectors.java:61"$0$0$0$2$60$"				MergedAnnotationCollectors::addAll, LinkedHashSet::new);"
"MergedAnnotationCollectors.java:62"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:63"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:64"$0$0$0$1$4$"	/**"
"MergedAnnotationCollectors.java:65"$0$0$0$12$76$"	 * Create a new {@link Collector} that accumulates merged annotations to an"
"MergedAnnotationCollectors.java:66"$0$0$0$7$81$"	 * {@link Annotation} array containing {@linkplain MergedAnnotation#synthesize()"
"MergedAnnotationCollectors.java:67"$0$0$0$3$26$"	 * synthesized} versions."
"MergedAnnotationCollectors.java:68"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationCollectors.java:69"$0$0$0$10$66$"	 * @return a {@link Collector} which collects and synthesizes the"
"MergedAnnotationCollectors.java:70"$0$0$0$6$44$"	 * annotations into an {@code Annotation[]}"
"MergedAnnotationCollectors.java:71"$0$0$0$3$40$"	 * @see #toAnnotationArray(IntFunction)"
"MergedAnnotationCollectors.java:72"$0$0$0$1$4$"	 */"
"MergedAnnotationCollectors.java:73"$0$0$0$10$107$"	public static <A extends Annotation> Collector<MergedAnnotation<A>, ?, Annotation[]> toAnnotationArray() {"
"MergedAnnotationCollectors.java:74"$0$0$0$2$46$"		return toAnnotationArray(Annotation[]::new);"
"MergedAnnotationCollectors.java:75"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:76"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:77"$0$0$0$1$4$"	/**"
"MergedAnnotationCollectors.java:78"$0$0$0$12$76$"	 * Create a new {@link Collector} that accumulates merged annotations to an"
"MergedAnnotationCollectors.java:79"$0$0$0$7$81$"	 * {@link Annotation} array containing {@linkplain MergedAnnotation#synthesize()"
"MergedAnnotationCollectors.java:80"$0$0$0$3$26$"	 * synthesized} versions."
"MergedAnnotationCollectors.java:81"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationCollectors.java:82"$0$0$0$7$39$"	 * @param <R> the resulting array type"
"MergedAnnotationCollectors.java:83"$0$0$0$13$73$"	 * @param generator a function which produces a new array of the desired"
"MergedAnnotationCollectors.java:84"$0$0$0$6$32$"	 * type and the provided length"
"MergedAnnotationCollectors.java:85"$0$0$0$10$66$"	 * @return a {@link Collector} which collects and synthesizes the"
"MergedAnnotationCollectors.java:86"$0$0$0$6$40$"	 * annotations into an annotation array"
"MergedAnnotationCollectors.java:87"$0$0$0$3$27$"	 * @see #toAnnotationArray"
"MergedAnnotationCollectors.java:88"$0$0$0$1$4$"	 */"
"MergedAnnotationCollectors.java:89"$0$0$0$12$108$"	public static <R extends Annotation, A extends R> Collector<MergedAnnotation<A>, ?, R[]> toAnnotationArray("
"MergedAnnotationCollectors.java:90"$0$0$0$3$32$"			IntFunction<R[]> generator) {"
"MergedAnnotationCollectors.java:91"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:92"$0$0$0$6$94$"		return Collector.of(ArrayList::new, (list, annotation) -> list.add(annotation.synthesize()),"
"MergedAnnotationCollectors.java:93"$0$0$0$4$92$"				MergedAnnotationCollectors::addAll, list -> list.toArray(generator.apply(list.size())));"
"MergedAnnotationCollectors.java:94"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:95"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:96"$0$0$0$1$4$"	/**"
"MergedAnnotationCollectors.java:97"$0$0$0$12$76$"	 * Create a new {@link Collector} that accumulates merged annotations to an"
"MergedAnnotationCollectors.java:98"$0$0$0$8$82$"	 * {@link MultiValueMap} with items {@linkplain MultiValueMap#add(Object, Object)"
"MergedAnnotationCollectors.java:99"$0$0$0$6$38$"	 * added} from each merged annotation"
"MergedAnnotationCollectors.java:100"$0$0$0$6$54$"	 * {@link MergedAnnotation#asMap(Adapt...) as a map}."
"MergedAnnotationCollectors.java:101"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationCollectors.java:102"$0$0$0$13$86$"	 * @param adaptations the adaptations that should be applied to the annotation values"
"MergedAnnotationCollectors.java:103"$0$0$0$10$66$"	 * @return a {@link Collector} which collects and synthesizes the"
"MergedAnnotationCollectors.java:104"$0$0$0$6$50$"	 * annotations into a {@link LinkedMultiValueMap}"
"MergedAnnotationCollectors.java:105"$0$0$0$4$62$"	 * @see #toMultiValueMap(Function, MergedAnnotation.Adapt...)"
"MergedAnnotationCollectors.java:106"$0$0$0$1$4$"	 */"
"MergedAnnotationCollectors.java:107"$0$0$0$10$119$"	public static <A extends Annotation> Collector<MergedAnnotation<A>, ?, MultiValueMap<String, Object>> toMultiValueMap("
"MergedAnnotationCollectors.java:108"$0$0$0$3$26$"			Adapt... adaptations) {"
"MergedAnnotationCollectors.java:109"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:110"$0$0$0$3$59$"		return toMultiValueMap(Function.identity(), adaptations);"
"MergedAnnotationCollectors.java:111"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:112"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:113"$0$0$0$1$4$"	/**"
"MergedAnnotationCollectors.java:114"$0$0$0$12$76$"	 * Create a new {@link Collector} that accumulates merged annotations to an"
"MergedAnnotationCollectors.java:115"$0$0$0$8$82$"	 * {@link MultiValueMap} with items {@linkplain MultiValueMap#add(Object, Object)"
"MergedAnnotationCollectors.java:116"$0$0$0$6$38$"	 * added} from each merged annotation"
"MergedAnnotationCollectors.java:117"$0$0$0$6$54$"	 * {@link MergedAnnotation#asMap(Adapt...) as a map}."
"MergedAnnotationCollectors.java:118"$0$0$0$6$34$"	 * @param <A> the annotation type"
"MergedAnnotationCollectors.java:119"$0$0$0$13$86$"	 * @param adaptations the adaptations that should be applied to the annotation values"
"MergedAnnotationCollectors.java:120"$0$0$0$11$75$"	 * @param finisher the finisher function for the new {@link MultiValueMap}"
"MergedAnnotationCollectors.java:121"$0$0$0$10$66$"	 * @return a {@link Collector} which collects and synthesizes the"
"MergedAnnotationCollectors.java:122"$0$0$0$6$50$"	 * annotations into a {@link LinkedMultiValueMap}"
"MergedAnnotationCollectors.java:123"$0$0$0$3$52$"	 * @see #toMultiValueMap(MergedAnnotation.Adapt...)"
"MergedAnnotationCollectors.java:124"$0$0$0$1$4$"	 */"
"MergedAnnotationCollectors.java:125"$0$0$0$10$119$"	public static <A extends Annotation> Collector<MergedAnnotation<A>, ?, MultiValueMap<String, Object>> toMultiValueMap("
"MergedAnnotationCollectors.java:126"$0$0$0$5$83$"			Function<MultiValueMap<String, Object>, MultiValueMap<String, Object>> finisher,"
"MergedAnnotationCollectors.java:127"$0$0$0$3$26$"			Adapt... adaptations) {"
"MergedAnnotationCollectors.java:128"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:129"$0$0$0$6$86$"		Characteristics[] characteristics = (isSameInstance(finisher, Function.identity()) ?"
"MergedAnnotationCollectors.java:130"$0$0$0$3$58$"				IDENTITY_FINISH_CHARACTERISTICS : NO_CHARACTERISTICS);"
"MergedAnnotationCollectors.java:131"$0$0$0$2$47$"		return Collector.of(LinkedMultiValueMap::new,"
"MergedAnnotationCollectors.java:132"$0$0$0$4$73$"				(map, annotation) -> annotation.asMap(adaptations).forEach(map::add),"
"MergedAnnotationCollectors.java:133"$0$0$0$3$66$"				MergedAnnotationCollectors::merge, finisher, characteristics);"
"MergedAnnotationCollectors.java:134"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:135"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:136"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:137"$0$0$0$8$75$"	private static boolean isSameInstance(Object instance, Object candidate) {"
"MergedAnnotationCollectors.java:138"$0$0$0$4$31$"		return instance == candidate;"
"MergedAnnotationCollectors.java:139"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:140"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:141"$0$0$0$12$70$"	private static <E, L extends List<E>> L addAll(L list, L additions) {"
"MergedAnnotationCollectors.java:142"$0$0$0$1$25$"		list.addAll(additions);"
"MergedAnnotationCollectors.java:143"$0$0$0$2$14$"		return list;"
"MergedAnnotationCollectors.java:144"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:145"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:146"$0$0$0$9$73$"	private static <K, V> MultiValueMap<K, V> merge(MultiValueMap<K, V> map,"
"MergedAnnotationCollectors.java:147"$0$0$0$4$35$"			MultiValueMap<K, V> additions) {"
"MergedAnnotationCollectors.java:148"$0$0$0$1$24$"		map.addAll(additions);"
"MergedAnnotationCollectors.java:149"$0$0$0$2$13$"		return map;"
"MergedAnnotationCollectors.java:150"$0$0$0$1$2$"	}"
"MergedAnnotationCollectors.java:151"$0$0$0$0$0$""
"MergedAnnotationCollectors.java:152"$0$0$0$1$1$"}"
"AttributeMethods.java:1"$0$0$0$1$2$"/*"
"AttributeMethods.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AttributeMethods.java:3"$0$0$0$1$2$" *"
"AttributeMethods.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AttributeMethods.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AttributeMethods.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AttributeMethods.java:7"$0$0$0$1$2$" *"
"AttributeMethods.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AttributeMethods.java:9"$0$0$0$1$2$" *"
"AttributeMethods.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AttributeMethods.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AttributeMethods.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AttributeMethods.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AttributeMethods.java:14"$0$0$0$5$33$" * limitations under the License."
"AttributeMethods.java:15"$0$0$0$1$3$" */"
"AttributeMethods.java:16"$0$0$0$0$0$""
"AttributeMethods.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AttributeMethods.java:18"$0$0$0$0$0$""
"AttributeMethods.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"AttributeMethods.java:20"$0$0$0$2$32$"import java.lang.reflect.Method;"
"AttributeMethods.java:21"$0$0$0$2$24$"import java.util.Arrays;"
"AttributeMethods.java:22"$0$0$0$2$28$"import java.util.Comparator;"
"AttributeMethods.java:23"$0$0$0$2$21$"import java.util.Map;"
"AttributeMethods.java:24"$0$0$0$0$0$""
"AttributeMethods.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AttributeMethods.java:26"$0$0$0$2$39$"import org.springframework.util.Assert;"
"AttributeMethods.java:27"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"AttributeMethods.java:28"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"AttributeMethods.java:29"$0$0$0$0$0$""
"AttributeMethods.java:30"$0$0$0$1$3$"/**"
"AttributeMethods.java:31"$0$0$0$14$80$" * Provides a quick way to access the attribute methods of an {@link Annotation}"
"AttributeMethods.java:32"$0$0$0$12$68$" * with consistent ordering as well as a few useful utility methods."
"AttributeMethods.java:33"$0$0$0$1$2$" *"
"AttributeMethods.java:34"$0$0$0$4$23$" * @author Phillip Webb"
"AttributeMethods.java:35"$0$0$0$3$13$" * @since 5.2"
"AttributeMethods.java:36"$0$0$0$1$3$" */"
"AttributeMethods.java:37"$0$0$0$4$30$"final class AttributeMethods {"
"AttributeMethods.java:38"$0$0$0$0$0$""
"AttributeMethods.java:39"$0$0$0$9$80$"	static final AttributeMethods NONE = new AttributeMethods(null, new Method[0]);"
"AttributeMethods.java:40"$0$0$0$0$0$""
"AttributeMethods.java:41"$0$0$0$0$0$""
"AttributeMethods.java:42"$0$0$0$9$80$"	private static final Map<Class<? extends Annotation>, AttributeMethods> cache ="
"AttributeMethods.java:43"$0$0$0$2$38$"			new ConcurrentReferenceHashMap<>();"
"AttributeMethods.java:44"$0$0$0$0$0$""
"AttributeMethods.java:45"$0$0$0$10$73$"	private static final Comparator<Method> methodComparator = (m1, m2) -> {"
"AttributeMethods.java:46"$0$0$0$9$33$"		if (m1 != null && m2 != null) {"
"AttributeMethods.java:47"$2$0$0$2$47$"			return m1.getName().compareTo(m2.getName());"
"AttributeMethods.java:48"$0$0$0$1$3$"		}"
"AttributeMethods.java:49"$0$0$0$8$29$"		return m1 != null ? -1 : 1;"
"AttributeMethods.java:50"$0$0$0$1$3$"	};"
"AttributeMethods.java:51"$0$0$0$0$0$""
"AttributeMethods.java:52"$0$0$0$0$0$""
"AttributeMethods.java:53"$0$0$0$1$10$"	@Nullable"
"AttributeMethods.java:54"$0$0$0$6$58$"	private final Class<? extends Annotation> annotationType;"
"AttributeMethods.java:55"$0$0$0$0$0$""
"AttributeMethods.java:56"$0$0$0$4$41$"	private final Method[] attributeMethods;"
"AttributeMethods.java:57"$0$0$0$0$0$""
"AttributeMethods.java:58"$0$0$0$4$57$"	private final boolean[] canThrowTypeNotPresentException;"
"AttributeMethods.java:59"$0$0$0$0$0$""
"AttributeMethods.java:60"$0$0$0$4$45$"	private final boolean hasDefaultValueMethod;"
"AttributeMethods.java:61"$0$0$0$0$0$""
"AttributeMethods.java:62"$0$0$0$4$43$"	private final boolean hasNestedAnnotation;"
"AttributeMethods.java:63"$0$0$0$0$0$""
"AttributeMethods.java:64"$0$0$0$0$0$""
"AttributeMethods.java:65"$0$0$0$9$108$"	private AttributeMethods(@Nullable Class<? extends Annotation> annotationType, Method[] attributeMethods) {"
"AttributeMethods.java:66"$0$0$0$3$39$"		this.annotationType = annotationType;"
"AttributeMethods.java:67"$0$0$0$3$43$"		this.attributeMethods = attributeMethods;"
"AttributeMethods.java:68"$0$0$0$4$78$"		this.canThrowTypeNotPresentException = new boolean[attributeMethods.length];"
"AttributeMethods.java:69"$0$0$0$4$42$"		boolean foundDefaultValueMethod = false;"
"AttributeMethods.java:70"$0$0$0$4$40$"		boolean foundNestedAnnotation = false;"
"AttributeMethods.java:71"$0$0$0$10$53$"		for (int i = 0; i < attributeMethods.length; i++) {"
"AttributeMethods.java:72"$0$0$0$4$44$"			Method method = this.attributeMethods[i];"
"AttributeMethods.java:73"$1$0$0$4$42$"			Class<?> type = method.getReturnType();"
"AttributeMethods.java:74"$1$0$0$5$42$"			if (method.getDefaultValue() != null) {"
"AttributeMethods.java:75"$0$0$0$3$35$"				foundDefaultValueMethod = true;"
"AttributeMethods.java:76"$0$0$0$1$4$"			}"
"AttributeMethods.java:77"$1$0$0$7$91$"			if (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation())) {"
"AttributeMethods.java:78"$0$0$0$3$33$"				foundNestedAnnotation = true;"
"AttributeMethods.java:79"$0$0$0$1$4$"			}"
"AttributeMethods.java:80"$0$0$0$1$42$"			ReflectionUtils.makeAccessible(method);"
"AttributeMethods.java:81"$0$0$0$11$109$"			this.canThrowTypeNotPresentException[i] = (type == Class.class || type == Class[].class || type.isEnum());"
"AttributeMethods.java:82"$0$0$0$1$3$"		}"
"AttributeMethods.java:83"$0$0$0$3$55$"		this.hasDefaultValueMethod = foundDefaultValueMethod;"
"AttributeMethods.java:84"$0$0$0$3$51$"		this.hasNestedAnnotation = foundNestedAnnotation;"
"AttributeMethods.java:85"$0$0$0$1$2$"	}"
"AttributeMethods.java:86"$0$0$0$0$0$""
"AttributeMethods.java:87"$0$0$0$0$0$""
"AttributeMethods.java:88"$0$0$0$1$4$"	/**"
"AttributeMethods.java:89"$0$0$0$11$69$"	 * Determine if this instance only contains a single attribute named"
"AttributeMethods.java:90"$0$0$0$3$18$"	 * {@code value}."
"AttributeMethods.java:91"$0$0$0$11$59$"	 * @return {@code true} if there is only a value attribute"
"AttributeMethods.java:92"$0$0$0$1$4$"	 */"
"AttributeMethods.java:93"$0$0$0$3$34$"	boolean hasOnlyValueAttribute() {"
"AttributeMethods.java:94"$0$0$0$5$46$"		return (this.attributeMethods.length == 1 &&"
"AttributeMethods.java:95"$1$0$0$1$71$"				MergedAnnotation.VALUE.equals(this.attributeMethods[0].getName()));"
"AttributeMethods.java:96"$0$0$0$1$2$"	}"
"AttributeMethods.java:97"$0$0$0$0$0$""
"AttributeMethods.java:98"$0$0$0$0$0$""
"AttributeMethods.java:99"$0$0$0$1$4$"	/**"
"AttributeMethods.java:100"$0$0$0$13$80$"	 * Determine if values from the given annotation can be safely accessed without"
"AttributeMethods.java:101"$0$0$0$6$73$"	 * causing any {@link TypeNotPresentException TypeNotPresentExceptions}."
"AttributeMethods.java:102"$0$0$0$7$45$"	 * @param annotation the annotation to check"
"AttributeMethods.java:103"$0$0$0$9$50$"	 * @return {@code true} if all values are present"
"AttributeMethods.java:104"$0$0$0$3$30$"	 * @see #validate(Annotation)"
"AttributeMethods.java:105"$0$0$0$1$4$"	 */"
"AttributeMethods.java:106"$0$0$0$4$41$"	boolean isValid(Annotation annotation) {"
"AttributeMethods.java:107"$0$0$0$1$31$"		assertAnnotation(annotation);"
"AttributeMethods.java:108"$0$0$0$10$36$"		for (int i = 0; i < size(); i++) {"
"AttributeMethods.java:109"$0$0$0$3$44$"			if (canThrowTypeNotPresentException(i)) {"
"AttributeMethods.java:110"$0$0$0$2$9$"				try {"
"AttributeMethods.java:111"$1$0$0$1$31$"					get(i).invoke(annotation);"
"AttributeMethods.java:112"$0$0$0$1$5$"				}"
"AttributeMethods.java:113"$0$0$0$4$26$"				catch (Throwable ex) {"
"AttributeMethods.java:114"$0$0$0$2$18$"					return false;"
"AttributeMethods.java:115"$0$0$0$1$5$"				}"
"AttributeMethods.java:116"$0$0$0$1$4$"			}"
"AttributeMethods.java:117"$0$0$0$1$3$"		}"
"AttributeMethods.java:118"$0$0$0$2$14$"		return true;"
"AttributeMethods.java:119"$0$0$0$1$2$"	}"
"AttributeMethods.java:120"$0$0$0$0$0$""
"AttributeMethods.java:121"$0$0$0$1$4$"	/**"
"AttributeMethods.java:122"$0$0$0$14$84$"	 * Check if values from the given annotation can be safely accessed without causing"
"AttributeMethods.java:123"$0$0$0$7$80$"	 * any {@link TypeNotPresentException TypeNotPresentExceptions}. In particular,"
"AttributeMethods.java:124"$0$0$0$14$77$"	 * this method is designed to cover Google App Engine's late arrival of such"
"AttributeMethods.java:125"$0$0$0$12$74$"	 * exceptions for {@code Class} values (instead of the more typical early"
"AttributeMethods.java:126"$1$0$0$4$43$"	 * {@code Class.getAnnotations() failure}."
"AttributeMethods.java:127"$0$0$0$7$48$"	 * @param annotation the annotation to validate"
"AttributeMethods.java:128"$0$0$0$13$89$"	 * @throws IllegalStateException if a declared {@code Class} attribute could not be read"
"AttributeMethods.java:129"$0$0$0$3$29$"	 * @see #isValid(Annotation)"
"AttributeMethods.java:130"$0$0$0$1$4$"	 */"
"AttributeMethods.java:131"$0$0$0$4$39$"	void validate(Annotation annotation) {"
"AttributeMethods.java:132"$0$0$0$1$31$"		assertAnnotation(annotation);"
"AttributeMethods.java:133"$0$0$0$10$36$"		for (int i = 0; i < size(); i++) {"
"AttributeMethods.java:134"$0$0$0$3$44$"			if (canThrowTypeNotPresentException(i)) {"
"AttributeMethods.java:135"$0$0$0$2$9$"				try {"
"AttributeMethods.java:136"$1$0$0$1$31$"					get(i).invoke(annotation);"
"AttributeMethods.java:137"$0$0$0$1$5$"				}"
"AttributeMethods.java:138"$0$0$0$4$26$"				catch (Throwable ex) {"
"AttributeMethods.java:139"$0$0$0$11$89$"					throw new IllegalStateException(""Could not obtain annotation attribute value for "" +"
"AttributeMethods.java:140"$2$0$0$9$77$"							get(i).getName() + "" declared on "" + annotation.annotationType(), ex);"
"AttributeMethods.java:141"$0$0$0$1$5$"				}"
"AttributeMethods.java:142"$0$0$0$1$4$"			}"
"AttributeMethods.java:143"$0$0$0$1$3$"		}"
"AttributeMethods.java:144"$0$0$0$1$2$"	}"
"AttributeMethods.java:145"$0$0$0$0$0$""
"AttributeMethods.java:146"$0$0$0$5$55$"	private void assertAnnotation(Annotation annotation) {"
"AttributeMethods.java:147"$0$0$0$6$60$"		Assert.notNull(annotation, ""Annotation must not be null"");"
"AttributeMethods.java:148"$0$0$0$5$36$"		if (this.annotationType != null) {"
"AttributeMethods.java:149"$0$0$0$2$56$"			Assert.isInstanceOf(this.annotationType, annotation);"
"AttributeMethods.java:150"$0$0$0$1$3$"		}"
"AttributeMethods.java:151"$0$0$0$1$2$"	}"
"AttributeMethods.java:152"$0$0$0$0$0$""
"AttributeMethods.java:153"$0$0$0$1$4$"	/**"
"AttributeMethods.java:154"$0$0$0$13$67$"	 * Get the attribute with the specified name or {@code null} if no"
"AttributeMethods.java:155"$0$0$0$4$30$"	 * matching attribute exists."
"AttributeMethods.java:156"$0$0$0$8$42$"	 * @param name the attribute name to find"
"AttributeMethods.java:157"$0$0$0$8$48$"	 * @return the attribute method or {@code null}"
"AttributeMethods.java:158"$0$0$0$1$4$"	 */"
"AttributeMethods.java:159"$0$0$0$1$10$"	@Nullable"
"AttributeMethods.java:160"$1$0$0$4$26$"	Method get(String name) {"
"AttributeMethods.java:161"$0$0$0$4$28$"		int index = indexOf(name);"
"AttributeMethods.java:162"$0$0$0$8$59$"		return index != -1 ? this.attributeMethods[index] : null;"
"AttributeMethods.java:163"$0$0$0$1$2$"	}"
"AttributeMethods.java:164"$0$0$0$0$0$""
"AttributeMethods.java:165"$0$0$0$1$4$"	/**"
"AttributeMethods.java:166"$0$0$0$8$45$"	 * Get the attribute at the specified index."
"AttributeMethods.java:167"$0$0$0$10$53$"	 * @param index the index of the attribute to return"
"AttributeMethods.java:168"$0$0$0$5$32$"	 * @return the attribute method"
"AttributeMethods.java:169"$0$0$0$10$66$"	 * @throws IndexOutOfBoundsException if the index is out of range"
"AttributeMethods.java:170"$0$0$0$8$49$"	 * (<tt>index &lt; 0 || index &gt;= size()</tt>)"
"AttributeMethods.java:171"$0$0$0$1$4$"	 */"
"AttributeMethods.java:172"$1$0$0$4$24$"	Method get(int index) {"
"AttributeMethods.java:173"$0$0$0$2$38$"		return this.attributeMethods[index];"
"AttributeMethods.java:174"$0$0$0$1$2$"	}"
"AttributeMethods.java:175"$0$0$0$0$0$""
"AttributeMethods.java:176"$0$0$0$1$4$"	/**"
"AttributeMethods.java:177"$0$0$0$12$67$"	 * Determine if the attribute at the specified index could throw a"
"AttributeMethods.java:178"$0$0$0$5$50$"	 * {@link TypeNotPresentException} when accessed."
"AttributeMethods.java:179"$0$0$0$10$52$"	 * @param index the index of the attribute to check"
"AttributeMethods.java:180"$0$0$0$10$53$"	 * @return {@code true} if the attribute can throw a"
"AttributeMethods.java:181"$0$0$0$3$35$"	 * {@link TypeNotPresentException}"
"AttributeMethods.java:182"$0$0$0$1$4$"	 */"
"AttributeMethods.java:183"$0$0$0$4$53$"	boolean canThrowTypeNotPresentException(int index) {"
"AttributeMethods.java:184"$0$0$0$2$53$"		return this.canThrowTypeNotPresentException[index];"
"AttributeMethods.java:185"$0$0$0$1$2$"	}"
"AttributeMethods.java:186"$0$0$0$0$0$""
"AttributeMethods.java:187"$0$0$0$1$4$"	/**"
"AttributeMethods.java:188"$0$0$0$14$73$"	 * Get the index of the attribute with the specified name, or {@code -1}"
"AttributeMethods.java:189"$0$0$0$9$43$"	 * if there is no attribute with the name."
"AttributeMethods.java:190"$0$0$0$7$32$"	 * @param name the name to find"
"AttributeMethods.java:191"$0$0$0$10$53$"	 * @return the index of the attribute, or {@code -1}"
"AttributeMethods.java:192"$0$0$0$1$4$"	 */"
"AttributeMethods.java:193"$0$0$0$4$27$"	int indexOf(String name) {"
"AttributeMethods.java:194"$0$0$0$10$58$"		for (int i = 0; i < this.attributeMethods.length; i++) {"
"AttributeMethods.java:195"$1$0$0$3$57$"			if (this.attributeMethods[i].getName().equals(name)) {"
"AttributeMethods.java:196"$0$0$0$2$13$"				return i;"
"AttributeMethods.java:197"$0$0$0$1$4$"			}"
"AttributeMethods.java:198"$0$0$0$1$3$"		}"
"AttributeMethods.java:199"$0$0$0$2$12$"		return -1;"
"AttributeMethods.java:200"$0$0$0$1$2$"	}"
"AttributeMethods.java:201"$0$0$0$0$0$""
"AttributeMethods.java:202"$0$0$0$1$4$"	/**"
"AttributeMethods.java:203"$0$0$0$13$66$"	 * Get the index of the specified attribute, or {@code -1} if the"
"AttributeMethods.java:204"$0$0$0$7$40$"	 * attribute is not in this collection."
"AttributeMethods.java:205"$0$0$0$7$42$"	 * @param attribute the attribute to find"
"AttributeMethods.java:206"$0$0$0$10$53$"	 * @return the index of the attribute, or {@code -1}"
"AttributeMethods.java:207"$0$0$0$1$4$"	 */"
"AttributeMethods.java:208"$0$0$0$4$32$"	int indexOf(Method attribute) {"
"AttributeMethods.java:209"$0$0$0$10$58$"		for (int i = 0; i < this.attributeMethods.length; i++) {"
"AttributeMethods.java:210"$0$0$0$3$52$"			if (this.attributeMethods[i].equals(attribute)) {"
"AttributeMethods.java:211"$0$0$0$2$13$"				return i;"
"AttributeMethods.java:212"$0$0$0$1$4$"			}"
"AttributeMethods.java:213"$0$0$0$1$3$"		}"
"AttributeMethods.java:214"$0$0$0$2$12$"		return -1;"
"AttributeMethods.java:215"$0$0$0$1$2$"	}"
"AttributeMethods.java:216"$0$0$0$0$0$""
"AttributeMethods.java:217"$0$0$0$1$4$"	/**"
"AttributeMethods.java:218"$0$0$0$9$52$"	 * Get the number of attributes in this collection."
"AttributeMethods.java:219"$0$0$0$6$36$"	 * @return the number of attributes"
"AttributeMethods.java:220"$0$0$0$1$4$"	 */"
"AttributeMethods.java:221"$0$0$0$3$13$"	int size() {"
"AttributeMethods.java:222"$0$0$0$2$38$"		return this.attributeMethods.length;"
"AttributeMethods.java:223"$0$0$0$1$2$"	}"
"AttributeMethods.java:224"$0$0$0$0$0$""
"AttributeMethods.java:225"$0$0$0$1$4$"	/**"
"AttributeMethods.java:226"$0$0$0$14$75$"	 * Determine if at least one of the attribute methods has a default value."
"AttributeMethods.java:227"$0$0$0$16$87$"	 * @return {@code true} if there is at least one attribute method with a default value"
"AttributeMethods.java:228"$0$0$0$1$4$"	 */"
"AttributeMethods.java:229"$0$0$0$3$34$"	boolean hasDefaultValueMethod() {"
"AttributeMethods.java:230"$0$0$0$2$36$"		return this.hasDefaultValueMethod;"
"AttributeMethods.java:231"$0$0$0$1$2$"	}"
"AttributeMethods.java:232"$0$0$0$0$0$""
"AttributeMethods.java:233"$0$0$0$1$4$"	/**"
"AttributeMethods.java:234"$0$0$0$14$78$"	 * Determine if at least one of the attribute methods is a nested annotation."
"AttributeMethods.java:235"$0$0$0$15$80$"	 * @return {@code true} if there is at least one attribute method with a nested"
"AttributeMethods.java:236"$0$0$0$3$19$"	 * annotation type"
"AttributeMethods.java:237"$0$0$0$1$4$"	 */"
"AttributeMethods.java:238"$0$0$0$3$32$"	boolean hasNestedAnnotation() {"
"AttributeMethods.java:239"$0$0$0$2$34$"		return this.hasNestedAnnotation;"
"AttributeMethods.java:240"$0$0$0$1$2$"	}"
"AttributeMethods.java:241"$0$0$0$0$0$""
"AttributeMethods.java:242"$0$0$0$0$0$""
"AttributeMethods.java:243"$0$0$0$1$4$"	/**"
"AttributeMethods.java:244"$0$0$0$10$60$"	 * Get the attribute methods for the given annotation type."
"AttributeMethods.java:245"$0$0$0$6$45$"	 * @param annotationType the annotation type"
"AttributeMethods.java:246"$0$0$0$9$57$"	 * @return the attribute methods for the annotation type"
"AttributeMethods.java:247"$0$0$0$1$4$"	 */"
"AttributeMethods.java:248"$0$0$0$8$98$"	static AttributeMethods forAnnotationType(@Nullable Class<? extends Annotation> annotationType) {"
"AttributeMethods.java:249"$0$0$0$5$31$"		if (annotationType == null) {"
"AttributeMethods.java:250"$0$0$0$2$15$"			return NONE;"
"AttributeMethods.java:251"$0$0$0$1$3$"		}"
"AttributeMethods.java:252"$0$0$0$3$74$"		return cache.computeIfAbsent(annotationType, AttributeMethods::compute);"
"AttributeMethods.java:253"$0$0$0$1$2$"	}"
"AttributeMethods.java:254"$0$0$0$0$0$""
"AttributeMethods.java:255"$0$0$0$8$86$"	private static AttributeMethods compute(Class<? extends Annotation> annotationType) {"
"AttributeMethods.java:256"$1$0$0$4$57$"		Method[] methods = annotationType.getDeclaredMethods();"
"AttributeMethods.java:257"$0$0$0$4$28$"		int size = methods.length;"
"AttributeMethods.java:258"$0$0$0$10$44$"		for (int i = 0; i < methods.length; i++) {"
"AttributeMethods.java:259"$0$0$0$3$40$"			if (!isAttributeMethod(methods[i])) {"
"AttributeMethods.java:260"$0$0$0$3$22$"				methods[i] = null;"
"AttributeMethods.java:261"$0$0$0$1$11$"				size--;"
"AttributeMethods.java:262"$0$0$0$1$4$"			}"
"AttributeMethods.java:263"$0$0$0$1$3$"		}"
"AttributeMethods.java:264"$0$0$0$5$18$"		if (size == 0) {"
"AttributeMethods.java:265"$0$0$0$2$15$"			return NONE;"
"AttributeMethods.java:266"$0$0$0$1$3$"		}"
"AttributeMethods.java:267"$0$0$0$2$41$"		Arrays.sort(methods, methodComparator);"
"AttributeMethods.java:268"$0$0$0$5$59$"		Method[] attributeMethods = Arrays.copyOf(methods, size);"
"AttributeMethods.java:269"$0$0$0$4$64$"		return new AttributeMethods(annotationType, attributeMethods);"
"AttributeMethods.java:270"$0$0$0$1$2$"	}"
"AttributeMethods.java:271"$0$0$0$0$0$""
"AttributeMethods.java:272"$0$0$0$6$58$"	private static boolean isAttributeMethod(Method method) {"
"AttributeMethods.java:273"$2$0$0$8$83$"		return (method.getParameterCount() == 0 && method.getReturnType() != void.class);"
"AttributeMethods.java:274"$0$0$0$1$2$"	}"
"AttributeMethods.java:275"$0$0$0$0$0$""
"AttributeMethods.java:276"$0$0$0$1$4$"	/**"
"AttributeMethods.java:277"$0$0$0$13$74$"	 * Create a description for the given attribute method suitable to use in"
"AttributeMethods.java:278"$0$0$0$5$32$"	 * exception messages and logs."
"AttributeMethods.java:279"$0$0$0$7$46$"	 * @param attribute the attribute to describe"
"AttributeMethods.java:280"$0$0$0$7$42$"	 * @return a description of the attribute"
"AttributeMethods.java:281"$0$0$0$1$4$"	 */"
"AttributeMethods.java:282"$0$0$0$6$53$"	static String describe(@Nullable Method attribute) {"
"AttributeMethods.java:283"$0$0$0$5$26$"		if (attribute == null) {"
"AttributeMethods.java:284"$0$0$0$2$19$"			return ""(none)"";"
"AttributeMethods.java:285"$0$0$0$1$3$"		}"
"AttributeMethods.java:286"$2$0$0$3$70$"		return describe(attribute.getDeclaringClass(), attribute.getName());"
"AttributeMethods.java:287"$0$0$0$1$2$"	}"
"AttributeMethods.java:288"$0$0$0$0$0$""
"AttributeMethods.java:289"$0$0$0$1$4$"	/**"
"AttributeMethods.java:290"$0$0$0$13$74$"	 * Create a description for the given attribute method suitable to use in"
"AttributeMethods.java:291"$0$0$0$5$32$"	 * exception messages and logs."
"AttributeMethods.java:292"$0$0$0$6$45$"	 * @param annotationType the annotation type"
"AttributeMethods.java:293"$0$0$0$6$43$"	 * @param attributeName the attribute name"
"AttributeMethods.java:294"$0$0$0$7$42$"	 * @return a description of the attribute"
"AttributeMethods.java:295"$0$0$0$1$4$"	 */"
"AttributeMethods.java:296"$0$0$0$9$92$"	static String describe(@Nullable Class<?> annotationType, @Nullable String attributeName) {"
"AttributeMethods.java:297"$0$0$0$5$30$"		if (attributeName == null) {"
"AttributeMethods.java:298"$0$0$0$2$19$"			return ""(none)"";"
"AttributeMethods.java:299"$0$0$0$1$3$"		}"
"AttributeMethods.java:300"$1$0$0$17$98$"		String in = (annotationType != null ? "" in annotation ["" + annotationType.getName() + ""]"" : """");"
"AttributeMethods.java:301"$0$0$0$9$50$"		return ""attribute '"" + attributeName + ""'"" + in;"
"AttributeMethods.java:302"$0$0$0$1$2$"	}"
"AttributeMethods.java:303"$0$0$0$0$0$""
"AttributeMethods.java:304"$0$0$0$1$1$"}"
"LinkedMultiValueMap.java:1"$0$0$0$1$2$"/*"
"LinkedMultiValueMap.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"LinkedMultiValueMap.java:3"$0$0$0$1$2$" *"
"LinkedMultiValueMap.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"LinkedMultiValueMap.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"LinkedMultiValueMap.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"LinkedMultiValueMap.java:7"$0$0$0$1$2$" *"
"LinkedMultiValueMap.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"LinkedMultiValueMap.java:9"$0$0$0$1$2$" *"
"LinkedMultiValueMap.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"LinkedMultiValueMap.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"LinkedMultiValueMap.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"LinkedMultiValueMap.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"LinkedMultiValueMap.java:14"$0$0$0$5$33$" * limitations under the License."
"LinkedMultiValueMap.java:15"$0$0$0$1$3$" */"
"LinkedMultiValueMap.java:16"$0$0$0$0$0$""
"LinkedMultiValueMap.java:17"$0$0$0$2$33$"package org.springframework.util;"
"LinkedMultiValueMap.java:18"$0$0$0$0$0$""
"LinkedMultiValueMap.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"LinkedMultiValueMap.java:20"$0$0$0$2$28$"import java.util.Collection;"
"LinkedMultiValueMap.java:21"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"LinkedMultiValueMap.java:22"$0$0$0$2$28$"import java.util.LinkedList;"
"LinkedMultiValueMap.java:23"$0$0$0$2$22$"import java.util.List;"
"LinkedMultiValueMap.java:24"$0$0$0$2$21$"import java.util.Map;"
"LinkedMultiValueMap.java:25"$0$0$0$2$21$"import java.util.Set;"
"LinkedMultiValueMap.java:26"$0$0$0$0$0$""
"LinkedMultiValueMap.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"LinkedMultiValueMap.java:28"$0$0$0$0$0$""
"LinkedMultiValueMap.java:29"$0$0$0$1$3$"/**"
"LinkedMultiValueMap.java:30"$0$0$0$11$85$" * Simple implementation of {@link MultiValueMap} that wraps a {@link LinkedHashMap},"
"LinkedMultiValueMap.java:31"$0$0$0$8$51$" * storing multiple values in a {@link LinkedList}."
"LinkedMultiValueMap.java:32"$0$0$0$1$2$" *"
"LinkedMultiValueMap.java:33"$0$0$0$12$84$" * <p>This Map implementation is generally not thread-safe. It is primarily designed"
"LinkedMultiValueMap.java:34"$0$0$0$15$85$" * for data structures exposed from request objects, for use in a single thread only."
"LinkedMultiValueMap.java:35"$0$0$0$1$2$" *"
"LinkedMultiValueMap.java:36"$0$0$0$4$24$" * @author Arjen Poutsma"
"LinkedMultiValueMap.java:37"$0$0$0$4$26$" * @author Juergen Hoeller"
"LinkedMultiValueMap.java:38"$0$0$0$3$13$" * @since 3.0"
"LinkedMultiValueMap.java:39"$0$0$0$6$26$" * @param <K> the key type"
"LinkedMultiValueMap.java:40"$0$0$0$7$36$" * @param <V> the value element type"
"LinkedMultiValueMap.java:41"$0$0$0$1$3$" */"
"LinkedMultiValueMap.java:42"$0$0$0$10$96$"public class LinkedMultiValueMap<K, V> implements MultiValueMap<K, V>, Serializable, Cloneable {"
"LinkedMultiValueMap.java:43"$0$0$0$0$0$""
"LinkedMultiValueMap.java:44"$0$0$0$7$67$"	private static final long serialVersionUID = 3801124242820219131L;"
"LinkedMultiValueMap.java:45"$0$0$0$0$0$""
"LinkedMultiValueMap.java:46"$1$0$0$5$41$"	private final Map<K, List<V>> targetMap;"
"LinkedMultiValueMap.java:47"$0$0$0$0$0$""
"LinkedMultiValueMap.java:48"$0$0$0$0$0$""
"LinkedMultiValueMap.java:49"$0$0$0$1$4$"	/**"
"LinkedMultiValueMap.java:50"$0$0$0$10$72$"	 * Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}."
"LinkedMultiValueMap.java:51"$0$0$0$1$4$"	 */"
"LinkedMultiValueMap.java:52"$0$0$0$3$31$"	public LinkedMultiValueMap() {"
"LinkedMultiValueMap.java:53"$1$0$0$4$41$"		this.targetMap = new LinkedHashMap<>();"
"LinkedMultiValueMap.java:54"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:55"$0$0$0$0$0$""
"LinkedMultiValueMap.java:56"$0$0$0$1$4$"	/**"
"LinkedMultiValueMap.java:57"$0$0$0$10$71$"	 * Create a new LinkedMultiValueMap that wraps a {@link LinkedHashMap}"
"LinkedMultiValueMap.java:58"$0$0$0$6$36$"	 * with the given initial capacity."
"LinkedMultiValueMap.java:59"$0$0$0$6$47$"	 * @param initialCapacity the initial capacity"
"LinkedMultiValueMap.java:60"$0$0$0$1$4$"	 */"
"LinkedMultiValueMap.java:61"$0$0$0$4$50$"	public LinkedMultiValueMap(int initialCapacity) {"
"LinkedMultiValueMap.java:62"$1$0$0$4$56$"		this.targetMap = new LinkedHashMap<>(initialCapacity);"
"LinkedMultiValueMap.java:63"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:64"$0$0$0$0$0$""
"LinkedMultiValueMap.java:65"$0$0$0$1$4$"	/**"
"LinkedMultiValueMap.java:66"$0$0$0$12$80$"	 * Copy constructor: Create a new LinkedMultiValueMap with the same mappings as"
"LinkedMultiValueMap.java:67"$0$0$0$14$79$"	 * the specified Map. Note that this will be a shallow copy; its value-holding"
"LinkedMultiValueMap.java:68"$2$0$0$12$81$"	 * List entries will get reused and therefore cannot get modified independently."
"LinkedMultiValueMap.java:69"$0$0$0$14$71$"	 * @param otherMap the Map whose mappings are to be placed in this Map"
"LinkedMultiValueMap.java:70"$0$0$0$3$17$"	 * @see #clone()"
"LinkedMultiValueMap.java:71"$0$0$0$3$20$"	 * @see #deepCopy()"
"LinkedMultiValueMap.java:72"$0$0$0$1$4$"	 */"
"LinkedMultiValueMap.java:73"$0$0$0$5$55$"	public LinkedMultiValueMap(Map<K, List<V>> otherMap) {"
"LinkedMultiValueMap.java:74"$1$0$0$4$49$"		this.targetMap = new LinkedHashMap<>(otherMap);"
"LinkedMultiValueMap.java:75"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:76"$0$0$0$0$0$""
"LinkedMultiValueMap.java:77"$0$0$0$0$0$""
"LinkedMultiValueMap.java:78"$0$0$1$3$32$"	// MultiValueMap implementation"
"LinkedMultiValueMap.java:79"$0$0$0$0$0$""
"LinkedMultiValueMap.java:80"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:81"$0$0$0$1$10$"	@Nullable"
"LinkedMultiValueMap.java:82"$1$0$0$5$27$"	public V getFirst(K key) {"
"LinkedMultiValueMap.java:83"$2$0$0$4$43$"		List<V> values = this.targetMap.get(key);"
"LinkedMultiValueMap.java:84"$1$0$0$10$70$"		return (values != null && !values.isEmpty() ? values.get(0) : null);"
"LinkedMultiValueMap.java:85"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:86"$0$0$0$0$0$""
"LinkedMultiValueMap.java:87"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:88"$0$0$0$8$44$"	public void add(K key, @Nullable V value) {"
"LinkedMultiValueMap.java:89"$1$0$0$8$80$"		List<V> values = this.targetMap.computeIfAbsent(key, k -> new LinkedList<>());"
"LinkedMultiValueMap.java:90"$0$0$0$1$20$"		values.add(value);"
"LinkedMultiValueMap.java:91"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:92"$0$0$0$0$0$""
"LinkedMultiValueMap.java:93"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:94"$0$0$0$9$54$"	public void addAll(K key, List<? extends V> values) {"
"LinkedMultiValueMap.java:95"$1$0$0$8$87$"		List<V> currentValues = this.targetMap.computeIfAbsent(key, k -> new LinkedList<>());"
"LinkedMultiValueMap.java:96"$0$0$0$1$31$"		currentValues.addAll(values);"
"LinkedMultiValueMap.java:97"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:98"$0$0$0$0$0$""
"LinkedMultiValueMap.java:99"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:100"$0$0$0$6$49$"	public void addAll(MultiValueMap<K, V> values) {"
"LinkedMultiValueMap.java:101"$0$0$0$7$53$"		for (Entry<K, List<V>> entry : values.entrySet()) {"
"LinkedMultiValueMap.java:102"$2$0$0$2$44$"			addAll(entry.getKey(), entry.getValue());"
"LinkedMultiValueMap.java:103"$0$0$0$1$3$"		}"
"LinkedMultiValueMap.java:104"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:105"$0$0$0$0$0$""
"LinkedMultiValueMap.java:106"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:107"$0$0$0$8$44$"	public void set(K key, @Nullable V value) {"
"LinkedMultiValueMap.java:108"$0$0$0$5$38$"		List<V> values = new LinkedList<>();"
"LinkedMultiValueMap.java:109"$0$0$0$1$20$"		values.add(value);"
"LinkedMultiValueMap.java:110"$1$0$0$2$34$"		this.targetMap.put(key, values);"
"LinkedMultiValueMap.java:111"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:112"$0$0$0$0$0$""
"LinkedMultiValueMap.java:113"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:114"$0$0$0$6$39$"	public void setAll(Map<K, V> values) {"
"LinkedMultiValueMap.java:115"$0$0$0$1$28$"		values.forEach(this::set);"
"LinkedMultiValueMap.java:116"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:117"$0$0$0$0$0$""
"LinkedMultiValueMap.java:118"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:119"$0$0$0$5$38$"	public Map<K, V> toSingleValueMap() {"
"LinkedMultiValueMap.java:120"$1$0$0$6$82$"		LinkedHashMap<K, V> singleValueMap = new LinkedHashMap<>(this.targetMap.size());"
"LinkedMultiValueMap.java:121"$1$0$0$4$43$"		this.targetMap.forEach((key, values) -> {"
"LinkedMultiValueMap.java:122"$0$0$0$7$45$"			if (values != null && !values.isEmpty()) {"
"LinkedMultiValueMap.java:123"$1$0$0$2$43$"				singleValueMap.put(key, values.get(0));"
"LinkedMultiValueMap.java:124"$0$0$0$1$4$"			}"
"LinkedMultiValueMap.java:125"$0$0$0$1$5$"		});"
"LinkedMultiValueMap.java:126"$0$0$0$2$24$"		return singleValueMap;"
"LinkedMultiValueMap.java:127"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:128"$0$0$0$0$0$""
"LinkedMultiValueMap.java:129"$0$0$0$0$0$""
"LinkedMultiValueMap.java:130"$0$0$1$3$22$"	// Map implementation"
"LinkedMultiValueMap.java:131"$0$0$0$0$0$""
"LinkedMultiValueMap.java:132"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:133"$0$0$0$4$20$"	public int size() {"
"LinkedMultiValueMap.java:134"$1$0$0$2$31$"		return this.targetMap.size();"
"LinkedMultiValueMap.java:135"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:136"$0$0$0$0$0$""
"LinkedMultiValueMap.java:137"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:138"$0$0$0$4$27$"	public boolean isEmpty() {"
"LinkedMultiValueMap.java:139"$1$0$0$2$34$"		return this.targetMap.isEmpty();"
"LinkedMultiValueMap.java:140"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:141"$0$0$0$0$0$""
"LinkedMultiValueMap.java:142"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:143"$0$0$0$5$41$"	public boolean containsKey(Object key) {"
"LinkedMultiValueMap.java:144"$1$0$0$2$41$"		return this.targetMap.containsKey(key);"
"LinkedMultiValueMap.java:145"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:146"$0$0$0$0$0$""
"LinkedMultiValueMap.java:147"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:148"$0$0$0$5$45$"	public boolean containsValue(Object value) {"
"LinkedMultiValueMap.java:149"$1$0$0$2$45$"		return this.targetMap.containsValue(value);"
"LinkedMultiValueMap.java:150"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:151"$0$0$0$0$0$""
"LinkedMultiValueMap.java:152"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:153"$0$0$0$1$10$"	@Nullable"
"LinkedMultiValueMap.java:154"$1$0$0$5$33$"	public List<V> get(Object key) {"
"LinkedMultiValueMap.java:155"$2$0$0$2$33$"		return this.targetMap.get(key);"
"LinkedMultiValueMap.java:156"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:157"$0$0$0$0$0$""
"LinkedMultiValueMap.java:158"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:159"$0$0$0$1$10$"	@Nullable"
"LinkedMultiValueMap.java:160"$0$0$0$7$43$"	public List<V> put(K key, List<V> value) {"
"LinkedMultiValueMap.java:161"$1$0$0$3$40$"		return this.targetMap.put(key, value);"
"LinkedMultiValueMap.java:162"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:163"$0$0$0$0$0$""
"LinkedMultiValueMap.java:164"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:165"$0$0$0$1$10$"	@Nullable"
"LinkedMultiValueMap.java:166"$0$0$0$5$36$"	public List<V> remove(Object key) {"
"LinkedMultiValueMap.java:167"$1$0$0$2$36$"		return this.targetMap.remove(key);"
"LinkedMultiValueMap.java:168"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:169"$0$0$0$0$0$""
"LinkedMultiValueMap.java:170"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:171"$0$0$0$10$62$"	public void putAll(Map<? extends K, ? extends List<V>> map) {"
"LinkedMultiValueMap.java:172"$1$0$0$1$29$"		this.targetMap.putAll(map);"
"LinkedMultiValueMap.java:173"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:174"$0$0$0$0$0$""
"LinkedMultiValueMap.java:175"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:176"$0$0$0$4$22$"	public void clear() {"
"LinkedMultiValueMap.java:177"$1$0$0$1$25$"		this.targetMap.clear();"
"LinkedMultiValueMap.java:178"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:179"$0$0$0$0$0$""
"LinkedMultiValueMap.java:180"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:181"$0$0$0$4$25$"	public Set<K> keySet() {"
"LinkedMultiValueMap.java:182"$1$0$0$2$33$"		return this.targetMap.keySet();"
"LinkedMultiValueMap.java:183"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:184"$0$0$0$0$0$""
"LinkedMultiValueMap.java:185"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:186"$0$0$0$4$38$"	public Collection<List<V>> values() {"
"LinkedMultiValueMap.java:187"$1$0$0$2$33$"		return this.targetMap.values();"
"LinkedMultiValueMap.java:188"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:189"$0$0$0$0$0$""
"LinkedMultiValueMap.java:190"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:191"$0$0$0$5$43$"	public Set<Entry<K, List<V>>> entrySet() {"
"LinkedMultiValueMap.java:192"$1$0$0$2$35$"		return this.targetMap.entrySet();"
"LinkedMultiValueMap.java:193"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:194"$0$0$0$0$0$""
"LinkedMultiValueMap.java:195"$0$0$0$0$0$""
"LinkedMultiValueMap.java:196"$0$0$0$1$4$"	/**"
"LinkedMultiValueMap.java:197"$0$0$0$8$35$"	 * Create a deep copy of this Map."
"LinkedMultiValueMap.java:198"$0$0$0$15$81$"	 * @return a copy of this Map, including a copy of each value-holding List entry"
"LinkedMultiValueMap.java:199"$0$0$0$11$84$"	 * (consistently using an independent modifiable {@link LinkedList} for each entry)"
"LinkedMultiValueMap.java:200"$0$0$0$8$61$"	 * along the lines of {@code MultiValueMap.addAll} semantics"
"LinkedMultiValueMap.java:201"$0$0$0$3$14$"	 * @since 4.2"
"LinkedMultiValueMap.java:202"$0$0$0$3$31$"	 * @see #addAll(MultiValueMap)"
"LinkedMultiValueMap.java:203"$0$0$0$3$17$"	 * @see #clone()"
"LinkedMultiValueMap.java:204"$0$0$0$1$4$"	 */"
"LinkedMultiValueMap.java:205"$0$0$0$5$46$"	public LinkedMultiValueMap<K, V> deepCopy() {"
"LinkedMultiValueMap.java:206"$1$0$0$6$84$"		LinkedMultiValueMap<K, V> copy = new LinkedMultiValueMap<>(this.targetMap.size());"
"LinkedMultiValueMap.java:207"$1$0$0$6$81$"		this.targetMap.forEach((key, value) -> copy.put(key, new LinkedList<>(value)));"
"LinkedMultiValueMap.java:208"$0$0$0$2$14$"		return copy;"
"LinkedMultiValueMap.java:209"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:210"$0$0$0$0$0$""
"LinkedMultiValueMap.java:211"$0$0$0$1$4$"	/**"
"LinkedMultiValueMap.java:212"$0$0$0$8$38$"	 * Create a regular copy of this Map."
"LinkedMultiValueMap.java:213"$0$0$0$14$85$"	 * @return a shallow copy of this Map, reusing this Map's value-holding List entries"
"LinkedMultiValueMap.java:214"$0$0$0$14$81$"	 * (even if some entries are shared or unmodifiable) along the lines of standard"
"LinkedMultiValueMap.java:215"$0$0$0$4$29$"	 * {@code Map.put} semantics"
"LinkedMultiValueMap.java:216"$0$0$0$3$14$"	 * @since 4.2"
"LinkedMultiValueMap.java:217"$0$0$0$4$27$"	 * @see #put(Object, List)"
"LinkedMultiValueMap.java:218"$0$0$0$3$21$"	 * @see #putAll(Map)"
"LinkedMultiValueMap.java:219"$0$0$0$3$53$"	 * @see LinkedMultiValueMap#LinkedMultiValueMap(Map)"
"LinkedMultiValueMap.java:220"$0$0$0$3$20$"	 * @see #deepCopy()"
"LinkedMultiValueMap.java:221"$0$0$0$1$4$"	 */"
"LinkedMultiValueMap.java:222"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:223"$0$0$0$5$43$"	public LinkedMultiValueMap<K, V> clone() {"
"LinkedMultiValueMap.java:224"$0$0$0$3$41$"		return new LinkedMultiValueMap<>(this);"
"LinkedMultiValueMap.java:225"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:226"$0$0$0$0$0$""
"LinkedMultiValueMap.java:227"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:228"$0$0$0$6$46$"	public boolean equals(@Nullable Object obj) {"
"LinkedMultiValueMap.java:229"$1$0$0$2$36$"		return this.targetMap.equals(obj);"
"LinkedMultiValueMap.java:230"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:231"$0$0$0$0$0$""
"LinkedMultiValueMap.java:232"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:233"$0$0$0$4$24$"	public int hashCode() {"
"LinkedMultiValueMap.java:234"$1$0$0$2$35$"		return this.targetMap.hashCode();"
"LinkedMultiValueMap.java:235"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:236"$0$0$0$0$0$""
"LinkedMultiValueMap.java:237"$0$0$0$1$10$"	@Override"
"LinkedMultiValueMap.java:238"$0$0$0$4$27$"	public String toString() {"
"LinkedMultiValueMap.java:239"$1$0$0$2$35$"		return this.targetMap.toString();"
"LinkedMultiValueMap.java:240"$0$0$0$1$2$"	}"
"LinkedMultiValueMap.java:241"$0$0$0$0$0$""
"LinkedMultiValueMap.java:242"$0$0$0$1$1$"}"
"ResourceRegion.java:1"$0$0$0$1$2$"/*"
"ResourceRegion.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ResourceRegion.java:3"$0$0$0$1$2$" *"
"ResourceRegion.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourceRegion.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourceRegion.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourceRegion.java:7"$0$0$0$1$2$" *"
"ResourceRegion.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourceRegion.java:9"$0$0$0$1$2$" *"
"ResourceRegion.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourceRegion.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourceRegion.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourceRegion.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourceRegion.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourceRegion.java:15"$0$0$0$1$3$" */"
"ResourceRegion.java:16"$0$0$0$0$0$""
"ResourceRegion.java:17"$0$0$0$2$44$"package org.springframework.core.io.support;"
"ResourceRegion.java:18"$0$0$0$0$0$""
"ResourceRegion.java:19"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"ResourceRegion.java:20"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ResourceRegion.java:21"$0$0$0$0$0$""
"ResourceRegion.java:22"$0$0$0$1$3$"/**"
"ResourceRegion.java:23"$0$0$0$12$82$" * Region of a {@link Resource} implementation, materialized by a {@code position}"
"ResourceRegion.java:24"$0$0$0$16$86$" * within the {@link Resource} and a byte {@code count} for the length of that region."
"ResourceRegion.java:25"$0$0$0$1$2$" *"
"ResourceRegion.java:26"$0$0$0$4$24$" * @author Arjen Poutsma"
"ResourceRegion.java:27"$0$0$0$3$13$" * @since 4.3"
"ResourceRegion.java:28"$0$0$0$1$3$" */"
"ResourceRegion.java:29"$0$0$0$4$29$"public class ResourceRegion {"
"ResourceRegion.java:30"$0$0$0$0$0$""
"ResourceRegion.java:31"$0$0$0$4$33$"	private final Resource resource;"
"ResourceRegion.java:32"$0$0$0$0$0$""
"ResourceRegion.java:33"$0$0$0$4$29$"	private final long position;"
"ResourceRegion.java:34"$0$0$0$0$0$""
"ResourceRegion.java:35"$0$0$0$4$26$"	private final long count;"
"ResourceRegion.java:36"$0$0$0$0$0$""
"ResourceRegion.java:37"$0$0$0$0$0$""
"ResourceRegion.java:38"$0$0$0$1$4$"	/**"
"ResourceRegion.java:39"$0$0$0$11$70$"	 * Create a new {@code ResourceRegion} from a given {@link Resource}."
"ResourceRegion.java:40"$0$0$0$13$72$"	 * This region of a resource is represented by a start {@code position}"
"ResourceRegion.java:41"$0$0$0$11$63$"	 * and a byte {@code count} within the given {@code Resource}."
"ResourceRegion.java:42"$0$0$0$5$30$"	 * @param resource a Resource"
"ResourceRegion.java:43"$0$0$0$12$69$"	 * @param position the start position of the region in that resource"
"ResourceRegion.java:44"$0$0$0$12$62$"	 * @param count the byte count of the region in that resource"
"ResourceRegion.java:45"$0$0$0$1$4$"	 */"
"ResourceRegion.java:46"$0$0$0$8$70$"	public ResourceRegion(Resource resource, long position, long count) {"
"ResourceRegion.java:47"$0$0$0$6$56$"		Assert.notNull(resource, ""Resource must not be null"");"
"ResourceRegion.java:48"$0$0$0$12$79$"		Assert.isTrue(position >= 0, ""'position' must be larger than or equal to 0"");"
"ResourceRegion.java:49"$0$0$0$12$73$"		Assert.isTrue(count >= 0, ""'count' must be larger than or equal to 0"");"
"ResourceRegion.java:50"$0$0$0$3$27$"		this.resource = resource;"
"ResourceRegion.java:51"$0$0$0$3$27$"		this.position = position;"
"ResourceRegion.java:52"$0$0$0$3$21$"		this.count = count;"
"ResourceRegion.java:53"$0$0$0$1$2$"	}"
"ResourceRegion.java:54"$0$0$0$0$0$""
"ResourceRegion.java:55"$0$0$0$0$0$""
"ResourceRegion.java:56"$0$0$0$1$4$"	/**"
"ResourceRegion.java:57"$0$0$0$10$75$"	 * Return the underlying {@link Resource} for this {@code ResourceRegion}."
"ResourceRegion.java:58"$0$0$0$1$4$"	 */"
"ResourceRegion.java:59"$1$0$0$4$32$"	public Resource getResource() {"
"ResourceRegion.java:60"$0$0$0$2$23$"		return this.resource;"
"ResourceRegion.java:61"$0$0$0$1$2$"	}"
"ResourceRegion.java:62"$0$0$0$0$0$""
"ResourceRegion.java:63"$0$0$0$1$4$"	/**"
"ResourceRegion.java:64"$0$0$0$13$80$"	 * Return the start position of this region in the underlying {@link Resource}."
"ResourceRegion.java:65"$0$0$0$1$4$"	 */"
"ResourceRegion.java:66"$1$0$0$4$28$"	public long getPosition() {"
"ResourceRegion.java:67"$0$0$0$2$23$"		return this.position;"
"ResourceRegion.java:68"$0$0$0$1$2$"	}"
"ResourceRegion.java:69"$0$0$0$0$0$""
"ResourceRegion.java:70"$0$0$0$1$4$"	/**"
"ResourceRegion.java:71"$0$0$0$13$76$"	 * Return the byte count of this region in the underlying {@link Resource}."
"ResourceRegion.java:72"$0$0$0$1$4$"	 */"
"ResourceRegion.java:73"$1$0$0$4$25$"	public long getCount() {"
"ResourceRegion.java:74"$0$0$0$2$20$"		return this.count;"
"ResourceRegion.java:75"$0$0$0$1$2$"	}"
"ResourceRegion.java:76"$0$0$0$0$0$""
"ResourceRegion.java:77"$0$0$0$1$1$"}"
"StandardAnnotationMetadata.java:1"$0$0$0$1$2$"/*"
"StandardAnnotationMetadata.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"StandardAnnotationMetadata.java:3"$0$0$0$1$2$" *"
"StandardAnnotationMetadata.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StandardAnnotationMetadata.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StandardAnnotationMetadata.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StandardAnnotationMetadata.java:7"$0$0$0$1$2$" *"
"StandardAnnotationMetadata.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StandardAnnotationMetadata.java:9"$0$0$0$1$2$" *"
"StandardAnnotationMetadata.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StandardAnnotationMetadata.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StandardAnnotationMetadata.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StandardAnnotationMetadata.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StandardAnnotationMetadata.java:14"$0$0$0$5$33$" * limitations under the License."
"StandardAnnotationMetadata.java:15"$0$0$0$1$3$" */"
"StandardAnnotationMetadata.java:16"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:17"$0$0$0$2$38$"package org.springframework.core.type;"
"StandardAnnotationMetadata.java:18"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"StandardAnnotationMetadata.java:20"$0$0$0$2$32$"import java.lang.reflect.Method;"
"StandardAnnotationMetadata.java:21"$0$0$0$2$29$"import java.util.Collections;"
"StandardAnnotationMetadata.java:22"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"StandardAnnotationMetadata.java:23"$0$0$0$2$21$"import java.util.Map;"
"StandardAnnotationMetadata.java:24"$0$0$0$2$21$"import java.util.Set;"
"StandardAnnotationMetadata.java:25"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:26"$0$0$0$2$65$"import org.springframework.core.annotation.AnnotatedElementUtils;"
"StandardAnnotationMetadata.java:27"$0$0$0$2$60$"import org.springframework.core.annotation.AnnotationFilter;"
"StandardAnnotationMetadata.java:28"$0$0$0$2$59$"import org.springframework.core.annotation.AnnotationUtils;"
"StandardAnnotationMetadata.java:29"$0$0$0$2$60$"import org.springframework.core.annotation.MergedAnnotation;"
"StandardAnnotationMetadata.java:30"$0$0$0$2$61$"import org.springframework.core.annotation.MergedAnnotations;"
"StandardAnnotationMetadata.java:31"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"StandardAnnotationMetadata.java:32"$0$0$0$2$64$"import org.springframework.core.annotation.RepeatableContainers;"
"StandardAnnotationMetadata.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StandardAnnotationMetadata.java:34"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"StandardAnnotationMetadata.java:35"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"StandardAnnotationMetadata.java:36"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:37"$0$0$0$1$3$"/**"
"StandardAnnotationMetadata.java:38"$0$0$0$8$74$" * {@link AnnotationMetadata} implementation that uses standard reflection"
"StandardAnnotationMetadata.java:39"$0$0$0$7$39$" * to introspect a given {@link Class}."
"StandardAnnotationMetadata.java:40"$0$0$0$1$2$" *"
"StandardAnnotationMetadata.java:41"$0$0$0$4$26$" * @author Juergen Hoeller"
"StandardAnnotationMetadata.java:42"$0$0$0$4$22$" * @author Mark Fisher"
"StandardAnnotationMetadata.java:43"$0$0$0$4$22$" * @author Chris Beams"
"StandardAnnotationMetadata.java:44"$0$0$0$4$23$" * @author Phillip Webb"
"StandardAnnotationMetadata.java:45"$0$0$0$4$22$" * @author Sam Brannen"
"StandardAnnotationMetadata.java:46"$0$0$0$3$13$" * @since 2.5"
"StandardAnnotationMetadata.java:47"$0$0$0$1$3$" */"
"StandardAnnotationMetadata.java:48"$0$0$0$8$101$"public class StandardAnnotationMetadata extends StandardClassMetadata implements AnnotationMetadata {"
"StandardAnnotationMetadata.java:49"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:50"$0$0$0$4$51$"	private final MergedAnnotations mergedAnnotations;"
"StandardAnnotationMetadata.java:51"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:52"$0$0$0$4$46$"	private final boolean nestedAnnotationsAsMap;"
"StandardAnnotationMetadata.java:53"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:54"$0$0$0$1$10$"	@Nullable"
"StandardAnnotationMetadata.java:55"$0$0$0$3$37$"	private Set<String> annotationTypes;"
"StandardAnnotationMetadata.java:56"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:57"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:58"$0$0$0$1$4$"	/**"
"StandardAnnotationMetadata.java:59"$0$0$0$11$80$"	 * Create a new {@code StandardAnnotationMetadata} wrapper for the given Class."
"StandardAnnotationMetadata.java:60"$0$0$0$7$52$"	 * @param introspectedClass the Class to introspect"
"StandardAnnotationMetadata.java:61"$0$0$0$4$52$"	 * @see #StandardAnnotationMetadata(Class, boolean)"
"StandardAnnotationMetadata.java:62"$0$0$0$12$101$"	 * @deprecated since 5.2 in favor of the factory method {@link AnnotationMetadata#introspect(Class)}"
"StandardAnnotationMetadata.java:63"$0$0$0$1$4$"	 */"
"StandardAnnotationMetadata.java:64"$0$0$0$1$12$"	@Deprecated"
"StandardAnnotationMetadata.java:65"$0$0$0$4$64$"	public StandardAnnotationMetadata(Class<?> introspectedClass) {"
"StandardAnnotationMetadata.java:66"$0$0$0$2$33$"		this(introspectedClass, false);"
"StandardAnnotationMetadata.java:67"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:68"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:69"$0$0$0$1$4$"	/**"
"StandardAnnotationMetadata.java:70"$0$0$0$11$80$"	 * Create a new {@link StandardAnnotationMetadata} wrapper for the given Class,"
"StandardAnnotationMetadata.java:71"$0$0$0$14$85$"	 * providing the option to return any nested annotations or annotation arrays in the"
"StandardAnnotationMetadata.java:72"$0$0$0$6$84$"	 * form of {@link org.springframework.core.annotation.AnnotationAttributes} instead"
"StandardAnnotationMetadata.java:73"$0$0$0$6$43$"	 * of actual {@link Annotation} instances."
"StandardAnnotationMetadata.java:74"$0$0$0$7$52$"	 * @param introspectedClass the Class to introspect"
"StandardAnnotationMetadata.java:75"$0$0$0$10$84$"	 * @param nestedAnnotationsAsMap return nested annotations and annotation arrays as"
"StandardAnnotationMetadata.java:76"$0$0$0$5$86$"	 * {@link org.springframework.core.annotation.AnnotationAttributes} for compatibility"
"StandardAnnotationMetadata.java:77"$0$0$0$6$61$"	 * with ASM-based {@link AnnotationMetadata} implementations"
"StandardAnnotationMetadata.java:78"$0$0$0$3$16$"	 * @since 3.1.1"
"StandardAnnotationMetadata.java:79"$0$0$0$12$102$"	 * @deprecated since 5.2 in favor of the factory method {@link AnnotationMetadata#introspect(Class)}."
"StandardAnnotationMetadata.java:80"$0$0$0$5$124$"	 * Use {@link MergedAnnotation#asMap(org.springframework.core.annotation.MergedAnnotation.Adapt...) MergedAnnotation.asMap}"
"StandardAnnotationMetadata.java:81"$2$0$0$8$87$"	 * from {@link #getAnnotations()} rather than {@link #getAnnotationAttributes(String)}"
"StandardAnnotationMetadata.java:82"$0$0$0$7$54$"	 * if {@code nestedAnnotationsAsMap} is {@code false}"
"StandardAnnotationMetadata.java:83"$0$0$0$1$4$"	 */"
"StandardAnnotationMetadata.java:84"$0$0$0$1$12$"	@Deprecated"
"StandardAnnotationMetadata.java:85"$0$0$0$6$96$"	public StandardAnnotationMetadata(Class<?> introspectedClass, boolean nestedAnnotationsAsMap) {"
"StandardAnnotationMetadata.java:86"$0$0$0$1$27$"		super(introspectedClass);"
"StandardAnnotationMetadata.java:87"$0$0$0$3$68$"		this.mergedAnnotations = MergedAnnotations.from(introspectedClass,"
"StandardAnnotationMetadata.java:88"$0$0$0$2$70$"				SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none(),"
"StandardAnnotationMetadata.java:89"$0$0$0$1$27$"				AnnotationFilter.NONE);"
"StandardAnnotationMetadata.java:90"$0$0$0$3$55$"		this.nestedAnnotationsAsMap = nestedAnnotationsAsMap;"
"StandardAnnotationMetadata.java:91"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:92"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:93"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:94"$0$0$0$1$10$"	@Override"
"StandardAnnotationMetadata.java:95"$1$0$0$4$44$"	public MergedAnnotations getAnnotations() {"
"StandardAnnotationMetadata.java:96"$0$0$0$2$32$"		return this.mergedAnnotations;"
"StandardAnnotationMetadata.java:97"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:98"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:99"$0$0$0$1$10$"	@Override"
"StandardAnnotationMetadata.java:100"$1$0$0$4$42$"	public Set<String> getAnnotationTypes() {"
"StandardAnnotationMetadata.java:101"$0$0$0$4$53$"		Set<String> annotationTypes = this.annotationTypes;"
"StandardAnnotationMetadata.java:102"$0$0$0$5$32$"		if (annotationTypes == null) {"
"StandardAnnotationMetadata.java:103"$1$0$0$3$96$"			annotationTypes = Collections.unmodifiableSet(AnnotationMetadata.super.getAnnotationTypes());"
"StandardAnnotationMetadata.java:104"$0$0$0$3$42$"			this.annotationTypes = annotationTypes;"
"StandardAnnotationMetadata.java:105"$0$0$0$1$3$"		}"
"StandardAnnotationMetadata.java:106"$0$0$0$2$25$"		return annotationTypes;"
"StandardAnnotationMetadata.java:107"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:108"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:109"$0$0$0$1$10$"	@Override"
"StandardAnnotationMetadata.java:110"$0$0$0$1$10$"	@Nullable"
"StandardAnnotationMetadata.java:111"$1$0$0$8$105$"	public Map<String, Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"StandardAnnotationMetadata.java:112"$0$0$0$3$36$"		if (this.nestedAnnotationsAsMap) {"
"StandardAnnotationMetadata.java:113"$1$0$0$3$96$"			return AnnotationMetadata.super.getAnnotationAttributes(annotationName, classValuesAsString);"
"StandardAnnotationMetadata.java:114"$0$0$0$1$3$"		}"
"StandardAnnotationMetadata.java:115"$1$0$0$2$61$"		return AnnotatedElementUtils.getMergedAnnotationAttributes("
"StandardAnnotationMetadata.java:116"$1$0$0$4$72$"				getIntrospectedClass(), annotationName, classValuesAsString, false);"
"StandardAnnotationMetadata.java:117"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:118"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:119"$0$0$0$1$10$"	@Override"
"StandardAnnotationMetadata.java:120"$0$0$0$1$10$"	@Nullable"
"StandardAnnotationMetadata.java:121"$1$0$0$8$118$"	public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"StandardAnnotationMetadata.java:122"$0$0$0$3$36$"		if (this.nestedAnnotationsAsMap) {"
"StandardAnnotationMetadata.java:123"$1$0$0$3$99$"			return AnnotationMetadata.super.getAllAnnotationAttributes(annotationName, classValuesAsString);"
"StandardAnnotationMetadata.java:124"$0$0$0$1$3$"		}"
"StandardAnnotationMetadata.java:125"$1$0$0$2$58$"		return AnnotatedElementUtils.getAllAnnotationAttributes("
"StandardAnnotationMetadata.java:126"$1$0$0$4$72$"				getIntrospectedClass(), annotationName, classValuesAsString, false);"
"StandardAnnotationMetadata.java:127"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:128"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:129"$0$0$0$1$10$"	@Override"
"StandardAnnotationMetadata.java:130"$0$0$0$5$60$"	public boolean hasAnnotatedMethods(String annotationName) {"
"StandardAnnotationMetadata.java:131"$1$0$0$4$81$"		if (AnnotationUtils.isCandidateClass(getIntrospectedClass(), annotationName)) {"
"StandardAnnotationMetadata.java:132"$0$0$0$2$8$"			try {"
"StandardAnnotationMetadata.java:133"$2$0$0$4$82$"				Method[] methods = ReflectionUtils.getDeclaredMethods(getIntrospectedClass());"
"StandardAnnotationMetadata.java:134"$0$0$0$6$35$"				for (Method method : methods) {"
"StandardAnnotationMetadata.java:135"$0$0$0$4$53$"					if (isAnnotatedMethod(method, annotationName)) {"
"StandardAnnotationMetadata.java:136"$0$0$0$2$18$"						return true;"
"StandardAnnotationMetadata.java:137"$0$0$0$1$6$"					}"
"StandardAnnotationMetadata.java:138"$0$0$0$1$5$"				}"
"StandardAnnotationMetadata.java:139"$0$0$0$1$4$"			}"
"StandardAnnotationMetadata.java:140"$0$0$0$4$25$"			catch (Throwable ex) {"
"StandardAnnotationMetadata.java:141"$1$0$0$12$111$"				throw new IllegalStateException(""Failed to introspect annotated methods on "" + getIntrospectedClass(), ex);"
"StandardAnnotationMetadata.java:142"$0$0$0$1$4$"			}"
"StandardAnnotationMetadata.java:143"$0$0$0$1$3$"		}"
"StandardAnnotationMetadata.java:144"$0$0$0$2$15$"		return false;"
"StandardAnnotationMetadata.java:145"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:146"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:147"$0$0$0$1$10$"	@Override"
"StandardAnnotationMetadata.java:148"$0$0$0$1$33$"	@SuppressWarnings(""deprecation"")"
"StandardAnnotationMetadata.java:149"$1$0$0$5$72$"	public Set<MethodMetadata> getAnnotatedMethods(String annotationName) {"
"StandardAnnotationMetadata.java:150"$0$0$0$4$46$"		Set<MethodMetadata> annotatedMethods = null;"
"StandardAnnotationMetadata.java:151"$1$0$0$4$81$"		if (AnnotationUtils.isCandidateClass(getIntrospectedClass(), annotationName)) {"
"StandardAnnotationMetadata.java:152"$0$0$0$2$8$"			try {"
"StandardAnnotationMetadata.java:153"$2$0$0$4$82$"				Method[] methods = ReflectionUtils.getDeclaredMethods(getIntrospectedClass());"
"StandardAnnotationMetadata.java:154"$0$0$0$6$35$"				for (Method method : methods) {"
"StandardAnnotationMetadata.java:155"$0$0$0$4$53$"					if (isAnnotatedMethod(method, annotationName)) {"
"StandardAnnotationMetadata.java:156"$0$0$0$5$37$"						if (annotatedMethods == null) {"
"StandardAnnotationMetadata.java:157"$0$0$0$4$49$"							annotatedMethods = new LinkedHashSet<>(4);"
"StandardAnnotationMetadata.java:158"$0$0$0$1$7$"						}"
"StandardAnnotationMetadata.java:159"$0$0$0$3$92$"						annotatedMethods.add(new StandardMethodMetadata(method, this.nestedAnnotationsAsMap));"
"StandardAnnotationMetadata.java:160"$0$0$0$1$6$"					}"
"StandardAnnotationMetadata.java:161"$0$0$0$1$5$"				}"
"StandardAnnotationMetadata.java:162"$0$0$0$1$4$"			}"
"StandardAnnotationMetadata.java:163"$0$0$0$4$25$"			catch (Throwable ex) {"
"StandardAnnotationMetadata.java:164"$1$0$0$12$111$"				throw new IllegalStateException(""Failed to introspect annotated methods on "" + getIntrospectedClass(), ex);"
"StandardAnnotationMetadata.java:165"$0$0$0$1$4$"			}"
"StandardAnnotationMetadata.java:166"$0$0$0$1$3$"		}"
"StandardAnnotationMetadata.java:167"$0$0$0$8$78$"		return annotatedMethods != null ? annotatedMethods : Collections.emptySet();"
"StandardAnnotationMetadata.java:168"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:169"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:170"$0$0$0$7$74$"	private boolean isAnnotatedMethod(Method method, String annotationName) {"
"StandardAnnotationMetadata.java:171"$1$0$0$7$68$"		return !method.isBridge() && method.getAnnotations().length > 0 &&"
"StandardAnnotationMetadata.java:172"$0$0$0$2$62$"				AnnotatedElementUtils.isAnnotated(method, annotationName);"
"StandardAnnotationMetadata.java:173"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:174"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:175"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:176"$0$0$0$5$61$"	static AnnotationMetadata from(Class<?> introspectedClass) {"
"StandardAnnotationMetadata.java:177"$0$0$0$4$65$"		return new StandardAnnotationMetadata(introspectedClass, true);"
"StandardAnnotationMetadata.java:178"$0$0$0$1$2$"	}"
"StandardAnnotationMetadata.java:179"$0$0$0$0$0$""
"StandardAnnotationMetadata.java:180"$0$0$0$1$1$"}"
"ByteBufferDecoder.java:1"$0$0$0$1$2$"/*"
"ByteBufferDecoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ByteBufferDecoder.java:3"$0$0$0$1$2$" *"
"ByteBufferDecoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ByteBufferDecoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ByteBufferDecoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ByteBufferDecoder.java:7"$0$0$0$1$2$" *"
"ByteBufferDecoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ByteBufferDecoder.java:9"$0$0$0$1$2$" *"
"ByteBufferDecoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ByteBufferDecoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ByteBufferDecoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ByteBufferDecoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ByteBufferDecoder.java:14"$0$0$0$5$33$" * limitations under the License."
"ByteBufferDecoder.java:15"$0$0$0$1$3$" */"
"ByteBufferDecoder.java:16"$0$0$0$0$0$""
"ByteBufferDecoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"ByteBufferDecoder.java:18"$0$0$0$0$0$""
"ByteBufferDecoder.java:19"$0$0$0$2$27$"import java.nio.ByteBuffer;"
"ByteBufferDecoder.java:20"$0$0$0$2$21$"import java.util.Map;"
"ByteBufferDecoder.java:21"$0$0$0$0$0$""
"ByteBufferDecoder.java:22"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"ByteBufferDecoder.java:23"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"ByteBufferDecoder.java:24"$0$0$0$2$58$"import org.springframework.core.io.buffer.DataBufferUtils;"
"ByteBufferDecoder.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ByteBufferDecoder.java:26"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"ByteBufferDecoder.java:27"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"ByteBufferDecoder.java:28"$0$0$0$0$0$""
"ByteBufferDecoder.java:29"$0$0$0$1$3$"/**"
"ByteBufferDecoder.java:30"$0$0$0$6$46$" * Decoder for {@link ByteBuffer ByteBuffers}."
"ByteBufferDecoder.java:31"$0$0$0$1$2$" *"
"ByteBufferDecoder.java:32"$0$0$0$4$28$" * @author Sebastien Deleuze"
"ByteBufferDecoder.java:33"$0$0$0$4$24$" * @author Arjen Poutsma"
"ByteBufferDecoder.java:34"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"ByteBufferDecoder.java:35"$0$0$0$3$13$" * @since 5.0"
"ByteBufferDecoder.java:36"$0$0$0$1$3$" */"
"ByteBufferDecoder.java:37"$0$0$0$6$78$"public class ByteBufferDecoder extends AbstractDataBufferDecoder<ByteBuffer> {"
"ByteBufferDecoder.java:38"$0$0$0$0$0$""
"ByteBufferDecoder.java:39"$0$0$0$3$29$"	public ByteBufferDecoder() {"
"ByteBufferDecoder.java:40"$0$0$0$1$27$"		super(MimeTypeUtils.ALL);"
"ByteBufferDecoder.java:41"$0$0$0$1$2$"	}"
"ByteBufferDecoder.java:42"$0$0$0$0$0$""
"ByteBufferDecoder.java:43"$0$0$0$0$0$""
"ByteBufferDecoder.java:44"$0$0$0$1$10$"	@Override"
"ByteBufferDecoder.java:45"$0$0$0$8$84$"	public boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"ByteBufferDecoder.java:46"$0$0$0$3$69$"		return (ByteBuffer.class.isAssignableFrom(elementType.toClass()) &&"
"ByteBufferDecoder.java:47"$0$0$0$2$44$"				super.canDecode(elementType, mimeType));"
"ByteBufferDecoder.java:48"$0$0$0$1$2$"	}"
"ByteBufferDecoder.java:49"$0$0$0$0$0$""
"ByteBufferDecoder.java:50"$0$0$0$1$10$"	@Override"
"ByteBufferDecoder.java:51"$0$0$0$6$76$"	public ByteBuffer decode(DataBuffer dataBuffer, ResolvableType elementType,"
"ByteBufferDecoder.java:52"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"ByteBufferDecoder.java:53"$0$0$0$0$0$""
"ByteBufferDecoder.java:54"$0$0$0$4$49$"		int byteCount = dataBuffer.readableByteCount();"
"ByteBufferDecoder.java:55"$0$0$0$4$51$"		ByteBuffer copy = ByteBuffer.allocate(byteCount);"
"ByteBufferDecoder.java:56"$0$0$0$1$38$"		copy.put(dataBuffer.asByteBuffer());"
"ByteBufferDecoder.java:57"$0$0$0$1$14$"		copy.flip();"
"ByteBufferDecoder.java:58"$0$0$0$1$38$"		DataBufferUtils.release(dataBuffer);"
"ByteBufferDecoder.java:59"$0$0$0$3$32$"		if (logger.isDebugEnabled()) {"
"ByteBufferDecoder.java:60"$1$0$0$9$76$"			logger.debug(Hints.getLogPrefix(hints) + ""Read "" + byteCount + "" bytes"");"
"ByteBufferDecoder.java:61"$0$0$0$1$3$"		}"
"ByteBufferDecoder.java:62"$0$0$0$2$14$"		return copy;"
"ByteBufferDecoder.java:63"$0$0$0$1$2$"	}"
"ByteBufferDecoder.java:64"$0$0$0$0$0$""
"ByteBufferDecoder.java:65"$0$0$0$1$1$"}"
"ResourcePropertySource.java:1"$0$0$0$1$2$"/*"
"ResourcePropertySource.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ResourcePropertySource.java:3"$0$0$0$1$2$" *"
"ResourcePropertySource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourcePropertySource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourcePropertySource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourcePropertySource.java:7"$0$0$0$1$2$" *"
"ResourcePropertySource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourcePropertySource.java:9"$0$0$0$1$2$" *"
"ResourcePropertySource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourcePropertySource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourcePropertySource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourcePropertySource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourcePropertySource.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourcePropertySource.java:15"$0$0$0$1$3$" */"
"ResourcePropertySource.java:16"$0$0$0$0$0$""
"ResourcePropertySource.java:17"$0$0$0$2$44$"package org.springframework.core.io.support;"
"ResourcePropertySource.java:18"$0$0$0$0$0$""
"ResourcePropertySource.java:19"$0$0$0$2$27$"import java.io.IOException;"
"ResourcePropertySource.java:20"$0$0$0$2$21$"import java.util.Map;"
"ResourcePropertySource.java:21"$0$0$0$2$28$"import java.util.Properties;"
"ResourcePropertySource.java:22"$0$0$0$0$0$""
"ResourcePropertySource.java:23"$0$0$0$2$61$"import org.springframework.core.env.PropertiesPropertySource;"
"ResourcePropertySource.java:24"$0$0$0$2$57$"import org.springframework.core.io.DefaultResourceLoader;"
"ResourcePropertySource.java:25"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"ResourcePropertySource.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResourcePropertySource.java:27"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"ResourcePropertySource.java:28"$0$0$0$0$0$""
"ResourcePropertySource.java:29"$0$0$0$1$3$"/**"
"ResourcePropertySource.java:30"$0$0$0$11$86$" * Subclass of {@link PropertiesPropertySource} that loads a {@link Properties} object"
"ResourcePropertySource.java:31"$0$0$0$11$89$" * from a given {@link org.springframework.core.io.Resource} or resource location such as"
"ResourcePropertySource.java:32"$0$0$0$6$84$" * {@code ""classpath:/com/myco/foo.properties""} or {@code ""file:/path/to/file.xml""}."
"ResourcePropertySource.java:33"$0$0$0$1$2$" *"
"ResourcePropertySource.java:34"$0$0$0$12$87$" * <p>Both traditional and XML-based properties file formats are supported; however, in"
"ResourcePropertySource.java:35"$0$0$0$12$77$" * order for XML processing to take effect, the underlying {@code Resource}'s"
"ResourcePropertySource.java:36"$2$0$0$6$87$" * {@link org.springframework.core.io.Resource#getFilename() getFilename()} method must"
"ResourcePropertySource.java:37"$0$0$0$11$63$" * return a non-{@code null} value that ends in {@code "".xml""}."
"ResourcePropertySource.java:38"$0$0$0$1$2$" *"
"ResourcePropertySource.java:39"$0$0$0$4$22$" * @author Chris Beams"
"ResourcePropertySource.java:40"$0$0$0$4$26$" * @author Juergen Hoeller"
"ResourcePropertySource.java:41"$0$0$0$3$13$" * @since 3.1"
"ResourcePropertySource.java:42"$0$0$0$3$44$" * @see org.springframework.core.io.Resource"
"ResourcePropertySource.java:43"$0$0$0$3$59$" * @see org.springframework.core.io.support.EncodedResource"
"ResourcePropertySource.java:44"$0$0$0$1$3$" */"
"ResourcePropertySource.java:45"$0$0$0$6$70$"public class ResourcePropertySource extends PropertiesPropertySource {"
"ResourcePropertySource.java:46"$0$0$0$0$0$""
"ResourcePropertySource.java:47"$0$0$0$12$69$"	/** The original resource name, if different from the given name. */"
"ResourcePropertySource.java:48"$0$0$0$1$10$"	@Nullable"
"ResourcePropertySource.java:49"$0$0$0$4$35$"	private final String resourceName;"
"ResourcePropertySource.java:50"$0$0$0$0$0$""
"ResourcePropertySource.java:51"$0$0$0$0$0$""
"ResourcePropertySource.java:52"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:53"$0$0$0$11$69$"	 * Create a PropertySource having the given name based on Properties"
"ResourcePropertySource.java:54"$0$0$0$7$43$"	 * loaded from the given encoded resource."
"ResourcePropertySource.java:55"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:56"$0$0$0$8$90$"	public ResourcePropertySource(String name, EncodedResource resource) throws IOException {"
"ResourcePropertySource.java:57"$0$0$0$2$62$"		super(name, PropertiesLoaderUtils.loadProperties(resource));"
"ResourcePropertySource.java:58"$2$0$0$3$65$"		this.resourceName = getNameForResource(resource.getResource());"
"ResourcePropertySource.java:59"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:60"$0$0$0$0$0$""
"ResourcePropertySource.java:61"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:62"$0$0$0$12$79$"	 * Create a PropertySource based on Properties loaded from the given resource."
"ResourcePropertySource.java:63"$0$0$0$12$65$"	 * The name of the PropertySource will be generated based on the"
"ResourcePropertySource.java:64"$1$0$0$8$72$"	 * {@link Resource#getDescription() description} of the given resource."
"ResourcePropertySource.java:65"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:66"$0$0$0$6$77$"	public ResourcePropertySource(EncodedResource resource) throws IOException {"
"ResourcePropertySource.java:67"$2$0$0$2$100$"		super(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource));"
"ResourcePropertySource.java:68"$0$0$0$3$27$"		this.resourceName = null;"
"ResourcePropertySource.java:69"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:70"$0$0$0$0$0$""
"ResourcePropertySource.java:71"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:72"$0$0$0$11$69$"	 * Create a PropertySource having the given name based on Properties"
"ResourcePropertySource.java:73"$0$0$0$7$43$"	 * loaded from the given encoded resource."
"ResourcePropertySource.java:74"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:75"$0$0$0$8$83$"	public ResourcePropertySource(String name, Resource resource) throws IOException {"
"ResourcePropertySource.java:76"$0$0$0$3$83$"		super(name, PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)));"
"ResourcePropertySource.java:77"$1$0$0$3$51$"		this.resourceName = getNameForResource(resource);"
"ResourcePropertySource.java:78"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:79"$0$0$0$0$0$""
"ResourcePropertySource.java:80"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:81"$0$0$0$12$79$"	 * Create a PropertySource based on Properties loaded from the given resource."
"ResourcePropertySource.java:82"$0$0$0$12$65$"	 * The name of the PropertySource will be generated based on the"
"ResourcePropertySource.java:83"$1$0$0$8$72$"	 * {@link Resource#getDescription() description} of the given resource."
"ResourcePropertySource.java:84"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:85"$0$0$0$6$70$"	public ResourcePropertySource(Resource resource) throws IOException {"
"ResourcePropertySource.java:86"$1$0$0$3$107$"		super(getNameForResource(resource), PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)));"
"ResourcePropertySource.java:87"$0$0$0$3$27$"		this.resourceName = null;"
"ResourcePropertySource.java:88"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:89"$0$0$0$0$0$""
"ResourcePropertySource.java:90"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:91"$0$0$0$13$81$"	 * Create a PropertySource having the given name based on Properties loaded from"
"ResourcePropertySource.java:92"$0$0$0$14$76$"	 * the given resource location and using the given class loader to load the"
"ResourcePropertySource.java:93"$0$0$0$9$63$"	 * resource (assuming it is prefixed with {@code classpath:})."
"ResourcePropertySource.java:94"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:95"$0$0$0$10$106$"	public ResourcePropertySource(String name, String location, ClassLoader classLoader) throws IOException {"
"ResourcePropertySource.java:96"$1$0$0$3$75$"		this(name, new DefaultResourceLoader(classLoader).getResource(location));"
"ResourcePropertySource.java:97"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:98"$0$0$0$0$0$""
"ResourcePropertySource.java:99"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:100"$0$0$0$12$78$"	 * Create a PropertySource based on Properties loaded from the given resource"
"ResourcePropertySource.java:101"$0$0$0$15$80$"	 * location and use the given class loader to load the resource, assuming it is"
"ResourcePropertySource.java:102"$0$0$0$12$76$"	 * prefixed with {@code classpath:}. The name of the PropertySource will be"
"ResourcePropertySource.java:103"$1$0$0$10$79$"	 * generated based on the {@link Resource#getDescription() description} of the"
"ResourcePropertySource.java:104"$0$0$0$2$13$"	 * resource."
"ResourcePropertySource.java:105"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:106"$0$0$0$8$93$"	public ResourcePropertySource(String location, ClassLoader classLoader) throws IOException {"
"ResourcePropertySource.java:107"$1$0$0$2$69$"		this(new DefaultResourceLoader(classLoader).getResource(location));"
"ResourcePropertySource.java:108"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:109"$0$0$0$0$0$""
"ResourcePropertySource.java:110"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:111"$0$0$0$13$81$"	 * Create a PropertySource having the given name based on Properties loaded from"
"ResourcePropertySource.java:112"$0$0$0$13$80$"	 * the given resource location. The default thread context class loader will be"
"ResourcePropertySource.java:113"$0$0$0$13$76$"	 * used to load the resource (assuming the location string is prefixed with"
"ResourcePropertySource.java:114"$0$0$0$3$23$"	 * {@code classpath:}."
"ResourcePropertySource.java:115"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:116"$0$0$0$8$81$"	public ResourcePropertySource(String name, String location) throws IOException {"
"ResourcePropertySource.java:117"$1$0$0$3$64$"		this(name, new DefaultResourceLoader().getResource(location));"
"ResourcePropertySource.java:118"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:119"$0$0$0$0$0$""
"ResourcePropertySource.java:120"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:121"$0$0$0$12$78$"	 * Create a PropertySource based on Properties loaded from the given resource"
"ResourcePropertySource.java:122"$0$0$0$13$75$"	 * location. The name of the PropertySource will be generated based on the"
"ResourcePropertySource.java:123"$1$0$0$7$66$"	 * {@link Resource#getDescription() description} of the resource."
"ResourcePropertySource.java:124"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:125"$0$0$0$6$68$"	public ResourcePropertySource(String location) throws IOException {"
"ResourcePropertySource.java:126"$1$0$0$2$58$"		this(new DefaultResourceLoader().getResource(location));"
"ResourcePropertySource.java:127"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:128"$0$0$0$0$0$""
"ResourcePropertySource.java:129"$0$0$0$10$105$"	private ResourcePropertySource(String name, @Nullable String resourceName, Map<String, Object> source) {"
"ResourcePropertySource.java:130"$0$0$0$2$22$"		super(name, source);"
"ResourcePropertySource.java:131"$0$0$0$3$35$"		this.resourceName = resourceName;"
"ResourcePropertySource.java:132"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:133"$0$0$0$0$0$""
"ResourcePropertySource.java:134"$0$0$0$0$0$""
"ResourcePropertySource.java:135"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:136"$0$0$0$10$80$"	 * Return a potentially adapted variant of this {@link ResourcePropertySource},"
"ResourcePropertySource.java:137"$0$0$0$12$78$"	 * overriding the previously given (or derived) name with the specified name."
"ResourcePropertySource.java:138"$0$0$0$3$16$"	 * @since 4.0.4"
"ResourcePropertySource.java:139"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:140"$0$0$0$5$54$"	public ResourcePropertySource withName(String name) {"
"ResourcePropertySource.java:141"$0$0$0$3$31$"		if (this.name.equals(name)) {"
"ResourcePropertySource.java:142"$0$0$0$2$15$"			return this;"
"ResourcePropertySource.java:143"$0$0$0$1$3$"		}"
"ResourcePropertySource.java:144"$0$0$1$8$53$"		// Store the original resource name if necessary..."
"ResourcePropertySource.java:145"$0$0$0$5$34$"		if (this.resourceName != null) {"
"ResourcePropertySource.java:146"$0$0$0$3$40$"			if (this.resourceName.equals(name)) {"
"ResourcePropertySource.java:147"$0$0$0$5$76$"				return new ResourcePropertySource(this.resourceName, null, this.source);"
"ResourcePropertySource.java:148"$0$0$0$1$4$"			}"
"ResourcePropertySource.java:149"$0$0$0$2$9$"			else {"
"ResourcePropertySource.java:150"$0$0$0$5$76$"				return new ResourcePropertySource(name, this.resourceName, this.source);"
"ResourcePropertySource.java:151"$0$0$0$1$4$"			}"
"ResourcePropertySource.java:152"$0$0$0$1$3$"		}"
"ResourcePropertySource.java:153"$0$0$0$2$8$"		else {"
"ResourcePropertySource.java:154"$0$0$1$13$72$"			// Current name is resource name -> preserve it in the extra field..."
"ResourcePropertySource.java:155"$0$0$0$5$67$"			return new ResourcePropertySource(name, this.name, this.source);"
"ResourcePropertySource.java:156"$0$0$0$1$3$"		}"
"ResourcePropertySource.java:157"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:158"$0$0$0$0$0$""
"ResourcePropertySource.java:159"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:160"$0$0$0$10$80$"	 * Return a potentially adapted variant of this {@link ResourcePropertySource},"
"ResourcePropertySource.java:161"$0$0$0$13$81$"	 * overriding the previously given name (if any) with the original resource name"
"ResourcePropertySource.java:162"$0$0$0$11$77$"	 * (equivalent to the name generated by the name-less constructor variants)."
"ResourcePropertySource.java:163"$0$0$0$3$14$"	 * @since 4.1"
"ResourcePropertySource.java:164"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:165"$0$0$0$4$51$"	public ResourcePropertySource withResourceName() {"
"ResourcePropertySource.java:166"$0$0$0$5$34$"		if (this.resourceName == null) {"
"ResourcePropertySource.java:167"$0$0$0$2$15$"			return this;"
"ResourcePropertySource.java:168"$0$0$0$1$3$"		}"
"ResourcePropertySource.java:169"$0$0$0$5$74$"		return new ResourcePropertySource(this.resourceName, null, this.source);"
"ResourcePropertySource.java:170"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:171"$0$0$0$0$0$""
"ResourcePropertySource.java:172"$0$0$0$0$0$""
"ResourcePropertySource.java:173"$0$0$0$1$4$"	/**"
"ResourcePropertySource.java:174"$0$0$0$12$72$"	 * Return the description for the given Resource; if the description is"
"ResourcePropertySource.java:175"$0$0$0$14$77$"	 * empty, return the class name of the resource plus its identity hash code."
"ResourcePropertySource.java:176"$1$0$0$3$62$"	 * @see org.springframework.core.io.Resource#getDescription()"
"ResourcePropertySource.java:177"$0$0$0$1$4$"	 */"
"ResourcePropertySource.java:178"$1$0$0$6$62$"	private static String getNameForResource(Resource resource) {"
"ResourcePropertySource.java:179"$1$0$0$4$42$"		String name = resource.getDescription();"
"ResourcePropertySource.java:180"$0$0$0$3$35$"		if (!StringUtils.hasText(name)) {"
"ResourcePropertySource.java:181"$2$0$0$7$88$"			name = resource.getClass().getSimpleName() + ""@"" + System.identityHashCode(resource);"
"ResourcePropertySource.java:182"$0$0$0$1$3$"		}"
"ResourcePropertySource.java:183"$0$0$0$2$14$"		return name;"
"ResourcePropertySource.java:184"$0$0$0$1$2$"	}"
"ResourcePropertySource.java:185"$0$0$0$0$0$""
"ResourcePropertySource.java:186"$0$0$0$1$1$"}"
"TransformerUtils.java:1"$0$0$0$1$2$"/*"
"TransformerUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"TransformerUtils.java:3"$0$0$0$1$2$" *"
"TransformerUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"TransformerUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"TransformerUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"TransformerUtils.java:7"$0$0$0$1$2$" *"
"TransformerUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"TransformerUtils.java:9"$0$0$0$1$2$" *"
"TransformerUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"TransformerUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"TransformerUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"TransformerUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"TransformerUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"TransformerUtils.java:15"$0$0$0$1$3$" */"
"TransformerUtils.java:16"$0$0$0$0$0$""
"TransformerUtils.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"TransformerUtils.java:18"$0$0$0$0$0$""
"TransformerUtils.java:19"$0$0$0$2$38$"import javax.xml.transform.OutputKeys;"
"TransformerUtils.java:20"$0$0$0$2$39$"import javax.xml.transform.Transformer;"
"TransformerUtils.java:21"$0$0$0$0$0$""
"TransformerUtils.java:22"$0$0$0$2$39$"import org.springframework.util.Assert;"
"TransformerUtils.java:23"$0$0$0$0$0$""
"TransformerUtils.java:24"$0$0$0$1$3$"/**"
"TransformerUtils.java:25"$0$0$0$9$92$" * Contains common behavior relating to {@link javax.xml.transform.Transformer Transformers}"
"TransformerUtils.java:26"$0$0$0$8$58$" * and the {@code javax.xml.transform} package in general."
"TransformerUtils.java:27"$0$0$0$1$2$" *"
"TransformerUtils.java:28"$0$0$0$4$21$" * @author Rick Evans"
"TransformerUtils.java:29"$0$0$0$4$26$" * @author Juergen Hoeller"
"TransformerUtils.java:30"$0$0$0$3$15$" * @since 2.5.5"
"TransformerUtils.java:31"$0$0$0$1$3$" */"
"TransformerUtils.java:32"$0$0$0$5$40$"public abstract class TransformerUtils {"
"TransformerUtils.java:33"$0$0$0$0$0$""
"TransformerUtils.java:34"$0$0$0$1$4$"	/**"
"TransformerUtils.java:35"$0$0$0$12$85$"	 * The indent amount of characters if {@link #enableIndenting indenting is enabled}."
"TransformerUtils.java:36"$0$0$0$4$23$"	 * <p>Defaults to ""2""."
"TransformerUtils.java:37"$0$0$0$1$4$"	 */"
"TransformerUtils.java:38"$0$0$0$7$51$"	public static final int DEFAULT_INDENT_AMOUNT = 2;"
"TransformerUtils.java:39"$0$0$0$0$0$""
"TransformerUtils.java:40"$0$0$0$0$0$""
"TransformerUtils.java:41"$0$0$0$1$4$"	/**"
"TransformerUtils.java:42"$0$0$0$8$78$"	 * Enable indenting for the supplied {@link javax.xml.transform.Transformer}."
"TransformerUtils.java:43"$0$0$0$15$96$"	 * <p>If the underlying XSLT engine is Xalan, then the special output key {@code indent-amount}"
"TransformerUtils.java:44"$0$0$0$13$80$"	 * will be also be set to a value of {@link #DEFAULT_INDENT_AMOUNT} characters."
"TransformerUtils.java:45"$1$0$0$6$45$"	 * @param transformer the target transformer"
"TransformerUtils.java:46"$0$0$0$4$74$"	 * @see javax.xml.transform.Transformer#setOutputProperty(String, String)"
"TransformerUtils.java:47"$0$0$0$3$46$"	 * @see javax.xml.transform.OutputKeys#INDENT"
"TransformerUtils.java:48"$0$0$0$1$4$"	 */"
"TransformerUtils.java:49"$0$0$0$6$62$"	public static void enableIndenting(Transformer transformer) {"
"TransformerUtils.java:50"$0$0$0$2$54$"		enableIndenting(transformer, DEFAULT_INDENT_AMOUNT);"
"TransformerUtils.java:51"$0$0$0$1$2$"	}"
"TransformerUtils.java:52"$0$0$0$0$0$""
"TransformerUtils.java:53"$0$0$0$1$4$"	/**"
"TransformerUtils.java:54"$0$0$0$8$78$"	 * Enable indenting for the supplied {@link javax.xml.transform.Transformer}."
"TransformerUtils.java:55"$0$0$0$15$96$"	 * <p>If the underlying XSLT engine is Xalan, then the special output key {@code indent-amount}"
"TransformerUtils.java:56"$0$0$0$13$80$"	 * will be also be set to a value of {@link #DEFAULT_INDENT_AMOUNT} characters."
"TransformerUtils.java:57"$1$0$0$6$45$"	 * @param transformer the target transformer"
"TransformerUtils.java:58"$0$0$0$13$80$"	 * @param indentAmount the size of the indent (2 characters, 3 characters, etc)"
"TransformerUtils.java:59"$0$0$0$4$74$"	 * @see javax.xml.transform.Transformer#setOutputProperty(String, String)"
"TransformerUtils.java:60"$0$0$0$3$46$"	 * @see javax.xml.transform.OutputKeys#INDENT"
"TransformerUtils.java:61"$0$0$0$1$4$"	 */"
"TransformerUtils.java:62"$0$0$0$8$80$"	public static void enableIndenting(Transformer transformer, int indentAmount) {"
"TransformerUtils.java:63"$0$0$0$6$62$"		Assert.notNull(transformer, ""Transformer must not be null"");"
"TransformerUtils.java:64"$0$0$0$5$25$"		if (indentAmount < 0) {"
"TransformerUtils.java:65"$0$0$0$14$109$"			throw new IllegalArgumentException(""Invalid indent amount (must not be less than zero): "" + indentAmount);"
"TransformerUtils.java:66"$0$0$0$1$3$"		}"
"TransformerUtils.java:67"$0$0$0$2$58$"		transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");"
"TransformerUtils.java:68"$0$0$0$2$7$"		try {"
"TransformerUtils.java:69"$0$0$1$13$73$"			// Xalan-specific, but this is the most common XSLT engine in any case"
"TransformerUtils.java:70"$0$0$0$2$109$"			transformer.setOutputProperty(""{http://xml.apache.org/xalan}indent-amount"", String.valueOf(indentAmount));"
"TransformerUtils.java:71"$0$0$0$1$3$"		}"
"TransformerUtils.java:72"$0$0$0$4$44$"		catch (IllegalArgumentException ignored) {"
"TransformerUtils.java:73"$0$0$0$1$3$"		}"
"TransformerUtils.java:74"$0$0$0$1$2$"	}"
"TransformerUtils.java:75"$0$0$0$0$0$""
"TransformerUtils.java:76"$0$0$0$1$4$"	/**"
"TransformerUtils.java:77"$0$0$0$8$79$"	 * Disable indenting for the supplied {@link javax.xml.transform.Transformer}."
"TransformerUtils.java:78"$1$0$0$6$45$"	 * @param transformer the target transformer"
"TransformerUtils.java:79"$0$0$0$3$46$"	 * @see javax.xml.transform.OutputKeys#INDENT"
"TransformerUtils.java:80"$0$0$0$1$4$"	 */"
"TransformerUtils.java:81"$0$0$0$6$63$"	public static void disableIndenting(Transformer transformer) {"
"TransformerUtils.java:82"$0$0$0$6$62$"		Assert.notNull(transformer, ""Transformer must not be null"");"
"TransformerUtils.java:83"$0$0$0$2$57$"		transformer.setOutputProperty(OutputKeys.INDENT, ""no"");"
"TransformerUtils.java:84"$0$0$0$1$2$"	}"
"TransformerUtils.java:85"$0$0$0$0$0$""
"TransformerUtils.java:86"$0$0$0$1$1$"}"
"AntPathMatcher.java:1"$0$0$0$1$2$"/*"
"AntPathMatcher.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"AntPathMatcher.java:3"$0$0$0$1$2$" *"
"AntPathMatcher.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AntPathMatcher.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AntPathMatcher.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AntPathMatcher.java:7"$0$0$0$1$2$" *"
"AntPathMatcher.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AntPathMatcher.java:9"$0$0$0$1$2$" *"
"AntPathMatcher.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AntPathMatcher.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AntPathMatcher.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AntPathMatcher.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AntPathMatcher.java:14"$0$0$0$5$33$" * limitations under the License."
"AntPathMatcher.java:15"$0$0$0$1$3$" */"
"AntPathMatcher.java:16"$0$0$0$0$0$""
"AntPathMatcher.java:17"$0$0$0$2$33$"package org.springframework.util;"
"AntPathMatcher.java:18"$0$0$0$0$0$""
"AntPathMatcher.java:19"$0$0$0$2$28$"import java.util.Comparator;"
"AntPathMatcher.java:20"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"AntPathMatcher.java:21"$0$0$0$2$28$"import java.util.LinkedList;"
"AntPathMatcher.java:22"$0$0$0$2$22$"import java.util.List;"
"AntPathMatcher.java:23"$0$0$0$2$21$"import java.util.Map;"
"AntPathMatcher.java:24"$0$0$0$2$46$"import java.util.concurrent.ConcurrentHashMap;"
"AntPathMatcher.java:25"$0$0$0$2$31$"import java.util.regex.Matcher;"
"AntPathMatcher.java:26"$0$0$0$2$31$"import java.util.regex.Pattern;"
"AntPathMatcher.java:27"$0$0$0$0$0$""
"AntPathMatcher.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AntPathMatcher.java:29"$0$0$0$0$0$""
"AntPathMatcher.java:30"$0$0$0$1$3$"/**"
"AntPathMatcher.java:31"$0$0$0$8$66$" * {@link PathMatcher} implementation for Ant-style path patterns."
"AntPathMatcher.java:32"$0$0$0$1$2$" *"
"AntPathMatcher.java:33"$0$0$0$14$110$" * <p>Part of this mapping code has been kindly borrowed from <a href=""https://ant.apache.org"">Apache Ant</a>."
"AntPathMatcher.java:34"$0$0$0$1$2$" *"
"AntPathMatcher.java:35"$0$0$0$9$61$" * <p>The mapping matches URLs using the following rules:<br>"
"AntPathMatcher.java:36"$0$0$0$2$7$" * <ul>"
"AntPathMatcher.java:37"$0$0$0$6$43$" * <li>{@code ?} matches one character</li>"
"AntPathMatcher.java:38"$0$0$0$8$53$" * <li>{@code *} matches zero or more characters</li>"
"AntPathMatcher.java:39"$0$0$0$11$74$" * <li>{@code **} matches zero or more <em>directories</em> in a path</li>"
"AntPathMatcher.java:40"$0$0$0$14$103$" * <li>{@code {spring:[a-z]+}} matches the regexp {@code [a-z]+} as a path variable named ""spring""</li>"
"AntPathMatcher.java:41"$0$0$0$2$8$" * </ul>"
"AntPathMatcher.java:42"$0$0$0$1$2$" *"
"AntPathMatcher.java:43"$0$0$0$2$20$" * <h3>Examples</h3>"
"AntPathMatcher.java:44"$0$0$0$2$7$" * <ul>"
"AntPathMatcher.java:45"$0$0$0$9$73$" * <li>{@code com/t?st.jsp} &mdash; matches {@code com/test.jsp} but also"
"AntPathMatcher.java:46"$0$0$0$6$52$" * {@code com/tast.jsp} or {@code com/txst.jsp}</li>"
"AntPathMatcher.java:47"$0$0$0$11$70$" * <li>{@code com/*.jsp} &mdash; matches all {@code .jsp} files in the"
"AntPathMatcher.java:48"$0$0$0$4$29$" * {@code com} directory</li>"
"AntPathMatcher.java:49"$0$0$0$7$80$" * <li><code>com/&#42;&#42;/test.jsp</code> &mdash; matches all {@code test.jsp}"
"AntPathMatcher.java:50"$0$0$0$7$45$" * files underneath the {@code com} path</li>"
"AntPathMatcher.java:51"$0$0$0$5$76$" * <li><code>org/springframework/&#42;&#42;/*.jsp</code> &mdash; matches all"
"AntPathMatcher.java:52"$0$0$0$9$74$" * {@code .jsp} files underneath the {@code org/springframework} path</li>"
"AntPathMatcher.java:53"$0$0$0$4$66$" * <li><code>org/&#42;&#42;/servlet/bla.jsp</code> &mdash; matches"
"AntPathMatcher.java:54"$0$0$0$5$55$" * {@code org/springframework/servlet/bla.jsp} but also"
"AntPathMatcher.java:55"$0$0$0$6$91$" * {@code org/springframework/testing/servlet/bla.jsp} and {@code org/servlet/bla.jsp}</li>"
"AntPathMatcher.java:56"$0$0$0$13$104$" * <li>{@code com/{filename:\\w+}.jsp} will match {@code com/test.jsp} and assign the value {@code test}"
"AntPathMatcher.java:57"$0$0$0$6$40$" * to the {@code filename} variable</li>"
"AntPathMatcher.java:58"$0$0$0$2$8$" * </ul>"
"AntPathMatcher.java:59"$0$0$0$1$2$" *"
"AntPathMatcher.java:60"$0$0$0$13$79$" * <p><strong>Note:</strong> a pattern and a path must both be absolute or must"
"AntPathMatcher.java:61"$0$0$0$15$78$" * both be relative in order for the two to match. Therefore it is recommended"
"AntPathMatcher.java:62"$0$0$0$13$76$" * that users of this implementation to sanitize patterns in order to prefix"
"AntPathMatcher.java:63"$0$0$0$15$72$" * them with ""/"" as it makes sense in the context in which they're used."
"AntPathMatcher.java:64"$0$0$0$1$2$" *"
"AntPathMatcher.java:65"$0$0$0$4$24$" * @author Alef Arendsen"
"AntPathMatcher.java:66"$0$0$0$4$26$" * @author Juergen Hoeller"
"AntPathMatcher.java:67"$0$0$0$4$21$" * @author Rob Harrop"
"AntPathMatcher.java:68"$0$0$0$4$24$" * @author Arjen Poutsma"
"AntPathMatcher.java:69"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"AntPathMatcher.java:70"$0$0$0$4$22$" * @author Sam Brannen"
"AntPathMatcher.java:71"$0$0$0$3$20$" * @since 16.07.2003"
"AntPathMatcher.java:72"$0$0$0$1$3$" */"
"AntPathMatcher.java:73"$0$0$0$6$52$"public class AntPathMatcher implements PathMatcher {"
"AntPathMatcher.java:74"$0$0$0$0$0$""
"AntPathMatcher.java:75"$0$0$0$6$36$"	/** Default path separator: ""/"". */"
"AntPathMatcher.java:76"$0$0$0$7$57$"	public static final String DEFAULT_PATH_SEPARATOR = ""/"";"
"AntPathMatcher.java:77"$0$0$0$0$0$""
"AntPathMatcher.java:78"$0$0$0$7$58$"	private static final int CACHE_TURNOFF_THRESHOLD = 65536;"
"AntPathMatcher.java:79"$0$0$0$0$0$""
"AntPathMatcher.java:80"$0$0$0$7$79$"	private static final Pattern VARIABLE_PATTERN = Pattern.compile(""\\{[^/]+?}"");"
"AntPathMatcher.java:81"$0$0$0$0$0$""
"AntPathMatcher.java:82"$0$0$0$11$64$"	private static final char[] WILDCARD_CHARS = { '*', '?', '{' };"
"AntPathMatcher.java:83"$0$0$0$0$0$""
"AntPathMatcher.java:84"$0$0$0$0$0$""
"AntPathMatcher.java:85"$0$0$0$3$30$"	private String pathSeparator;"
"AntPathMatcher.java:86"$0$0$0$0$0$""
"AntPathMatcher.java:87"$0$0$0$3$61$"	private PathSeparatorPatternCache pathSeparatorPatternCache;"
"AntPathMatcher.java:88"$0$0$0$0$0$""
"AntPathMatcher.java:89"$0$0$0$5$38$"	private boolean caseSensitive = true;"
"AntPathMatcher.java:90"$0$0$0$0$0$""
"AntPathMatcher.java:91"$0$0$0$5$36$"	private boolean trimTokens = false;"
"AntPathMatcher.java:92"$0$0$0$0$0$""
"AntPathMatcher.java:93"$0$0$0$1$10$"	@Nullable"
"AntPathMatcher.java:94"$0$0$0$4$40$"	private volatile Boolean cachePatterns;"
"AntPathMatcher.java:95"$0$0$0$0$0$""
"AntPathMatcher.java:96"$0$0$0$8$90$"	private final Map<String, String[]> tokenizedPatternCache = new ConcurrentHashMap<>(256);"
"AntPathMatcher.java:97"$0$0$0$0$0$""
"AntPathMatcher.java:98"$0$0$0$7$91$"	final Map<String, AntPathStringMatcher> stringMatcherCache = new ConcurrentHashMap<>(256);"
"AntPathMatcher.java:99"$0$0$0$0$0$""
"AntPathMatcher.java:100"$0$0$0$0$0$""
"AntPathMatcher.java:101"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:102"$0$0$0$9$67$"	 * Create a new instance with the {@link #DEFAULT_PATH_SEPARATOR}."
"AntPathMatcher.java:103"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:104"$0$0$0$3$26$"	public AntPathMatcher() {"
"AntPathMatcher.java:105"$0$0$0$3$46$"		this.pathSeparator = DEFAULT_PATH_SEPARATOR;"
"AntPathMatcher.java:106"$0$0$0$4$89$"		this.pathSeparatorPatternCache = new PathSeparatorPatternCache(DEFAULT_PATH_SEPARATOR);"
"AntPathMatcher.java:107"$0$0$0$1$2$"	}"
"AntPathMatcher.java:108"$0$0$0$0$0$""
"AntPathMatcher.java:109"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:110"$0$0$0$12$78$"	 * A convenient, alternative constructor to use with a custom path separator."
"AntPathMatcher.java:111"$0$0$0$13$77$"	 * @param pathSeparator the path separator to use, must not be {@code null}."
"AntPathMatcher.java:112"$0$0$0$3$14$"	 * @since 4.1"
"AntPathMatcher.java:113"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:114"$0$0$0$4$46$"	public AntPathMatcher(String pathSeparator) {"
"AntPathMatcher.java:115"$0$0$0$4$63$"		Assert.notNull(pathSeparator, ""'pathSeparator' is required"");"
"AntPathMatcher.java:116"$0$0$0$3$37$"		this.pathSeparator = pathSeparator;"
"AntPathMatcher.java:117"$0$0$0$4$80$"		this.pathSeparatorPatternCache = new PathSeparatorPatternCache(pathSeparator);"
"AntPathMatcher.java:118"$0$0$0$1$2$"	}"
"AntPathMatcher.java:119"$0$0$0$0$0$""
"AntPathMatcher.java:120"$0$0$0$0$0$""
"AntPathMatcher.java:121"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:122"$0$0$0$10$54$"	 * Set the path separator to use for pattern parsing."
"AntPathMatcher.java:123"$0$0$0$7$33$"	 * <p>Default is ""/"", as in Ant."
"AntPathMatcher.java:124"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:125"$0$0$0$6$63$"	public void setPathSeparator(@Nullable String pathSeparator) {"
"AntPathMatcher.java:126"$0$0$0$9$88$"		this.pathSeparator = (pathSeparator != null ? pathSeparator : DEFAULT_PATH_SEPARATOR);"
"AntPathMatcher.java:127"$0$0$0$4$85$"		this.pathSeparatorPatternCache = new PathSeparatorPatternCache(this.pathSeparator);"
"AntPathMatcher.java:128"$0$0$0$1$2$"	}"
"AntPathMatcher.java:129"$0$0$0$0$0$""
"AntPathMatcher.java:130"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:131"$0$0$0$11$76$"	 * Specify whether to perform pattern matching in a case-sensitive fashion."
"AntPathMatcher.java:132"$0$0$0$13$91$"	 * <p>Default is {@code true}. Switch this to {@code false} for case-insensitive matching."
"AntPathMatcher.java:133"$0$0$0$3$14$"	 * @since 4.2"
"AntPathMatcher.java:134"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:135"$0$0$0$5$54$"	public void setCaseSensitive(boolean caseSensitive) {"
"AntPathMatcher.java:136"$0$0$0$3$37$"		this.caseSensitive = caseSensitive;"
"AntPathMatcher.java:137"$0$0$0$1$2$"	}"
"AntPathMatcher.java:138"$0$0$0$0$0$""
"AntPathMatcher.java:139"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:140"$0$0$0$9$57$"	 * Specify whether to trim tokenized paths and patterns."
"AntPathMatcher.java:141"$0$0$0$5$32$"	 * <p>Default is {@code false}."
"AntPathMatcher.java:142"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:143"$0$0$0$5$48$"	public void setTrimTokens(boolean trimTokens) {"
"AntPathMatcher.java:144"$0$0$0$3$31$"		this.trimTokens = trimTokens;"
"AntPathMatcher.java:145"$0$0$0$1$2$"	}"
"AntPathMatcher.java:146"$0$0$0$0$0$""
"AntPathMatcher.java:147"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:148"$0$0$0$11$72$"	 * Specify whether to cache parsed pattern metadata for patterns passed"
"AntPathMatcher.java:149"$0$0$0$12$70$"	 * into this matcher's {@link #match} method. A value of {@code true}"
"AntPathMatcher.java:150"$0$0$0$12$72$"	 * activates an unlimited pattern cache; a value of {@code false} turns"
"AntPathMatcher.java:151"$0$0$0$6$37$"	 * the pattern cache off completely."
"AntPathMatcher.java:152"$0$0$0$15$79$"	 * <p>Default is for the cache to be on, but with the variant to automatically"
"AntPathMatcher.java:153"$0$0$0$13$71$"	 * turn it off when encountering too many patterns to cache at runtime"
"AntPathMatcher.java:154"$0$0$0$11$78$"	 * (the threshold is 65536), assuming that arbitrary permutations of patterns"
"AntPathMatcher.java:155"$0$0$0$12$75$"	 * are coming in, with little chance for encountering a recurring pattern."
"AntPathMatcher.java:156"$0$0$0$3$16$"	 * @since 4.0.1"
"AntPathMatcher.java:157"$1$0$0$3$34$"	 * @see #getStringMatcher(String)"
"AntPathMatcher.java:158"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:159"$0$0$0$5$54$"	public void setCachePatterns(boolean cachePatterns) {"
"AntPathMatcher.java:160"$0$0$0$3$37$"		this.cachePatterns = cachePatterns;"
"AntPathMatcher.java:161"$0$0$0$1$2$"	}"
"AntPathMatcher.java:162"$0$0$0$0$0$""
"AntPathMatcher.java:163"$0$0$0$4$40$"	private void deactivatePatternCache() {"
"AntPathMatcher.java:164"$0$0$0$3$29$"		this.cachePatterns = false;"
"AntPathMatcher.java:165"$0$0$0$1$37$"		this.tokenizedPatternCache.clear();"
"AntPathMatcher.java:166"$0$0$0$1$34$"		this.stringMatcherCache.clear();"
"AntPathMatcher.java:167"$0$0$0$1$2$"	}"
"AntPathMatcher.java:168"$0$0$0$0$0$""
"AntPathMatcher.java:169"$0$0$0$0$0$""
"AntPathMatcher.java:170"$0$0$0$1$10$"	@Override"
"AntPathMatcher.java:171"$0$0$0$6$50$"	public boolean isPattern(@Nullable String path) {"
"AntPathMatcher.java:172"$0$0$0$5$21$"		if (path == null) {"
"AntPathMatcher.java:173"$0$0$0$2$16$"			return false;"
"AntPathMatcher.java:174"$0$0$0$1$3$"		}"
"AntPathMatcher.java:175"$0$0$0$4$25$"		boolean uriVar = false;"
"AntPathMatcher.java:176"$0$0$0$10$43$"		for (int i = 0; i < path.length(); i++) {"
"AntPathMatcher.java:177"$0$0$0$4$27$"			char c = path.charAt(i);"
"AntPathMatcher.java:178"$0$0$0$9$30$"			if (c == '*' || c == '?') {"
"AntPathMatcher.java:179"$0$0$0$2$16$"				return true;"
"AntPathMatcher.java:180"$0$0$0$1$4$"			}"
"AntPathMatcher.java:181"$0$0$0$5$18$"			if (c == '{') {"
"AntPathMatcher.java:182"$0$0$0$3$18$"				uriVar = true;"
"AntPathMatcher.java:183"$0$0$0$1$13$"				continue;"
"AntPathMatcher.java:184"$0$0$0$1$4$"			}"
"AntPathMatcher.java:185"$0$0$0$7$28$"			if (c == '}' && uriVar) {"
"AntPathMatcher.java:186"$0$0$0$2$16$"				return true;"
"AntPathMatcher.java:187"$0$0$0$1$4$"			}"
"AntPathMatcher.java:188"$0$0$0$1$3$"		}"
"AntPathMatcher.java:189"$0$0$0$2$15$"		return false;"
"AntPathMatcher.java:190"$0$0$0$1$2$"	}"
"AntPathMatcher.java:191"$0$0$0$0$0$""
"AntPathMatcher.java:192"$0$0$0$1$10$"	@Override"
"AntPathMatcher.java:193"$0$0$0$7$52$"	public boolean match(String pattern, String path) {"
"AntPathMatcher.java:194"$0$0$0$5$44$"		return doMatch(pattern, path, true, null);"
"AntPathMatcher.java:195"$0$0$0$1$2$"	}"
"AntPathMatcher.java:196"$0$0$0$0$0$""
"AntPathMatcher.java:197"$0$0$0$1$10$"	@Override"
"AntPathMatcher.java:198"$0$0$0$7$57$"	public boolean matchStart(String pattern, String path) {"
"AntPathMatcher.java:199"$0$0$0$5$45$"		return doMatch(pattern, path, false, null);"
"AntPathMatcher.java:200"$0$0$0$1$2$"	}"
"AntPathMatcher.java:201"$0$0$0$0$0$""
"AntPathMatcher.java:202"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:203"$0$0$0$12$76$"	 * Actually match the given {@code path} against the given {@code pattern}."
"AntPathMatcher.java:204"$0$0$0$8$47$"	 * @param pattern the pattern to match against"
"AntPathMatcher.java:205"$0$0$0$7$32$"	 * @param path the path to test"
"AntPathMatcher.java:206"$0$0$0$14$83$"	 * @param fullMatch whether a full pattern match is required (else a pattern match"
"AntPathMatcher.java:207"$0$0$0$11$53$"	 * as far as the given base path goes is sufficient)"
"AntPathMatcher.java:208"$0$0$0$15$89$"	 * @return {@code true} if the supplied {@code path} matched, {@code false} if it didn't"
"AntPathMatcher.java:209"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:210"$0$0$0$9$84$"	protected boolean doMatch(String pattern, @Nullable String path, boolean fullMatch,"
"AntPathMatcher.java:211"$0$0$0$5$56$"			@Nullable Map<String, String> uriTemplateVariables) {"
"AntPathMatcher.java:212"$0$0$0$0$0$""
"AntPathMatcher.java:213"$0$0$0$9$102$"		if (path == null || path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {"
"AntPathMatcher.java:214"$0$0$0$2$16$"			return false;"
"AntPathMatcher.java:215"$0$0$0$1$3$"		}"
"AntPathMatcher.java:216"$0$0$0$0$0$""
"AntPathMatcher.java:217"$0$0$0$4$47$"		String[] pattDirs = tokenizePattern(pattern);"
"AntPathMatcher.java:218"$0$0$0$8$77$"		if (fullMatch && this.caseSensitive && !isPotentialMatch(path, pattDirs)) {"
"AntPathMatcher.java:219"$0$0$0$2$16$"			return false;"
"AntPathMatcher.java:220"$0$0$0$1$3$"		}"
"AntPathMatcher.java:221"$0$0$0$0$0$""
"AntPathMatcher.java:222"$0$0$0$4$41$"		String[] pathDirs = tokenizePath(path);"
"AntPathMatcher.java:223"$0$0$0$4$23$"		int pattIdxStart = 0;"
"AntPathMatcher.java:224"$0$0$0$6$39$"		int pattIdxEnd = pattDirs.length - 1;"
"AntPathMatcher.java:225"$0$0$0$4$23$"		int pathIdxStart = 0;"
"AntPathMatcher.java:226"$0$0$0$6$39$"		int pathIdxEnd = pathDirs.length - 1;"
"AntPathMatcher.java:227"$0$0$0$0$0$""
"AntPathMatcher.java:228"$0$0$1$9$42$"		// Match all elements up to the first **"
"AntPathMatcher.java:229"$0$0$0$9$68$"		while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {"
"AntPathMatcher.java:230"$0$0$0$4$43$"			String pattDir = pattDirs[pattIdxStart];"
"AntPathMatcher.java:231"$0$0$0$3$30$"			if (""**"".equals(pattDir)) {"
"AntPathMatcher.java:232"$0$0$0$1$10$"				break;"
"AntPathMatcher.java:233"$0$0$0$1$4$"			}"
"AntPathMatcher.java:234"$0$0$0$5$78$"			if (!matchStrings(pattDir, pathDirs[pathIdxStart], uriTemplateVariables)) {"
"AntPathMatcher.java:235"$0$0$0$2$17$"				return false;"
"AntPathMatcher.java:236"$0$0$0$1$4$"			}"
"AntPathMatcher.java:237"$0$0$0$1$18$"			pattIdxStart++;"
"AntPathMatcher.java:238"$0$0$0$1$18$"			pathIdxStart++;"
"AntPathMatcher.java:239"$0$0$0$1$3$"		}"
"AntPathMatcher.java:240"$0$0$0$0$0$""
"AntPathMatcher.java:241"$0$0$0$5$34$"		if (pathIdxStart > pathIdxEnd) {"
"AntPathMatcher.java:242"$0$0$1$14$67$"			// Path is exhausted, only match if rest of pattern is * or **'s"
"AntPathMatcher.java:243"$0$0$0$5$35$"			if (pattIdxStart > pattIdxEnd) {"
"AntPathMatcher.java:244"$0$0$0$4$87$"				return (pattern.endsWith(this.pathSeparator) == path.endsWith(this.pathSeparator));"
"AntPathMatcher.java:245"$0$0$0$1$4$"			}"
"AntPathMatcher.java:246"$0$0$0$3$20$"			if (!fullMatch) {"
"AntPathMatcher.java:247"$0$0$0$2$16$"				return true;"
"AntPathMatcher.java:248"$0$0$0$1$4$"			}"
"AntPathMatcher.java:249"$0$0$0$9$111$"			if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(""*"") && path.endsWith(this.pathSeparator)) {"
"AntPathMatcher.java:250"$0$0$0$2$16$"				return true;"
"AntPathMatcher.java:251"$0$0$0$1$4$"			}"
"AntPathMatcher.java:252"$0$0$0$10$53$"			for (int i = pattIdxStart; i <= pattIdxEnd; i++) {"
"AntPathMatcher.java:253"$0$0$0$3$36$"				if (!pattDirs[i].equals(""**"")) {"
"AntPathMatcher.java:254"$0$0$0$2$18$"					return false;"
"AntPathMatcher.java:255"$0$0$0$1$5$"				}"
"AntPathMatcher.java:256"$0$0$0$1$4$"			}"
"AntPathMatcher.java:257"$0$0$0$2$15$"			return true;"
"AntPathMatcher.java:258"$0$0$0$1$3$"		}"
"AntPathMatcher.java:259"$0$0$0$6$39$"		else if (pattIdxStart > pattIdxEnd) {"
"AntPathMatcher.java:260"$0$0$1$8$52$"			// String not exhausted, but pattern is. Failure."
"AntPathMatcher.java:261"$0$0$0$2$16$"			return false;"
"AntPathMatcher.java:262"$0$0$0$1$3$"		}"
"AntPathMatcher.java:263"$0$0$0$6$63$"		else if (!fullMatch && ""**"".equals(pattDirs[pattIdxStart])) {"
"AntPathMatcher.java:264"$0$0$1$11$64$"			// Path start definitely matches due to ""**"" part in pattern."
"AntPathMatcher.java:265"$0$0$0$2$15$"			return true;"
"AntPathMatcher.java:266"$0$0$0$1$3$"		}"
"AntPathMatcher.java:267"$0$0$0$0$0$""
"AntPathMatcher.java:268"$0$0$1$5$20$"		// up to last '**'"
"AntPathMatcher.java:269"$0$0$0$9$68$"		while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {"
"AntPathMatcher.java:270"$0$0$0$4$41$"			String pattDir = pattDirs[pattIdxEnd];"
"AntPathMatcher.java:271"$0$0$0$3$30$"			if (pattDir.equals(""**"")) {"
"AntPathMatcher.java:272"$0$0$0$1$10$"				break;"
"AntPathMatcher.java:273"$0$0$0$1$4$"			}"
"AntPathMatcher.java:274"$0$0$0$5$76$"			if (!matchStrings(pattDir, pathDirs[pathIdxEnd], uriTemplateVariables)) {"
"AntPathMatcher.java:275"$0$0$0$2$17$"				return false;"
"AntPathMatcher.java:276"$0$0$0$1$4$"			}"
"AntPathMatcher.java:277"$0$0$0$1$16$"			pattIdxEnd--;"
"AntPathMatcher.java:278"$0$0$0$1$16$"			pathIdxEnd--;"
"AntPathMatcher.java:279"$0$0$0$1$3$"		}"
"AntPathMatcher.java:280"$0$0$0$5$34$"		if (pathIdxStart > pathIdxEnd) {"
"AntPathMatcher.java:281"$0$0$1$4$25$"			// String is exhausted"
"AntPathMatcher.java:282"$0$0$0$10$53$"			for (int i = pattIdxStart; i <= pattIdxEnd; i++) {"
"AntPathMatcher.java:283"$0$0$0$3$36$"				if (!pattDirs[i].equals(""**"")) {"
"AntPathMatcher.java:284"$0$0$0$2$18$"					return false;"
"AntPathMatcher.java:285"$0$0$0$1$5$"				}"
"AntPathMatcher.java:286"$0$0$0$1$4$"			}"
"AntPathMatcher.java:287"$0$0$0$2$15$"			return true;"
"AntPathMatcher.java:288"$0$0$0$1$3$"		}"
"AntPathMatcher.java:289"$0$0$0$0$0$""
"AntPathMatcher.java:290"$0$0$0$9$68$"		while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {"
"AntPathMatcher.java:291"$0$0$0$4$22$"			int patIdxTmp = -1;"
"AntPathMatcher.java:292"$0$0$0$12$57$"			for (int i = pattIdxStart + 1; i <= pattIdxEnd; i++) {"
"AntPathMatcher.java:293"$0$0$0$3$35$"				if (pattDirs[i].equals(""**"")) {"
"AntPathMatcher.java:294"$0$0$0$3$19$"					patIdxTmp = i;"
"AntPathMatcher.java:295"$0$0$0$1$11$"					break;"
"AntPathMatcher.java:296"$0$0$0$1$5$"				}"
"AntPathMatcher.java:297"$0$0$0$1$4$"			}"
"AntPathMatcher.java:298"$0$0$0$7$39$"			if (patIdxTmp == pattIdxStart + 1) {"
"AntPathMatcher.java:299"$0$0$1$6$37$"				// '**/**' situation, so skip one"
"AntPathMatcher.java:300"$0$0$0$1$19$"				pattIdxStart++;"
"AntPathMatcher.java:301"$0$0$0$1$13$"				continue;"
"AntPathMatcher.java:302"$0$0$0$1$4$"			}"
"AntPathMatcher.java:303"$0$0$1$11$69$"			// Find the pattern between padIdxStart & padIdxTmp in str between"
"AntPathMatcher.java:304"$0$0$1$4$29$"			// strIdxStart & strIdxEnd"
"AntPathMatcher.java:305"$0$0$0$8$50$"			int patLength = (patIdxTmp - pattIdxStart - 1);"
"AntPathMatcher.java:306"$0$0$0$8$51$"			int strLength = (pathIdxEnd - pathIdxStart + 1);"
"AntPathMatcher.java:307"$0$0$0$4$21$"			int foundIdx = -1;"
"AntPathMatcher.java:308"$0$0$0$0$0$""
"AntPathMatcher.java:309"$0$0$0$1$11$"			strLoop:"
"AntPathMatcher.java:310"$0$0$0$12$53$"			for (int i = 0; i <= strLength - patLength; i++) {"
"AntPathMatcher.java:311"$0$0$0$10$41$"				for (int j = 0; j < patLength; j++) {"
"AntPathMatcher.java:312"$0$0$0$8$52$"					String subPat = pattDirs[pattIdxStart + j + 1];"
"AntPathMatcher.java:313"$0$0$0$8$52$"					String subStr = pathDirs[pathIdxStart + i + j];"
"AntPathMatcher.java:314"$0$0$0$5$63$"					if (!matchStrings(subPat, subStr, uriTemplateVariables)) {"
"AntPathMatcher.java:315"$0$0$0$2$23$"						continue strLoop;"
"AntPathMatcher.java:316"$0$0$0$1$6$"					}"
"AntPathMatcher.java:317"$0$0$0$1$5$"				}"
"AntPathMatcher.java:318"$0$0$0$5$32$"				foundIdx = pathIdxStart + i;"
"AntPathMatcher.java:319"$0$0$0$1$10$"				break;"
"AntPathMatcher.java:320"$0$0$0$1$4$"			}"
"AntPathMatcher.java:321"$0$0$0$0$0$""
"AntPathMatcher.java:322"$0$0$0$5$24$"			if (foundIdx == -1) {"
"AntPathMatcher.java:323"$0$0$0$2$17$"				return false;"
"AntPathMatcher.java:324"$0$0$0$1$4$"			}"
"AntPathMatcher.java:325"$0$0$0$0$0$""
"AntPathMatcher.java:326"$0$0$0$3$28$"			pattIdxStart = patIdxTmp;"
"AntPathMatcher.java:327"$0$0$0$5$39$"			pathIdxStart = foundIdx + patLength;"
"AntPathMatcher.java:328"$0$0$0$1$3$"		}"
"AntPathMatcher.java:329"$0$0$0$0$0$""
"AntPathMatcher.java:330"$0$0$0$10$52$"		for (int i = pattIdxStart; i <= pattIdxEnd; i++) {"
"AntPathMatcher.java:331"$0$0$0$3$35$"			if (!pattDirs[i].equals(""**"")) {"
"AntPathMatcher.java:332"$0$0$0$2$17$"				return false;"
"AntPathMatcher.java:333"$0$0$0$1$4$"			}"
"AntPathMatcher.java:334"$0$0$0$1$3$"		}"
"AntPathMatcher.java:335"$0$0$0$0$0$""
"AntPathMatcher.java:336"$0$0$0$2$14$"		return true;"
"AntPathMatcher.java:337"$0$0$0$1$2$"	}"
"AntPathMatcher.java:338"$0$0$0$0$0$""
"AntPathMatcher.java:339"$0$0$0$7$67$"	private boolean isPotentialMatch(String path, String[] pattDirs) {"
"AntPathMatcher.java:340"$0$0$0$3$25$"		if (!this.trimTokens) {"
"AntPathMatcher.java:341"$0$0$0$4$15$"			int pos = 0;"
"AntPathMatcher.java:342"$0$0$0$6$36$"			for (String pattDir : pattDirs) {"
"AntPathMatcher.java:343"$0$0$0$6$63$"				int skipped = skipSeparator(path, pos, this.pathSeparator);"
"AntPathMatcher.java:344"$0$0$0$3$19$"				pos += skipped;"
"AntPathMatcher.java:345"$0$0$0$5$46$"				skipped = skipSegment(path, pos, pattDir);"
"AntPathMatcher.java:346"$0$0$0$5$37$"				if (skipped < pattDir.length()) {"
"AntPathMatcher.java:347"$0$0$0$10$89$"					return (skipped > 0 || (pattDir.length() > 0 && isWildcardChar(pattDir.charAt(0))));"
"AntPathMatcher.java:348"$0$0$0$1$5$"				}"
"AntPathMatcher.java:349"$0$0$0$3$19$"				pos += skipped;"
"AntPathMatcher.java:350"$0$0$0$1$4$"			}"
"AntPathMatcher.java:351"$0$0$0$1$3$"		}"
"AntPathMatcher.java:352"$0$0$0$2$14$"		return true;"
"AntPathMatcher.java:353"$0$0$0$1$2$"	}"
"AntPathMatcher.java:354"$0$0$0$0$0$""
"AntPathMatcher.java:355"$0$0$0$9$63$"	private int skipSegment(String path, int pos, String prefix) {"
"AntPathMatcher.java:356"$0$0$0$4$18$"		int skipped = 0;"
"AntPathMatcher.java:357"$0$0$0$10$45$"		for (int i = 0; i < prefix.length(); i++) {"
"AntPathMatcher.java:358"$0$0$0$4$29$"			char c = prefix.charAt(i);"
"AntPathMatcher.java:359"$0$0$0$3$27$"			if (isWildcardChar(c)) {"
"AntPathMatcher.java:360"$0$0$0$2$19$"				return skipped;"
"AntPathMatcher.java:361"$0$0$0$1$4$"			}"
"AntPathMatcher.java:362"$0$0$0$6$31$"			int currPos = pos + skipped;"
"AntPathMatcher.java:363"$0$0$0$5$34$"			if (currPos >= path.length()) {"
"AntPathMatcher.java:364"$0$0$0$2$13$"				return 0;"
"AntPathMatcher.java:365"$0$0$0$1$4$"			}"
"AntPathMatcher.java:366"$0$0$0$5$35$"			if (c == path.charAt(currPos)) {"
"AntPathMatcher.java:367"$0$0$0$1$14$"				skipped++;"
"AntPathMatcher.java:368"$0$0$0$1$4$"			}"
"AntPathMatcher.java:369"$0$0$0$1$3$"		}"
"AntPathMatcher.java:370"$0$0$0$2$17$"		return skipped;"
"AntPathMatcher.java:371"$0$0$0$1$2$"	}"
"AntPathMatcher.java:372"$0$0$0$0$0$""
"AntPathMatcher.java:373"$0$0$0$9$68$"	private int skipSeparator(String path, int pos, String separator) {"
"AntPathMatcher.java:374"$0$0$0$4$18$"		int skipped = 0;"
"AntPathMatcher.java:375"$0$0$0$6$53$"		while (path.startsWith(separator, pos + skipped)) {"
"AntPathMatcher.java:376"$0$0$0$3$33$"			skipped += separator.length();"
"AntPathMatcher.java:377"$0$0$0$1$3$"		}"
"AntPathMatcher.java:378"$0$0$0$2$17$"		return skipped;"
"AntPathMatcher.java:379"$0$0$0$1$2$"	}"
"AntPathMatcher.java:380"$0$0$0$0$0$""
"AntPathMatcher.java:381"$0$0$0$5$41$"	private boolean isWildcardChar(char c) {"
"AntPathMatcher.java:382"$0$0$0$6$41$"		for (char candidate : WILDCARD_CHARS) {"
"AntPathMatcher.java:383"$0$0$0$5$24$"			if (c == candidate) {"
"AntPathMatcher.java:384"$0$0$0$2$16$"				return true;"
"AntPathMatcher.java:385"$0$0$0$1$4$"			}"
"AntPathMatcher.java:386"$0$0$0$1$3$"		}"
"AntPathMatcher.java:387"$0$0$0$2$15$"		return false;"
"AntPathMatcher.java:388"$0$0$0$1$2$"	}"
"AntPathMatcher.java:389"$0$0$0$0$0$""
"AntPathMatcher.java:390"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:391"$0$0$0$13$81$"	 * Tokenize the given path pattern into parts, based on this matcher's settings."
"AntPathMatcher.java:392"$0$0$0$9$73$"	 * <p>Performs caching based on {@link #setCachePatterns}, delegating to"
"AntPathMatcher.java:393"$0$0$0$8$72$"	 * {@link #tokenizePath(String)} for the actual tokenization algorithm."
"AntPathMatcher.java:394"$0$0$0$7$42$"	 * @param pattern the pattern to tokenize"
"AntPathMatcher.java:395"$0$0$0$6$39$"	 * @return the tokenized pattern parts"
"AntPathMatcher.java:396"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:397"$0$0$0$5$53$"	protected String[] tokenizePattern(String pattern) {"
"AntPathMatcher.java:398"$0$0$0$4$28$"		String[] tokenized = null;"
"AntPathMatcher.java:399"$0$0$0$4$45$"		Boolean cachePatterns = this.cachePatterns;"
"AntPathMatcher.java:400"$0$0$0$7$62$"		if (cachePatterns == null || cachePatterns.booleanValue()) {"
"AntPathMatcher.java:401"$1$0$0$3$55$"			tokenized = this.tokenizedPatternCache.get(pattern);"
"AntPathMatcher.java:402"$0$0$0$1$3$"		}"
"AntPathMatcher.java:403"$0$0$0$5$26$"		if (tokenized == null) {"
"AntPathMatcher.java:404"$0$0$0$3$37$"			tokenized = tokenizePath(pattern);"
"AntPathMatcher.java:405"$0$0$0$9$95$"			if (cachePatterns == null && this.tokenizedPatternCache.size() >= CACHE_TURNOFF_THRESHOLD) {"
"AntPathMatcher.java:406"$0$0$1$11$69$"				// Try to adapt to the runtime situation that we're encountering:"
"AntPathMatcher.java:407"$0$0$1$11$72$"				// There are obviously too many different patterns coming in here..."
"AntPathMatcher.java:408"$0$0$1$15$85$"				// So let's turn off the cache since the patterns are unlikely to be reoccurring."
"AntPathMatcher.java:409"$0$0$0$1$29$"				deactivatePatternCache();"
"AntPathMatcher.java:410"$0$0$0$2$21$"				return tokenized;"
"AntPathMatcher.java:411"$0$0$0$1$4$"			}"
"AntPathMatcher.java:412"$0$0$0$7$63$"			if (cachePatterns == null || cachePatterns.booleanValue()) {"
"AntPathMatcher.java:413"$0$0$0$2$55$"				this.tokenizedPatternCache.put(pattern, tokenized);"
"AntPathMatcher.java:414"$0$0$0$1$4$"			}"
"AntPathMatcher.java:415"$0$0$0$1$3$"		}"
"AntPathMatcher.java:416"$0$0$0$2$19$"		return tokenized;"
"AntPathMatcher.java:417"$0$0$0$1$2$"	}"
"AntPathMatcher.java:418"$0$0$0$0$0$""
"AntPathMatcher.java:419"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:420"$0$0$0$12$73$"	 * Tokenize the given path into parts, based on this matcher's settings."
"AntPathMatcher.java:421"$0$0$0$7$36$"	 * @param path the path to tokenize"
"AntPathMatcher.java:422"$0$0$0$6$36$"	 * @return the tokenized path parts"
"AntPathMatcher.java:423"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:424"$0$0$0$5$47$"	protected String[] tokenizePath(String path) {"
"AntPathMatcher.java:425"$0$0$0$5$92$"		return StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);"
"AntPathMatcher.java:426"$0$0$0$1$2$"	}"
"AntPathMatcher.java:427"$0$0$0$0$0$""
"AntPathMatcher.java:428"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:429"$0$0$0$11$59$"	 * Test whether or not a string matches against a pattern."
"AntPathMatcher.java:430"$0$0$0$11$68$"	 * @param pattern the pattern to match against (never {@code null})"
"AntPathMatcher.java:431"$0$0$0$15$88$"	 * @param str the String which must be matched against the pattern (never {@code null})"
"AntPathMatcher.java:432"$0$0$0$15$94$"	 * @return {@code true} if the string matches against the pattern, or {@code false} otherwise"
"AntPathMatcher.java:433"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:434"$0$0$0$6$57$"	private boolean matchStrings(String pattern, String str,"
"AntPathMatcher.java:435"$0$0$0$5$56$"			@Nullable Map<String, String> uriTemplateVariables) {"
"AntPathMatcher.java:436"$0$0$0$0$0$""
"AntPathMatcher.java:437"$1$0$0$3$75$"		return getStringMatcher(pattern).matchStrings(str, uriTemplateVariables);"
"AntPathMatcher.java:438"$0$0$0$1$2$"	}"
"AntPathMatcher.java:439"$0$0$0$0$0$""
"AntPathMatcher.java:440"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:441"$0$0$0$11$76$"	 * Build or retrieve an {@link AntPathStringMatcher} for the given pattern."
"AntPathMatcher.java:442"$0$0$0$9$77$"	 * <p>The default implementation checks this AntPathMatcher's internal cache"
"AntPathMatcher.java:443"$0$0$0$9$81$"	 * (see {@link #setCachePatterns}), creating a new AntPathStringMatcher instance"
"AntPathMatcher.java:444"$0$0$0$7$31$"	 * if no cached copy is found."
"AntPathMatcher.java:445"$0$0$0$14$88$"	 * <p>When encountering too many patterns to cache at runtime (the threshold is 65536),"
"AntPathMatcher.java:446"$0$0$0$13$84$"	 * it turns the default cache off, assuming that arbitrary permutations of patterns"
"AntPathMatcher.java:447"$0$0$0$12$75$"	 * are coming in, with little chance for encountering a recurring pattern."
"AntPathMatcher.java:448"$0$0$0$12$74$"	 * <p>This method may be overridden to implement a custom cache strategy."
"AntPathMatcher.java:449"$0$0$0$11$68$"	 * @param pattern the pattern to match against (never {@code null})"
"AntPathMatcher.java:450"$0$0$0$8$69$"	 * @return a corresponding AntPathStringMatcher (never {@code null})"
"AntPathMatcher.java:451"$0$0$0$3$26$"	 * @see #setCachePatterns"
"AntPathMatcher.java:452"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:453"$1$0$0$5$66$"	protected AntPathStringMatcher getStringMatcher(String pattern) {"
"AntPathMatcher.java:454"$0$0$0$4$38$"		AntPathStringMatcher matcher = null;"
"AntPathMatcher.java:455"$0$0$0$4$45$"		Boolean cachePatterns = this.cachePatterns;"
"AntPathMatcher.java:456"$0$0$0$7$62$"		if (cachePatterns == null || cachePatterns.booleanValue()) {"
"AntPathMatcher.java:457"$1$0$0$3$50$"			matcher = this.stringMatcherCache.get(pattern);"
"AntPathMatcher.java:458"$0$0$0$1$3$"		}"
"AntPathMatcher.java:459"$0$0$0$5$24$"		if (matcher == null) {"
"AntPathMatcher.java:460"$0$0$0$5$67$"			matcher = new AntPathStringMatcher(pattern, this.caseSensitive);"
"AntPathMatcher.java:461"$0$0$0$9$92$"			if (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {"
"AntPathMatcher.java:462"$0$0$1$11$69$"				// Try to adapt to the runtime situation that we're encountering:"
"AntPathMatcher.java:463"$0$0$1$11$72$"				// There are obviously too many different patterns coming in here..."
"AntPathMatcher.java:464"$0$0$1$15$85$"				// So let's turn off the cache since the patterns are unlikely to be reoccurring."
"AntPathMatcher.java:465"$0$0$0$1$29$"				deactivatePatternCache();"
"AntPathMatcher.java:466"$0$0$0$2$19$"				return matcher;"
"AntPathMatcher.java:467"$0$0$0$1$4$"			}"
"AntPathMatcher.java:468"$0$0$0$7$63$"			if (cachePatterns == null || cachePatterns.booleanValue()) {"
"AntPathMatcher.java:469"$0$0$0$2$50$"				this.stringMatcherCache.put(pattern, matcher);"
"AntPathMatcher.java:470"$0$0$0$1$4$"			}"
"AntPathMatcher.java:471"$0$0$0$1$3$"		}"
"AntPathMatcher.java:472"$0$0$0$2$17$"		return matcher;"
"AntPathMatcher.java:473"$0$0$0$1$2$"	}"
"AntPathMatcher.java:474"$0$0$0$0$0$""
"AntPathMatcher.java:475"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:476"$0$0$0$15$92$"	 * Given a pattern and a full path, determine the pattern-mapped part. <p>For example: <ul>"
"AntPathMatcher.java:477"$0$0$0$8$85$"	 * <li>'{@code /docs/cvs/commit.html}' and '{@code /docs/cvs/commit.html} -> ''</li>"
"AntPathMatcher.java:478"$0$0$0$9$84$"	 * <li>'{@code /docs/*}' and '{@code /docs/cvs/commit} -> '{@code cvs/commit}'</li>"
"AntPathMatcher.java:479"$0$0$0$9$99$"	 * <li>'{@code /docs/cvs/*.html}' and '{@code /docs/cvs/commit.html} -> '{@code commit.html}'</li>"
"AntPathMatcher.java:480"$0$0$0$9$85$"	 * <li>'{@code /docs/**}' and '{@code /docs/cvs/commit} -> '{@code cvs/commit}'</li>"
"AntPathMatcher.java:481"$0$0$0$9$103$"	 * <li>'{@code /docs/**\/*.html}' and '{@code /docs/cvs/commit.html} -> '{@code cvs/commit.html}'</li>"
"AntPathMatcher.java:482"$0$0$0$9$99$"	 * <li>'{@code /*.html}' and '{@code /docs/cvs/commit.html} -> '{@code docs/cvs/commit.html}'</li>"
"AntPathMatcher.java:483"$0$0$0$9$99$"	 * <li>'{@code *.html}' and '{@code /docs/cvs/commit.html} -> '{@code /docs/cvs/commit.html}'</li>"
"AntPathMatcher.java:484"$0$0$0$10$100$"	 * <li>'{@code *}' and '{@code /docs/cvs/commit.html} -> '{@code /docs/cvs/commit.html}'</li> </ul>"
"AntPathMatcher.java:485"$0$0$0$15$101$"	 * <p>Assumes that {@link #match} returns {@code true} for '{@code pattern}' and '{@code path}', but"
"AntPathMatcher.java:486"$0$0$0$5$43$"	 * does <strong>not</strong> enforce this."
"AntPathMatcher.java:487"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:488"$0$0$0$1$10$"	@Override"
"AntPathMatcher.java:489"$0$0$0$7$70$"	public String extractPathWithinPattern(String pattern, String path) {"
"AntPathMatcher.java:490"$0$0$0$7$112$"		String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);"
"AntPathMatcher.java:491"$0$0$0$7$106$"		String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);"
"AntPathMatcher.java:492"$0$0$0$5$46$"		StringBuilder builder = new StringBuilder();"
"AntPathMatcher.java:493"$0$0$0$4$30$"		boolean pathStarted = false;"
"AntPathMatcher.java:494"$0$0$0$0$0$""
"AntPathMatcher.java:495"$0$0$0$10$67$"		for (int segment = 0; segment < patternParts.length; segment++) {"
"AntPathMatcher.java:496"$0$0$0$4$46$"			String patternPart = patternParts[segment];"
"AntPathMatcher.java:497"$0$0$0$9$72$"			if (patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) {"
"AntPathMatcher.java:498"$0$0$0$7$51$"				for (; segment < pathParts.length; segment++) {"
"AntPathMatcher.java:499"$0$0$0$9$84$"					if (pathStarted || (segment == 0 && !pattern.startsWith(this.pathSeparator))) {"
"AntPathMatcher.java:500"$0$0$0$1$41$"						builder.append(this.pathSeparator);"
"AntPathMatcher.java:501"$0$0$0$1$6$"					}"
"AntPathMatcher.java:502"$0$0$0$1$40$"					builder.append(pathParts[segment]);"
"AntPathMatcher.java:503"$0$0$0$3$24$"					pathStarted = true;"
"AntPathMatcher.java:504"$0$0$0$1$5$"				}"
"AntPathMatcher.java:505"$0$0$0$1$4$"			}"
"AntPathMatcher.java:506"$0$0$0$1$3$"		}"
"AntPathMatcher.java:507"$0$0$0$0$0$""
"AntPathMatcher.java:508"$0$0$0$2$28$"		return builder.toString();"
"AntPathMatcher.java:509"$0$0$0$1$2$"	}"
"AntPathMatcher.java:510"$0$0$0$0$0$""
"AntPathMatcher.java:511"$0$0$0$1$10$"	@Override"
"AntPathMatcher.java:512"$0$0$0$8$86$"	public Map<String, String> extractUriTemplateVariables(String pattern, String path) {"
"AntPathMatcher.java:513"$0$0$0$6$56$"		Map<String, String> variables = new LinkedHashMap<>();"
"AntPathMatcher.java:514"$0$0$0$7$59$"		boolean result = doMatch(pattern, path, true, variables);"
"AntPathMatcher.java:515"$0$0$0$3$16$"		if (!result) {"
"AntPathMatcher.java:516"$0$0$0$18$102$"			throw new IllegalStateException(""Pattern \"""" + pattern + ""\"" is not a match for \"""" + path + ""\"""");"
"AntPathMatcher.java:517"$0$0$0$1$3$"		}"
"AntPathMatcher.java:518"$0$0$0$2$19$"		return variables;"
"AntPathMatcher.java:519"$0$0$0$1$2$"	}"
"AntPathMatcher.java:520"$0$0$0$0$0$""
"AntPathMatcher.java:521"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:522"$0$0$0$8$44$"	 * Combine two patterns into a new pattern."
"AntPathMatcher.java:523"$0$0$0$9$71$"	 * <p>This implementation simply concatenates the two patterns, unless"
"AntPathMatcher.java:524"$0$0$0$12$77$"	 * the first pattern contains a file extension match (e.g., {@code *.html})."
"AntPathMatcher.java:525"$0$0$0$14$78$"	 * In that case, the second pattern will be merged into the first. Otherwise,"
"AntPathMatcher.java:526"$0$0$0$7$55$"	 * an {@code IllegalArgumentException} will be thrown."
"AntPathMatcher.java:527"$0$0$0$2$21$"	 * <h3>Examples</h3>"
"AntPathMatcher.java:528"$0$0$0$3$22$"	 * <table border=""1"">"
"AntPathMatcher.java:529"$0$0$0$4$64$"	 * <tr><th>Pattern 1</th><th>Pattern 2</th><th>Result</th></tr>"
"AntPathMatcher.java:530"$0$0$0$4$70$"	 * <tr><td>{@code null}</td><td>{@code null}</td><td>&nbsp;</td></tr>"
"AntPathMatcher.java:531"$0$0$0$3$66$"	 * <tr><td>/hotels</td><td>{@code null}</td><td>/hotels</td></tr>"
"AntPathMatcher.java:532"$0$0$0$3$66$"	 * <tr><td>{@code null}</td><td>/hotels</td><td>/hotels</td></tr>"
"AntPathMatcher.java:533"$0$0$0$2$72$"	 * <tr><td>/hotels</td><td>/bookings</td><td>/hotels/bookings</td></tr>"
"AntPathMatcher.java:534"$0$0$0$2$71$"	 * <tr><td>/hotels</td><td>bookings</td><td>/hotels/bookings</td></tr>"
"AntPathMatcher.java:535"$0$0$0$2$74$"	 * <tr><td>/hotels/*</td><td>/bookings</td><td>/hotels/bookings</td></tr>"
"AntPathMatcher.java:536"$0$0$0$2$94$"	 * <tr><td>/hotels/&#42;&#42;</td><td>/bookings</td><td>/hotels/&#42;&#42;/bookings</td></tr>"
"AntPathMatcher.java:537"$0$0$0$2$69$"	 * <tr><td>/hotels</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr>"
"AntPathMatcher.java:538"$0$0$0$2$71$"	 * <tr><td>/hotels/*</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr>"
"AntPathMatcher.java:539"$0$0$0$2$91$"	 * <tr><td>/hotels/&#42;&#42;</td><td>{hotel}</td><td>/hotels/&#42;&#42;/{hotel}</td></tr>"
"AntPathMatcher.java:540"$0$0$0$2$71$"	 * <tr><td>/*.html</td><td>/hotels.html</td><td>/hotels.html</td></tr>"
"AntPathMatcher.java:541"$0$0$0$2$66$"	 * <tr><td>/*.html</td><td>/hotels</td><td>/hotels.html</td></tr>"
"AntPathMatcher.java:542"$0$0$0$3$85$"	 * <tr><td>/*.html</td><td>/*.txt</td><td>{@code IllegalArgumentException}</td></tr>"
"AntPathMatcher.java:543"$0$0$0$2$12$"	 * </table>"
"AntPathMatcher.java:544"$0$0$0$6$37$"	 * @param pattern1 the first pattern"
"AntPathMatcher.java:545"$0$0$0$6$38$"	 * @param pattern2 the second pattern"
"AntPathMatcher.java:546"$0$0$0$8$47$"	 * @return the combination of the two patterns"
"AntPathMatcher.java:547"$0$0$0$10$75$"	 * @throws IllegalArgumentException if the two patterns cannot be combined"
"AntPathMatcher.java:548"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:549"$0$0$0$1$10$"	@Override"
"AntPathMatcher.java:550"$0$0$0$7$58$"	public String combine(String pattern1, String pattern2) {"
"AntPathMatcher.java:551"$0$0$0$5$73$"		if (!StringUtils.hasText(pattern1) && !StringUtils.hasText(pattern2)) {"
"AntPathMatcher.java:552"$0$0$0$2$13$"			return """";"
"AntPathMatcher.java:553"$0$0$0$1$3$"		}"
"AntPathMatcher.java:554"$0$0$0$3$39$"		if (!StringUtils.hasText(pattern1)) {"
"AntPathMatcher.java:555"$0$0$0$2$19$"			return pattern2;"
"AntPathMatcher.java:556"$0$0$0$1$3$"		}"
"AntPathMatcher.java:557"$0$0$0$3$39$"		if (!StringUtils.hasText(pattern2)) {"
"AntPathMatcher.java:558"$0$0$0$2$19$"			return pattern1;"
"AntPathMatcher.java:559"$0$0$0$1$3$"		}"
"AntPathMatcher.java:560"$0$0$0$0$0$""
"AntPathMatcher.java:561"$0$0$0$6$65$"		boolean pattern1ContainsUriVar = (pattern1.indexOf('{') != -1);"
"AntPathMatcher.java:562"$0$0$0$8$91$"		if (!pattern1.equals(pattern2) && !pattern1ContainsUriVar && match(pattern1, pattern2)) {"
"AntPathMatcher.java:563"$0$0$1$12$59$"			// /* + /hotel -> /hotel ; ""/*.*"" + ""/*.html"" -> /*.html"
"AntPathMatcher.java:564"$0$0$1$13$70$"			// However /user + /user -> /usr/user ; /{foo} + /bar -> /{foo}/bar"
"AntPathMatcher.java:565"$0$0$0$2$19$"			return pattern2;"
"AntPathMatcher.java:566"$0$0$0$1$3$"		}"
"AntPathMatcher.java:567"$0$0$0$0$0$""
"AntPathMatcher.java:568"$0$0$1$6$44$"		// /hotels/* + /booking -> /hotels/booking"
"AntPathMatcher.java:569"$0$0$1$6$43$"		// /hotels/* + booking -> /hotels/booking"
"AntPathMatcher.java:570"$1$0$0$3$78$"		if (pattern1.endsWith(this.pathSeparatorPatternCache.getEndsOnWildCard())) {"
"AntPathMatcher.java:571"$0$0$0$6$73$"			return concat(pattern1.substring(0, pattern1.length() - 2), pattern2);"
"AntPathMatcher.java:572"$0$0$0$1$3$"		}"
"AntPathMatcher.java:573"$0$0$0$0$0$""
"AntPathMatcher.java:574"$0$0$1$6$48$"		// /hotels/** + /booking -> /hotels/**/booking"
"AntPathMatcher.java:575"$0$0$1$6$47$"		// /hotels/** + booking -> /hotels/**/booking"
"AntPathMatcher.java:576"$1$0$0$3$84$"		if (pattern1.endsWith(this.pathSeparatorPatternCache.getEndsOnDoubleWildCard())) {"
"AntPathMatcher.java:577"$0$0$0$3$37$"			return concat(pattern1, pattern2);"
"AntPathMatcher.java:578"$0$0$0$1$3$"		}"
"AntPathMatcher.java:579"$0$0$0$0$0$""
"AntPathMatcher.java:580"$0$0$0$4$43$"		int starDotPos1 = pattern1.indexOf(""*."");"
"AntPathMatcher.java:581"$0$0$0$9$86$"		if (pattern1ContainsUriVar || starDotPos1 == -1 || this.pathSeparator.equals(""."")) {"
"AntPathMatcher.java:582"$0$0$1$6$41$"			// simply concatenate the two patterns"
"AntPathMatcher.java:583"$0$0$0$3$37$"			return concat(pattern1, pattern2);"
"AntPathMatcher.java:584"$0$0$0$1$3$"		}"
"AntPathMatcher.java:585"$0$0$0$0$0$""
"AntPathMatcher.java:586"$0$0$0$6$52$"		String ext1 = pattern1.substring(starDotPos1 + 1);"
"AntPathMatcher.java:587"$0$0$0$4$38$"		int dotPos2 = pattern2.indexOf('.');"
"AntPathMatcher.java:588"$0$0$0$11$77$"		String file2 = (dotPos2 == -1 ? pattern2 : pattern2.substring(0, dotPos2));"
"AntPathMatcher.java:589"$0$0$0$10$67$"		String ext2 = (dotPos2 == -1 ? """" : pattern2.substring(dotPos2));"
"AntPathMatcher.java:590"$0$0$0$6$58$"		boolean ext1All = (ext1.equals("".*"") || ext1.isEmpty());"
"AntPathMatcher.java:591"$0$0$0$6$58$"		boolean ext2All = (ext2.equals("".*"") || ext2.isEmpty());"
"AntPathMatcher.java:592"$0$0$0$5$29$"		if (!ext1All && !ext2All) {"
"AntPathMatcher.java:593"$0$0$0$14$98$"			throw new IllegalArgumentException(""Cannot combine patterns: "" + pattern1 + "" vs "" + pattern2);"
"AntPathMatcher.java:594"$0$0$0$1$3$"		}"
"AntPathMatcher.java:595"$0$0$0$8$39$"		String ext = (ext1All ? ext2 : ext1);"
"AntPathMatcher.java:596"$0$0$0$4$21$"		return file2 + ext;"
"AntPathMatcher.java:597"$0$0$0$1$2$"	}"
"AntPathMatcher.java:598"$0$0$0$0$0$""
"AntPathMatcher.java:599"$0$0$0$7$52$"	private String concat(String path1, String path2) {"
"AntPathMatcher.java:600"$0$0$0$4$70$"		boolean path1EndsWithSeparator = path1.endsWith(this.pathSeparator);"
"AntPathMatcher.java:601"$0$0$0$4$74$"		boolean path2StartsWithSeparator = path2.startsWith(this.pathSeparator);"
"AntPathMatcher.java:602"$0$0$0$0$0$""
"AntPathMatcher.java:603"$0$0$0$5$59$"		if (path1EndsWithSeparator && path2StartsWithSeparator) {"
"AntPathMatcher.java:604"$0$0$0$4$37$"			return path1 + path2.substring(1);"
"AntPathMatcher.java:605"$0$0$0$1$3$"		}"
"AntPathMatcher.java:606"$0$0$0$6$64$"		else if (path1EndsWithSeparator || path2StartsWithSeparator) {"
"AntPathMatcher.java:607"$0$0$0$4$24$"			return path1 + path2;"
"AntPathMatcher.java:608"$0$0$0$1$3$"		}"
"AntPathMatcher.java:609"$0$0$0$2$8$"		else {"
"AntPathMatcher.java:610"$0$0$0$6$45$"			return path1 + this.pathSeparator + path2;"
"AntPathMatcher.java:611"$0$0$0$1$3$"		}"
"AntPathMatcher.java:612"$0$0$0$1$2$"	}"
"AntPathMatcher.java:613"$0$0$0$0$0$""
"AntPathMatcher.java:614"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:615"$0$0$0$16$93$"	 * Given a full path, returns a {@link Comparator} suitable for sorting patterns in order of"
"AntPathMatcher.java:616"$0$0$0$2$17$"	 * explicitness."
"AntPathMatcher.java:617"$0$0$0$8$85$"	 * <p>This {@code Comparator} will {@linkplain java.util.List#sort(Comparator) sort}"
"AntPathMatcher.java:618"$0$0$0$16$91$"	 * a list so that more specific patterns (without URI templates or wild cards) come before"
"AntPathMatcher.java:619"$0$0$0$14$90$"	 * generic patterns. So given a list with the following patterns, the returned comparator"
"AntPathMatcher.java:620"$0$0$0$13$63$"	 * will sort this list so that the order will be as indicated."
"AntPathMatcher.java:621"$0$0$0$2$8$"	 * <ol>"
"AntPathMatcher.java:622"$0$0$0$3$32$"	 * <li>{@code /hotels/new}</li>"
"AntPathMatcher.java:623"$0$0$0$3$36$"	 * <li>{@code /hotels/{hotel}}</li>"
"AntPathMatcher.java:624"$0$0$0$3$30$"	 * <li>{@code /hotels/*}</li>"
"AntPathMatcher.java:625"$0$0$0$2$9$"	 * </ol>"
"AntPathMatcher.java:626"$0$0$0$19$97$"	 * <p>The full path given as parameter is used to test for exact matches. So when the given path"
"AntPathMatcher.java:627"$0$0$0$14$96$"	 * is {@code /hotels/2}, the pattern {@code /hotels/2} will be sorted before {@code /hotels/1}."
"AntPathMatcher.java:628"$0$0$0$10$51$"	 * @param path the full path to use for comparison"
"AntPathMatcher.java:629"$0$0$0$12$77$"	 * @return a comparator capable of sorting patterns in order of explicitness"
"AntPathMatcher.java:630"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:631"$0$0$0$1$10$"	@Override"
"AntPathMatcher.java:632"$1$0$0$5$62$"	public Comparator<String> getPatternComparator(String path) {"
"AntPathMatcher.java:633"$0$0$0$3$40$"		return new AntPatternComparator(path);"
"AntPathMatcher.java:634"$0$0$0$1$2$"	}"
"AntPathMatcher.java:635"$0$0$0$0$0$""
"AntPathMatcher.java:636"$0$0$0$0$0$""
"AntPathMatcher.java:637"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:638"$0$0$0$15$82$"	 * Tests whether or not a string matches against a pattern via a {@link Pattern}."
"AntPathMatcher.java:639"$0$0$0$17$103$"	 * <p>The pattern may contain special characters: '*' means zero or more characters; '?' means one and"
"AntPathMatcher.java:640"$0$0$0$15$104$"	 * only one character; '{' and '}' indicate a URI template pattern. For example <tt>/users/{user}</tt>."
"AntPathMatcher.java:641"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:642"$0$0$0$5$46$"	protected static class AntPathStringMatcher {"
"AntPathMatcher.java:643"$0$0$0$0$0$""
"AntPathMatcher.java:644"$0$0$0$7$112$"		private static final Pattern GLOB_PATTERN = Pattern.compile(""\\?|\\*|\\{((?:\\{[^/]+?}|[^/{}]|\\\\[{}])+?)}"");"
"AntPathMatcher.java:645"$0$0$0$0$0$""
"AntPathMatcher.java:646"$0$0$0$7$64$"		private static final String DEFAULT_VARIABLE_PATTERN = ""(.*)"";"
"AntPathMatcher.java:647"$0$0$0$0$0$""
"AntPathMatcher.java:648"$0$0$0$4$32$"		private final Pattern pattern;"
"AntPathMatcher.java:649"$0$0$0$0$0$""
"AntPathMatcher.java:650"$0$0$0$7$64$"		private final List<String> variableNames = new LinkedList<>();"
"AntPathMatcher.java:651"$0$0$0$0$0$""
"AntPathMatcher.java:652"$0$0$0$4$47$"		public AntPathStringMatcher(String pattern) {"
"AntPathMatcher.java:653"$0$0$0$2$23$"			this(pattern, true);"
"AntPathMatcher.java:654"$0$0$0$1$3$"		}"
"AntPathMatcher.java:655"$0$0$0$0$0$""
"AntPathMatcher.java:656"$0$0$0$6$70$"		public AntPathStringMatcher(String pattern, boolean caseSensitive) {"
"AntPathMatcher.java:657"$0$0$0$5$54$"			StringBuilder patternBuilder = new StringBuilder();"
"AntPathMatcher.java:658"$0$0$0$4$51$"			Matcher matcher = GLOB_PATTERN.matcher(pattern);"
"AntPathMatcher.java:659"$0$0$0$4$15$"			int end = 0;"
"AntPathMatcher.java:660"$0$0$0$3$27$"			while (matcher.find()) {"
"AntPathMatcher.java:661"$0$0$0$3$64$"				patternBuilder.append(quote(pattern, end, matcher.start()));"
"AntPathMatcher.java:662"$0$0$0$4$35$"				String match = matcher.group();"
"AntPathMatcher.java:663"$0$0$0$3$28$"				if (""?"".equals(match)) {"
"AntPathMatcher.java:664"$0$0$0$1$32$"					patternBuilder.append('.');"
"AntPathMatcher.java:665"$0$0$0$1$5$"				}"
"AntPathMatcher.java:666"$0$0$0$4$33$"				else if (""*"".equals(match)) {"
"AntPathMatcher.java:667"$0$0$0$1$33$"					patternBuilder.append("".*"");"
"AntPathMatcher.java:668"$0$0$0$1$5$"				}"
"AntPathMatcher.java:669"$0$0$0$6$60$"				else if (match.startsWith(""{"") && match.endsWith(""}"")) {"
"AntPathMatcher.java:670"$0$0$0$4$39$"					int colonIdx = match.indexOf(':');"
"AntPathMatcher.java:671"$0$0$0$5$26$"					if (colonIdx == -1) {"
"AntPathMatcher.java:672"$0$0$0$1$54$"						patternBuilder.append(DEFAULT_VARIABLE_PATTERN);"
"AntPathMatcher.java:673"$0$0$0$1$47$"						this.variableNames.add(matcher.group(1));"
"AntPathMatcher.java:674"$0$0$0$1$6$"					}"
"AntPathMatcher.java:675"$0$0$0$2$11$"					else {"
"AntPathMatcher.java:676"$0$0$0$9$81$"						String variablePattern = match.substring(colonIdx + 1, match.length() - 1);"
"AntPathMatcher.java:677"$0$0$0$1$33$"						patternBuilder.append('(');"
"AntPathMatcher.java:678"$0$0$0$1$45$"						patternBuilder.append(variablePattern);"
"AntPathMatcher.java:679"$0$0$0$1$33$"						patternBuilder.append(')');"
"AntPathMatcher.java:680"$0$0$0$5$57$"						String variableName = match.substring(1, colonIdx);"
"AntPathMatcher.java:681"$0$0$0$1$43$"						this.variableNames.add(variableName);"
"AntPathMatcher.java:682"$0$0$0$1$6$"					}"
"AntPathMatcher.java:683"$0$0$0$1$5$"				}"
"AntPathMatcher.java:684"$0$0$0$3$24$"				end = matcher.end();"
"AntPathMatcher.java:685"$0$0$0$1$4$"			}"
"AntPathMatcher.java:686"$0$0$0$3$64$"			patternBuilder.append(quote(pattern, end, pattern.length()));"
"AntPathMatcher.java:687"$0$0$0$6$79$"			this.pattern = (caseSensitive ? Pattern.compile(patternBuilder.toString()) :"
"AntPathMatcher.java:688"$0$0$0$2$75$"					Pattern.compile(patternBuilder.toString(), Pattern.CASE_INSENSITIVE));"
"AntPathMatcher.java:689"$0$0$0$1$3$"		}"
"AntPathMatcher.java:690"$0$0$0$0$0$""
"AntPathMatcher.java:691"$0$0$0$9$54$"		private String quote(String s, int start, int end) {"
"AntPathMatcher.java:692"$0$0$0$5$22$"			if (start == end) {"
"AntPathMatcher.java:693"$0$0$0$2$14$"				return """";"
"AntPathMatcher.java:694"$0$0$0$1$4$"			}"
"AntPathMatcher.java:695"$0$0$0$3$49$"			return Pattern.quote(s.substring(start, end));"
"AntPathMatcher.java:696"$0$0$0$1$3$"		}"
"AntPathMatcher.java:697"$0$0$0$0$0$""
"AntPathMatcher.java:698"$0$0$0$1$5$"		/**"
"AntPathMatcher.java:699"$0$0$0$4$22$"		 * Main entry point."
"AntPathMatcher.java:700"$0$0$0$15$96$"		 * @return {@code true} if the string matches against the pattern, or {@code false} otherwise."
"AntPathMatcher.java:701"$0$0$0$1$5$"		 */"
"AntPathMatcher.java:702"$0$0$0$9$95$"		public boolean matchStrings(String str, @Nullable Map<String, String> uriTemplateVariables) {"
"AntPathMatcher.java:703"$0$0$0$4$47$"			Matcher matcher = this.pattern.matcher(str);"
"AntPathMatcher.java:704"$0$0$0$3$27$"			if (matcher.matches()) {"
"AntPathMatcher.java:705"$0$0$0$5$39$"				if (uriTemplateVariables != null) {"
"AntPathMatcher.java:706"$0$0$1$2$16$"					// SPR-8455"
"AntPathMatcher.java:707"$0$0$0$5$61$"					if (this.variableNames.size() != matcher.groupCount()) {"
"AntPathMatcher.java:708"$0$0$0$13$99$"						throw new IllegalArgumentException(""The number of capturing groups in the pattern segment "" +"
"AntPathMatcher.java:709"$0$0$0$16$92$"								this.pattern + "" does not match the number of URI template variables it defines, "" +"
"AntPathMatcher.java:710"$0$0$0$15$82$"								""which can occur if capturing groups are used in a URI template regex. "" +"
"AntPathMatcher.java:711"$0$0$0$4$45$"								""Use non-capturing groups instead."");"
"AntPathMatcher.java:712"$0$0$0$1$6$"					}"
"AntPathMatcher.java:713"$0$0$0$10$54$"					for (int i = 1; i <= matcher.groupCount(); i++) {"
"AntPathMatcher.java:714"$1$0$0$6$50$"						String name = this.variableNames.get(i - 1);"
"AntPathMatcher.java:715"$0$0$0$4$38$"						String value = matcher.group(i);"
"AntPathMatcher.java:716"$0$0$0$2$44$"						uriTemplateVariables.put(name, value);"
"AntPathMatcher.java:717"$0$0$0$1$6$"					}"
"AntPathMatcher.java:718"$0$0$0$1$5$"				}"
"AntPathMatcher.java:719"$0$0$0$2$16$"				return true;"
"AntPathMatcher.java:720"$0$0$0$1$4$"			}"
"AntPathMatcher.java:721"$0$0$0$2$9$"			else {"
"AntPathMatcher.java:722"$0$0$0$2$17$"				return false;"
"AntPathMatcher.java:723"$0$0$0$1$4$"			}"
"AntPathMatcher.java:724"$0$0$0$1$3$"		}"
"AntPathMatcher.java:725"$0$0$0$1$2$"	}"
"AntPathMatcher.java:726"$0$0$0$0$0$""
"AntPathMatcher.java:727"$0$0$0$0$0$""
"AntPathMatcher.java:728"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:729"$0$0$0$8$61$"	 * The default {@link Comparator} implementation returned by"
"AntPathMatcher.java:730"$1$0$0$3$42$"	 * {@link #getPatternComparator(String)}."
"AntPathMatcher.java:731"$0$0$0$12$75$"	 * <p>In order, the most ""generic"" pattern is determined by the following:"
"AntPathMatcher.java:732"$0$0$0$2$8$"	 * <ul>"
"AntPathMatcher.java:733"$0$0$0$15$78$"	 * <li>if it's null or a capture all pattern (i.e. it is equal to ""/**"")</li>"
"AntPathMatcher.java:734"$0$0$0$9$52$"	 * <li>if the other pattern is an actual match</li>"
"AntPathMatcher.java:735"$0$0$0$11$64$"	 * <li>if it's a catch-all pattern (i.e. it ends with ""**""</li>"
"AntPathMatcher.java:736"$0$0$0$10$56$"	 * <li>if it's got more ""*"" than the other pattern</li>"
"AntPathMatcher.java:737"$0$0$0$10$60$"	 * <li>if it's got more ""{foo}"" than the other pattern</li>"
"AntPathMatcher.java:738"$0$0$0$8$51$"	 * <li>if it's shorter than the other pattern</li>"
"AntPathMatcher.java:739"$0$0$0$2$9$"	 * </ul>"
"AntPathMatcher.java:740"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:741"$0$0$0$7$76$"	protected static class AntPatternComparator implements Comparator<String> {"
"AntPathMatcher.java:742"$0$0$0$0$0$""
"AntPathMatcher.java:743"$0$0$0$4$28$"		private final String path;"
"AntPathMatcher.java:744"$0$0$0$0$0$""
"AntPathMatcher.java:745"$0$0$0$4$44$"		public AntPatternComparator(String path) {"
"AntPathMatcher.java:746"$0$0$0$3$20$"			this.path = path;"
"AntPathMatcher.java:747"$0$0$0$1$3$"		}"
"AntPathMatcher.java:748"$0$0$0$0$0$""
"AntPathMatcher.java:749"$0$0$0$1$5$"		/**"
"AntPathMatcher.java:750"$0$0$0$12$75$"		 * Compare two patterns to determine which should match first, i.e. which"
"AntPathMatcher.java:751"$0$0$0$9$53$"		 * is the most specific regarding the current path."
"AntPathMatcher.java:752"$0$0$0$13$75$"		 * @return a negative integer, zero, or a positive integer as pattern1 is"
"AntPathMatcher.java:753"$0$0$0$10$69$"		 * more specific, equally specific, or less specific than pattern2."
"AntPathMatcher.java:754"$0$0$0$1$5$"		 */"
"AntPathMatcher.java:755"$0$0$0$1$11$"		@Override"
"AntPathMatcher.java:756"$0$0$0$7$56$"		public int compare(String pattern1, String pattern2) {"
"AntPathMatcher.java:757"$0$0$0$5$49$"			PatternInfo info1 = new PatternInfo(pattern1);"
"AntPathMatcher.java:758"$0$0$0$5$49$"			PatternInfo info2 = new PatternInfo(pattern2);"
"AntPathMatcher.java:759"$0$0$0$0$0$""
"AntPathMatcher.java:760"$0$0$0$5$60$"			if (info1.isLeastSpecific() && info2.isLeastSpecific()) {"
"AntPathMatcher.java:761"$0$0$0$2$13$"				return 0;"
"AntPathMatcher.java:762"$0$0$0$1$4$"			}"
"AntPathMatcher.java:763"$0$0$0$4$38$"			else if (info1.isLeastSpecific()) {"
"AntPathMatcher.java:764"$0$0$0$2$13$"				return 1;"
"AntPathMatcher.java:765"$0$0$0$1$4$"			}"
"AntPathMatcher.java:766"$0$0$0$4$38$"			else if (info2.isLeastSpecific()) {"
"AntPathMatcher.java:767"$0$0$0$2$14$"				return -1;"
"AntPathMatcher.java:768"$0$0$0$1$4$"			}"
"AntPathMatcher.java:769"$0$0$0$0$0$""
"AntPathMatcher.java:770"$0$0$0$4$59$"			boolean pattern1EqualsPath = pattern1.equals(this.path);"
"AntPathMatcher.java:771"$0$0$0$4$59$"			boolean pattern2EqualsPath = pattern2.equals(this.path);"
"AntPathMatcher.java:772"$0$0$0$5$50$"			if (pattern1EqualsPath && pattern2EqualsPath) {"
"AntPathMatcher.java:773"$0$0$0$2$13$"				return 0;"
"AntPathMatcher.java:774"$0$0$0$1$4$"			}"
"AntPathMatcher.java:775"$0$0$0$4$33$"			else if (pattern1EqualsPath) {"
"AntPathMatcher.java:776"$0$0$0$2$14$"				return -1;"
"AntPathMatcher.java:777"$0$0$0$1$4$"			}"
"AntPathMatcher.java:778"$0$0$0$4$33$"			else if (pattern2EqualsPath) {"
"AntPathMatcher.java:779"$0$0$0$2$13$"				return 1;"
"AntPathMatcher.java:780"$0$0$0$1$4$"			}"
"AntPathMatcher.java:781"$0$0$0$0$0$""
"AntPathMatcher.java:782"$0$0$0$5$60$"			if (info1.isPrefixPattern() && info2.isPrefixPattern()) {"
"AntPathMatcher.java:783"$2$0$0$4$49$"				return info2.getLength() - info1.getLength();"
"AntPathMatcher.java:784"$0$0$0$1$4$"			}"
"AntPathMatcher.java:785"$1$0$0$8$73$"			else if (info1.isPrefixPattern() && info2.getDoubleWildcards() == 0) {"
"AntPathMatcher.java:786"$0$0$0$2$13$"				return 1;"
"AntPathMatcher.java:787"$0$0$0$1$4$"			}"
"AntPathMatcher.java:788"$1$0$0$8$73$"			else if (info2.isPrefixPattern() && info1.getDoubleWildcards() == 0) {"
"AntPathMatcher.java:789"$0$0$0$2$14$"				return -1;"
"AntPathMatcher.java:790"$0$0$0$1$4$"			}"
"AntPathMatcher.java:791"$0$0$0$0$0$""
"AntPathMatcher.java:792"$2$0$0$5$56$"			if (info1.getTotalCount() != info2.getTotalCount()) {"
"AntPathMatcher.java:793"$2$0$0$4$57$"				return info1.getTotalCount() - info2.getTotalCount();"
"AntPathMatcher.java:794"$0$0$0$1$4$"			}"
"AntPathMatcher.java:795"$0$0$0$0$0$""
"AntPathMatcher.java:796"$2$0$0$5$48$"			if (info1.getLength() != info2.getLength()) {"
"AntPathMatcher.java:797"$2$0$0$4$49$"				return info2.getLength() - info1.getLength();"
"AntPathMatcher.java:798"$0$0$0$1$4$"			}"
"AntPathMatcher.java:799"$0$0$0$0$0$""
"AntPathMatcher.java:800"$2$0$0$5$65$"			if (info1.getSingleWildcards() < info2.getSingleWildcards()) {"
"AntPathMatcher.java:801"$0$0$0$2$14$"				return -1;"
"AntPathMatcher.java:802"$0$0$0$1$4$"			}"
"AntPathMatcher.java:803"$2$0$0$6$70$"			else if (info2.getSingleWildcards() < info1.getSingleWildcards()) {"
"AntPathMatcher.java:804"$0$0$0$2$13$"				return 1;"
"AntPathMatcher.java:805"$0$0$0$1$4$"			}"
"AntPathMatcher.java:806"$0$0$0$0$0$""
"AntPathMatcher.java:807"$2$0$0$5$49$"			if (info1.getUriVars() < info2.getUriVars()) {"
"AntPathMatcher.java:808"$0$0$0$2$14$"				return -1;"
"AntPathMatcher.java:809"$0$0$0$1$4$"			}"
"AntPathMatcher.java:810"$2$0$0$6$54$"			else if (info2.getUriVars() < info1.getUriVars()) {"
"AntPathMatcher.java:811"$0$0$0$2$13$"				return 1;"
"AntPathMatcher.java:812"$0$0$0$1$4$"			}"
"AntPathMatcher.java:813"$0$0$0$0$0$""
"AntPathMatcher.java:814"$0$0$0$2$12$"			return 0;"
"AntPathMatcher.java:815"$0$0$0$1$3$"		}"
"AntPathMatcher.java:816"$0$0$0$0$0$""
"AntPathMatcher.java:817"$0$0$0$0$0$""
"AntPathMatcher.java:818"$0$0$0$1$5$"		/**"
"AntPathMatcher.java:819"$0$0$0$12$73$"		 * Value class that holds information about the pattern, e.g. number of"
"AntPathMatcher.java:820"$0$0$0$9$56$"		 * occurrences of ""*"", ""**"", and ""{"" pattern elements."
"AntPathMatcher.java:821"$0$0$0$1$5$"		 */"
"AntPathMatcher.java:822"$0$0$0$5$36$"		private static class PatternInfo {"
"AntPathMatcher.java:823"$0$0$0$0$0$""
"AntPathMatcher.java:824"$0$0$0$1$12$"			@Nullable"
"AntPathMatcher.java:825"$0$0$0$4$32$"			private final String pattern;"
"AntPathMatcher.java:826"$0$0$0$0$0$""
"AntPathMatcher.java:827"$0$0$0$3$23$"			private int uriVars;"
"AntPathMatcher.java:828"$0$0$0$0$0$""
"AntPathMatcher.java:829"$0$0$0$3$31$"			private int singleWildcards;"
"AntPathMatcher.java:830"$0$0$0$0$0$""
"AntPathMatcher.java:831"$0$0$0$3$31$"			private int doubleWildcards;"
"AntPathMatcher.java:832"$0$0$0$0$0$""
"AntPathMatcher.java:833"$0$0$0$3$35$"			private boolean catchAllPattern;"
"AntPathMatcher.java:834"$0$0$0$0$0$""
"AntPathMatcher.java:835"$0$0$0$3$33$"			private boolean prefixPattern;"
"AntPathMatcher.java:836"$0$0$0$0$0$""
"AntPathMatcher.java:837"$0$0$0$1$12$"			@Nullable"
"AntPathMatcher.java:838"$0$0$0$3$26$"			private Integer length;"
"AntPathMatcher.java:839"$0$0$0$0$0$""
"AntPathMatcher.java:840"$0$0$0$5$49$"			public PatternInfo(@Nullable String pattern) {"
"AntPathMatcher.java:841"$0$0$0$3$27$"				this.pattern = pattern;"
"AntPathMatcher.java:842"$0$0$0$5$31$"				if (this.pattern != null) {"
"AntPathMatcher.java:843"$0$0$0$1$20$"					initCounters();"
"AntPathMatcher.java:844"$0$0$0$3$55$"					this.catchAllPattern = this.pattern.equals(""/**"");"
"AntPathMatcher.java:845"$0$0$0$5$80$"					this.prefixPattern = !this.catchAllPattern && this.pattern.endsWith(""/**"");"
"AntPathMatcher.java:846"$0$0$0$1$5$"				}"
"AntPathMatcher.java:847"$0$0$0$5$28$"				if (this.uriVars == 0) {"
"AntPathMatcher.java:848"$0$0$0$9$70$"					this.length = (this.pattern != null ? this.pattern.length() : 0);"
"AntPathMatcher.java:849"$0$0$0$1$5$"				}"
"AntPathMatcher.java:850"$0$0$0$1$4$"			}"
"AntPathMatcher.java:851"$0$0$0$0$0$""
"AntPathMatcher.java:852"$0$0$0$4$34$"			protected void initCounters() {"
"AntPathMatcher.java:853"$0$0$0$4$16$"				int pos = 0;"
"AntPathMatcher.java:854"$0$0$0$5$31$"				if (this.pattern != null) {"
"AntPathMatcher.java:855"$0$0$0$5$42$"					while (pos < this.pattern.length()) {"
"AntPathMatcher.java:856"$0$0$0$5$44$"						if (this.pattern.charAt(pos) == '{') {"
"AntPathMatcher.java:857"$0$0$0$1$22$"							this.uriVars++;"
"AntPathMatcher.java:858"$0$0$0$1$13$"							pos++;"
"AntPathMatcher.java:859"$0$0$0$1$7$"						}"
"AntPathMatcher.java:860"$0$0$0$6$49$"						else if (this.pattern.charAt(pos) == '*') {"
"AntPathMatcher.java:861"$0$0$0$13$84$"							if (pos + 1 < this.pattern.length() && this.pattern.charAt(pos + 1) == '*') {"
"AntPathMatcher.java:862"$0$0$0$1$31$"								this.doubleWildcards++;"
"AntPathMatcher.java:863"$0$0$0$3$17$"								pos += 2;"
"AntPathMatcher.java:864"$0$0$0$1$8$"							}"
"AntPathMatcher.java:865"$0$0$0$10$75$"							else if (pos > 0 && !this.pattern.substring(pos - 1).equals("".*"")) {"
"AntPathMatcher.java:866"$0$0$0$1$31$"								this.singleWildcards++;"
"AntPathMatcher.java:867"$0$0$0$1$14$"								pos++;"
"AntPathMatcher.java:868"$0$0$0$1$8$"							}"
"AntPathMatcher.java:869"$0$0$0$2$13$"							else {"
"AntPathMatcher.java:870"$0$0$0$1$14$"								pos++;"
"AntPathMatcher.java:871"$0$0$0$1$8$"							}"
"AntPathMatcher.java:872"$0$0$0$1$7$"						}"
"AntPathMatcher.java:873"$0$0$0$2$12$"						else {"
"AntPathMatcher.java:874"$0$0$0$1$13$"							pos++;"
"AntPathMatcher.java:875"$0$0$0$1$7$"						}"
"AntPathMatcher.java:876"$0$0$0$1$6$"					}"
"AntPathMatcher.java:877"$0$0$0$1$5$"				}"
"AntPathMatcher.java:878"$0$0$0$1$4$"			}"
"AntPathMatcher.java:879"$0$0$0$0$0$""
"AntPathMatcher.java:880"$1$0$0$4$28$"			public int getUriVars() {"
"AntPathMatcher.java:881"$0$0$0$2$24$"				return this.uriVars;"
"AntPathMatcher.java:882"$0$0$0$1$4$"			}"
"AntPathMatcher.java:883"$0$0$0$0$0$""
"AntPathMatcher.java:884"$1$0$0$4$36$"			public int getSingleWildcards() {"
"AntPathMatcher.java:885"$0$0$0$2$32$"				return this.singleWildcards;"
"AntPathMatcher.java:886"$0$0$0$1$4$"			}"
"AntPathMatcher.java:887"$0$0$0$0$0$""
"AntPathMatcher.java:888"$1$0$0$4$36$"			public int getDoubleWildcards() {"
"AntPathMatcher.java:889"$0$0$0$2$32$"				return this.doubleWildcards;"
"AntPathMatcher.java:890"$0$0$0$1$4$"			}"
"AntPathMatcher.java:891"$0$0$0$0$0$""
"AntPathMatcher.java:892"$0$0$0$4$37$"			public boolean isLeastSpecific() {"
"AntPathMatcher.java:893"$0$0$0$6$58$"				return (this.pattern == null || this.catchAllPattern);"
"AntPathMatcher.java:894"$0$0$0$1$4$"			}"
"AntPathMatcher.java:895"$0$0$0$0$0$""
"AntPathMatcher.java:896"$0$0$0$4$37$"			public boolean isPrefixPattern() {"
"AntPathMatcher.java:897"$0$0$0$2$30$"				return this.prefixPattern;"
"AntPathMatcher.java:898"$0$0$0$1$4$"			}"
"AntPathMatcher.java:899"$0$0$0$0$0$""
"AntPathMatcher.java:900"$1$0$0$4$31$"			public int getTotalCount() {"
"AntPathMatcher.java:901"$0$0$0$8$76$"				return this.uriVars + this.singleWildcards + (2 * this.doubleWildcards);"
"AntPathMatcher.java:902"$0$0$0$1$4$"			}"
"AntPathMatcher.java:903"$0$0$0$0$0$""
"AntPathMatcher.java:904"$0$0$0$1$6$"			/**"
"AntPathMatcher.java:905"$0$0$0$17$100$"			 * Returns the length of the given pattern, where template variables are considered to be 1 long."
"AntPathMatcher.java:906"$0$0$0$1$6$"			 */"
"AntPathMatcher.java:907"$1$0$0$4$27$"			public int getLength() {"
"AntPathMatcher.java:908"$0$0$0$5$30$"				if (this.length == null) {"
"AntPathMatcher.java:909"$0$0$0$6$42$"					this.length = (this.pattern != null ?"
"AntPathMatcher.java:910"$0$0$0$3$76$"							VARIABLE_PATTERN.matcher(this.pattern).replaceAll(""#"").length() : 0);"
"AntPathMatcher.java:911"$0$0$0$1$5$"				}"
"AntPathMatcher.java:912"$0$0$0$2$23$"				return this.length;"
"AntPathMatcher.java:913"$0$0$0$1$4$"			}"
"AntPathMatcher.java:914"$0$0$0$1$3$"		}"
"AntPathMatcher.java:915"$0$0$0$1$2$"	}"
"AntPathMatcher.java:916"$0$0$0$0$0$""
"AntPathMatcher.java:917"$0$0$0$0$0$""
"AntPathMatcher.java:918"$0$0$0$1$4$"	/**"
"AntPathMatcher.java:919"$0$0$0$13$77$"	 * A simple cache for patterns that depend on the configured path separator."
"AntPathMatcher.java:920"$0$0$0$1$4$"	 */"
"AntPathMatcher.java:921"$0$0$0$5$49$"	private static class PathSeparatorPatternCache {"
"AntPathMatcher.java:922"$0$0$0$0$0$""
"AntPathMatcher.java:923"$0$0$0$4$38$"		private final String endsOnWildCard;"
"AntPathMatcher.java:924"$0$0$0$0$0$""
"AntPathMatcher.java:925"$0$0$0$4$44$"		private final String endsOnDoubleWildCard;"
"AntPathMatcher.java:926"$0$0$0$0$0$""
"AntPathMatcher.java:927"$0$0$0$4$58$"		public PathSeparatorPatternCache(String pathSeparator) {"
"AntPathMatcher.java:928"$0$0$0$5$45$"			this.endsOnWildCard = pathSeparator + ""*"";"
"AntPathMatcher.java:929"$0$0$0$5$52$"			this.endsOnDoubleWildCard = pathSeparator + ""**"";"
"AntPathMatcher.java:930"$0$0$0$1$3$"		}"
"AntPathMatcher.java:931"$0$0$0$0$0$""
"AntPathMatcher.java:932"$1$0$0$4$37$"		public String getEndsOnWildCard() {"
"AntPathMatcher.java:933"$0$0$0$2$30$"			return this.endsOnWildCard;"
"AntPathMatcher.java:934"$0$0$0$1$3$"		}"
"AntPathMatcher.java:935"$0$0$0$0$0$""
"AntPathMatcher.java:936"$1$0$0$4$43$"		public String getEndsOnDoubleWildCard() {"
"AntPathMatcher.java:937"$0$0$0$2$36$"			return this.endsOnDoubleWildCard;"
"AntPathMatcher.java:938"$0$0$0$1$3$"		}"
"AntPathMatcher.java:939"$0$0$0$1$2$"	}"
"AntPathMatcher.java:940"$0$0$0$0$0$""
"AntPathMatcher.java:941"$0$0$0$1$1$"}"
"FastByteArrayOutputStream.java:1"$0$0$0$1$2$"/*"
"FastByteArrayOutputStream.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"FastByteArrayOutputStream.java:3"$0$0$0$1$2$" *"
"FastByteArrayOutputStream.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"FastByteArrayOutputStream.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"FastByteArrayOutputStream.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"FastByteArrayOutputStream.java:7"$0$0$0$1$2$" *"
"FastByteArrayOutputStream.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"FastByteArrayOutputStream.java:9"$0$0$0$1$2$" *"
"FastByteArrayOutputStream.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"FastByteArrayOutputStream.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"FastByteArrayOutputStream.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"FastByteArrayOutputStream.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"FastByteArrayOutputStream.java:14"$0$0$0$5$33$" * limitations under the License."
"FastByteArrayOutputStream.java:15"$0$0$0$1$3$" */"
"FastByteArrayOutputStream.java:16"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:17"$0$0$0$2$33$"package org.springframework.util;"
"FastByteArrayOutputStream.java:18"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:19"$0$0$0$2$27$"import java.io.IOException;"
"FastByteArrayOutputStream.java:20"$0$0$0$2$27$"import java.io.InputStream;"
"FastByteArrayOutputStream.java:21"$0$0$0$2$28$"import java.io.OutputStream;"
"FastByteArrayOutputStream.java:22"$0$0$0$2$35$"import java.security.MessageDigest;"
"FastByteArrayOutputStream.java:23"$0$0$0$2$26$"import java.util.Iterator;"
"FastByteArrayOutputStream.java:24"$0$0$0$2$28$"import java.util.LinkedList;"
"FastByteArrayOutputStream.java:25"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"FastByteArrayOutputStream.java:27"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:28"$0$0$0$1$3$"/**"
"FastByteArrayOutputStream.java:29"$0$0$0$9$75$" * A speedy alternative to {@link java.io.ByteArrayOutputStream}. Note that"
"FastByteArrayOutputStream.java:30"$0$0$0$9$76$" * this variant does <i>not</i> extend {@code ByteArrayOutputStream}, unlike"
"FastByteArrayOutputStream.java:31"$0$0$0$5$54$" * its sibling {@link ResizableByteArrayOutputStream}."
"FastByteArrayOutputStream.java:32"$0$0$0$1$2$" *"
"FastByteArrayOutputStream.java:33"$0$0$0$8$81$" * <p>Unlike {@link java.io.ByteArrayOutputStream}, this implementation is backed"
"FastByteArrayOutputStream.java:34"$0$0$0$12$78$" * by a {@link java.util.LinkedList} of {@code byte[]} instead of 1 constantly"
"FastByteArrayOutputStream.java:35"$1$0$0$13$75$" * resizing {@code byte[]}. It does not copy buffers when it gets expanded."
"FastByteArrayOutputStream.java:36"$0$0$0$1$2$" *"
"FastByteArrayOutputStream.java:37"$0$0$0$13$74$" * <p>The initial buffer is only created when the stream is first written."
"FastByteArrayOutputStream.java:38"$0$0$0$15$79$" * There is also no copying of the internal buffer if its contents is extracted"
"FastByteArrayOutputStream.java:39"$0$0$0$6$50$" * with the {@link #writeTo(OutputStream)} method."
"FastByteArrayOutputStream.java:40"$0$0$0$1$2$" *"
"FastByteArrayOutputStream.java:41"$0$0$0$4$24$" * @author Craig Andrews"
"FastByteArrayOutputStream.java:42"$0$0$0$4$26$" * @author Juergen Hoeller"
"FastByteArrayOutputStream.java:43"$0$0$0$3$13$" * @since 4.2"
"FastByteArrayOutputStream.java:44"$0$0$0$3$15$" * @see #resize"
"FastByteArrayOutputStream.java:45"$0$0$0$3$38$" * @see ResizableByteArrayOutputStream"
"FastByteArrayOutputStream.java:46"$0$0$0$1$3$" */"
"FastByteArrayOutputStream.java:47"$0$0$0$6$61$"public class FastByteArrayOutputStream extends OutputStream {"
"FastByteArrayOutputStream.java:48"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:49"$0$0$0$7$51$"	private static final int DEFAULT_BLOCK_SIZE = 256;"
"FastByteArrayOutputStream.java:50"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:51"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:52"$0$0$1$9$47$"	// The buffers used to store the content bytes"
"FastByteArrayOutputStream.java:53"$0$0$0$7$63$"	private final LinkedList<byte[]> buffers = new LinkedList<>();"
"FastByteArrayOutputStream.java:54"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:55"$0$0$1$12$63$"	// The size, in bytes, to use when allocating the first byte[]"
"FastByteArrayOutputStream.java:56"$0$0$0$4$36$"	private final int initialBlockSize;"
"FastByteArrayOutputStream.java:57"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:58"$0$0$1$12$62$"	// The size, in bytes, to use when allocating the next byte[]"
"FastByteArrayOutputStream.java:59"$0$0$0$5$31$"	private int nextBlockSize = 0;"
"FastByteArrayOutputStream.java:60"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:61"$0$0$1$8$44$"	// The number of bytes in previous buffers."
"FastByteArrayOutputStream.java:62"$0$0$1$12$62$"	// (The number of bytes in the current buffer is in 'index'.)"
"FastByteArrayOutputStream.java:63"$0$0$0$5$37$"	private int alreadyBufferedSize = 0;"
"FastByteArrayOutputStream.java:64"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:65"$1$0$1$13$73$"	// The index in the byte[] found at buffers.getLast() to be written next"
"FastByteArrayOutputStream.java:66"$0$0$0$5$23$"	private int index = 0;"
"FastByteArrayOutputStream.java:67"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:68"$0$0$1$5$25$"	// Is the stream closed?"
"FastByteArrayOutputStream.java:69"$0$0$0$5$32$"	private boolean closed = false;"
"FastByteArrayOutputStream.java:70"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:71"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:72"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:73"$0$0$0$5$55$"	 * Create a new <code>FastByteArrayOutputStream</code>"
"FastByteArrayOutputStream.java:74"$0$0$0$9$51$"	 * with the default initial capacity of 256 bytes."
"FastByteArrayOutputStream.java:75"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:76"$0$0$0$3$37$"	public FastByteArrayOutputStream() {"
"FastByteArrayOutputStream.java:77"$0$0$0$1$27$"		this(DEFAULT_BLOCK_SIZE);"
"FastByteArrayOutputStream.java:78"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:79"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:80"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:81"$0$0$0$5$55$"	 * Create a new <code>FastByteArrayOutputStream</code>"
"FastByteArrayOutputStream.java:82"$0$0$0$6$40$"	 * with the specified initial capacity."
"FastByteArrayOutputStream.java:83"$0$0$0$9$60$"	 * @param initialBlockSize the initial buffer size in bytes"
"FastByteArrayOutputStream.java:84"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:85"$0$0$0$4$57$"	public FastByteArrayOutputStream(int initialBlockSize) {"
"FastByteArrayOutputStream.java:86"$0$0$0$11$83$"		Assert.isTrue(initialBlockSize > 0, ""Initial block size must be greater than 0"");"
"FastByteArrayOutputStream.java:87"$0$0$0$3$43$"		this.initialBlockSize = initialBlockSize;"
"FastByteArrayOutputStream.java:88"$0$0$0$3$40$"		this.nextBlockSize = initialBlockSize;"
"FastByteArrayOutputStream.java:89"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:90"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:91"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:92"$0$0$1$3$22$"	// Overridden methods"
"FastByteArrayOutputStream.java:93"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:94"$0$0$0$1$10$"	@Override"
"FastByteArrayOutputStream.java:95"$0$0$0$7$50$"	public void write(int datum) throws IOException {"
"FastByteArrayOutputStream.java:96"$0$0$0$3$20$"		if (this.closed) {"
"FastByteArrayOutputStream.java:97"$0$0$0$4$42$"			throw new IOException(""Stream closed"");"
"FastByteArrayOutputStream.java:98"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:99"$0$0$0$2$8$"		else {"
"FastByteArrayOutputStream.java:100"$1$0$0$9$88$"			if (this.buffers.peekLast() == null || this.buffers.getLast().length == this.index) {"
"FastByteArrayOutputStream.java:101"$0$0$0$1$17$"				addBuffer(1);"
"FastByteArrayOutputStream.java:102"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:103"$0$0$1$4$20$"			// store the byte"
"FastByteArrayOutputStream.java:104"$1$0$0$4$55$"			this.buffers.getLast()[this.index++] = (byte) datum;"
"FastByteArrayOutputStream.java:105"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:106"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:107"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:108"$0$0$0$1$10$"	@Override"
"FastByteArrayOutputStream.java:109"$0$0$0$11$76$"	public void write(byte[] data, int offset, int length) throws IOException {"
"FastByteArrayOutputStream.java:110"$0$0$0$15$66$"		if (offset < 0 || offset + length > data.length || length < 0) {"
"FastByteArrayOutputStream.java:111"$0$0$0$3$41$"			throw new IndexOutOfBoundsException();"
"FastByteArrayOutputStream.java:112"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:113"$0$0$0$4$25$"		else if (this.closed) {"
"FastByteArrayOutputStream.java:114"$0$0$0$4$42$"			throw new IOException(""Stream closed"");"
"FastByteArrayOutputStream.java:115"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:116"$0$0$0$2$8$"		else {"
"FastByteArrayOutputStream.java:117"$1$0$0$9$88$"			if (this.buffers.peekLast() == null || this.buffers.getLast().length == this.index) {"
"FastByteArrayOutputStream.java:118"$0$0$0$1$22$"				addBuffer(length);"
"FastByteArrayOutputStream.java:119"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:120"$1$0$0$7$61$"			if (this.index + length > this.buffers.getLast().length) {"
"FastByteArrayOutputStream.java:121"$0$0$0$4$21$"				int pos = offset;"
"FastByteArrayOutputStream.java:122"$0$0$0$2$8$"				do {"
"FastByteArrayOutputStream.java:123"$1$0$0$5$55$"					if (this.index == this.buffers.getLast().length) {"
"FastByteArrayOutputStream.java:124"$0$0$0$1$24$"						addBuffer(length);"
"FastByteArrayOutputStream.java:125"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:126"$1$0$0$6$65$"					int copyLength = this.buffers.getLast().length - this.index;"
"FastByteArrayOutputStream.java:127"$0$0$0$5$31$"					if (length < copyLength) {"
"FastByteArrayOutputStream.java:128"$0$0$0$3$26$"						copyLength = length;"
"FastByteArrayOutputStream.java:129"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:130"$1$0$0$5$81$"					System.arraycopy(data, pos, this.buffers.getLast(), this.index, copyLength);"
"FastByteArrayOutputStream.java:131"$0$0$0$3$23$"					pos += copyLength;"
"FastByteArrayOutputStream.java:132"$0$0$0$3$30$"					this.index += copyLength;"
"FastByteArrayOutputStream.java:133"$0$0$0$3$26$"					length -= copyLength;"
"FastByteArrayOutputStream.java:134"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:135"$0$0$0$4$23$"				while (length > 0);"
"FastByteArrayOutputStream.java:136"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:137"$0$0$0$2$9$"			else {"
"FastByteArrayOutputStream.java:138"$0$0$1$5$28$"				// copy in the sub-array"
"FastByteArrayOutputStream.java:139"$1$0$0$5$79$"				System.arraycopy(data, offset, this.buffers.getLast(), this.index, length);"
"FastByteArrayOutputStream.java:140"$0$0$0$3$25$"				this.index += length;"
"FastByteArrayOutputStream.java:141"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:142"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:143"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:144"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:145"$0$0$0$1$10$"	@Override"
"FastByteArrayOutputStream.java:146"$0$0$0$4$22$"	public void close() {"
"FastByteArrayOutputStream.java:147"$0$0$0$3$21$"		this.closed = true;"
"FastByteArrayOutputStream.java:148"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:149"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:150"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:151"$0$0$0$12$72$"	 * Convert the buffer's contents into a string decoding bytes using the"
"FastByteArrayOutputStream.java:152"$0$0$0$11$75$"	 * platform's default character set. The length of the new <tt>String</tt>"
"FastByteArrayOutputStream.java:153"$0$0$0$16$73$"	 * is a function of the character set, and hence may not be equal to the"
"FastByteArrayOutputStream.java:154"$0$0$0$5$23$"	 * size of the buffer."
"FastByteArrayOutputStream.java:155"$0$0$0$8$75$"	 * <p>This method always replaces malformed-input and unmappable-character"
"FastByteArrayOutputStream.java:156"$0$0$0$10$68$"	 * sequences with the default replacement string for the platform's"
"FastByteArrayOutputStream.java:157"$0$0$0$7$75$"	 * default character set. The {@linkplain java.nio.charset.CharsetDecoder}"
"FastByteArrayOutputStream.java:158"$0$0$0$13$71$"	 * class should be used when more control over the decoding process is"
"FastByteArrayOutputStream.java:159"$0$0$0$2$13$"	 * required."
"FastByteArrayOutputStream.java:160"$0$0$0$9$55$"	 * @return a String decoded from the buffer's contents"
"FastByteArrayOutputStream.java:161"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:162"$0$0$0$1$10$"	@Override"
"FastByteArrayOutputStream.java:163"$0$0$0$4$27$"	public String toString() {"
"FastByteArrayOutputStream.java:164"$0$0$0$3$41$"		return new String(toByteArrayUnsafe());"
"FastByteArrayOutputStream.java:165"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:166"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:167"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:168"$0$0$1$3$18$"	// Custom methods"
"FastByteArrayOutputStream.java:169"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:170"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:171"$0$0$0$10$85$"	 * Return the number of bytes stored in this <code>FastByteArrayOutputStream</code>."
"FastByteArrayOutputStream.java:172"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:173"$0$0$0$4$20$"	public int size() {"
"FastByteArrayOutputStream.java:174"$0$0$0$4$49$"		return (this.alreadyBufferedSize + this.index);"
"FastByteArrayOutputStream.java:175"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:176"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:177"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:178"$0$0$0$14$72$"	 * Convert the stream's data to a byte array and return the byte array."
"FastByteArrayOutputStream.java:179"$0$0$0$13$84$"	 * <p>Also replaces the internal structures with the byte array to conserve memory:"
"FastByteArrayOutputStream.java:180"$0$0$0$17$82$"	 * if the byte array is being made anyways, mind as well as use it. This approach"
"FastByteArrayOutputStream.java:181"$0$0$0$15$81$"	 * also means that if this method is called twice without any writes in between,"
"FastByteArrayOutputStream.java:182"$0$0$0$7$31$"	 * the second call is a no-op."
"FastByteArrayOutputStream.java:183"$0$0$0$11$65$"	 * <p>This method is ""unsafe"" as it returns the internal buffer."
"FastByteArrayOutputStream.java:184"$0$0$0$8$50$"	 * Callers should not modify the returned buffer."
"FastByteArrayOutputStream.java:185"$0$0$0$13$72$"	 * @return the current contents of this output stream, as a byte array."
"FastByteArrayOutputStream.java:186"$0$0$0$3$16$"	 * @see #size()"
"FastByteArrayOutputStream.java:187"$0$0$0$3$23$"	 * @see #toByteArray()"
"FastByteArrayOutputStream.java:188"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:189"$0$0$0$4$36$"	public byte[] toByteArrayUnsafe() {"
"FastByteArrayOutputStream.java:190"$0$0$0$4$25$"		int totalSize = size();"
"FastByteArrayOutputStream.java:191"$0$0$0$5$23$"		if (totalSize == 0) {"
"FastByteArrayOutputStream.java:192"$0$0$0$3$22$"			return new byte[0];"
"FastByteArrayOutputStream.java:193"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:194"$0$0$0$1$20$"		resize(totalSize);"
"FastByteArrayOutputStream.java:195"$1$0$0$2$33$"		return this.buffers.getFirst();"
"FastByteArrayOutputStream.java:196"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:197"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:198"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:199"$0$0$0$7$41$"	 * Creates a newly allocated byte array."
"FastByteArrayOutputStream.java:200"$0$0$0$6$30$"	 * <p>Its size is the current"
"FastByteArrayOutputStream.java:201"$0$0$0$13$67$"	 * size of this output stream and the valid contents of the buffer"
"FastByteArrayOutputStream.java:202"$0$0$0$6$33$"	 * have been copied into it.</p>"
"FastByteArrayOutputStream.java:203"$0$0$0$13$72$"	 * @return the current contents of this output stream, as a byte array."
"FastByteArrayOutputStream.java:204"$0$0$0$3$16$"	 * @see #size()"
"FastByteArrayOutputStream.java:205"$0$0$0$3$29$"	 * @see #toByteArrayUnsafe()"
"FastByteArrayOutputStream.java:206"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:207"$0$0$0$4$30$"	public byte[] toByteArray() {"
"FastByteArrayOutputStream.java:208"$0$0$0$4$43$"		byte[] bytesUnsafe = toByteArrayUnsafe();"
"FastByteArrayOutputStream.java:209"$0$0$0$2$29$"		return bytesUnsafe.clone();"
"FastByteArrayOutputStream.java:210"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:211"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:212"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:213"$0$0$0$7$70$"	 * Reset the contents of this <code>FastByteArrayOutputStream</code>."
"FastByteArrayOutputStream.java:214"$0$0$0$11$74$"	 * <p>All currently accumulated output in the output stream is discarded."
"FastByteArrayOutputStream.java:215"$0$0$0$8$40$"	 * The output stream can be used again."
"FastByteArrayOutputStream.java:216"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:217"$0$0$0$4$22$"	public void reset() {"
"FastByteArrayOutputStream.java:218"$0$0$0$1$23$"		this.buffers.clear();"
"FastByteArrayOutputStream.java:219"$0$0$0$3$45$"		this.nextBlockSize = this.initialBlockSize;"
"FastByteArrayOutputStream.java:220"$0$0$0$3$22$"		this.closed = false;"
"FastByteArrayOutputStream.java:221"$0$0$0$3$17$"		this.index = 0;"
"FastByteArrayOutputStream.java:222"$0$0$0$3$31$"		this.alreadyBufferedSize = 0;"
"FastByteArrayOutputStream.java:223"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:224"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:225"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:226"$0$0$0$12$73$"	 * Get an {@link InputStream} to retrieve the data in this OutputStream."
"FastByteArrayOutputStream.java:227"$0$0$0$11$62$"	 * <p>Note that if any methods are called on the OutputStream"
"FastByteArrayOutputStream.java:228"$0$0$0$13$79$"	 * (including, but not limited to, any of the write methods, {@link #reset()},"
"FastByteArrayOutputStream.java:229"$0$0$0$8$70$"	 * {@link #toByteArray()}, and {@link #toByteArrayUnsafe()}) then the"
"FastByteArrayOutputStream.java:230"$0$0$0$6$56$"	 * {@link java.io.InputStream}'s behavior is undefined."
"FastByteArrayOutputStream.java:231"$0$0$0$10$68$"	 * @return {@link InputStream} of the contents of this OutputStream"
"FastByteArrayOutputStream.java:232"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:233"$1$0$0$4$38$"	public InputStream getInputStream() {"
"FastByteArrayOutputStream.java:234"$0$0$0$3$44$"		return new FastByteArrayInputStream(this);"
"FastByteArrayOutputStream.java:235"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:236"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:237"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:238"$0$0$0$9$56$"	 * Write the buffers content to the given OutputStream."
"FastByteArrayOutputStream.java:239"$0$0$0$8$43$"	 * @param out the OutputStream to write to"
"FastByteArrayOutputStream.java:240"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:241"$0$0$0$7$59$"	public void writeTo(OutputStream out) throws IOException {"
"FastByteArrayOutputStream.java:242"$0$0$0$4$48$"		Iterator<byte[]> it = this.buffers.iterator();"
"FastByteArrayOutputStream.java:243"$0$0$0$3$24$"		while (it.hasNext()) {"
"FastByteArrayOutputStream.java:244"$0$0$0$4$28$"			byte[] bytes = it.next();"
"FastByteArrayOutputStream.java:245"$0$0$0$3$22$"			if (it.hasNext()) {"
"FastByteArrayOutputStream.java:246"$0$0$0$3$38$"				out.write(bytes, 0, bytes.length);"
"FastByteArrayOutputStream.java:247"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:248"$0$0$0$2$9$"			else {"
"FastByteArrayOutputStream.java:249"$0$0$0$3$36$"				out.write(bytes, 0, this.index);"
"FastByteArrayOutputStream.java:250"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:251"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:252"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:253"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:254"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:255"$0$0$0$10$60$"	 * Resize the internal buffer size to a specified capacity."
"FastByteArrayOutputStream.java:256"$1$0$0$9$56$"	 * @param targetCapacity the desired size of the buffer"
"FastByteArrayOutputStream.java:257"$0$0$0$10$74$"	 * @throws IllegalArgumentException if the given capacity is smaller than"
"FastByteArrayOutputStream.java:258"$0$0$0$12$63$"	 * the actual size of the content stored in the buffer already"
"FastByteArrayOutputStream.java:259"$0$0$0$3$41$"	 * @see FastByteArrayOutputStream#size()"
"FastByteArrayOutputStream.java:260"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:261"$1$0$0$5$41$"	public void resize(int targetCapacity) {"
"FastByteArrayOutputStream.java:262"$1$0$0$12$96$"		Assert.isTrue(targetCapacity >= size(), ""New capacity must not be smaller than current size"");"
"FastByteArrayOutputStream.java:263"$0$0$0$5$41$"		if (this.buffers.peekFirst() == null) {"
"FastByteArrayOutputStream.java:264"$1$0$0$5$48$"			this.nextBlockSize = targetCapacity - size();"
"FastByteArrayOutputStream.java:265"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:266"$3$0$0$10$90$"		else if (size() == targetCapacity && this.buffers.getFirst().length == targetCapacity) {"
"FastByteArrayOutputStream.java:267"$1$0$1$8$48$"			// do nothing - already at the targetCapacity"
"FastByteArrayOutputStream.java:268"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:269"$0$0$0$2$8$"		else {"
"FastByteArrayOutputStream.java:270"$0$0$0$4$26$"			int totalSize = size();"
"FastByteArrayOutputStream.java:271"$1$0$0$5$42$"			byte[] data = new byte[targetCapacity];"
"FastByteArrayOutputStream.java:272"$0$0$0$4$15$"			int pos = 0;"
"FastByteArrayOutputStream.java:273"$0$0$0$4$49$"			Iterator<byte[]> it = this.buffers.iterator();"
"FastByteArrayOutputStream.java:274"$0$0$0$3$25$"			while (it.hasNext()) {"
"FastByteArrayOutputStream.java:275"$0$0$0$4$29$"				byte[] bytes = it.next();"
"FastByteArrayOutputStream.java:276"$0$0$0$3$23$"				if (it.hasNext()) {"
"FastByteArrayOutputStream.java:277"$0$0$0$5$57$"					System.arraycopy(bytes, 0, data, pos, bytes.length);"
"FastByteArrayOutputStream.java:278"$0$0$0$3$25$"					pos += bytes.length;"
"FastByteArrayOutputStream.java:279"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:280"$0$0$0$2$10$"				else {"
"FastByteArrayOutputStream.java:281"$0$0$0$5$55$"					System.arraycopy(bytes, 0, data, pos, this.index);"
"FastByteArrayOutputStream.java:282"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:283"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:284"$0$0$0$1$24$"			this.buffers.clear();"
"FastByteArrayOutputStream.java:285"$0$0$0$1$26$"			this.buffers.add(data);"
"FastByteArrayOutputStream.java:286"$0$0$0$3$26$"			this.index = totalSize;"
"FastByteArrayOutputStream.java:287"$0$0$0$3$32$"			this.alreadyBufferedSize = 0;"
"FastByteArrayOutputStream.java:288"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:289"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:290"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:291"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:292"$0$0$0$11$54$"	 * Create a new buffer and store it in the LinkedList"
"FastByteArrayOutputStream.java:293"$0$0$0$13$75$"	 * <p>Adds a new buffer that can store at least {@code minCapacity} bytes."
"FastByteArrayOutputStream.java:294"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:295"$0$0$0$5$42$"	private void addBuffer(int minCapacity) {"
"FastByteArrayOutputStream.java:296"$0$0$0$5$40$"		if (this.buffers.peekLast() != null) {"
"FastByteArrayOutputStream.java:297"$0$0$0$3$42$"			this.alreadyBufferedSize += this.index;"
"FastByteArrayOutputStream.java:298"$0$0$0$3$18$"			this.index = 0;"
"FastByteArrayOutputStream.java:299"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:300"$0$0$0$5$41$"		if (this.nextBlockSize < minCapacity) {"
"FastByteArrayOutputStream.java:301"$0$0$0$3$50$"			this.nextBlockSize = nextPowerOf2(minCapacity);"
"FastByteArrayOutputStream.java:302"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:303"$0$0$0$2$49$"		this.buffers.add(new byte[this.nextBlockSize]);"
"FastByteArrayOutputStream.java:304"$0$0$0$9$59$"		this.nextBlockSize *= 2;  // block size doubles each time"
"FastByteArrayOutputStream.java:305"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:306"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:307"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:308"$0$0$0$20$80$"	 * Get the next power of 2 of a number (ex, the next power of 2 of 119 is 128)."
"FastByteArrayOutputStream.java:309"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:310"$0$0$0$6$43$"	private static int nextPowerOf2(int val) {"
"FastByteArrayOutputStream.java:311"$0$0$0$1$8$"		val--;"
"FastByteArrayOutputStream.java:312"$0$0$0$7$25$"		val = (val >> 1) | val;"
"FastByteArrayOutputStream.java:313"$0$0$0$7$25$"		val = (val >> 2) | val;"
"FastByteArrayOutputStream.java:314"$0$0$0$7$25$"		val = (val >> 4) | val;"
"FastByteArrayOutputStream.java:315"$0$0$0$7$25$"		val = (val >> 8) | val;"
"FastByteArrayOutputStream.java:316"$0$0$0$7$26$"		val = (val >> 16) | val;"
"FastByteArrayOutputStream.java:317"$0$0$0$1$8$"		val++;"
"FastByteArrayOutputStream.java:318"$0$0$0$2$13$"		return val;"
"FastByteArrayOutputStream.java:319"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:320"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:321"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:322"$0$0$0$1$4$"	/**"
"FastByteArrayOutputStream.java:323"$0$0$0$11$76$"	 * An implementation of {@link java.io.InputStream} that reads from a given"
"FastByteArrayOutputStream.java:324"$0$0$0$2$43$"	 * <code>FastByteArrayOutputStream</code>."
"FastByteArrayOutputStream.java:325"$0$0$0$1$4$"	 */"
"FastByteArrayOutputStream.java:326"$0$0$0$8$93$"	private static final class FastByteArrayInputStream extends UpdateMessageDigestInputStream {"
"FastByteArrayOutputStream.java:327"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:328"$0$0$0$4$68$"		private final FastByteArrayOutputStream fastByteArrayOutputStream;"
"FastByteArrayOutputStream.java:329"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:330"$0$0$0$4$49$"		private final Iterator<byte[]> buffersIterator;"
"FastByteArrayOutputStream.java:331"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:332"$0$0$0$1$11$"		@Nullable"
"FastByteArrayOutputStream.java:333"$0$0$0$3$31$"		private byte[] currentBuffer;"
"FastByteArrayOutputStream.java:334"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:335"$0$0$0$5$38$"		private int currentBufferLength = 0;"
"FastByteArrayOutputStream.java:336"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:337"$0$0$0$5$43$"		private int nextIndexInCurrentBuffer = 0;"
"FastByteArrayOutputStream.java:338"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:339"$0$0$0$5$33$"		private int totalBytesRead = 0;"
"FastByteArrayOutputStream.java:340"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:341"$0$0$0$1$5$"		/**"
"FastByteArrayOutputStream.java:342"$0$0$0$6$74$"		 * Create a new <code>FastByteArrayOutputStreamInputStream</code> backed"
"FastByteArrayOutputStream.java:343"$0$0$0$5$57$"		 * by the given <code>FastByteArrayOutputStream</code>."
"FastByteArrayOutputStream.java:344"$0$0$0$1$5$"		 */"
"FastByteArrayOutputStream.java:345"$0$0$0$4$88$"		public FastByteArrayInputStream(FastByteArrayOutputStream fastByteArrayOutputStream) {"
"FastByteArrayOutputStream.java:346"$0$0$0$3$62$"			this.fastByteArrayOutputStream = fastByteArrayOutputStream;"
"FastByteArrayOutputStream.java:347"$0$0$0$3$71$"			this.buffersIterator = fastByteArrayOutputStream.buffers.iterator();"
"FastByteArrayOutputStream.java:348"$0$0$0$3$40$"			if (this.buffersIterator.hasNext()) {"
"FastByteArrayOutputStream.java:349"$0$0$0$3$53$"				this.currentBuffer = this.buffersIterator.next();"
"FastByteArrayOutputStream.java:350"$1$0$0$5$76$"				if (this.currentBuffer == fastByteArrayOutputStream.buffers.getLast()) {"
"FastByteArrayOutputStream.java:351"$0$0$0$3$64$"					this.currentBufferLength = fastByteArrayOutputStream.index;"
"FastByteArrayOutputStream.java:352"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:353"$0$0$0$2$10$"				else {"
"FastByteArrayOutputStream.java:354"$0$0$0$9$93$"					this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0);"
"FastByteArrayOutputStream.java:355"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:356"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:357"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:358"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:359"$0$0$0$1$11$"		@Override"
"FastByteArrayOutputStream.java:360"$0$0$0$4$21$"		public int read() {"
"FastByteArrayOutputStream.java:361"$0$0$0$5$36$"			if (this.currentBuffer == null) {"
"FastByteArrayOutputStream.java:362"$0$0$1$9$49$"				// This stream doesn't have any data in it..."
"FastByteArrayOutputStream.java:363"$0$0$0$2$14$"				return -1;"
"FastByteArrayOutputStream.java:364"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:365"$0$0$0$2$9$"			else {"
"FastByteArrayOutputStream.java:366"$0$0$0$5$67$"				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {"
"FastByteArrayOutputStream.java:367"$0$0$0$1$27$"					this.totalBytesRead++;"
"FastByteArrayOutputStream.java:368"$0$0$0$4$71$"					return this.currentBuffer[this.nextIndexInCurrentBuffer++] & 0xFF;"
"FastByteArrayOutputStream.java:369"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:370"$0$0$0$2$10$"				else {"
"FastByteArrayOutputStream.java:371"$0$0$0$3$42$"					if (this.buffersIterator.hasNext()) {"
"FastByteArrayOutputStream.java:372"$0$0$0$3$55$"						this.currentBuffer = this.buffersIterator.next();"
"FastByteArrayOutputStream.java:373"$0$0$0$1$34$"						updateCurrentBufferLength();"
"FastByteArrayOutputStream.java:374"$0$0$0$3$40$"						this.nextIndexInCurrentBuffer = 0;"
"FastByteArrayOutputStream.java:375"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:376"$0$0$0$2$11$"					else {"
"FastByteArrayOutputStream.java:377"$0$0$0$3$32$"						this.currentBuffer = null;"
"FastByteArrayOutputStream.java:378"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:379"$0$0$0$2$19$"					return read();"
"FastByteArrayOutputStream.java:380"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:381"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:382"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:383"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:384"$0$0$0$1$11$"		@Override"
"FastByteArrayOutputStream.java:385"$0$0$0$5$29$"		public int read(byte[] b) {"
"FastByteArrayOutputStream.java:386"$0$0$0$4$31$"			return read(b, 0, b.length);"
"FastByteArrayOutputStream.java:387"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:388"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:389"$0$0$0$1$11$"		@Override"
"FastByteArrayOutputStream.java:390"$0$0$0$9$47$"		public int read(byte[] b, int off, int len) {"
"FastByteArrayOutputStream.java:391"$0$0$0$15$52$"			if (off < 0 || len < 0 || len > b.length - off) {"
"FastByteArrayOutputStream.java:392"$0$0$0$3$42$"				throw new IndexOutOfBoundsException();"
"FastByteArrayOutputStream.java:393"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:394"$0$0$0$6$23$"			else if (len == 0) {"
"FastByteArrayOutputStream.java:395"$0$0$0$2$13$"				return 0;"
"FastByteArrayOutputStream.java:396"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:397"$0$0$0$2$9$"			else {"
"FastByteArrayOutputStream.java:398"$0$0$0$5$37$"				if (this.currentBuffer == null) {"
"FastByteArrayOutputStream.java:399"$0$0$1$9$50$"					// This stream doesn't have any data in it..."
"FastByteArrayOutputStream.java:400"$0$0$0$2$15$"					return -1;"
"FastByteArrayOutputStream.java:401"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:402"$0$0$0$2$10$"				else {"
"FastByteArrayOutputStream.java:403"$0$0$0$5$68$"					if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {"
"FastByteArrayOutputStream.java:404"$0$0$0$7$96$"						int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);"
"FastByteArrayOutputStream.java:405"$0$0$0$5$95$"						System.arraycopy(this.currentBuffer, this.nextIndexInCurrentBuffer, b, off, bytesToCopy);"
"FastByteArrayOutputStream.java:406"$0$0$0$3$41$"						this.totalBytesRead += bytesToCopy;"
"FastByteArrayOutputStream.java:407"$0$0$0$3$51$"						this.nextIndexInCurrentBuffer += bytesToCopy;"
"FastByteArrayOutputStream.java:408"$0$0$0$10$68$"						int remaining = read(b, off + bytesToCopy, len - bytesToCopy);"
"FastByteArrayOutputStream.java:409"$0$0$0$5$50$"						return bytesToCopy + Math.max(remaining, 0);"
"FastByteArrayOutputStream.java:410"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:411"$0$0$0$2$11$"					else {"
"FastByteArrayOutputStream.java:412"$0$0$0$3$43$"						if (this.buffersIterator.hasNext()) {"
"FastByteArrayOutputStream.java:413"$0$0$0$3$56$"							this.currentBuffer = this.buffersIterator.next();"
"FastByteArrayOutputStream.java:414"$0$0$0$1$35$"							updateCurrentBufferLength();"
"FastByteArrayOutputStream.java:415"$0$0$0$3$41$"							this.nextIndexInCurrentBuffer = 0;"
"FastByteArrayOutputStream.java:416"$0$0$0$1$7$"						}"
"FastByteArrayOutputStream.java:417"$0$0$0$2$12$"						else {"
"FastByteArrayOutputStream.java:418"$0$0$0$3$33$"							this.currentBuffer = null;"
"FastByteArrayOutputStream.java:419"$0$0$0$1$7$"						}"
"FastByteArrayOutputStream.java:420"$0$0$0$4$31$"						return read(b, off, len);"
"FastByteArrayOutputStream.java:421"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:422"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:423"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:424"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:425"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:426"$0$0$0$1$11$"		@Override"
"FastByteArrayOutputStream.java:427"$0$0$0$7$47$"		public long skip(long n) throws IOException {"
"FastByteArrayOutputStream.java:428"$0$0$0$5$31$"			if (n > Integer.MAX_VALUE) {"
"FastByteArrayOutputStream.java:429"$0$0$0$13$94$"				throw new IllegalArgumentException(""n exceeds maximum ("" + Integer.MAX_VALUE + ""): "" + n);"
"FastByteArrayOutputStream.java:430"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:431"$0$0$0$6$21$"			else if (n == 0) {"
"FastByteArrayOutputStream.java:432"$0$0$0$2$13$"				return 0;"
"FastByteArrayOutputStream.java:433"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:434"$0$0$0$6$20$"			else if (n < 0) {"
"FastByteArrayOutputStream.java:435"$0$0$0$11$71$"				throw new IllegalArgumentException(""n must be 0 or greater: "" + n);"
"FastByteArrayOutputStream.java:436"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:437"$0$0$0$5$21$"			int len = (int) n;"
"FastByteArrayOutputStream.java:438"$0$0$0$5$36$"			if (this.currentBuffer == null) {"
"FastByteArrayOutputStream.java:439"$0$0$1$9$49$"				// This stream doesn't have any data in it..."
"FastByteArrayOutputStream.java:440"$0$0$0$2$13$"				return 0;"
"FastByteArrayOutputStream.java:441"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:442"$0$0$0$2$9$"			else {"
"FastByteArrayOutputStream.java:443"$0$0$0$5$67$"				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {"
"FastByteArrayOutputStream.java:444"$0$0$0$7$95$"					int bytesToSkip = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);"
"FastByteArrayOutputStream.java:445"$0$0$0$3$40$"					this.totalBytesRead += bytesToSkip;"
"FastByteArrayOutputStream.java:446"$0$0$0$3$50$"					this.nextIndexInCurrentBuffer += bytesToSkip;"
"FastByteArrayOutputStream.java:447"$0$0$0$6$52$"					return (bytesToSkip + skip(len - bytesToSkip));"
"FastByteArrayOutputStream.java:448"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:449"$0$0$0$2$10$"				else {"
"FastByteArrayOutputStream.java:450"$0$0$0$3$42$"					if (this.buffersIterator.hasNext()) {"
"FastByteArrayOutputStream.java:451"$0$0$0$3$55$"						this.currentBuffer = this.buffersIterator.next();"
"FastByteArrayOutputStream.java:452"$0$0$0$1$34$"						updateCurrentBufferLength();"
"FastByteArrayOutputStream.java:453"$0$0$0$3$40$"						this.nextIndexInCurrentBuffer = 0;"
"FastByteArrayOutputStream.java:454"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:455"$0$0$0$2$11$"					else {"
"FastByteArrayOutputStream.java:456"$0$0$0$3$32$"						this.currentBuffer = null;"
"FastByteArrayOutputStream.java:457"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:458"$0$0$0$2$22$"					return skip(len);"
"FastByteArrayOutputStream.java:459"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:460"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:461"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:462"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:463"$0$0$0$1$11$"		@Override"
"FastByteArrayOutputStream.java:464"$0$0$0$4$26$"		public int available() {"
"FastByteArrayOutputStream.java:465"$0$0$0$4$72$"			return (this.fastByteArrayOutputStream.size() - this.totalBytesRead);"
"FastByteArrayOutputStream.java:466"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:467"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:468"$0$0$0$1$5$"		/**"
"FastByteArrayOutputStream.java:469"$0$0$0$12$71$"		 * Update the message digest with the remaining bytes in this stream."
"FastByteArrayOutputStream.java:470"$0$0$0$8$54$"		 * @param messageDigest the message digest to update"
"FastByteArrayOutputStream.java:471"$0$0$0$1$5$"		 */"
"FastByteArrayOutputStream.java:472"$0$0$0$1$11$"		@Override"
"FastByteArrayOutputStream.java:473"$0$0$0$5$64$"		public void updateMessageDigest(MessageDigest messageDigest) {"
"FastByteArrayOutputStream.java:474"$0$0$0$2$51$"			updateMessageDigest(messageDigest, available());"
"FastByteArrayOutputStream.java:475"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:476"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:477"$0$0$0$1$5$"		/**"
"FastByteArrayOutputStream.java:478"$0$0$0$13$70$"		 * Update the message digest with the next len bytes in this stream."
"FastByteArrayOutputStream.java:479"$0$0$0$12$78$"		 * Avoids creating new byte arrays and use internal buffers for performance."
"FastByteArrayOutputStream.java:480"$0$0$0$8$54$"		 * @param messageDigest the message digest to update"
"FastByteArrayOutputStream.java:481"$0$0$0$18$92$"		 * @param len how many bytes to read from this stream and use to update the message digest"
"FastByteArrayOutputStream.java:482"$0$0$0$1$5$"		 */"
"FastByteArrayOutputStream.java:483"$0$0$0$1$11$"		@Override"
"FastByteArrayOutputStream.java:484"$0$0$0$7$73$"		public void updateMessageDigest(MessageDigest messageDigest, int len) {"
"FastByteArrayOutputStream.java:485"$0$0$0$5$36$"			if (this.currentBuffer == null) {"
"FastByteArrayOutputStream.java:486"$0$0$1$9$49$"				// This stream doesn't have any data in it..."
"FastByteArrayOutputStream.java:487"$0$0$0$1$11$"				return;"
"FastByteArrayOutputStream.java:488"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:489"$0$0$0$6$23$"			else if (len == 0) {"
"FastByteArrayOutputStream.java:490"$0$0$0$1$11$"				return;"
"FastByteArrayOutputStream.java:491"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:492"$0$0$0$6$22$"			else if (len < 0) {"
"FastByteArrayOutputStream.java:493"$0$0$0$11$75$"				throw new IllegalArgumentException(""len must be 0 or greater: "" + len);"
"FastByteArrayOutputStream.java:494"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:495"$0$0$0$2$9$"			else {"
"FastByteArrayOutputStream.java:496"$0$0$0$5$67$"				if (this.nextIndexInCurrentBuffer < this.currentBufferLength) {"
"FastByteArrayOutputStream.java:497"$0$0$0$7$95$"					int bytesToCopy = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer);"
"FastByteArrayOutputStream.java:498"$0$0$0$3$90$"					messageDigest.update(this.currentBuffer, this.nextIndexInCurrentBuffer, bytesToCopy);"
"FastByteArrayOutputStream.java:499"$0$0$0$3$50$"					this.nextIndexInCurrentBuffer += bytesToCopy;"
"FastByteArrayOutputStream.java:500"$0$0$0$4$59$"					updateMessageDigest(messageDigest, len - bytesToCopy);"
"FastByteArrayOutputStream.java:501"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:502"$0$0$0$2$10$"				else {"
"FastByteArrayOutputStream.java:503"$0$0$0$3$42$"					if (this.buffersIterator.hasNext()) {"
"FastByteArrayOutputStream.java:504"$0$0$0$3$55$"						this.currentBuffer = this.buffersIterator.next();"
"FastByteArrayOutputStream.java:505"$0$0$0$1$34$"						updateCurrentBufferLength();"
"FastByteArrayOutputStream.java:506"$0$0$0$3$40$"						this.nextIndexInCurrentBuffer = 0;"
"FastByteArrayOutputStream.java:507"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:508"$0$0$0$2$11$"					else {"
"FastByteArrayOutputStream.java:509"$0$0$0$3$32$"						this.currentBuffer = null;"
"FastByteArrayOutputStream.java:510"$0$0$0$1$6$"					}"
"FastByteArrayOutputStream.java:511"$0$0$0$2$45$"					updateMessageDigest(messageDigest, len);"
"FastByteArrayOutputStream.java:512"$0$0$0$1$5$"				}"
"FastByteArrayOutputStream.java:513"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:514"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:515"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:516"$0$0$0$4$44$"		private void updateCurrentBufferLength() {"
"FastByteArrayOutputStream.java:517"$1$0$0$5$80$"			if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) {"
"FastByteArrayOutputStream.java:518"$0$0$0$3$68$"				this.currentBufferLength = this.fastByteArrayOutputStream.index;"
"FastByteArrayOutputStream.java:519"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:520"$0$0$0$2$9$"			else {"
"FastByteArrayOutputStream.java:521"$0$0$0$9$92$"				this.currentBufferLength = (this.currentBuffer != null ? this.currentBuffer.length : 0);"
"FastByteArrayOutputStream.java:522"$0$0$0$1$4$"			}"
"FastByteArrayOutputStream.java:523"$0$0$0$1$3$"		}"
"FastByteArrayOutputStream.java:524"$0$0$0$1$2$"	}"
"FastByteArrayOutputStream.java:525"$0$0$0$0$0$""
"FastByteArrayOutputStream.java:526"$0$0$0$1$1$"}"
"ResizableByteArrayOutputStream.java:1"$0$0$0$1$2$"/*"
"ResizableByteArrayOutputStream.java:2"$0$0$0$8$54$" * Copyright 2002-2015 the original author or authors."
"ResizableByteArrayOutputStream.java:3"$0$0$0$1$2$" *"
"ResizableByteArrayOutputStream.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResizableByteArrayOutputStream.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResizableByteArrayOutputStream.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResizableByteArrayOutputStream.java:7"$0$0$0$1$2$" *"
"ResizableByteArrayOutputStream.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResizableByteArrayOutputStream.java:9"$0$0$0$1$2$" *"
"ResizableByteArrayOutputStream.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResizableByteArrayOutputStream.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResizableByteArrayOutputStream.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResizableByteArrayOutputStream.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResizableByteArrayOutputStream.java:14"$0$0$0$5$33$" * limitations under the License."
"ResizableByteArrayOutputStream.java:15"$0$0$0$1$3$" */"
"ResizableByteArrayOutputStream.java:16"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:17"$0$0$0$2$33$"package org.springframework.util;"
"ResizableByteArrayOutputStream.java:18"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:19"$0$0$0$2$37$"import java.io.ByteArrayOutputStream;"
"ResizableByteArrayOutputStream.java:20"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:21"$0$0$0$1$3$"/**"
"ResizableByteArrayOutputStream.java:22"$0$0$0$7$62$" * An extension of {@link java.io.ByteArrayOutputStream} that:"
"ResizableByteArrayOutputStream.java:23"$0$0$0$2$7$" * <ul>"
"ResizableByteArrayOutputStream.java:24"$0$0$0$5$91$" * <li>has public {@link org.springframework.util.ResizableByteArrayOutputStream#grow(int)}"
"ResizableByteArrayOutputStream.java:25"$0$0$0$5$90$" * and {@link org.springframework.util.ResizableByteArrayOutputStream#resize(int)} methods"
"ResizableByteArrayOutputStream.java:26"$1$0$0$12$64$" * to get more control over the size of the internal buffer</li>"
"ResizableByteArrayOutputStream.java:27"$0$0$0$9$58$" * <li>has a higher initial capacity (256) by default</li>"
"ResizableByteArrayOutputStream.java:28"$0$0$0$2$8$" * </ul>"
"ResizableByteArrayOutputStream.java:29"$0$0$0$1$2$" *"
"ResizableByteArrayOutputStream.java:30"$0$0$0$12$84$" * <p>As of 4.2, this class has been superseded by {@link FastByteArrayOutputStream}"
"ResizableByteArrayOutputStream.java:31"$0$0$0$11$84$" * for Spring's internal use where no assignability to {@link ByteArrayOutputStream}"
"ResizableByteArrayOutputStream.java:32"$0$0$0$11$83$" * is needed (since {@link FastByteArrayOutputStream} is more efficient with buffer"
"ResizableByteArrayOutputStream.java:33"$0$0$0$10$84$" * resize management but doesn't extend the standard {@link ByteArrayOutputStream})."
"ResizableByteArrayOutputStream.java:34"$0$0$0$1$2$" *"
"ResizableByteArrayOutputStream.java:35"$0$0$0$4$23$" * @author Brian Clozel"
"ResizableByteArrayOutputStream.java:36"$0$0$0$4$26$" * @author Juergen Hoeller"
"ResizableByteArrayOutputStream.java:37"$0$0$0$3$15$" * @since 4.0.3"
"ResizableByteArrayOutputStream.java:38"$0$0$0$3$15$" * @see #resize"
"ResizableByteArrayOutputStream.java:39"$0$0$0$3$33$" * @see FastByteArrayOutputStream"
"ResizableByteArrayOutputStream.java:40"$0$0$0$1$3$" */"
"ResizableByteArrayOutputStream.java:41"$0$0$0$6$75$"public class ResizableByteArrayOutputStream extends ByteArrayOutputStream {"
"ResizableByteArrayOutputStream.java:42"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:43"$0$0$0$7$57$"	private static final int DEFAULT_INITIAL_CAPACITY = 256;"
"ResizableByteArrayOutputStream.java:44"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:45"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:46"$0$0$0$1$4$"	/**"
"ResizableByteArrayOutputStream.java:47"$0$0$0$5$60$"	 * Create a new <code>ResizableByteArrayOutputStream</code>"
"ResizableByteArrayOutputStream.java:48"$0$0$0$9$51$"	 * with the default initial capacity of 256 bytes."
"ResizableByteArrayOutputStream.java:49"$0$0$0$1$4$"	 */"
"ResizableByteArrayOutputStream.java:50"$0$0$0$3$42$"	public ResizableByteArrayOutputStream() {"
"ResizableByteArrayOutputStream.java:51"$0$0$0$1$34$"		super(DEFAULT_INITIAL_CAPACITY);"
"ResizableByteArrayOutputStream.java:52"$0$0$0$1$2$"	}"
"ResizableByteArrayOutputStream.java:53"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:54"$0$0$0$1$4$"	/**"
"ResizableByteArrayOutputStream.java:55"$0$0$0$5$60$"	 * Create a new <code>ResizableByteArrayOutputStream</code>"
"ResizableByteArrayOutputStream.java:56"$0$0$0$6$40$"	 * with the specified initial capacity."
"ResizableByteArrayOutputStream.java:57"$0$0$0$9$59$"	 * @param initialCapacity the initial buffer size in bytes"
"ResizableByteArrayOutputStream.java:58"$0$0$0$1$4$"	 */"
"ResizableByteArrayOutputStream.java:59"$0$0$0$4$61$"	public ResizableByteArrayOutputStream(int initialCapacity) {"
"ResizableByteArrayOutputStream.java:60"$0$0$0$1$25$"		super(initialCapacity);"
"ResizableByteArrayOutputStream.java:61"$0$0$0$1$2$"	}"
"ResizableByteArrayOutputStream.java:62"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:63"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:64"$0$0$0$1$4$"	/**"
"ResizableByteArrayOutputStream.java:65"$0$0$0$10$60$"	 * Resize the internal buffer size to a specified capacity."
"ResizableByteArrayOutputStream.java:66"$1$0$0$9$56$"	 * @param targetCapacity the desired size of the buffer"
"ResizableByteArrayOutputStream.java:67"$0$0$0$10$74$"	 * @throws IllegalArgumentException if the given capacity is smaller than"
"ResizableByteArrayOutputStream.java:68"$0$0$0$12$63$"	 * the actual size of the content stored in the buffer already"
"ResizableByteArrayOutputStream.java:69"$0$0$0$3$46$"	 * @see ResizableByteArrayOutputStream#size()"
"ResizableByteArrayOutputStream.java:70"$0$0$0$1$4$"	 */"
"ResizableByteArrayOutputStream.java:71"$1$0$0$6$54$"	public synchronized void resize(int targetCapacity) {"
"ResizableByteArrayOutputStream.java:72"$1$0$0$12$100$"		Assert.isTrue(targetCapacity >= this.count, ""New capacity must not be smaller than current size"");"
"ResizableByteArrayOutputStream.java:73"$1$0$0$5$50$"		byte[] resizedBuffer = new byte[targetCapacity];"
"ResizableByteArrayOutputStream.java:74"$0$0$0$5$62$"		System.arraycopy(this.buf, 0, resizedBuffer, 0, this.count);"
"ResizableByteArrayOutputStream.java:75"$0$0$0$3$27$"		this.buf = resizedBuffer;"
"ResizableByteArrayOutputStream.java:76"$0$0$0$1$2$"	}"
"ResizableByteArrayOutputStream.java:77"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:78"$0$0$0$1$4$"	/**"
"ResizableByteArrayOutputStream.java:79"$0$0$0$6$34$"	 * Grow the internal buffer size."
"ResizableByteArrayOutputStream.java:80"$0$0$0$14$83$"	 * @param additionalCapacity the number of bytes to add to the current buffer size"
"ResizableByteArrayOutputStream.java:81"$0$0$0$3$46$"	 * @see ResizableByteArrayOutputStream#size()"
"ResizableByteArrayOutputStream.java:82"$0$0$0$1$4$"	 */"
"ResizableByteArrayOutputStream.java:83"$0$0$0$6$56$"	public synchronized void grow(int additionalCapacity) {"
"ResizableByteArrayOutputStream.java:84"$0$0$0$10$84$"		Assert.isTrue(additionalCapacity >= 0, ""Additional capacity must be 0 or higher"");"
"ResizableByteArrayOutputStream.java:85"$0$0$0$7$58$"		if (this.count + additionalCapacity > this.buf.length) {"
"ResizableByteArrayOutputStream.java:86"$0$0$0$9$84$"			int newCapacity = Math.max(this.buf.length * 2, this.count + additionalCapacity);"
"ResizableByteArrayOutputStream.java:87"$0$0$0$1$23$"			resize(newCapacity);"
"ResizableByteArrayOutputStream.java:88"$0$0$0$1$3$"		}"
"ResizableByteArrayOutputStream.java:89"$0$0$0$1$2$"	}"
"ResizableByteArrayOutputStream.java:90"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:91"$0$0$0$1$4$"	/**"
"ResizableByteArrayOutputStream.java:92"$0$0$0$10$61$"	 * Return the current size of this stream's internal buffer."
"ResizableByteArrayOutputStream.java:93"$0$0$0$1$4$"	 */"
"ResizableByteArrayOutputStream.java:94"$0$0$0$5$37$"	public synchronized int capacity() {"
"ResizableByteArrayOutputStream.java:95"$0$0$0$2$25$"		return this.buf.length;"
"ResizableByteArrayOutputStream.java:96"$0$0$0$1$2$"	}"
"ResizableByteArrayOutputStream.java:97"$0$0$0$0$0$""
"ResizableByteArrayOutputStream.java:98"$0$0$0$1$1$"}"
"SerializationUtils.java:1"$0$0$0$1$2$"/*"
"SerializationUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"SerializationUtils.java:3"$0$0$0$1$2$" *"
"SerializationUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SerializationUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SerializationUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SerializationUtils.java:7"$0$0$0$1$2$" *"
"SerializationUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SerializationUtils.java:9"$0$0$0$1$2$" *"
"SerializationUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SerializationUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SerializationUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SerializationUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SerializationUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"SerializationUtils.java:15"$0$0$0$1$3$" */"
"SerializationUtils.java:16"$0$0$0$0$0$""
"SerializationUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"SerializationUtils.java:18"$0$0$0$0$0$""
"SerializationUtils.java:19"$0$0$0$2$36$"import java.io.ByteArrayInputStream;"
"SerializationUtils.java:20"$0$0$0$2$37$"import java.io.ByteArrayOutputStream;"
"SerializationUtils.java:21"$0$0$0$2$27$"import java.io.IOException;"
"SerializationUtils.java:22"$0$0$0$2$33$"import java.io.ObjectInputStream;"
"SerializationUtils.java:23"$0$0$0$2$34$"import java.io.ObjectOutputStream;"
"SerializationUtils.java:24"$0$0$0$0$0$""
"SerializationUtils.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SerializationUtils.java:26"$0$0$0$0$0$""
"SerializationUtils.java:27"$0$0$0$1$3$"/**"
"SerializationUtils.java:28"$0$0$0$7$58$" * Static utilities for serialization and deserialization."
"SerializationUtils.java:29"$0$0$0$1$2$" *"
"SerializationUtils.java:30"$0$0$0$4$20$" * @author Dave Syer"
"SerializationUtils.java:31"$0$0$0$3$15$" * @since 3.0.5"
"SerializationUtils.java:32"$0$0$0$1$3$" */"
"SerializationUtils.java:33"$0$0$0$5$42$"public abstract class SerializationUtils {"
"SerializationUtils.java:34"$0$0$0$0$0$""
"SerializationUtils.java:35"$0$0$0$1$4$"	/**"
"SerializationUtils.java:36"$0$0$0$9$47$"	 * Serialize the given object to a byte array."
"SerializationUtils.java:37"$0$0$0$7$41$"	 * @param object the object to serialize"
"SerializationUtils.java:38"$0$0$0$13$75$"	 * @return an array of bytes representing the object in a portable fashion"
"SerializationUtils.java:39"$0$0$0$1$4$"	 */"
"SerializationUtils.java:40"$0$0$0$1$10$"	@Nullable"
"SerializationUtils.java:41"$0$0$0$7$58$"	public static byte[] serialize(@Nullable Object object) {"
"SerializationUtils.java:42"$0$0$0$5$23$"		if (object == null) {"
"SerializationUtils.java:43"$0$0$0$2$15$"			return null;"
"SerializationUtils.java:44"$0$0$0$1$3$"		}"
"SerializationUtils.java:45"$0$0$0$5$63$"		ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);"
"SerializationUtils.java:46"$0$0$0$7$63$"		try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {"
"SerializationUtils.java:47"$0$0$0$1$27$"			oos.writeObject(object);"
"SerializationUtils.java:48"$0$0$0$1$15$"			oos.flush();"
"SerializationUtils.java:49"$0$0$0$1$3$"		}"
"SerializationUtils.java:50"$0$0$0$4$26$"		catch (IOException ex) {"
"SerializationUtils.java:51"$1$0$0$12$102$"			throw new IllegalArgumentException(""Failed to serialize object of type: "" + object.getClass(), ex);"
"SerializationUtils.java:52"$0$0$0$1$3$"		}"
"SerializationUtils.java:53"$0$0$0$2$28$"		return baos.toByteArray();"
"SerializationUtils.java:54"$0$0$0$1$2$"	}"
"SerializationUtils.java:55"$0$0$0$0$0$""
"SerializationUtils.java:56"$0$0$0$1$4$"	/**"
"SerializationUtils.java:57"$0$0$0$8$46$"	 * Deserialize the byte array into an object."
"SerializationUtils.java:58"$0$0$0$6$36$"	 * @param bytes a serialized object"
"SerializationUtils.java:59"$0$0$0$8$49$"	 * @return the result of deserializing the bytes"
"SerializationUtils.java:60"$0$0$0$1$4$"	 */"
"SerializationUtils.java:61"$0$0$0$1$10$"	@Nullable"
"SerializationUtils.java:62"$0$0$0$7$59$"	public static Object deserialize(@Nullable byte[] bytes) {"
"SerializationUtils.java:63"$0$0$0$5$22$"		if (bytes == null) {"
"SerializationUtils.java:64"$0$0$0$2$15$"			return null;"
"SerializationUtils.java:65"$0$0$0$1$3$"		}"
"SerializationUtils.java:66"$0$0$0$8$88$"		try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes))) {"
"SerializationUtils.java:67"$0$0$0$2$27$"			return ois.readObject();"
"SerializationUtils.java:68"$0$0$0$1$3$"		}"
"SerializationUtils.java:69"$0$0$0$4$26$"		catch (IOException ex) {"
"SerializationUtils.java:70"$0$0$0$7$74$"			throw new IllegalArgumentException(""Failed to deserialize object"", ex);"
"SerializationUtils.java:71"$0$0$0$1$3$"		}"
"SerializationUtils.java:72"$0$0$0$4$37$"		catch (ClassNotFoundException ex) {"
"SerializationUtils.java:73"$0$0$0$8$76$"			throw new IllegalStateException(""Failed to deserialize object type"", ex);"
"SerializationUtils.java:74"$0$0$0$1$3$"		}"
"SerializationUtils.java:75"$0$0$0$1$2$"	}"
"SerializationUtils.java:76"$0$0$0$0$0$""
"SerializationUtils.java:77"$0$0$0$1$1$"}"
"StringUtils.java:1"$0$0$0$1$2$"/*"
"StringUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"StringUtils.java:3"$0$0$0$1$2$" *"
"StringUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StringUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StringUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StringUtils.java:7"$0$0$0$1$2$" *"
"StringUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StringUtils.java:9"$0$0$0$1$2$" *"
"StringUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StringUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StringUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StringUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StringUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"StringUtils.java:15"$0$0$0$1$3$" */"
"StringUtils.java:16"$0$0$0$0$0$""
"StringUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"StringUtils.java:18"$0$0$0$0$0$""
"StringUtils.java:19"$0$0$0$2$37$"import java.io.ByteArrayOutputStream;"
"StringUtils.java:20"$0$0$0$2$32$"import java.nio.charset.Charset;"
"StringUtils.java:21"$0$0$0$2$27$"import java.util.ArrayList;"
"StringUtils.java:22"$0$0$0$2$24$"import java.util.Arrays;"
"StringUtils.java:23"$0$0$0$2$28$"import java.util.Collection;"
"StringUtils.java:24"$0$0$0$2$29$"import java.util.Collections;"
"StringUtils.java:25"$0$0$0$2$29$"import java.util.Enumeration;"
"StringUtils.java:26"$0$0$0$2$26$"import java.util.Iterator;"
"StringUtils.java:27"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"StringUtils.java:28"$0$0$0$2$28$"import java.util.LinkedList;"
"StringUtils.java:29"$0$0$0$2$22$"import java.util.List;"
"StringUtils.java:30"$0$0$0$2$24$"import java.util.Locale;"
"StringUtils.java:31"$0$0$0$2$28$"import java.util.Properties;"
"StringUtils.java:32"$0$0$0$2$21$"import java.util.Set;"
"StringUtils.java:33"$0$0$0$2$30$"import java.util.StringJoiner;"
"StringUtils.java:34"$0$0$0$2$33$"import java.util.StringTokenizer;"
"StringUtils.java:35"$0$0$0$2$26$"import java.util.TimeZone;"
"StringUtils.java:36"$0$0$0$0$0$""
"StringUtils.java:37"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StringUtils.java:38"$0$0$0$0$0$""
"StringUtils.java:39"$0$0$0$1$3$"/**"
"StringUtils.java:40"$0$0$0$6$48$" * Miscellaneous {@link String} utility methods."
"StringUtils.java:41"$0$0$0$1$2$" *"
"StringUtils.java:42"$0$0$0$9$60$" * <p>Mainly for internal use within the framework; consider"
"StringUtils.java:43"$0$0$0$5$86$" * <a href=""https://commons.apache.org/proper/commons-lang/"">Apache's Commons Lang</a>"
"StringUtils.java:44"$0$0$0$10$62$" * for a more comprehensive suite of {@code String} utilities."
"StringUtils.java:45"$0$0$0$1$2$" *"
"StringUtils.java:46"$0$0$0$11$73$" * <p>This class delivers some simple functionality that should really be"
"StringUtils.java:47"$0$0$0$11$69$" * provided by the core Java {@link String} and {@link StringBuilder}"
"StringUtils.java:48"$0$0$0$10$67$" * classes. It also provides easy-to-use methods to convert between"
"StringUtils.java:49"$0$0$0$11$70$" * delimited strings, such as CSV strings, and collections and arrays."
"StringUtils.java:50"$0$0$0$1$2$" *"
"StringUtils.java:51"$0$0$0$4$22$" * @author Rod Johnson"
"StringUtils.java:52"$0$0$0$4$26$" * @author Juergen Hoeller"
"StringUtils.java:53"$0$0$0$4$23$" * @author Keith Donald"
"StringUtils.java:54"$0$0$0$4$21$" * @author Rob Harrop"
"StringUtils.java:55"$0$0$0$4$21$" * @author Rick Evans"
"StringUtils.java:56"$0$0$0$4$24$" * @author Arjen Poutsma"
"StringUtils.java:57"$0$0$0$4$22$" * @author Sam Brannen"
"StringUtils.java:58"$0$0$0$4$23$" * @author Brian Clozel"
"StringUtils.java:59"$0$0$0$5$23$" * @since 16 April 2001"
"StringUtils.java:60"$0$0$0$1$3$" */"
"StringUtils.java:61"$0$0$0$5$35$"public abstract class StringUtils {"
"StringUtils.java:62"$0$0$0$0$0$""
"StringUtils.java:63"$0$0$0$7$55$"	private static final String[] EMPTY_STRING_ARRAY = {};"
"StringUtils.java:64"$0$0$0$0$0$""
"StringUtils.java:65"$0$0$0$7$52$"	private static final String FOLDER_SEPARATOR = ""/"";"
"StringUtils.java:66"$0$0$0$0$0$""
"StringUtils.java:67"$0$0$0$7$61$"	private static final String WINDOWS_FOLDER_SEPARATOR = ""\\"";"
"StringUtils.java:68"$0$0$0$0$0$""
"StringUtils.java:69"$0$0$0$7$45$"	private static final String TOP_PATH = "".."";"
"StringUtils.java:70"$0$0$0$0$0$""
"StringUtils.java:71"$0$0$0$7$48$"	private static final String CURRENT_PATH = ""."";"
"StringUtils.java:72"$0$0$0$0$0$""
"StringUtils.java:73"$0$0$0$7$53$"	private static final char EXTENSION_SEPARATOR = '.';"
"StringUtils.java:74"$0$0$0$0$0$""
"StringUtils.java:75"$0$0$0$0$0$""
"StringUtils.java:76"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"StringUtils.java:77"$0$0$1$8$56$"	// General convenience methods for working with Strings"
"StringUtils.java:78"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"StringUtils.java:79"$0$0$0$0$0$""
"StringUtils.java:80"$0$0$0$1$4$"	/**"
"StringUtils.java:81"$0$0$0$12$72$"	 * Check whether the given object (possibly a {@code String}) is empty."
"StringUtils.java:82"$0$0$0$9$66$"	 * This is effectively a shortcut for {@code !hasLength(String)}."
"StringUtils.java:83"$0$0$0$12$69$"	 * <p>This method accepts any Object as an argument, comparing it to"
"StringUtils.java:84"$0$0$0$12$68$"	 * {@code null} and the empty String. As a consequence, this method"
"StringUtils.java:85"$0$0$0$11$68$"	 * will never return {@code true} for a non-null non-String object."
"StringUtils.java:86"$0$0$0$11$73$"	 * <p>The Object signature is useful for general attribute handling code"
"StringUtils.java:87"$0$0$0$12$70$"	 * that commonly deals with Strings but generally has to iterate over"
"StringUtils.java:88"$0$0$0$12$73$"	 * Objects since attributes may e.g. be primitive value objects as well."
"StringUtils.java:89"$0$0$0$12$72$"	 * <p><b>Note: If the object is typed to {@code String} upfront, prefer"
"StringUtils.java:90"$0$0$0$7$71$"	 * {@link #hasLength(String)} or {@link #hasText(String)} instead.</b>"
"StringUtils.java:91"$0$0$0$10$63$"	 * @param str the candidate object (possibly a {@code String})"
"StringUtils.java:92"$0$0$0$3$16$"	 * @since 3.2.1"
"StringUtils.java:93"$0$0$0$3$27$"	 * @see #hasLength(String)"
"StringUtils.java:94"$0$0$0$3$25$"	 * @see #hasText(String)"
"StringUtils.java:95"$0$0$0$1$4$"	 */"
"StringUtils.java:96"$0$0$0$7$54$"	public static boolean isEmpty(@Nullable Object str) {"
"StringUtils.java:97"$0$0$0$6$41$"		return (str == null || """".equals(str));"
"StringUtils.java:98"$0$0$0$1$2$"	}"
"StringUtils.java:99"$0$0$0$0$0$""
"StringUtils.java:100"$0$0$0$1$4$"	/**"
"StringUtils.java:101"$0$0$0$12$73$"	 * Check that the given {@code CharSequence} is neither {@code null} nor"
"StringUtils.java:102"$0$0$0$4$16$"	 * of length 0."
"StringUtils.java:103"$0$0$0$11$72$"	 * <p>Note: this method returns {@code true} for a {@code CharSequence}"
"StringUtils.java:104"$0$0$0$6$39$"	 * that purely consists of whitespace."
"StringUtils.java:105"$0$0$0$3$25$"	 * <p><pre class=""code"">"
"StringUtils.java:106"$0$0$0$4$39$"	 * StringUtils.hasLength(null) = false"
"StringUtils.java:107"$0$0$0$4$37$"	 * StringUtils.hasLength("""") = false"
"StringUtils.java:108"$0$0$0$5$37$"	 * StringUtils.hasLength("" "") = true"
"StringUtils.java:109"$0$0$0$4$41$"	 * StringUtils.hasLength(""Hello"") = true"
"StringUtils.java:110"$0$0$0$2$10$"	 * </pre>"
"StringUtils.java:111"$0$0$0$12$70$"	 * @param str the {@code CharSequence} to check (may be {@code null})"
"StringUtils.java:112"$0$0$0$15$87$"	 * @return {@code true} if the {@code CharSequence} is not {@code null} and has length"
"StringUtils.java:113"$0$0$0$3$27$"	 * @see #hasLength(String)"
"StringUtils.java:114"$0$0$0$3$31$"	 * @see #hasText(CharSequence)"
"StringUtils.java:115"$0$0$0$1$4$"	 */"
"StringUtils.java:116"$0$0$0$7$62$"	public static boolean hasLength(@Nullable CharSequence str) {"
"StringUtils.java:117"$0$0$0$8$43$"		return (str != null && str.length() > 0);"
"StringUtils.java:118"$0$0$0$1$2$"	}"
"StringUtils.java:119"$0$0$0$0$0$""
"StringUtils.java:120"$0$0$0$1$4$"	/**"
"StringUtils.java:121"$0$0$0$15$80$"	 * Check that the given {@code String} is neither {@code null} nor of length 0."
"StringUtils.java:122"$0$0$0$12$71$"	 * <p>Note: this method returns {@code true} for a {@code String} that"
"StringUtils.java:123"$0$0$0$5$34$"	 * purely consists of whitespace."
"StringUtils.java:124"$0$0$0$12$64$"	 * @param str the {@code String} to check (may be {@code null})"
"StringUtils.java:125"$0$0$0$15$81$"	 * @return {@code true} if the {@code String} is not {@code null} and has length"
"StringUtils.java:126"$0$0$0$3$33$"	 * @see #hasLength(CharSequence)"
"StringUtils.java:127"$0$0$0$3$25$"	 * @see #hasText(String)"
"StringUtils.java:128"$0$0$0$1$4$"	 */"
"StringUtils.java:129"$0$0$0$7$56$"	public static boolean hasLength(@Nullable String str) {"
"StringUtils.java:130"$0$0$0$6$41$"		return (str != null && !str.isEmpty());"
"StringUtils.java:131"$0$0$0$1$2$"	}"
"StringUtils.java:132"$0$0$0$0$0$""
"StringUtils.java:133"$0$0$0$1$4$"	/**"
"StringUtils.java:134"$0$0$0$10$79$"	 * Check whether the given {@code CharSequence} contains actual <em>text</em>."
"StringUtils.java:135"$0$0$0$10$65$"	 * <p>More specifically, this method returns {@code true} if the"
"StringUtils.java:136"$0$0$0$12$72$"	 * {@code CharSequence} is not {@code null}, its length is greater than"
"StringUtils.java:137"$0$0$0$10$61$"	 * 0, and it contains at least one non-whitespace character."
"StringUtils.java:138"$0$0$0$3$25$"	 * <p><pre class=""code"">"
"StringUtils.java:139"$0$0$0$4$37$"	 * StringUtils.hasText(null) = false"
"StringUtils.java:140"$0$0$0$4$35$"	 * StringUtils.hasText("""") = false"
"StringUtils.java:141"$0$0$0$5$36$"	 * StringUtils.hasText("" "") = false"
"StringUtils.java:142"$0$0$0$4$39$"	 * StringUtils.hasText(""12345"") = true"
"StringUtils.java:143"$0$0$0$6$41$"	 * StringUtils.hasText("" 12345 "") = true"
"StringUtils.java:144"$0$0$0$2$10$"	 * </pre>"
"StringUtils.java:145"$0$0$0$12$70$"	 * @param str the {@code CharSequence} to check (may be {@code null})"
"StringUtils.java:146"$0$0$0$12$73$"	 * @return {@code true} if the {@code CharSequence} is not {@code null},"
"StringUtils.java:147"$0$0$0$14$73$"	 * its length is greater than 0, and it does not contain whitespace only"
"StringUtils.java:148"$0$0$0$3$25$"	 * @see #hasText(String)"
"StringUtils.java:149"$0$0$0$3$33$"	 * @see #hasLength(CharSequence)"
"StringUtils.java:150"$0$0$0$3$31$"	 * @see Character#isWhitespace"
"StringUtils.java:151"$0$0$0$1$4$"	 */"
"StringUtils.java:152"$0$0$0$7$60$"	public static boolean hasText(@Nullable CharSequence str) {"
"StringUtils.java:153"$0$0$0$10$64$"		return (str != null && str.length() > 0 && containsText(str));"
"StringUtils.java:154"$0$0$0$1$2$"	}"
"StringUtils.java:155"$0$0$0$0$0$""
"StringUtils.java:156"$0$0$0$1$4$"	/**"
"StringUtils.java:157"$0$0$0$10$73$"	 * Check whether the given {@code String} contains actual <em>text</em>."
"StringUtils.java:158"$0$0$0$10$65$"	 * <p>More specifically, this method returns {@code true} if the"
"StringUtils.java:159"$0$0$0$13$69$"	 * {@code String} is not {@code null}, its length is greater than 0,"
"StringUtils.java:160"$0$0$0$9$58$"	 * and it contains at least one non-whitespace character."
"StringUtils.java:161"$0$0$0$12$64$"	 * @param str the {@code String} to check (may be {@code null})"
"StringUtils.java:162"$0$0$0$13$71$"	 * @return {@code true} if the {@code String} is not {@code null}, its"
"StringUtils.java:163"$0$0$0$13$69$"	 * length is greater than 0, and it does not contain whitespace only"
"StringUtils.java:164"$0$0$0$3$31$"	 * @see #hasText(CharSequence)"
"StringUtils.java:165"$0$0$0$3$27$"	 * @see #hasLength(String)"
"StringUtils.java:166"$0$0$0$3$31$"	 * @see Character#isWhitespace"
"StringUtils.java:167"$0$0$0$1$4$"	 */"
"StringUtils.java:168"$0$0$0$7$54$"	public static boolean hasText(@Nullable String str) {"
"StringUtils.java:169"$0$0$0$8$62$"		return (str != null && !str.isEmpty() && containsText(str));"
"StringUtils.java:170"$0$0$0$1$2$"	}"
"StringUtils.java:171"$0$0$0$0$0$""
"StringUtils.java:172"$0$0$0$6$56$"	private static boolean containsText(CharSequence str) {"
"StringUtils.java:173"$0$0$0$4$28$"		int strLen = str.length();"
"StringUtils.java:174"$0$0$0$10$36$"		for (int i = 0; i < strLen; i++) {"
"StringUtils.java:175"$0$0$0$3$48$"			if (!Character.isWhitespace(str.charAt(i))) {"
"StringUtils.java:176"$0$0$0$2$16$"				return true;"
"StringUtils.java:177"$0$0$0$1$4$"			}"
"StringUtils.java:178"$0$0$0$1$3$"		}"
"StringUtils.java:179"$0$0$0$2$15$"		return false;"
"StringUtils.java:180"$0$0$0$1$2$"	}"
"StringUtils.java:181"$0$0$0$0$0$""
"StringUtils.java:182"$0$0$0$1$4$"	/**"
"StringUtils.java:183"$0$0$0$11$84$"	 * Check whether the given {@code CharSequence} contains any whitespace characters."
"StringUtils.java:184"$0$0$0$12$70$"	 * @param str the {@code CharSequence} to check (may be {@code null})"
"StringUtils.java:185"$0$0$0$12$69$"	 * @return {@code true} if the {@code CharSequence} is not empty and"
"StringUtils.java:186"$0$0$0$7$44$"	 * contains at least 1 whitespace character"
"StringUtils.java:187"$0$0$0$3$31$"	 * @see Character#isWhitespace"
"StringUtils.java:188"$0$0$0$1$4$"	 */"
"StringUtils.java:189"$0$0$0$7$71$"	public static boolean containsWhitespace(@Nullable CharSequence str) {"
"StringUtils.java:190"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:191"$0$0$0$2$16$"			return false;"
"StringUtils.java:192"$0$0$0$1$3$"		}"
"StringUtils.java:193"$0$0$0$0$0$""
"StringUtils.java:194"$0$0$0$4$28$"		int strLen = str.length();"
"StringUtils.java:195"$0$0$0$10$36$"		for (int i = 0; i < strLen; i++) {"
"StringUtils.java:196"$0$0$0$3$47$"			if (Character.isWhitespace(str.charAt(i))) {"
"StringUtils.java:197"$0$0$0$2$16$"				return true;"
"StringUtils.java:198"$0$0$0$1$4$"			}"
"StringUtils.java:199"$0$0$0$1$3$"		}"
"StringUtils.java:200"$0$0$0$2$15$"		return false;"
"StringUtils.java:201"$0$0$0$1$2$"	}"
"StringUtils.java:202"$0$0$0$0$0$""
"StringUtils.java:203"$0$0$0$1$4$"	/**"
"StringUtils.java:204"$0$0$0$11$78$"	 * Check whether the given {@code String} contains any whitespace characters."
"StringUtils.java:205"$0$0$0$12$64$"	 * @param str the {@code String} to check (may be {@code null})"
"StringUtils.java:206"$0$0$0$12$63$"	 * @return {@code true} if the {@code String} is not empty and"
"StringUtils.java:207"$0$0$0$7$44$"	 * contains at least 1 whitespace character"
"StringUtils.java:208"$0$0$0$3$42$"	 * @see #containsWhitespace(CharSequence)"
"StringUtils.java:209"$0$0$0$1$4$"	 */"
"StringUtils.java:210"$0$0$0$7$65$"	public static boolean containsWhitespace(@Nullable String str) {"
"StringUtils.java:211"$0$0$0$3$48$"		return containsWhitespace((CharSequence) str);"
"StringUtils.java:212"$0$0$0$1$2$"	}"
"StringUtils.java:213"$0$0$0$0$0$""
"StringUtils.java:214"$0$0$0$1$4$"	/**"
"StringUtils.java:215"$0$0$0$11$71$"	 * Trim leading and trailing whitespace from the given {@code String}."
"StringUtils.java:216"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:217"$0$0$0$6$38$"	 * @return the trimmed {@code String}"
"StringUtils.java:218"$0$0$0$3$41$"	 * @see java.lang.Character#isWhitespace"
"StringUtils.java:219"$0$0$0$1$4$"	 */"
"StringUtils.java:220"$0$0$0$6$50$"	public static String trimWhitespace(String str) {"
"StringUtils.java:221"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:222"$0$0$0$2$14$"			return str;"
"StringUtils.java:223"$0$0$0$1$3$"		}"
"StringUtils.java:224"$0$0$0$0$0$""
"StringUtils.java:225"$0$0$0$4$21$"		int beginIndex = 0;"
"StringUtils.java:226"$0$0$0$6$34$"		int endIndex = str.length() - 1;"
"StringUtils.java:227"$0$0$0$0$0$""
"StringUtils.java:228"$0$0$0$7$84$"		while (beginIndex <= endIndex && Character.isWhitespace(str.charAt(beginIndex))) {"
"StringUtils.java:229"$0$0$0$1$16$"			beginIndex++;"
"StringUtils.java:230"$0$0$0$1$3$"		}"
"StringUtils.java:231"$0$0$0$0$0$""
"StringUtils.java:232"$0$0$0$7$81$"		while (endIndex > beginIndex && Character.isWhitespace(str.charAt(endIndex))) {"
"StringUtils.java:233"$0$0$0$1$14$"			endIndex--;"
"StringUtils.java:234"$0$0$0$1$3$"		}"
"StringUtils.java:235"$0$0$0$0$0$""
"StringUtils.java:236"$0$0$0$5$49$"		return str.substring(beginIndex, endIndex + 1);"
"StringUtils.java:237"$0$0$0$1$2$"	}"
"StringUtils.java:238"$0$0$0$0$0$""
"StringUtils.java:239"$0$0$0$1$4$"	/**"
"StringUtils.java:240"$0$0$0$9$61$"	 * Trim <i>all</i> whitespace from the given {@code String}:"
"StringUtils.java:241"$0$0$0$7$49$"	 * leading, trailing, and in between characters."
"StringUtils.java:242"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:243"$0$0$0$6$38$"	 * @return the trimmed {@code String}"
"StringUtils.java:244"$0$0$0$3$41$"	 * @see java.lang.Character#isWhitespace"
"StringUtils.java:245"$0$0$0$1$4$"	 */"
"StringUtils.java:246"$0$0$0$6$53$"	public static String trimAllWhitespace(String str) {"
"StringUtils.java:247"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:248"$0$0$0$2$14$"			return str;"
"StringUtils.java:249"$0$0$0$1$3$"		}"
"StringUtils.java:250"$0$0$0$0$0$""
"StringUtils.java:251"$0$0$0$4$25$"		int len = str.length();"
"StringUtils.java:252"$0$0$0$5$53$"		StringBuilder sb = new StringBuilder(str.length());"
"StringUtils.java:253"$0$0$0$10$33$"		for (int i = 0; i < len; i++) {"
"StringUtils.java:254"$0$0$0$4$26$"			char c = str.charAt(i);"
"StringUtils.java:255"$0$0$0$3$36$"			if (!Character.isWhitespace(c)) {"
"StringUtils.java:256"$0$0$0$1$17$"				sb.append(c);"
"StringUtils.java:257"$0$0$0$1$4$"			}"
"StringUtils.java:258"$0$0$0$1$3$"		}"
"StringUtils.java:259"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:260"$0$0$0$1$2$"	}"
"StringUtils.java:261"$0$0$0$0$0$""
"StringUtils.java:262"$0$0$0$1$4$"	/**"
"StringUtils.java:263"$0$0$0$9$58$"	 * Trim leading whitespace from the given {@code String}."
"StringUtils.java:264"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:265"$0$0$0$6$38$"	 * @return the trimmed {@code String}"
"StringUtils.java:266"$0$0$0$3$41$"	 * @see java.lang.Character#isWhitespace"
"StringUtils.java:267"$0$0$0$1$4$"	 */"
"StringUtils.java:268"$0$0$0$6$57$"	public static String trimLeadingWhitespace(String str) {"
"StringUtils.java:269"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:270"$0$0$0$2$14$"			return str;"
"StringUtils.java:271"$0$0$0$1$3$"		}"
"StringUtils.java:272"$0$0$0$0$0$""
"StringUtils.java:273"$0$0$0$5$44$"		StringBuilder sb = new StringBuilder(str);"
"StringUtils.java:274"$0$0$0$7$67$"		while (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {"
"StringUtils.java:275"$0$0$0$1$22$"			sb.deleteCharAt(0);"
"StringUtils.java:276"$0$0$0$1$3$"		}"
"StringUtils.java:277"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:278"$0$0$0$1$2$"	}"
"StringUtils.java:279"$0$0$0$0$0$""
"StringUtils.java:280"$0$0$0$1$4$"	/**"
"StringUtils.java:281"$0$0$0$9$59$"	 * Trim trailing whitespace from the given {@code String}."
"StringUtils.java:282"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:283"$0$0$0$6$38$"	 * @return the trimmed {@code String}"
"StringUtils.java:284"$0$0$0$3$41$"	 * @see java.lang.Character#isWhitespace"
"StringUtils.java:285"$0$0$0$1$4$"	 */"
"StringUtils.java:286"$0$0$0$6$58$"	public static String trimTrailingWhitespace(String str) {"
"StringUtils.java:287"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:288"$0$0$0$2$14$"			return str;"
"StringUtils.java:289"$0$0$0$1$3$"		}"
"StringUtils.java:290"$0$0$0$0$0$""
"StringUtils.java:291"$0$0$0$5$44$"		StringBuilder sb = new StringBuilder(str);"
"StringUtils.java:292"$0$0$0$9$81$"		while (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {"
"StringUtils.java:293"$0$0$0$3$36$"			sb.deleteCharAt(sb.length() - 1);"
"StringUtils.java:294"$0$0$0$1$3$"		}"
"StringUtils.java:295"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:296"$0$0$0$1$2$"	}"
"StringUtils.java:297"$0$0$0$0$0$""
"StringUtils.java:298"$0$0$0$1$4$"	/**"
"StringUtils.java:299"$0$0$0$14$89$"	 * Trim all occurrences of the supplied leading character from the given {@code String}."
"StringUtils.java:300"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:301"$0$0$0$9$63$"	 * @param leadingCharacter the leading character to be trimmed"
"StringUtils.java:302"$0$0$0$6$38$"	 * @return the trimmed {@code String}"
"StringUtils.java:303"$0$0$0$1$4$"	 */"
"StringUtils.java:304"$0$0$0$8$79$"	public static String trimLeadingCharacter(String str, char leadingCharacter) {"
"StringUtils.java:305"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:306"$0$0$0$2$14$"			return str;"
"StringUtils.java:307"$0$0$0$1$3$"		}"
"StringUtils.java:308"$0$0$0$0$0$""
"StringUtils.java:309"$0$0$0$5$44$"		StringBuilder sb = new StringBuilder(str);"
"StringUtils.java:310"$0$0$0$9$63$"		while (sb.length() > 0 && sb.charAt(0) == leadingCharacter) {"
"StringUtils.java:311"$0$0$0$1$22$"			sb.deleteCharAt(0);"
"StringUtils.java:312"$0$0$0$1$3$"		}"
"StringUtils.java:313"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:314"$0$0$0$1$2$"	}"
"StringUtils.java:315"$0$0$0$0$0$""
"StringUtils.java:316"$0$0$0$1$4$"	/**"
"StringUtils.java:317"$0$0$0$14$90$"	 * Trim all occurrences of the supplied trailing character from the given {@code String}."
"StringUtils.java:318"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:319"$0$0$0$9$65$"	 * @param trailingCharacter the trailing character to be trimmed"
"StringUtils.java:320"$0$0$0$6$38$"	 * @return the trimmed {@code String}"
"StringUtils.java:321"$0$0$0$1$4$"	 */"
"StringUtils.java:322"$0$0$0$8$81$"	public static String trimTrailingCharacter(String str, char trailingCharacter) {"
"StringUtils.java:323"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:324"$0$0$0$2$14$"			return str;"
"StringUtils.java:325"$0$0$0$1$3$"		}"
"StringUtils.java:326"$0$0$0$0$0$""
"StringUtils.java:327"$0$0$0$5$44$"		StringBuilder sb = new StringBuilder(str);"
"StringUtils.java:328"$0$0$0$11$78$"		while (sb.length() > 0 && sb.charAt(sb.length() - 1) == trailingCharacter) {"
"StringUtils.java:329"$0$0$0$3$36$"			sb.deleteCharAt(sb.length() - 1);"
"StringUtils.java:330"$0$0$0$1$3$"		}"
"StringUtils.java:331"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:332"$0$0$0$1$2$"	}"
"StringUtils.java:333"$0$0$0$0$0$""
"StringUtils.java:334"$0$0$0$1$4$"	/**"
"StringUtils.java:335"$0$0$0$12$70$"	 * Test if the given {@code String} starts with the specified prefix,"
"StringUtils.java:336"$0$0$0$4$30$"	 * ignoring upper/lower case."
"StringUtils.java:337"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:338"$0$0$0$8$40$"	 * @param prefix the prefix to look for"
"StringUtils.java:339"$0$0$0$3$36$"	 * @see java.lang.String#startsWith"
"StringUtils.java:340"$0$0$0$1$4$"	 */"
"StringUtils.java:341"$0$0$0$10$92$"	public static boolean startsWithIgnoreCase(@Nullable String str, @Nullable String prefix) {"
"StringUtils.java:342"$0$0$0$13$77$"		return (str != null && prefix != null && str.length() >= prefix.length() &&"
"StringUtils.java:343"$0$0$0$5$60$"				str.regionMatches(true, 0, prefix, 0, prefix.length()));"
"StringUtils.java:344"$0$0$0$1$2$"	}"
"StringUtils.java:345"$0$0$0$0$0$""
"StringUtils.java:346"$0$0$0$1$4$"	/**"
"StringUtils.java:347"$0$0$0$12$68$"	 * Test if the given {@code String} ends with the specified suffix,"
"StringUtils.java:348"$0$0$0$4$30$"	 * ignoring upper/lower case."
"StringUtils.java:349"$0$0$0$8$42$"	 * @param str the {@code String} to check"
"StringUtils.java:350"$0$0$0$8$40$"	 * @param suffix the suffix to look for"
"StringUtils.java:351"$0$0$0$3$34$"	 * @see java.lang.String#endsWith"
"StringUtils.java:352"$0$0$0$1$4$"	 */"
"StringUtils.java:353"$0$0$0$10$90$"	public static boolean endsWithIgnoreCase(@Nullable String str, @Nullable String suffix) {"
"StringUtils.java:354"$0$0$0$13$77$"		return (str != null && suffix != null && str.length() >= suffix.length() &&"
"StringUtils.java:355"$0$0$0$7$89$"				str.regionMatches(true, str.length() - suffix.length(), suffix, 0, suffix.length()));"
"StringUtils.java:356"$0$0$0$1$2$"	}"
"StringUtils.java:357"$0$0$0$0$0$""
"StringUtils.java:358"$0$0$0$1$4$"	/**"
"StringUtils.java:359"$0$0$0$10$61$"	 * Test whether the given string matches the given substring"
"StringUtils.java:360"$0$0$0$5$23$"	 * at the given index."
"StringUtils.java:361"$0$0$0$8$53$"	 * @param str the original string (or StringBuilder)"
"StringUtils.java:362"$0$0$0$13$75$"	 * @param index the index in the original string to start matching against"
"StringUtils.java:363"$0$0$0$11$62$"	 * @param substring the substring to match at the given index"
"StringUtils.java:364"$0$0$0$1$4$"	 */"
"StringUtils.java:365"$0$0$0$10$92$"	public static boolean substringMatch(CharSequence str, int index, CharSequence substring) {"
"StringUtils.java:366"$0$0$0$7$50$"		if (index + substring.length() > str.length()) {"
"StringUtils.java:367"$0$0$0$2$16$"			return false;"
"StringUtils.java:368"$0$0$0$1$3$"		}"
"StringUtils.java:369"$0$0$0$10$48$"		for (int i = 0; i < substring.length(); i++) {"
"StringUtils.java:370"$0$0$0$7$54$"			if (str.charAt(index + i) != substring.charAt(i)) {"
"StringUtils.java:371"$0$0$0$2$17$"				return false;"
"StringUtils.java:372"$0$0$0$1$4$"			}"
"StringUtils.java:373"$0$0$0$1$3$"		}"
"StringUtils.java:374"$0$0$0$2$14$"		return true;"
"StringUtils.java:375"$0$0$0$1$2$"	}"
"StringUtils.java:376"$0$0$0$0$0$""
"StringUtils.java:377"$0$0$0$1$4$"	/**"
"StringUtils.java:378"$0$0$0$13$77$"	 * Count the occurrences of the substring {@code sub} in string {@code str}."
"StringUtils.java:379"$0$0$0$7$34$"	 * @param str string to search in"
"StringUtils.java:380"$0$0$0$7$35$"	 * @param sub string to search for"
"StringUtils.java:381"$0$0$0$1$4$"	 */"
"StringUtils.java:382"$0$0$0$8$63$"	public static int countOccurrencesOf(String str, String sub) {"
"StringUtils.java:383"$0$0$0$5$43$"		if (!hasLength(str) || !hasLength(sub)) {"
"StringUtils.java:384"$0$0$0$2$12$"			return 0;"
"StringUtils.java:385"$0$0$0$1$3$"		}"
"StringUtils.java:386"$0$0$0$0$0$""
"StringUtils.java:387"$0$0$0$4$16$"		int count = 0;"
"StringUtils.java:388"$0$0$0$4$14$"		int pos = 0;"
"StringUtils.java:389"$0$0$0$2$10$"		int idx;"
"StringUtils.java:390"$0$0$0$8$47$"		while ((idx = str.indexOf(sub, pos)) != -1) {"
"StringUtils.java:391"$0$0$0$1$11$"			++count;"
"StringUtils.java:392"$0$0$0$5$28$"			pos = idx + sub.length();"
"StringUtils.java:393"$0$0$0$1$3$"		}"
"StringUtils.java:394"$0$0$0$2$15$"		return count;"
"StringUtils.java:395"$0$0$0$1$2$"	}"
"StringUtils.java:396"$0$0$0$0$0$""
"StringUtils.java:397"$0$0$0$1$4$"	/**"
"StringUtils.java:398"$0$0$0$13$79$"	 * Replace all occurrences of a substring within a string with another string."
"StringUtils.java:399"$0$0$0$7$45$"	 * @param inString {@code String} to examine"
"StringUtils.java:400"$0$0$0$7$47$"	 * @param oldPattern {@code String} to replace"
"StringUtils.java:401"$0$0$0$7$46$"	 * @param newPattern {@code String} to insert"
"StringUtils.java:402"$0$0$0$8$50$"	 * @return a {@code String} with the replacements"
"StringUtils.java:403"$0$0$0$1$4$"	 */"
"StringUtils.java:404"$0$0$0$11$96$"	public static String replace(String inString, String oldPattern, @Nullable String newPattern) {"
"StringUtils.java:405"$0$0$0$9$77$"		if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {"
"StringUtils.java:406"$0$0$0$2$19$"			return inString;"
"StringUtils.java:407"$0$0$0$1$3$"		}"
"StringUtils.java:408"$0$0$0$4$43$"		int index = inString.indexOf(oldPattern);"
"StringUtils.java:409"$0$0$0$5$20$"		if (index == -1) {"
"StringUtils.java:410"$0$0$1$8$45$"			// no occurrence -> can return input as-is"
"StringUtils.java:411"$0$0$0$2$19$"			return inString;"
"StringUtils.java:412"$0$0$0$1$3$"		}"
"StringUtils.java:413"$0$0$0$0$0$""
"StringUtils.java:414"$0$0$0$4$35$"		int capacity = inString.length();"
"StringUtils.java:415"$0$0$0$5$50$"		if (newPattern.length() > oldPattern.length()) {"
"StringUtils.java:416"$0$0$0$3$18$"			capacity += 16;"
"StringUtils.java:417"$0$0$0$1$3$"		}"
"StringUtils.java:418"$0$0$0$5$49$"		StringBuilder sb = new StringBuilder(capacity);"
"StringUtils.java:419"$0$0$0$0$0$""
"StringUtils.java:420"$0$0$0$11$49$"		int pos = 0;  // our position in the old string"
"StringUtils.java:421"$0$0$0$4$35$"		int patLen = oldPattern.length();"
"StringUtils.java:422"$0$0$0$5$22$"		while (index >= 0) {"
"StringUtils.java:423"$0$0$0$3$35$"			sb.append(inString, pos, index);"
"StringUtils.java:424"$0$0$0$1$25$"			sb.append(newPattern);"
"StringUtils.java:425"$0$0$0$5$24$"			pos = index + patLen;"
"StringUtils.java:426"$0$0$0$4$45$"			index = inString.indexOf(oldPattern, pos);"
"StringUtils.java:427"$0$0$0$1$3$"		}"
"StringUtils.java:428"$0$0$0$0$0$""
"StringUtils.java:429"$0$0$1$10$50$"		// append any characters to the right of a match"
"StringUtils.java:430"$0$0$0$3$46$"		sb.append(inString, pos, inString.length());"
"StringUtils.java:431"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:432"$0$0$0$1$2$"	}"
"StringUtils.java:433"$0$0$0$0$0$""
"StringUtils.java:434"$0$0$0$1$4$"	/**"
"StringUtils.java:435"$0$0$0$8$50$"	 * Delete all occurrences of the given substring."
"StringUtils.java:436"$0$0$0$7$47$"	 * @param inString the original {@code String}"
"StringUtils.java:437"$0$0$0$10$59$"	 * @param pattern the pattern to delete all occurrences of"
"StringUtils.java:438"$0$0$0$6$40$"	 * @return the resulting {@code String}"
"StringUtils.java:439"$0$0$0$1$4$"	 */"
"StringUtils.java:440"$0$0$0$8$63$"	public static String delete(String inString, String pattern) {"
"StringUtils.java:441"$0$0$0$4$40$"		return replace(inString, pattern, """");"
"StringUtils.java:442"$0$0$0$1$2$"	}"
"StringUtils.java:443"$0$0$0$0$0$""
"StringUtils.java:444"$0$0$0$1$4$"	/**"
"StringUtils.java:445"$0$0$0$9$51$"	 * Delete any character in a given {@code String}."
"StringUtils.java:446"$0$0$0$7$47$"	 * @param inString the original {@code String}"
"StringUtils.java:447"$0$0$0$9$55$"	 * @param charsToDelete a set of characters to delete."
"StringUtils.java:448"$0$0$0$10$53$"	 * E.g. ""az\n"" will delete 'a's, 'z's and new lines."
"StringUtils.java:449"$0$0$0$6$40$"	 * @return the resulting {@code String}"
"StringUtils.java:450"$0$0$0$1$4$"	 */"
"StringUtils.java:451"$0$0$0$9$82$"	public static String deleteAny(String inString, @Nullable String charsToDelete) {"
"StringUtils.java:452"$0$0$0$5$58$"		if (!hasLength(inString) || !hasLength(charsToDelete)) {"
"StringUtils.java:453"$0$0$0$2$19$"			return inString;"
"StringUtils.java:454"$0$0$0$1$3$"		}"
"StringUtils.java:455"$0$0$0$0$0$""
"StringUtils.java:456"$0$0$0$5$58$"		StringBuilder sb = new StringBuilder(inString.length());"
"StringUtils.java:457"$0$0$0$10$47$"		for (int i = 0; i < inString.length(); i++) {"
"StringUtils.java:458"$0$0$0$4$31$"			char c = inString.charAt(i);"
"StringUtils.java:459"$0$0$0$5$40$"			if (charsToDelete.indexOf(c) == -1) {"
"StringUtils.java:460"$0$0$0$1$17$"				sb.append(c);"
"StringUtils.java:461"$0$0$0$1$4$"			}"
"StringUtils.java:462"$0$0$0$1$3$"		}"
"StringUtils.java:463"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:464"$0$0$0$1$2$"	}"
"StringUtils.java:465"$0$0$0$0$0$""
"StringUtils.java:466"$0$0$0$0$0$""
"StringUtils.java:467"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"StringUtils.java:468"$0$0$1$8$58$"	// Convenience methods for working with formatted Strings"
"StringUtils.java:469"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"StringUtils.java:470"$0$0$0$0$0$""
"StringUtils.java:471"$0$0$0$1$4$"	/**"
"StringUtils.java:472"$0$0$0$9$54$"	 * Quote the given {@code String} with single quotes."
"StringUtils.java:473"$0$0$0$9$57$"	 * @param str the input {@code String} (e.g. ""myString"")"
"StringUtils.java:474"$0$0$0$8$58$"	 * @return the quoted {@code String} (e.g. ""'myString'""),"
"StringUtils.java:475"$0$0$0$10$49$"	 * or {@code null} if the input was {@code null}"
"StringUtils.java:476"$0$0$0$1$4$"	 */"
"StringUtils.java:477"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:478"$0$0$0$7$51$"	public static String quote(@Nullable String str) {"
"StringUtils.java:479"$0$0$0$12$48$"		return (str != null ? ""'"" + str + ""'"" : null);"
"StringUtils.java:480"$0$0$0$1$2$"	}"
"StringUtils.java:481"$0$0$0$0$0$""
"StringUtils.java:482"$0$0$0$1$4$"	/**"
"StringUtils.java:483"$0$0$0$12$66$"	 * Turn the given Object into a {@code String} with single quotes"
"StringUtils.java:484"$0$0$0$12$61$"	 * if it is a {@code String}; keeping the Object as-is else."
"StringUtils.java:485"$0$0$0$8$49$"	 * @param obj the input Object (e.g. ""myString"")"
"StringUtils.java:486"$0$0$0$8$58$"	 * @return the quoted {@code String} (e.g. ""'myString'""),"
"StringUtils.java:487"$0$0$0$11$53$"	 * or the input object as-is if not a {@code String}"
"StringUtils.java:488"$0$0$0$1$4$"	 */"
"StringUtils.java:489"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:490"$0$0$0$7$59$"	public static Object quoteIfString(@Nullable Object obj) {"
"StringUtils.java:491"$0$0$0$9$61$"		return (obj instanceof String ? quote((String) obj) : obj);"
"StringUtils.java:492"$0$0$0$1$2$"	}"
"StringUtils.java:493"$0$0$0$0$0$""
"StringUtils.java:494"$0$0$0$1$4$"	/**"
"StringUtils.java:495"$0$0$0$12$69$"	 * Unqualify a string qualified by a '.' dot character. For example,"
"StringUtils.java:496"$0$0$0$4$50$"	 * ""this.name.is.qualified"", returns ""qualified""."
"StringUtils.java:497"$0$0$0$6$43$"	 * @param qualifiedName the qualified name"
"StringUtils.java:498"$0$0$0$1$4$"	 */"
"StringUtils.java:499"$0$0$0$6$55$"	public static String unqualify(String qualifiedName) {"
"StringUtils.java:500"$0$0$0$3$39$"		return unqualify(qualifiedName, '.');"
"StringUtils.java:501"$0$0$0$1$2$"	}"
"StringUtils.java:502"$0$0$0$0$0$""
"StringUtils.java:503"$0$0$0$1$4$"	/**"
"StringUtils.java:504"$0$0$0$11$71$"	 * Unqualify a string qualified by a separator character. For example,"
"StringUtils.java:505"$0$0$0$9$74$"	 * ""this:name:is:qualified"" returns ""qualified"" if using a ':' separator."
"StringUtils.java:506"$0$0$0$6$43$"	 * @param qualifiedName the qualified name"
"StringUtils.java:507"$0$0$0$5$34$"	 * @param separator the separator"
"StringUtils.java:508"$0$0$0$1$4$"	 */"
"StringUtils.java:509"$0$0$0$8$71$"	public static String unqualify(String qualifiedName, char separator) {"
"StringUtils.java:510"$0$0$0$4$75$"		return qualifiedName.substring(qualifiedName.lastIndexOf(separator) + 1);"
"StringUtils.java:511"$0$0$0$1$2$"	}"
"StringUtils.java:512"$0$0$0$0$0$""
"StringUtils.java:513"$0$0$0$1$4$"	/**"
"StringUtils.java:514"$0$0$0$10$61$"	 * Capitalize a {@code String}, changing the first letter to"
"StringUtils.java:515"$0$0$0$7$58$"	 * upper case as per {@link Character#toUpperCase(char)}."
"StringUtils.java:516"$0$0$0$6$33$"	 * No other letters are changed."
"StringUtils.java:517"$0$0$0$8$47$"	 * @param str the {@code String} to capitalize"
"StringUtils.java:518"$0$0$0$6$42$"	 * @return the capitalized {@code String}"
"StringUtils.java:519"$0$0$0$1$4$"	 */"
"StringUtils.java:520"$0$0$0$6$46$"	public static String capitalize(String str) {"
"StringUtils.java:521"$0$0$0$3$45$"		return changeFirstCharacterCase(str, true);"
"StringUtils.java:522"$0$0$0$1$2$"	}"
"StringUtils.java:523"$0$0$0$0$0$""
"StringUtils.java:524"$0$0$0$1$4$"	/**"
"StringUtils.java:525"$0$0$0$10$63$"	 * Uncapitalize a {@code String}, changing the first letter to"
"StringUtils.java:526"$0$0$0$7$58$"	 * lower case as per {@link Character#toLowerCase(char)}."
"StringUtils.java:527"$0$0$0$6$33$"	 * No other letters are changed."
"StringUtils.java:528"$0$0$0$8$49$"	 * @param str the {@code String} to uncapitalize"
"StringUtils.java:529"$0$0$0$6$44$"	 * @return the uncapitalized {@code String}"
"StringUtils.java:530"$0$0$0$1$4$"	 */"
"StringUtils.java:531"$0$0$0$6$48$"	public static String uncapitalize(String str) {"
"StringUtils.java:532"$0$0$0$3$46$"		return changeFirstCharacterCase(str, false);"
"StringUtils.java:533"$0$0$0$1$2$"	}"
"StringUtils.java:534"$0$0$0$0$0$""
"StringUtils.java:535"$0$0$0$8$81$"	private static String changeFirstCharacterCase(String str, boolean capitalize) {"
"StringUtils.java:536"$0$0$0$3$24$"		if (!hasLength(str)) {"
"StringUtils.java:537"$0$0$0$2$14$"			return str;"
"StringUtils.java:538"$0$0$0$1$3$"		}"
"StringUtils.java:539"$0$0$0$0$0$""
"StringUtils.java:540"$0$0$0$4$32$"		char baseChar = str.charAt(0);"
"StringUtils.java:541"$0$0$0$2$19$"		char updatedChar;"
"StringUtils.java:542"$0$0$0$3$19$"		if (capitalize) {"
"StringUtils.java:543"$0$0$0$3$49$"			updatedChar = Character.toUpperCase(baseChar);"
"StringUtils.java:544"$0$0$0$1$3$"		}"
"StringUtils.java:545"$0$0$0$2$8$"		else {"
"StringUtils.java:546"$0$0$0$3$49$"			updatedChar = Character.toLowerCase(baseChar);"
"StringUtils.java:547"$0$0$0$1$3$"		}"
"StringUtils.java:548"$0$0$0$5$32$"		if (baseChar == updatedChar) {"
"StringUtils.java:549"$0$0$0$2$14$"			return str;"
"StringUtils.java:550"$0$0$0$1$3$"		}"
"StringUtils.java:551"$0$0$0$0$0$""
"StringUtils.java:552"$0$0$0$4$35$"		char[] chars = str.toCharArray();"
"StringUtils.java:553"$0$0$0$3$25$"		chars[0] = updatedChar;"
"StringUtils.java:554"$0$0$0$5$44$"		return new String(chars, 0, chars.length);"
"StringUtils.java:555"$0$0$0$1$2$"	}"
"StringUtils.java:556"$0$0$0$0$0$""
"StringUtils.java:557"$0$0$0$1$4$"	/**"
"StringUtils.java:558"$0$0$0$10$59$"	 * Extract the filename from the given Java resource path,"
"StringUtils.java:559"$0$0$0$6$53$"	 * e.g. {@code ""mypath/myfile.txt"" -> ""myfile.txt""}."
"StringUtils.java:560"$0$0$0$10$51$"	 * @param path the file path (may be {@code null})"
"StringUtils.java:561"$0$0$0$10$59$"	 * @return the extracted filename, or {@code null} if none"
"StringUtils.java:562"$0$0$0$1$4$"	 */"
"StringUtils.java:563"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:564"$1$0$0$7$58$"	public static String getFilename(@Nullable String path) {"
"StringUtils.java:565"$0$0$0$5$21$"		if (path == null) {"
"StringUtils.java:566"$0$0$0$2$15$"			return null;"
"StringUtils.java:567"$0$0$0$1$3$"		}"
"StringUtils.java:568"$0$0$0$0$0$""
"StringUtils.java:569"$0$0$0$4$58$"		int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);"
"StringUtils.java:570"$0$0$0$10$76$"		return (separatorIndex != -1 ? path.substring(separatorIndex + 1) : path);"
"StringUtils.java:571"$0$0$0$1$2$"	}"
"StringUtils.java:572"$0$0$0$0$0$""
"StringUtils.java:573"$0$0$0$1$4$"	/**"
"StringUtils.java:574"$0$0$0$11$69$"	 * Extract the filename extension from the given Java resource path,"
"StringUtils.java:575"$0$0$0$5$38$"	 * e.g. ""mypath/myfile.txt"" -> ""txt""."
"StringUtils.java:576"$0$0$0$10$51$"	 * @param path the file path (may be {@code null})"
"StringUtils.java:577"$0$0$0$11$69$"	 * @return the extracted filename extension, or {@code null} if none"
"StringUtils.java:578"$0$0$0$1$4$"	 */"
"StringUtils.java:579"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:580"$1$0$0$7$67$"	public static String getFilenameExtension(@Nullable String path) {"
"StringUtils.java:581"$0$0$0$5$21$"		if (path == null) {"
"StringUtils.java:582"$0$0$0$2$15$"			return null;"
"StringUtils.java:583"$0$0$0$1$3$"		}"
"StringUtils.java:584"$0$0$0$0$0$""
"StringUtils.java:585"$0$0$0$4$55$"		int extIndex = path.lastIndexOf(EXTENSION_SEPARATOR);"
"StringUtils.java:586"$0$0$0$5$23$"		if (extIndex == -1) {"
"StringUtils.java:587"$0$0$0$2$15$"			return null;"
"StringUtils.java:588"$0$0$0$1$3$"		}"
"StringUtils.java:589"$0$0$0$0$0$""
"StringUtils.java:590"$0$0$0$4$55$"		int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);"
"StringUtils.java:591"$0$0$0$5$31$"		if (folderIndex > extIndex) {"
"StringUtils.java:592"$0$0$0$2$15$"			return null;"
"StringUtils.java:593"$0$0$0$1$3$"		}"
"StringUtils.java:594"$0$0$0$0$0$""
"StringUtils.java:595"$0$0$0$4$38$"		return path.substring(extIndex + 1);"
"StringUtils.java:596"$0$0$0$1$2$"	}"
"StringUtils.java:597"$0$0$0$0$0$""
"StringUtils.java:598"$0$0$0$1$4$"	/**"
"StringUtils.java:599"$0$0$0$11$67$"	 * Strip the filename extension from the given Java resource path,"
"StringUtils.java:600"$0$0$0$5$48$"	 * e.g. ""mypath/myfile.txt"" -> ""mypath/myfile""."
"StringUtils.java:601"$0$0$0$6$29$"	 * @param path the file path"
"StringUtils.java:602"$0$0$0$8$53$"	 * @return the path with stripped filename extension"
"StringUtils.java:603"$0$0$0$1$4$"	 */"
"StringUtils.java:604"$0$0$0$6$59$"	public static String stripFilenameExtension(String path) {"
"StringUtils.java:605"$0$0$0$4$55$"		int extIndex = path.lastIndexOf(EXTENSION_SEPARATOR);"
"StringUtils.java:606"$0$0$0$5$23$"		if (extIndex == -1) {"
"StringUtils.java:607"$0$0$0$2$15$"			return path;"
"StringUtils.java:608"$0$0$0$1$3$"		}"
"StringUtils.java:609"$0$0$0$0$0$""
"StringUtils.java:610"$0$0$0$4$55$"		int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);"
"StringUtils.java:611"$0$0$0$5$31$"		if (folderIndex > extIndex) {"
"StringUtils.java:612"$0$0$0$2$15$"			return path;"
"StringUtils.java:613"$0$0$0$1$3$"		}"
"StringUtils.java:614"$0$0$0$0$0$""
"StringUtils.java:615"$0$0$0$3$37$"		return path.substring(0, extIndex);"
"StringUtils.java:616"$0$0$0$1$2$"	}"
"StringUtils.java:617"$0$0$0$0$0$""
"StringUtils.java:618"$0$0$0$1$4$"	/**"
"StringUtils.java:619"$0$0$0$12$66$"	 * Apply the given relative path to the given Java resource path,"
"StringUtils.java:620"$0$0$0$9$67$"	 * assuming standard Java folder separation (i.e. ""/"" separators)."
"StringUtils.java:621"$0$0$0$13$65$"	 * @param path the path to start from (usually a full file path)"
"StringUtils.java:622"$0$0$0$8$50$"	 * @param relativePath the relative path to apply"
"StringUtils.java:623"$0$0$0$8$42$"	 * (relative to the full file path above)"
"StringUtils.java:624"$0$0$0$13$75$"	 * @return the full file path that results from applying the relative path"
"StringUtils.java:625"$0$0$0$1$4$"	 */"
"StringUtils.java:626"$0$0$0$8$75$"	public static String applyRelativePath(String path, String relativePath) {"
"StringUtils.java:627"$0$0$0$4$58$"		int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);"
"StringUtils.java:628"$0$0$0$5$29$"		if (separatorIndex != -1) {"
"StringUtils.java:629"$0$0$0$5$54$"			String newPath = path.substring(0, separatorIndex);"
"StringUtils.java:630"$0$0$0$3$52$"			if (!relativePath.startsWith(FOLDER_SEPARATOR)) {"
"StringUtils.java:631"$0$0$0$3$32$"				newPath += FOLDER_SEPARATOR;"
"StringUtils.java:632"$0$0$0$1$4$"			}"
"StringUtils.java:633"$0$0$0$4$33$"			return newPath + relativePath;"
"StringUtils.java:634"$0$0$0$1$3$"		}"
"StringUtils.java:635"$0$0$0$2$8$"		else {"
"StringUtils.java:636"$0$0$0$2$23$"			return relativePath;"
"StringUtils.java:637"$0$0$0$1$3$"		}"
"StringUtils.java:638"$0$0$0$1$2$"	}"
"StringUtils.java:639"$0$0$0$0$0$""
"StringUtils.java:640"$0$0$0$1$4$"	/**"
"StringUtils.java:641"$0$0$0$10$66$"	 * Normalize the path by suppressing sequences like ""path/.."" and"
"StringUtils.java:642"$0$0$0$4$22$"	 * inner simple dots."
"StringUtils.java:643"$0$0$0$11$68$"	 * <p>The result is convenient for path comparison. For other uses,"
"StringUtils.java:644"$0$0$0$11$72$"	 * notice that Windows separators (""\"") are replaced by simple slashes."
"StringUtils.java:645"$0$0$0$6$33$"	 * @param path the original path"
"StringUtils.java:646"$0$0$0$5$31$"	 * @return the normalized path"
"StringUtils.java:647"$0$0$0$1$4$"	 */"
"StringUtils.java:648"$0$0$0$6$46$"	public static String cleanPath(String path) {"
"StringUtils.java:649"$0$0$0$3$25$"		if (!hasLength(path)) {"
"StringUtils.java:650"$0$0$0$2$15$"			return path;"
"StringUtils.java:651"$0$0$0$1$3$"		}"
"StringUtils.java:652"$0$0$0$6$79$"		String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);"
"StringUtils.java:653"$0$0$0$0$0$""
"StringUtils.java:654"$0$0$1$9$39$"		// Shortcut if there is no work to do"
"StringUtils.java:655"$0$0$0$5$37$"		if (pathToUse.indexOf('.') == -1) {"
"StringUtils.java:656"$0$0$0$2$20$"			return pathToUse;"
"StringUtils.java:657"$0$0$0$1$3$"		}"
"StringUtils.java:658"$0$0$0$0$0$""
"StringUtils.java:659"$0$0$1$15$70$"		// Strip prefix from path to analyze, to not treat it as part of the"
"StringUtils.java:660"$0$0$1$12$72$"		// first path element. This is necessary to correctly parse paths like"
"StringUtils.java:661"$0$0$1$7$70$"		// ""file:core/../core/io/Resource.class"", where the "".."" should just"
"StringUtils.java:662"$0$0$1$11$71$"		// strip the first ""core"" directory while keeping the ""file:"" prefix."
"StringUtils.java:663"$0$0$0$4$43$"		int prefixIndex = pathToUse.indexOf(':');"
"StringUtils.java:664"$0$0$0$4$21$"		String prefix = """";"
"StringUtils.java:665"$0$0$0$5$26$"		if (prefixIndex != -1) {"
"StringUtils.java:666"$0$0$0$6$52$"			prefix = pathToUse.substring(0, prefixIndex + 1);"
"StringUtils.java:667"$0$0$0$3$43$"			if (prefix.contains(FOLDER_SEPARATOR)) {"
"StringUtils.java:668"$0$0$0$3$16$"				prefix = """";"
"StringUtils.java:669"$0$0$0$1$4$"			}"
"StringUtils.java:670"$0$0$0$2$9$"			else {"
"StringUtils.java:671"$0$0$0$5$53$"				pathToUse = pathToUse.substring(prefixIndex + 1);"
"StringUtils.java:672"$0$0$0$1$4$"			}"
"StringUtils.java:673"$0$0$0$1$3$"		}"
"StringUtils.java:674"$0$0$0$3$47$"		if (pathToUse.startsWith(FOLDER_SEPARATOR)) {"
"StringUtils.java:675"$0$0$0$5$38$"			prefix = prefix + FOLDER_SEPARATOR;"
"StringUtils.java:676"$0$0$0$3$38$"			pathToUse = pathToUse.substring(1);"
"StringUtils.java:677"$0$0$0$1$3$"		}"
"StringUtils.java:678"$0$0$0$0$0$""
"StringUtils.java:679"$0$0$0$5$79$"		String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);"
"StringUtils.java:680"$0$0$0$5$55$"		LinkedList<String> pathElements = new LinkedList<>();"
"StringUtils.java:681"$0$0$0$4$15$"		int tops = 0;"
"StringUtils.java:682"$0$0$0$0$0$""
"StringUtils.java:683"$0$0$0$12$51$"		for (int i = pathArray.length - 1; i >= 0; i--) {"
"StringUtils.java:684"$0$0$0$4$33$"			String element = pathArray[i];"
"StringUtils.java:685"$0$0$0$3$38$"			if (CURRENT_PATH.equals(element)) {"
"StringUtils.java:686"$0$0$1$8$45$"				// Points to current directory - drop it."
"StringUtils.java:687"$0$0$0$1$4$"			}"
"StringUtils.java:688"$0$0$0$4$39$"			else if (TOP_PATH.equals(element)) {"
"StringUtils.java:689"$0$0$1$5$34$"				// Registering top path found."
"StringUtils.java:690"$0$0$0$1$11$"				tops++;"
"StringUtils.java:691"$0$0$0$1$4$"			}"
"StringUtils.java:692"$0$0$0$2$9$"			else {"
"StringUtils.java:693"$0$0$0$5$19$"				if (tops > 0) {"
"StringUtils.java:694"$0$0$1$10$68$"					// Merging path element with element corresponding to top path."
"StringUtils.java:695"$0$0$0$1$12$"					tops--;"
"StringUtils.java:696"$0$0$0$1$5$"				}"
"StringUtils.java:697"$0$0$0$2$10$"				else {"
"StringUtils.java:698"$0$0$1$5$34$"					// Normal path element found."
"StringUtils.java:699"$0$0$0$2$34$"					pathElements.add(0, element);"
"StringUtils.java:700"$0$0$0$1$5$"				}"
"StringUtils.java:701"$0$0$0$1$4$"			}"
"StringUtils.java:702"$0$0$0$1$3$"		}"
"StringUtils.java:703"$0$0$0$0$0$""
"StringUtils.java:704"$0$0$1$9$49$"		// All path elements stayed the same - shortcut"
"StringUtils.java:705"$0$0$0$5$48$"		if (pathArray.length == pathElements.size()) {"
"StringUtils.java:706"$0$0$0$4$29$"			return prefix + pathToUse;"
"StringUtils.java:707"$0$0$0$1$3$"		}"
"StringUtils.java:708"$0$0$1$8$45$"		// Remaining top paths need to be retained."
"StringUtils.java:709"$0$0$0$10$34$"		for (int i = 0; i < tops; i++) {"
"StringUtils.java:710"$0$0$0$2$33$"			pathElements.add(0, TOP_PATH);"
"StringUtils.java:711"$0$0$0$1$3$"		}"
"StringUtils.java:712"$0$0$1$12$69$"		// If nothing else left, at least explicitly point to current path."
"StringUtils.java:713"$1$0$0$9$108$"		if (pathElements.size() == 1 && """".equals(pathElements.getLast()) && !prefix.endsWith(FOLDER_SEPARATOR)) {"
"StringUtils.java:714"$0$0$0$2$37$"			pathElements.add(0, CURRENT_PATH);"
"StringUtils.java:715"$0$0$0$1$3$"		}"
"StringUtils.java:716"$0$0$0$0$0$""
"StringUtils.java:717"$0$0$0$5$78$"		return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);"
"StringUtils.java:718"$0$0$0$1$2$"	}"
"StringUtils.java:719"$0$0$0$0$0$""
"StringUtils.java:720"$0$0$0$1$4$"	/**"
"StringUtils.java:721"$0$0$0$8$50$"	 * Compare two paths after normalization of them."
"StringUtils.java:722"$0$0$0$7$42$"	 * @param path1 first path for comparison"
"StringUtils.java:723"$0$0$0$7$43$"	 * @param path2 second path for comparison"
"StringUtils.java:724"$0$0$0$10$68$"	 * @return whether the two paths are equivalent after normalization"
"StringUtils.java:725"$0$0$0$1$4$"	 */"
"StringUtils.java:726"$0$0$0$8$63$"	public static boolean pathEquals(String path1, String path2) {"
"StringUtils.java:727"$0$0$0$2$51$"		return cleanPath(path1).equals(cleanPath(path2));"
"StringUtils.java:728"$0$0$0$1$2$"	}"
"StringUtils.java:729"$0$0$0$0$0$""
"StringUtils.java:730"$0$0$0$1$4$"	/**"
"StringUtils.java:731"$0$0$0$13$79$"	 * Decode the given encoded URI component value. Based on the following rules:"
"StringUtils.java:732"$0$0$0$2$8$"	 * <ul>"
"StringUtils.java:733"$0$0$0$13$97$"	 * <li>Alphanumeric characters {@code ""a""} through {@code ""z""}, {@code ""A""} through {@code ""Z""},"
"StringUtils.java:734"$0$0$0$10$59$"	 * and {@code ""0""} through {@code ""9""} stay the same.</li>"
"StringUtils.java:735"$0$0$0$15$101$"	 * <li>Special characters {@code ""-""}, {@code ""_""}, {@code "".""}, and {@code ""*""} stay the same.</li>"
"StringUtils.java:736"$0$0$0$14$109$"	 * <li>A sequence ""{@code %<i>xy</i>}"" is interpreted as a hexadecimal representation of the character.</li>"
"StringUtils.java:737"$0$0$0$2$9$"	 * </ul>"
"StringUtils.java:738"$0$0$0$6$36$"	 * @param source the encoded String"
"StringUtils.java:739"$0$0$0$6$36$"	 * @param charset the character set"
"StringUtils.java:740"$0$0$0$5$29$"	 * @return the decoded value"
"StringUtils.java:741"$0$0$0$11$93$"	 * @throws IllegalArgumentException when the given source contains invalid encoded sequences"
"StringUtils.java:742"$0$0$0$3$14$"	 * @since 5.0"
"StringUtils.java:743"$0$0$0$4$51$"	 * @see java.net.URLDecoder#decode(String, String)"
"StringUtils.java:744"$0$0$0$1$4$"	 */"
"StringUtils.java:745"$0$0$0$8$65$"	public static String uriDecode(String source, Charset charset) {"
"StringUtils.java:746"$0$0$0$4$31$"		int length = source.length();"
"StringUtils.java:747"$0$0$0$5$20$"		if (length == 0) {"
"StringUtils.java:748"$0$0$0$2$17$"			return source;"
"StringUtils.java:749"$0$0$0$1$3$"		}"
"StringUtils.java:750"$0$0$0$6$54$"		Assert.notNull(charset, ""Charset must not be null"");"
"StringUtils.java:751"$0$0$0$0$0$""
"StringUtils.java:752"$0$0$0$5$65$"		ByteArrayOutputStream baos = new ByteArrayOutputStream(length);"
"StringUtils.java:753"$0$0$0$4$26$"		boolean changed = false;"
"StringUtils.java:754"$0$0$0$10$36$"		for (int i = 0; i < length; i++) {"
"StringUtils.java:755"$0$0$0$4$29$"			int ch = source.charAt(i);"
"StringUtils.java:756"$0$0$0$5$19$"			if (ch == '%') {"
"StringUtils.java:757"$0$0$0$7$25$"				if (i + 2 < length) {"
"StringUtils.java:758"$0$0$0$6$38$"					char hex1 = source.charAt(i + 1);"
"StringUtils.java:759"$0$0$0$6$38$"					char hex2 = source.charAt(i + 2);"
"StringUtils.java:760"$0$0$0$5$39$"					int u = Character.digit(hex1, 16);"
"StringUtils.java:761"$0$0$0$5$39$"					int l = Character.digit(hex2, 16);"
"StringUtils.java:762"$0$0$0$9$30$"					if (u == -1 || l == -1) {"
"StringUtils.java:763"$0$0$0$10$101$"						throw new IllegalArgumentException(""Invalid encoded sequence \"""" + source.substring(i) + ""\"""");"
"StringUtils.java:764"$0$0$0$1$6$"					}"
"StringUtils.java:765"$0$0$0$6$39$"					baos.write((char) ((u << 4) + l));"
"StringUtils.java:766"$0$0$0$3$12$"					i += 2;"
"StringUtils.java:767"$0$0$0$3$20$"					changed = true;"
"StringUtils.java:768"$0$0$0$1$5$"				}"
"StringUtils.java:769"$0$0$0$2$10$"				else {"
"StringUtils.java:770"$0$0$0$10$100$"					throw new IllegalArgumentException(""Invalid encoded sequence \"""" + source.substring(i) + ""\"""");"
"StringUtils.java:771"$0$0$0$1$5$"				}"
"StringUtils.java:772"$0$0$0$1$4$"			}"
"StringUtils.java:773"$0$0$0$2$9$"			else {"
"StringUtils.java:774"$0$0$0$1$19$"				baos.write(ch);"
"StringUtils.java:775"$0$0$0$1$4$"			}"
"StringUtils.java:776"$0$0$0$1$3$"		}"
"StringUtils.java:777"$0$0$0$7$70$"		return (changed ? StreamUtils.copyToString(baos, charset) : source);"
"StringUtils.java:778"$0$0$0$1$2$"	}"
"StringUtils.java:779"$0$0$0$0$0$""
"StringUtils.java:780"$0$0$0$1$4$"	/**"
"StringUtils.java:781"$0$0$0$12$73$"	 * Parse the given {@code String} value into a {@link Locale}, accepting"
"StringUtils.java:782"$0$0$0$12$71$"	 * the {@link Locale#toString} format as well as BCP 47 language tags."
"StringUtils.java:783"$0$0$0$10$74$"	 * @param localeValue the locale value: following either {@code Locale's}"
"StringUtils.java:784"$0$0$0$11$76$"	 * {@code toString()} format (""en"", ""en_UK"", etc), also accepting spaces as"
"StringUtils.java:785"$0$0$0$12$75$"	 * separators (as an alternative to underscores), or BCP 47 (e.g. ""en-UK"")"
"StringUtils.java:786"$0$0$0$9$60$"	 * as specified by {@link Locale#forLanguageTag} on Java 7+"
"StringUtils.java:787"$0$0$0$12$76$"	 * @return a corresponding {@code Locale} instance, or {@code null} if none"
"StringUtils.java:788"$0$0$0$10$79$"	 * @throws IllegalArgumentException in case of an invalid locale specification"
"StringUtils.java:789"$0$0$0$3$16$"	 * @since 5.0.4"
"StringUtils.java:790"$0$0$0$3$27$"	 * @see #parseLocaleString"
"StringUtils.java:791"$0$0$0$3$30$"	 * @see Locale#forLanguageTag"
"StringUtils.java:792"$0$0$0$1$4$"	 */"
"StringUtils.java:793"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:794"$0$0$0$6$55$"	public static Locale parseLocale(String localeValue) {"
"StringUtils.java:795"$0$0$0$4$54$"		String[] tokens = tokenizeLocaleSource(localeValue);"
"StringUtils.java:796"$0$0$0$5$27$"		if (tokens.length == 1) {"
"StringUtils.java:797"$0$0$0$1$35$"			validateLocalePart(localeValue);"
"StringUtils.java:798"$0$0$0$4$56$"			Locale resolved = Locale.forLanguageTag(localeValue);"
"StringUtils.java:799"$1$0$0$5$45$"			if (resolved.getLanguage().length() > 0) {"
"StringUtils.java:800"$0$0$0$2$20$"				return resolved;"
"StringUtils.java:801"$0$0$0$1$4$"			}"
"StringUtils.java:802"$0$0$0$1$3$"		}"
"StringUtils.java:803"$0$0$0$3$48$"		return parseLocaleTokens(localeValue, tokens);"
"StringUtils.java:804"$0$0$0$1$2$"	}"
"StringUtils.java:805"$0$0$0$0$0$""
"StringUtils.java:806"$0$0$0$1$4$"	/**"
"StringUtils.java:807"$0$0$0$11$72$"	 * Parse the given {@code String} representation into a {@link Locale}."
"StringUtils.java:808"$0$0$0$11$66$"	 * <p>For many parsing scenarios, this is an inverse operation of"
"StringUtils.java:809"$0$0$0$9$66$"	 * {@link Locale#toString Locale's toString}, in a lenient sense."
"StringUtils.java:810"$0$0$0$12$73$"	 * This method does not aim for strict {@code Locale} design compliance;"
"StringUtils.java:811"$0$0$0$11$72$"	 * it is rather specifically tailored for typical Spring parsing needs."
"StringUtils.java:812"$0$0$0$13$77$"	 * <p><b>Note: This delegate does not accept the BCP 47 language tag format."
"StringUtils.java:813"$0$0$0$11$76$"	 * Please use {@link #parseLocale} for lenient parsing of both formats.</b>"
"StringUtils.java:814"$0$0$0$10$77$"	 * @param localeString the locale {@code String}: following {@code Locale's}"
"StringUtils.java:815"$0$0$0$11$76$"	 * {@code toString()} format (""en"", ""en_UK"", etc), also accepting spaces as"
"StringUtils.java:816"$0$0$0$7$49$"	 * separators (as an alternative to underscores)"
"StringUtils.java:817"$0$0$0$12$76$"	 * @return a corresponding {@code Locale} instance, or {@code null} if none"
"StringUtils.java:818"$0$0$0$10$79$"	 * @throws IllegalArgumentException in case of an invalid locale specification"
"StringUtils.java:819"$0$0$0$1$4$"	 */"
"StringUtils.java:820"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:821"$0$0$0$6$62$"	public static Locale parseLocaleString(String localeString) {"
"StringUtils.java:822"$0$0$0$3$77$"		return parseLocaleTokens(localeString, tokenizeLocaleSource(localeString));"
"StringUtils.java:823"$0$0$0$1$2$"	}"
"StringUtils.java:824"$0$0$0$0$0$""
"StringUtils.java:825"$0$0$0$6$68$"	private static String[] tokenizeLocaleSource(String localeSource) {"
"StringUtils.java:826"$0$0$0$6$65$"		return tokenizeToStringArray(localeSource, ""_ "", false, false);"
"StringUtils.java:827"$0$0$0$1$2$"	}"
"StringUtils.java:828"$0$0$0$0$0$""
"StringUtils.java:829"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:830"$0$0$0$8$80$"	private static Locale parseLocaleTokens(String localeString, String[] tokens) {"
"StringUtils.java:831"$0$0$0$10$57$"		String language = (tokens.length > 0 ? tokens[0] : """");"
"StringUtils.java:832"$0$0$0$10$56$"		String country = (tokens.length > 1 ? tokens[1] : """");"
"StringUtils.java:833"$0$0$0$1$31$"		validateLocalePart(language);"
"StringUtils.java:834"$0$0$0$1$30$"		validateLocalePart(country);"
"StringUtils.java:835"$0$0$0$0$0$""
"StringUtils.java:836"$0$0$0$4$22$"		String variant = """";"
"StringUtils.java:837"$0$0$0$5$26$"		if (tokens.length > 2) {"
"StringUtils.java:838"$0$0$1$13$75$"			// There is definitely a variant, and it is everything after the country"
"StringUtils.java:839"$0$0$1$12$71$"			// code sans the separator between the country code and the variant."
"StringUtils.java:840"$0$0$0$7$99$"			int endIndexOfCountryCode = localeString.indexOf(country, language.length()) + country.length();"
"StringUtils.java:841"$0$0$1$13$75$"			// Strip off any leading '_' and whitespace, what's left is the variant."
"StringUtils.java:842"$0$0$0$3$82$"			variant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode));"
"StringUtils.java:843"$0$0$0$3$33$"			if (variant.startsWith(""_"")) {"
"StringUtils.java:844"$0$0$0$4$49$"				variant = trimLeadingCharacter(variant, '_');"
"StringUtils.java:845"$0$0$0$1$4$"			}"
"StringUtils.java:846"$0$0$0$1$3$"		}"
"StringUtils.java:847"$0$0$0$0$0$""
"StringUtils.java:848"$0$0$0$5$53$"		if (variant.isEmpty() && country.startsWith(""#"")) {"
"StringUtils.java:849"$0$0$0$3$21$"			variant = country;"
"StringUtils.java:850"$0$0$0$3$16$"			country = """";"
"StringUtils.java:851"$0$0$0$1$3$"		}"
"StringUtils.java:852"$0$0$0$0$0$""
"StringUtils.java:853"$0$0$0$11$81$"		return (language.length() > 0 ? new Locale(language, country, variant) : null);"
"StringUtils.java:854"$0$0$0$1$2$"	}"
"StringUtils.java:855"$0$0$0$0$0$""
"StringUtils.java:856"$0$0$0$6$60$"	private static void validateLocalePart(String localePart) {"
"StringUtils.java:857"$0$0$0$10$49$"		for (int i = 0; i < localePart.length(); i++) {"
"StringUtils.java:858"$0$0$0$4$34$"			char ch = localePart.charAt(i);"
"StringUtils.java:859"$0$0$0$20$92$"			if (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {"
"StringUtils.java:860"$0$0$0$3$39$"				throw new IllegalArgumentException("
"StringUtils.java:861"$0$0$0$10$72$"						""Locale part \"""" + localePart + ""\"" contains invalid characters"");"
"StringUtils.java:862"$0$0$0$1$4$"			}"
"StringUtils.java:863"$0$0$0$1$3$"		}"
"StringUtils.java:864"$0$0$0$1$2$"	}"
"StringUtils.java:865"$0$0$0$0$0$""
"StringUtils.java:866"$0$0$0$1$4$"	/**"
"StringUtils.java:867"$0$0$0$8$50$"	 * Determine the RFC 3066 compliant language tag,"
"StringUtils.java:868"$0$0$0$8$50$"	 * as used for the HTTP ""Accept-Language"" header."
"StringUtils.java:869"$0$0$0$11$59$"	 * @param locale the Locale to transform to a language tag"
"StringUtils.java:870"$0$0$0$11$65$"	 * @return the RFC 3066 compliant language tag as {@code String}"
"StringUtils.java:871"$0$0$0$10$71$"	 * @deprecated as of 5.0.4, in favor of {@link Locale#toLanguageTag()}"
"StringUtils.java:872"$0$0$0$1$4$"	 */"
"StringUtils.java:873"$0$0$0$1$12$"	@Deprecated"
"StringUtils.java:874"$0$0$0$6$52$"	public static String toLanguageTag(Locale locale) {"
"StringUtils.java:875"$3$0$0$10$96$"		return locale.getLanguage() + (hasText(locale.getCountry()) ? ""-"" + locale.getCountry() : """");"
"StringUtils.java:876"$0$0$0$1$2$"	}"
"StringUtils.java:877"$0$0$0$0$0$""
"StringUtils.java:878"$0$0$0$1$4$"	/**"
"StringUtils.java:879"$0$0$0$11$73$"	 * Parse the given {@code timeZoneString} value into a {@link TimeZone}."
"StringUtils.java:880"$1$0$0$11$102$"	 * @param timeZoneString the time zone {@code String}, following {@link TimeZone#getTimeZone(String)}"
"StringUtils.java:881"$0$0$0$13$95$"	 * but throwing {@link IllegalArgumentException} in case of an invalid time zone specification"
"StringUtils.java:882"$0$0$0$7$53$"	 * @return a corresponding {@link TimeZone} instance"
"StringUtils.java:883"$0$0$0$11$82$"	 * @throws IllegalArgumentException in case of an invalid time zone specification"
"StringUtils.java:884"$0$0$0$1$4$"	 */"
"StringUtils.java:885"$0$0$0$6$68$"	public static TimeZone parseTimeZoneString(String timeZoneString) {"
"StringUtils.java:886"$1$0$0$4$59$"		TimeZone timeZone = TimeZone.getTimeZone(timeZoneString);"
"StringUtils.java:887"$1$0$0$5$76$"		if (""GMT"".equals(timeZone.getID()) && !timeZoneString.startsWith(""GMT"")) {"
"StringUtils.java:888"$0$0$1$7$40$"			// We don't want that GMT fallback..."
"StringUtils.java:889"$0$0$0$11$98$"			throw new IllegalArgumentException(""Invalid time zone specification '"" + timeZoneString + ""'"");"
"StringUtils.java:890"$0$0$0$1$3$"		}"
"StringUtils.java:891"$0$0$0$2$18$"		return timeZone;"
"StringUtils.java:892"$0$0$0$1$2$"	}"
"StringUtils.java:893"$0$0$0$0$0$""
"StringUtils.java:894"$0$0$0$0$0$""
"StringUtils.java:895"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"StringUtils.java:896"$0$0$1$8$54$"	// Convenience methods for working with String arrays"
"StringUtils.java:897"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"StringUtils.java:898"$0$0$0$0$0$""
"StringUtils.java:899"$0$0$0$1$4$"	/**"
"StringUtils.java:900"$0$0$0$11$66$"	 * Copy the given {@link Collection} into a {@code String} array."
"StringUtils.java:901"$0$0$0$10$72$"	 * <p>The {@code Collection} must contain {@code String} elements only."
"StringUtils.java:902"$0$0$0$8$52$"	 * @param collection the {@code Collection} to copy"
"StringUtils.java:903"$0$0$0$6$39$"	 * (potentially {@code null} or empty)"
"StringUtils.java:904"$0$0$0$7$46$"	 * @return the resulting {@code String} array"
"StringUtils.java:905"$0$0$0$1$4$"	 */"
"StringUtils.java:906"$0$0$0$7$80$"	public static String[] toStringArray(@Nullable Collection<String> collection) {"
"StringUtils.java:907"$0$0$0$6$110$"		return (!CollectionUtils.isEmpty(collection) ? collection.toArray(EMPTY_STRING_ARRAY) : EMPTY_STRING_ARRAY);"
"StringUtils.java:908"$0$0$0$1$2$"	}"
"StringUtils.java:909"$0$0$0$0$0$""
"StringUtils.java:910"$0$0$0$1$4$"	/**"
"StringUtils.java:911"$0$0$0$11$67$"	 * Copy the given {@link Enumeration} into a {@code String} array."
"StringUtils.java:912"$0$0$0$10$73$"	 * <p>The {@code Enumeration} must contain {@code String} elements only."
"StringUtils.java:913"$0$0$0$8$54$"	 * @param enumeration the {@code Enumeration} to copy"
"StringUtils.java:914"$0$0$0$6$39$"	 * (potentially {@code null} or empty)"
"StringUtils.java:915"$0$0$0$7$46$"	 * @return the resulting {@code String} array"
"StringUtils.java:916"$0$0$0$1$4$"	 */"
"StringUtils.java:917"$0$0$0$7$82$"	public static String[] toStringArray(@Nullable Enumeration<String> enumeration) {"
"StringUtils.java:918"$0$0$0$8$99$"		return (enumeration != null ? toStringArray(Collections.list(enumeration)) : EMPTY_STRING_ARRAY);"
"StringUtils.java:919"$0$0$0$1$2$"	}"
"StringUtils.java:920"$0$0$0$0$0$""
"StringUtils.java:921"$0$0$0$1$4$"	/**"
"StringUtils.java:922"$0$0$0$12$70$"	 * Append the given {@code String} to the given {@code String} array,"
"StringUtils.java:923"$0$0$0$12$69$"	 * returning a new array consisting of the input array contents plus"
"StringUtils.java:924"$0$0$0$5$29$"	 * the given {@code String}."
"StringUtils.java:925"$0$0$0$12$61$"	 * @param array the array to append to (can be {@code null})"
"StringUtils.java:926"$0$0$0$8$43$"	 * @param str the {@code String} to append"
"StringUtils.java:927"$0$0$0$8$46$"	 * @return the new array (never {@code null})"
"StringUtils.java:928"$0$0$0$1$4$"	 */"
"StringUtils.java:929"$0$0$0$9$80$"	public static String[] addStringToArray(@Nullable String[] array, String str) {"
"StringUtils.java:930"$0$0$0$3$35$"		if (ObjectUtils.isEmpty(array)) {"
"StringUtils.java:931"$0$0$0$4$29$"			return new String[] {str};"
"StringUtils.java:932"$0$0$0$1$3$"		}"
"StringUtils.java:933"$0$0$0$0$0$""
"StringUtils.java:934"$0$0$0$7$49$"		String[] newArr = new String[array.length + 1];"
"StringUtils.java:935"$0$0$0$5$54$"		System.arraycopy(array, 0, newArr, 0, array.length);"
"StringUtils.java:936"$0$0$0$3$29$"		newArr[array.length] = str;"
"StringUtils.java:937"$0$0$0$2$16$"		return newArr;"
"StringUtils.java:938"$0$0$0$1$2$"	}"
"StringUtils.java:939"$0$0$0$0$0$""
"StringUtils.java:940"$0$0$0$1$4$"	/**"
"StringUtils.java:941"$0$0$0$9$57$"	 * Concatenate the given {@code String} arrays into one,"
"StringUtils.java:942"$0$0$0$7$51$"	 * with overlapping array elements included twice."
"StringUtils.java:943"$0$0$0$11$65$"	 * <p>The order of elements in the original arrays is preserved."
"StringUtils.java:944"$0$0$0$10$55$"	 * @param array1 the first array (can be {@code null})"
"StringUtils.java:945"$0$0$0$10$56$"	 * @param array2 the second array (can be {@code null})"
"StringUtils.java:946"$0$0$0$14$79$"	 * @return the new array ({@code null} if both given arrays were {@code null})"
"StringUtils.java:947"$0$0$0$1$4$"	 */"
"StringUtils.java:948"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:949"$0$0$0$10$103$"	public static String[] concatenateStringArrays(@Nullable String[] array1, @Nullable String[] array2) {"
"StringUtils.java:950"$0$0$0$3$36$"		if (ObjectUtils.isEmpty(array1)) {"
"StringUtils.java:951"$0$0$0$2$17$"			return array2;"
"StringUtils.java:952"$0$0$0$1$3$"		}"
"StringUtils.java:953"$0$0$0$3$36$"		if (ObjectUtils.isEmpty(array2)) {"
"StringUtils.java:954"$0$0$0$2$17$"			return array1;"
"StringUtils.java:955"$0$0$0$1$3$"		}"
"StringUtils.java:956"$0$0$0$0$0$""
"StringUtils.java:957"$0$0$0$7$62$"		String[] newArr = new String[array1.length + array2.length];"
"StringUtils.java:958"$0$0$0$5$56$"		System.arraycopy(array1, 0, newArr, 0, array1.length);"
"StringUtils.java:959"$0$0$0$5$68$"		System.arraycopy(array2, 0, newArr, array1.length, array2.length);"
"StringUtils.java:960"$0$0$0$2$16$"		return newArr;"
"StringUtils.java:961"$0$0$0$1$2$"	}"
"StringUtils.java:962"$0$0$0$0$0$""
"StringUtils.java:963"$0$0$0$1$4$"	/**"
"StringUtils.java:964"$0$0$0$11$68$"	 * Merge the given {@code String} arrays into one, with overlapping"
"StringUtils.java:965"$0$0$0$6$38$"	 * array elements only included once."
"StringUtils.java:966"$0$0$0$11$64$"	 * <p>The order of elements in the original arrays is preserved"
"StringUtils.java:967"$0$0$0$10$63$"	 * (with the exception of overlapping elements, which are only"
"StringUtils.java:968"$0$0$0$6$40$"	 * included on their first occurrence)."
"StringUtils.java:969"$0$0$0$10$55$"	 * @param array1 the first array (can be {@code null})"
"StringUtils.java:970"$0$0$0$10$56$"	 * @param array2 the second array (can be {@code null})"
"StringUtils.java:971"$0$0$0$14$79$"	 * @return the new array ({@code null} if both given arrays were {@code null})"
"StringUtils.java:972"$0$0$0$13$82$"	 * @deprecated as of 4.3.15, in favor of manual merging via {@link LinkedHashSet}"
"StringUtils.java:973"$0$0$0$14$81$"	 * (with every entry included at most once, even entries within the first array)"
"StringUtils.java:974"$0$0$0$1$4$"	 */"
"StringUtils.java:975"$0$0$0$1$12$"	@Deprecated"
"StringUtils.java:976"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:977"$0$0$0$10$97$"	public static String[] mergeStringArrays(@Nullable String[] array1, @Nullable String[] array2) {"
"StringUtils.java:978"$0$0$0$3$36$"		if (ObjectUtils.isEmpty(array1)) {"
"StringUtils.java:979"$0$0$0$2$17$"			return array2;"
"StringUtils.java:980"$0$0$0$1$3$"		}"
"StringUtils.java:981"$0$0$0$3$36$"		if (ObjectUtils.isEmpty(array2)) {"
"StringUtils.java:982"$0$0$0$2$17$"			return array1;"
"StringUtils.java:983"$0$0$0$1$3$"		}"
"StringUtils.java:984"$0$0$0$0$0$""
"StringUtils.java:985"$0$0$0$5$63$"		List<String> result = new ArrayList<>(Arrays.asList(array1));"
"StringUtils.java:986"$0$0$0$6$29$"		for (String str : array2) {"
"StringUtils.java:987"$0$0$0$3$31$"			if (!result.contains(str)) {"
"StringUtils.java:988"$0$0$0$1$20$"				result.add(str);"
"StringUtils.java:989"$0$0$0$1$4$"			}"
"StringUtils.java:990"$0$0$0$1$3$"		}"
"StringUtils.java:991"$0$0$0$2$31$"		return toStringArray(result);"
"StringUtils.java:992"$0$0$0$1$2$"	}"
"StringUtils.java:993"$0$0$0$0$0$""
"StringUtils.java:994"$0$0$0$1$4$"	/**"
"StringUtils.java:995"$0$0$0$9$53$"	 * Sort the given {@code String} array if necessary."
"StringUtils.java:996"$0$0$0$8$55$"	 * @param array the original array (potentially empty)"
"StringUtils.java:997"$0$0$0$10$57$"	 * @return the array in sorted form (never {@code null})"
"StringUtils.java:998"$0$0$0$1$4$"	 */"
"StringUtils.java:999"$0$0$0$6$57$"	public static String[] sortStringArray(String[] array) {"
"StringUtils.java:1000"$0$0$0$3$35$"		if (ObjectUtils.isEmpty(array)) {"
"StringUtils.java:1001"$0$0$0$2$16$"			return array;"
"StringUtils.java:1002"$0$0$0$1$3$"		}"
"StringUtils.java:1003"$0$0$0$0$0$""
"StringUtils.java:1004"$0$0$0$1$21$"		Arrays.sort(array);"
"StringUtils.java:1005"$0$0$0$2$15$"		return array;"
"StringUtils.java:1006"$0$0$0$1$2$"	}"
"StringUtils.java:1007"$0$0$0$0$0$""
"StringUtils.java:1008"$0$0$0$1$4$"	/**"
"StringUtils.java:1009"$0$0$0$11$64$"	 * Trim the elements of the given {@code String} array, calling"
"StringUtils.java:1010"$0$0$0$7$51$"	 * {@code String.trim()} on each non-null element."
"StringUtils.java:1011"$0$0$0$10$70$"	 * @param array the original {@code String} array (potentially empty)"
"StringUtils.java:1012"$0$0$0$12$72$"	 * @return the resulting array (of the same size) with trimmed elements"
"StringUtils.java:1013"$0$0$0$1$4$"	 */"
"StringUtils.java:1014"$0$0$0$6$59$"	public static String[] trimArrayElements(String[] array) {"
"StringUtils.java:1015"$0$0$0$3$35$"		if (ObjectUtils.isEmpty(array)) {"
"StringUtils.java:1016"$0$0$0$2$16$"			return array;"
"StringUtils.java:1017"$0$0$0$1$3$"		}"
"StringUtils.java:1018"$0$0$0$0$0$""
"StringUtils.java:1019"$0$0$0$5$45$"		String[] result = new String[array.length];"
"StringUtils.java:1020"$0$0$0$10$42$"		for (int i = 0; i < array.length; i++) {"
"StringUtils.java:1021"$0$0$0$4$29$"			String element = array[i];"
"StringUtils.java:1022"$0$0$0$9$57$"			result[i] = (element != null ? element.trim() : null);"
"StringUtils.java:1023"$0$0$0$1$3$"		}"
"StringUtils.java:1024"$0$0$0$2$16$"		return result;"
"StringUtils.java:1025"$0$0$0$1$2$"	}"
"StringUtils.java:1026"$0$0$0$0$0$""
"StringUtils.java:1027"$0$0$0$1$4$"	/**"
"StringUtils.java:1028"$0$0$0$8$50$"	 * Remove duplicate strings from the given array."
"StringUtils.java:1029"$0$0$0$15$86$"	 * <p>As of 4.2, it preserves the original order, as it uses a {@link LinkedHashSet}."
"StringUtils.java:1030"$0$0$0$9$61$"	 * @param array the {@code String} array (potentially empty)"
"StringUtils.java:1031"$0$0$0$10$62$"	 * @return an array without duplicates, in natural sort order"
"StringUtils.java:1032"$0$0$0$1$4$"	 */"
"StringUtils.java:1033"$0$0$0$6$64$"	public static String[] removeDuplicateStrings(String[] array) {"
"StringUtils.java:1034"$0$0$0$3$35$"		if (ObjectUtils.isEmpty(array)) {"
"StringUtils.java:1035"$0$0$0$2$16$"			return array;"
"StringUtils.java:1036"$0$0$0$1$3$"		}"
"StringUtils.java:1037"$0$0$0$0$0$""
"StringUtils.java:1038"$0$0$0$5$62$"		Set<String> set = new LinkedHashSet<>(Arrays.asList(array));"
"StringUtils.java:1039"$0$0$0$2$28$"		return toStringArray(set);"
"StringUtils.java:1040"$0$0$0$1$2$"	}"
"StringUtils.java:1041"$0$0$0$0$0$""
"StringUtils.java:1042"$0$0$0$1$4$"	/**"
"StringUtils.java:1043"$0$0$0$12$68$"	 * Split a {@code String} at the first occurrence of the delimiter."
"StringUtils.java:1044"$0$0$0$9$49$"	 * Does not include the delimiter in the result."
"StringUtils.java:1045"$0$0$0$12$74$"	 * @param toSplit the string to split (potentially {@code null} or empty)"
"StringUtils.java:1046"$0$0$0$14$84$"	 * @param delimiter to split the string up with (potentially {@code null} or empty)"
"StringUtils.java:1047"$0$0$0$14$76$"	 * @return a two element array with index 0 being before the delimiter, and"
"StringUtils.java:1048"$0$0$0$12$79$"	 * index 1 being after the delimiter (neither element includes the delimiter);"
"StringUtils.java:1049"$0$0$0$15$83$"	 * or {@code null} if the delimiter wasn't found in the given input {@code String}"
"StringUtils.java:1050"$0$0$0$1$4$"	 */"
"StringUtils.java:1051"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:1052"$0$0$0$10$85$"	public static String[] split(@Nullable String toSplit, @Nullable String delimiter) {"
"StringUtils.java:1053"$0$0$0$5$53$"		if (!hasLength(toSplit) || !hasLength(delimiter)) {"
"StringUtils.java:1054"$0$0$0$2$15$"			return null;"
"StringUtils.java:1055"$0$0$0$1$3$"		}"
"StringUtils.java:1056"$0$0$0$4$42$"		int offset = toSplit.indexOf(delimiter);"
"StringUtils.java:1057"$0$0$0$5$19$"		if (offset < 0) {"
"StringUtils.java:1058"$0$0$0$2$15$"			return null;"
"StringUtils.java:1059"$0$0$0$1$3$"		}"
"StringUtils.java:1060"$0$0$0$0$0$""
"StringUtils.java:1061"$0$0$0$5$56$"		String beforeDelimiter = toSplit.substring(0, offset);"
"StringUtils.java:1062"$0$0$0$6$73$"		String afterDelimiter = toSplit.substring(offset + delimiter.length());"
"StringUtils.java:1063"$0$0$0$5$56$"		return new String[] {beforeDelimiter, afterDelimiter};"
"StringUtils.java:1064"$0$0$0$1$2$"	}"
"StringUtils.java:1065"$0$0$0$0$0$""
"StringUtils.java:1066"$0$0$0$1$4$"	/**"
"StringUtils.java:1067"$0$0$0$15$81$"	 * Take an array of strings and split each element based on the given delimiter."
"StringUtils.java:1068"$0$0$0$14$83$"	 * A {@code Properties} instance is then generated, with the left of the delimiter"
"StringUtils.java:1069"$0$0$0$13$74$"	 * providing the key, and the right of the delimiter providing the value."
"StringUtils.java:1070"$0$0$0$15$85$"	 * <p>Will trim both the key and value before adding them to the {@code Properties}."
"StringUtils.java:1071"$0$0$0$7$37$"	 * @param array the array to process"
"StringUtils.java:1072"$0$0$0$12$78$"	 * @param delimiter to split each element using (typically the equals symbol)"
"StringUtils.java:1073"$0$0$0$10$74$"	 * @return a {@code Properties} instance representing the array contents,"
"StringUtils.java:1074"$0$0$0$14$69$"	 * or {@code null} if the array to process was {@code null} or empty"
"StringUtils.java:1075"$0$0$0$1$4$"	 */"
"StringUtils.java:1076"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:1077"$0$0$0$8$94$"	public static Properties splitArrayElementsIntoProperties(String[] array, String delimiter) {"
"StringUtils.java:1078"$0$0$0$4$66$"		return splitArrayElementsIntoProperties(array, delimiter, null);"
"StringUtils.java:1079"$0$0$0$1$2$"	}"
"StringUtils.java:1080"$0$0$0$0$0$""
"StringUtils.java:1081"$0$0$0$1$4$"	/**"
"StringUtils.java:1082"$0$0$0$15$81$"	 * Take an array of strings and split each element based on the given delimiter."
"StringUtils.java:1083"$0$0$0$13$73$"	 * A {@code Properties} instance is then generated, with the left of the"
"StringUtils.java:1084"$0$0$0$14$84$"	 * delimiter providing the key, and the right of the delimiter providing the value."
"StringUtils.java:1085"$0$0$0$13$65$"	 * <p>Will trim both the key and value before adding them to the"
"StringUtils.java:1086"$0$0$0$4$32$"	 * {@code Properties} instance."
"StringUtils.java:1087"$0$0$0$7$37$"	 * @param array the array to process"
"StringUtils.java:1088"$0$0$0$12$78$"	 * @param delimiter to split each element using (typically the equals symbol)"
"StringUtils.java:1089"$0$0$0$12$75$"	 * @param charsToDelete one or more characters to remove from each element"
"StringUtils.java:1090"$0$0$0$11$73$"	 * prior to attempting the split operation (typically the quotation mark"
"StringUtils.java:1091"$0$0$0$10$55$"	 * symbol), or {@code null} if no removal should occur"
"StringUtils.java:1092"$0$0$0$10$74$"	 * @return a {@code Properties} instance representing the array contents,"
"StringUtils.java:1093"$0$0$0$14$69$"	 * or {@code null} if the array to process was {@code null} or empty"
"StringUtils.java:1094"$0$0$0$1$4$"	 */"
"StringUtils.java:1095"$0$0$0$1$10$"	@Nullable"
"StringUtils.java:1096"$0$0$0$4$59$"	public static Properties splitArrayElementsIntoProperties("
"StringUtils.java:1097"$0$0$0$8$70$"			String[] array, String delimiter, @Nullable String charsToDelete) {"
"StringUtils.java:1098"$0$0$0$0$0$""
"StringUtils.java:1099"$0$0$0$3$35$"		if (ObjectUtils.isEmpty(array)) {"
"StringUtils.java:1100"$0$0$0$2$15$"			return null;"
"StringUtils.java:1101"$0$0$0$1$3$"		}"
"StringUtils.java:1102"$0$0$0$0$0$""
"StringUtils.java:1103"$0$0$0$5$39$"		Properties result = new Properties();"
"StringUtils.java:1104"$0$0$0$6$32$"		for (String element : array) {"
"StringUtils.java:1105"$0$0$0$5$31$"			if (charsToDelete != null) {"
"StringUtils.java:1106"$0$0$0$4$48$"				element = deleteAny(element, charsToDelete);"
"StringUtils.java:1107"$0$0$0$1$4$"			}"
"StringUtils.java:1108"$0$0$0$5$56$"			String[] splittedElement = split(element, delimiter);"
"StringUtils.java:1109"$0$0$0$5$33$"			if (splittedElement == null) {"
"StringUtils.java:1110"$0$0$0$1$13$"				continue;"
"StringUtils.java:1111"$0$0$0$1$4$"			}"
"StringUtils.java:1112"$0$0$0$2$76$"			result.setProperty(splittedElement[0].trim(), splittedElement[1].trim());"
"StringUtils.java:1113"$0$0$0$1$3$"		}"
"StringUtils.java:1114"$0$0$0$2$16$"		return result;"
"StringUtils.java:1115"$0$0$0$1$2$"	}"
"StringUtils.java:1116"$0$0$0$0$0$""
"StringUtils.java:1117"$0$0$0$1$4$"	/**"
"StringUtils.java:1118"$0$0$0$13$71$"	 * Tokenize the given {@code String} into a {@code String} array via a"
"StringUtils.java:1119"$0$0$0$3$28$"	 * {@link StringTokenizer}."
"StringUtils.java:1120"$0$0$0$7$43$"	 * <p>Trims tokens and omits empty tokens."
"StringUtils.java:1121"$0$0$0$12$71$"	 * <p>The given {@code delimiters} string can consist of any number of"
"StringUtils.java:1122"$0$0$0$12$74$"	 * delimiter characters. Each of those characters can be used to separate"
"StringUtils.java:1123"$0$0$0$11$73$"	 * tokens. A delimiter is always a single character; for multi-character"
"StringUtils.java:1124"$0$0$0$6$67$"	 * delimiters, consider using {@link #delimitedListToStringArray}."
"StringUtils.java:1125"$0$0$0$13$81$"	 * @param str the {@code String} to tokenize (potentially {@code null} or empty)"
"StringUtils.java:1126"$0$0$0$11$77$"	 * @param delimiters the delimiter characters, assembled as a {@code String}"
"StringUtils.java:1127"$0$0$0$11$70$"	 * (each of the characters is individually considered as a delimiter)"
"StringUtils.java:1128"$0$0$0$7$34$"	 * @return an array of the tokens"
"StringUtils.java:1129"$0$0$0$3$34$"	 * @see java.util.StringTokenizer"
"StringUtils.java:1130"$0$0$0$3$22$"	 * @see String#trim()"
"StringUtils.java:1131"$0$0$0$3$36$"	 * @see #delimitedListToStringArray"
"StringUtils.java:1132"$0$0$0$1$4$"	 */"
"StringUtils.java:1133"$0$0$0$9$88$"	public static String[] tokenizeToStringArray(@Nullable String str, String delimiters) {"
"StringUtils.java:1134"$0$0$0$5$60$"		return tokenizeToStringArray(str, delimiters, true, true);"
"StringUtils.java:1135"$0$0$0$1$2$"	}"
"StringUtils.java:1136"$0$0$0$0$0$""
"StringUtils.java:1137"$0$0$0$1$4$"	/**"
"StringUtils.java:1138"$0$0$0$13$71$"	 * Tokenize the given {@code String} into a {@code String} array via a"
"StringUtils.java:1139"$0$0$0$3$28$"	 * {@link StringTokenizer}."
"StringUtils.java:1140"$0$0$0$12$71$"	 * <p>The given {@code delimiters} string can consist of any number of"
"StringUtils.java:1141"$0$0$0$12$74$"	 * delimiter characters. Each of those characters can be used to separate"
"StringUtils.java:1142"$0$0$0$11$73$"	 * tokens. A delimiter is always a single character; for multi-character"
"StringUtils.java:1143"$0$0$0$6$67$"	 * delimiters, consider using {@link #delimitedListToStringArray}."
"StringUtils.java:1144"$0$0$0$13$81$"	 * @param str the {@code String} to tokenize (potentially {@code null} or empty)"
"StringUtils.java:1145"$0$0$0$11$77$"	 * @param delimiters the delimiter characters, assembled as a {@code String}"
"StringUtils.java:1146"$0$0$0$11$70$"	 * (each of the characters is individually considered as a delimiter)"
"StringUtils.java:1147"$0$0$0$9$63$"	 * @param trimTokens trim the tokens via {@link String#trim()}"
"StringUtils.java:1148"$0$0$0$10$68$"	 * @param ignoreEmptyTokens omit empty tokens from the result array"
"StringUtils.java:1149"$0$0$0$11$74$"	 * (only applies to tokens that are empty after trimming; StringTokenizer"
"StringUtils.java:1150"$0$0$0$12$73$"	 * will not consider subsequent delimiters as token in the first place)."
"StringUtils.java:1151"$0$0$0$7$34$"	 * @return an array of the tokens"
"StringUtils.java:1152"$0$0$0$3$34$"	 * @see java.util.StringTokenizer"
"StringUtils.java:1153"$0$0$0$3$22$"	 * @see String#trim()"
"StringUtils.java:1154"$0$0$0$3$36$"	 * @see #delimitedListToStringArray"
"StringUtils.java:1155"$0$0$0$1$4$"	 */"
"StringUtils.java:1156"$0$0$0$4$46$"	public static String[] tokenizeToStringArray("
"StringUtils.java:1157"$0$0$0$10$92$"			@Nullable String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens) {"
"StringUtils.java:1158"$0$0$0$0$0$""
"StringUtils.java:1159"$0$0$0$5$20$"		if (str == null) {"
"StringUtils.java:1160"$0$0$0$2$29$"			return EMPTY_STRING_ARRAY;"
"StringUtils.java:1161"$0$0$0$1$3$"		}"
"StringUtils.java:1162"$0$0$0$0$0$""
"StringUtils.java:1163"$0$0$0$6$60$"		StringTokenizer st = new StringTokenizer(str, delimiters);"
"StringUtils.java:1164"$0$0$0$5$42$"		List<String> tokens = new ArrayList<>();"
"StringUtils.java:1165"$0$0$0$3$30$"		while (st.hasMoreTokens()) {"
"StringUtils.java:1166"$0$0$0$4$33$"			String token = st.nextToken();"
"StringUtils.java:1167"$0$0$0$3$20$"			if (trimTokens) {"
"StringUtils.java:1168"$0$0$0$3$25$"				token = token.trim();"
"StringUtils.java:1169"$0$0$0$1$4$"			}"
"StringUtils.java:1170"$0$0$0$7$50$"			if (!ignoreEmptyTokens || token.length() > 0) {"
"StringUtils.java:1171"$0$0$0$1$22$"				tokens.add(token);"
"StringUtils.java:1172"$0$0$0$1$4$"			}"
"StringUtils.java:1173"$0$0$0$1$3$"		}"
"StringUtils.java:1174"$0$0$0$2$31$"		return toStringArray(tokens);"
"StringUtils.java:1175"$0$0$0$1$2$"	}"
"StringUtils.java:1176"$0$0$0$0$0$""
"StringUtils.java:1177"$0$0$0$1$4$"	/**"
"StringUtils.java:1178"$0$0$0$15$72$"	 * Take a {@code String} that is a delimited list and convert it into a"
"StringUtils.java:1179"$0$0$0$4$25$"	 * {@code String} array."
"StringUtils.java:1180"$0$0$0$12$73$"	 * <p>A single {@code delimiter} may consist of more than one character,"
"StringUtils.java:1181"$0$0$0$13$72$"	 * but it will still be considered as a single delimiter string, rather"
"StringUtils.java:1182"$0$0$0$11$67$"	 * than as bunch of potential delimiter characters, in contrast to"
"StringUtils.java:1183"$0$0$0$3$35$"	 * {@link #tokenizeToStringArray}."
"StringUtils.java:1184"$0$0$0$12$75$"	 * @param str the input {@code String} (potentially {@code null} or empty)"
"StringUtils.java:1185"$0$0$0$12$80$"	 * @param delimiter the delimiter between elements (this is a single delimiter,"
"StringUtils.java:1186"$0$0$0$8$56$"	 * rather than a bunch individual delimiter characters)"
"StringUtils.java:1187"$0$0$0$10$46$"	 * @return an array of the tokens in the list"
"StringUtils.java:1188"$0$0$0$3$31$"	 * @see #tokenizeToStringArray"
"StringUtils.java:1189"$0$0$0$1$4$"	 */"
"StringUtils.java:1190"$0$0$0$10$102$"	public static String[] delimitedListToStringArray(@Nullable String str, @Nullable String delimiter) {"
"StringUtils.java:1191"$0$0$0$4$58$"		return delimitedListToStringArray(str, delimiter, null);"
"StringUtils.java:1192"$0$0$0$1$2$"	}"
"StringUtils.java:1193"$0$0$0$0$0$""
"StringUtils.java:1194"$0$0$0$1$4$"	/**"
"StringUtils.java:1195"$0$0$0$14$70$"	 * Take a {@code String} that is a delimited list and convert it into"
"StringUtils.java:1196"$0$0$0$5$27$"	 * a {@code String} array."
"StringUtils.java:1197"$0$0$0$12$73$"	 * <p>A single {@code delimiter} may consist of more than one character,"
"StringUtils.java:1198"$0$0$0$13$72$"	 * but it will still be considered as a single delimiter string, rather"
"StringUtils.java:1199"$0$0$0$11$67$"	 * than as bunch of potential delimiter characters, in contrast to"
"StringUtils.java:1200"$0$0$0$3$35$"	 * {@link #tokenizeToStringArray}."
"StringUtils.java:1201"$0$0$0$12$75$"	 * @param str the input {@code String} (potentially {@code null} or empty)"
"StringUtils.java:1202"$0$0$0$12$80$"	 * @param delimiter the delimiter between elements (this is a single delimiter,"
"StringUtils.java:1203"$0$0$0$8$56$"	 * rather than a bunch individual delimiter characters)"
"StringUtils.java:1204"$0$0$0$13$84$"	 * @param charsToDelete a set of characters to delete; useful for deleting unwanted"
"StringUtils.java:1205"$0$0$0$17$91$"	 * line breaks: e.g. ""\r\n\f"" will delete all new lines and line feeds in a {@code String}"
"StringUtils.java:1206"$0$0$0$10$46$"	 * @return an array of the tokens in the list"
"StringUtils.java:1207"$0$0$0$3$31$"	 * @see #tokenizeToStringArray"
"StringUtils.java:1208"$0$0$0$1$4$"	 */"
"StringUtils.java:1209"$0$0$0$4$51$"	public static String[] delimitedListToStringArray("
"StringUtils.java:1210"$0$0$0$10$86$"			@Nullable String str, @Nullable String delimiter, @Nullable String charsToDelete) {"
"StringUtils.java:1211"$0$0$0$0$0$""
"StringUtils.java:1212"$0$0$0$5$20$"		if (str == null) {"
"StringUtils.java:1213"$0$0$0$2$29$"			return EMPTY_STRING_ARRAY;"
"StringUtils.java:1214"$0$0$0$1$3$"		}"
"StringUtils.java:1215"$0$0$0$5$26$"		if (delimiter == null) {"
"StringUtils.java:1216"$0$0$0$4$29$"			return new String[] {str};"
"StringUtils.java:1217"$0$0$0$1$3$"		}"
"StringUtils.java:1218"$0$0$0$0$0$""
"StringUtils.java:1219"$0$0$0$5$42$"		List<String> result = new ArrayList<>();"
"StringUtils.java:1220"$0$0$0$3$28$"		if (delimiter.isEmpty()) {"
"StringUtils.java:1221"$0$0$0$10$43$"			for (int i = 0; i < str.length(); i++) {"
"StringUtils.java:1222"$0$0$0$5$66$"				result.add(deleteAny(str.substring(i, i + 1), charsToDelete));"
"StringUtils.java:1223"$0$0$0$1$4$"			}"
"StringUtils.java:1224"$0$0$0$1$3$"		}"
"StringUtils.java:1225"$0$0$0$2$8$"		else {"
"StringUtils.java:1226"$0$0$0$4$15$"			int pos = 0;"
"StringUtils.java:1227"$0$0$0$2$14$"			int delPos;"
"StringUtils.java:1228"$0$0$0$8$57$"			while ((delPos = str.indexOf(delimiter, pos)) != -1) {"
"StringUtils.java:1229"$0$0$0$3$69$"				result.add(deleteAny(str.substring(pos, delPos), charsToDelete));"
"StringUtils.java:1230"$0$0$0$5$38$"				pos = delPos + delimiter.length();"
"StringUtils.java:1231"$0$0$0$1$4$"			}"
"StringUtils.java:1232"$0$0$0$9$49$"			if (str.length() > 0 && pos <= str.length()) {"
"StringUtils.java:1233"$0$0$1$12$58$"				// Add rest of String, but not in case of empty input."
"StringUtils.java:1234"$0$0$0$2$61$"				result.add(deleteAny(str.substring(pos), charsToDelete));"
"StringUtils.java:1235"$0$0$0$1$4$"			}"
"StringUtils.java:1236"$0$0$0$1$3$"		}"
"StringUtils.java:1237"$0$0$0$2$31$"		return toStringArray(result);"
"StringUtils.java:1238"$0$0$0$1$2$"	}"
"StringUtils.java:1239"$0$0$0$0$0$""
"StringUtils.java:1240"$0$0$0$1$4$"	/**"
"StringUtils.java:1241"$0$0$0$15$72$"	 * Convert a comma delimited list (e.g., a row from a CSV file) into an"
"StringUtils.java:1242"$0$0$0$4$21$"	 * array of strings."
"StringUtils.java:1243"$0$0$0$12$75$"	 * @param str the input {@code String} (potentially {@code null} or empty)"
"StringUtils.java:1244"$0$0$0$15$74$"	 * @return an array of strings, or the empty array in case of empty input"
"StringUtils.java:1245"$0$0$0$1$4$"	 */"
"StringUtils.java:1246"$0$0$0$7$79$"	public static String[] commaDelimitedListToStringArray(@Nullable String str) {"
"StringUtils.java:1247"$0$0$0$3$46$"		return delimitedListToStringArray(str, "","");"
"StringUtils.java:1248"$0$0$0$1$2$"	}"
"StringUtils.java:1249"$0$0$0$0$0$""
"StringUtils.java:1250"$0$0$0$1$4$"	/**"
"StringUtils.java:1251"$0$0$0$16$76$"	 * Convert a comma delimited list (e.g., a row from a CSV file) into a set."
"StringUtils.java:1252"$0$0$0$14$78$"	 * <p>Note that this will suppress duplicates, and as of 4.2, the elements in"
"StringUtils.java:1253"$0$0$0$13$81$"	 * the returned set will preserve the original order in a {@link LinkedHashSet}."
"StringUtils.java:1254"$0$0$0$12$75$"	 * @param str the input {@code String} (potentially {@code null} or empty)"
"StringUtils.java:1255"$0$0$0$11$55$"	 * @return a set of {@code String} entries in the list"
"StringUtils.java:1256"$0$0$0$3$42$"	 * @see #removeDuplicateStrings(String[])"
"StringUtils.java:1257"$0$0$0$1$4$"	 */"
"StringUtils.java:1258"$0$0$0$7$74$"	public static Set<String> commaDelimitedListToSet(@Nullable String str) {"
"StringUtils.java:1259"$0$0$0$4$57$"		String[] tokens = commaDelimitedListToStringArray(str);"
"StringUtils.java:1260"$0$0$0$3$52$"		return new LinkedHashSet<>(Arrays.asList(tokens));"
"StringUtils.java:1261"$0$0$0$1$2$"	}"
"StringUtils.java:1262"$0$0$0$0$0$""
"StringUtils.java:1263"$0$0$0$1$4$"	/**"
"StringUtils.java:1264"$0$0$0$12$74$"	 * Convert a {@link Collection} to a delimited {@code String} (e.g. CSV)."
"StringUtils.java:1265"$0$0$0$6$53$"	 * <p>Useful for {@code toString()} implementations."
"StringUtils.java:1266"$0$0$0$13$85$"	 * @param coll the {@code Collection} to convert (potentially {@code null} or empty)"
"StringUtils.java:1267"$0$0$0$10$55$"	 * @param delim the delimiter to use (typically a "","")"
"StringUtils.java:1268"$0$0$0$11$63$"	 * @param prefix the {@code String} to start each element with"
"StringUtils.java:1269"$0$0$0$11$61$"	 * @param suffix the {@code String} to end each element with"
"StringUtils.java:1270"$0$0$0$6$40$"	 * @return the delimited {@code String}"
"StringUtils.java:1271"$0$0$0$1$4$"	 */"
"StringUtils.java:1272"$0$0$0$4$50$"	public static String collectionToDelimitedString("
"StringUtils.java:1273"$0$0$0$10$78$"			@Nullable Collection<?> coll, String delim, String prefix, String suffix) {"
"StringUtils.java:1274"$0$0$0$0$0$""
"StringUtils.java:1275"$0$0$0$3$38$"		if (CollectionUtils.isEmpty(coll)) {"
"StringUtils.java:1276"$0$0$0$2$13$"			return """";"
"StringUtils.java:1277"$0$0$0$1$3$"		}"
"StringUtils.java:1278"$0$0$0$0$0$""
"StringUtils.java:1279"$0$0$0$5$41$"		StringBuilder sb = new StringBuilder();"
"StringUtils.java:1280"$0$0$0$4$35$"		Iterator<?> it = coll.iterator();"
"StringUtils.java:1281"$0$0$0$3$24$"		while (it.hasNext()) {"
"StringUtils.java:1282"$0$0$0$1$54$"			sb.append(prefix).append(it.next()).append(suffix);"
"StringUtils.java:1283"$0$0$0$3$22$"			if (it.hasNext()) {"
"StringUtils.java:1284"$0$0$0$1$21$"				sb.append(delim);"
"StringUtils.java:1285"$0$0$0$1$4$"			}"
"StringUtils.java:1286"$0$0$0$1$3$"		}"
"StringUtils.java:1287"$0$0$0$2$23$"		return sb.toString();"
"StringUtils.java:1288"$0$0$0$1$2$"	}"
"StringUtils.java:1289"$0$0$0$0$0$""
"StringUtils.java:1290"$0$0$0$1$4$"	/**"
"StringUtils.java:1291"$0$0$0$12$76$"	 * Convert a {@code Collection} into a delimited {@code String} (e.g. CSV)."
"StringUtils.java:1292"$0$0$0$6$53$"	 * <p>Useful for {@code toString()} implementations."
"StringUtils.java:1293"$0$0$0$13$85$"	 * @param coll the {@code Collection} to convert (potentially {@code null} or empty)"
"StringUtils.java:1294"$0$0$0$10$55$"	 * @param delim the delimiter to use (typically a "","")"
"StringUtils.java:1295"$0$0$0$6$40$"	 * @return the delimited {@code String}"
"StringUtils.java:1296"$0$0$0$1$4$"	 */"
"StringUtils.java:1297"$0$0$0$9$95$"	public static String collectionToDelimitedString(@Nullable Collection<?> coll, String delim) {"
"StringUtils.java:1298"$0$0$0$5$58$"		return collectionToDelimitedString(coll, delim, """", """");"
"StringUtils.java:1299"$0$0$0$1$2$"	}"
"StringUtils.java:1300"$0$0$0$0$0$""
"StringUtils.java:1301"$0$0$0$1$4$"	/**"
"StringUtils.java:1302"$0$0$0$12$77$"	 * Convert a {@code Collection} into a delimited {@code String} (e.g., CSV)."
"StringUtils.java:1303"$0$0$0$6$53$"	 * <p>Useful for {@code toString()} implementations."
"StringUtils.java:1304"$0$0$0$13$85$"	 * @param coll the {@code Collection} to convert (potentially {@code null} or empty)"
"StringUtils.java:1305"$0$0$0$6$40$"	 * @return the delimited {@code String}"
"StringUtils.java:1306"$0$0$0$1$4$"	 */"
"StringUtils.java:1307"$0$0$0$7$86$"	public static String collectionToCommaDelimitedString(@Nullable Collection<?> coll) {"
"StringUtils.java:1308"$0$0$0$3$48$"		return collectionToDelimitedString(coll, "","");"
"StringUtils.java:1309"$0$0$0$1$2$"	}"
"StringUtils.java:1310"$0$0$0$0$0$""
"StringUtils.java:1311"$0$0$0$1$4$"	/**"
"StringUtils.java:1312"$0$0$0$13$78$"	 * Convert a {@code String} array into a delimited {@code String} (e.g. CSV)."
"StringUtils.java:1313"$0$0$0$6$53$"	 * <p>Useful for {@code toString()} implementations."
"StringUtils.java:1314"$0$0$0$12$71$"	 * @param arr the array to display (potentially {@code null} or empty)"
"StringUtils.java:1315"$0$0$0$10$55$"	 * @param delim the delimiter to use (typically a "","")"
"StringUtils.java:1316"$0$0$0$6$40$"	 * @return the delimited {@code String}"
"StringUtils.java:1317"$0$0$0$1$4$"	 */"
"StringUtils.java:1318"$0$0$0$9$84$"	public static String arrayToDelimitedString(@Nullable Object[] arr, String delim) {"
"StringUtils.java:1319"$0$0$0$3$33$"		if (ObjectUtils.isEmpty(arr)) {"
"StringUtils.java:1320"$0$0$0$2$13$"			return """";"
"StringUtils.java:1321"$0$0$0$1$3$"		}"
"StringUtils.java:1322"$0$0$0$5$24$"		if (arr.length == 1) {"
"StringUtils.java:1323"$0$0$0$2$47$"			return ObjectUtils.nullSafeToString(arr[0]);"
"StringUtils.java:1324"$0$0$0$1$3$"		}"
"StringUtils.java:1325"$0$0$0$0$0$""
"StringUtils.java:1326"$0$0$0$5$44$"		StringJoiner sj = new StringJoiner(delim);"
"StringUtils.java:1327"$0$0$0$6$24$"		for (Object o : arr) {"
"StringUtils.java:1328"$0$0$0$1$29$"			sj.add(String.valueOf(o));"
"StringUtils.java:1329"$0$0$0$1$3$"		}"
"StringUtils.java:1330"$0$0$0$2$23$"		return sj.toString();"
"StringUtils.java:1331"$0$0$0$1$2$"	}"
"StringUtils.java:1332"$0$0$0$0$0$""
"StringUtils.java:1333"$0$0$0$1$4$"	/**"
"StringUtils.java:1334"$0$0$0$12$72$"	 * Convert a {@code String} array into a comma delimited {@code String}"
"StringUtils.java:1335"$0$0$0$3$16$"	 * (i.e., CSV)."
"StringUtils.java:1336"$0$0$0$6$53$"	 * <p>Useful for {@code toString()} implementations."
"StringUtils.java:1337"$0$0$0$12$71$"	 * @param arr the array to display (potentially {@code null} or empty)"
"StringUtils.java:1338"$0$0$0$6$40$"	 * @return the delimited {@code String}"
"StringUtils.java:1339"$0$0$0$1$4$"	 */"
"StringUtils.java:1340"$0$0$0$7$75$"	public static String arrayToCommaDelimitedString(@Nullable Object[] arr) {"
"StringUtils.java:1341"$0$0$0$3$42$"		return arrayToDelimitedString(arr, "","");"
"StringUtils.java:1342"$0$0$0$1$2$"	}"
"StringUtils.java:1343"$0$0$0$0$0$""
"StringUtils.java:1344"$0$0$0$1$1$"}"
"FutureAdapter.java:1"$0$0$0$1$2$"/*"
"FutureAdapter.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"FutureAdapter.java:3"$0$0$0$1$2$" *"
"FutureAdapter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"FutureAdapter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"FutureAdapter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"FutureAdapter.java:7"$0$0$0$1$2$" *"
"FutureAdapter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"FutureAdapter.java:9"$0$0$0$1$2$" *"
"FutureAdapter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"FutureAdapter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"FutureAdapter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"FutureAdapter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"FutureAdapter.java:14"$0$0$0$5$33$" * limitations under the License."
"FutureAdapter.java:15"$0$0$0$1$3$" */"
"FutureAdapter.java:16"$0$0$0$0$0$""
"FutureAdapter.java:17"$0$0$0$2$44$"package org.springframework.util.concurrent;"
"FutureAdapter.java:18"$0$0$0$0$0$""
"FutureAdapter.java:19"$0$0$0$2$47$"import java.util.concurrent.ExecutionException;"
"FutureAdapter.java:20"$0$0$0$2$35$"import java.util.concurrent.Future;"
"FutureAdapter.java:21"$0$0$0$2$37$"import java.util.concurrent.TimeUnit;"
"FutureAdapter.java:22"$0$0$0$2$45$"import java.util.concurrent.TimeoutException;"
"FutureAdapter.java:23"$0$0$0$0$0$""
"FutureAdapter.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"FutureAdapter.java:25"$0$0$0$2$39$"import org.springframework.util.Assert;"
"FutureAdapter.java:26"$0$0$0$0$0$""
"FutureAdapter.java:27"$0$0$0$1$3$"/**"
"FutureAdapter.java:28"$0$0$0$15$89$" * Abstract class that adapts a {@link Future} parameterized over S into a {@code Future}"
"FutureAdapter.java:29"$1$0$0$14$87$" * parameterized over T. All methods are delegated to the adaptee, where {@link #get()}"
"FutureAdapter.java:30"$1$0$0$12$88$" * and {@link #get(long, TimeUnit)} call {@link #adapt(Object)} on the adaptee's result."
"FutureAdapter.java:31"$0$0$0$1$2$" *"
"FutureAdapter.java:32"$0$0$0$4$24$" * @author Arjen Poutsma"
"FutureAdapter.java:33"$0$0$0$3$13$" * @since 4.0"
"FutureAdapter.java:34"$0$0$0$9$45$" * @param <T> the type of this {@code Future}"
"FutureAdapter.java:35"$0$0$0$10$54$" * @param <S> the type of the adaptee's {@code Future}"
"FutureAdapter.java:36"$0$0$0$1$3$" */"
"FutureAdapter.java:37"$0$0$0$8$64$"public abstract class FutureAdapter<T, S> implements Future<T> {"
"FutureAdapter.java:38"$0$0$0$0$0$""
"FutureAdapter.java:39"$0$0$0$4$33$"	private final Future<S> adaptee;"
"FutureAdapter.java:40"$0$0$0$0$0$""
"FutureAdapter.java:41"$0$0$0$1$10$"	@Nullable"
"FutureAdapter.java:42"$0$0$0$3$23$"	private Object result;"
"FutureAdapter.java:43"$0$0$0$0$0$""
"FutureAdapter.java:44"$0$0$0$5$33$"	private State state = State.NEW;"
"FutureAdapter.java:45"$0$0$0$0$0$""
"FutureAdapter.java:46"$0$0$0$7$43$"	private final Object mutex = new Object();"
"FutureAdapter.java:47"$0$0$0$0$0$""
"FutureAdapter.java:48"$0$0$0$0$0$""
"FutureAdapter.java:49"$0$0$0$1$4$"	/**"
"FutureAdapter.java:50"$0$0$0$10$66$"	 * Constructs a new {@code FutureAdapter} with the given adaptee."
"FutureAdapter.java:51"$0$0$0$8$44$"	 * @param adaptee the future to delegate to"
"FutureAdapter.java:52"$0$0$0$1$4$"	 */"
"FutureAdapter.java:53"$0$0$0$4$45$"	protected FutureAdapter(Future<S> adaptee) {"
"FutureAdapter.java:54"$0$0$0$6$55$"		Assert.notNull(adaptee, ""Delegate must not be null"");"
"FutureAdapter.java:55"$0$0$0$3$25$"		this.adaptee = adaptee;"
"FutureAdapter.java:56"$0$0$0$1$2$"	}"
"FutureAdapter.java:57"$0$0$0$0$0$""
"FutureAdapter.java:58"$0$0$0$0$0$""
"FutureAdapter.java:59"$0$0$0$1$4$"	/**"
"FutureAdapter.java:60"$0$0$0$4$24$"	 * Returns the adaptee."
"FutureAdapter.java:61"$0$0$0$1$4$"	 */"
"FutureAdapter.java:62"$1$0$0$4$35$"	protected Future<S> getAdaptee() {"
"FutureAdapter.java:63"$0$0$0$2$22$"		return this.adaptee;"
"FutureAdapter.java:64"$0$0$0$1$2$"	}"
"FutureAdapter.java:65"$0$0$0$0$0$""
"FutureAdapter.java:66"$0$0$0$1$10$"	@Override"
"FutureAdapter.java:67"$0$0$0$5$55$"	public boolean cancel(boolean mayInterruptIfRunning) {"
"FutureAdapter.java:68"$0$0$0$2$52$"		return this.adaptee.cancel(mayInterruptIfRunning);"
"FutureAdapter.java:69"$0$0$0$1$2$"	}"
"FutureAdapter.java:70"$0$0$0$0$0$""
"FutureAdapter.java:71"$0$0$0$1$10$"	@Override"
"FutureAdapter.java:72"$0$0$0$4$31$"	public boolean isCancelled() {"
"FutureAdapter.java:73"$0$0$0$2$36$"		return this.adaptee.isCancelled();"
"FutureAdapter.java:74"$0$0$0$1$2$"	}"
"FutureAdapter.java:75"$0$0$0$0$0$""
"FutureAdapter.java:76"$0$0$0$1$10$"	@Override"
"FutureAdapter.java:77"$0$0$0$4$26$"	public boolean isDone() {"
"FutureAdapter.java:78"$0$0$0$2$31$"		return this.adaptee.isDone();"
"FutureAdapter.java:79"$0$0$0$1$2$"	}"
"FutureAdapter.java:80"$0$0$0$0$0$""
"FutureAdapter.java:81"$0$0$0$1$10$"	@Override"
"FutureAdapter.java:82"$0$0$0$1$10$"	@Nullable"
"FutureAdapter.java:83"$1$0$0$7$65$"	public T get() throws InterruptedException, ExecutionException {"
"FutureAdapter.java:84"$1$0$0$2$43$"		return adaptInternal(this.adaptee.get());"
"FutureAdapter.java:85"$0$0$0$1$2$"	}"
"FutureAdapter.java:86"$0$0$0$0$0$""
"FutureAdapter.java:87"$0$0$0$1$10$"	@Override"
"FutureAdapter.java:88"$0$0$0$1$10$"	@Nullable"
"FutureAdapter.java:89"$1$0$0$11$110$"	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {"
"FutureAdapter.java:90"$1$0$0$3$56$"		return adaptInternal(this.adaptee.get(timeout, unit));"
"FutureAdapter.java:91"$0$0$0$1$2$"	}"
"FutureAdapter.java:92"$0$0$0$0$0$""
"FutureAdapter.java:93"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"FutureAdapter.java:94"$0$0$0$1$10$"	@Nullable"
"FutureAdapter.java:95"$0$0$0$7$67$"	final T adaptInternal(S adapteeResult) throws ExecutionException {"
"FutureAdapter.java:96"$0$0$0$3$29$"		synchronized (this.mutex) {"
"FutureAdapter.java:97"$0$0$0$3$24$"			switch (this.state) {"
"FutureAdapter.java:98"$0$0$0$2$17$"				case SUCCESS:"
"FutureAdapter.java:99"$0$0$0$3$28$"					return (T) this.result;"
"FutureAdapter.java:100"$0$0$0$2$17$"				case FAILURE:"
"FutureAdapter.java:101"$0$0$0$6$90$"					Assert.state(this.result instanceof ExecutionException, ""Failure without exception"");"
"FutureAdapter.java:102"$0$0$0$3$44$"					throw (ExecutionException) this.result;"
"FutureAdapter.java:103"$0$0$0$2$13$"				case NEW:"
"FutureAdapter.java:104"$0$0$0$2$10$"					try {"
"FutureAdapter.java:105"$0$0$0$4$39$"						T adapted = adapt(adapteeResult);"
"FutureAdapter.java:106"$0$0$0$3$28$"						this.result = adapted;"
"FutureAdapter.java:107"$0$0$0$3$33$"						this.state = State.SUCCESS;"
"FutureAdapter.java:108"$0$0$0$2$21$"						return adapted;"
"FutureAdapter.java:109"$0$0$0$1$6$"					}"
"FutureAdapter.java:110"$0$0$0$4$36$"					catch (ExecutionException ex) {"
"FutureAdapter.java:111"$0$0$0$3$23$"						this.result = ex;"
"FutureAdapter.java:112"$0$0$0$3$33$"						this.state = State.FAILURE;"
"FutureAdapter.java:113"$0$0$0$2$15$"						throw ex;"
"FutureAdapter.java:114"$0$0$0$1$6$"					}"
"FutureAdapter.java:115"$0$0$0$4$27$"					catch (Throwable ex) {"
"FutureAdapter.java:116"$0$0$0$5$61$"						ExecutionException execEx = new ExecutionException(ex);"
"FutureAdapter.java:117"$0$0$0$3$27$"						this.result = execEx;"
"FutureAdapter.java:118"$0$0$0$3$33$"						this.state = State.FAILURE;"
"FutureAdapter.java:119"$0$0$0$2$19$"						throw execEx;"
"FutureAdapter.java:120"$0$0$0$1$6$"					}"
"FutureAdapter.java:121"$0$0$0$1$12$"				default:"
"FutureAdapter.java:122"$0$0$0$3$39$"					throw new IllegalStateException();"
"FutureAdapter.java:123"$0$0$0$1$4$"			}"
"FutureAdapter.java:124"$0$0$0$1$3$"		}"
"FutureAdapter.java:125"$0$0$0$1$2$"	}"
"FutureAdapter.java:126"$0$0$0$0$0$""
"FutureAdapter.java:127"$0$0$0$1$4$"	/**"
"FutureAdapter.java:128"$0$0$0$8$45$"	 * Adapts the given adaptee's result into T."
"FutureAdapter.java:129"$0$0$0$5$30$"	 * @return the adapted result"
"FutureAdapter.java:130"$0$0$0$1$4$"	 */"
"FutureAdapter.java:131"$0$0$0$1$10$"	@Nullable"
"FutureAdapter.java:132"$0$0$0$7$71$"	protected abstract T adapt(S adapteeResult) throws ExecutionException;"
"FutureAdapter.java:133"$0$0$0$0$0$""
"FutureAdapter.java:134"$0$0$0$0$0$""
"FutureAdapter.java:135"$0$0$0$6$43$"	private enum State {NEW, SUCCESS, FAILURE}"
"FutureAdapter.java:136"$0$0$0$0$0$""
"FutureAdapter.java:137"$0$0$0$1$1$"}"
"StaxStreamHandler.java:1"$0$0$0$1$2$"/*"
"StaxStreamHandler.java:2"$0$0$0$8$54$" * Copyright 2002-2014 the original author or authors."
"StaxStreamHandler.java:3"$0$0$0$1$2$" *"
"StaxStreamHandler.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StaxStreamHandler.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StaxStreamHandler.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StaxStreamHandler.java:7"$0$0$0$1$2$" *"
"StaxStreamHandler.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StaxStreamHandler.java:9"$0$0$0$1$2$" *"
"StaxStreamHandler.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StaxStreamHandler.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StaxStreamHandler.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StaxStreamHandler.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StaxStreamHandler.java:14"$0$0$0$5$33$" * limitations under the License."
"StaxStreamHandler.java:15"$0$0$0$1$3$" */"
"StaxStreamHandler.java:16"$0$0$0$0$0$""
"StaxStreamHandler.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"StaxStreamHandler.java:18"$0$0$0$0$0$""
"StaxStreamHandler.java:19"$0$0$0$2$21$"import java.util.Map;"
"StaxStreamHandler.java:20"$0$0$0$0$0$""
"StaxStreamHandler.java:21"$0$0$0$2$30$"import javax.xml.XMLConstants;"
"StaxStreamHandler.java:22"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"StaxStreamHandler.java:23"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"StaxStreamHandler.java:24"$0$0$0$2$40$"import javax.xml.stream.XMLStreamWriter;"
"StaxStreamHandler.java:25"$0$0$0$0$0$""
"StaxStreamHandler.java:26"$0$0$0$2$30$"import org.xml.sax.Attributes;"
"StaxStreamHandler.java:27"$0$0$0$2$27$"import org.xml.sax.Locator;"
"StaxStreamHandler.java:28"$0$0$0$2$32$"import org.xml.sax.SAXException;"
"StaxStreamHandler.java:29"$0$0$0$2$38$"import org.xml.sax.ext.LexicalHandler;"
"StaxStreamHandler.java:30"$0$0$0$0$0$""
"StaxStreamHandler.java:31"$0$0$0$1$3$"/**"
"StaxStreamHandler.java:32"$0$0$0$7$68$" * SAX {@link org.xml.sax.ContentHandler} and {@link LexicalHandler}"
"StaxStreamHandler.java:33"$0$0$0$7$45$" * that writes to an {@link XMLStreamWriter}."
"StaxStreamHandler.java:34"$0$0$0$1$2$" *"
"StaxStreamHandler.java:35"$0$0$0$4$24$" * @author Arjen Poutsma"
"StaxStreamHandler.java:36"$0$0$0$3$15$" * @since 4.0.3"
"StaxStreamHandler.java:37"$0$0$0$1$3$" */"
"StaxStreamHandler.java:38"$0$0$0$5$53$"class StaxStreamHandler extends AbstractStaxHandler {"
"StaxStreamHandler.java:39"$0$0$0$0$0$""
"StaxStreamHandler.java:40"$0$0$0$4$44$"	private final XMLStreamWriter streamWriter;"
"StaxStreamHandler.java:41"$0$0$0$0$0$""
"StaxStreamHandler.java:42"$0$0$0$0$0$""
"StaxStreamHandler.java:43"$0$0$0$4$57$"	public StaxStreamHandler(XMLStreamWriter streamWriter) {"
"StaxStreamHandler.java:44"$0$0$0$3$35$"		this.streamWriter = streamWriter;"
"StaxStreamHandler.java:45"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:46"$0$0$0$0$0$""
"StaxStreamHandler.java:47"$0$0$0$0$0$""
"StaxStreamHandler.java:48"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:49"$0$0$0$6$67$"	protected void startDocumentInternal() throws XMLStreamException {"
"StaxStreamHandler.java:50"$0$0$0$1$41$"		this.streamWriter.writeStartDocument();"
"StaxStreamHandler.java:51"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:52"$0$0$0$0$0$""
"StaxStreamHandler.java:53"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:54"$0$0$0$6$65$"	protected void endDocumentInternal() throws XMLStreamException {"
"StaxStreamHandler.java:55"$0$0$0$1$39$"		this.streamWriter.writeEndDocument();"
"StaxStreamHandler.java:56"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:57"$0$0$0$0$0$""
"StaxStreamHandler.java:58"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:59"$0$0$0$6$71$"	protected void startElementInternal(QName name, Attributes attributes,"
"StaxStreamHandler.java:60"$0$0$0$6$68$"			Map<String, String> namespaceMapping) throws XMLStreamException {"
"StaxStreamHandler.java:61"$0$0$0$0$0$""
"StaxStreamHandler.java:62"$3$0$0$3$101$"		this.streamWriter.writeStartElement(name.getPrefix(), name.getLocalPart(), name.getNamespaceURI());"
"StaxStreamHandler.java:63"$0$0$0$0$0$""
"StaxStreamHandler.java:64"$0$0$0$7$71$"		for (Map.Entry<String, String> entry : namespaceMapping.entrySet()) {"
"StaxStreamHandler.java:65"$1$0$0$4$34$"			String prefix = entry.getKey();"
"StaxStreamHandler.java:66"$1$0$0$4$42$"			String namespaceUri = entry.getValue();"
"StaxStreamHandler.java:67"$0$0$0$2$58$"			this.streamWriter.writeNamespace(prefix, namespaceUri);"
"StaxStreamHandler.java:68"$0$0$0$3$55$"			if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {"
"StaxStreamHandler.java:69"$0$0$0$1$56$"				this.streamWriter.setDefaultNamespace(namespaceUri);"
"StaxStreamHandler.java:70"$0$0$0$1$4$"			}"
"StaxStreamHandler.java:71"$0$0$0$2$9$"			else {"
"StaxStreamHandler.java:72"$0$0$0$2$54$"				this.streamWriter.setPrefix(prefix, namespaceUri);"
"StaxStreamHandler.java:73"$0$0$0$1$4$"			}"
"StaxStreamHandler.java:74"$0$0$0$1$3$"		}"
"StaxStreamHandler.java:75"$1$0$0$10$52$"		for (int i = 0; i < attributes.getLength(); i++) {"
"StaxStreamHandler.java:76"$2$0$0$5$74$"			QName attrName = toQName(attributes.getURI(i), attributes.getQName(i));"
"StaxStreamHandler.java:77"$0$0$0$3$43$"			if (!isNamespaceDeclaration(attrName)) {"
"StaxStreamHandler.java:78"$2$0$0$2$86$"				this.streamWriter.writeAttribute(attrName.getPrefix(), attrName.getNamespaceURI(),"
"StaxStreamHandler.java:79"$2$0$0$2$55$"						attrName.getLocalPart(), attributes.getValue(i));"
"StaxStreamHandler.java:80"$0$0$0$1$4$"			}"
"StaxStreamHandler.java:81"$0$0$0$1$3$"		}"
"StaxStreamHandler.java:82"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:83"$0$0$0$0$0$""
"StaxStreamHandler.java:84"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:85"$0$0$0$10$112$"	protected void endElementInternal(QName name, Map<String, String> namespaceMapping) throws XMLStreamException {"
"StaxStreamHandler.java:86"$0$0$0$1$38$"		this.streamWriter.writeEndElement();"
"StaxStreamHandler.java:87"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:88"$0$0$0$0$0$""
"StaxStreamHandler.java:89"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:90"$0$0$0$7$75$"	protected void charactersInternal(String data) throws XMLStreamException {"
"StaxStreamHandler.java:91"$0$0$0$1$42$"		this.streamWriter.writeCharacters(data);"
"StaxStreamHandler.java:92"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:93"$0$0$0$0$0$""
"StaxStreamHandler.java:94"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:95"$0$0$0$7$70$"	protected void cDataInternal(String data) throws XMLStreamException {"
"StaxStreamHandler.java:96"$0$0$0$1$37$"		this.streamWriter.writeCData(data);"
"StaxStreamHandler.java:97"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:98"$0$0$0$0$0$""
"StaxStreamHandler.java:99"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:100"$0$0$0$7$84$"	protected void ignorableWhitespaceInternal(String data) throws XMLStreamException {"
"StaxStreamHandler.java:101"$0$0$0$1$42$"		this.streamWriter.writeCharacters(data);"
"StaxStreamHandler.java:102"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:103"$0$0$0$0$0$""
"StaxStreamHandler.java:104"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:105"$1$0$0$9$101$"	protected void processingInstructionInternal(String target, String data) throws XMLStreamException {"
"StaxStreamHandler.java:106"$1$0$0$2$61$"		this.streamWriter.writeProcessingInstruction(target, data);"
"StaxStreamHandler.java:107"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:108"$0$0$0$0$0$""
"StaxStreamHandler.java:109"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:110"$0$0$0$7$67$"	protected void dtdInternal(String dtd) throws XMLStreamException {"
"StaxStreamHandler.java:111"$0$0$0$1$34$"		this.streamWriter.writeDTD(dtd);"
"StaxStreamHandler.java:112"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:113"$0$0$0$0$0$""
"StaxStreamHandler.java:114"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:115"$0$0$0$7$75$"	protected void commentInternal(String comment) throws XMLStreamException {"
"StaxStreamHandler.java:116"$0$0$0$1$42$"		this.streamWriter.writeComment(comment);"
"StaxStreamHandler.java:117"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:118"$0$0$0$0$0$""
"StaxStreamHandler.java:119"$0$0$1$2$11$"	// Ignored"
"StaxStreamHandler.java:120"$0$0$0$0$0$""
"StaxStreamHandler.java:121"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:122"$0$0$0$5$50$"	public void setDocumentLocator(Locator locator) {"
"StaxStreamHandler.java:123"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:124"$0$0$0$0$0$""
"StaxStreamHandler.java:125"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:126"$0$0$0$7$59$"	public void startEntity(String name) throws SAXException {"
"StaxStreamHandler.java:127"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:128"$0$0$0$0$0$""
"StaxStreamHandler.java:129"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:130"$0$0$0$7$57$"	public void endEntity(String name) throws SAXException {"
"StaxStreamHandler.java:131"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:132"$0$0$0$0$0$""
"StaxStreamHandler.java:133"$0$0$0$1$10$"	@Override"
"StaxStreamHandler.java:134"$0$0$0$7$78$"	protected void skippedEntityInternal(String name) throws XMLStreamException {"
"StaxStreamHandler.java:135"$0$0$0$1$2$"	}"
"StaxStreamHandler.java:136"$0$0$0$0$0$""
"StaxStreamHandler.java:137"$0$0$0$1$1$"}"
"SystemPropertyUtils.java:1"$0$0$0$1$2$"/*"
"SystemPropertyUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"SystemPropertyUtils.java:3"$0$0$0$1$2$" *"
"SystemPropertyUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SystemPropertyUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SystemPropertyUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SystemPropertyUtils.java:7"$0$0$0$1$2$" *"
"SystemPropertyUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SystemPropertyUtils.java:9"$0$0$0$1$2$" *"
"SystemPropertyUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SystemPropertyUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SystemPropertyUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SystemPropertyUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SystemPropertyUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"SystemPropertyUtils.java:15"$0$0$0$1$3$" */"
"SystemPropertyUtils.java:16"$0$0$0$0$0$""
"SystemPropertyUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"SystemPropertyUtils.java:18"$0$0$0$0$0$""
"SystemPropertyUtils.java:19"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SystemPropertyUtils.java:20"$0$0$0$0$0$""
"SystemPropertyUtils.java:21"$0$0$0$1$3$"/**"
"SystemPropertyUtils.java:22"$0$0$0$13$83$" * Helper class for resolving placeholders in texts. Usually applied to file paths."
"SystemPropertyUtils.java:23"$0$0$0$1$2$" *"
"SystemPropertyUtils.java:24"$0$0$0$14$90$" * <p>A text may contain {@code ${...}} placeholders, to be resolved as system properties:"
"SystemPropertyUtils.java:25"$0$0$0$13$83$" * e.g. {@code ${user.dir}}. Default values can be supplied using the "":"" separator"
"SystemPropertyUtils.java:26"$0$0$0$5$25$" * between key and value."
"SystemPropertyUtils.java:27"$0$0$0$1$2$" *"
"SystemPropertyUtils.java:28"$0$0$0$4$26$" * @author Juergen Hoeller"
"SystemPropertyUtils.java:29"$0$0$0$4$21$" * @author Rob Harrop"
"SystemPropertyUtils.java:30"$0$0$0$4$20$" * @author Dave Syer"
"SystemPropertyUtils.java:31"$0$0$0$3$15$" * @since 1.2.5"
"SystemPropertyUtils.java:32"$0$0$0$3$27$" * @see #PLACEHOLDER_PREFIX"
"SystemPropertyUtils.java:33"$0$0$0$3$27$" * @see #PLACEHOLDER_SUFFIX"
"SystemPropertyUtils.java:34"$1$0$0$3$34$" * @see System#getProperty(String)"
"SystemPropertyUtils.java:35"$0$0$0$1$3$" */"
"SystemPropertyUtils.java:36"$0$0$0$5$43$"public abstract class SystemPropertyUtils {"
"SystemPropertyUtils.java:37"$0$0$0$0$0$""
"SystemPropertyUtils.java:38"$0$0$0$8$54$"	/** Prefix for system property placeholders: ""${"". */"
"SystemPropertyUtils.java:39"$0$0$0$7$54$"	public static final String PLACEHOLDER_PREFIX = ""${"";"
"SystemPropertyUtils.java:40"$0$0$0$0$0$""
"SystemPropertyUtils.java:41"$0$0$0$8$53$"	/** Suffix for system property placeholders: ""}"". */"
"SystemPropertyUtils.java:42"$0$0$0$7$53$"	public static final String PLACEHOLDER_SUFFIX = ""}"";"
"SystemPropertyUtils.java:43"$0$0$0$0$0$""
"SystemPropertyUtils.java:44"$0$0$0$9$62$"	/** Value separator for system property placeholders: "":"". */"
"SystemPropertyUtils.java:45"$0$0$0$7$50$"	public static final String VALUE_SEPARATOR = "":"";"
"SystemPropertyUtils.java:46"$0$0$0$0$0$""
"SystemPropertyUtils.java:47"$0$0$0$0$0$""
"SystemPropertyUtils.java:48"$0$0$0$6$62$"	private static final PropertyPlaceholderHelper strictHelper ="
"SystemPropertyUtils.java:49"$0$0$0$5$97$"			new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR, false);"
"SystemPropertyUtils.java:50"$0$0$0$0$0$""
"SystemPropertyUtils.java:51"$0$0$0$6$65$"	private static final PropertyPlaceholderHelper nonStrictHelper ="
"SystemPropertyUtils.java:52"$0$0$0$5$96$"			new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, VALUE_SEPARATOR, true);"
"SystemPropertyUtils.java:53"$0$0$0$0$0$""
"SystemPropertyUtils.java:54"$0$0$0$0$0$""
"SystemPropertyUtils.java:55"$0$0$0$1$4$"	/**"
"SystemPropertyUtils.java:56"$0$0$0$12$78$"	 * Resolve {@code ${...}} placeholders in the given text, replacing them with"
"SystemPropertyUtils.java:57"$0$0$0$5$41$"	 * corresponding system property values."
"SystemPropertyUtils.java:58"$0$0$0$7$37$"	 * @param text the String to resolve"
"SystemPropertyUtils.java:59"$0$0$0$5$31$"	 * @return the resolved String"
"SystemPropertyUtils.java:60"$0$0$0$9$76$"	 * @throws IllegalArgumentException if there is an unresolvable placeholder"
"SystemPropertyUtils.java:61"$0$0$0$3$28$"	 * @see #PLACEHOLDER_PREFIX"
"SystemPropertyUtils.java:62"$0$0$0$3$28$"	 * @see #PLACEHOLDER_SUFFIX"
"SystemPropertyUtils.java:63"$0$0$0$1$4$"	 */"
"SystemPropertyUtils.java:64"$0$0$0$6$56$"	public static String resolvePlaceholders(String text) {"
"SystemPropertyUtils.java:65"$0$0$0$3$42$"		return resolvePlaceholders(text, false);"
"SystemPropertyUtils.java:66"$0$0$0$1$2$"	}"
"SystemPropertyUtils.java:67"$0$0$0$0$0$""
"SystemPropertyUtils.java:68"$0$0$0$1$4$"	/**"
"SystemPropertyUtils.java:69"$0$0$0$12$78$"	 * Resolve {@code ${...}} placeholders in the given text, replacing them with"
"SystemPropertyUtils.java:70"$0$0$0$10$83$"	 * corresponding system property values. Unresolvable placeholders with no default"
"SystemPropertyUtils.java:71"$0$0$0$16$86$"	 * value are ignored and passed through unchanged if the flag is set to {@code true}."
"SystemPropertyUtils.java:72"$0$0$0$7$37$"	 * @param text the String to resolve"
"SystemPropertyUtils.java:73"$0$0$0$10$91$"	 * @param ignoreUnresolvablePlaceholders whether unresolved placeholders are to be ignored"
"SystemPropertyUtils.java:74"$0$0$0$5$31$"	 * @return the resolved String"
"SystemPropertyUtils.java:75"$0$0$0$9$76$"	 * @throws IllegalArgumentException if there is an unresolvable placeholder"
"SystemPropertyUtils.java:76"$0$0$0$3$28$"	 * @see #PLACEHOLDER_PREFIX"
"SystemPropertyUtils.java:77"$0$0$0$3$28$"	 * @see #PLACEHOLDER_SUFFIX"
"SystemPropertyUtils.java:78"$0$0$0$8$66$"	 * and the ""ignoreUnresolvablePlaceholders"" flag is {@code false}"
"SystemPropertyUtils.java:79"$0$0$0$1$4$"	 */"
"SystemPropertyUtils.java:80"$0$0$0$8$96$"	public static String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders) {"
"SystemPropertyUtils.java:81"$0$0$0$8$103$"		PropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);"
"SystemPropertyUtils.java:82"$0$0$0$4$87$"		return helper.replacePlaceholders(text, new SystemPropertyPlaceholderResolver(text));"
"SystemPropertyUtils.java:83"$0$0$0$1$2$"	}"
"SystemPropertyUtils.java:84"$0$0$0$0$0$""
"SystemPropertyUtils.java:85"$0$0$0$0$0$""
"SystemPropertyUtils.java:86"$0$0$0$1$4$"	/**"
"SystemPropertyUtils.java:87"$0$0$0$8$78$"	 * PlaceholderResolver implementation that resolves against system properties"
"SystemPropertyUtils.java:88"$0$0$0$5$37$"	 * and system environment variables."
"SystemPropertyUtils.java:89"$0$0$0$1$4$"	 */"
"SystemPropertyUtils.java:90"$0$0$0$7$114$"	private static class SystemPropertyPlaceholderResolver implements PropertyPlaceholderHelper.PlaceholderResolver {"
"SystemPropertyUtils.java:91"$0$0$0$0$0$""
"SystemPropertyUtils.java:92"$0$0$0$4$28$"		private final String text;"
"SystemPropertyUtils.java:93"$0$0$0$0$0$""
"SystemPropertyUtils.java:94"$0$0$0$4$57$"		public SystemPropertyPlaceholderResolver(String text) {"
"SystemPropertyUtils.java:95"$0$0$0$3$20$"			this.text = text;"
"SystemPropertyUtils.java:96"$0$0$0$1$3$"		}"
"SystemPropertyUtils.java:97"$0$0$0$0$0$""
"SystemPropertyUtils.java:98"$0$0$0$1$11$"		@Override"
"SystemPropertyUtils.java:99"$0$0$0$1$11$"		@Nullable"
"SystemPropertyUtils.java:100"$0$0$0$5$60$"		public String resolvePlaceholder(String placeholderName) {"
"SystemPropertyUtils.java:101"$0$0$0$2$8$"			try {"
"SystemPropertyUtils.java:102"$1$0$0$4$57$"				String propVal = System.getProperty(placeholderName);"
"SystemPropertyUtils.java:103"$0$0$0$5$26$"				if (propVal == null) {"
"SystemPropertyUtils.java:104"$0$0$1$8$54$"					// Fall back to searching the system environment."
"SystemPropertyUtils.java:105"$1$0$0$3$46$"					propVal = System.getenv(placeholderName);"
"SystemPropertyUtils.java:106"$0$0$0$1$5$"				}"
"SystemPropertyUtils.java:107"$0$0$0$2$19$"				return propVal;"
"SystemPropertyUtils.java:108"$0$0$0$1$4$"			}"
"SystemPropertyUtils.java:109"$0$0$0$4$25$"			catch (Throwable ex) {"
"SystemPropertyUtils.java:110"$0$0$0$12$87$"				System.err.println(""Could not resolve placeholder '"" + placeholderName + ""' in ["" +"
"SystemPropertyUtils.java:111"$0$0$0$9$49$"						this.text + ""] as system property: "" + ex);"
"SystemPropertyUtils.java:112"$0$0$0$2$16$"				return null;"
"SystemPropertyUtils.java:113"$0$0$0$1$4$"			}"
"SystemPropertyUtils.java:114"$0$0$0$1$3$"		}"
"SystemPropertyUtils.java:115"$0$0$0$1$2$"	}"
"SystemPropertyUtils.java:116"$0$0$0$0$0$""
"SystemPropertyUtils.java:117"$0$0$0$1$1$"}"
"AnnotationMetadata.java:1"$0$0$0$1$2$"/*"
"AnnotationMetadata.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AnnotationMetadata.java:3"$0$0$0$1$2$" *"
"AnnotationMetadata.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationMetadata.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationMetadata.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationMetadata.java:7"$0$0$0$1$2$" *"
"AnnotationMetadata.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationMetadata.java:9"$0$0$0$1$2$" *"
"AnnotationMetadata.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationMetadata.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationMetadata.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationMetadata.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationMetadata.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationMetadata.java:15"$0$0$0$1$3$" */"
"AnnotationMetadata.java:16"$0$0$0$0$0$""
"AnnotationMetadata.java:17"$0$0$0$2$38$"package org.springframework.core.type;"
"AnnotationMetadata.java:18"$0$0$0$0$0$""
"AnnotationMetadata.java:19"$0$0$0$2$29$"import java.util.Collections;"
"AnnotationMetadata.java:20"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"AnnotationMetadata.java:21"$0$0$0$2$21$"import java.util.Set;"
"AnnotationMetadata.java:22"$0$0$0$2$35$"import java.util.stream.Collectors;"
"AnnotationMetadata.java:23"$0$0$0$0$0$""
"AnnotationMetadata.java:24"$0$0$0$2$60$"import org.springframework.core.annotation.MergedAnnotation;"
"AnnotationMetadata.java:25"$0$0$0$2$61$"import org.springframework.core.annotation.MergedAnnotations;"
"AnnotationMetadata.java:26"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"AnnotationMetadata.java:27"$0$0$0$0$0$""
"AnnotationMetadata.java:28"$0$0$0$1$3$"/**"
"AnnotationMetadata.java:29"$0$0$0$12$74$" * Interface that defines abstract access to the annotations of a specific"
"AnnotationMetadata.java:30"$0$0$0$15$70$" * class, in a form that does not require that class to be loaded yet."
"AnnotationMetadata.java:31"$0$0$0$1$2$" *"
"AnnotationMetadata.java:32"$0$0$0$4$26$" * @author Juergen Hoeller"
"AnnotationMetadata.java:33"$0$0$0$4$22$" * @author Mark Fisher"
"AnnotationMetadata.java:34"$0$0$0$4$23$" * @author Phillip Webb"
"AnnotationMetadata.java:35"$0$0$0$4$22$" * @author Sam Brannen"
"AnnotationMetadata.java:36"$0$0$0$3$13$" * @since 2.5"
"AnnotationMetadata.java:37"$0$0$0$3$34$" * @see StandardAnnotationMetadata"
"AnnotationMetadata.java:38"$1$0$0$3$89$" * @see org.springframework.core.type.classreading.MetadataReader#getAnnotationMetadata()"
"AnnotationMetadata.java:39"$0$0$0$3$29$" * @see AnnotatedTypeMetadata"
"AnnotationMetadata.java:40"$0$0$0$1$3$" */"
"AnnotationMetadata.java:41"$0$0$0$7$82$"public interface AnnotationMetadata extends ClassMetadata, AnnotatedTypeMetadata {"
"AnnotationMetadata.java:42"$0$0$0$0$0$""
"AnnotationMetadata.java:43"$0$0$0$1$4$"	/**"
"AnnotationMetadata.java:44"$0$0$0$12$68$"	 * Get the fully qualified class names of all annotation types that"
"AnnotationMetadata.java:45"$0$0$0$7$49$"	 * are <em>present</em> on the underlying class."
"AnnotationMetadata.java:46"$0$0$0$6$37$"	 * @return the annotation type names"
"AnnotationMetadata.java:47"$0$0$0$1$4$"	 */"
"AnnotationMetadata.java:48"$1$0$0$4$43$"	default Set<String> getAnnotationTypes() {"
"AnnotationMetadata.java:49"$1$0$0$2$34$"		return getAnnotations().stream()"
"AnnotationMetadata.java:50"$0$0$0$1$48$"				.filter(MergedAnnotation::isDirectlyPresent)"
"AnnotationMetadata.java:51"$2$0$0$3$54$"				.map(annotation -> annotation.getType().getName())"
"AnnotationMetadata.java:52"$0$0$0$1$58$"				.collect(Collectors.toCollection(LinkedHashSet::new));"
"AnnotationMetadata.java:53"$0$0$0$1$2$"	}"
"AnnotationMetadata.java:54"$0$0$0$0$0$""
"AnnotationMetadata.java:55"$0$0$0$1$4$"	/**"
"AnnotationMetadata.java:56"$0$0$0$12$73$"	 * Get the fully qualified class names of all meta-annotation types that"
"AnnotationMetadata.java:57"$0$0$0$12$78$"	 * are <em>present</em> on the given annotation type on the underlying class."
"AnnotationMetadata.java:58"$0$0$0$11$79$"	 * @param annotationName the fully qualified class name of the meta-annotation"
"AnnotationMetadata.java:59"$0$0$0$5$20$"	 * type to look for"
"AnnotationMetadata.java:60"$0$0$0$13$73$"	 * @return the meta-annotation type names, or an empty set if none found"
"AnnotationMetadata.java:61"$0$0$0$1$4$"	 */"
"AnnotationMetadata.java:62"$1$0$0$5$68$"	default Set<String> getMetaAnnotationTypes(String annotationName) {"
"AnnotationMetadata.java:63"$2$0$0$5$109$"		MergedAnnotation<?> annotation = getAnnotations().get(annotationName, MergedAnnotation::isDirectlyPresent);"
"AnnotationMetadata.java:64"$0$0$0$3$32$"		if (!annotation.isPresent()) {"
"AnnotationMetadata.java:65"$0$0$0$2$33$"			return Collections.emptySet();"
"AnnotationMetadata.java:66"$0$0$0$1$3$"		}"
"AnnotationMetadata.java:67"$1$0$0$3$100$"		return MergedAnnotations.from(annotation.getType(), SearchStrategy.INHERITED_ANNOTATIONS).stream()"
"AnnotationMetadata.java:68"$2$0$0$3$66$"				.map(mergedAnnotation -> mergedAnnotation.getType().getName())"
"AnnotationMetadata.java:69"$0$0$0$1$58$"				.collect(Collectors.toCollection(LinkedHashSet::new));"
"AnnotationMetadata.java:70"$0$0$0$1$2$"	}"
"AnnotationMetadata.java:71"$0$0$0$0$0$""
"AnnotationMetadata.java:72"$0$0$0$1$4$"	/**"
"AnnotationMetadata.java:73"$0$0$0$12$76$"	 * Determine whether an annotation of the given type is <em>present</em> on"
"AnnotationMetadata.java:74"$0$0$0$4$25$"	 * the underlying class."
"AnnotationMetadata.java:75"$0$0$0$11$74$"	 * @param annotationName the fully qualified class name of the annotation"
"AnnotationMetadata.java:76"$0$0$0$5$20$"	 * type to look for"
"AnnotationMetadata.java:77"$0$0$0$10$60$"	 * @return {@code true} if a matching annotation is present"
"AnnotationMetadata.java:78"$0$0$0$1$4$"	 */"
"AnnotationMetadata.java:79"$0$0$0$5$55$"	default boolean hasAnnotation(String annotationName) {"
"AnnotationMetadata.java:80"$1$0$0$2$60$"		return getAnnotations().isDirectlyPresent(annotationName);"
"AnnotationMetadata.java:81"$0$0$0$1$2$"	}"
"AnnotationMetadata.java:82"$0$0$0$0$0$""
"AnnotationMetadata.java:83"$0$0$0$1$4$"	/**"
"AnnotationMetadata.java:84"$0$0$0$12$75$"	 * Determine whether the underlying class has an annotation that is itself"
"AnnotationMetadata.java:85"$0$0$0$9$57$"	 * annotated with the meta-annotation of the given type."
"AnnotationMetadata.java:86"$0$0$0$10$67$"	 * @param metaAnnotationName the fully qualified class name of the"
"AnnotationMetadata.java:87"$0$0$0$6$36$"	 * meta-annotation type to look for"
"AnnotationMetadata.java:88"$0$0$0$10$65$"	 * @return {@code true} if a matching meta-annotation is present"
"AnnotationMetadata.java:89"$0$0$0$1$4$"	 */"
"AnnotationMetadata.java:90"$0$0$0$5$63$"	default boolean hasMetaAnnotation(String metaAnnotationName) {"
"AnnotationMetadata.java:91"$2$0$0$2$49$"		return getAnnotations().get(metaAnnotationName,"
"AnnotationMetadata.java:92"$0$0$0$1$49$"				MergedAnnotation::isMetaPresent).isPresent();"
"AnnotationMetadata.java:93"$0$0$0$1$2$"	}"
"AnnotationMetadata.java:94"$0$0$0$0$0$""
"AnnotationMetadata.java:95"$0$0$0$1$4$"	/**"
"AnnotationMetadata.java:96"$0$0$0$11$67$"	 * Determine whether the underlying class has any methods that are"
"AnnotationMetadata.java:97"$0$0$0$9$65$"	 * annotated (or meta-annotated) with the given annotation type."
"AnnotationMetadata.java:98"$0$0$0$11$74$"	 * @param annotationName the fully qualified class name of the annotation"
"AnnotationMetadata.java:99"$0$0$0$5$20$"	 * type to look for"
"AnnotationMetadata.java:100"$0$0$0$1$4$"	 */"
"AnnotationMetadata.java:101"$0$0$0$5$61$"	default boolean hasAnnotatedMethods(String annotationName) {"
"AnnotationMetadata.java:102"$1$0$0$2$56$"		return !getAnnotatedMethods(annotationName).isEmpty();"
"AnnotationMetadata.java:103"$0$0$0$1$2$"	}"
"AnnotationMetadata.java:104"$0$0$0$0$0$""
"AnnotationMetadata.java:105"$0$0$0$1$4$"	/**"
"AnnotationMetadata.java:106"$0$0$0$11$67$"	 * Retrieve the method metadata for all methods that are annotated"
"AnnotationMetadata.java:107"$0$0$0$8$55$"	 * (or meta-annotated) with the given annotation type."
"AnnotationMetadata.java:108"$0$0$0$8$71$"	 * <p>For any returned method, {@link MethodMetadata#isAnnotated} will"
"AnnotationMetadata.java:109"$0$0$0$9$54$"	 * return {@code true} for the given annotation type."
"AnnotationMetadata.java:110"$0$0$0$11$74$"	 * @param annotationName the fully qualified class name of the annotation"
"AnnotationMetadata.java:111"$0$0$0$5$20$"	 * type to look for"
"AnnotationMetadata.java:112"$0$0$0$13$76$"	 * @return a set of {@link MethodMetadata} for methods that have a matching"
"AnnotationMetadata.java:113"$0$0$0$14$73$"	 * annotation. The return value will be an empty set if no methods match"
"AnnotationMetadata.java:114"$0$0$0$4$24$"	 * the annotation type."
"AnnotationMetadata.java:115"$0$0$0$1$4$"	 */"
"AnnotationMetadata.java:116"$1$0$0$3$64$"	Set<MethodMetadata> getAnnotatedMethods(String annotationName);"
"AnnotationMetadata.java:117"$0$0$0$0$0$""
"AnnotationMetadata.java:118"$0$0$0$0$0$""
"AnnotationMetadata.java:119"$0$0$0$1$4$"	/**"
"AnnotationMetadata.java:120"$0$0$0$10$70$"	 * Factory method to create a new {@link AnnotationMetadata} instance"
"AnnotationMetadata.java:121"$0$0$0$8$50$"	 * for the given class using standard reflection."
"AnnotationMetadata.java:122"$0$0$0$7$39$"	 * @param type the class to introspect"
"AnnotationMetadata.java:123"$0$0$0$7$53$"	 * @return a new {@link AnnotationMetadata} instance"
"AnnotationMetadata.java:124"$0$0$0$3$14$"	 * @since 5.2"
"AnnotationMetadata.java:125"$0$0$0$1$4$"	 */"
"AnnotationMetadata.java:126"$0$0$0$5$54$"	static AnnotationMetadata introspect(Class<?> type) {"
"AnnotationMetadata.java:127"$0$0$0$2$47$"		return StandardAnnotationMetadata.from(type);"
"AnnotationMetadata.java:128"$0$0$0$1$2$"	}"
"AnnotationMetadata.java:129"$0$0$0$0$0$""
"AnnotationMetadata.java:130"$0$0$0$1$1$"}"
"StaxResult.java:1"$0$0$0$1$2$"/*"
"StaxResult.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"StaxResult.java:3"$0$0$0$1$2$" *"
"StaxResult.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StaxResult.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StaxResult.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StaxResult.java:7"$0$0$0$1$2$" *"
"StaxResult.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StaxResult.java:9"$0$0$0$1$2$" *"
"StaxResult.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StaxResult.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StaxResult.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StaxResult.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StaxResult.java:14"$0$0$0$5$33$" * limitations under the License."
"StaxResult.java:15"$0$0$0$1$3$" */"
"StaxResult.java:16"$0$0$0$0$0$""
"StaxResult.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"StaxResult.java:18"$0$0$0$0$0$""
"StaxResult.java:19"$0$0$0$2$39$"import javax.xml.stream.XMLEventWriter;"
"StaxResult.java:20"$0$0$0$2$40$"import javax.xml.stream.XMLStreamWriter;"
"StaxResult.java:21"$0$0$0$2$41$"import javax.xml.transform.sax.SAXResult;"
"StaxResult.java:22"$0$0$0$0$0$""
"StaxResult.java:23"$0$0$0$2$34$"import org.xml.sax.ContentHandler;"
"StaxResult.java:24"$0$0$0$2$38$"import org.xml.sax.ext.LexicalHandler;"
"StaxResult.java:25"$0$0$0$0$0$""
"StaxResult.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StaxResult.java:27"$0$0$0$0$0$""
"StaxResult.java:28"$0$0$0$1$3$"/**"
"StaxResult.java:29"$0$0$0$15$99$" * Implementation of the {@code Result} tagging interface for StAX writers. Can be constructed with"
"StaxResult.java:30"$0$0$0$8$61$" * an {@code XMLEventConsumer} or an {@code XMLStreamWriter}."
"StaxResult.java:31"$0$0$0$1$2$" *"
"StaxResult.java:32"$0$0$0$15$98$" * <p>This class is necessary because there is no implementation of {@code Source} for StaxReaders"
"StaxResult.java:33"$0$0$0$20$98$" * in JAXP 1.3. There is a {@code StAXResult} in JAXP 1.4 (JDK 1.6), but this class is kept around"
"StaxResult.java:34"$0$0$0$5$39$" * for backwards compatibility reasons."
"StaxResult.java:35"$0$0$0$1$2$" *"
"StaxResult.java:36"$0$0$0$13$91$" * <p>Even though {@code StaxResult} extends from {@code SAXResult}, calling the methods of"
"StaxResult.java:37"$0$0$0$12$96$" * {@code SAXResult} is <strong>not supported</strong>. In general, the only supported operation"
"StaxResult.java:38"$1$0$0$17$100$" * on this class is to use the {@code ContentHandler} obtained via {@link #getHandler()} to parse an"
"StaxResult.java:39"$0$0$0$10$99$" * input source using an {@code XMLReader}. Calling {@link #setHandler(org.xml.sax.ContentHandler)}"
"StaxResult.java:40"$0$0$0$7$79$" * or {@link #setLexicalHandler(org.xml.sax.ext.LexicalHandler)} will result in"
"StaxResult.java:41"$0$0$0$3$42$" * {@code UnsupportedOperationException}s."
"StaxResult.java:42"$0$0$0$1$2$" *"
"StaxResult.java:43"$0$0$0$4$24$" * @author Arjen Poutsma"
"StaxResult.java:44"$0$0$0$3$13$" * @since 3.0"
"StaxResult.java:45"$0$0$0$3$22$" * @see XMLEventWriter"
"StaxResult.java:46"$0$0$0$3$23$" * @see XMLStreamWriter"
"StaxResult.java:47"$0$0$0$3$39$" * @see javax.xml.transform.Transformer"
"StaxResult.java:48"$0$0$0$1$3$" */"
"StaxResult.java:49"$0$0$0$5$36$"class StaxResult extends SAXResult {"
"StaxResult.java:50"$0$0$0$0$0$""
"StaxResult.java:51"$0$0$0$1$10$"	@Nullable"
"StaxResult.java:52"$0$0$0$3$36$"	private XMLEventWriter eventWriter;"
"StaxResult.java:53"$0$0$0$0$0$""
"StaxResult.java:54"$0$0$0$1$10$"	@Nullable"
"StaxResult.java:55"$0$0$0$3$38$"	private XMLStreamWriter streamWriter;"
"StaxResult.java:56"$0$0$0$0$0$""
"StaxResult.java:57"$0$0$0$0$0$""
"StaxResult.java:58"$0$0$0$1$4$"	/**"
"StaxResult.java:59"$0$0$0$14$97$"	 * Construct a new instance of the {@code StaxResult} with the specified {@code XMLEventWriter}."
"StaxResult.java:60"$0$0$0$9$61$"	 * @param eventWriter the {@code XMLEventWriter} to write to"
"StaxResult.java:61"$0$0$0$1$4$"	 */"
"StaxResult.java:62"$0$0$0$4$48$"	public StaxResult(XMLEventWriter eventWriter) {"
"StaxResult.java:63"$0$0$0$5$63$"		StaxEventHandler handler = new StaxEventHandler(eventWriter);"
"StaxResult.java:64"$0$0$0$1$28$"		super.setHandler(handler);"
"StaxResult.java:65"$0$0$0$1$35$"		super.setLexicalHandler(handler);"
"StaxResult.java:66"$0$0$0$3$33$"		this.eventWriter = eventWriter;"
"StaxResult.java:67"$0$0$0$1$2$"	}"
"StaxResult.java:68"$0$0$0$0$0$""
"StaxResult.java:69"$0$0$0$1$4$"	/**"
"StaxResult.java:70"$0$0$0$14$98$"	 * Construct a new instance of the {@code StaxResult} with the specified {@code XMLStreamWriter}."
"StaxResult.java:71"$0$0$0$9$63$"	 * @param streamWriter the {@code XMLStreamWriter} to write to"
"StaxResult.java:72"$0$0$0$1$4$"	 */"
"StaxResult.java:73"$0$0$0$4$50$"	public StaxResult(XMLStreamWriter streamWriter) {"
"StaxResult.java:74"$0$0$0$5$66$"		StaxStreamHandler handler = new StaxStreamHandler(streamWriter);"
"StaxResult.java:75"$0$0$0$1$28$"		super.setHandler(handler);"
"StaxResult.java:76"$0$0$0$1$35$"		super.setLexicalHandler(handler);"
"StaxResult.java:77"$0$0$0$3$35$"		this.streamWriter = streamWriter;"
"StaxResult.java:78"$0$0$0$1$2$"	}"
"StaxResult.java:79"$0$0$0$0$0$""
"StaxResult.java:80"$0$0$0$0$0$""
"StaxResult.java:81"$0$0$0$1$4$"	/**"
"StaxResult.java:82"$0$0$0$10$70$"	 * Return the {@code XMLEventWriter} used by this {@code StaxResult}."
"StaxResult.java:83"$0$0$0$11$78$"	 * <p>If this {@code StaxResult} was created with an {@code XMLStreamWriter},"
"StaxResult.java:84"$0$0$0$7$36$"	 * the result will be {@code null}."
"StaxResult.java:85"$0$0$0$10$53$"	 * @return the StAX event writer used by this result"
"StaxResult.java:86"$0$0$0$3$53$"	 * @see #StaxResult(javax.xml.stream.XMLEventWriter)"
"StaxResult.java:87"$0$0$0$1$4$"	 */"
"StaxResult.java:88"$0$0$0$1$10$"	@Nullable"
"StaxResult.java:89"$1$0$0$4$44$"	public XMLEventWriter getXMLEventWriter() {"
"StaxResult.java:90"$0$0$0$2$26$"		return this.eventWriter;"
"StaxResult.java:91"$0$0$0$1$2$"	}"
"StaxResult.java:92"$0$0$0$0$0$""
"StaxResult.java:93"$0$0$0$1$4$"	/**"
"StaxResult.java:94"$0$0$0$10$71$"	 * Return the {@code XMLStreamWriter} used by this {@code StaxResult}."
"StaxResult.java:95"$0$0$0$11$79$"	 * <p>If this {@code StaxResult} was created with an {@code XMLEventConsumer},"
"StaxResult.java:96"$0$0$0$7$36$"	 * the result will be {@code null}."
"StaxResult.java:97"$0$0$0$10$54$"	 * @return the StAX stream writer used by this result"
"StaxResult.java:98"$0$0$0$3$54$"	 * @see #StaxResult(javax.xml.stream.XMLStreamWriter)"
"StaxResult.java:99"$0$0$0$1$4$"	 */"
"StaxResult.java:100"$0$0$0$1$10$"	@Nullable"
"StaxResult.java:101"$1$0$0$4$46$"	public XMLStreamWriter getXMLStreamWriter() {"
"StaxResult.java:102"$0$0$0$2$27$"		return this.streamWriter;"
"StaxResult.java:103"$0$0$0$1$2$"	}"
"StaxResult.java:104"$0$0$0$0$0$""
"StaxResult.java:105"$0$0$0$0$0$""
"StaxResult.java:106"$0$0$0$1$4$"	/**"
"StaxResult.java:107"$0$0$0$5$52$"	 * Throws an {@code UnsupportedOperationException}."
"StaxResult.java:108"$0$0$0$4$48$"	 * @throws UnsupportedOperationException always"
"StaxResult.java:109"$0$0$0$1$4$"	 */"
"StaxResult.java:110"$0$0$0$1$10$"	@Override"
"StaxResult.java:111"$0$0$0$5$49$"	public void setHandler(ContentHandler handler) {"
"StaxResult.java:112"$0$0$0$6$73$"		throw new UnsupportedOperationException(""setHandler is not supported"");"
"StaxResult.java:113"$0$0$0$1$2$"	}"
"StaxResult.java:114"$0$0$0$0$0$""
"StaxResult.java:115"$0$0$0$1$4$"	/**"
"StaxResult.java:116"$0$0$0$5$52$"	 * Throws an {@code UnsupportedOperationException}."
"StaxResult.java:117"$0$0$0$4$48$"	 * @throws UnsupportedOperationException always"
"StaxResult.java:118"$0$0$0$1$4$"	 */"
"StaxResult.java:119"$0$0$0$1$10$"	@Override"
"StaxResult.java:120"$0$0$0$5$56$"	public void setLexicalHandler(LexicalHandler handler) {"
"StaxResult.java:121"$0$0$0$6$80$"		throw new UnsupportedOperationException(""setLexicalHandler is not supported"");"
"StaxResult.java:122"$0$0$0$1$2$"	}"
"StaxResult.java:123"$0$0$0$0$0$""
"StaxResult.java:124"$0$0$0$1$1$"}"
"PropertySourcesPropertyResolver.java:1"$0$0$0$1$2$"/*"
"PropertySourcesPropertyResolver.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"PropertySourcesPropertyResolver.java:3"$0$0$0$1$2$" *"
"PropertySourcesPropertyResolver.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PropertySourcesPropertyResolver.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PropertySourcesPropertyResolver.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PropertySourcesPropertyResolver.java:7"$0$0$0$1$2$" *"
"PropertySourcesPropertyResolver.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PropertySourcesPropertyResolver.java:9"$0$0$0$1$2$" *"
"PropertySourcesPropertyResolver.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PropertySourcesPropertyResolver.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PropertySourcesPropertyResolver.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PropertySourcesPropertyResolver.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PropertySourcesPropertyResolver.java:14"$0$0$0$5$33$" * limitations under the License."
"PropertySourcesPropertyResolver.java:15"$0$0$0$1$3$" */"
"PropertySourcesPropertyResolver.java:16"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"PropertySourcesPropertyResolver.java:18"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:19"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PropertySourcesPropertyResolver.java:20"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:21"$0$0$0$1$3$"/**"
"PropertySourcesPropertyResolver.java:22"$0$0$0$9$80$" * {@link PropertyResolver} implementation that resolves property values against"
"PropertySourcesPropertyResolver.java:23"$0$0$0$7$48$" * an underlying set of {@link PropertySources}."
"PropertySourcesPropertyResolver.java:24"$0$0$0$1$2$" *"
"PropertySourcesPropertyResolver.java:25"$0$0$0$4$22$" * @author Chris Beams"
"PropertySourcesPropertyResolver.java:26"$0$0$0$4$26$" * @author Juergen Hoeller"
"PropertySourcesPropertyResolver.java:27"$0$0$0$3$13$" * @since 3.1"
"PropertySourcesPropertyResolver.java:28"$0$0$0$3$22$" * @see PropertySource"
"PropertySourcesPropertyResolver.java:29"$0$0$0$3$23$" * @see PropertySources"
"PropertySourcesPropertyResolver.java:30"$0$0$0$3$27$" * @see AbstractEnvironment"
"PropertySourcesPropertyResolver.java:31"$0$0$0$1$3$" */"
"PropertySourcesPropertyResolver.java:32"$0$0$0$6$79$"public class PropertySourcesPropertyResolver extends AbstractPropertyResolver {"
"PropertySourcesPropertyResolver.java:33"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:34"$0$0$0$1$10$"	@Nullable"
"PropertySourcesPropertyResolver.java:35"$0$0$0$4$47$"	private final PropertySources propertySources;"
"PropertySourcesPropertyResolver.java:36"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:37"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:38"$0$0$0$1$4$"	/**"
"PropertySourcesPropertyResolver.java:39"$0$0$0$10$61$"	 * Create a new resolver against the given property sources."
"PropertySourcesPropertyResolver.java:40"$0$0$0$11$75$"	 * @param propertySources the set of {@link PropertySource} objects to use"
"PropertySourcesPropertyResolver.java:41"$0$0$0$1$4$"	 */"
"PropertySourcesPropertyResolver.java:42"$0$0$0$5$84$"	public PropertySourcesPropertyResolver(@Nullable PropertySources propertySources) {"
"PropertySourcesPropertyResolver.java:43"$0$0$0$3$41$"		this.propertySources = propertySources;"
"PropertySourcesPropertyResolver.java:44"$0$0$0$1$2$"	}"
"PropertySourcesPropertyResolver.java:45"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:46"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:47"$0$0$0$1$10$"	@Override"
"PropertySourcesPropertyResolver.java:48"$0$0$0$5$46$"	public boolean containsProperty(String key) {"
"PropertySourcesPropertyResolver.java:49"$0$0$0$5$37$"		if (this.propertySources != null) {"
"PropertySourcesPropertyResolver.java:50"$0$0$0$6$66$"			for (PropertySource<?> propertySource : this.propertySources) {"
"PropertySourcesPropertyResolver.java:51"$0$0$0$3$47$"				if (propertySource.containsProperty(key)) {"
"PropertySourcesPropertyResolver.java:52"$0$0$0$2$17$"					return true;"
"PropertySourcesPropertyResolver.java:53"$0$0$0$1$5$"				}"
"PropertySourcesPropertyResolver.java:54"$0$0$0$1$4$"			}"
"PropertySourcesPropertyResolver.java:55"$0$0$0$1$3$"		}"
"PropertySourcesPropertyResolver.java:56"$0$0$0$2$15$"		return false;"
"PropertySourcesPropertyResolver.java:57"$0$0$0$1$2$"	}"
"PropertySourcesPropertyResolver.java:58"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:59"$0$0$0$1$10$"	@Override"
"PropertySourcesPropertyResolver.java:60"$0$0$0$1$10$"	@Nullable"
"PropertySourcesPropertyResolver.java:61"$1$0$0$5$40$"	public String getProperty(String key) {"
"PropertySourcesPropertyResolver.java:62"$1$0$0$4$46$"		return getProperty(key, String.class, true);"
"PropertySourcesPropertyResolver.java:63"$0$0$0$1$2$"	}"
"PropertySourcesPropertyResolver.java:64"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:65"$0$0$0$1$10$"	@Override"
"PropertySourcesPropertyResolver.java:66"$0$0$0$1$10$"	@Nullable"
"PropertySourcesPropertyResolver.java:67"$2$0$0$8$65$"	public <T> T getProperty(String key, Class<T> targetValueType) {"
"PropertySourcesPropertyResolver.java:68"$2$0$0$4$49$"		return getProperty(key, targetValueType, true);"
"PropertySourcesPropertyResolver.java:69"$0$0$0$1$2$"	}"
"PropertySourcesPropertyResolver.java:70"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:71"$0$0$0$1$10$"	@Override"
"PropertySourcesPropertyResolver.java:72"$0$0$0$1$10$"	@Nullable"
"PropertySourcesPropertyResolver.java:73"$1$0$0$5$54$"	protected String getPropertyAsRawString(String key) {"
"PropertySourcesPropertyResolver.java:74"$1$0$0$4$47$"		return getProperty(key, String.class, false);"
"PropertySourcesPropertyResolver.java:75"$0$0$0$1$2$"	}"
"PropertySourcesPropertyResolver.java:76"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:77"$0$0$0$1$10$"	@Nullable"
"PropertySourcesPropertyResolver.java:78"$2$0$0$10$103$"	protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {"
"PropertySourcesPropertyResolver.java:79"$0$0$0$5$37$"		if (this.propertySources != null) {"
"PropertySourcesPropertyResolver.java:80"$0$0$0$6$66$"			for (PropertySource<?> propertySource : this.propertySources) {"
"PropertySourcesPropertyResolver.java:81"$0$0$0$3$34$"				if (logger.isTraceEnabled()) {"
"PropertySourcesPropertyResolver.java:82"$0$0$0$12$73$"					logger.trace(""Searching for key '"" + key + ""' in PropertySource '"" +"
"PropertySourcesPropertyResolver.java:83"$1$0$0$3$39$"							propertySource.getName() + ""'"");"
"PropertySourcesPropertyResolver.java:84"$0$0$0$1$5$"				}"
"PropertySourcesPropertyResolver.java:85"$1$0$0$4$51$"				Object value = propertySource.getProperty(key);"
"PropertySourcesPropertyResolver.java:86"$0$0$0$5$24$"				if (value != null) {"
"PropertySourcesPropertyResolver.java:87"$0$0$0$7$64$"					if (resolveNestedPlaceholders && value instanceof String) {"
"PropertySourcesPropertyResolver.java:88"$0$0$0$4$56$"						value = resolveNestedPlaceholders((String) value);"
"PropertySourcesPropertyResolver.java:89"$0$0$0$1$6$"					}"
"PropertySourcesPropertyResolver.java:90"$0$0$0$3$45$"					logKeyFound(key, propertySource, value);"
"PropertySourcesPropertyResolver.java:91"$1$0$0$3$60$"					return convertValueIfNecessary(value, targetValueType);"
"PropertySourcesPropertyResolver.java:92"$0$0$0$1$5$"				}"
"PropertySourcesPropertyResolver.java:93"$0$0$0$1$4$"			}"
"PropertySourcesPropertyResolver.java:94"$0$0$0$1$3$"		}"
"PropertySourcesPropertyResolver.java:95"$0$0$0$3$32$"		if (logger.isTraceEnabled()) {"
"PropertySourcesPropertyResolver.java:96"$0$0$0$13$75$"			logger.trace(""Could not find key '"" + key + ""' in any property source"");"
"PropertySourcesPropertyResolver.java:97"$0$0$0$1$3$"		}"
"PropertySourcesPropertyResolver.java:98"$0$0$0$2$14$"		return null;"
"PropertySourcesPropertyResolver.java:99"$0$0$0$1$2$"	}"
"PropertySourcesPropertyResolver.java:100"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:101"$0$0$0$1$4$"	/**"
"PropertySourcesPropertyResolver.java:102"$0$0$0$14$80$"	 * Log the given key as found in the given {@link PropertySource}, resulting in"
"PropertySourcesPropertyResolver.java:103"$0$0$0$4$20$"	 * the given value."
"PropertySourcesPropertyResolver.java:104"$0$0$0$13$81$"	 * <p>The default implementation writes a debug log message with key and source."
"PropertySourcesPropertyResolver.java:105"$0$0$0$16$81$"	 * As of 4.3.3, this does not log the value anymore in order to avoid accidental"
"PropertySourcesPropertyResolver.java:106"$0$0$0$12$80$"	 * logging of sensitive settings. Subclasses may override this method to change"
"PropertySourcesPropertyResolver.java:107"$0$0$0$13$80$"	 * the log level and/or log message, including the property's value if desired."
"PropertySourcesPropertyResolver.java:108"$0$0$0$6$28$"	 * @param key the key found"
"PropertySourcesPropertyResolver.java:109"$0$0$0$13$83$"	 * @param propertySource the {@code PropertySource} that the key has been found in"
"PropertySourcesPropertyResolver.java:110"$0$0$0$6$40$"	 * @param value the corresponding value"
"PropertySourcesPropertyResolver.java:111"$0$0$0$3$16$"	 * @since 4.3.1"
"PropertySourcesPropertyResolver.java:112"$0$0$0$1$4$"	 */"
"PropertySourcesPropertyResolver.java:113"$0$0$0$9$89$"	protected void logKeyFound(String key, PropertySource<?> propertySource, Object value) {"
"PropertySourcesPropertyResolver.java:114"$0$0$0$3$32$"		if (logger.isDebugEnabled()) {"
"PropertySourcesPropertyResolver.java:115"$1$0$0$13$90$"			logger.debug(""Found key '"" + key + ""' in PropertySource '"" + propertySource.getName() +"
"PropertySourcesPropertyResolver.java:116"$2$0$0$8$65$"					""' with value of type "" + value.getClass().getSimpleName());"
"PropertySourcesPropertyResolver.java:117"$0$0$0$1$3$"		}"
"PropertySourcesPropertyResolver.java:118"$0$0$0$1$2$"	}"
"PropertySourcesPropertyResolver.java:119"$0$0$0$0$0$""
"PropertySourcesPropertyResolver.java:120"$0$0$0$1$1$"}"
"ByteArrayEncoder.java:1"$0$0$0$1$2$"/*"
"ByteArrayEncoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ByteArrayEncoder.java:3"$0$0$0$1$2$" *"
"ByteArrayEncoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ByteArrayEncoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ByteArrayEncoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ByteArrayEncoder.java:7"$0$0$0$1$2$" *"
"ByteArrayEncoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ByteArrayEncoder.java:9"$0$0$0$1$2$" *"
"ByteArrayEncoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ByteArrayEncoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ByteArrayEncoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ByteArrayEncoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ByteArrayEncoder.java:14"$0$0$0$5$33$" * limitations under the License."
"ByteArrayEncoder.java:15"$0$0$0$1$3$" */"
"ByteArrayEncoder.java:16"$0$0$0$0$0$""
"ByteArrayEncoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"ByteArrayEncoder.java:18"$0$0$0$0$0$""
"ByteArrayEncoder.java:19"$0$0$0$2$21$"import java.util.Map;"
"ByteArrayEncoder.java:20"$0$0$0$0$0$""
"ByteArrayEncoder.java:21"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"ByteArrayEncoder.java:22"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"ByteArrayEncoder.java:23"$0$0$0$0$0$""
"ByteArrayEncoder.java:24"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"ByteArrayEncoder.java:25"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"ByteArrayEncoder.java:26"$0$0$0$2$60$"import org.springframework.core.io.buffer.DataBufferFactory;"
"ByteArrayEncoder.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ByteArrayEncoder.java:28"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"ByteArrayEncoder.java:29"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"ByteArrayEncoder.java:30"$0$0$0$0$0$""
"ByteArrayEncoder.java:31"$0$0$0$1$3$"/**"
"ByteArrayEncoder.java:32"$0$0$0$6$35$" * Encoder for {@code byte} arrays."
"ByteArrayEncoder.java:33"$0$0$0$1$2$" *"
"ByteArrayEncoder.java:34"$0$0$0$4$24$" * @author Arjen Poutsma"
"ByteArrayEncoder.java:35"$0$0$0$3$13$" * @since 5.0"
"ByteArrayEncoder.java:36"$0$0$0$1$3$" */"
"ByteArrayEncoder.java:37"$0$0$0$6$63$"public class ByteArrayEncoder extends AbstractEncoder<byte[]> {"
"ByteArrayEncoder.java:38"$0$0$0$0$0$""
"ByteArrayEncoder.java:39"$0$0$0$3$28$"	public ByteArrayEncoder() {"
"ByteArrayEncoder.java:40"$0$0$0$1$27$"		super(MimeTypeUtils.ALL);"
"ByteArrayEncoder.java:41"$0$0$0$1$2$"	}"
"ByteArrayEncoder.java:42"$0$0$0$0$0$""
"ByteArrayEncoder.java:43"$0$0$0$0$0$""
"ByteArrayEncoder.java:44"$0$0$0$1$10$"	@Override"
"ByteArrayEncoder.java:45"$0$0$0$8$84$"	public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"ByteArrayEncoder.java:46"$0$0$0$4$41$"		Class<?> clazz = elementType.toClass();"
"ByteArrayEncoder.java:47"$0$0$0$5$88$"		return super.canEncode(elementType, mimeType) && byte[].class.isAssignableFrom(clazz);"
"ByteArrayEncoder.java:48"$0$0$0$1$2$"	}"
"ByteArrayEncoder.java:49"$0$0$0$0$0$""
"ByteArrayEncoder.java:50"$0$0$0$1$10$"	@Override"
"ByteArrayEncoder.java:51"$0$0$0$6$72$"	public Flux<DataBuffer> encode(Publisher<? extends byte[]> inputStream,"
"ByteArrayEncoder.java:52"$0$0$0$7$92$"			DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,"
"ByteArrayEncoder.java:53"$0$0$0$5$41$"			@Nullable Map<String, Object> hints) {"
"ByteArrayEncoder.java:54"$0$0$0$0$0$""
"ByteArrayEncoder.java:55"$0$0$1$6$35$"		// Use (byte[] bytes) for Eclipse"
"ByteArrayEncoder.java:56"$0$0$0$4$53$"		return Flux.from(inputStream).map((byte[] bytes) ->"
"ByteArrayEncoder.java:57"$0$0$0$5$69$"				encodeValue(bytes, bufferFactory, elementType, mimeType, hints));"
"ByteArrayEncoder.java:58"$0$0$0$1$2$"	}"
"ByteArrayEncoder.java:59"$0$0$0$0$0$""
"ByteArrayEncoder.java:60"$0$0$0$1$10$"	@Override"
"ByteArrayEncoder.java:61"$0$0$0$6$77$"	public DataBuffer encodeValue(byte[] bytes, DataBufferFactory bufferFactory,"
"ByteArrayEncoder.java:62"$0$0$0$10$96$"			ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"ByteArrayEncoder.java:63"$0$0$0$0$0$""
"ByteArrayEncoder.java:64"$0$0$0$4$52$"		DataBuffer dataBuffer = bufferFactory.wrap(bytes);"
"ByteArrayEncoder.java:65"$0$0$0$5$69$"		if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {"
"ByteArrayEncoder.java:66"$1$0$0$4$48$"			String logPrefix = Hints.getLogPrefix(hints);"
"ByteArrayEncoder.java:67"$0$0$0$9$84$"			logger.debug(logPrefix + ""Writing "" + dataBuffer.readableByteCount() + "" bytes"");"
"ByteArrayEncoder.java:68"$0$0$0$1$3$"		}"
"ByteArrayEncoder.java:69"$0$0$0$2$20$"		return dataBuffer;"
"ByteArrayEncoder.java:70"$0$0$0$1$2$"	}"
"ByteArrayEncoder.java:71"$0$0$0$0$0$""
"ByteArrayEncoder.java:72"$0$0$0$1$1$"}"
"AbstractStaxHandler.java:1"$0$0$0$1$2$"/*"
"AbstractStaxHandler.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"AbstractStaxHandler.java:3"$0$0$0$1$2$" *"
"AbstractStaxHandler.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AbstractStaxHandler.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AbstractStaxHandler.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AbstractStaxHandler.java:7"$0$0$0$1$2$" *"
"AbstractStaxHandler.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AbstractStaxHandler.java:9"$0$0$0$1$2$" *"
"AbstractStaxHandler.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AbstractStaxHandler.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AbstractStaxHandler.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AbstractStaxHandler.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AbstractStaxHandler.java:14"$0$0$0$5$33$" * limitations under the License."
"AbstractStaxHandler.java:15"$0$0$0$1$3$" */"
"AbstractStaxHandler.java:16"$0$0$0$0$0$""
"AbstractStaxHandler.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"AbstractStaxHandler.java:18"$0$0$0$0$0$""
"AbstractStaxHandler.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"AbstractStaxHandler.java:20"$0$0$0$2$25$"import java.util.HashMap;"
"AbstractStaxHandler.java:21"$0$0$0$2$22$"import java.util.List;"
"AbstractStaxHandler.java:22"$0$0$0$2$21$"import java.util.Map;"
"AbstractStaxHandler.java:23"$0$0$0$0$0$""
"AbstractStaxHandler.java:24"$0$0$0$2$30$"import javax.xml.XMLConstants;"
"AbstractStaxHandler.java:25"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"AbstractStaxHandler.java:26"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"AbstractStaxHandler.java:27"$0$0$0$0$0$""
"AbstractStaxHandler.java:28"$0$0$0$2$30$"import org.xml.sax.Attributes;"
"AbstractStaxHandler.java:29"$0$0$0$2$34$"import org.xml.sax.ContentHandler;"
"AbstractStaxHandler.java:30"$0$0$0$2$32$"import org.xml.sax.SAXException;"
"AbstractStaxHandler.java:31"$0$0$0$2$38$"import org.xml.sax.ext.LexicalHandler;"
"AbstractStaxHandler.java:32"$0$0$0$0$0$""
"AbstractStaxHandler.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AbstractStaxHandler.java:34"$0$0$0$0$0$""
"AbstractStaxHandler.java:35"$0$0$0$1$3$"/**"
"AbstractStaxHandler.java:36"$0$0$0$11$80$" * Abstract base class for SAX {@code ContentHandler} and {@code LexicalHandler}"
"AbstractStaxHandler.java:37"$0$0$0$14$86$" * implementations that use StAX as a basis. All methods delegate to internal template"
"AbstractStaxHandler.java:38"$0$0$0$11$88$" * methods, capable of throwing a {@code XMLStreamException}. Additionally, an namespace"
"AbstractStaxHandler.java:39"$0$0$0$11$62$" * context stack is used to keep track of declared namespaces."
"AbstractStaxHandler.java:40"$0$0$0$1$2$" *"
"AbstractStaxHandler.java:41"$0$0$0$4$24$" * @author Arjen Poutsma"
"AbstractStaxHandler.java:42"$0$0$0$3$15$" * @since 4.0.3"
"AbstractStaxHandler.java:43"$0$0$0$1$3$" */"
"AbstractStaxHandler.java:44"$0$0$0$7$78$"abstract class AbstractStaxHandler implements ContentHandler, LexicalHandler {"
"AbstractStaxHandler.java:45"$0$0$0$0$0$""
"AbstractStaxHandler.java:46"$0$0$0$8$79$"	private final List<Map<String, String>> namespaceMappings = new ArrayList<>();"
"AbstractStaxHandler.java:47"$0$0$0$0$0$""
"AbstractStaxHandler.java:48"$0$0$0$3$25$"	private boolean inCData;"
"AbstractStaxHandler.java:49"$0$0$0$0$0$""
"AbstractStaxHandler.java:50"$0$0$0$0$0$""
"AbstractStaxHandler.java:51"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:52"$0$0$0$7$56$"	public final void startDocument() throws SAXException {"
"AbstractStaxHandler.java:53"$0$0$0$1$31$"		removeAllNamespaceMappings();"
"AbstractStaxHandler.java:54"$0$0$0$1$24$"		newNamespaceMapping();"
"AbstractStaxHandler.java:55"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:56"$0$0$0$1$27$"			startDocumentInternal();"
"AbstractStaxHandler.java:57"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:58"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:59"$1$0$0$10$84$"			throw new SAXException(""Could not handle startDocument: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:60"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:61"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:62"$0$0$0$0$0$""
"AbstractStaxHandler.java:63"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:64"$0$0$0$7$54$"	public final void endDocument() throws SAXException {"
"AbstractStaxHandler.java:65"$0$0$0$1$31$"		removeAllNamespaceMappings();"
"AbstractStaxHandler.java:66"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:67"$0$0$0$1$25$"			endDocumentInternal();"
"AbstractStaxHandler.java:68"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:69"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:70"$1$0$0$10$82$"			throw new SAXException(""Could not handle endDocument: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:71"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:72"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:73"$0$0$0$0$0$""
"AbstractStaxHandler.java:74"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:75"$0$0$0$8$66$"	public final void startPrefixMapping(String prefix, String uri) {"
"AbstractStaxHandler.java:76"$0$0$0$2$45$"		currentNamespaceMapping().put(prefix, uri);"
"AbstractStaxHandler.java:77"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:78"$0$0$0$0$0$""
"AbstractStaxHandler.java:79"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:80"$0$0$0$6$52$"	public final void endPrefixMapping(String prefix) {"
"AbstractStaxHandler.java:81"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:82"$0$0$0$0$0$""
"AbstractStaxHandler.java:83"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:84"$0$0$0$14$114$"	public final void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {"
"AbstractStaxHandler.java:85"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:86"$0$0$0$4$78$"			startElementInternal(toQName(uri, qName), atts, currentNamespaceMapping());"
"AbstractStaxHandler.java:87"$0$0$0$1$25$"			newNamespaceMapping();"
"AbstractStaxHandler.java:88"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:89"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:90"$1$0$0$10$83$"			throw new SAXException(""Could not handle startElement: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:91"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:92"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:93"$0$0$0$0$0$""
"AbstractStaxHandler.java:94"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:95"$0$0$0$12$95$"	public final void endElement(String uri, String localName, String qName) throws SAXException {"
"AbstractStaxHandler.java:96"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:97"$0$0$0$3$70$"			endElementInternal(toQName(uri, qName), currentNamespaceMapping());"
"AbstractStaxHandler.java:98"$0$0$0$1$28$"			removeNamespaceMapping();"
"AbstractStaxHandler.java:99"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:100"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:101"$1$0$0$10$81$"			throw new SAXException(""Could not handle endElement: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:102"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:103"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:104"$0$0$0$0$0$""
"AbstractStaxHandler.java:105"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:106"$0$0$0$12$85$"	public final void characters(char[] ch, int start, int length) throws SAXException {"
"AbstractStaxHandler.java:107"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:108"$0$0$0$7$47$"			String data = new String(ch, start, length);"
"AbstractStaxHandler.java:109"$0$0$0$3$23$"			if (!this.inCData) {"
"AbstractStaxHandler.java:110"$0$0$0$1$29$"				charactersInternal(data);"
"AbstractStaxHandler.java:111"$0$0$0$1$4$"			}"
"AbstractStaxHandler.java:112"$0$0$0$2$9$"			else {"
"AbstractStaxHandler.java:113"$0$0$0$1$24$"				cDataInternal(data);"
"AbstractStaxHandler.java:114"$0$0$0$1$4$"			}"
"AbstractStaxHandler.java:115"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:116"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:117"$1$0$0$10$81$"			throw new SAXException(""Could not handle characters: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:118"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:119"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:120"$0$0$0$0$0$""
"AbstractStaxHandler.java:121"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:122"$0$0$0$12$94$"	public final void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {"
"AbstractStaxHandler.java:123"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:124"$0$0$0$4$62$"			ignorableWhitespaceInternal(new String(ch, start, length));"
"AbstractStaxHandler.java:125"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:126"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:127"$0$0$0$3$26$"			throw new SAXException("
"AbstractStaxHandler.java:128"$1$0$0$7$68$"					""Could not handle ignorableWhitespace:"" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:129"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:130"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:131"$0$0$0$0$0$""
"AbstractStaxHandler.java:132"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:133"$1$0$0$10$90$"	public final void processingInstruction(String target, String data) throws SAXException {"
"AbstractStaxHandler.java:134"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:135"$1$0$0$2$47$"			processingInstructionInternal(target, data);"
"AbstractStaxHandler.java:136"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:137"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:138"$1$0$0$10$92$"			throw new SAXException(""Could not handle processingInstruction: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:139"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:140"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:141"$0$0$0$0$0$""
"AbstractStaxHandler.java:142"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:143"$0$0$0$8$67$"	public final void skippedEntity(String name) throws SAXException {"
"AbstractStaxHandler.java:144"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:145"$0$0$0$1$31$"			skippedEntityInternal(name);"
"AbstractStaxHandler.java:146"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:147"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:148"$1$0$0$10$84$"			throw new SAXException(""Could not handle skippedEntity: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:149"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:150"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:151"$0$0$0$0$0$""
"AbstractStaxHandler.java:152"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:153"$0$0$0$13$106$"	public final void startDTD(String name, @Nullable String publicId, String systemId) throws SAXException {"
"AbstractStaxHandler.java:154"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:155"$0$0$0$6$59$"			StringBuilder builder = new StringBuilder(""<!DOCTYPE "");"
"AbstractStaxHandler.java:156"$0$0$0$1$24$"			builder.append(name);"
"AbstractStaxHandler.java:157"$0$0$0$5$26$"			if (publicId != null) {"
"AbstractStaxHandler.java:158"$0$0$0$3$33$"				builder.append("" PUBLIC \"""");"
"AbstractStaxHandler.java:159"$0$0$0$1$29$"				builder.append(publicId);"
"AbstractStaxHandler.java:160"$0$0$0$2$28$"				builder.append(""\"" \"""");"
"AbstractStaxHandler.java:161"$0$0$0$1$4$"			}"
"AbstractStaxHandler.java:162"$0$0$0$2$9$"			else {"
"AbstractStaxHandler.java:163"$0$0$0$3$33$"				builder.append("" SYSTEM \"""");"
"AbstractStaxHandler.java:164"$0$0$0$1$4$"			}"
"AbstractStaxHandler.java:165"$0$0$0$1$28$"			builder.append(systemId);"
"AbstractStaxHandler.java:166"$0$0$0$1$25$"			builder.append(""\"">"");"
"AbstractStaxHandler.java:167"$0$0$0$0$0$""
"AbstractStaxHandler.java:168"$0$0$0$1$35$"			dtdInternal(builder.toString());"
"AbstractStaxHandler.java:169"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:170"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:171"$1$0$0$10$79$"			throw new SAXException(""Could not handle startDTD: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:172"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:173"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:174"$0$0$0$0$0$""
"AbstractStaxHandler.java:175"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:176"$0$0$0$7$49$"	public final void endDTD() throws SAXException {"
"AbstractStaxHandler.java:177"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:178"$0$0$0$0$0$""
"AbstractStaxHandler.java:179"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:180"$0$0$0$7$53$"	public final void startCDATA() throws SAXException {"
"AbstractStaxHandler.java:181"$0$0$0$3$22$"		this.inCData = true;"
"AbstractStaxHandler.java:182"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:183"$0$0$0$0$0$""
"AbstractStaxHandler.java:184"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:185"$0$0$0$7$51$"	public final void endCDATA() throws SAXException {"
"AbstractStaxHandler.java:186"$0$0$0$3$23$"		this.inCData = false;"
"AbstractStaxHandler.java:187"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:188"$0$0$0$0$0$""
"AbstractStaxHandler.java:189"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:190"$0$0$0$12$82$"	public final void comment(char[] ch, int start, int length) throws SAXException {"
"AbstractStaxHandler.java:191"$0$0$0$2$7$"		try {"
"AbstractStaxHandler.java:192"$0$0$0$4$50$"			commentInternal(new String(ch, start, length));"
"AbstractStaxHandler.java:193"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:194"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxHandler.java:195"$1$0$0$10$78$"			throw new SAXException(""Could not handle comment: "" + ex.getMessage(), ex);"
"AbstractStaxHandler.java:196"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:197"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:198"$0$0$0$0$0$""
"AbstractStaxHandler.java:199"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:200"$0$0$0$7$59$"	public void startEntity(String name) throws SAXException {"
"AbstractStaxHandler.java:201"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:202"$0$0$0$0$0$""
"AbstractStaxHandler.java:203"$0$0$0$1$10$"	@Override"
"AbstractStaxHandler.java:204"$0$0$0$7$57$"	public void endEntity(String name) throws SAXException {"
"AbstractStaxHandler.java:205"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:206"$0$0$0$0$0$""
"AbstractStaxHandler.java:207"$0$0$0$1$4$"	/**"
"AbstractStaxHandler.java:208"$0$0$0$16$81$"	 * Convert a namespace URI and DOM or SAX qualified name to a {@code QName}. The"
"AbstractStaxHandler.java:209"$0$0$0$12$83$"	 * qualified name can have the form {@code prefix:localname} or {@code localName}."
"AbstractStaxHandler.java:210"$0$0$0$6$41$"	 * @param namespaceUri the namespace URI"
"AbstractStaxHandler.java:211"$0$0$0$6$43$"	 * @param qualifiedName the qualified name"
"AbstractStaxHandler.java:212"$0$0$0$4$19$"	 * @return a QName"
"AbstractStaxHandler.java:213"$0$0$0$1$4$"	 */"
"AbstractStaxHandler.java:214"$0$0$0$7$69$"	protected QName toQName(String namespaceUri, String qualifiedName) {"
"AbstractStaxHandler.java:215"$0$0$0$4$39$"		int idx = qualifiedName.indexOf(':');"
"AbstractStaxHandler.java:216"$0$0$0$5$18$"		if (idx == -1) {"
"AbstractStaxHandler.java:217"$0$0$0$4$49$"			return new QName(namespaceUri, qualifiedName);"
"AbstractStaxHandler.java:218"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:219"$0$0$0$2$8$"		else {"
"AbstractStaxHandler.java:220"$0$0$0$5$51$"			String prefix = qualifiedName.substring(0, idx);"
"AbstractStaxHandler.java:221"$0$0$0$6$55$"			String localPart = qualifiedName.substring(idx + 1);"
"AbstractStaxHandler.java:222"$0$0$0$5$53$"			return new QName(namespaceUri, localPart, prefix);"
"AbstractStaxHandler.java:223"$0$0$0$1$3$"		}"
"AbstractStaxHandler.java:224"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:225"$0$0$0$0$0$""
"AbstractStaxHandler.java:226"$0$0$0$5$56$"	protected boolean isNamespaceDeclaration(QName qName) {"
"AbstractStaxHandler.java:227"$1$0$0$4$36$"		String prefix = qName.getPrefix();"
"AbstractStaxHandler.java:228"$1$0$0$4$42$"		String localPart = qName.getLocalPart();"
"AbstractStaxHandler.java:229"$0$0$0$5$80$"		return (XMLConstants.XMLNS_ATTRIBUTE.equals(localPart) && prefix.isEmpty()) ||"
"AbstractStaxHandler.java:230"$0$0$0$3$74$"				(XMLConstants.XMLNS_ATTRIBUTE.equals(prefix) && !localPart.isEmpty());"
"AbstractStaxHandler.java:231"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:232"$0$0$0$0$0$""
"AbstractStaxHandler.java:233"$0$0$0$0$0$""
"AbstractStaxHandler.java:234"$0$0$0$5$56$"	private Map<String, String> currentNamespaceMapping() {"
"AbstractStaxHandler.java:235"$1$0$0$4$71$"		return this.namespaceMappings.get(this.namespaceMappings.size() - 1);"
"AbstractStaxHandler.java:236"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:237"$0$0$0$0$0$""
"AbstractStaxHandler.java:238"$0$0$0$4$37$"	private void newNamespaceMapping() {"
"AbstractStaxHandler.java:239"$0$0$0$2$46$"		this.namespaceMappings.add(new HashMap<>());"
"AbstractStaxHandler.java:240"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:241"$0$0$0$0$0$""
"AbstractStaxHandler.java:242"$0$0$0$4$40$"	private void removeNamespaceMapping() {"
"AbstractStaxHandler.java:243"$0$0$0$3$67$"		this.namespaceMappings.remove(this.namespaceMappings.size() - 1);"
"AbstractStaxHandler.java:244"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:245"$0$0$0$0$0$""
"AbstractStaxHandler.java:246"$0$0$0$4$44$"	private void removeAllNamespaceMappings() {"
"AbstractStaxHandler.java:247"$0$0$0$1$33$"		this.namespaceMappings.clear();"
"AbstractStaxHandler.java:248"$0$0$0$1$2$"	}"
"AbstractStaxHandler.java:249"$0$0$0$0$0$""
"AbstractStaxHandler.java:250"$0$0$0$0$0$""
"AbstractStaxHandler.java:251"$0$0$0$6$75$"	protected abstract void startDocumentInternal() throws XMLStreamException;"
"AbstractStaxHandler.java:252"$0$0$0$0$0$""
"AbstractStaxHandler.java:253"$0$0$0$6$73$"	protected abstract void endDocumentInternal() throws XMLStreamException;"
"AbstractStaxHandler.java:254"$0$0$0$0$0$""
"AbstractStaxHandler.java:255"$0$0$0$7$80$"	protected abstract void startElementInternal(QName name, Attributes attributes,"
"AbstractStaxHandler.java:256"$0$0$0$5$67$"			Map<String, String> namespaceMapping) throws XMLStreamException;"
"AbstractStaxHandler.java:257"$0$0$0$0$0$""
"AbstractStaxHandler.java:258"$0$0$0$8$93$"	protected abstract void endElementInternal(QName name, Map<String, String> namespaceMapping)"
"AbstractStaxHandler.java:259"$0$0$0$2$29$"			throws XMLStreamException;"
"AbstractStaxHandler.java:260"$0$0$0$0$0$""
"AbstractStaxHandler.java:261"$0$0$0$7$83$"	protected abstract void charactersInternal(String data) throws XMLStreamException;"
"AbstractStaxHandler.java:262"$0$0$0$0$0$""
"AbstractStaxHandler.java:263"$0$0$0$7$78$"	protected abstract void cDataInternal(String data) throws XMLStreamException;"
"AbstractStaxHandler.java:264"$0$0$0$0$0$""
"AbstractStaxHandler.java:265"$0$0$0$7$92$"	protected abstract void ignorableWhitespaceInternal(String data) throws XMLStreamException;"
"AbstractStaxHandler.java:266"$0$0$0$0$0$""
"AbstractStaxHandler.java:267"$1$0$0$7$82$"	protected abstract void processingInstructionInternal(String target, String data)"
"AbstractStaxHandler.java:268"$0$0$0$2$29$"			throws XMLStreamException;"
"AbstractStaxHandler.java:269"$0$0$0$0$0$""
"AbstractStaxHandler.java:270"$0$0$0$7$86$"	protected abstract void skippedEntityInternal(String name) throws XMLStreamException;"
"AbstractStaxHandler.java:271"$0$0$0$0$0$""
"AbstractStaxHandler.java:272"$0$0$0$7$75$"	protected abstract void dtdInternal(String dtd) throws XMLStreamException;"
"AbstractStaxHandler.java:273"$0$0$0$0$0$""
"AbstractStaxHandler.java:274"$0$0$0$7$83$"	protected abstract void commentInternal(String comment) throws XMLStreamException;"
"AbstractStaxHandler.java:275"$0$0$0$0$0$""
"AbstractStaxHandler.java:276"$0$0$0$1$1$"}"
"ResourceEditor.java:1"$0$0$0$1$2$"/*"
"ResourceEditor.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"ResourceEditor.java:3"$0$0$0$1$2$" *"
"ResourceEditor.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourceEditor.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourceEditor.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourceEditor.java:7"$0$0$0$1$2$" *"
"ResourceEditor.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourceEditor.java:9"$0$0$0$1$2$" *"
"ResourceEditor.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourceEditor.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourceEditor.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourceEditor.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourceEditor.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourceEditor.java:15"$0$0$0$1$3$" */"
"ResourceEditor.java:16"$0$0$0$0$0$""
"ResourceEditor.java:17"$0$0$0$2$36$"package org.springframework.core.io;"
"ResourceEditor.java:18"$0$0$0$0$0$""
"ResourceEditor.java:19"$0$0$0$2$40$"import java.beans.PropertyEditorSupport;"
"ResourceEditor.java:20"$0$0$0$2$27$"import java.io.IOException;"
"ResourceEditor.java:21"$0$0$0$0$0$""
"ResourceEditor.java:22"$0$0$0$2$53$"import org.springframework.core.env.PropertyResolver;"
"ResourceEditor.java:23"$0$0$0$2$56$"import org.springframework.core.env.StandardEnvironment;"
"ResourceEditor.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResourceEditor.java:25"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ResourceEditor.java:26"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"ResourceEditor.java:27"$0$0$0$0$0$""
"ResourceEditor.java:28"$0$0$0$1$3$"/**"
"ResourceEditor.java:29"$0$0$0$7$64$" * {@link java.beans.PropertyEditor Editor} for {@link Resource}"
"ResourceEditor.java:30"$0$0$0$8$65$" * descriptors, to automatically convert {@code String} locations"
"ResourceEditor.java:31"$0$0$0$8$69$" * e.g. {@code file:C:/myfile.txt} or {@code classpath:myfile.txt} to"
"ResourceEditor.java:32"$0$0$0$12$83$" * {@code Resource} properties instead of using a {@code String} location property."
"ResourceEditor.java:33"$0$0$0$1$2$" *"
"ResourceEditor.java:34"$0$0$0$10$61$" * <p>The path may contain {@code ${...}} placeholders, to be"
"ResourceEditor.java:35"$0$0$0$6$75$" * resolved as {@link org.springframework.core.env.Environment} properties:"
"ResourceEditor.java:36"$0$0$0$10$78$" * e.g. {@code ${user.dir}}. Unresolvable placeholders are ignored by default."
"ResourceEditor.java:37"$0$0$0$1$2$" *"
"ResourceEditor.java:38"$0$0$0$11$68$" * <p>Delegates to a {@link ResourceLoader} to do the heavy lifting,"
"ResourceEditor.java:39"$0$0$0$7$52$" * by default using a {@link DefaultResourceLoader}."
"ResourceEditor.java:40"$0$0$0$1$2$" *"
"ResourceEditor.java:41"$0$0$0$4$26$" * @author Juergen Hoeller"
"ResourceEditor.java:42"$0$0$0$4$20$" * @author Dave Syer"
"ResourceEditor.java:43"$0$0$0$4$22$" * @author Chris Beams"
"ResourceEditor.java:44"$0$0$0$3$20$" * @since 28.12.2003"
"ResourceEditor.java:45"$0$0$0$3$16$" * @see Resource"
"ResourceEditor.java:46"$0$0$0$3$22$" * @see ResourceLoader"
"ResourceEditor.java:47"$0$0$0$3$29$" * @see DefaultResourceLoader"
"ResourceEditor.java:48"$0$0$0$3$44$" * @see PropertyResolver#resolvePlaceholders"
"ResourceEditor.java:49"$0$0$0$1$3$" */"
"ResourceEditor.java:50"$0$0$0$6$59$"public class ResourceEditor extends PropertyEditorSupport {"
"ResourceEditor.java:51"$0$0$0$0$0$""
"ResourceEditor.java:52"$0$0$0$4$45$"	private final ResourceLoader resourceLoader;"
"ResourceEditor.java:53"$0$0$0$0$0$""
"ResourceEditor.java:54"$0$0$0$1$10$"	@Nullable"
"ResourceEditor.java:55"$0$0$0$3$43$"	private PropertyResolver propertyResolver;"
"ResourceEditor.java:56"$0$0$0$0$0$""
"ResourceEditor.java:57"$0$0$0$4$54$"	private final boolean ignoreUnresolvablePlaceholders;"
"ResourceEditor.java:58"$0$0$0$0$0$""
"ResourceEditor.java:59"$0$0$0$0$0$""
"ResourceEditor.java:60"$0$0$0$1$4$"	/**"
"ResourceEditor.java:61"$0$0$0$10$61$"	 * Create a new instance of the {@link ResourceEditor} class"
"ResourceEditor.java:62"$0$0$0$8$74$"	 * using a {@link DefaultResourceLoader} and {@link StandardEnvironment}."
"ResourceEditor.java:63"$0$0$0$1$4$"	 */"
"ResourceEditor.java:64"$0$0$0$3$26$"	public ResourceEditor() {"
"ResourceEditor.java:65"$0$0$0$3$42$"		this(new DefaultResourceLoader(), null);"
"ResourceEditor.java:66"$0$0$0$1$2$"	}"
"ResourceEditor.java:67"$0$0$0$0$0$""
"ResourceEditor.java:68"$0$0$0$1$4$"	/**"
"ResourceEditor.java:69"$0$0$0$10$61$"	 * Create a new instance of the {@link ResourceEditor} class"
"ResourceEditor.java:70"$0$0$0$9$72$"	 * using the given {@link ResourceLoader} and {@link PropertyResolver}."
"ResourceEditor.java:71"$0$0$0$8$59$"	 * @param resourceLoader the {@code ResourceLoader} to use"
"ResourceEditor.java:72"$0$0$0$8$63$"	 * @param propertyResolver the {@code PropertyResolver} to use"
"ResourceEditor.java:73"$0$0$0$1$4$"	 */"
"ResourceEditor.java:74"$0$0$0$7$100$"	public ResourceEditor(ResourceLoader resourceLoader, @Nullable PropertyResolver propertyResolver) {"
"ResourceEditor.java:75"$0$0$0$3$47$"		this(resourceLoader, propertyResolver, true);"
"ResourceEditor.java:76"$0$0$0$1$2$"	}"
"ResourceEditor.java:77"$0$0$0$0$0$""
"ResourceEditor.java:78"$0$0$0$1$4$"	/**"
"ResourceEditor.java:79"$0$0$0$10$61$"	 * Create a new instance of the {@link ResourceEditor} class"
"ResourceEditor.java:80"$0$0$0$6$43$"	 * using the given {@link ResourceLoader}."
"ResourceEditor.java:81"$0$0$0$8$59$"	 * @param resourceLoader the {@code ResourceLoader} to use"
"ResourceEditor.java:82"$0$0$0$8$63$"	 * @param propertyResolver the {@code PropertyResolver} to use"
"ResourceEditor.java:83"$0$0$0$8$85$"	 * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders"
"ResourceEditor.java:84"$0$0$0$13$85$"	 * if no corresponding property could be found in the given {@code propertyResolver}"
"ResourceEditor.java:85"$0$0$0$1$4$"	 */"
"ResourceEditor.java:86"$0$0$0$6$98$"	public ResourceEditor(ResourceLoader resourceLoader, @Nullable PropertyResolver propertyResolver,"
"ResourceEditor.java:87"$0$0$0$3$44$"			boolean ignoreUnresolvablePlaceholders) {"
"ResourceEditor.java:88"$0$0$0$0$0$""
"ResourceEditor.java:89"$0$0$0$6$68$"		Assert.notNull(resourceLoader, ""ResourceLoader must not be null"");"
"ResourceEditor.java:90"$0$0$0$3$39$"		this.resourceLoader = resourceLoader;"
"ResourceEditor.java:91"$0$0$0$3$43$"		this.propertyResolver = propertyResolver;"
"ResourceEditor.java:92"$0$0$0$3$71$"		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;"
"ResourceEditor.java:93"$0$0$0$1$2$"	}"
"ResourceEditor.java:94"$0$0$0$0$0$""
"ResourceEditor.java:95"$0$0$0$0$0$""
"ResourceEditor.java:96"$0$0$0$1$10$"	@Override"
"ResourceEditor.java:97"$0$0$0$5$37$"	public void setAsText(String text) {"
"ResourceEditor.java:98"$0$0$0$3$34$"		if (StringUtils.hasText(text)) {"
"ResourceEditor.java:99"$0$0$0$4$51$"			String locationToUse = resolvePath(text).trim();"
"ResourceEditor.java:100"$1$0$0$1$60$"			setValue(this.resourceLoader.getResource(locationToUse));"
"ResourceEditor.java:101"$0$0$0$1$3$"		}"
"ResourceEditor.java:102"$0$0$0$2$8$"		else {"
"ResourceEditor.java:103"$0$0$0$1$18$"			setValue(null);"
"ResourceEditor.java:104"$0$0$0$1$3$"		}"
"ResourceEditor.java:105"$0$0$0$1$2$"	}"
"ResourceEditor.java:106"$0$0$0$0$0$""
"ResourceEditor.java:107"$0$0$0$1$4$"	/**"
"ResourceEditor.java:108"$0$0$0$9$69$"	 * Resolve the given path, replacing placeholders with corresponding"
"ResourceEditor.java:109"$0$0$0$9$62$"	 * property values from the {@code environment} if necessary."
"ResourceEditor.java:110"$0$0$0$7$38$"	 * @param path the original file path"
"ResourceEditor.java:111"$0$0$0$6$34$"	 * @return the resolved file path"
"ResourceEditor.java:112"$0$0$0$3$45$"	 * @see PropertyResolver#resolvePlaceholders"
"ResourceEditor.java:113"$0$0$0$3$53$"	 * @see PropertyResolver#resolveRequiredPlaceholders"
"ResourceEditor.java:114"$0$0$0$1$4$"	 */"
"ResourceEditor.java:115"$0$0$0$5$44$"	protected String resolvePath(String path) {"
"ResourceEditor.java:116"$0$0$0$5$38$"		if (this.propertyResolver == null) {"
"ResourceEditor.java:117"$0$0$0$4$53$"			this.propertyResolver = new StandardEnvironment();"
"ResourceEditor.java:118"$0$0$0$1$3$"		}"
"ResourceEditor.java:119"$0$0$0$5$97$"		return (this.ignoreUnresolvablePlaceholders ? this.propertyResolver.resolvePlaceholders(path) :"
"ResourceEditor.java:120"$0$0$0$1$61$"				this.propertyResolver.resolveRequiredPlaceholders(path));"
"ResourceEditor.java:121"$0$0$0$1$2$"	}"
"ResourceEditor.java:122"$0$0$0$0$0$""
"ResourceEditor.java:123"$0$0$0$0$0$""
"ResourceEditor.java:124"$0$0$0$1$10$"	@Override"
"ResourceEditor.java:125"$0$0$0$1$10$"	@Nullable"
"ResourceEditor.java:126"$1$0$0$4$28$"	public String getAsText() {"
"ResourceEditor.java:127"$1$0$0$5$41$"		Resource value = (Resource) getValue();"
"ResourceEditor.java:128"$0$0$0$2$7$"		try {"
"ResourceEditor.java:129"$0$0$1$7$40$"			// Try to determine URL for resource."
"ResourceEditor.java:130"$1$0$0$8$65$"			return (value != null ? value.getURL().toExternalForm() : """");"
"ResourceEditor.java:131"$0$0$0$1$3$"		}"
"ResourceEditor.java:132"$0$0$0$4$26$"		catch (IOException ex) {"
"ResourceEditor.java:133"$0$0$1$10$63$"			// Couldn't determine resource URL - return null to indicate"
"ResourceEditor.java:134"$0$0$1$8$55$"			// that there is no appropriate text representation."
"ResourceEditor.java:135"$0$0$0$2$15$"			return null;"
"ResourceEditor.java:136"$0$0$0$1$3$"		}"
"ResourceEditor.java:137"$0$0$0$1$2$"	}"
"ResourceEditor.java:138"$0$0$0$0$0$""
"ResourceEditor.java:139"$0$0$0$1$1$"}"
"ResourceEncoder.java:1"$0$0$0$1$2$"/*"
"ResourceEncoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ResourceEncoder.java:3"$0$0$0$1$2$" *"
"ResourceEncoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourceEncoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourceEncoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourceEncoder.java:7"$0$0$0$1$2$" *"
"ResourceEncoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourceEncoder.java:9"$0$0$0$1$2$" *"
"ResourceEncoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourceEncoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourceEncoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourceEncoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourceEncoder.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourceEncoder.java:15"$0$0$0$1$3$" */"
"ResourceEncoder.java:16"$0$0$0$0$0$""
"ResourceEncoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"ResourceEncoder.java:18"$0$0$0$0$0$""
"ResourceEncoder.java:19"$0$0$0$2$21$"import java.util.Map;"
"ResourceEncoder.java:20"$0$0$0$0$0$""
"ResourceEncoder.java:21"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"ResourceEncoder.java:22"$0$0$0$0$0$""
"ResourceEncoder.java:23"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"ResourceEncoder.java:24"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"ResourceEncoder.java:25"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"ResourceEncoder.java:26"$0$0$0$2$60$"import org.springframework.core.io.buffer.DataBufferFactory;"
"ResourceEncoder.java:27"$0$0$0$2$58$"import org.springframework.core.io.buffer.DataBufferUtils;"
"ResourceEncoder.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResourceEncoder.java:29"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ResourceEncoder.java:30"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"ResourceEncoder.java:31"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"ResourceEncoder.java:32"$0$0$0$2$44$"import org.springframework.util.StreamUtils;"
"ResourceEncoder.java:33"$0$0$0$0$0$""
"ResourceEncoder.java:34"$0$0$0$1$3$"/**"
"ResourceEncoder.java:35"$0$0$0$6$42$" * Encoder for {@link Resource Resources}."
"ResourceEncoder.java:36"$0$0$0$1$2$" *"
"ResourceEncoder.java:37"$0$0$0$4$24$" * @author Arjen Poutsma"
"ResourceEncoder.java:38"$0$0$0$3$13$" * @since 5.0"
"ResourceEncoder.java:39"$0$0$0$1$3$" */"
"ResourceEncoder.java:40"$0$0$0$6$75$"public class ResourceEncoder extends AbstractSingleValueEncoder<Resource> {"
"ResourceEncoder.java:41"$0$0$0$0$0$""
"ResourceEncoder.java:42"$0$0$0$1$4$"	/**"
"ResourceEncoder.java:43"$0$0$0$9$48$"	 * The default buffer size used by the encoder."
"ResourceEncoder.java:44"$0$0$0$1$4$"	 */"
"ResourceEncoder.java:45"$0$0$0$7$71$"	public static final int DEFAULT_BUFFER_SIZE = StreamUtils.BUFFER_SIZE;"
"ResourceEncoder.java:46"$0$0$0$0$0$""
"ResourceEncoder.java:47"$0$0$0$4$30$"	private final int bufferSize;"
"ResourceEncoder.java:48"$0$0$0$0$0$""
"ResourceEncoder.java:49"$0$0$0$0$0$""
"ResourceEncoder.java:50"$0$0$0$3$27$"	public ResourceEncoder() {"
"ResourceEncoder.java:51"$0$0$0$1$28$"		this(DEFAULT_BUFFER_SIZE);"
"ResourceEncoder.java:52"$0$0$0$1$2$"	}"
"ResourceEncoder.java:53"$0$0$0$0$0$""
"ResourceEncoder.java:54"$0$0$0$4$41$"	public ResourceEncoder(int bufferSize) {"
"ResourceEncoder.java:55"$0$0$0$2$67$"		super(MimeTypeUtils.APPLICATION_OCTET_STREAM, MimeTypeUtils.ALL);"
"ResourceEncoder.java:56"$0$0$0$9$70$"		Assert.isTrue(bufferSize > 0, ""'bufferSize' must be larger than 0"");"
"ResourceEncoder.java:57"$0$0$0$3$31$"		this.bufferSize = bufferSize;"
"ResourceEncoder.java:58"$0$0$0$1$2$"	}"
"ResourceEncoder.java:59"$0$0$0$0$0$""
"ResourceEncoder.java:60"$0$0$0$0$0$""
"ResourceEncoder.java:61"$0$0$0$1$10$"	@Override"
"ResourceEncoder.java:62"$0$0$0$8$84$"	public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"ResourceEncoder.java:63"$0$0$0$4$41$"		Class<?> clazz = elementType.toClass();"
"ResourceEncoder.java:64"$0$0$0$5$92$"		return (super.canEncode(elementType, mimeType) && Resource.class.isAssignableFrom(clazz));"
"ResourceEncoder.java:65"$0$0$0$1$2$"	}"
"ResourceEncoder.java:66"$0$0$0$0$0$""
"ResourceEncoder.java:67"$0$0$0$1$10$"	@Override"
"ResourceEncoder.java:68"$0$0$0$6$86$"	protected Flux<DataBuffer> encode(Resource resource, DataBufferFactory bufferFactory,"
"ResourceEncoder.java:69"$0$0$0$10$91$"			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"ResourceEncoder.java:70"$0$0$0$0$0$""
"ResourceEncoder.java:71"$0$0$0$5$69$"		if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {"
"ResourceEncoder.java:72"$1$0$0$4$48$"			String logPrefix = Hints.getLogPrefix(hints);"
"ResourceEncoder.java:73"$0$0$0$8$58$"			logger.debug(logPrefix + ""Writing ["" + resource + ""]"");"
"ResourceEncoder.java:74"$0$0$0$1$3$"		}"
"ResourceEncoder.java:75"$0$0$0$4$72$"		return DataBufferUtils.read(resource, bufferFactory, this.bufferSize);"
"ResourceEncoder.java:76"$0$0$0$1$2$"	}"
"ResourceEncoder.java:77"$0$0$0$0$0$""
"ResourceEncoder.java:78"$0$0$0$1$1$"}"
"ConvertingComparator.java:1"$0$0$0$1$2$"/*"
"ConvertingComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2017 the original author or authors."
"ConvertingComparator.java:3"$0$0$0$1$2$" *"
"ConvertingComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ConvertingComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ConvertingComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ConvertingComparator.java:7"$0$0$0$1$2$" *"
"ConvertingComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ConvertingComparator.java:9"$0$0$0$1$2$" *"
"ConvertingComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ConvertingComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ConvertingComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ConvertingComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ConvertingComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"ConvertingComparator.java:15"$0$0$0$1$3$" */"
"ConvertingComparator.java:16"$0$0$0$0$0$""
"ConvertingComparator.java:17"$0$0$0$2$51$"package org.springframework.core.convert.converter;"
"ConvertingComparator.java:18"$0$0$0$0$0$""
"ConvertingComparator.java:19"$0$0$0$2$28$"import java.util.Comparator;"
"ConvertingComparator.java:20"$0$0$0$2$21$"import java.util.Map;"
"ConvertingComparator.java:21"$0$0$0$0$0$""
"ConvertingComparator.java:22"$0$0$0$2$58$"import org.springframework.core.convert.ConversionService;"
"ConvertingComparator.java:23"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ConvertingComparator.java:24"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ConvertingComparator.java:25"$0$0$0$2$55$"import org.springframework.util.comparator.Comparators;"
"ConvertingComparator.java:26"$0$0$0$0$0$""
"ConvertingComparator.java:27"$0$0$0$1$3$"/**"
"ConvertingComparator.java:28"$0$0$0$11$70$" * A {@link Comparator} that converts values before they are compared."
"ConvertingComparator.java:29"$0$0$0$12$69$" * The specified {@link Converter} will be used to convert each value"
"ConvertingComparator.java:30"$0$0$0$9$57$" * before it passed to the underlying {@code Comparator}."
"ConvertingComparator.java:31"$0$0$0$1$2$" *"
"ConvertingComparator.java:32"$0$0$0$4$23$" * @author Phillip Webb"
"ConvertingComparator.java:33"$0$0$0$3$13$" * @since 3.2"
"ConvertingComparator.java:34"$0$0$0$6$29$" * @param <S> the source type"
"ConvertingComparator.java:35"$1$0$0$6$29$" * @param <T> the target type"
"ConvertingComparator.java:36"$0$0$0$1$3$" */"
"ConvertingComparator.java:37"$0$0$0$7$66$"public class ConvertingComparator<S, T> implements Comparator<S> {"
"ConvertingComparator.java:38"$0$0$0$0$0$""
"ConvertingComparator.java:39"$0$0$0$4$40$"	private final Comparator<T> comparator;"
"ConvertingComparator.java:40"$0$0$0$0$0$""
"ConvertingComparator.java:41"$0$0$0$5$41$"	private final Converter<S, T> converter;"
"ConvertingComparator.java:42"$0$0$0$0$0$""
"ConvertingComparator.java:43"$0$0$0$0$0$""
"ConvertingComparator.java:44"$0$0$0$1$4$"	/**"
"ConvertingComparator.java:45"$0$0$0$7$55$"	 * Create a new {@link ConvertingComparator} instance."
"ConvertingComparator.java:46"$0$0$0$5$34$"	 * @param converter the converter"
"ConvertingComparator.java:47"$0$0$0$1$4$"	 */"
"ConvertingComparator.java:48"$0$0$0$5$57$"	public ConvertingComparator(Converter<S, T> converter) {"
"ConvertingComparator.java:49"$0$0$0$2$44$"		this(Comparators.comparable(), converter);"
"ConvertingComparator.java:50"$0$0$0$1$2$"	}"
"ConvertingComparator.java:51"$0$0$0$0$0$""
"ConvertingComparator.java:52"$0$0$0$1$4$"	/**"
"ConvertingComparator.java:53"$0$0$0$7$55$"	 * Create a new {@link ConvertingComparator} instance."
"ConvertingComparator.java:54"$0$0$0$12$84$"	 * @param comparator the underlying comparator used to compare the converted values"
"ConvertingComparator.java:55"$0$0$0$5$34$"	 * @param converter the converter"
"ConvertingComparator.java:56"$0$0$0$1$4$"	 */"
"ConvertingComparator.java:57"$0$0$0$7$83$"	public ConvertingComparator(Comparator<T> comparator, Converter<S, T> converter) {"
"ConvertingComparator.java:58"$0$0$0$6$60$"		Assert.notNull(comparator, ""Comparator must not be null"");"
"ConvertingComparator.java:59"$0$0$0$6$58$"		Assert.notNull(converter, ""Converter must not be null"");"
"ConvertingComparator.java:60"$0$0$0$3$31$"		this.comparator = comparator;"
"ConvertingComparator.java:61"$0$0$0$3$29$"		this.converter = converter;"
"ConvertingComparator.java:62"$0$0$0$1$2$"	}"
"ConvertingComparator.java:63"$0$0$0$0$0$""
"ConvertingComparator.java:64"$0$0$0$1$4$"	/**"
"ConvertingComparator.java:65"$0$0$0$7$55$"	 * Create a new {@code ConvertingComparator} instance."
"ConvertingComparator.java:66"$0$0$0$6$47$"	 * @param comparator the underlying comparator"
"ConvertingComparator.java:67"$0$0$0$6$51$"	 * @param conversionService the conversion service"
"ConvertingComparator.java:68"$2$0$0$6$37$"	 * @param targetType the target type"
"ConvertingComparator.java:69"$0$0$0$1$4$"	 */"
"ConvertingComparator.java:70"$0$0$0$2$29$"	public ConvertingComparator("
"ConvertingComparator.java:71"$1$0$0$9$98$"			Comparator<T> comparator, ConversionService conversionService, Class<? extends T> targetType) {"
"ConvertingComparator.java:72"$0$0$0$0$0$""
"ConvertingComparator.java:73"$1$0$0$4$84$"		this(comparator, new ConversionServiceConverter<>(conversionService, targetType));"
"ConvertingComparator.java:74"$0$0$0$1$2$"	}"
"ConvertingComparator.java:75"$0$0$0$0$0$""
"ConvertingComparator.java:76"$0$0$0$0$0$""
"ConvertingComparator.java:77"$0$0$0$1$10$"	@Override"
"ConvertingComparator.java:78"$0$0$0$7$33$"	public int compare(S o1, S o2) {"
"ConvertingComparator.java:79"$0$0$0$4$36$"		T c1 = this.converter.convert(o1);"
"ConvertingComparator.java:80"$0$0$0$4$36$"		T c2 = this.converter.convert(o2);"
"ConvertingComparator.java:81"$0$0$0$3$41$"		return this.comparator.compare(c1, c2);"
"ConvertingComparator.java:82"$0$0$0$1$2$"	}"
"ConvertingComparator.java:83"$0$0$0$0$0$""
"ConvertingComparator.java:84"$0$0$0$1$4$"	/**"
"ConvertingComparator.java:85"$0$0$0$10$86$"	 * Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry"
"ConvertingComparator.java:86"$1$0$0$10$76$"	 * map * entries} based on their {@link java.util.Map.Entry#getKey() keys}."
"ConvertingComparator.java:87"$0$0$0$10$68$"	 * @param comparator the underlying comparator used to compare keys"
"ConvertingComparator.java:88"$0$0$0$7$55$"	 * @return a new {@link ConvertingComparator} instance"
"ConvertingComparator.java:89"$0$0$0$1$4$"	 */"
"ConvertingComparator.java:90"$0$0$0$10$103$"	public static <K, V> ConvertingComparator<Map.Entry<K, V>, K> mapEntryKeys(Comparator<K> comparator) {"
"ConvertingComparator.java:91"$1$0$0$4$67$"		return new ConvertingComparator<>(comparator, Map.Entry::getKey);"
"ConvertingComparator.java:92"$0$0$0$1$2$"	}"
"ConvertingComparator.java:93"$0$0$0$0$0$""
"ConvertingComparator.java:94"$0$0$0$1$4$"	/**"
"ConvertingComparator.java:95"$0$0$0$10$86$"	 * Create a new {@link ConvertingComparator} that compares {@link java.util.Map.Entry"
"ConvertingComparator.java:96"$1$0$0$9$78$"	 * map entries} based on their {@link java.util.Map.Entry#getValue() values}."
"ConvertingComparator.java:97"$0$0$0$10$70$"	 * @param comparator the underlying comparator used to compare values"
"ConvertingComparator.java:98"$0$0$0$7$55$"	 * @return a new {@link ConvertingComparator} instance"
"ConvertingComparator.java:99"$0$0$0$1$4$"	 */"
"ConvertingComparator.java:100"$0$0$0$10$105$"	public static <K, V> ConvertingComparator<Map.Entry<K, V>, V> mapEntryValues(Comparator<V> comparator) {"
"ConvertingComparator.java:101"$1$0$0$4$69$"		return new ConvertingComparator<>(comparator, Map.Entry::getValue);"
"ConvertingComparator.java:102"$0$0$0$1$2$"	}"
"ConvertingComparator.java:103"$0$0$0$0$0$""
"ConvertingComparator.java:104"$0$0$0$0$0$""
"ConvertingComparator.java:105"$0$0$0$1$4$"	/**"
"ConvertingComparator.java:106"$1$0$0$11$86$"	 * Adapts a {@link ConversionService} and <tt>targetType</tt> to a {@link Converter}."
"ConvertingComparator.java:107"$0$0$0$1$4$"	 */"
"ConvertingComparator.java:108"$0$0$0$9$83$"	private static class ConversionServiceConverter<S, T> implements Converter<S, T> {"
"ConvertingComparator.java:109"$0$0$0$0$0$""
"ConvertingComparator.java:110"$0$0$0$4$52$"		private final ConversionService conversionService;"
"ConvertingComparator.java:111"$0$0$0$0$0$""
"ConvertingComparator.java:112"$1$0$0$6$46$"		private final Class<? extends T> targetType;"
"ConvertingComparator.java:113"$0$0$0$0$0$""
"ConvertingComparator.java:114"$0$0$0$3$72$"		public ConversionServiceConverter(ConversionService conversionService,"
"ConvertingComparator.java:115"$1$0$0$5$35$"			Class<? extends T> targetType) {"
"ConvertingComparator.java:116"$0$0$0$6$75$"			Assert.notNull(conversionService, ""ConversionService must not be null"");"
"ConvertingComparator.java:117"$2$0$0$6$61$"			Assert.notNull(targetType, ""TargetType must not be null"");"
"ConvertingComparator.java:118"$0$0$0$3$46$"			this.conversionService = conversionService;"
"ConvertingComparator.java:119"$2$0$0$3$32$"			this.targetType = targetType;"
"ConvertingComparator.java:120"$0$0$0$1$3$"		}"
"ConvertingComparator.java:121"$0$0$0$0$0$""
"ConvertingComparator.java:122"$0$0$0$1$11$"		@Override"
"ConvertingComparator.java:123"$0$0$0$1$11$"		@Nullable"
"ConvertingComparator.java:124"$0$0$0$5$30$"		public T convert(S source) {"
"ConvertingComparator.java:125"$1$0$0$3$66$"			return this.conversionService.convert(source, this.targetType);"
"ConvertingComparator.java:126"$0$0$0$1$3$"		}"
"ConvertingComparator.java:127"$0$0$0$1$2$"	}"
"ConvertingComparator.java:128"$0$0$0$0$0$""
"ConvertingComparator.java:129"$0$0$0$1$1$"}"
"StaxUtils.java:1"$0$0$0$1$2$"/*"
"StaxUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"StaxUtils.java:3"$0$0$0$1$2$" *"
"StaxUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StaxUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StaxUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StaxUtils.java:7"$0$0$0$1$2$" *"
"StaxUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StaxUtils.java:9"$0$0$0$1$2$" *"
"StaxUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StaxUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StaxUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StaxUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StaxUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"StaxUtils.java:15"$0$0$0$1$3$" */"
"StaxUtils.java:16"$0$0$0$0$0$""
"StaxUtils.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"StaxUtils.java:18"$0$0$0$0$0$""
"StaxUtils.java:19"$0$0$0$2$22$"import java.util.List;"
"StaxUtils.java:20"$0$0$0$2$35$"import java.util.function.Supplier;"
"StaxUtils.java:21"$0$0$0$0$0$""
"StaxUtils.java:22"$0$0$0$2$40$"import javax.xml.stream.XMLEventFactory;"
"StaxUtils.java:23"$0$0$0$2$39$"import javax.xml.stream.XMLEventReader;"
"StaxUtils.java:24"$0$0$0$2$39$"import javax.xml.stream.XMLEventWriter;"
"StaxUtils.java:25"$0$0$0$2$40$"import javax.xml.stream.XMLInputFactory;"
"StaxUtils.java:26"$0$0$0$2$36$"import javax.xml.stream.XMLResolver;"
"StaxUtils.java:27"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"StaxUtils.java:28"$0$0$0$2$40$"import javax.xml.stream.XMLStreamReader;"
"StaxUtils.java:29"$0$0$0$2$40$"import javax.xml.stream.XMLStreamWriter;"
"StaxUtils.java:30"$0$0$0$2$40$"import javax.xml.stream.events.XMLEvent;"
"StaxUtils.java:31"$0$0$0$2$34$"import javax.xml.transform.Result;"
"StaxUtils.java:32"$0$0$0$2$34$"import javax.xml.transform.Source;"
"StaxUtils.java:33"$0$0$0$2$43$"import javax.xml.transform.stax.StAXResult;"
"StaxUtils.java:34"$0$0$0$2$43$"import javax.xml.transform.stax.StAXSource;"
"StaxUtils.java:35"$0$0$0$0$0$""
"StaxUtils.java:36"$0$0$0$2$34$"import org.xml.sax.ContentHandler;"
"StaxUtils.java:37"$0$0$0$2$29$"import org.xml.sax.XMLReader;"
"StaxUtils.java:38"$0$0$0$0$0$""
"StaxUtils.java:39"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StaxUtils.java:40"$0$0$0$2$44$"import org.springframework.util.StreamUtils;"
"StaxUtils.java:41"$0$0$0$0$0$""
"StaxUtils.java:42"$0$0$0$1$3$"/**"
"StaxUtils.java:43"$0$0$0$15$85$" * Convenience methods for working with the StAX API. Partly historic due to JAXP 1.3"
"StaxUtils.java:44"$0$0$0$17$90$" * compatibility; as of Spring 4.0, relying on JAXP 1.4 as included in JDK 1.6 and higher."
"StaxUtils.java:45"$0$0$0$1$2$" *"
"StaxUtils.java:46"$0$0$0$12$90$" * <p>In particular, methods for using StAX ({@code javax.xml.stream}) in combination with"
"StaxUtils.java:47"$0$0$0$12$91$" * the TrAX API ({@code javax.xml.transform}), and converting StAX readers/writers into SAX"
"StaxUtils.java:48"$0$0$0$4$35$" * readers/handlers and vice-versa."
"StaxUtils.java:49"$0$0$0$1$2$" *"
"StaxUtils.java:50"$0$0$0$4$24$" * @author Arjen Poutsma"
"StaxUtils.java:51"$0$0$0$4$26$" * @author Juergen Hoeller"
"StaxUtils.java:52"$0$0$0$3$13$" * @since 3.0"
"StaxUtils.java:53"$0$0$0$1$3$" */"
"StaxUtils.java:54"$0$0$0$5$33$"public abstract class StaxUtils {"
"StaxUtils.java:55"$0$0$0$0$0$""
"StaxUtils.java:56"$0$0$0$6$54$"	private static final XMLResolver NO_OP_XML_RESOLVER ="
"StaxUtils.java:57"$0$0$0$6$62$"			(publicID, systemID, base, ns) -> StreamUtils.emptyInput();"
"StaxUtils.java:58"$0$0$0$0$0$""
"StaxUtils.java:59"$0$0$0$0$0$""
"StaxUtils.java:60"$0$0$0$1$4$"	/**"
"StaxUtils.java:61"$0$0$0$9$68$"	 * Create an {@link XMLInputFactory} with Spring's defensive setup,"
"StaxUtils.java:62"$0$0$0$12$69$"	 * i.e. no support for the resolution of DTDs and external entities."
"StaxUtils.java:63"$0$0$0$11$71$"	 * @return a new defensively initialized input factory instance to use"
"StaxUtils.java:64"$0$0$0$3$14$"	 * @since 5.0"
"StaxUtils.java:65"$0$0$0$1$4$"	 */"
"StaxUtils.java:66"$0$0$0$5$62$"	public static XMLInputFactory createDefensiveInputFactory() {"
"StaxUtils.java:67"$0$0$0$2$67$"		return createDefensiveInputFactory(XMLInputFactory::newInstance);"
"StaxUtils.java:68"$0$0$0$1$2$"	}"
"StaxUtils.java:69"$0$0$0$0$0$""
"StaxUtils.java:70"$0$0$0$1$4$"	/**"
"StaxUtils.java:71"$0$0$0$9$77$"	 * Variant of {@link #createDefensiveInputFactory()} with a custom instance."
"StaxUtils.java:72"$0$0$0$9$67$"	 * @param instanceSupplier supplier for the input factory instance"
"StaxUtils.java:73"$0$0$0$11$71$"	 * @return a new defensively initialized input factory instance to use"
"StaxUtils.java:74"$0$0$0$3$17$"	 * @since 5.0.12"
"StaxUtils.java:75"$0$0$0$1$4$"	 */"
"StaxUtils.java:76"$0$0$0$9$104$"	public static <T extends XMLInputFactory> T createDefensiveInputFactory(Supplier<T> instanceSupplier) {"
"StaxUtils.java:77"$1$0$0$4$42$"		T inputFactory = instanceSupplier.get();"
"StaxUtils.java:78"$0$0$0$2$63$"		inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);"
"StaxUtils.java:79"$0$0$0$2$83$"		inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);"
"StaxUtils.java:80"$0$0$0$1$50$"		inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);"
"StaxUtils.java:81"$0$0$0$2$22$"		return inputFactory;"
"StaxUtils.java:82"$0$0$0$1$2$"	}"
"StaxUtils.java:83"$0$0$0$0$0$""
"StaxUtils.java:84"$0$0$0$1$4$"	/**"
"StaxUtils.java:85"$0$0$0$12$79$"	 * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLStreamReader}."
"StaxUtils.java:86"$0$0$0$7$46$"	 * @param streamReader the StAX stream reader"
"StaxUtils.java:87"$0$0$0$8$54$"	 * @return a source wrapping the {@code streamReader}"
"StaxUtils.java:88"$0$0$0$1$4$"	 */"
"StaxUtils.java:89"$0$0$0$6$70$"	public static Source createStaxSource(XMLStreamReader streamReader) {"
"StaxUtils.java:90"$0$0$0$3$38$"		return new StAXSource(streamReader);"
"StaxUtils.java:91"$0$0$0$1$2$"	}"
"StaxUtils.java:92"$0$0$0$0$0$""
"StaxUtils.java:93"$0$0$0$1$4$"	/**"
"StaxUtils.java:94"$0$0$0$12$78$"	 * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLEventReader}."
"StaxUtils.java:95"$0$0$0$7$44$"	 * @param eventReader the StAX event reader"
"StaxUtils.java:96"$0$0$0$8$53$"	 * @return a source wrapping the {@code eventReader}"
"StaxUtils.java:97"$0$0$0$1$4$"	 */"
"StaxUtils.java:98"$0$0$0$8$94$"	public static Source createStaxSource(XMLEventReader eventReader) throws XMLStreamException {"
"StaxUtils.java:99"$0$0$0$3$37$"		return new StAXSource(eventReader);"
"StaxUtils.java:100"$0$0$0$1$2$"	}"
"StaxUtils.java:101"$0$0$0$0$0$""
"StaxUtils.java:102"$0$0$0$1$4$"	/**"
"StaxUtils.java:103"$0$0$0$14$92$"	 * Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLStreamReader}."
"StaxUtils.java:104"$0$0$0$7$46$"	 * @param streamReader the StAX stream reader"
"StaxUtils.java:105"$0$0$0$8$54$"	 * @return a source wrapping the {@code streamReader}"
"StaxUtils.java:106"$0$0$0$1$4$"	 */"
"StaxUtils.java:107"$0$0$0$6$76$"	public static Source createCustomStaxSource(XMLStreamReader streamReader) {"
"StaxUtils.java:108"$0$0$0$3$38$"		return new StaxSource(streamReader);"
"StaxUtils.java:109"$0$0$0$1$2$"	}"
"StaxUtils.java:110"$0$0$0$0$0$""
"StaxUtils.java:111"$0$0$0$1$4$"	/**"
"StaxUtils.java:112"$0$0$0$14$91$"	 * Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLEventReader}."
"StaxUtils.java:113"$0$0$0$7$44$"	 * @param eventReader the StAX event reader"
"StaxUtils.java:114"$0$0$0$8$53$"	 * @return a source wrapping the {@code eventReader}"
"StaxUtils.java:115"$0$0$0$1$4$"	 */"
"StaxUtils.java:116"$0$0$0$6$74$"	public static Source createCustomStaxSource(XMLEventReader eventReader) {"
"StaxUtils.java:117"$0$0$0$3$37$"		return new StaxSource(eventReader);"
"StaxUtils.java:118"$0$0$0$1$2$"	}"
"StaxUtils.java:119"$0$0$0$0$0$""
"StaxUtils.java:120"$0$0$0$1$4$"	/**"
"StaxUtils.java:121"$0$0$0$14$74$"	 * Indicate whether the given {@link Source} is a JAXP 1.4 StAX Source or"
"StaxUtils.java:122"$0$0$0$4$23$"	 * custom StAX Source."
"StaxUtils.java:123"$0$0$0$14$78$"	 * @return {@code true} if {@code source} is a JAXP 1.4 {@link StAXSource} or"
"StaxUtils.java:124"$0$0$0$7$47$"	 * custom StAX Source; {@code false} otherwise"
"StaxUtils.java:125"$0$0$0$1$4$"	 */"
"StaxUtils.java:126"$0$0$0$6$52$"	public static boolean isStaxSource(Source source) {"
"StaxUtils.java:127"$0$0$0$8$72$"		return (source instanceof StAXSource || source instanceof StaxSource);"
"StaxUtils.java:128"$0$0$0$1$2$"	}"
"StaxUtils.java:129"$0$0$0$0$0$""
"StaxUtils.java:130"$0$0$0$1$4$"	/**"
"StaxUtils.java:131"$0$0$0$10$65$"	 * Return the {@link XMLStreamReader} for the given StAX Source."
"StaxUtils.java:132"$0$0$0$8$47$"	 * @param source a JAXP 1.4 {@link StAXSource}"
"StaxUtils.java:133"$0$0$0$5$39$"	 * @return the {@link XMLStreamReader}"
"StaxUtils.java:134"$0$0$0$12$90$"	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXSource}"
"StaxUtils.java:135"$0$0$0$5$25$"	 * or custom StAX Source"
"StaxUtils.java:136"$0$0$0$1$4$"	 */"
"StaxUtils.java:137"$0$0$0$1$10$"	@Nullable"
"StaxUtils.java:138"$1$0$0$6$66$"	public static XMLStreamReader getXMLStreamReader(Source source) {"
"StaxUtils.java:139"$0$0$0$5$37$"		if (source instanceof StAXSource) {"
"StaxUtils.java:140"$1$0$0$3$53$"			return ((StAXSource) source).getXMLStreamReader();"
"StaxUtils.java:141"$0$0$0$1$3$"		}"
"StaxUtils.java:142"$0$0$0$6$42$"		else if (source instanceof StaxSource) {"
"StaxUtils.java:143"$1$0$0$3$53$"			return ((StaxSource) source).getXMLStreamReader();"
"StaxUtils.java:144"$0$0$0$1$3$"		}"
"StaxUtils.java:145"$0$0$0$2$8$"		else {"
"StaxUtils.java:146"$0$0$0$13$102$"			throw new IllegalArgumentException(""Source '"" + source + ""' is neither StaxSource nor StAXSource"");"
"StaxUtils.java:147"$0$0$0$1$3$"		}"
"StaxUtils.java:148"$0$0$0$1$2$"	}"
"StaxUtils.java:149"$0$0$0$0$0$""
"StaxUtils.java:150"$0$0$0$1$4$"	/**"
"StaxUtils.java:151"$0$0$0$10$64$"	 * Return the {@link XMLEventReader} for the given StAX Source."
"StaxUtils.java:152"$0$0$0$8$47$"	 * @param source a JAXP 1.4 {@link StAXSource}"
"StaxUtils.java:153"$0$0$0$5$38$"	 * @return the {@link XMLEventReader}"
"StaxUtils.java:154"$0$0$0$12$90$"	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXSource}"
"StaxUtils.java:155"$0$0$0$5$25$"	 * or custom StAX Source"
"StaxUtils.java:156"$0$0$0$1$4$"	 */"
"StaxUtils.java:157"$0$0$0$1$10$"	@Nullable"
"StaxUtils.java:158"$1$0$0$6$64$"	public static XMLEventReader getXMLEventReader(Source source) {"
"StaxUtils.java:159"$0$0$0$5$37$"		if (source instanceof StAXSource) {"
"StaxUtils.java:160"$1$0$0$3$52$"			return ((StAXSource) source).getXMLEventReader();"
"StaxUtils.java:161"$0$0$0$1$3$"		}"
"StaxUtils.java:162"$0$0$0$6$42$"		else if (source instanceof StaxSource) {"
"StaxUtils.java:163"$1$0$0$3$52$"			return ((StaxSource) source).getXMLEventReader();"
"StaxUtils.java:164"$0$0$0$1$3$"		}"
"StaxUtils.java:165"$0$0$0$2$8$"		else {"
"StaxUtils.java:166"$0$0$0$13$102$"			throw new IllegalArgumentException(""Source '"" + source + ""' is neither StaxSource nor StAXSource"");"
"StaxUtils.java:167"$0$0$0$1$3$"		}"
"StaxUtils.java:168"$0$0$0$1$2$"	}"
"StaxUtils.java:169"$0$0$0$0$0$""
"StaxUtils.java:170"$0$0$0$1$4$"	/**"
"StaxUtils.java:171"$0$0$0$12$79$"	 * Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLStreamWriter}."
"StaxUtils.java:172"$0$0$0$7$46$"	 * @param streamWriter the StAX stream writer"
"StaxUtils.java:173"$0$0$0$8$54$"	 * @return a result wrapping the {@code streamWriter}"
"StaxUtils.java:174"$0$0$0$1$4$"	 */"
"StaxUtils.java:175"$0$0$0$6$70$"	public static Result createStaxResult(XMLStreamWriter streamWriter) {"
"StaxUtils.java:176"$0$0$0$3$38$"		return new StAXResult(streamWriter);"
"StaxUtils.java:177"$0$0$0$1$2$"	}"
"StaxUtils.java:178"$0$0$0$0$0$""
"StaxUtils.java:179"$0$0$0$1$4$"	/**"
"StaxUtils.java:180"$0$0$0$12$78$"	 * Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLEventWriter}."
"StaxUtils.java:181"$0$0$0$7$44$"	 * @param eventWriter the StAX event writer"
"StaxUtils.java:182"$0$0$0$7$50$"	 * @return a result wrapping {@code streamReader}"
"StaxUtils.java:183"$0$0$0$1$4$"	 */"
"StaxUtils.java:184"$0$0$0$6$68$"	public static Result createStaxResult(XMLEventWriter eventWriter) {"
"StaxUtils.java:185"$0$0$0$3$37$"		return new StAXResult(eventWriter);"
"StaxUtils.java:186"$0$0$0$1$2$"	}"
"StaxUtils.java:187"$0$0$0$0$0$""
"StaxUtils.java:188"$0$0$0$1$4$"	/**"
"StaxUtils.java:189"$0$0$0$14$92$"	 * Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLStreamWriter}."
"StaxUtils.java:190"$0$0$0$7$46$"	 * @param streamWriter the StAX stream writer"
"StaxUtils.java:191"$0$0$0$8$54$"	 * @return a source wrapping the {@code streamWriter}"
"StaxUtils.java:192"$0$0$0$1$4$"	 */"
"StaxUtils.java:193"$0$0$0$6$76$"	public static Result createCustomStaxResult(XMLStreamWriter streamWriter) {"
"StaxUtils.java:194"$0$0$0$3$38$"		return new StaxResult(streamWriter);"
"StaxUtils.java:195"$0$0$0$1$2$"	}"
"StaxUtils.java:196"$0$0$0$0$0$""
"StaxUtils.java:197"$0$0$0$1$4$"	/**"
"StaxUtils.java:198"$0$0$0$14$91$"	 * Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLEventWriter}."
"StaxUtils.java:199"$0$0$0$7$44$"	 * @param eventWriter the StAX event writer"
"StaxUtils.java:200"$0$0$0$8$53$"	 * @return a source wrapping the {@code eventWriter}"
"StaxUtils.java:201"$0$0$0$1$4$"	 */"
"StaxUtils.java:202"$0$0$0$6$74$"	public static Result createCustomStaxResult(XMLEventWriter eventWriter) {"
"StaxUtils.java:203"$0$0$0$3$37$"		return new StaxResult(eventWriter);"
"StaxUtils.java:204"$0$0$0$1$2$"	}"
"StaxUtils.java:205"$0$0$0$0$0$""
"StaxUtils.java:206"$0$0$0$1$4$"	/**"
"StaxUtils.java:207"$0$0$0$14$74$"	 * Indicate whether the given {@link Result} is a JAXP 1.4 StAX Result or"
"StaxUtils.java:208"$0$0$0$4$23$"	 * custom StAX Result."
"StaxUtils.java:209"$0$0$0$14$78$"	 * @return {@code true} if {@code result} is a JAXP 1.4 {@link StAXResult} or"
"StaxUtils.java:210"$0$0$0$7$47$"	 * custom StAX Result; {@code false} otherwise"
"StaxUtils.java:211"$0$0$0$1$4$"	 */"
"StaxUtils.java:212"$0$0$0$6$52$"	public static boolean isStaxResult(Result result) {"
"StaxUtils.java:213"$0$0$0$8$72$"		return (result instanceof StAXResult || result instanceof StaxResult);"
"StaxUtils.java:214"$0$0$0$1$2$"	}"
"StaxUtils.java:215"$0$0$0$0$0$""
"StaxUtils.java:216"$0$0$0$1$4$"	/**"
"StaxUtils.java:217"$0$0$0$10$65$"	 * Return the {@link XMLStreamWriter} for the given StAX Result."
"StaxUtils.java:218"$0$0$0$8$47$"	 * @param result a JAXP 1.4 {@link StAXResult}"
"StaxUtils.java:219"$0$0$0$5$39$"	 * @return the {@link XMLStreamReader}"
"StaxUtils.java:220"$0$0$0$12$90$"	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}"
"StaxUtils.java:221"$0$0$0$5$25$"	 * or custom StAX Result"
"StaxUtils.java:222"$0$0$0$1$4$"	 */"
"StaxUtils.java:223"$0$0$0$1$10$"	@Nullable"
"StaxUtils.java:224"$1$0$0$6$66$"	public static XMLStreamWriter getXMLStreamWriter(Result result) {"
"StaxUtils.java:225"$0$0$0$5$37$"		if (result instanceof StAXResult) {"
"StaxUtils.java:226"$1$0$0$3$53$"			return ((StAXResult) result).getXMLStreamWriter();"
"StaxUtils.java:227"$0$0$0$1$3$"		}"
"StaxUtils.java:228"$0$0$0$6$42$"		else if (result instanceof StaxResult) {"
"StaxUtils.java:229"$1$0$0$3$53$"			return ((StaxResult) result).getXMLStreamWriter();"
"StaxUtils.java:230"$0$0$0$1$3$"		}"
"StaxUtils.java:231"$0$0$0$2$8$"		else {"
"StaxUtils.java:232"$0$0$0$13$102$"			throw new IllegalArgumentException(""Result '"" + result + ""' is neither StaxResult nor StAXResult"");"
"StaxUtils.java:233"$0$0$0$1$3$"		}"
"StaxUtils.java:234"$0$0$0$1$2$"	}"
"StaxUtils.java:235"$0$0$0$0$0$""
"StaxUtils.java:236"$0$0$0$1$4$"	/**"
"StaxUtils.java:237"$0$0$0$10$64$"	 * Return the {@link XMLEventWriter} for the given StAX Result."
"StaxUtils.java:238"$0$0$0$8$47$"	 * @param result a JAXP 1.4 {@link StAXResult}"
"StaxUtils.java:239"$0$0$0$5$39$"	 * @return the {@link XMLStreamReader}"
"StaxUtils.java:240"$0$0$0$12$90$"	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}"
"StaxUtils.java:241"$0$0$0$5$25$"	 * or custom StAX Result"
"StaxUtils.java:242"$0$0$0$1$4$"	 */"
"StaxUtils.java:243"$0$0$0$1$10$"	@Nullable"
"StaxUtils.java:244"$1$0$0$6$64$"	public static XMLEventWriter getXMLEventWriter(Result result) {"
"StaxUtils.java:245"$0$0$0$5$37$"		if (result instanceof StAXResult) {"
"StaxUtils.java:246"$1$0$0$3$52$"			return ((StAXResult) result).getXMLEventWriter();"
"StaxUtils.java:247"$0$0$0$1$3$"		}"
"StaxUtils.java:248"$0$0$0$6$42$"		else if (result instanceof StaxResult) {"
"StaxUtils.java:249"$1$0$0$3$52$"			return ((StaxResult) result).getXMLEventWriter();"
"StaxUtils.java:250"$0$0$0$1$3$"		}"
"StaxUtils.java:251"$0$0$0$2$8$"		else {"
"StaxUtils.java:252"$0$0$0$13$102$"			throw new IllegalArgumentException(""Result '"" + result + ""' is neither StaxResult nor StAXResult"");"
"StaxUtils.java:253"$0$0$0$1$3$"		}"
"StaxUtils.java:254"$0$0$0$1$2$"	}"
"StaxUtils.java:255"$0$0$0$0$0$""
"StaxUtils.java:256"$0$0$0$1$4$"	/**"
"StaxUtils.java:257"$0$0$0$12$76$"	 * Create a {@link XMLEventReader} from the given list of {@link XMLEvent}."
"StaxUtils.java:258"$0$0$0$9$57$"	 * @param events the list of {@link XMLEvent XMLEvents}."
"StaxUtils.java:259"$0$0$0$11$70$"	 * @return an {@code XMLEventReader} that reads from the given events"
"StaxUtils.java:260"$0$0$0$3$14$"	 * @since 5.0"
"StaxUtils.java:261"$0$0$0$1$4$"	 */"
"StaxUtils.java:262"$0$0$0$6$75$"	public static XMLEventReader createXMLEventReader(List<XMLEvent> events) {"
"StaxUtils.java:263"$0$0$0$3$45$"		return new ListBasedXMLEventReader(events);"
"StaxUtils.java:264"$0$0$0$1$2$"	}"
"StaxUtils.java:265"$0$0$0$0$0$""
"StaxUtils.java:266"$0$0$0$1$4$"	/**"
"StaxUtils.java:267"$0$0$0$14$94$"	 * Create a SAX {@link ContentHandler} that writes to the given StAX {@link XMLStreamWriter}."
"StaxUtils.java:268"$0$0$0$7$46$"	 * @param streamWriter the StAX stream writer"
"StaxUtils.java:269"$0$0$0$10$65$"	 * @return a content handler writing to the {@code streamWriter}"
"StaxUtils.java:270"$0$0$0$1$4$"	 */"
"StaxUtils.java:271"$0$0$0$6$82$"	public static ContentHandler createContentHandler(XMLStreamWriter streamWriter) {"
"StaxUtils.java:272"$0$0$0$3$45$"		return new StaxStreamHandler(streamWriter);"
"StaxUtils.java:273"$0$0$0$1$2$"	}"
"StaxUtils.java:274"$0$0$0$0$0$""
"StaxUtils.java:275"$0$0$0$1$4$"	/**"
"StaxUtils.java:276"$0$0$0$15$100$"	 * Create a SAX {@link ContentHandler} that writes events to the given StAX {@link XMLEventWriter}."
"StaxUtils.java:277"$0$0$0$7$44$"	 * @param eventWriter the StAX event writer"
"StaxUtils.java:278"$0$0$0$10$64$"	 * @return a content handler writing to the {@code eventWriter}"
"StaxUtils.java:279"$0$0$0$1$4$"	 */"
"StaxUtils.java:280"$0$0$0$6$80$"	public static ContentHandler createContentHandler(XMLEventWriter eventWriter) {"
"StaxUtils.java:281"$0$0$0$3$43$"		return new StaxEventHandler(eventWriter);"
"StaxUtils.java:282"$0$0$0$1$2$"	}"
"StaxUtils.java:283"$0$0$0$0$0$""
"StaxUtils.java:284"$0$0$0$1$4$"	/**"
"StaxUtils.java:285"$0$0$0$14$90$"	 * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLStreamReader}."
"StaxUtils.java:286"$0$0$0$7$46$"	 * @param streamReader the StAX stream reader"
"StaxUtils.java:287"$0$0$0$9$61$"	 * @return a XMLReader reading from the {@code streamWriter}"
"StaxUtils.java:288"$0$0$0$1$4$"	 */"
"StaxUtils.java:289"$0$0$0$6$72$"	public static XMLReader createXMLReader(XMLStreamReader streamReader) {"
"StaxUtils.java:290"$0$0$0$3$47$"		return new StaxStreamXMLReader(streamReader);"
"StaxUtils.java:291"$0$0$0$1$2$"	}"
"StaxUtils.java:292"$0$0$0$0$0$""
"StaxUtils.java:293"$0$0$0$1$4$"	/**"
"StaxUtils.java:294"$0$0$0$14$89$"	 * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLEventReader}."
"StaxUtils.java:295"$0$0$0$7$44$"	 * @param eventReader the StAX event reader"
"StaxUtils.java:296"$0$0$0$9$60$"	 * @return a XMLReader reading from the {@code eventWriter}"
"StaxUtils.java:297"$0$0$0$1$4$"	 */"
"StaxUtils.java:298"$0$0$0$6$70$"	public static XMLReader createXMLReader(XMLEventReader eventReader) {"
"StaxUtils.java:299"$0$0$0$3$45$"		return new StaxEventXMLReader(eventReader);"
"StaxUtils.java:300"$0$0$0$1$2$"	}"
"StaxUtils.java:301"$0$0$0$0$0$""
"StaxUtils.java:302"$0$0$0$1$4$"	/**"
"StaxUtils.java:303"$0$0$0$11$78$"	 * Return a {@link XMLStreamReader} that reads from a {@link XMLEventReader}."
"StaxUtils.java:304"$0$0$0$12$75$"	 * Useful because the StAX {@code XMLInputFactory} allows one to create an"
"StaxUtils.java:305"$0$0$0$10$58$"	 * event reader from a stream reader, but not vice-versa."
"StaxUtils.java:306"$0$0$0$11$59$"	 * @return a stream reader that reads from an event reader"
"StaxUtils.java:307"$0$0$0$1$4$"	 */"
"StaxUtils.java:308"$0$0$0$8$110$"	public static XMLStreamReader createEventStreamReader(XMLEventReader eventReader) throws XMLStreamException {"
"StaxUtils.java:309"$0$0$0$3$47$"		return new XMLEventStreamReader(eventReader);"
"StaxUtils.java:310"$0$0$0$1$2$"	}"
"StaxUtils.java:311"$0$0$0$0$0$""
"StaxUtils.java:312"$0$0$0$1$4$"	/**"
"StaxUtils.java:313"$0$0$0$11$77$"	 * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}."
"StaxUtils.java:314"$0$0$0$11$58$"	 * @return a stream writer that writes to an event writer"
"StaxUtils.java:315"$0$0$0$3$14$"	 * @since 3.2"
"StaxUtils.java:316"$0$0$0$1$4$"	 */"
"StaxUtils.java:317"$0$0$0$6$84$"	public static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter) {"
"StaxUtils.java:318"$0$0$0$4$77$"		return new XMLEventStreamWriter(eventWriter, XMLEventFactory.newFactory());"
"StaxUtils.java:319"$0$0$0$1$2$"	}"
"StaxUtils.java:320"$0$0$0$0$0$""
"StaxUtils.java:321"$0$0$0$1$4$"	/**"
"StaxUtils.java:322"$0$0$0$11$77$"	 * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}."
"StaxUtils.java:323"$0$0$0$11$58$"	 * @return a stream writer that writes to an event writer"
"StaxUtils.java:324"$0$0$0$3$16$"	 * @since 3.0.5"
"StaxUtils.java:325"$0$0$0$1$4$"	 */"
"StaxUtils.java:326"$0$0$0$8$114$"	public static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter, XMLEventFactory eventFactory) {"
"StaxUtils.java:327"$0$0$0$4$61$"		return new XMLEventStreamWriter(eventWriter, eventFactory);"
"StaxUtils.java:328"$0$0$0$1$2$"	}"
"StaxUtils.java:329"$0$0$0$0$0$""
"StaxUtils.java:330"$0$0$0$1$1$"}"
"CharSequenceEncoder.java:1"$0$0$0$1$2$"/*"
"CharSequenceEncoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"CharSequenceEncoder.java:3"$0$0$0$1$2$" *"
"CharSequenceEncoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"CharSequenceEncoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"CharSequenceEncoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"CharSequenceEncoder.java:7"$0$0$0$1$2$" *"
"CharSequenceEncoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"CharSequenceEncoder.java:9"$0$0$0$1$2$" *"
"CharSequenceEncoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"CharSequenceEncoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"CharSequenceEncoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"CharSequenceEncoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"CharSequenceEncoder.java:14"$0$0$0$5$33$" * limitations under the License."
"CharSequenceEncoder.java:15"$0$0$0$1$3$" */"
"CharSequenceEncoder.java:16"$0$0$0$0$0$""
"CharSequenceEncoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"CharSequenceEncoder.java:18"$0$0$0$0$0$""
"CharSequenceEncoder.java:19"$0$0$0$2$32$"import java.nio.charset.Charset;"
"CharSequenceEncoder.java:20"$0$0$0$2$46$"import java.nio.charset.CoderMalfunctionError;"
"CharSequenceEncoder.java:21"$0$0$0$2$41$"import java.nio.charset.StandardCharsets;"
"CharSequenceEncoder.java:22"$0$0$0$2$21$"import java.util.Map;"
"CharSequenceEncoder.java:23"$0$0$0$2$46$"import java.util.concurrent.ConcurrentHashMap;"
"CharSequenceEncoder.java:24"$0$0$0$2$42$"import java.util.concurrent.ConcurrentMap;"
"CharSequenceEncoder.java:25"$0$0$0$0$0$""
"CharSequenceEncoder.java:26"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"CharSequenceEncoder.java:27"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"CharSequenceEncoder.java:28"$0$0$0$0$0$""
"CharSequenceEncoder.java:29"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"CharSequenceEncoder.java:30"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"CharSequenceEncoder.java:31"$0$0$0$2$60$"import org.springframework.core.io.buffer.DataBufferFactory;"
"CharSequenceEncoder.java:32"$0$0$0$2$58$"import org.springframework.core.io.buffer.DataBufferUtils;"
"CharSequenceEncoder.java:33"$0$0$0$2$51$"import org.springframework.core.log.LogFormatUtils;"
"CharSequenceEncoder.java:34"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"CharSequenceEncoder.java:35"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"CharSequenceEncoder.java:36"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"CharSequenceEncoder.java:37"$0$0$0$0$0$""
"CharSequenceEncoder.java:38"$0$0$0$1$3$"/**"
"CharSequenceEncoder.java:39"$0$0$0$11$63$" * Encode from a {@code CharSequence} stream to a bytes stream."
"CharSequenceEncoder.java:40"$0$0$0$1$2$" *"
"CharSequenceEncoder.java:41"$0$0$0$4$28$" * @author Sebastien Deleuze"
"CharSequenceEncoder.java:42"$0$0$0$4$24$" * @author Arjen Poutsma"
"CharSequenceEncoder.java:43"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"CharSequenceEncoder.java:44"$0$0$0$3$13$" * @since 5.0"
"CharSequenceEncoder.java:45"$0$0$0$3$21$" * @see StringDecoder"
"CharSequenceEncoder.java:46"$0$0$0$1$3$" */"
"CharSequenceEncoder.java:47"$0$0$0$7$78$"public final class CharSequenceEncoder extends AbstractEncoder<CharSequence> {"
"CharSequenceEncoder.java:48"$0$0$0$0$0$""
"CharSequenceEncoder.java:49"$0$0$0$1$4$"	/**"
"CharSequenceEncoder.java:50"$0$0$0$8$44$"	 * The default charset used by the encoder."
"CharSequenceEncoder.java:51"$0$0$0$1$4$"	 */"
"CharSequenceEncoder.java:52"$0$0$0$7$70$"	public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;"
"CharSequenceEncoder.java:53"$0$0$0$0$0$""
"CharSequenceEncoder.java:54"$0$0$0$6$71$"	private final ConcurrentMap<Charset, Float> charsetToMaxBytesPerChar ="
"CharSequenceEncoder.java:55"$0$0$0$2$30$"			new ConcurrentHashMap<>(3);"
"CharSequenceEncoder.java:56"$0$0$0$0$0$""
"CharSequenceEncoder.java:57"$0$0$0$0$0$""
"CharSequenceEncoder.java:58"$0$0$0$4$53$"	private CharSequenceEncoder(MimeType... mimeTypes) {"
"CharSequenceEncoder.java:59"$0$0$0$1$19$"		super(mimeTypes);"
"CharSequenceEncoder.java:60"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:61"$0$0$0$0$0$""
"CharSequenceEncoder.java:62"$0$0$0$0$0$""
"CharSequenceEncoder.java:63"$0$0$0$1$10$"	@Override"
"CharSequenceEncoder.java:64"$0$0$0$8$84$"	public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"CharSequenceEncoder.java:65"$0$0$0$4$41$"		Class<?> clazz = elementType.toClass();"
"CharSequenceEncoder.java:66"$0$0$0$5$94$"		return super.canEncode(elementType, mimeType) && CharSequence.class.isAssignableFrom(clazz);"
"CharSequenceEncoder.java:67"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:68"$0$0$0$0$0$""
"CharSequenceEncoder.java:69"$0$0$0$1$10$"	@Override"
"CharSequenceEncoder.java:70"$0$0$0$6$78$"	public Flux<DataBuffer> encode(Publisher<? extends CharSequence> inputStream,"
"CharSequenceEncoder.java:71"$0$0$0$4$63$"			DataBufferFactory bufferFactory, ResolvableType elementType,"
"CharSequenceEncoder.java:72"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"CharSequenceEncoder.java:73"$0$0$0$0$0$""
"CharSequenceEncoder.java:74"$0$0$0$3$51$"		return Flux.from(inputStream).map(charSequence ->"
"CharSequenceEncoder.java:75"$0$0$0$5$76$"				encodeValue(charSequence, bufferFactory, elementType, mimeType, hints));"
"CharSequenceEncoder.java:76"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:77"$0$0$0$0$0$""
"CharSequenceEncoder.java:78"$0$0$0$1$10$"	@Override"
"CharSequenceEncoder.java:79"$0$0$0$6$90$"	public DataBuffer encodeValue(CharSequence charSequence, DataBufferFactory bufferFactory,"
"CharSequenceEncoder.java:80"$0$0$0$10$96$"			ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"CharSequenceEncoder.java:81"$0$0$0$0$0$""
"CharSequenceEncoder.java:82"$0$0$0$3$42$"		if (!Hints.isLoggingSuppressed(hints)) {"
"CharSequenceEncoder.java:83"$0$0$0$4$49$"			LogFormatUtils.traceDebug(logger, traceOn -> {"
"CharSequenceEncoder.java:84"$0$0$0$5$74$"				String formatted = LogFormatUtils.formatValue(charSequence, !traceOn);"
"CharSequenceEncoder.java:85"$1$0$0$7$62$"				return Hints.getLogPrefix(hints) + ""Writing "" + formatted;"
"CharSequenceEncoder.java:86"$0$0$0$1$6$"			});"
"CharSequenceEncoder.java:87"$0$0$0$1$3$"		}"
"CharSequenceEncoder.java:88"$0$0$0$4$25$"		boolean release = true;"
"CharSequenceEncoder.java:89"$1$0$0$4$41$"		Charset charset = getCharset(mimeType);"
"CharSequenceEncoder.java:90"$0$0$0$5$58$"		int capacity = calculateCapacity(charSequence, charset);"
"CharSequenceEncoder.java:91"$0$0$0$4$65$"		DataBuffer dataBuffer = bufferFactory.allocateBuffer(capacity);"
"CharSequenceEncoder.java:92"$0$0$0$2$7$"		try {"
"CharSequenceEncoder.java:93"$0$0$0$2$43$"			dataBuffer.write(charSequence, charset);"
"CharSequenceEncoder.java:94"$0$0$0$3$19$"			release = false;"
"CharSequenceEncoder.java:95"$0$0$0$1$3$"		}"
"CharSequenceEncoder.java:96"$0$0$0$4$36$"		catch (CoderMalfunctionError ex) {"
"CharSequenceEncoder.java:97"$1$0$0$9$80$"			throw new EncodingException(""String encoding error: "" + ex.getMessage(), ex);"
"CharSequenceEncoder.java:98"$0$0$0$1$3$"		}"
"CharSequenceEncoder.java:99"$0$0$0$2$11$"		finally {"
"CharSequenceEncoder.java:100"$0$0$0$3$17$"			if (release) {"
"CharSequenceEncoder.java:101"$0$0$0$1$40$"				DataBufferUtils.release(dataBuffer);"
"CharSequenceEncoder.java:102"$0$0$0$1$4$"			}"
"CharSequenceEncoder.java:103"$0$0$0$1$3$"		}"
"CharSequenceEncoder.java:104"$0$0$0$2$20$"		return dataBuffer;"
"CharSequenceEncoder.java:105"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:106"$0$0$0$0$0$""
"CharSequenceEncoder.java:107"$0$0$0$6$64$"	int calculateCapacity(CharSequence sequence, Charset charset) {"
"CharSequenceEncoder.java:108"$0$0$0$4$55$"		float maxBytesPerChar = this.charsetToMaxBytesPerChar"
"CharSequenceEncoder.java:109"$0$0$0$4$71$"				.computeIfAbsent(charset, cs -> cs.newEncoder().maxBytesPerChar());"
"CharSequenceEncoder.java:110"$0$0$0$6$66$"		float maxBytesForSequence = sequence.length() * maxBytesPerChar;"
"CharSequenceEncoder.java:111"$0$0$0$3$46$"		return (int) Math.ceil(maxBytesForSequence);"
"CharSequenceEncoder.java:112"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:113"$0$0$0$0$0$""
"CharSequenceEncoder.java:114"$1$0$0$6$58$"	private Charset getCharset(@Nullable MimeType mimeType) {"
"CharSequenceEncoder.java:115"$1$0$0$9$58$"		if (mimeType != null && mimeType.getCharset() != null) {"
"CharSequenceEncoder.java:116"$1$0$0$2$32$"			return mimeType.getCharset();"
"CharSequenceEncoder.java:117"$0$0$0$1$3$"		}"
"CharSequenceEncoder.java:118"$0$0$0$2$8$"		else {"
"CharSequenceEncoder.java:119"$0$0$0$2$26$"			return DEFAULT_CHARSET;"
"CharSequenceEncoder.java:120"$0$0$0$1$3$"		}"
"CharSequenceEncoder.java:121"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:122"$0$0$0$0$0$""
"CharSequenceEncoder.java:123"$0$0$0$0$0$""
"CharSequenceEncoder.java:124"$0$0$0$1$4$"	/**"
"CharSequenceEncoder.java:125"$0$0$0$9$73$"	 * Create a {@code CharSequenceEncoder} that supports only ""text/plain""."
"CharSequenceEncoder.java:126"$0$0$0$1$4$"	 */"
"CharSequenceEncoder.java:127"$0$0$0$5$52$"	public static CharSequenceEncoder textPlainOnly() {"
"CharSequenceEncoder.java:128"$0$0$0$6$81$"		return new CharSequenceEncoder(new MimeType(""text"", ""plain"", DEFAULT_CHARSET));"
"CharSequenceEncoder.java:129"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:130"$0$0$0$0$0$""
"CharSequenceEncoder.java:131"$0$0$0$1$4$"	/**"
"CharSequenceEncoder.java:132"$0$0$0$10$70$"	 * Create a {@code CharSequenceEncoder} that supports all MIME types."
"CharSequenceEncoder.java:133"$0$0$0$1$4$"	 */"
"CharSequenceEncoder.java:134"$0$0$0$5$51$"	public static CharSequenceEncoder allMimeTypes() {"
"CharSequenceEncoder.java:135"$0$0$0$7$100$"		return new CharSequenceEncoder(new MimeType(""text"", ""plain"", DEFAULT_CHARSET), MimeTypeUtils.ALL);"
"CharSequenceEncoder.java:136"$0$0$0$1$2$"	}"
"CharSequenceEncoder.java:137"$0$0$0$0$0$""
"CharSequenceEncoder.java:138"$0$0$0$1$1$"}"
"PatternMatchUtils.java:1"$0$0$0$1$2$"/*"
"PatternMatchUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"PatternMatchUtils.java:3"$0$0$0$1$2$" *"
"PatternMatchUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PatternMatchUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PatternMatchUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PatternMatchUtils.java:7"$0$0$0$1$2$" *"
"PatternMatchUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PatternMatchUtils.java:9"$0$0$0$1$2$" *"
"PatternMatchUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PatternMatchUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PatternMatchUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PatternMatchUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PatternMatchUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"PatternMatchUtils.java:15"$0$0$0$1$3$" */"
"PatternMatchUtils.java:16"$0$0$0$0$0$""
"PatternMatchUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"PatternMatchUtils.java:18"$0$0$0$0$0$""
"PatternMatchUtils.java:19"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PatternMatchUtils.java:20"$0$0$0$0$0$""
"PatternMatchUtils.java:21"$0$0$0$1$3$"/**"
"PatternMatchUtils.java:22"$0$0$0$10$65$" * Utility methods for simple pattern matching, in particular for"
"PatternMatchUtils.java:23"$0$0$0$9$62$" * Spring's typical ""xxx*"", ""*xxx"" and ""*xxx*"" pattern styles."
"PatternMatchUtils.java:24"$0$0$0$1$2$" *"
"PatternMatchUtils.java:25"$0$0$0$4$26$" * @author Juergen Hoeller"
"PatternMatchUtils.java:26"$0$0$0$3$13$" * @since 2.0"
"PatternMatchUtils.java:27"$0$0$0$1$3$" */"
"PatternMatchUtils.java:28"$0$0$0$5$41$"public abstract class PatternMatchUtils {"
"PatternMatchUtils.java:29"$0$0$0$0$0$""
"PatternMatchUtils.java:30"$0$0$0$1$4$"	/**"
"PatternMatchUtils.java:31"$0$0$0$12$77$"	 * Match a String against the given pattern, supporting the following simple"
"PatternMatchUtils.java:32"$0$0$0$11$74$"	 * pattern styles: ""xxx*"", ""*xxx"", ""*xxx*"" and ""xxx*yyy"" matches (with an"
"PatternMatchUtils.java:33"$0$0$0$11$67$"	 * arbitrary number of pattern parts), as well as direct equality."
"PatternMatchUtils.java:34"$0$0$0$8$47$"	 * @param pattern the pattern to match against"
"PatternMatchUtils.java:35"$0$0$0$7$34$"	 * @param str the String to match"
"PatternMatchUtils.java:36"$0$0$0$9$56$"	 * @return whether the String matches the given pattern"
"PatternMatchUtils.java:37"$0$0$0$1$4$"	 */"
"PatternMatchUtils.java:38"$0$0$0$10$84$"	public static boolean simpleMatch(@Nullable String pattern, @Nullable String str) {"
"PatternMatchUtils.java:39"$0$0$0$9$39$"		if (pattern == null || str == null) {"
"PatternMatchUtils.java:40"$0$0$0$2$16$"			return false;"
"PatternMatchUtils.java:41"$0$0$0$1$3$"		}"
"PatternMatchUtils.java:42"$0$0$0$0$0$""
"PatternMatchUtils.java:43"$0$0$0$4$40$"		int firstIndex = pattern.indexOf('*');"
"PatternMatchUtils.java:44"$0$0$0$5$25$"		if (firstIndex == -1) {"
"PatternMatchUtils.java:45"$0$0$0$2$30$"			return pattern.equals(str);"
"PatternMatchUtils.java:46"$0$0$0$1$3$"		}"
"PatternMatchUtils.java:47"$0$0$0$0$0$""
"PatternMatchUtils.java:48"$0$0$0$5$24$"		if (firstIndex == 0) {"
"PatternMatchUtils.java:49"$0$0$0$5$31$"			if (pattern.length() == 1) {"
"PatternMatchUtils.java:50"$0$0$0$2$16$"				return true;"
"PatternMatchUtils.java:51"$0$0$0$1$4$"			}"
"PatternMatchUtils.java:52"$0$0$0$5$43$"			int nextIndex = pattern.indexOf('*', 1);"
"PatternMatchUtils.java:53"$0$0$0$5$25$"			if (nextIndex == -1) {"
"PatternMatchUtils.java:54"$0$0$0$2$46$"				return str.endsWith(pattern.substring(1));"
"PatternMatchUtils.java:55"$0$0$0$1$4$"			}"
"PatternMatchUtils.java:56"$0$0$0$5$49$"			String part = pattern.substring(1, nextIndex);"
"PatternMatchUtils.java:57"$0$0$0$3$24$"			if (part.isEmpty()) {"
"PatternMatchUtils.java:58"$0$0$0$3$58$"				return simpleMatch(pattern.substring(nextIndex), str);"
"PatternMatchUtils.java:59"$0$0$0$1$4$"			}"
"PatternMatchUtils.java:60"$0$0$0$4$37$"			int partIndex = str.indexOf(part);"
"PatternMatchUtils.java:61"$0$0$0$5$28$"			while (partIndex != -1) {"
"PatternMatchUtils.java:62"$0$0$0$6$94$"				if (simpleMatch(pattern.substring(nextIndex), str.substring(partIndex + part.length()))) {"
"PatternMatchUtils.java:63"$0$0$0$2$17$"					return true;"
"PatternMatchUtils.java:64"$0$0$0$1$5$"				}"
"PatternMatchUtils.java:65"$0$0$0$6$49$"				partIndex = str.indexOf(part, partIndex + 1);"
"PatternMatchUtils.java:66"$0$0$0$1$4$"			}"
"PatternMatchUtils.java:67"$0$0$0$2$16$"			return false;"
"PatternMatchUtils.java:68"$0$0$0$1$3$"		}"
"PatternMatchUtils.java:69"$0$0$0$0$0$""
"PatternMatchUtils.java:70"$0$0$0$5$39$"		return (str.length() >= firstIndex &&"
"PatternMatchUtils.java:71"$0$0$0$4$76$"				pattern.substring(0, firstIndex).equals(str.substring(0, firstIndex)) &&"
"PatternMatchUtils.java:72"$0$0$0$2$75$"				simpleMatch(pattern.substring(firstIndex), str.substring(firstIndex)));"
"PatternMatchUtils.java:73"$0$0$0$1$2$"	}"
"PatternMatchUtils.java:74"$0$0$0$0$0$""
"PatternMatchUtils.java:75"$0$0$0$1$4$"	/**"
"PatternMatchUtils.java:76"$0$0$0$12$78$"	 * Match a String against the given patterns, supporting the following simple"
"PatternMatchUtils.java:77"$0$0$0$11$74$"	 * pattern styles: ""xxx*"", ""*xxx"", ""*xxx*"" and ""xxx*yyy"" matches (with an"
"PatternMatchUtils.java:78"$0$0$0$11$67$"	 * arbitrary number of pattern parts), as well as direct equality."
"PatternMatchUtils.java:79"$0$0$0$8$49$"	 * @param patterns the patterns to match against"
"PatternMatchUtils.java:80"$0$0$0$7$34$"	 * @param str the String to match"
"PatternMatchUtils.java:81"$0$0$0$11$64$"	 * @return whether the String matches any of the given patterns"
"PatternMatchUtils.java:82"$0$0$0$1$4$"	 */"
"PatternMatchUtils.java:83"$0$0$0$9$77$"	public static boolean simpleMatch(@Nullable String[] patterns, String str) {"
"PatternMatchUtils.java:84"$0$0$0$5$25$"		if (patterns != null) {"
"PatternMatchUtils.java:85"$0$0$0$6$36$"			for (String pattern : patterns) {"
"PatternMatchUtils.java:86"$0$0$0$4$36$"				if (simpleMatch(pattern, str)) {"
"PatternMatchUtils.java:87"$0$0$0$2$17$"					return true;"
"PatternMatchUtils.java:88"$0$0$0$1$5$"				}"
"PatternMatchUtils.java:89"$0$0$0$1$4$"			}"
"PatternMatchUtils.java:90"$0$0$0$1$3$"		}"
"PatternMatchUtils.java:91"$0$0$0$2$15$"		return false;"
"PatternMatchUtils.java:92"$0$0$0$1$2$"	}"
"PatternMatchUtils.java:93"$0$0$0$0$0$""
"PatternMatchUtils.java:94"$0$0$0$1$1$"}"
"SimpleCommandLinePropertySource.java:1"$0$0$0$1$2$"/*"
"SimpleCommandLinePropertySource.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"SimpleCommandLinePropertySource.java:3"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SimpleCommandLinePropertySource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SimpleCommandLinePropertySource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SimpleCommandLinePropertySource.java:7"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SimpleCommandLinePropertySource.java:9"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SimpleCommandLinePropertySource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SimpleCommandLinePropertySource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SimpleCommandLinePropertySource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SimpleCommandLinePropertySource.java:14"$0$0$0$5$33$" * limitations under the License."
"SimpleCommandLinePropertySource.java:15"$0$0$0$1$3$" */"
"SimpleCommandLinePropertySource.java:16"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"SimpleCommandLinePropertySource.java:18"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:19"$0$0$0$2$22$"import java.util.List;"
"SimpleCommandLinePropertySource.java:20"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:21"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SimpleCommandLinePropertySource.java:22"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"SimpleCommandLinePropertySource.java:23"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:24"$0$0$0$1$3$"/**"
"SimpleCommandLinePropertySource.java:25"$0$0$0$10$84$" * {@link CommandLinePropertySource} implementation backed by a simple String array."
"SimpleCommandLinePropertySource.java:26"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:27"$0$0$0$2$19$" * <h3>Purpose</h3>"
"SimpleCommandLinePropertySource.java:28"$0$0$0$10$88$" * <p>This {@code CommandLinePropertySource} implementation aims to provide the simplest"
"SimpleCommandLinePropertySource.java:29"$0$0$0$12$74$" * possible approach to parsing command line arguments. As with all {@code"
"SimpleCommandLinePropertySource.java:30"$0$0$0$10$89$" * CommandLinePropertySource} implementations, command line arguments are broken into two"
"SimpleCommandLinePropertySource.java:31"$0$0$0$9$83$" * distinct groups: <em>option arguments</em> and <em>non-option arguments</em>, as"
"SimpleCommandLinePropertySource.java:32"$0$0$0$9$61$" * described below <em>(some sections copied from Javadoc for"
"SimpleCommandLinePropertySource.java:33"$0$0$0$3$45$" * {@link SimpleCommandLineArgsParser})</em>:"
"SimpleCommandLinePropertySource.java:34"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:35"$0$0$0$5$41$" * <h3>Working with option arguments</h3>"
"SimpleCommandLinePropertySource.java:36"$0$0$0$9$55$" * <p>Option arguments must adhere to the exact syntax:"
"SimpleCommandLinePropertySource.java:37"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:38"$0$0$0$3$47$" * <pre class=""code"">--optName[=optValue]</pre>"
"SimpleCommandLinePropertySource.java:39"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:40"$0$0$0$15$76$" * <p>That is, options must be prefixed with ""{@code --}"" and may or may not"
"SimpleCommandLinePropertySource.java:41"$0$0$0$16$81$" * specify a value. If a value is specified, the name and value must be separated"
"SimpleCommandLinePropertySource.java:42"$0$0$0$13$79$" * <em>without spaces</em> by an equals sign (""=""). The value may optionally be"
"SimpleCommandLinePropertySource.java:43"$0$0$0$4$19$" * an empty string."
"SimpleCommandLinePropertySource.java:44"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:45"$0$0$0$6$46$" * <h4>Valid examples of option arguments</h4>"
"SimpleCommandLinePropertySource.java:46"$0$0$0$3$21$" * <pre class=""code"">"
"SimpleCommandLinePropertySource.java:47"$0$0$0$2$8$" * --foo"
"SimpleCommandLinePropertySource.java:48"$0$0$0$2$9$" * --foo="
"SimpleCommandLinePropertySource.java:49"$0$0$0$2$11$" * --foo="""""
"SimpleCommandLinePropertySource.java:50"$0$0$0$2$12$" * --foo=bar"
"SimpleCommandLinePropertySource.java:51"$0$0$0$4$23$" * --foo=""bar then baz"""
"SimpleCommandLinePropertySource.java:52"$0$0$0$2$26$" * --foo=bar,baz,biz</pre>"
"SimpleCommandLinePropertySource.java:53"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:54"$0$0$0$6$48$" * <h4>Invalid examples of option arguments</h4>"
"SimpleCommandLinePropertySource.java:55"$0$0$0$3$21$" * <pre class=""code"">"
"SimpleCommandLinePropertySource.java:56"$0$0$0$2$7$" * -foo"
"SimpleCommandLinePropertySource.java:57"$0$0$0$3$12$" * --foo bar"
"SimpleCommandLinePropertySource.java:58"$0$0$0$4$14$" * --foo = bar"
"SimpleCommandLinePropertySource.java:59"$0$0$0$4$38$" * --foo=bar --foo=baz --foo=biz</pre>"
"SimpleCommandLinePropertySource.java:60"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:61"$0$0$0$5$45$" * <h3>Working with non-option arguments</h3>"
"SimpleCommandLinePropertySource.java:62"$0$0$0$14$82$" * <p>Any and all arguments specified at the command line without the ""{@code --}"""
"SimpleCommandLinePropertySource.java:63"$0$0$0$12$80$" * option prefix will be considered as ""non-option arguments"" and made available"
"SimpleCommandLinePropertySource.java:64"$1$0$0$6$65$" * through the {@link CommandLineArgs#getNonOptionArgs()} method."
"SimpleCommandLinePropertySource.java:65"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:66"$0$0$0$3$25$" * <h3>Typical usage</h3>"
"SimpleCommandLinePropertySource.java:67"$0$0$0$3$21$" * <pre class=""code"">"
"SimpleCommandLinePropertySource.java:68"$0$0$0$7$43$" * public static void main(String[] args) {"
"SimpleCommandLinePropertySource.java:69"$0$0$0$6$72$" *     PropertySource<?> ps = new SimpleCommandLinePropertySource(args);"
"SimpleCommandLinePropertySource.java:70"$0$0$0$3$13$" *     // ..."
"SimpleCommandLinePropertySource.java:71"$0$0$0$2$10$" * }</pre>"
"SimpleCommandLinePropertySource.java:72"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:73"$0$0$0$9$77$" * See {@link CommandLinePropertySource} for complete general usage examples."
"SimpleCommandLinePropertySource.java:74"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:75"$0$0$0$4$29$" * <h3>Beyond the basics</h3>"
"SimpleCommandLinePropertySource.java:76"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:77"$0$0$0$11$80$" * <p>When more fully-featured command line parsing is necessary, consider using"
"SimpleCommandLinePropertySource.java:78"$0$0$0$9$76$" * the provided {@link JOptCommandLinePropertySource}, or implement your own"
"SimpleCommandLinePropertySource.java:79"$0$0$0$11$85$" * {@code CommandLinePropertySource} against the command line parsing library of your"
"SimpleCommandLinePropertySource.java:80"$0$0$0$2$10$" * choice."
"SimpleCommandLinePropertySource.java:81"$0$0$0$1$2$" *"
"SimpleCommandLinePropertySource.java:82"$0$0$0$4$22$" * @author Chris Beams"
"SimpleCommandLinePropertySource.java:83"$0$0$0$3$13$" * @since 3.1"
"SimpleCommandLinePropertySource.java:84"$0$0$0$3$33$" * @see CommandLinePropertySource"
"SimpleCommandLinePropertySource.java:85"$0$0$0$3$37$" * @see JOptCommandLinePropertySource"
"SimpleCommandLinePropertySource.java:86"$0$0$0$1$3$" */"
"SimpleCommandLinePropertySource.java:87"$0$0$0$6$97$"public class SimpleCommandLinePropertySource extends CommandLinePropertySource<CommandLineArgs> {"
"SimpleCommandLinePropertySource.java:88"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:89"$0$0$0$1$4$"	/**"
"SimpleCommandLinePropertySource.java:90"$0$0$0$10$80$"	 * Create a new {@code SimpleCommandLinePropertySource} having the default name"
"SimpleCommandLinePropertySource.java:91"$0$0$0$12$71$"	 * and backed by the given {@code String[]} of command line arguments."
"SimpleCommandLinePropertySource.java:92"$0$0$0$3$68$"	 * @see CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME"
"SimpleCommandLinePropertySource.java:93"$0$0$0$3$68$"	 * @see CommandLinePropertySource#CommandLinePropertySource(Object)"
"SimpleCommandLinePropertySource.java:94"$0$0$0$1$4$"	 */"
"SimpleCommandLinePropertySource.java:95"$0$0$0$4$57$"	public SimpleCommandLinePropertySource(String... args) {"
"SimpleCommandLinePropertySource.java:96"$0$0$0$2$55$"		super(new SimpleCommandLineArgsParser().parse(args));"
"SimpleCommandLinePropertySource.java:97"$0$0$0$1$2$"	}"
"SimpleCommandLinePropertySource.java:98"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:99"$0$0$0$1$4$"	/**"
"SimpleCommandLinePropertySource.java:100"$0$0$0$10$78$"	 * Create a new {@code SimpleCommandLinePropertySource} having the given name"
"SimpleCommandLinePropertySource.java:101"$0$0$0$12$71$"	 * and backed by the given {@code String[]} of command line arguments."
"SimpleCommandLinePropertySource.java:102"$0$0$0$1$4$"	 */"
"SimpleCommandLinePropertySource.java:103"$0$0$0$6$69$"	public SimpleCommandLinePropertySource(String name, String[] args) {"
"SimpleCommandLinePropertySource.java:104"$0$0$0$3$61$"		super(name, new SimpleCommandLineArgsParser().parse(args));"
"SimpleCommandLinePropertySource.java:105"$0$0$0$1$2$"	}"
"SimpleCommandLinePropertySource.java:106"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:107"$0$0$0$1$4$"	/**"
"SimpleCommandLinePropertySource.java:108"$0$0$0$9$52$"	 * Get the property names for the option arguments."
"SimpleCommandLinePropertySource.java:109"$0$0$0$1$4$"	 */"
"SimpleCommandLinePropertySource.java:110"$0$0$0$1$10$"	@Override"
"SimpleCommandLinePropertySource.java:111"$1$0$0$4$37$"	public String[] getPropertyNames() {"
"SimpleCommandLinePropertySource.java:112"$1$0$0$2$65$"		return StringUtils.toStringArray(this.source.getOptionNames());"
"SimpleCommandLinePropertySource.java:113"$0$0$0$1$2$"	}"
"SimpleCommandLinePropertySource.java:114"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:115"$0$0$0$1$10$"	@Override"
"SimpleCommandLinePropertySource.java:116"$0$0$0$5$48$"	protected boolean containsOption(String name) {"
"SimpleCommandLinePropertySource.java:117"$0$0$0$2$42$"		return this.source.containsOption(name);"
"SimpleCommandLinePropertySource.java:118"$0$0$0$1$2$"	}"
"SimpleCommandLinePropertySource.java:119"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:120"$0$0$0$1$10$"	@Override"
"SimpleCommandLinePropertySource.java:121"$0$0$0$1$10$"	@Nullable"
"SimpleCommandLinePropertySource.java:122"$1$0$0$5$54$"	protected List<String> getOptionValues(String name) {"
"SimpleCommandLinePropertySource.java:123"$1$0$0$2$43$"		return this.source.getOptionValues(name);"
"SimpleCommandLinePropertySource.java:124"$0$0$0$1$2$"	}"
"SimpleCommandLinePropertySource.java:125"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:126"$0$0$0$1$10$"	@Override"
"SimpleCommandLinePropertySource.java:127"$1$0$0$4$44$"	protected List<String> getNonOptionArgs() {"
"SimpleCommandLinePropertySource.java:128"$1$0$0$2$40$"		return this.source.getNonOptionArgs();"
"SimpleCommandLinePropertySource.java:129"$0$0$0$1$2$"	}"
"SimpleCommandLinePropertySource.java:130"$0$0$0$0$0$""
"SimpleCommandLinePropertySource.java:131"$0$0$0$1$1$"}"
"ObjectUtils.java:1"$0$0$0$1$2$"/*"
"ObjectUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ObjectUtils.java:3"$0$0$0$1$2$" *"
"ObjectUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ObjectUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ObjectUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ObjectUtils.java:7"$0$0$0$1$2$" *"
"ObjectUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ObjectUtils.java:9"$0$0$0$1$2$" *"
"ObjectUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ObjectUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ObjectUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ObjectUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ObjectUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"ObjectUtils.java:15"$0$0$0$1$3$" */"
"ObjectUtils.java:16"$0$0$0$0$0$""
"ObjectUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"ObjectUtils.java:18"$0$0$0$0$0$""
"ObjectUtils.java:19"$0$0$0$2$31$"import java.lang.reflect.Array;"
"ObjectUtils.java:20"$0$0$0$2$24$"import java.util.Arrays;"
"ObjectUtils.java:21"$0$0$0$2$28$"import java.util.Collection;"
"ObjectUtils.java:22"$0$0$0$2$21$"import java.util.Map;"
"ObjectUtils.java:23"$0$0$0$2$26$"import java.util.Optional;"
"ObjectUtils.java:24"$0$0$0$2$30$"import java.util.StringJoiner;"
"ObjectUtils.java:25"$0$0$0$0$0$""
"ObjectUtils.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ObjectUtils.java:27"$0$0$0$0$0$""
"ObjectUtils.java:28"$0$0$0$1$3$"/**"
"ObjectUtils.java:29"$0$0$0$5$40$" * Miscellaneous object utility methods."
"ObjectUtils.java:30"$0$0$0$1$2$" *"
"ObjectUtils.java:31"$0$0$0$8$51$" * <p>Mainly for internal use within the framework."
"ObjectUtils.java:32"$0$0$0$1$2$" *"
"ObjectUtils.java:33"$0$0$0$12$78$" * <p>Thanks to Alex Ruiz for contributing several enhancements to this class!"
"ObjectUtils.java:34"$0$0$0$1$2$" *"
"ObjectUtils.java:35"$0$0$0$4$26$" * @author Juergen Hoeller"
"ObjectUtils.java:36"$0$0$0$4$23$" * @author Keith Donald"
"ObjectUtils.java:37"$0$0$0$4$22$" * @author Rod Johnson"
"ObjectUtils.java:38"$0$0$0$4$21$" * @author Rob Harrop"
"ObjectUtils.java:39"$0$0$0$4$22$" * @author Chris Beams"
"ObjectUtils.java:40"$0$0$0$4$22$" * @author Sam Brannen"
"ObjectUtils.java:41"$0$0$0$3$20$" * @since 19.03.2004"
"ObjectUtils.java:42"$0$0$0$3$18$" * @see ClassUtils"
"ObjectUtils.java:43"$0$0$0$3$23$" * @see CollectionUtils"
"ObjectUtils.java:44"$0$0$0$3$19$" * @see StringUtils"
"ObjectUtils.java:45"$0$0$0$1$3$" */"
"ObjectUtils.java:46"$0$0$0$5$35$"public abstract class ObjectUtils {"
"ObjectUtils.java:47"$0$0$0$0$0$""
"ObjectUtils.java:48"$0$0$0$7$43$"	private static final int INITIAL_HASH = 7;"
"ObjectUtils.java:49"$0$0$0$7$42$"	private static final int MULTIPLIER = 31;"
"ObjectUtils.java:50"$0$0$0$0$0$""
"ObjectUtils.java:51"$0$0$0$7$47$"	private static final String EMPTY_STRING = """";"
"ObjectUtils.java:52"$0$0$0$7$50$"	private static final String NULL_STRING = ""null"";"
"ObjectUtils.java:53"$0$0$0$7$47$"	private static final String ARRAY_START = ""{"";"
"ObjectUtils.java:54"$0$0$0$7$45$"	private static final String ARRAY_END = ""}"";"
"ObjectUtils.java:55"$0$0$0$9$67$"	private static final String EMPTY_ARRAY = ARRAY_START + ARRAY_END;"
"ObjectUtils.java:56"$0$0$0$8$60$"	private static final String ARRAY_ELEMENT_SEPARATOR = "", "";"
"ObjectUtils.java:57"$0$0$0$8$66$"	private static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];"
"ObjectUtils.java:58"$0$0$0$0$0$""
"ObjectUtils.java:59"$0$0$0$0$0$""
"ObjectUtils.java:60"$0$0$0$1$4$"	/**"
"ObjectUtils.java:61"$0$0$0$10$62$"	 * Return whether the given throwable is a checked exception:"
"ObjectUtils.java:62"$0$0$0$9$53$"	 * that is, neither a RuntimeException nor an Error."
"ObjectUtils.java:63"$0$0$0$7$36$"	 * @param ex the throwable to check"
"ObjectUtils.java:64"$0$0$0$9$56$"	 * @return whether the throwable is a checked exception"
"ObjectUtils.java:65"$0$0$0$3$28$"	 * @see java.lang.Exception"
"ObjectUtils.java:66"$0$0$0$3$35$"	 * @see java.lang.RuntimeException"
"ObjectUtils.java:67"$0$0$0$3$24$"	 * @see java.lang.Error"
"ObjectUtils.java:68"$0$0$0$1$4$"	 */"
"ObjectUtils.java:69"$0$0$0$6$57$"	public static boolean isCheckedException(Throwable ex) {"
"ObjectUtils.java:70"$0$0$0$8$66$"		return !(ex instanceof RuntimeException || ex instanceof Error);"
"ObjectUtils.java:71"$0$0$0$1$2$"	}"
"ObjectUtils.java:72"$0$0$0$0$0$""
"ObjectUtils.java:73"$0$0$0$1$4$"	/**"
"ObjectUtils.java:74"$0$0$0$11$70$"	 * Check whether the given exception is compatible with the specified"
"ObjectUtils.java:75"$0$0$0$9$52$"	 * exception types, as declared in a throws clause."
"ObjectUtils.java:76"$0$0$0$7$36$"	 * @param ex the exception to check"
"ObjectUtils.java:77"$0$0$0$11$79$"	 * @param declaredExceptions the exception types declared in the throws clause"
"ObjectUtils.java:78"$0$0$0$8$53$"	 * @return whether the given exception is compatible"
"ObjectUtils.java:79"$0$0$0$1$4$"	 */"
"ObjectUtils.java:80"$0$0$0$9$109$"	public static boolean isCompatibleWithThrowsClause(Throwable ex, @Nullable Class<?>... declaredExceptions) {"
"ObjectUtils.java:81"$0$0$0$3$32$"		if (!isCheckedException(ex)) {"
"ObjectUtils.java:82"$0$0$0$2$15$"			return true;"
"ObjectUtils.java:83"$0$0$0$1$3$"		}"
"ObjectUtils.java:84"$0$0$0$5$35$"		if (declaredExceptions != null) {"
"ObjectUtils.java:85"$0$0$0$6$58$"			for (Class<?> declaredException : declaredExceptions) {"
"ObjectUtils.java:86"$0$0$0$3$43$"				if (declaredException.isInstance(ex)) {"
"ObjectUtils.java:87"$0$0$0$2$17$"					return true;"
"ObjectUtils.java:88"$0$0$0$1$5$"				}"
"ObjectUtils.java:89"$0$0$0$1$4$"			}"
"ObjectUtils.java:90"$0$0$0$1$3$"		}"
"ObjectUtils.java:91"$0$0$0$2$15$"		return false;"
"ObjectUtils.java:92"$0$0$0$1$2$"	}"
"ObjectUtils.java:93"$0$0$0$0$0$""
"ObjectUtils.java:94"$0$0$0$1$4$"	/**"
"ObjectUtils.java:95"$0$0$0$9$51$"	 * Determine whether the given object is an array:"
"ObjectUtils.java:96"$0$0$0$9$48$"	 * either an Object array or a primitive array."
"ObjectUtils.java:97"$0$0$0$7$34$"	 * @param obj the object to check"
"ObjectUtils.java:98"$0$0$0$1$4$"	 */"
"ObjectUtils.java:99"$0$0$0$7$54$"	public static boolean isArray(@Nullable Object obj) {"
"ObjectUtils.java:100"$1$0$0$6$51$"		return (obj != null && obj.getClass().isArray());"
"ObjectUtils.java:101"$0$0$0$1$2$"	}"
"ObjectUtils.java:102"$0$0$0$0$0$""
"ObjectUtils.java:103"$0$0$0$1$4$"	/**"
"ObjectUtils.java:104"$0$0$0$8$47$"	 * Determine whether the given array is empty:"
"ObjectUtils.java:105"$0$0$0$8$40$"	 * i.e. {@code null} or of zero length."
"ObjectUtils.java:106"$0$0$0$7$35$"	 * @param array the array to check"
"ObjectUtils.java:107"$0$0$0$3$25$"	 * @see #isEmpty(Object)"
"ObjectUtils.java:108"$0$0$0$1$4$"	 */"
"ObjectUtils.java:109"$0$0$0$7$58$"	public static boolean isEmpty(@Nullable Object[] array) {"
"ObjectUtils.java:110"$0$0$0$8$46$"		return (array == null || array.length == 0);"
"ObjectUtils.java:111"$0$0$0$1$2$"	}"
"ObjectUtils.java:112"$0$0$0$0$0$""
"ObjectUtils.java:113"$0$0$0$1$4$"	/**"
"ObjectUtils.java:114"$0$0$0$8$48$"	 * Determine whether the given object is empty."
"ObjectUtils.java:115"$0$0$0$8$55$"	 * <p>This method supports the following object types."
"ObjectUtils.java:116"$0$0$0$2$8$"	 * <ul>"
"ObjectUtils.java:117"$0$0$0$8$75$"	 * <li>{@code Optional}: considered empty if {@link Optional#empty()}</li>"
"ObjectUtils.java:118"$0$0$0$10$66$"	 * <li>{@code Array}: considered empty if its length is zero</li>"
"ObjectUtils.java:119"$0$0$0$10$73$"	 * <li>{@link CharSequence}: considered empty if its length is zero</li>"
"ObjectUtils.java:120"$0$0$0$7$74$"	 * <li>{@link Collection}: delegates to {@link Collection#isEmpty()}</li>"
"ObjectUtils.java:121"$0$0$0$7$60$"	 * <li>{@link Map}: delegates to {@link Map#isEmpty()}</li>"
"ObjectUtils.java:122"$0$0$0$2$9$"	 * </ul>"
"ObjectUtils.java:123"$0$0$0$13$72$"	 * <p>If the given object is non-null and not one of the aforementioned"
"ObjectUtils.java:124"$0$0$0$8$55$"	 * supported types, this method returns {@code false}."
"ObjectUtils.java:125"$0$0$0$7$34$"	 * @param obj the object to check"
"ObjectUtils.java:126"$0$0$0$12$72$"	 * @return {@code true} if the object is {@code null} or <em>empty</em>"
"ObjectUtils.java:127"$0$0$0$3$14$"	 * @since 4.2"
"ObjectUtils.java:128"$0$0$0$3$29$"	 * @see Optional#isPresent()"
"ObjectUtils.java:129"$0$0$0$3$38$"	 * @see ObjectUtils#isEmpty(Object[])"
"ObjectUtils.java:130"$0$0$0$3$44$"	 * @see StringUtils#hasLength(CharSequence)"
"ObjectUtils.java:131"$0$0$0$3$36$"	 * @see StringUtils#isEmpty(Object)"
"ObjectUtils.java:132"$0$0$0$3$54$"	 * @see CollectionUtils#isEmpty(java.util.Collection)"
"ObjectUtils.java:133"$0$0$0$3$47$"	 * @see CollectionUtils#isEmpty(java.util.Map)"
"ObjectUtils.java:134"$0$0$0$1$4$"	 */"
"ObjectUtils.java:135"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"ObjectUtils.java:136"$0$0$0$7$54$"	public static boolean isEmpty(@Nullable Object obj) {"
"ObjectUtils.java:137"$0$0$0$5$20$"		if (obj == null) {"
"ObjectUtils.java:138"$0$0$0$2$15$"			return true;"
"ObjectUtils.java:139"$0$0$0$1$3$"		}"
"ObjectUtils.java:140"$0$0$0$0$0$""
"ObjectUtils.java:141"$0$0$0$5$32$"		if (obj instanceof Optional) {"
"ObjectUtils.java:142"$0$0$0$3$40$"			return !((Optional) obj).isPresent();"
"ObjectUtils.java:143"$0$0$0$1$3$"		}"
"ObjectUtils.java:144"$0$0$0$5$36$"		if (obj instanceof CharSequence) {"
"ObjectUtils.java:145"$0$0$0$5$45$"			return ((CharSequence) obj).length() == 0;"
"ObjectUtils.java:146"$0$0$0$1$3$"		}"
"ObjectUtils.java:147"$1$0$0$3$33$"		if (obj.getClass().isArray()) {"
"ObjectUtils.java:148"$1$0$0$4$36$"			return Array.getLength(obj) == 0;"
"ObjectUtils.java:149"$0$0$0$1$3$"		}"
"ObjectUtils.java:150"$0$0$0$5$34$"		if (obj instanceof Collection) {"
"ObjectUtils.java:151"$0$0$0$3$39$"			return ((Collection) obj).isEmpty();"
"ObjectUtils.java:152"$0$0$0$1$3$"		}"
"ObjectUtils.java:153"$0$0$0$5$27$"		if (obj instanceof Map) {"
"ObjectUtils.java:154"$0$0$0$3$32$"			return ((Map) obj).isEmpty();"
"ObjectUtils.java:155"$0$0$0$1$3$"		}"
"ObjectUtils.java:156"$0$0$0$0$0$""
"ObjectUtils.java:157"$0$0$1$2$9$"		// else"
"ObjectUtils.java:158"$0$0$0$2$15$"		return false;"
"ObjectUtils.java:159"$0$0$0$1$2$"	}"
"ObjectUtils.java:160"$0$0$0$0$0$""
"ObjectUtils.java:161"$0$0$0$1$4$"	/**"
"ObjectUtils.java:162"$0$0$0$11$78$"	 * Unwrap the given object which is potentially a {@link java.util.Optional}."
"ObjectUtils.java:163"$0$0$0$6$35$"	 * @param obj the candidate object"
"ObjectUtils.java:164"$0$0$0$12$75$"	 * @return either the value held within the {@code Optional}, {@code null}"
"ObjectUtils.java:165"$0$0$0$13$70$"	 * if the {@code Optional} is empty, or simply the given object as-is"
"ObjectUtils.java:166"$0$0$0$3$14$"	 * @since 5.0"
"ObjectUtils.java:167"$0$0$0$1$4$"	 */"
"ObjectUtils.java:168"$0$0$0$1$10$"	@Nullable"
"ObjectUtils.java:169"$0$0$0$7$60$"	public static Object unwrapOptional(@Nullable Object obj) {"
"ObjectUtils.java:170"$0$0$0$5$32$"		if (obj instanceof Optional) {"
"ObjectUtils.java:171"$0$0$0$5$44$"			Optional<?> optional = (Optional<?>) obj;"
"ObjectUtils.java:172"$0$0$0$3$31$"			if (!optional.isPresent()) {"
"ObjectUtils.java:173"$0$0$0$2$16$"				return null;"
"ObjectUtils.java:174"$0$0$0$1$4$"			}"
"ObjectUtils.java:175"$1$0$0$4$34$"			Object result = optional.get();"
"ObjectUtils.java:176"$0$0$0$8$92$"			Assert.isTrue(!(result instanceof Optional), ""Multi-level Optional usage not supported"");"
"ObjectUtils.java:177"$0$0$0$2$17$"			return result;"
"ObjectUtils.java:178"$0$0$0$1$3$"		}"
"ObjectUtils.java:179"$0$0$0$2$13$"		return obj;"
"ObjectUtils.java:180"$0$0$0$1$2$"	}"
"ObjectUtils.java:181"$0$0$0$0$0$""
"ObjectUtils.java:182"$0$0$0$1$4$"	/**"
"ObjectUtils.java:183"$0$0$0$10$61$"	 * Check whether the given array contains the given element."
"ObjectUtils.java:184"$0$0$0$11$57$"	 * @param array the array to check (may be {@code null},"
"ObjectUtils.java:185"$0$0$0$12$64$"	 * in which case the return value will always be {@code false})"
"ObjectUtils.java:186"$0$0$0$8$43$"	 * @param element the element to check for"
"ObjectUtils.java:187"$0$0$0$12$65$"	 * @return whether the element has been found in the given array"
"ObjectUtils.java:188"$0$0$0$1$4$"	 */"
"ObjectUtils.java:189"$0$0$0$9$82$"	public static boolean containsElement(@Nullable Object[] array, Object element) {"
"ObjectUtils.java:190"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:191"$0$0$0$2$16$"			return false;"
"ObjectUtils.java:192"$0$0$0$1$3$"		}"
"ObjectUtils.java:193"$0$0$0$6$33$"		for (Object arrayEle : array) {"
"ObjectUtils.java:194"$0$0$0$4$43$"			if (nullSafeEquals(arrayEle, element)) {"
"ObjectUtils.java:195"$0$0$0$2$16$"				return true;"
"ObjectUtils.java:196"$0$0$0$1$4$"			}"
"ObjectUtils.java:197"$0$0$0$1$3$"		}"
"ObjectUtils.java:198"$0$0$0$2$15$"		return false;"
"ObjectUtils.java:199"$0$0$0$1$2$"	}"
"ObjectUtils.java:200"$0$0$0$0$0$""
"ObjectUtils.java:201"$0$0$0$1$4$"	/**"
"ObjectUtils.java:202"$0$0$0$16$92$"	 * Check whether the given array of enum constants contains a constant with the given name,"
"ObjectUtils.java:203"$0$0$0$7$43$"	 * ignoring case when determining a match."
"ObjectUtils.java:204"$0$0$0$13$94$"	 * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}"
"ObjectUtils.java:205"$0$0$0$15$80$"	 * @param constant the constant name to find (must not be null or empty string)"
"ObjectUtils.java:206"$0$0$0$12$66$"	 * @return whether the constant has been found in the given array"
"ObjectUtils.java:207"$0$0$0$1$4$"	 */"
"ObjectUtils.java:208"$0$0$0$8$80$"	public static boolean containsConstant(Enum<?>[] enumValues, String constant) {"
"ObjectUtils.java:209"$0$0$0$4$55$"		return containsConstant(enumValues, constant, false);"
"ObjectUtils.java:210"$0$0$0$1$2$"	}"
"ObjectUtils.java:211"$0$0$0$0$0$""
"ObjectUtils.java:212"$0$0$0$1$4$"	/**"
"ObjectUtils.java:213"$0$0$0$16$92$"	 * Check whether the given array of enum constants contains a constant with the given name."
"ObjectUtils.java:214"$0$0$0$13$94$"	 * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}"
"ObjectUtils.java:215"$0$0$0$15$80$"	 * @param constant the constant name to find (must not be null or empty string)"
"ObjectUtils.java:216"$0$0$0$11$75$"	 * @param caseSensitive whether case is significant in determining a match"
"ObjectUtils.java:217"$0$0$0$12$66$"	 * @return whether the constant has been found in the given array"
"ObjectUtils.java:218"$0$0$0$1$4$"	 */"
"ObjectUtils.java:219"$0$0$0$10$103$"	public static boolean containsConstant(Enum<?>[] enumValues, String constant, boolean caseSensitive) {"
"ObjectUtils.java:220"$0$0$0$6$40$"		for (Enum<?> candidate : enumValues) {"
"ObjectUtils.java:221"$0$0$0$5$62$"			if (caseSensitive ? candidate.toString().equals(constant) :"
"ObjectUtils.java:222"$0$0$0$2$55$"					candidate.toString().equalsIgnoreCase(constant)) {"
"ObjectUtils.java:223"$0$0$0$2$16$"				return true;"
"ObjectUtils.java:224"$0$0$0$1$4$"			}"
"ObjectUtils.java:225"$0$0$0$1$3$"		}"
"ObjectUtils.java:226"$0$0$0$2$15$"		return false;"
"ObjectUtils.java:227"$0$0$0$1$2$"	}"
"ObjectUtils.java:228"$0$0$0$0$0$""
"ObjectUtils.java:229"$0$0$0$1$4$"	/**"
"ObjectUtils.java:230"$0$0$0$8$72$"	 * Case insensitive alternative to {@link Enum#valueOf(Class, String)}."
"ObjectUtils.java:231"$0$0$0$7$37$"	 * @param <E> the concrete Enum type"
"ObjectUtils.java:232"$0$0$0$15$100$"	 * @param enumValues the array of all Enum constants in question, usually per {@code Enum.values()}"
"ObjectUtils.java:233"$1$0$0$11$57$"	 * @param constant the constant to get the enum value of"
"ObjectUtils.java:234"$0$0$0$14$90$"	 * @throws IllegalArgumentException if the given constant is not found in the given array"
"ObjectUtils.java:235"$0$0$0$15$101$"	 * of enum values. Use {@link #containsConstant(Enum[], String)} as a guard to avoid this exception."
"ObjectUtils.java:236"$0$0$0$1$4$"	 */"
"ObjectUtils.java:237"$0$0$0$11$94$"	public static <E extends Enum<?>> E caseInsensitiveValueOf(E[] enumValues, String constant) {"
"ObjectUtils.java:238"$0$0$0$6$34$"		for (E candidate : enumValues) {"
"ObjectUtils.java:239"$0$0$0$3$57$"			if (candidate.toString().equalsIgnoreCase(constant)) {"
"ObjectUtils.java:240"$0$0$0$2$21$"				return candidate;"
"ObjectUtils.java:241"$0$0$0$1$4$"			}"
"ObjectUtils.java:242"$0$0$0$1$3$"		}"
"ObjectUtils.java:243"$0$0$0$16$97$"		throw new IllegalArgumentException(""Constant ["" + constant + ""] does not exist in enum type "" +"
"ObjectUtils.java:244"$3$0$0$1$56$"				enumValues.getClass().getComponentType().getName());"
"ObjectUtils.java:245"$0$0$0$1$2$"	}"
"ObjectUtils.java:246"$0$0$0$0$0$""
"ObjectUtils.java:247"$0$0$0$1$4$"	/**"
"ObjectUtils.java:248"$0$0$0$13$69$"	 * Append the given object to the given array, returning a new array"
"ObjectUtils.java:249"$0$0$0$11$65$"	 * consisting of the input array contents plus the given object."
"ObjectUtils.java:250"$0$0$0$12$61$"	 * @param array the array to append to (can be {@code null})"
"ObjectUtils.java:251"$0$0$0$7$35$"	 * @param obj the object to append"
"ObjectUtils.java:252"$0$0$0$13$74$"	 * @return the new array (of the same component type; never {@code null})"
"ObjectUtils.java:253"$0$0$0$1$4$"	 */"
"ObjectUtils.java:254"$0$0$0$14$92$"	public static <A, O extends A> A[] addObjectToArray(@Nullable A[] array, @Nullable O obj) {"
"ObjectUtils.java:255"$0$0$0$4$35$"		Class<?> compType = Object.class;"
"ObjectUtils.java:256"$0$0$0$5$22$"		if (array != null) {"
"ObjectUtils.java:257"$2$0$0$3$50$"			compType = array.getClass().getComponentType();"
"ObjectUtils.java:258"$0$0$0$1$3$"		}"
"ObjectUtils.java:259"$0$0$0$6$25$"		else if (obj != null) {"
"ObjectUtils.java:260"$1$0$0$3$29$"			compType = obj.getClass();"
"ObjectUtils.java:261"$0$0$0$1$3$"		}"
"ObjectUtils.java:262"$0$0$0$12$60$"		int newArrLength = (array != null ? array.length + 1 : 1);"
"ObjectUtils.java:263"$0$0$0$1$32$"		@SuppressWarnings(""unchecked"")"
"ObjectUtils.java:264"$0$0$0$6$63$"		A[] newArr = (A[]) Array.newInstance(compType, newArrLength);"
"ObjectUtils.java:265"$0$0$0$5$22$"		if (array != null) {"
"ObjectUtils.java:266"$0$0$0$5$55$"			System.arraycopy(array, 0, newArr, 0, array.length);"
"ObjectUtils.java:267"$0$0$0$1$3$"		}"
"ObjectUtils.java:268"$0$0$0$5$34$"		newArr[newArr.length - 1] = obj;"
"ObjectUtils.java:269"$0$0$0$2$16$"		return newArr;"
"ObjectUtils.java:270"$0$0$0$1$2$"	}"
"ObjectUtils.java:271"$0$0$0$0$0$""
"ObjectUtils.java:272"$0$0$0$1$4$"	/**"
"ObjectUtils.java:273"$0$0$0$13$66$"	 * Convert the given array (which may be a primitive array) to an"
"ObjectUtils.java:274"$0$0$0$9$61$"	 * object array (if necessary of primitive wrapper objects)."
"ObjectUtils.java:275"$0$0$0$11$58$"	 * <p>A {@code null} source value will be converted to an"
"ObjectUtils.java:276"$0$0$0$4$23$"	 * empty Object array."
"ObjectUtils.java:277"$0$0$0$7$51$"	 * @param source the (potentially primitive) array"
"ObjectUtils.java:278"$0$0$0$9$63$"	 * @return the corresponding object array (never {@code null})"
"ObjectUtils.java:279"$0$0$0$10$69$"	 * @throws IllegalArgumentException if the parameter is not an array"
"ObjectUtils.java:280"$0$0$0$1$4$"	 */"
"ObjectUtils.java:281"$0$0$0$7$64$"	public static Object[] toObjectArray(@Nullable Object source) {"
"ObjectUtils.java:282"$0$0$0$5$35$"		if (source instanceof Object[]) {"
"ObjectUtils.java:283"$0$0$0$3$28$"			return (Object[]) source;"
"ObjectUtils.java:284"$0$0$0$1$3$"		}"
"ObjectUtils.java:285"$0$0$0$5$23$"		if (source == null) {"
"ObjectUtils.java:286"$0$0$0$2$29$"			return EMPTY_OBJECT_ARRAY;"
"ObjectUtils.java:287"$0$0$0$1$3$"		}"
"ObjectUtils.java:288"$1$0$0$3$37$"		if (!source.getClass().isArray()) {"
"ObjectUtils.java:289"$0$0$0$10$75$"			throw new IllegalArgumentException(""Source is not an array: "" + source);"
"ObjectUtils.java:290"$0$0$0$1$3$"		}"
"ObjectUtils.java:291"$1$0$0$4$39$"		int length = Array.getLength(source);"
"ObjectUtils.java:292"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:293"$0$0$0$2$29$"			return EMPTY_OBJECT_ARRAY;"
"ObjectUtils.java:294"$0$0$0$1$3$"		}"
"ObjectUtils.java:295"$2$0$0$5$57$"		Class<?> wrapperType = Array.get(source, 0).getClass();"
"ObjectUtils.java:296"$0$0$0$6$72$"		Object[] newArray = (Object[]) Array.newInstance(wrapperType, length);"
"ObjectUtils.java:297"$0$0$0$10$36$"		for (int i = 0; i < length; i++) {"
"ObjectUtils.java:298"$1$0$0$4$38$"			newArray[i] = Array.get(source, i);"
"ObjectUtils.java:299"$0$0$0$1$3$"		}"
"ObjectUtils.java:300"$0$0$0$2$18$"		return newArray;"
"ObjectUtils.java:301"$0$0$0$1$2$"	}"
"ObjectUtils.java:302"$0$0$0$0$0$""
"ObjectUtils.java:303"$0$0$0$0$0$""
"ObjectUtils.java:304"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"ObjectUtils.java:305"$0$0$1$7$69$"	// Convenience methods for content-based equality/hash-code handling"
"ObjectUtils.java:306"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"ObjectUtils.java:307"$0$0$0$0$0$""
"ObjectUtils.java:308"$0$0$0$1$4$"	/**"
"ObjectUtils.java:309"$0$0$0$12$71$"	 * Determine if the given objects are equal, returning {@code true} if"
"ObjectUtils.java:310"$0$0$0$14$71$"	 * both are {@code null} or {@code false} if only one is {@code null}."
"ObjectUtils.java:311"$0$0$0$9$73$"	 * <p>Compares arrays with {@code Arrays.equals}, performing an equality"
"ObjectUtils.java:312"$0$0$0$12$70$"	 * check based on the array elements rather than the array reference."
"ObjectUtils.java:313"$0$0$0$7$37$"	 * @param o1 first Object to compare"
"ObjectUtils.java:314"$0$0$0$7$38$"	 * @param o2 second Object to compare"
"ObjectUtils.java:315"$0$0$0$8$47$"	 * @return whether the given objects are equal"
"ObjectUtils.java:316"$0$0$0$3$30$"	 * @see Object#equals(Object)"
"ObjectUtils.java:317"$0$0$0$3$32$"	 * @see java.util.Arrays#equals"
"ObjectUtils.java:318"$0$0$0$1$4$"	 */"
"ObjectUtils.java:319"$0$0$0$10$81$"	public static boolean nullSafeEquals(@Nullable Object o1, @Nullable Object o2) {"
"ObjectUtils.java:320"$0$0$0$5$17$"		if (o1 == o2) {"
"ObjectUtils.java:321"$0$0$0$2$15$"			return true;"
"ObjectUtils.java:322"$0$0$0$1$3$"		}"
"ObjectUtils.java:323"$0$0$0$9$33$"		if (o1 == null || o2 == null) {"
"ObjectUtils.java:324"$0$0$0$2$16$"			return false;"
"ObjectUtils.java:325"$0$0$0$1$3$"		}"
"ObjectUtils.java:326"$0$0$0$3$22$"		if (o1.equals(o2)) {"
"ObjectUtils.java:327"$0$0$0$2$15$"			return true;"
"ObjectUtils.java:328"$0$0$0$1$3$"		}"
"ObjectUtils.java:329"$2$0$0$5$59$"		if (o1.getClass().isArray() && o2.getClass().isArray()) {"
"ObjectUtils.java:330"$0$0$0$3$30$"			return arrayEquals(o1, o2);"
"ObjectUtils.java:331"$0$0$0$1$3$"		}"
"ObjectUtils.java:332"$0$0$0$2$15$"		return false;"
"ObjectUtils.java:333"$0$0$0$1$2$"	}"
"ObjectUtils.java:334"$0$0$0$0$0$""
"ObjectUtils.java:335"$0$0$0$1$4$"	/**"
"ObjectUtils.java:336"$0$0$0$11$79$"	 * Compare the given arrays with {@code Arrays.equals}, performing an equality"
"ObjectUtils.java:337"$0$0$0$12$70$"	 * check based on the array elements rather than the array reference."
"ObjectUtils.java:338"$0$0$0$7$36$"	 * @param o1 first array to compare"
"ObjectUtils.java:339"$0$0$0$7$37$"	 * @param o2 second array to compare"
"ObjectUtils.java:340"$0$0$0$8$47$"	 * @return whether the given objects are equal"
"ObjectUtils.java:341"$0$0$0$4$40$"	 * @see #nullSafeEquals(Object, Object)"
"ObjectUtils.java:342"$0$0$0$3$32$"	 * @see java.util.Arrays#equals"
"ObjectUtils.java:343"$0$0$0$1$4$"	 */"
"ObjectUtils.java:344"$0$0$0$8$59$"	private static boolean arrayEquals(Object o1, Object o2) {"
"ObjectUtils.java:345"$0$0$0$9$57$"		if (o1 instanceof Object[] && o2 instanceof Object[]) {"
"ObjectUtils.java:346"$0$0$0$5$54$"			return Arrays.equals((Object[]) o1, (Object[]) o2);"
"ObjectUtils.java:347"$0$0$0$1$3$"		}"
"ObjectUtils.java:348"$0$0$0$9$59$"		if (o1 instanceof boolean[] && o2 instanceof boolean[]) {"
"ObjectUtils.java:349"$0$0$0$5$56$"			return Arrays.equals((boolean[]) o1, (boolean[]) o2);"
"ObjectUtils.java:350"$0$0$0$1$3$"		}"
"ObjectUtils.java:351"$0$0$0$9$53$"		if (o1 instanceof byte[] && o2 instanceof byte[]) {"
"ObjectUtils.java:352"$0$0$0$5$50$"			return Arrays.equals((byte[]) o1, (byte[]) o2);"
"ObjectUtils.java:353"$0$0$0$1$3$"		}"
"ObjectUtils.java:354"$0$0$0$9$53$"		if (o1 instanceof char[] && o2 instanceof char[]) {"
"ObjectUtils.java:355"$0$0$0$5$50$"			return Arrays.equals((char[]) o1, (char[]) o2);"
"ObjectUtils.java:356"$0$0$0$1$3$"		}"
"ObjectUtils.java:357"$0$0$0$9$57$"		if (o1 instanceof double[] && o2 instanceof double[]) {"
"ObjectUtils.java:358"$0$0$0$5$54$"			return Arrays.equals((double[]) o1, (double[]) o2);"
"ObjectUtils.java:359"$0$0$0$1$3$"		}"
"ObjectUtils.java:360"$0$0$0$9$55$"		if (o1 instanceof float[] && o2 instanceof float[]) {"
"ObjectUtils.java:361"$0$0$0$5$52$"			return Arrays.equals((float[]) o1, (float[]) o2);"
"ObjectUtils.java:362"$0$0$0$1$3$"		}"
"ObjectUtils.java:363"$0$0$0$9$51$"		if (o1 instanceof int[] && o2 instanceof int[]) {"
"ObjectUtils.java:364"$0$0$0$5$48$"			return Arrays.equals((int[]) o1, (int[]) o2);"
"ObjectUtils.java:365"$0$0$0$1$3$"		}"
"ObjectUtils.java:366"$0$0$0$9$53$"		if (o1 instanceof long[] && o2 instanceof long[]) {"
"ObjectUtils.java:367"$0$0$0$5$50$"			return Arrays.equals((long[]) o1, (long[]) o2);"
"ObjectUtils.java:368"$0$0$0$1$3$"		}"
"ObjectUtils.java:369"$0$0$0$9$55$"		if (o1 instanceof short[] && o2 instanceof short[]) {"
"ObjectUtils.java:370"$0$0$0$5$52$"			return Arrays.equals((short[]) o1, (short[]) o2);"
"ObjectUtils.java:371"$0$0$0$1$3$"		}"
"ObjectUtils.java:372"$0$0$0$2$15$"		return false;"
"ObjectUtils.java:373"$0$0$0$1$2$"	}"
"ObjectUtils.java:374"$0$0$0$0$0$""
"ObjectUtils.java:375"$0$0$0$1$4$"	/**"
"ObjectUtils.java:376"$0$0$0$13$68$"	 * Return as hash code for the given object; typically the value of"
"ObjectUtils.java:377"$0$0$0$9$58$"	 * {@code Object#hashCode()}}. If the object is an array,"
"ObjectUtils.java:378"$0$0$0$11$68$"	 * this method will delegate to any of the {@code nullSafeHashCode}"
"ObjectUtils.java:379"$0$0$0$13$68$"	 * methods for arrays in this class. If the object is {@code null},"
"ObjectUtils.java:380"$0$0$0$5$26$"	 * this method returns 0."
"ObjectUtils.java:381"$0$0$0$3$26$"	 * @see Object#hashCode()"
"ObjectUtils.java:382"$0$0$0$3$36$"	 * @see #nullSafeHashCode(Object[])"
"ObjectUtils.java:383"$0$0$0$3$37$"	 * @see #nullSafeHashCode(boolean[])"
"ObjectUtils.java:384"$0$0$0$3$34$"	 * @see #nullSafeHashCode(byte[])"
"ObjectUtils.java:385"$0$0$0$3$34$"	 * @see #nullSafeHashCode(char[])"
"ObjectUtils.java:386"$0$0$0$3$36$"	 * @see #nullSafeHashCode(double[])"
"ObjectUtils.java:387"$0$0$0$3$35$"	 * @see #nullSafeHashCode(float[])"
"ObjectUtils.java:388"$0$0$0$3$33$"	 * @see #nullSafeHashCode(int[])"
"ObjectUtils.java:389"$0$0$0$3$34$"	 * @see #nullSafeHashCode(long[])"
"ObjectUtils.java:390"$0$0$0$3$35$"	 * @see #nullSafeHashCode(short[])"
"ObjectUtils.java:391"$0$0$0$1$4$"	 */"
"ObjectUtils.java:392"$0$0$0$7$59$"	public static int nullSafeHashCode(@Nullable Object obj) {"
"ObjectUtils.java:393"$0$0$0$5$20$"		if (obj == null) {"
"ObjectUtils.java:394"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:395"$0$0$0$1$3$"		}"
"ObjectUtils.java:396"$1$0$0$3$33$"		if (obj.getClass().isArray()) {"
"ObjectUtils.java:397"$0$0$0$5$33$"			if (obj instanceof Object[]) {"
"ObjectUtils.java:398"$0$0$0$3$44$"				return nullSafeHashCode((Object[]) obj);"
"ObjectUtils.java:399"$0$0$0$1$4$"			}"
"ObjectUtils.java:400"$0$0$0$5$34$"			if (obj instanceof boolean[]) {"
"ObjectUtils.java:401"$0$0$0$3$45$"				return nullSafeHashCode((boolean[]) obj);"
"ObjectUtils.java:402"$0$0$0$1$4$"			}"
"ObjectUtils.java:403"$0$0$0$5$31$"			if (obj instanceof byte[]) {"
"ObjectUtils.java:404"$0$0$0$3$42$"				return nullSafeHashCode((byte[]) obj);"
"ObjectUtils.java:405"$0$0$0$1$4$"			}"
"ObjectUtils.java:406"$0$0$0$5$31$"			if (obj instanceof char[]) {"
"ObjectUtils.java:407"$0$0$0$3$42$"				return nullSafeHashCode((char[]) obj);"
"ObjectUtils.java:408"$0$0$0$1$4$"			}"
"ObjectUtils.java:409"$0$0$0$5$33$"			if (obj instanceof double[]) {"
"ObjectUtils.java:410"$0$0$0$3$44$"				return nullSafeHashCode((double[]) obj);"
"ObjectUtils.java:411"$0$0$0$1$4$"			}"
"ObjectUtils.java:412"$0$0$0$5$32$"			if (obj instanceof float[]) {"
"ObjectUtils.java:413"$0$0$0$3$43$"				return nullSafeHashCode((float[]) obj);"
"ObjectUtils.java:414"$0$0$0$1$4$"			}"
"ObjectUtils.java:415"$0$0$0$5$30$"			if (obj instanceof int[]) {"
"ObjectUtils.java:416"$0$0$0$3$41$"				return nullSafeHashCode((int[]) obj);"
"ObjectUtils.java:417"$0$0$0$1$4$"			}"
"ObjectUtils.java:418"$0$0$0$5$31$"			if (obj instanceof long[]) {"
"ObjectUtils.java:419"$0$0$0$3$42$"				return nullSafeHashCode((long[]) obj);"
"ObjectUtils.java:420"$0$0$0$1$4$"			}"
"ObjectUtils.java:421"$0$0$0$5$32$"			if (obj instanceof short[]) {"
"ObjectUtils.java:422"$0$0$0$3$43$"				return nullSafeHashCode((short[]) obj);"
"ObjectUtils.java:423"$0$0$0$1$4$"			}"
"ObjectUtils.java:424"$0$0$0$1$3$"		}"
"ObjectUtils.java:425"$0$0$0$2$24$"		return obj.hashCode();"
"ObjectUtils.java:426"$0$0$0$1$2$"	}"
"ObjectUtils.java:427"$0$0$0$0$0$""
"ObjectUtils.java:428"$0$0$0$1$4$"	/**"
"ObjectUtils.java:429"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:430"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:431"$0$0$0$1$4$"	 */"
"ObjectUtils.java:432"$0$0$0$7$63$"	public static int nullSafeHashCode(@Nullable Object[] array) {"
"ObjectUtils.java:433"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:434"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:435"$0$0$0$1$3$"		}"
"ObjectUtils.java:436"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:437"$0$0$0$6$32$"		for (Object element : array) {"
"ObjectUtils.java:438"$0$0$0$7$56$"			hash = MULTIPLIER * hash + nullSafeHashCode(element);"
"ObjectUtils.java:439"$0$0$0$1$3$"		}"
"ObjectUtils.java:440"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:441"$0$0$0$1$2$"	}"
"ObjectUtils.java:442"$0$0$0$0$0$""
"ObjectUtils.java:443"$0$0$0$1$4$"	/**"
"ObjectUtils.java:444"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:445"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:446"$0$0$0$1$4$"	 */"
"ObjectUtils.java:447"$0$0$0$7$64$"	public static int nullSafeHashCode(@Nullable boolean[] array) {"
"ObjectUtils.java:448"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:449"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:450"$0$0$0$1$3$"		}"
"ObjectUtils.java:451"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:452"$0$0$0$6$33$"		for (boolean element : array) {"
"ObjectUtils.java:453"$0$0$0$7$56$"			hash = MULTIPLIER * hash + Boolean.hashCode(element);"
"ObjectUtils.java:454"$0$0$0$1$3$"		}"
"ObjectUtils.java:455"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:456"$0$0$0$1$2$"	}"
"ObjectUtils.java:457"$0$0$0$0$0$""
"ObjectUtils.java:458"$0$0$0$1$4$"	/**"
"ObjectUtils.java:459"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:460"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:461"$0$0$0$1$4$"	 */"
"ObjectUtils.java:462"$0$0$0$7$61$"	public static int nullSafeHashCode(@Nullable byte[] array) {"
"ObjectUtils.java:463"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:464"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:465"$0$0$0$1$3$"		}"
"ObjectUtils.java:466"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:467"$0$0$0$6$30$"		for (byte element : array) {"
"ObjectUtils.java:468"$0$0$0$7$38$"			hash = MULTIPLIER * hash + element;"
"ObjectUtils.java:469"$0$0$0$1$3$"		}"
"ObjectUtils.java:470"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:471"$0$0$0$1$2$"	}"
"ObjectUtils.java:472"$0$0$0$0$0$""
"ObjectUtils.java:473"$0$0$0$1$4$"	/**"
"ObjectUtils.java:474"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:475"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:476"$0$0$0$1$4$"	 */"
"ObjectUtils.java:477"$0$0$0$7$61$"	public static int nullSafeHashCode(@Nullable char[] array) {"
"ObjectUtils.java:478"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:479"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:480"$0$0$0$1$3$"		}"
"ObjectUtils.java:481"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:482"$0$0$0$6$30$"		for (char element : array) {"
"ObjectUtils.java:483"$0$0$0$7$38$"			hash = MULTIPLIER * hash + element;"
"ObjectUtils.java:484"$0$0$0$1$3$"		}"
"ObjectUtils.java:485"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:486"$0$0$0$1$2$"	}"
"ObjectUtils.java:487"$0$0$0$0$0$""
"ObjectUtils.java:488"$0$0$0$1$4$"	/**"
"ObjectUtils.java:489"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:490"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:491"$0$0$0$1$4$"	 */"
"ObjectUtils.java:492"$0$0$0$7$63$"	public static int nullSafeHashCode(@Nullable double[] array) {"
"ObjectUtils.java:493"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:494"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:495"$0$0$0$1$3$"		}"
"ObjectUtils.java:496"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:497"$0$0$0$6$32$"		for (double element : array) {"
"ObjectUtils.java:498"$0$0$0$7$55$"			hash = MULTIPLIER * hash + Double.hashCode(element);"
"ObjectUtils.java:499"$0$0$0$1$3$"		}"
"ObjectUtils.java:500"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:501"$0$0$0$1$2$"	}"
"ObjectUtils.java:502"$0$0$0$0$0$""
"ObjectUtils.java:503"$0$0$0$1$4$"	/**"
"ObjectUtils.java:504"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:505"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:506"$0$0$0$1$4$"	 */"
"ObjectUtils.java:507"$0$0$0$7$62$"	public static int nullSafeHashCode(@Nullable float[] array) {"
"ObjectUtils.java:508"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:509"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:510"$0$0$0$1$3$"		}"
"ObjectUtils.java:511"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:512"$0$0$0$6$31$"		for (float element : array) {"
"ObjectUtils.java:513"$0$0$0$7$54$"			hash = MULTIPLIER * hash + Float.hashCode(element);"
"ObjectUtils.java:514"$0$0$0$1$3$"		}"
"ObjectUtils.java:515"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:516"$0$0$0$1$2$"	}"
"ObjectUtils.java:517"$0$0$0$0$0$""
"ObjectUtils.java:518"$0$0$0$1$4$"	/**"
"ObjectUtils.java:519"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:520"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:521"$0$0$0$1$4$"	 */"
"ObjectUtils.java:522"$0$0$0$7$60$"	public static int nullSafeHashCode(@Nullable int[] array) {"
"ObjectUtils.java:523"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:524"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:525"$0$0$0$1$3$"		}"
"ObjectUtils.java:526"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:527"$0$0$0$6$29$"		for (int element : array) {"
"ObjectUtils.java:528"$0$0$0$7$38$"			hash = MULTIPLIER * hash + element;"
"ObjectUtils.java:529"$0$0$0$1$3$"		}"
"ObjectUtils.java:530"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:531"$0$0$0$1$2$"	}"
"ObjectUtils.java:532"$0$0$0$0$0$""
"ObjectUtils.java:533"$0$0$0$1$4$"	/**"
"ObjectUtils.java:534"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:535"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:536"$0$0$0$1$4$"	 */"
"ObjectUtils.java:537"$0$0$0$7$61$"	public static int nullSafeHashCode(@Nullable long[] array) {"
"ObjectUtils.java:538"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:539"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:540"$0$0$0$1$3$"		}"
"ObjectUtils.java:541"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:542"$0$0$0$6$30$"		for (long element : array) {"
"ObjectUtils.java:543"$0$0$0$7$53$"			hash = MULTIPLIER * hash + Long.hashCode(element);"
"ObjectUtils.java:544"$0$0$0$1$3$"		}"
"ObjectUtils.java:545"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:546"$0$0$0$1$2$"	}"
"ObjectUtils.java:547"$0$0$0$0$0$""
"ObjectUtils.java:548"$0$0$0$1$4$"	/**"
"ObjectUtils.java:549"$0$0$0$13$68$"	 * Return a hash code based on the contents of the specified array."
"ObjectUtils.java:550"$0$0$0$11$60$"	 * If {@code array} is {@code null}, this method returns 0."
"ObjectUtils.java:551"$0$0$0$1$4$"	 */"
"ObjectUtils.java:552"$0$0$0$7$62$"	public static int nullSafeHashCode(@Nullable short[] array) {"
"ObjectUtils.java:553"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:554"$0$0$0$2$12$"			return 0;"
"ObjectUtils.java:555"$0$0$0$1$3$"		}"
"ObjectUtils.java:556"$0$0$0$4$26$"		int hash = INITIAL_HASH;"
"ObjectUtils.java:557"$0$0$0$6$31$"		for (short element : array) {"
"ObjectUtils.java:558"$0$0$0$7$38$"			hash = MULTIPLIER * hash + element;"
"ObjectUtils.java:559"$0$0$0$1$3$"		}"
"ObjectUtils.java:560"$0$0$0$2$14$"		return hash;"
"ObjectUtils.java:561"$0$0$0$1$2$"	}"
"ObjectUtils.java:562"$0$0$0$0$0$""
"ObjectUtils.java:563"$0$0$0$1$4$"	/**"
"ObjectUtils.java:564"$0$0$0$8$64$"	 * Return the same value as {@link Boolean#hashCode(boolean)}}."
"ObjectUtils.java:565"$0$0$0$15$80$"	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant"
"ObjectUtils.java:566"$0$0$0$1$4$"	 */"
"ObjectUtils.java:567"$0$0$0$1$12$"	@Deprecated"
"ObjectUtils.java:568"$0$0$0$6$43$"	public static int hashCode(boolean bool) {"
"ObjectUtils.java:569"$0$0$0$2$32$"		return Boolean.hashCode(bool);"
"ObjectUtils.java:570"$0$0$0$1$2$"	}"
"ObjectUtils.java:571"$0$0$0$0$0$""
"ObjectUtils.java:572"$0$0$0$1$4$"	/**"
"ObjectUtils.java:573"$0$0$0$8$62$"	 * Return the same value as {@link Double#hashCode(double)}}."
"ObjectUtils.java:574"$0$0$0$15$80$"	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant"
"ObjectUtils.java:575"$0$0$0$1$4$"	 */"
"ObjectUtils.java:576"$0$0$0$1$12$"	@Deprecated"
"ObjectUtils.java:577"$0$0$0$6$41$"	public static int hashCode(double dbl) {"
"ObjectUtils.java:578"$0$0$0$2$30$"		return Double.hashCode(dbl);"
"ObjectUtils.java:579"$0$0$0$1$2$"	}"
"ObjectUtils.java:580"$0$0$0$0$0$""
"ObjectUtils.java:581"$0$0$0$1$4$"	/**"
"ObjectUtils.java:582"$0$0$0$8$60$"	 * Return the same value as {@link Float#hashCode(float)}}."
"ObjectUtils.java:583"$0$0$0$15$80$"	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant"
"ObjectUtils.java:584"$0$0$0$1$4$"	 */"
"ObjectUtils.java:585"$0$0$0$1$12$"	@Deprecated"
"ObjectUtils.java:586"$0$0$0$6$40$"	public static int hashCode(float flt) {"
"ObjectUtils.java:587"$0$0$0$2$29$"		return Float.hashCode(flt);"
"ObjectUtils.java:588"$0$0$0$1$2$"	}"
"ObjectUtils.java:589"$0$0$0$0$0$""
"ObjectUtils.java:590"$0$0$0$1$4$"	/**"
"ObjectUtils.java:591"$0$0$0$8$58$"	 * Return the same value as {@link Long#hashCode(long)}}."
"ObjectUtils.java:592"$0$0$0$15$80$"	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant"
"ObjectUtils.java:593"$0$0$0$1$4$"	 */"
"ObjectUtils.java:594"$0$0$0$1$12$"	@Deprecated"
"ObjectUtils.java:595"$0$0$0$6$39$"	public static int hashCode(long lng) {"
"ObjectUtils.java:596"$0$0$0$2$28$"		return Long.hashCode(lng);"
"ObjectUtils.java:597"$0$0$0$1$2$"	}"
"ObjectUtils.java:598"$0$0$0$0$0$""
"ObjectUtils.java:599"$0$0$0$0$0$""
"ObjectUtils.java:600"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"ObjectUtils.java:601"$0$0$1$6$43$"	// Convenience methods for toString output"
"ObjectUtils.java:602"$0$0$1$1$72$"	//---------------------------------------------------------------------"
"ObjectUtils.java:603"$0$0$0$0$0$""
"ObjectUtils.java:604"$0$0$0$1$4$"	/**"
"ObjectUtils.java:605"$0$0$0$10$67$"	 * Return a String representation of an object's overall identity."
"ObjectUtils.java:606"$0$0$0$9$47$"	 * @param obj the object (may be {@code null})"
"ObjectUtils.java:607"$0$0$0$8$59$"	 * @return the object's identity as String representation,"
"ObjectUtils.java:608"$0$0$0$11$53$"	 * or an empty String if the object was {@code null}"
"ObjectUtils.java:609"$0$0$0$1$4$"	 */"
"ObjectUtils.java:610"$0$0$0$7$62$"	public static String identityToString(@Nullable Object obj) {"
"ObjectUtils.java:611"$0$0$0$5$20$"		if (obj == null) {"
"ObjectUtils.java:612"$0$0$0$2$23$"			return EMPTY_STRING;"
"ObjectUtils.java:613"$0$0$0$1$3$"		}"
"ObjectUtils.java:614"$2$0$0$4$46$"		String className = obj.getClass().getName();"
"ObjectUtils.java:615"$1$0$0$4$55$"		String identityHexString = getIdentityHexString(obj);"
"ObjectUtils.java:616"$0$0$0$6$45$"		return className + '@' + identityHexString;"
"ObjectUtils.java:617"$0$0$0$1$2$"	}"
"ObjectUtils.java:618"$0$0$0$0$0$""
"ObjectUtils.java:619"$0$0$0$1$4$"	/**"
"ObjectUtils.java:620"$0$0$0$12$63$"	 * Return a hex String form of an object's identity hash code."
"ObjectUtils.java:621"$0$0$0$5$25$"	 * @param obj the object"
"ObjectUtils.java:622"$0$0$0$9$54$"	 * @return the object's identity code in hex notation"
"ObjectUtils.java:623"$0$0$0$1$4$"	 */"
"ObjectUtils.java:624"$1$0$0$6$56$"	public static String getIdentityHexString(Object obj) {"
"ObjectUtils.java:625"$0$0$0$2$59$"		return Integer.toHexString(System.identityHashCode(obj));"
"ObjectUtils.java:626"$0$0$0$1$2$"	}"
"ObjectUtils.java:627"$0$0$0$0$0$""
"ObjectUtils.java:628"$0$0$0$1$4$"	/**"
"ObjectUtils.java:629"$0$0$0$10$66$"	 * Return a content-based String representation if {@code obj} is"
"ObjectUtils.java:630"$0$0$0$9$56$"	 * not {@code null}; otherwise returns an empty String."
"ObjectUtils.java:631"$0$0$0$9$72$"	 * <p>Differs from {@link #nullSafeToString(Object)} in that it returns"
"ObjectUtils.java:632"$0$0$0$12$64$"	 * an empty String rather than ""null"" for a {@code null} value."
"ObjectUtils.java:633"$0$0$0$11$55$"	 * @param obj the object to build a display String for"
"ObjectUtils.java:634"$0$0$0$9$58$"	 * @return a display String representation of {@code obj}"
"ObjectUtils.java:635"$0$0$0$3$34$"	 * @see #nullSafeToString(Object)"
"ObjectUtils.java:636"$0$0$0$1$4$"	 */"
"ObjectUtils.java:637"$1$0$0$7$62$"	public static String getDisplayString(@Nullable Object obj) {"
"ObjectUtils.java:638"$0$0$0$5$20$"		if (obj == null) {"
"ObjectUtils.java:639"$0$0$0$2$23$"			return EMPTY_STRING;"
"ObjectUtils.java:640"$0$0$0$1$3$"		}"
"ObjectUtils.java:641"$0$0$0$2$31$"		return nullSafeToString(obj);"
"ObjectUtils.java:642"$0$0$0$1$2$"	}"
"ObjectUtils.java:643"$0$0$0$0$0$""
"ObjectUtils.java:644"$0$0$0$1$4$"	/**"
"ObjectUtils.java:645"$0$0$0$9$50$"	 * Determine the class name for the given object."
"ObjectUtils.java:646"$0$0$0$12$70$"	 * <p>Returns a {@code ""null""} String if {@code obj} is {@code null}."
"ObjectUtils.java:647"$0$0$0$11$61$"	 * @param obj the object to introspect (may be {@code null})"
"ObjectUtils.java:648"$0$0$0$6$40$"	 * @return the corresponding class name"
"ObjectUtils.java:649"$0$0$0$1$4$"	 */"
"ObjectUtils.java:650"$0$0$0$7$63$"	public static String nullSafeClassName(@Nullable Object obj) {"
"ObjectUtils.java:651"$2$0$0$8$64$"		return (obj != null ? obj.getClass().getName() : NULL_STRING);"
"ObjectUtils.java:652"$0$0$0$1$2$"	}"
"ObjectUtils.java:653"$0$0$0$0$0$""
"ObjectUtils.java:654"$0$0$0$1$4$"	/**"
"ObjectUtils.java:655"$0$0$0$9$59$"	 * Return a String representation of the specified Object."
"ObjectUtils.java:656"$0$0$0$13$74$"	 * <p>Builds a String representation of the contents in case of an array."
"ObjectUtils.java:657"$0$0$0$12$67$"	 * Returns a {@code ""null""} String if {@code obj} is {@code null}."
"ObjectUtils.java:658"$0$0$0$11$62$"	 * @param obj the object to build a String representation for"
"ObjectUtils.java:659"$0$0$0$8$50$"	 * @return a String representation of {@code obj}"
"ObjectUtils.java:660"$0$0$0$1$4$"	 */"
"ObjectUtils.java:661"$0$0$0$7$62$"	public static String nullSafeToString(@Nullable Object obj) {"
"ObjectUtils.java:662"$0$0$0$5$20$"		if (obj == null) {"
"ObjectUtils.java:663"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:664"$0$0$0$1$3$"		}"
"ObjectUtils.java:665"$0$0$0$5$30$"		if (obj instanceof String) {"
"ObjectUtils.java:666"$0$0$0$3$23$"			return (String) obj;"
"ObjectUtils.java:667"$0$0$0$1$3$"		}"
"ObjectUtils.java:668"$0$0$0$5$32$"		if (obj instanceof Object[]) {"
"ObjectUtils.java:669"$0$0$0$3$43$"			return nullSafeToString((Object[]) obj);"
"ObjectUtils.java:670"$0$0$0$1$3$"		}"
"ObjectUtils.java:671"$0$0$0$5$33$"		if (obj instanceof boolean[]) {"
"ObjectUtils.java:672"$0$0$0$3$44$"			return nullSafeToString((boolean[]) obj);"
"ObjectUtils.java:673"$0$0$0$1$3$"		}"
"ObjectUtils.java:674"$0$0$0$5$30$"		if (obj instanceof byte[]) {"
"ObjectUtils.java:675"$0$0$0$3$41$"			return nullSafeToString((byte[]) obj);"
"ObjectUtils.java:676"$0$0$0$1$3$"		}"
"ObjectUtils.java:677"$0$0$0$5$30$"		if (obj instanceof char[]) {"
"ObjectUtils.java:678"$0$0$0$3$41$"			return nullSafeToString((char[]) obj);"
"ObjectUtils.java:679"$0$0$0$1$3$"		}"
"ObjectUtils.java:680"$0$0$0$5$32$"		if (obj instanceof double[]) {"
"ObjectUtils.java:681"$0$0$0$3$43$"			return nullSafeToString((double[]) obj);"
"ObjectUtils.java:682"$0$0$0$1$3$"		}"
"ObjectUtils.java:683"$0$0$0$5$31$"		if (obj instanceof float[]) {"
"ObjectUtils.java:684"$0$0$0$3$42$"			return nullSafeToString((float[]) obj);"
"ObjectUtils.java:685"$0$0$0$1$3$"		}"
"ObjectUtils.java:686"$0$0$0$5$29$"		if (obj instanceof int[]) {"
"ObjectUtils.java:687"$0$0$0$3$40$"			return nullSafeToString((int[]) obj);"
"ObjectUtils.java:688"$0$0$0$1$3$"		}"
"ObjectUtils.java:689"$0$0$0$5$30$"		if (obj instanceof long[]) {"
"ObjectUtils.java:690"$0$0$0$3$41$"			return nullSafeToString((long[]) obj);"
"ObjectUtils.java:691"$0$0$0$1$3$"		}"
"ObjectUtils.java:692"$0$0$0$5$31$"		if (obj instanceof short[]) {"
"ObjectUtils.java:693"$0$0$0$3$42$"			return nullSafeToString((short[]) obj);"
"ObjectUtils.java:694"$0$0$0$1$3$"		}"
"ObjectUtils.java:695"$0$0$0$4$30$"		String str = obj.toString();"
"ObjectUtils.java:696"$0$0$0$8$44$"		return (str != null ? str : EMPTY_STRING);"
"ObjectUtils.java:697"$0$0$0$1$2$"	}"
"ObjectUtils.java:698"$0$0$0$0$0$""
"ObjectUtils.java:699"$0$0$0$1$4$"	/**"
"ObjectUtils.java:700"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:701"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:702"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:703"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:704"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:705"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:706"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:707"$0$0$0$1$4$"	 */"
"ObjectUtils.java:708"$0$0$0$7$66$"	public static String nullSafeToString(@Nullable Object[] array) {"
"ObjectUtils.java:709"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:710"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:711"$0$0$0$1$3$"		}"
"ObjectUtils.java:712"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:713"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:714"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:715"$0$0$0$1$3$"		}"
"ObjectUtils.java:716"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:717"$0$0$0$6$26$"		for (Object o : array) {"
"ObjectUtils.java:718"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(o));"
"ObjectUtils.java:719"$0$0$0$1$3$"		}"
"ObjectUtils.java:720"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:721"$0$0$0$1$2$"	}"
"ObjectUtils.java:722"$0$0$0$0$0$""
"ObjectUtils.java:723"$0$0$0$1$4$"	/**"
"ObjectUtils.java:724"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:725"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:726"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:727"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:728"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:729"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:730"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:731"$0$0$0$1$4$"	 */"
"ObjectUtils.java:732"$0$0$0$7$67$"	public static String nullSafeToString(@Nullable boolean[] array) {"
"ObjectUtils.java:733"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:734"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:735"$0$0$0$1$3$"		}"
"ObjectUtils.java:736"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:737"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:738"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:739"$0$0$0$1$3$"		}"
"ObjectUtils.java:740"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:741"$0$0$0$6$27$"		for (boolean b : array) {"
"ObjectUtils.java:742"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(b));"
"ObjectUtils.java:743"$0$0$0$1$3$"		}"
"ObjectUtils.java:744"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:745"$0$0$0$1$2$"	}"
"ObjectUtils.java:746"$0$0$0$0$0$""
"ObjectUtils.java:747"$0$0$0$1$4$"	/**"
"ObjectUtils.java:748"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:749"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:750"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:751"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:752"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:753"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:754"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:755"$0$0$0$1$4$"	 */"
"ObjectUtils.java:756"$0$0$0$7$64$"	public static String nullSafeToString(@Nullable byte[] array) {"
"ObjectUtils.java:757"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:758"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:759"$0$0$0$1$3$"		}"
"ObjectUtils.java:760"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:761"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:762"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:763"$0$0$0$1$3$"		}"
"ObjectUtils.java:764"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:765"$0$0$0$6$24$"		for (byte b : array) {"
"ObjectUtils.java:766"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(b));"
"ObjectUtils.java:767"$0$0$0$1$3$"		}"
"ObjectUtils.java:768"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:769"$0$0$0$1$2$"	}"
"ObjectUtils.java:770"$0$0$0$0$0$""
"ObjectUtils.java:771"$0$0$0$1$4$"	/**"
"ObjectUtils.java:772"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:773"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:774"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:775"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:776"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:777"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:778"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:779"$0$0$0$1$4$"	 */"
"ObjectUtils.java:780"$0$0$0$7$64$"	public static String nullSafeToString(@Nullable char[] array) {"
"ObjectUtils.java:781"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:782"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:783"$0$0$0$1$3$"		}"
"ObjectUtils.java:784"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:785"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:786"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:787"$0$0$0$1$3$"		}"
"ObjectUtils.java:788"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:789"$0$0$0$6$24$"		for (char c : array) {"
"ObjectUtils.java:790"$0$0$0$5$53$"			stringJoiner.add('\'' + String.valueOf(c) + '\'');"
"ObjectUtils.java:791"$0$0$0$1$3$"		}"
"ObjectUtils.java:792"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:793"$0$0$0$1$2$"	}"
"ObjectUtils.java:794"$0$0$0$0$0$""
"ObjectUtils.java:795"$0$0$0$1$4$"	/**"
"ObjectUtils.java:796"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:797"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:798"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:799"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:800"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:801"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:802"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:803"$0$0$0$1$4$"	 */"
"ObjectUtils.java:804"$0$0$0$7$66$"	public static String nullSafeToString(@Nullable double[] array) {"
"ObjectUtils.java:805"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:806"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:807"$0$0$0$1$3$"		}"
"ObjectUtils.java:808"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:809"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:810"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:811"$0$0$0$1$3$"		}"
"ObjectUtils.java:812"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:813"$0$0$0$6$26$"		for (double d : array) {"
"ObjectUtils.java:814"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(d));"
"ObjectUtils.java:815"$0$0$0$1$3$"		}"
"ObjectUtils.java:816"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:817"$0$0$0$1$2$"	}"
"ObjectUtils.java:818"$0$0$0$0$0$""
"ObjectUtils.java:819"$0$0$0$1$4$"	/**"
"ObjectUtils.java:820"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:821"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:822"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:823"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:824"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:825"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:826"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:827"$0$0$0$1$4$"	 */"
"ObjectUtils.java:828"$0$0$0$7$65$"	public static String nullSafeToString(@Nullable float[] array) {"
"ObjectUtils.java:829"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:830"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:831"$0$0$0$1$3$"		}"
"ObjectUtils.java:832"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:833"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:834"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:835"$0$0$0$1$3$"		}"
"ObjectUtils.java:836"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:837"$0$0$0$6$25$"		for (float f : array) {"
"ObjectUtils.java:838"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(f));"
"ObjectUtils.java:839"$0$0$0$1$3$"		}"
"ObjectUtils.java:840"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:841"$0$0$0$1$2$"	}"
"ObjectUtils.java:842"$0$0$0$0$0$""
"ObjectUtils.java:843"$0$0$0$1$4$"	/**"
"ObjectUtils.java:844"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:845"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:846"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:847"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:848"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:849"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:850"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:851"$0$0$0$1$4$"	 */"
"ObjectUtils.java:852"$0$0$0$7$63$"	public static String nullSafeToString(@Nullable int[] array) {"
"ObjectUtils.java:853"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:854"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:855"$0$0$0$1$3$"		}"
"ObjectUtils.java:856"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:857"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:858"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:859"$0$0$0$1$3$"		}"
"ObjectUtils.java:860"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:861"$0$0$0$6$23$"		for (int i : array) {"
"ObjectUtils.java:862"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(i));"
"ObjectUtils.java:863"$0$0$0$1$3$"		}"
"ObjectUtils.java:864"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:865"$0$0$0$1$2$"	}"
"ObjectUtils.java:866"$0$0$0$0$0$""
"ObjectUtils.java:867"$0$0$0$1$4$"	/**"
"ObjectUtils.java:868"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:869"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:870"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:871"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:872"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:873"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:874"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:875"$0$0$0$1$4$"	 */"
"ObjectUtils.java:876"$0$0$0$7$64$"	public static String nullSafeToString(@Nullable long[] array) {"
"ObjectUtils.java:877"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:878"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:879"$0$0$0$1$3$"		}"
"ObjectUtils.java:880"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:881"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:882"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:883"$0$0$0$1$3$"		}"
"ObjectUtils.java:884"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:885"$0$0$0$6$24$"		for (long l : array) {"
"ObjectUtils.java:886"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(l));"
"ObjectUtils.java:887"$0$0$0$1$3$"		}"
"ObjectUtils.java:888"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:889"$0$0$0$1$2$"	}"
"ObjectUtils.java:890"$0$0$0$0$0$""
"ObjectUtils.java:891"$0$0$0$1$4$"	/**"
"ObjectUtils.java:892"$0$0$0$12$74$"	 * Return a String representation of the contents of the specified array."
"ObjectUtils.java:893"$0$0$0$12$76$"	 * <p>The String representation consists of a list of the array's elements,"
"ObjectUtils.java:894"$0$0$0$11$76$"	 * enclosed in curly braces ({@code ""{}""}). Adjacent elements are separated"
"ObjectUtils.java:895"$0$0$0$13$65$"	 * by the characters {@code "", ""} (a comma followed by a space)."
"ObjectUtils.java:896"$0$0$0$12$69$"	 * Returns a {@code ""null""} String if {@code array} is {@code null}."
"ObjectUtils.java:897"$0$0$0$11$63$"	 * @param array the array to build a String representation for"
"ObjectUtils.java:898"$0$0$0$8$52$"	 * @return a String representation of {@code array}"
"ObjectUtils.java:899"$0$0$0$1$4$"	 */"
"ObjectUtils.java:900"$0$0$0$7$65$"	public static String nullSafeToString(@Nullable short[] array) {"
"ObjectUtils.java:901"$0$0$0$5$22$"		if (array == null) {"
"ObjectUtils.java:902"$0$0$0$2$22$"			return NULL_STRING;"
"ObjectUtils.java:903"$0$0$0$1$3$"		}"
"ObjectUtils.java:904"$0$0$0$4$28$"		int length = array.length;"
"ObjectUtils.java:905"$0$0$0$5$20$"		if (length == 0) {"
"ObjectUtils.java:906"$0$0$0$2$22$"			return EMPTY_ARRAY;"
"ObjectUtils.java:907"$0$0$0$1$3$"		}"
"ObjectUtils.java:908"$0$0$0$7$96$"		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);"
"ObjectUtils.java:909"$0$0$0$6$25$"		for (short s : array) {"
"ObjectUtils.java:910"$0$0$0$1$39$"			stringJoiner.add(String.valueOf(s));"
"ObjectUtils.java:911"$0$0$0$1$3$"		}"
"ObjectUtils.java:912"$0$0$0$2$33$"		return stringJoiner.toString();"
"ObjectUtils.java:913"$0$0$0$1$2$"	}"
"ObjectUtils.java:914"$0$0$0$0$0$""
"ObjectUtils.java:915"$0$0$0$1$1$"}"
"SimpleNamespaceContext.java:1"$0$0$0$1$2$"/*"
"SimpleNamespaceContext.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"SimpleNamespaceContext.java:3"$0$0$0$1$2$" *"
"SimpleNamespaceContext.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SimpleNamespaceContext.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SimpleNamespaceContext.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SimpleNamespaceContext.java:7"$0$0$0$1$2$" *"
"SimpleNamespaceContext.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SimpleNamespaceContext.java:9"$0$0$0$1$2$" *"
"SimpleNamespaceContext.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SimpleNamespaceContext.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SimpleNamespaceContext.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SimpleNamespaceContext.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SimpleNamespaceContext.java:14"$0$0$0$5$33$" * limitations under the License."
"SimpleNamespaceContext.java:15"$0$0$0$1$3$" */"
"SimpleNamespaceContext.java:16"$0$0$0$0$0$""
"SimpleNamespaceContext.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"SimpleNamespaceContext.java:18"$0$0$0$0$0$""
"SimpleNamespaceContext.java:19"$0$0$0$2$29$"import java.util.Collections;"
"SimpleNamespaceContext.java:20"$0$0$0$2$25$"import java.util.HashMap;"
"SimpleNamespaceContext.java:21"$0$0$0$2$26$"import java.util.Iterator;"
"SimpleNamespaceContext.java:22"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"SimpleNamespaceContext.java:23"$0$0$0$2$21$"import java.util.Map;"
"SimpleNamespaceContext.java:24"$0$0$0$2$21$"import java.util.Set;"
"SimpleNamespaceContext.java:25"$0$0$0$0$0$""
"SimpleNamespaceContext.java:26"$0$0$0$2$30$"import javax.xml.XMLConstants;"
"SimpleNamespaceContext.java:27"$0$0$0$2$44$"import javax.xml.namespace.NamespaceContext;"
"SimpleNamespaceContext.java:28"$0$0$0$0$0$""
"SimpleNamespaceContext.java:29"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SimpleNamespaceContext.java:30"$0$0$0$2$39$"import org.springframework.util.Assert;"
"SimpleNamespaceContext.java:31"$0$0$0$0$0$""
"SimpleNamespaceContext.java:32"$0$0$0$1$3$"/**"
"SimpleNamespaceContext.java:33"$0$0$0$5$70$" * Simple {@code javax.xml.namespace.NamespaceContext} implementation."
"SimpleNamespaceContext.java:34"$0$0$0$10$74$" * Follows the standard {@code NamespaceContext} contract, and is loadable"
"SimpleNamespaceContext.java:35"$0$0$0$9$69$" * via a {@code java.util.Map} or {@code java.util.Properties} object"
"SimpleNamespaceContext.java:36"$0$0$0$1$2$" *"
"SimpleNamespaceContext.java:37"$0$0$0$4$24$" * @author Arjen Poutsma"
"SimpleNamespaceContext.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"SimpleNamespaceContext.java:39"$0$0$0$3$13$" * @since 3.0"
"SimpleNamespaceContext.java:40"$0$0$0$1$3$" */"
"SimpleNamespaceContext.java:41"$0$0$0$6$65$"public class SimpleNamespaceContext implements NamespaceContext {"
"SimpleNamespaceContext.java:42"$0$0$0$0$0$""
"SimpleNamespaceContext.java:43"$0$0$0$8$74$"	private final Map<String, String> prefixToNamespaceUri = new HashMap<>();"
"SimpleNamespaceContext.java:44"$0$0$0$0$0$""
"SimpleNamespaceContext.java:45"$0$0$0$8$81$"	private final Map<String, Set<String>> namespaceUriToPrefixes = new HashMap<>();"
"SimpleNamespaceContext.java:46"$0$0$0$0$0$""
"SimpleNamespaceContext.java:47"$0$0$0$5$41$"	private String defaultNamespaceUri = """";"
"SimpleNamespaceContext.java:48"$0$0$0$0$0$""
"SimpleNamespaceContext.java:49"$0$0$0$0$0$""
"SimpleNamespaceContext.java:50"$0$0$0$1$10$"	@Override"
"SimpleNamespaceContext.java:51"$1$0$0$5$47$"	public String getNamespaceURI(String prefix) {"
"SimpleNamespaceContext.java:52"$0$0$0$4$44$"		Assert.notNull(prefix, ""No prefix given"");"
"SimpleNamespaceContext.java:53"$0$0$0$3$50$"		if (XMLConstants.XML_NS_PREFIX.equals(prefix)) {"
"SimpleNamespaceContext.java:54"$0$0$0$2$34$"			return XMLConstants.XML_NS_URI;"
"SimpleNamespaceContext.java:55"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:56"$0$0$0$4$57$"		else if (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {"
"SimpleNamespaceContext.java:57"$0$0$0$2$46$"			return XMLConstants.XMLNS_ATTRIBUTE_NS_URI;"
"SimpleNamespaceContext.java:58"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:59"$0$0$0$4$59$"		else if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {"
"SimpleNamespaceContext.java:60"$0$0$0$2$35$"			return this.defaultNamespaceUri;"
"SimpleNamespaceContext.java:61"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:62"$0$0$0$4$59$"		else if (this.prefixToNamespaceUri.containsKey(prefix)) {"
"SimpleNamespaceContext.java:63"$1$0$0$2$48$"			return this.prefixToNamespaceUri.get(prefix);"
"SimpleNamespaceContext.java:64"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:65"$0$0$0$2$12$"		return """";"
"SimpleNamespaceContext.java:66"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:67"$0$0$0$0$0$""
"SimpleNamespaceContext.java:68"$0$0$0$1$10$"	@Override"
"SimpleNamespaceContext.java:69"$0$0$0$1$10$"	@Nullable"
"SimpleNamespaceContext.java:70"$1$0$0$5$47$"	public String getPrefix(String namespaceUri) {"
"SimpleNamespaceContext.java:71"$1$0$0$4$54$"		Set<String> prefixes = getPrefixesSet(namespaceUri);"
"SimpleNamespaceContext.java:72"$0$0$0$6$67$"		return (!prefixes.isEmpty() ? prefixes.iterator().next() : null);"
"SimpleNamespaceContext.java:73"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:74"$0$0$0$0$0$""
"SimpleNamespaceContext.java:75"$0$0$0$1$10$"	@Override"
"SimpleNamespaceContext.java:76"$1$0$0$5$59$"	public Iterator<String> getPrefixes(String namespaceUri) {"
"SimpleNamespaceContext.java:77"$1$0$0$2$49$"		return getPrefixesSet(namespaceUri).iterator();"
"SimpleNamespaceContext.java:78"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:79"$0$0$0$0$0$""
"SimpleNamespaceContext.java:80"$1$0$0$5$58$"	private Set<String> getPrefixesSet(String namespaceUri) {"
"SimpleNamespaceContext.java:81"$0$0$0$4$56$"		Assert.notNull(namespaceUri, ""No namespaceUri given"");"
"SimpleNamespaceContext.java:82"$0$0$0$3$54$"		if (this.defaultNamespaceUri.equals(namespaceUri)) {"
"SimpleNamespaceContext.java:83"$0$0$0$2$64$"			return Collections.singleton(XMLConstants.DEFAULT_NS_PREFIX);"
"SimpleNamespaceContext.java:84"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:85"$0$0$0$4$58$"		else if (XMLConstants.XML_NS_URI.equals(namespaceUri)) {"
"SimpleNamespaceContext.java:86"$0$0$0$2$60$"			return Collections.singleton(XMLConstants.XML_NS_PREFIX);"
"SimpleNamespaceContext.java:87"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:88"$0$0$0$4$70$"		else if (XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceUri)) {"
"SimpleNamespaceContext.java:89"$0$0$0$2$62$"			return Collections.singleton(XMLConstants.XMLNS_ATTRIBUTE);"
"SimpleNamespaceContext.java:90"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:91"$0$0$0$2$8$"		else {"
"SimpleNamespaceContext.java:92"$1$0$0$4$72$"			Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);"
"SimpleNamespaceContext.java:93"$0$0$0$8$95$"			return (prefixes != null ?  Collections.unmodifiableSet(prefixes) : Collections.emptySet());"
"SimpleNamespaceContext.java:94"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:95"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:96"$0$0$0$0$0$""
"SimpleNamespaceContext.java:97"$0$0$0$0$0$""
"SimpleNamespaceContext.java:98"$0$0$0$1$4$"	/**"
"SimpleNamespaceContext.java:99"$0$0$0$8$48$"	 * Set the bindings for this namespace context."
"SimpleNamespaceContext.java:100"$0$0$0$11$60$"	 * The supplied map must consist of string key value pairs."
"SimpleNamespaceContext.java:101"$0$0$0$1$4$"	 */"
"SimpleNamespaceContext.java:102"$0$0$0$6$56$"	public void setBindings(Map<String, String> bindings) {"
"SimpleNamespaceContext.java:103"$0$0$0$1$43$"		bindings.forEach(this::bindNamespaceUri);"
"SimpleNamespaceContext.java:104"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:105"$0$0$0$0$0$""
"SimpleNamespaceContext.java:106"$0$0$0$1$4$"	/**"
"SimpleNamespaceContext.java:107"$0$0$0$8$50$"	 * Bind the given namespace as default namespace."
"SimpleNamespaceContext.java:108"$0$0$0$6$41$"	 * @param namespaceUri the namespace uri"
"SimpleNamespaceContext.java:109"$0$0$0$1$4$"	 */"
"SimpleNamespaceContext.java:110"$0$0$0$5$59$"	public void bindDefaultNamespaceUri(String namespaceUri) {"
"SimpleNamespaceContext.java:111"$0$0$0$2$65$"		bindNamespaceUri(XMLConstants.DEFAULT_NS_PREFIX, namespaceUri);"
"SimpleNamespaceContext.java:112"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:113"$0$0$0$0$0$""
"SimpleNamespaceContext.java:114"$0$0$0$1$4$"	/**"
"SimpleNamespaceContext.java:115"$0$0$0$9$49$"	 * Bind the given prefix to the given namespace."
"SimpleNamespaceContext.java:116"$0$0$0$6$38$"	 * @param prefix the namespace prefix"
"SimpleNamespaceContext.java:117"$0$0$0$6$41$"	 * @param namespaceUri the namespace uri"
"SimpleNamespaceContext.java:118"$0$0$0$1$4$"	 */"
"SimpleNamespaceContext.java:119"$0$0$0$7$67$"	public void bindNamespaceUri(String prefix, String namespaceUri) {"
"SimpleNamespaceContext.java:120"$0$0$0$4$44$"		Assert.notNull(prefix, ""No prefix given"");"
"SimpleNamespaceContext.java:121"$0$0$0$4$56$"		Assert.notNull(namespaceUri, ""No namespaceUri given"");"
"SimpleNamespaceContext.java:122"$0$0$0$3$54$"		if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {"
"SimpleNamespaceContext.java:123"$0$0$0$3$43$"			this.defaultNamespaceUri = namespaceUri;"
"SimpleNamespaceContext.java:124"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:125"$0$0$0$2$8$"		else {"
"SimpleNamespaceContext.java:126"$0$0$0$2$55$"			this.prefixToNamespaceUri.put(prefix, namespaceUri);"
"SimpleNamespaceContext.java:127"$0$0$0$3$25$"			Set<String> prefixes ="
"SimpleNamespaceContext.java:128"$0$0$0$5$91$"					this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());"
"SimpleNamespaceContext.java:129"$0$0$0$1$24$"			prefixes.add(prefix);"
"SimpleNamespaceContext.java:130"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:131"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:132"$0$0$0$0$0$""
"SimpleNamespaceContext.java:133"$0$0$0$1$4$"	/**"
"SimpleNamespaceContext.java:134"$0$0$0$8$46$"	 * Remove the given prefix from this context."
"SimpleNamespaceContext.java:135"$0$0$0$8$42$"	 * @param prefix the prefix to be removed"
"SimpleNamespaceContext.java:136"$0$0$0$1$4$"	 */"
"SimpleNamespaceContext.java:137"$0$0$0$6$53$"	public void removeBinding(@Nullable String prefix) {"
"SimpleNamespaceContext.java:138"$0$0$0$3$54$"		if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {"
"SimpleNamespaceContext.java:139"$0$0$0$3$33$"			this.defaultNamespaceUri = """";"
"SimpleNamespaceContext.java:140"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:141"$0$0$0$6$28$"		else if (prefix != null) {"
"SimpleNamespaceContext.java:142"$0$0$0$4$66$"			String namespaceUri = this.prefixToNamespaceUri.remove(prefix);"
"SimpleNamespaceContext.java:143"$0$0$0$5$30$"			if (namespaceUri != null) {"
"SimpleNamespaceContext.java:144"$1$0$0$4$73$"				Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);"
"SimpleNamespaceContext.java:145"$0$0$0$5$27$"				if (prefixes != null) {"
"SimpleNamespaceContext.java:146"$0$0$0$1$29$"					prefixes.remove(prefix);"
"SimpleNamespaceContext.java:147"$0$0$0$3$30$"					if (prefixes.isEmpty()) {"
"SimpleNamespaceContext.java:148"$0$0$0$1$55$"						this.namespaceUriToPrefixes.remove(namespaceUri);"
"SimpleNamespaceContext.java:149"$0$0$0$1$6$"					}"
"SimpleNamespaceContext.java:150"$0$0$0$1$5$"				}"
"SimpleNamespaceContext.java:151"$0$0$0$1$4$"			}"
"SimpleNamespaceContext.java:152"$0$0$0$1$3$"		}"
"SimpleNamespaceContext.java:153"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:154"$0$0$0$0$0$""
"SimpleNamespaceContext.java:155"$0$0$0$1$4$"	/**"
"SimpleNamespaceContext.java:156"$0$0$0$5$33$"	 * Remove all declared prefixes."
"SimpleNamespaceContext.java:157"$0$0$0$1$4$"	 */"
"SimpleNamespaceContext.java:158"$0$0$0$4$22$"	public void clear() {"
"SimpleNamespaceContext.java:159"$0$0$0$1$36$"		this.prefixToNamespaceUri.clear();"
"SimpleNamespaceContext.java:160"$0$0$0$1$38$"		this.namespaceUriToPrefixes.clear();"
"SimpleNamespaceContext.java:161"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:162"$0$0$0$0$0$""
"SimpleNamespaceContext.java:163"$0$0$0$1$4$"	/**"
"SimpleNamespaceContext.java:164"$0$0$0$5$33$"	 * Return all declared prefixes."
"SimpleNamespaceContext.java:165"$0$0$0$1$4$"	 */"
"SimpleNamespaceContext.java:166"$1$0$0$4$45$"	public Iterator<String> getBoundPrefixes() {"
"SimpleNamespaceContext.java:167"$0$0$0$2$55$"		return this.prefixToNamespaceUri.keySet().iterator();"
"SimpleNamespaceContext.java:168"$0$0$0$1$2$"	}"
"SimpleNamespaceContext.java:169"$0$0$0$0$0$""
"SimpleNamespaceContext.java:170"$0$0$0$1$1$"}"
"InvertibleComparator.java:1"$0$0$0$1$2$"/*"
"InvertibleComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"InvertibleComparator.java:3"$0$0$0$1$2$" *"
"InvertibleComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"InvertibleComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"InvertibleComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"InvertibleComparator.java:7"$0$0$0$1$2$" *"
"InvertibleComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"InvertibleComparator.java:9"$0$0$0$1$2$" *"
"InvertibleComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"InvertibleComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"InvertibleComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"InvertibleComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"InvertibleComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"InvertibleComparator.java:15"$0$0$0$1$3$" */"
"InvertibleComparator.java:16"$0$0$0$0$0$""
"InvertibleComparator.java:17"$0$0$0$2$44$"package org.springframework.util.comparator;"
"InvertibleComparator.java:18"$0$0$0$0$0$""
"InvertibleComparator.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"InvertibleComparator.java:20"$0$0$0$2$28$"import java.util.Comparator;"
"InvertibleComparator.java:21"$0$0$0$0$0$""
"InvertibleComparator.java:22"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"InvertibleComparator.java:23"$0$0$0$2$39$"import org.springframework.util.Assert;"
"InvertibleComparator.java:24"$0$0$0$0$0$""
"InvertibleComparator.java:25"$0$0$0$1$3$"/**"
"InvertibleComparator.java:26"$0$0$0$11$66$" * A decorator for a comparator, with an ""ascending"" flag denoting"
"InvertibleComparator.java:27"$0$0$0$10$68$" * whether comparison results should be treated in forward (standard"
"InvertibleComparator.java:28"$0$0$0$9$62$" * ascending) order or flipped for reverse (descending) order."
"InvertibleComparator.java:29"$0$0$0$1$2$" *"
"InvertibleComparator.java:30"$0$0$0$4$23$" * @author Keith Donald"
"InvertibleComparator.java:31"$0$0$0$4$26$" * @author Juergen Hoeller"
"InvertibleComparator.java:32"$0$0$0$3$15$" * @since 1.2.2"
"InvertibleComparator.java:33"$0$0$0$14$73$" * @param <T> the type of objects that may be compared by this comparator"
"InvertibleComparator.java:34"$0$0$0$14$73$" * @deprecated as of Spring Framework 5.0, in favor of the standard JDK 8"
"InvertibleComparator.java:35"$0$0$0$3$32$" * {@link Comparator#reversed()}"
"InvertibleComparator.java:36"$0$0$0$1$3$" */"
"InvertibleComparator.java:37"$0$0$0$1$10$"Deprecated"
"InvertibleComparator.java:38"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"InvertibleComparator.java:39"$0$0$0$7$77$"public class InvertibleComparator<T> implements Comparator<T>, Serializable {"
"InvertibleComparator.java:40"$0$0$0$0$0$""
"InvertibleComparator.java:41"$0$0$0$4$40$"	private final Comparator<T> comparator;"
"InvertibleComparator.java:42"$0$0$0$0$0$""
"InvertibleComparator.java:43"$0$0$0$5$34$"	private boolean ascending = true;"
"InvertibleComparator.java:44"$0$0$0$0$0$""
"InvertibleComparator.java:45"$0$0$0$0$0$""
"InvertibleComparator.java:46"$0$0$0$1$4$"	/**"
"InvertibleComparator.java:47"$0$0$0$9$67$"	 * Create an InvertibleComparator that sorts ascending by default."
"InvertibleComparator.java:48"$0$0$0$11$69$"	 * For the actual comparison, the specified Comparator will be used."
"InvertibleComparator.java:49"$0$0$0$7$48$"	 * @param comparator the comparator to decorate"
"InvertibleComparator.java:50"$0$0$0$1$4$"	 */"
"InvertibleComparator.java:51"$0$0$0$4$56$"	public InvertibleComparator(Comparator<T> comparator) {"
"InvertibleComparator.java:52"$0$0$0$6$60$"		Assert.notNull(comparator, ""Comparator must not be null"");"
"InvertibleComparator.java:53"$0$0$0$3$31$"		this.comparator = comparator;"
"InvertibleComparator.java:54"$0$0$0$1$2$"	}"
"InvertibleComparator.java:55"$0$0$0$0$0$""
"InvertibleComparator.java:56"$0$0$0$1$4$"	/**"
"InvertibleComparator.java:57"$0$0$0$11$74$"	 * Create an InvertibleComparator that sorts based on the provided order."
"InvertibleComparator.java:58"$0$0$0$11$69$"	 * For the actual comparison, the specified Comparator will be used."
"InvertibleComparator.java:59"$0$0$0$7$48$"	 * @param comparator the comparator to decorate"
"InvertibleComparator.java:60"$0$0$0$11$75$"	 * @param ascending the sort order: ascending (true) or descending (false)"
"InvertibleComparator.java:61"$0$0$0$1$4$"	 */"
"InvertibleComparator.java:62"$0$0$0$6$75$"	public InvertibleComparator(Comparator<T> comparator, boolean ascending) {"
"InvertibleComparator.java:63"$0$0$0$6$60$"		Assert.notNull(comparator, ""Comparator must not be null"");"
"InvertibleComparator.java:64"$0$0$0$3$31$"		this.comparator = comparator;"
"InvertibleComparator.java:65"$0$0$0$1$26$"		setAscending(ascending);"
"InvertibleComparator.java:66"$0$0$0$1$2$"	}"
"InvertibleComparator.java:67"$0$0$0$0$0$""
"InvertibleComparator.java:68"$0$0$0$0$0$""
"InvertibleComparator.java:69"$0$0$0$1$4$"	/**"
"InvertibleComparator.java:70"$0$0$0$10$67$"	 * Specify the sort order: ascending (true) or descending (false)."
"InvertibleComparator.java:71"$0$0$0$1$4$"	 */"
"InvertibleComparator.java:72"$0$0$0$5$46$"	public void setAscending(boolean ascending) {"
"InvertibleComparator.java:73"$0$0$0$3$29$"		this.ascending = ascending;"
"InvertibleComparator.java:74"$0$0$0$1$2$"	}"
"InvertibleComparator.java:75"$0$0$0$0$0$""
"InvertibleComparator.java:76"$0$0$0$1$4$"	/**"
"InvertibleComparator.java:77"$0$0$0$10$66$"	 * Return the sort order: ascending (true) or descending (false)."
"InvertibleComparator.java:78"$0$0$0$1$4$"	 */"
"InvertibleComparator.java:79"$0$0$0$4$31$"	public boolean isAscending() {"
"InvertibleComparator.java:80"$0$0$0$2$24$"		return this.ascending;"
"InvertibleComparator.java:81"$0$0$0$1$2$"	}"
"InvertibleComparator.java:82"$0$0$0$0$0$""
"InvertibleComparator.java:83"$0$0$0$1$4$"	/**"
"InvertibleComparator.java:84"$0$0$0$9$53$"	 * Invert the sort order: ascending -> descending or"
"InvertibleComparator.java:85"$0$0$0$4$28$"	 * descending -> ascending."
"InvertibleComparator.java:86"$0$0$0$1$4$"	 */"
"InvertibleComparator.java:87"$0$0$0$4$28$"	public void invertOrder() {"
"InvertibleComparator.java:88"$0$0$0$3$35$"		this.ascending = !this.ascending;"
"InvertibleComparator.java:89"$0$0$0$1$2$"	}"
"InvertibleComparator.java:90"$0$0$0$0$0$""
"InvertibleComparator.java:91"$0$0$0$0$0$""
"InvertibleComparator.java:92"$0$0$0$1$10$"	@Override"
"InvertibleComparator.java:93"$0$0$0$7$33$"	public int compare(T o1, T o2) {"
"InvertibleComparator.java:94"$0$0$0$5$47$"		int result = this.comparator.compare(o1, o2);"
"InvertibleComparator.java:95"$0$0$0$5$20$"		if (result != 0) {"
"InvertibleComparator.java:96"$0$0$1$10$47$"			// Invert the order if it is a reverse sort."
"InvertibleComparator.java:97"$0$0$0$3$25$"			if (!this.ascending) {"
"InvertibleComparator.java:98"$0$0$0$5$38$"				if (Integer.MIN_VALUE == result) {"
"InvertibleComparator.java:99"$0$0$0$3$32$"					result = Integer.MAX_VALUE;"
"InvertibleComparator.java:100"$0$0$0$1$5$"				}"
"InvertibleComparator.java:101"$0$0$0$2$10$"				else {"
"InvertibleComparator.java:102"$0$0$0$3$18$"					result *= -1;"
"InvertibleComparator.java:103"$0$0$0$1$5$"				}"
"InvertibleComparator.java:104"$0$0$0$1$4$"			}"
"InvertibleComparator.java:105"$0$0$0$2$17$"			return result;"
"InvertibleComparator.java:106"$0$0$0$1$3$"		}"
"InvertibleComparator.java:107"$0$0$0$2$11$"		return 0;"
"InvertibleComparator.java:108"$0$0$0$1$2$"	}"
"InvertibleComparator.java:109"$0$0$0$0$0$""
"InvertibleComparator.java:110"$0$0$0$1$10$"	@Override"
"InvertibleComparator.java:111"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"InvertibleComparator.java:112"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"InvertibleComparator.java:113"$0$0$0$5$22$"		if (this == other) {"
"InvertibleComparator.java:114"$0$0$0$2$15$"			return true;"
"InvertibleComparator.java:115"$0$0$0$1$3$"		}"
"InvertibleComparator.java:116"$0$0$0$5$49$"		if (!(other instanceof InvertibleComparator)) {"
"InvertibleComparator.java:117"$0$0$0$2$16$"			return false;"
"InvertibleComparator.java:118"$0$0$0$1$3$"		}"
"InvertibleComparator.java:119"$0$0$0$5$70$"		InvertibleComparator<T> otherComp = (InvertibleComparator<T>) other;"
"InvertibleComparator.java:120"$0$0$0$6$97$"		return (this.comparator.equals(otherComp.comparator) && this.ascending == otherComp.ascending);"
"InvertibleComparator.java:121"$0$0$0$1$2$"	}"
"InvertibleComparator.java:122"$0$0$0$0$0$""
"InvertibleComparator.java:123"$0$0$0$1$10$"	@Override"
"InvertibleComparator.java:124"$0$0$0$4$24$"	public int hashCode() {"
"InvertibleComparator.java:125"$0$0$0$2$36$"		return this.comparator.hashCode();"
"InvertibleComparator.java:126"$0$0$0$1$2$"	}"
"InvertibleComparator.java:127"$0$0$0$0$0$""
"InvertibleComparator.java:128"$0$0$0$1$10$"	@Override"
"InvertibleComparator.java:129"$0$0$0$4$27$"	public String toString() {"
"InvertibleComparator.java:130"$0$0$0$10$88$"		return ""InvertibleComparator: ["" + this.comparator + ""]; ascending="" + this.ascending;"
"InvertibleComparator.java:131"$0$0$0$1$2$"	}"
"InvertibleComparator.java:132"$0$0$0$0$0$""
"InvertibleComparator.java:133"$0$0$0$1$1$"}"
"ByteArrayDecoder.java:1"$0$0$0$1$2$"/*"
"ByteArrayDecoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ByteArrayDecoder.java:3"$0$0$0$1$2$" *"
"ByteArrayDecoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ByteArrayDecoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ByteArrayDecoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ByteArrayDecoder.java:7"$0$0$0$1$2$" *"
"ByteArrayDecoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ByteArrayDecoder.java:9"$0$0$0$1$2$" *"
"ByteArrayDecoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ByteArrayDecoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ByteArrayDecoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ByteArrayDecoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ByteArrayDecoder.java:14"$0$0$0$5$33$" * limitations under the License."
"ByteArrayDecoder.java:15"$0$0$0$1$3$" */"
"ByteArrayDecoder.java:16"$0$0$0$0$0$""
"ByteArrayDecoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"ByteArrayDecoder.java:18"$0$0$0$0$0$""
"ByteArrayDecoder.java:19"$0$0$0$2$21$"import java.util.Map;"
"ByteArrayDecoder.java:20"$0$0$0$0$0$""
"ByteArrayDecoder.java:21"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"ByteArrayDecoder.java:22"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"ByteArrayDecoder.java:23"$0$0$0$2$58$"import org.springframework.core.io.buffer.DataBufferUtils;"
"ByteArrayDecoder.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ByteArrayDecoder.java:25"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"ByteArrayDecoder.java:26"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"ByteArrayDecoder.java:27"$0$0$0$0$0$""
"ByteArrayDecoder.java:28"$0$0$0$1$3$"/**"
"ByteArrayDecoder.java:29"$0$0$0$6$35$" * Decoder for {@code byte} arrays."
"ByteArrayDecoder.java:30"$0$0$0$1$2$" *"
"ByteArrayDecoder.java:31"$0$0$0$4$24$" * @author Arjen Poutsma"
"ByteArrayDecoder.java:32"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"ByteArrayDecoder.java:33"$0$0$0$3$13$" * @since 5.0"
"ByteArrayDecoder.java:34"$0$0$0$1$3$" */"
"ByteArrayDecoder.java:35"$0$0$0$6$73$"public class ByteArrayDecoder extends AbstractDataBufferDecoder<byte[]> {"
"ByteArrayDecoder.java:36"$0$0$0$0$0$""
"ByteArrayDecoder.java:37"$0$0$0$3$28$"	public ByteArrayDecoder() {"
"ByteArrayDecoder.java:38"$0$0$0$1$27$"		super(MimeTypeUtils.ALL);"
"ByteArrayDecoder.java:39"$0$0$0$1$2$"	}"
"ByteArrayDecoder.java:40"$0$0$0$0$0$""
"ByteArrayDecoder.java:41"$0$0$0$0$0$""
"ByteArrayDecoder.java:42"$0$0$0$1$10$"	@Override"
"ByteArrayDecoder.java:43"$0$0$0$8$84$"	public boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"ByteArrayDecoder.java:44"$0$0$0$7$91$"		return (elementType.resolve() == byte[].class && super.canDecode(elementType, mimeType));"
"ByteArrayDecoder.java:45"$0$0$0$1$2$"	}"
"ByteArrayDecoder.java:46"$0$0$0$0$0$""
"ByteArrayDecoder.java:47"$0$0$0$1$10$"	@Override"
"ByteArrayDecoder.java:48"$0$0$0$6$72$"	public byte[] decode(DataBuffer dataBuffer, ResolvableType elementType,"
"ByteArrayDecoder.java:49"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"ByteArrayDecoder.java:50"$0$0$0$0$0$""
"ByteArrayDecoder.java:51"$0$0$0$5$59$"		byte[] result = new byte[dataBuffer.readableByteCount()];"
"ByteArrayDecoder.java:52"$0$0$0$1$26$"		dataBuffer.read(result);"
"ByteArrayDecoder.java:53"$0$0$0$1$38$"		DataBufferUtils.release(dataBuffer);"
"ByteArrayDecoder.java:54"$0$0$0$3$32$"		if (logger.isDebugEnabled()) {"
"ByteArrayDecoder.java:55"$1$0$0$9$80$"			logger.debug(Hints.getLogPrefix(hints) + ""Read "" + result.length + "" bytes"");"
"ByteArrayDecoder.java:56"$0$0$0$1$3$"		}"
"ByteArrayDecoder.java:57"$0$0$0$2$16$"		return result;"
"ByteArrayDecoder.java:58"$0$0$0$1$2$"	}"
"ByteArrayDecoder.java:59"$0$0$0$0$0$""
"ByteArrayDecoder.java:60"$0$0$0$1$1$"}"
"StaxEventXMLReader.java:1"$0$0$0$1$2$"/*"
"StaxEventXMLReader.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"StaxEventXMLReader.java:3"$0$0$0$1$2$" *"
"StaxEventXMLReader.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StaxEventXMLReader.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StaxEventXMLReader.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StaxEventXMLReader.java:7"$0$0$0$1$2$" *"
"StaxEventXMLReader.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StaxEventXMLReader.java:9"$0$0$0$1$2$" *"
"StaxEventXMLReader.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StaxEventXMLReader.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StaxEventXMLReader.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StaxEventXMLReader.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StaxEventXMLReader.java:14"$0$0$0$5$33$" * limitations under the License."
"StaxEventXMLReader.java:15"$0$0$0$1$3$" */"
"StaxEventXMLReader.java:16"$0$0$0$0$0$""
"StaxEventXMLReader.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"StaxEventXMLReader.java:18"$0$0$0$0$0$""
"StaxEventXMLReader.java:19"$0$0$0$2$26$"import java.util.Iterator;"
"StaxEventXMLReader.java:20"$0$0$0$0$0$""
"StaxEventXMLReader.java:21"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"StaxEventXMLReader.java:22"$0$0$0$2$33$"import javax.xml.stream.Location;"
"StaxEventXMLReader.java:23"$0$0$0$2$39$"import javax.xml.stream.XMLEventReader;"
"StaxEventXMLReader.java:24"$0$0$0$2$43$"import javax.xml.stream.XMLStreamConstants;"
"StaxEventXMLReader.java:25"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"StaxEventXMLReader.java:26"$0$0$0$2$41$"import javax.xml.stream.events.Attribute;"
"StaxEventXMLReader.java:27"$0$0$0$2$42$"import javax.xml.stream.events.Characters;"
"StaxEventXMLReader.java:28"$0$0$0$2$39$"import javax.xml.stream.events.Comment;"
"StaxEventXMLReader.java:29"$0$0$0$2$35$"import javax.xml.stream.events.DTD;"
"StaxEventXMLReader.java:30"$0$0$0$2$42$"import javax.xml.stream.events.EndElement;"
"StaxEventXMLReader.java:31"$0$0$0$2$49$"import javax.xml.stream.events.EntityDeclaration;"
"StaxEventXMLReader.java:32"$0$0$0$2$47$"import javax.xml.stream.events.EntityReference;"
"StaxEventXMLReader.java:33"$0$0$0$2$41$"import javax.xml.stream.events.Namespace;"
"StaxEventXMLReader.java:34"$0$0$0$2$51$"import javax.xml.stream.events.NotationDeclaration;"
"StaxEventXMLReader.java:35"$0$0$0$2$53$"import javax.xml.stream.events.ProcessingInstruction;"
"StaxEventXMLReader.java:36"$0$0$0$2$45$"import javax.xml.stream.events.StartDocument;"
"StaxEventXMLReader.java:37"$0$0$0$2$44$"import javax.xml.stream.events.StartElement;"
"StaxEventXMLReader.java:38"$0$0$0$2$40$"import javax.xml.stream.events.XMLEvent;"
"StaxEventXMLReader.java:39"$0$0$0$0$0$""
"StaxEventXMLReader.java:40"$0$0$0$2$30$"import org.xml.sax.Attributes;"
"StaxEventXMLReader.java:41"$0$0$0$2$32$"import org.xml.sax.SAXException;"
"StaxEventXMLReader.java:42"$0$0$0$2$32$"import org.xml.sax.ext.Locator2;"
"StaxEventXMLReader.java:43"$0$0$0$2$42$"import org.xml.sax.helpers.AttributesImpl;"
"StaxEventXMLReader.java:44"$0$0$0$0$0$""
"StaxEventXMLReader.java:45"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StaxEventXMLReader.java:46"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"StaxEventXMLReader.java:47"$0$0$0$0$0$""
"StaxEventXMLReader.java:48"$0$0$0$1$3$"/**"
"StaxEventXMLReader.java:49"$0$0$0$15$103$" * SAX {@code XMLReader} that reads from a StAX {@code XMLEventReader}. Consumes {@code XMLEvents} from"
"StaxEventXMLReader.java:50"$0$0$0$14$97$" * an {@code XMLEventReader}, and calls the corresponding methods on the SAX callback interfaces."
"StaxEventXMLReader.java:51"$0$0$0$1$2$" *"
"StaxEventXMLReader.java:52"$0$0$0$4$24$" * @author Arjen Poutsma"
"StaxEventXMLReader.java:53"$0$0$0$3$13$" * @since 3.0"
"StaxEventXMLReader.java:54"$0$0$0$3$22$" * @see XMLEventReader"
"StaxEventXMLReader.java:55"$0$0$0$3$54$" * @see #setContentHandler(org.xml.sax.ContentHandler)"
"StaxEventXMLReader.java:56"$0$0$0$3$46$" * @see #setDTDHandler(org.xml.sax.DTDHandler)"
"StaxEventXMLReader.java:57"$0$0$0$3$54$" * @see #setEntityResolver(org.xml.sax.EntityResolver)"
"StaxEventXMLReader.java:58"$0$0$0$3$50$" * @see #setErrorHandler(org.xml.sax.ErrorHandler)"
"StaxEventXMLReader.java:59"$0$0$0$1$3$" */"
"StaxEventXMLReader.java:60"$0$0$0$1$28$"SuppressWarnings(""rawtypes"")"
"StaxEventXMLReader.java:61"$0$0$0$5$56$"class StaxEventXMLReader extends AbstractStaxXMLReader {"
"StaxEventXMLReader.java:62"$0$0$0$0$0$""
"StaxEventXMLReader.java:63"$0$0$0$7$57$"	private static final String DEFAULT_XML_VERSION = ""1.0"";"
"StaxEventXMLReader.java:64"$0$0$0$0$0$""
"StaxEventXMLReader.java:65"$0$0$0$4$37$"	private final XMLEventReader reader;"
"StaxEventXMLReader.java:66"$0$0$0$0$0$""
"StaxEventXMLReader.java:67"$0$0$0$5$49$"	private String xmlVersion = DEFAULT_XML_VERSION;"
"StaxEventXMLReader.java:68"$0$0$0$0$0$""
"StaxEventXMLReader.java:69"$0$0$0$1$10$"	@Nullable"
"StaxEventXMLReader.java:70"$0$0$0$3$25$"	private String encoding;"
"StaxEventXMLReader.java:71"$0$0$0$0$0$""
"StaxEventXMLReader.java:72"$0$0$0$0$0$""
"StaxEventXMLReader.java:73"$0$0$0$1$4$"	/**"
"StaxEventXMLReader.java:74"$0$0$0$12$79$"	 * Constructs a new instance of the {@code StaxEventXmlReader} that reads from"
"StaxEventXMLReader.java:75"$0$0$0$12$74$"	 * the given {@code XMLEventReader}. The supplied event reader must be in"
"StaxEventXMLReader.java:76"$0$0$0$7$96$"	 * {@code XMLStreamConstants.START_DOCUMENT} or {@code XMLStreamConstants.START_ELEMENT} state."
"StaxEventXMLReader.java:77"$0$0$0$9$57$"	 * @param reader the {@code XMLEventReader} to read from"
"StaxEventXMLReader.java:78"$0$0$0$16$92$"	 * @throws IllegalStateException if the reader is not at the start of a document or element"
"StaxEventXMLReader.java:79"$0$0$0$1$4$"	 */"
"StaxEventXMLReader.java:80"$0$0$0$3$44$"	StaxEventXMLReader(XMLEventReader reader) {"
"StaxEventXMLReader.java:81"$0$0$0$2$7$"		try {"
"StaxEventXMLReader.java:82"$0$0$0$4$34$"			XMLEvent event = reader.peek();"
"StaxEventXMLReader.java:83"$0$0$0$9$79$"			if (event != null && !(event.isStartDocument() || event.isStartElement())) {"
"StaxEventXMLReader.java:84"$0$0$0$10$90$"				throw new IllegalStateException(""XMLEventReader not at start of document or element"");"
"StaxEventXMLReader.java:85"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:86"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:87"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"StaxEventXMLReader.java:88"$1$0$0$10$87$"			throw new IllegalStateException(""Could not read first element: "" + ex.getMessage());"
"StaxEventXMLReader.java:89"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:90"$0$0$0$3$23$"		this.reader = reader;"
"StaxEventXMLReader.java:91"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:92"$0$0$0$0$0$""
"StaxEventXMLReader.java:93"$0$0$0$0$0$""
"StaxEventXMLReader.java:94"$0$0$0$1$10$"	@Override"
"StaxEventXMLReader.java:95"$0$0$0$7$73$"	protected void parseInternal() throws SAXException, XMLStreamException {"
"StaxEventXMLReader.java:96"$0$0$0$4$34$"		boolean documentStarted = false;"
"StaxEventXMLReader.java:97"$0$0$0$4$32$"		boolean documentEnded = false;"
"StaxEventXMLReader.java:98"$0$0$0$4$23$"		int elementDepth = 0;"
"StaxEventXMLReader.java:99"$0$0$0$7$54$"		while (this.reader.hasNext() && elementDepth >= 0) {"
"StaxEventXMLReader.java:100"$0$0$0$4$44$"			XMLEvent event = this.reader.nextEvent();"
"StaxEventXMLReader.java:101"$0$0$0$7$80$"			if (!event.isStartDocument() && !event.isEndDocument() && !documentStarted) {"
"StaxEventXMLReader.java:102"$0$0$0$1$31$"				handleStartDocument(event);"
"StaxEventXMLReader.java:103"$0$0$0$3$27$"				documentStarted = true;"
"StaxEventXMLReader.java:104"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:105"$1$0$0$3$34$"			switch (event.getEventType()) {"
"StaxEventXMLReader.java:106"$0$0$0$2$43$"				case XMLStreamConstants.START_DOCUMENT:"
"StaxEventXMLReader.java:107"$0$0$0$1$32$"					handleStartDocument(event);"
"StaxEventXMLReader.java:108"$0$0$0$3$28$"					documentStarted = true;"
"StaxEventXMLReader.java:109"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:110"$0$0$0$2$42$"				case XMLStreamConstants.START_ELEMENT:"
"StaxEventXMLReader.java:111"$0$0$0$1$20$"					elementDepth++;"
"StaxEventXMLReader.java:112"$0$0$0$1$48$"					handleStartElement(event.asStartElement());"
"StaxEventXMLReader.java:113"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:114"$0$0$0$2$40$"				case XMLStreamConstants.END_ELEMENT:"
"StaxEventXMLReader.java:115"$0$0$0$1$20$"					elementDepth--;"
"StaxEventXMLReader.java:116"$0$0$0$5$29$"					if (elementDepth >= 0) {"
"StaxEventXMLReader.java:117"$0$0$0$1$45$"						handleEndElement(event.asEndElement());"
"StaxEventXMLReader.java:118"$0$0$0$1$6$"					}"
"StaxEventXMLReader.java:119"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:120"$0$0$0$2$51$"				case XMLStreamConstants.PROCESSING_INSTRUCTION:"
"StaxEventXMLReader.java:121"$0$0$0$2$64$"					handleProcessingInstruction((ProcessingInstruction) event);"
"StaxEventXMLReader.java:122"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:123"$0$0$0$2$39$"				case XMLStreamConstants.CHARACTERS:"
"StaxEventXMLReader.java:124"$0$0$0$2$34$"				case XMLStreamConstants.SPACE:"
"StaxEventXMLReader.java:125"$0$0$0$2$34$"				case XMLStreamConstants.CDATA:"
"StaxEventXMLReader.java:126"$0$0$0$1$44$"					handleCharacters(event.asCharacters());"
"StaxEventXMLReader.java:127"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:128"$0$0$0$2$41$"				case XMLStreamConstants.END_DOCUMENT:"
"StaxEventXMLReader.java:129"$0$0$0$1$25$"					handleEndDocument();"
"StaxEventXMLReader.java:130"$0$0$0$3$26$"					documentEnded = true;"
"StaxEventXMLReader.java:131"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:132"$0$0$0$2$49$"				case XMLStreamConstants.NOTATION_DECLARATION:"
"StaxEventXMLReader.java:133"$0$0$0$2$60$"					handleNotationDeclaration((NotationDeclaration) event);"
"StaxEventXMLReader.java:134"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:135"$0$0$0$2$47$"				case XMLStreamConstants.ENTITY_DECLARATION:"
"StaxEventXMLReader.java:136"$0$0$0$2$56$"					handleEntityDeclaration((EntityDeclaration) event);"
"StaxEventXMLReader.java:137"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:138"$0$0$0$2$36$"				case XMLStreamConstants.COMMENT:"
"StaxEventXMLReader.java:139"$0$0$0$2$36$"					handleComment((Comment) event);"
"StaxEventXMLReader.java:140"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:141"$0$0$0$2$32$"				case XMLStreamConstants.DTD:"
"StaxEventXMLReader.java:142"$0$0$0$2$28$"					handleDtd((DTD) event);"
"StaxEventXMLReader.java:143"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:144"$0$0$0$2$45$"				case XMLStreamConstants.ENTITY_REFERENCE:"
"StaxEventXMLReader.java:145"$0$0$0$2$52$"					handleEntityReference((EntityReference) event);"
"StaxEventXMLReader.java:146"$0$0$0$1$11$"					break;"
"StaxEventXMLReader.java:147"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:148"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:149"$0$0$0$5$42$"		if (documentStarted && !documentEnded) {"
"StaxEventXMLReader.java:150"$0$0$0$1$23$"			handleEndDocument();"
"StaxEventXMLReader.java:151"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:152"$0$0$0$0$0$""
"StaxEventXMLReader.java:153"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:154"$0$0$0$0$0$""
"StaxEventXMLReader.java:155"$0$0$0$8$77$"	private void handleStartDocument(final XMLEvent event) throws SAXException {"
"StaxEventXMLReader.java:156"$0$0$0$3$32$"		if (event.isStartDocument()) {"
"StaxEventXMLReader.java:157"$0$0$0$5$55$"			StartDocument startDocument = (StartDocument) event;"
"StaxEventXMLReader.java:158"$1$0$0$4$50$"			String xmlVersion = startDocument.getVersion();"
"StaxEventXMLReader.java:159"$0$0$0$3$43$"			if (StringUtils.hasLength(xmlVersion)) {"
"StaxEventXMLReader.java:160"$0$0$0$3$33$"				this.xmlVersion = xmlVersion;"
"StaxEventXMLReader.java:161"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:162"$0$0$0$3$37$"			if (startDocument.encodingSet()) {"
"StaxEventXMLReader.java:163"$1$0$0$3$63$"				this.encoding = startDocument.getCharacterEncodingScheme();"
"StaxEventXMLReader.java:164"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:165"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:166"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxEventXMLReader.java:167"$1$0$0$5$49$"			final Location location = event.getLocation();"
"StaxEventXMLReader.java:168"$1$0$0$3$58$"			getContentHandler().setDocumentLocator(new Locator2() {"
"StaxEventXMLReader.java:169"$0$0$0$1$13$"				@Override"
"StaxEventXMLReader.java:170"$1$0$0$4$34$"				public int getColumnNumber() {"
"StaxEventXMLReader.java:171"$1$0$0$8$65$"					return (location != null ? location.getColumnNumber() : -1);"
"StaxEventXMLReader.java:172"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:173"$0$0$0$1$13$"				@Override"
"StaxEventXMLReader.java:174"$1$0$0$4$32$"				public int getLineNumber() {"
"StaxEventXMLReader.java:175"$1$0$0$8$63$"					return (location != null ? location.getLineNumber() : -1);"
"StaxEventXMLReader.java:176"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:177"$0$0$0$1$13$"				@Override"
"StaxEventXMLReader.java:178"$0$0$0$1$13$"				@Nullable"
"StaxEventXMLReader.java:179"$1$0$0$4$33$"				public String getPublicId() {"
"StaxEventXMLReader.java:180"$1$0$0$8$63$"					return (location != null ? location.getPublicId() : null);"
"StaxEventXMLReader.java:181"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:182"$0$0$0$1$13$"				@Override"
"StaxEventXMLReader.java:183"$0$0$0$1$13$"				@Nullable"
"StaxEventXMLReader.java:184"$1$0$0$4$33$"				public String getSystemId() {"
"StaxEventXMLReader.java:185"$1$0$0$8$63$"					return (location != null ? location.getSystemId() : null);"
"StaxEventXMLReader.java:186"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:187"$0$0$0$1$13$"				@Override"
"StaxEventXMLReader.java:188"$1$0$0$4$35$"				public String getXMLVersion() {"
"StaxEventXMLReader.java:189"$0$0$0$2$23$"					return xmlVersion;"
"StaxEventXMLReader.java:190"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:191"$0$0$0$1$13$"				@Override"
"StaxEventXMLReader.java:192"$0$0$0$1$13$"				@Nullable"
"StaxEventXMLReader.java:193"$1$0$0$4$33$"				public String getEncoding() {"
"StaxEventXMLReader.java:194"$0$0$0$2$21$"					return encoding;"
"StaxEventXMLReader.java:195"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:196"$0$0$0$1$6$"			});"
"StaxEventXMLReader.java:197"$1$0$0$1$39$"			getContentHandler().startDocument();"
"StaxEventXMLReader.java:198"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:199"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:200"$0$0$0$0$0$""
"StaxEventXMLReader.java:201"$0$0$0$7$81$"	private void handleStartElement(StartElement startElement) throws SAXException {"
"StaxEventXMLReader.java:202"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxEventXMLReader.java:203"$1$0$0$4$40$"			QName qName = startElement.getName();"
"StaxEventXMLReader.java:204"$0$0$0$3$32$"			if (hasNamespacesFeature()) {"
"StaxEventXMLReader.java:205"$1$0$0$7$67$"				for (Iterator i = startElement.getNamespaces(); i.hasNext();) {"
"StaxEventXMLReader.java:206"$0$0$0$5$48$"					Namespace namespace = (Namespace) i.next();"
"StaxEventXMLReader.java:207"$2$0$0$2$76$"					startPrefixMapping(namespace.getPrefix(), namespace.getNamespaceURI());"
"StaxEventXMLReader.java:208"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:209"$1$0$0$6$66$"				for (Iterator i = startElement.getAttributes(); i.hasNext();){"
"StaxEventXMLReader.java:210"$0$0$0$5$48$"					Attribute attribute = (Attribute) i.next();"
"StaxEventXMLReader.java:211"$1$0$0$4$47$"					QName attributeName = attribute.getName();"
"StaxEventXMLReader.java:212"$2$0$0$2$84$"					startPrefixMapping(attributeName.getPrefix(), attributeName.getNamespaceURI());"
"StaxEventXMLReader.java:213"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:214"$0$0$0$0$0$""
"StaxEventXMLReader.java:215"$3$0$0$3$107$"				getContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName),"
"StaxEventXMLReader.java:216"$1$0$0$1$35$"						getAttributes(startElement));"
"StaxEventXMLReader.java:217"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:218"$0$0$0$2$9$"			else {"
"StaxEventXMLReader.java:219"$2$0$0$4$98$"				getContentHandler().startElement("""", """", toQualifiedName(qName), getAttributes(startElement));"
"StaxEventXMLReader.java:220"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:221"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:222"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:223"$0$0$0$0$0$""
"StaxEventXMLReader.java:224"$0$0$0$7$75$"	private void handleCharacters(Characters characters) throws SAXException {"
"StaxEventXMLReader.java:225"$1$0$0$4$51$"		char[] data = characters.getData().toCharArray();"
"StaxEventXMLReader.java:226"$1$0$0$7$74$"		if (getContentHandler() != null && characters.isIgnorableWhiteSpace()) {"
"StaxEventXMLReader.java:227"$1$0$0$3$65$"			getContentHandler().ignorableWhitespace(data, 0, data.length);"
"StaxEventXMLReader.java:228"$0$0$0$1$10$"			return;"
"StaxEventXMLReader.java:229"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:230"$1$0$0$7$60$"		if (characters.isCData() && getLexicalHandler() != null) {"
"StaxEventXMLReader.java:231"$1$0$0$1$36$"			getLexicalHandler().startCDATA();"
"StaxEventXMLReader.java:232"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:233"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxEventXMLReader.java:234"$1$0$0$3$56$"			getContentHandler().characters(data, 0, data.length);"
"StaxEventXMLReader.java:235"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:236"$1$0$0$7$60$"		if (characters.isCData() && getLexicalHandler() != null) {"
"StaxEventXMLReader.java:237"$1$0$0$1$34$"			getLexicalHandler().endCDATA();"
"StaxEventXMLReader.java:238"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:239"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:240"$0$0$0$0$0$""
"StaxEventXMLReader.java:241"$0$0$0$7$75$"	private void handleEndElement(EndElement endElement) throws SAXException {"
"StaxEventXMLReader.java:242"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxEventXMLReader.java:243"$1$0$0$4$38$"			QName qName = endElement.getName();"
"StaxEventXMLReader.java:244"$0$0$0$3$32$"			if (hasNamespacesFeature()) {"
"StaxEventXMLReader.java:245"$3$0$0$3$106$"				getContentHandler().endElement(qName.getNamespaceURI(), qName.getLocalPart(), toQualifiedName(qName));"
"StaxEventXMLReader.java:246"$1$0$0$7$65$"				for (Iterator i = endElement.getNamespaces(); i.hasNext();) {"
"StaxEventXMLReader.java:247"$0$0$0$5$48$"					Namespace namespace = (Namespace) i.next();"
"StaxEventXMLReader.java:248"$1$0$0$1$45$"					endPrefixMapping(namespace.getPrefix());"
"StaxEventXMLReader.java:249"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:250"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:251"$0$0$0$2$9$"			else {"
"StaxEventXMLReader.java:252"$1$0$0$3$67$"				getContentHandler().endElement("""", """", toQualifiedName(qName));"
"StaxEventXMLReader.java:253"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:254"$0$0$0$0$0$""
"StaxEventXMLReader.java:255"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:256"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:257"$0$0$0$0$0$""
"StaxEventXMLReader.java:258"$0$0$0$6$55$"	private void handleEndDocument() throws SAXException {"
"StaxEventXMLReader.java:259"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxEventXMLReader.java:260"$1$0$0$1$37$"			getContentHandler().endDocument();"
"StaxEventXMLReader.java:261"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:262"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:263"$0$0$0$0$0$""
"StaxEventXMLReader.java:264"$0$0$0$7$94$"	private void handleNotationDeclaration(NotationDeclaration declaration) throws SAXException {"
"StaxEventXMLReader.java:265"$1$0$0$5$32$"		if (getDTDHandler() != null) {"
"StaxEventXMLReader.java:266"$4$0$0$3$109$"			getDTDHandler().notationDecl(declaration.getName(), declaration.getPublicId(), declaration.getSystemId());"
"StaxEventXMLReader.java:267"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:268"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:269"$0$0$0$0$0$""
"StaxEventXMLReader.java:270"$0$0$0$7$96$"	private void handleEntityDeclaration(EntityDeclaration entityDeclaration) throws SAXException {"
"StaxEventXMLReader.java:271"$1$0$0$5$32$"		if (getDTDHandler() != null) {"
"StaxEventXMLReader.java:272"$3$0$0$2$99$"			getDTDHandler().unparsedEntityDecl(entityDeclaration.getName(), entityDeclaration.getPublicId(),"
"StaxEventXMLReader.java:273"$2$0$0$2$75$"					entityDeclaration.getSystemId(), entityDeclaration.getNotationName());"
"StaxEventXMLReader.java:274"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:275"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:276"$0$0$0$0$0$""
"StaxEventXMLReader.java:277"$0$0$0$7$89$"	private void handleProcessingInstruction(ProcessingInstruction pi) throws SAXException {"
"StaxEventXMLReader.java:278"$1$0$0$5$36$"		if (getContentHandler() != null) {"
"StaxEventXMLReader.java:279"$4$0$0$2$75$"			getContentHandler().processingInstruction(pi.getTarget(), pi.getData());"
"StaxEventXMLReader.java:280"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:281"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:282"$0$0$0$0$0$""
"StaxEventXMLReader.java:283"$0$0$0$7$66$"	private void handleComment(Comment comment) throws SAXException {"
"StaxEventXMLReader.java:284"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxEventXMLReader.java:285"$1$0$0$4$47$"			char[] ch = comment.getText().toCharArray();"
"StaxEventXMLReader.java:286"$1$0$0$3$49$"			getLexicalHandler().comment(ch, 0, ch.length);"
"StaxEventXMLReader.java:287"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:288"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:289"$0$0$0$0$0$""
"StaxEventXMLReader.java:290"$0$0$0$7$54$"	private void handleDtd(DTD dtd) throws SAXException {"
"StaxEventXMLReader.java:291"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxEventXMLReader.java:292"$1$0$0$4$58$"			javax.xml.stream.Location location = dtd.getLocation();"
"StaxEventXMLReader.java:293"$3$0$0$3$86$"			getLexicalHandler().startDTD(null, location.getPublicId(), location.getSystemId());"
"StaxEventXMLReader.java:294"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:295"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxEventXMLReader.java:296"$1$0$0$1$32$"			getLexicalHandler().endDTD();"
"StaxEventXMLReader.java:297"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:298"$0$0$0$0$0$""
"StaxEventXMLReader.java:299"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:300"$0$0$0$0$0$""
"StaxEventXMLReader.java:301"$0$0$0$7$84$"	private void handleEntityReference(EntityReference reference) throws SAXException {"
"StaxEventXMLReader.java:302"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxEventXMLReader.java:303"$2$0$0$1$56$"			getLexicalHandler().startEntity(reference.getName());"
"StaxEventXMLReader.java:304"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:305"$1$0$0$5$36$"		if (getLexicalHandler() != null) {"
"StaxEventXMLReader.java:306"$2$0$0$1$54$"			getLexicalHandler().endEntity(reference.getName());"
"StaxEventXMLReader.java:307"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:308"$0$0$0$0$0$""
"StaxEventXMLReader.java:309"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:310"$0$0$0$0$0$""
"StaxEventXMLReader.java:311"$1$0$0$5$55$"	private Attributes getAttributes(StartElement event) {"
"StaxEventXMLReader.java:312"$0$0$0$5$51$"		AttributesImpl attributes = new AttributesImpl();"
"StaxEventXMLReader.java:313"$1$0$0$7$58$"		for (Iterator i = event.getAttributes(); i.hasNext();) {"
"StaxEventXMLReader.java:314"$0$0$0$5$46$"			Attribute attribute = (Attribute) i.next();"
"StaxEventXMLReader.java:315"$1$0$0$4$37$"			QName qName = attribute.getName();"
"StaxEventXMLReader.java:316"$1$0$0$4$46$"			String namespace = qName.getNamespaceURI();"
"StaxEventXMLReader.java:317"$0$0$0$7$54$"			if (namespace == null || !hasNamespacesFeature()) {"
"StaxEventXMLReader.java:318"$0$0$0$3$19$"				namespace = """";"
"StaxEventXMLReader.java:319"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:320"$1$0$0$4$40$"			String type = attribute.getDTDType();"
"StaxEventXMLReader.java:321"$0$0$0$5$22$"			if (type == null) {"
"StaxEventXMLReader.java:322"$0$0$0$3$19$"				type = ""CDATA"";"
"StaxEventXMLReader.java:323"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:324"$2$0$0$5$112$"			attributes.addAttribute(namespace, qName.getLocalPart(), toQualifiedName(qName), type, attribute.getValue());"
"StaxEventXMLReader.java:325"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:326"$0$0$0$3$38$"		if (hasNamespacePrefixesFeature()) {"
"StaxEventXMLReader.java:327"$1$0$0$7$59$"			for (Iterator i = event.getNamespaces(); i.hasNext();) {"
"StaxEventXMLReader.java:328"$0$0$0$5$47$"				Namespace namespace = (Namespace) i.next();"
"StaxEventXMLReader.java:329"$1$0$0$4$42$"				String prefix = namespace.getPrefix();"
"StaxEventXMLReader.java:330"$1$0$0$4$54$"				String namespaceUri = namespace.getNamespaceURI();"
"StaxEventXMLReader.java:331"$0$0$0$2$17$"				String qName;"
"StaxEventXMLReader.java:332"$0$0$0$3$40$"				if (StringUtils.hasLength(prefix)) {"
"StaxEventXMLReader.java:333"$0$0$0$5$31$"					qName = ""xmlns:"" + prefix;"
"StaxEventXMLReader.java:334"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:335"$0$0$0$2$10$"				else {"
"StaxEventXMLReader.java:336"$0$0$0$3$21$"					qName = ""xmlns"";"
"StaxEventXMLReader.java:337"$0$0$0$1$5$"				}"
"StaxEventXMLReader.java:338"$0$0$0$5$66$"				attributes.addAttribute("""", """", qName, ""CDATA"", namespaceUri);"
"StaxEventXMLReader.java:339"$0$0$0$1$4$"			}"
"StaxEventXMLReader.java:340"$0$0$0$1$3$"		}"
"StaxEventXMLReader.java:341"$0$0$0$0$0$""
"StaxEventXMLReader.java:342"$0$0$0$2$20$"		return attributes;"
"StaxEventXMLReader.java:343"$0$0$0$1$2$"	}"
"StaxEventXMLReader.java:344"$0$0$0$0$0$""
"StaxEventXMLReader.java:345"$0$0$0$1$1$"}"
"AnnotatedElementUtils.java:1"$0$0$0$1$2$"/*"
"AnnotatedElementUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AnnotatedElementUtils.java:3"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotatedElementUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotatedElementUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotatedElementUtils.java:7"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotatedElementUtils.java:9"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotatedElementUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotatedElementUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotatedElementUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotatedElementUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotatedElementUtils.java:15"$0$0$0$1$3$" */"
"AnnotatedElementUtils.java:16"$0$0$0$0$0$""
"AnnotatedElementUtils.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"AnnotatedElementUtils.java:18"$0$0$0$0$0$""
"AnnotatedElementUtils.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"AnnotatedElementUtils.java:20"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"AnnotatedElementUtils.java:21"$0$0$0$2$29$"import java.util.Collections;"
"AnnotatedElementUtils.java:22"$0$0$0$2$28$"import java.util.Comparator;"
"AnnotatedElementUtils.java:23"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"AnnotatedElementUtils.java:24"$0$0$0$2$21$"import java.util.Set;"
"AnnotatedElementUtils.java:25"$0$0$0$2$35$"import java.util.stream.Collectors;"
"AnnotatedElementUtils.java:26"$0$0$0$0$0$""
"AnnotatedElementUtils.java:27"$0$0$0$2$53$"import org.springframework.core.BridgeMethodResolver;"
"AnnotatedElementUtils.java:28"$0$0$0$2$66$"import org.springframework.core.annotation.MergedAnnotation.Adapt;"
"AnnotatedElementUtils.java:29"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"AnnotatedElementUtils.java:30"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AnnotatedElementUtils.java:31"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"AnnotatedElementUtils.java:32"$0$0$0$0$0$""
"AnnotatedElementUtils.java:33"$0$0$0$1$3$"/**"
"AnnotatedElementUtils.java:34"$0$0$0$9$73$" * General utility methods for finding annotations, meta-annotations, and"
"AnnotatedElementUtils.java:35"$0$0$0$7$72$" * repeatable annotations on {@link AnnotatedElement AnnotatedElements}."
"AnnotatedElementUtils.java:36"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:37"$0$0$0$9$71$" * <p>{@code AnnotatedElementUtils} defines the public API for Spring's"
"AnnotatedElementUtils.java:38"$0$0$0$9$78$" * meta-annotation programming model with support for <em>annotation attribute"
"AnnotatedElementUtils.java:39"$0$0$0$11$70$" * overrides</em>. If you do not need support for annotation attribute"
"AnnotatedElementUtils.java:40"$0$0$0$7$61$" * overrides, consider using {@link AnnotationUtils} instead."
"AnnotatedElementUtils.java:41"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:42"$0$0$0$14$72$" * <p>Note that the features of this class are not provided by the JDK's"
"AnnotatedElementUtils.java:43"$0$0$0$4$39$" * introspection facilities themselves."
"AnnotatedElementUtils.java:44"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:45"$0$0$0$4$42$" * <h3>Annotation Attribute Overrides</h3>"
"AnnotatedElementUtils.java:46"$0$0$0$8$71$" * <p>Support for meta-annotations with <em>attribute overrides</em> in"
"AnnotatedElementUtils.java:47"$0$0$0$10$67$" * <em>composed annotations</em> is provided by all variants of the"
"AnnotatedElementUtils.java:48"$2$0$0$5$74$" * {@code getMergedAnnotationAttributes()}, {@code getMergedAnnotation()},"
"AnnotatedElementUtils.java:49"$2$0$0$5$79$" * {@code getAllMergedAnnotations()}, {@code getMergedRepeatableAnnotations()},"
"AnnotatedElementUtils.java:50"$0$0$0$5$76$" * {@code findMergedAnnotationAttributes()}, {@code findMergedAnnotation()},"
"AnnotatedElementUtils.java:51"$0$0$0$6$84$" * {@code findAllMergedAnnotations()}, and {@code findMergedRepeatableAnnotations()}"
"AnnotatedElementUtils.java:52"$0$0$0$2$11$" * methods."
"AnnotatedElementUtils.java:53"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:54"$0$0$0$5$34$" * <h3>Find vs. Get Semantics</h3>"
"AnnotatedElementUtils.java:55"$0$0$0$12$71$" * <p>The search algorithms used by methods in this class follow either"
"AnnotatedElementUtils.java:56"$1$0$0$10$73$" * <em>find</em> or <em>get</em> semantics. Consult the javadocs for each"
"AnnotatedElementUtils.java:57"$0$0$0$11$67$" * individual method for details on which search algorithm is used."
"AnnotatedElementUtils.java:58"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:59"$0$0$0$9$77$" * <p><strong>Get semantics</strong> are limited to searching for annotations"
"AnnotatedElementUtils.java:60"$0$0$0$11$81$" * that are either <em>present</em> on an {@code AnnotatedElement} (i.e. declared"
"AnnotatedElementUtils.java:61"$0$0$0$8$80$" * locally or {@linkplain java.lang.annotation.Inherited inherited}) or declared"
"AnnotatedElementUtils.java:62"$0$0$0$9$79$" * within the annotation hierarchy <em>above</em> the {@code AnnotatedElement}."
"AnnotatedElementUtils.java:63"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:64"$0$0$0$8$73$" * <p><strong>Find semantics</strong> are much more exhaustive, providing"
"AnnotatedElementUtils.java:65"$1$0$0$8$57$" * <em>get semantics</em> plus support for the following:"
"AnnotatedElementUtils.java:66"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:67"$0$0$0$2$7$" * <ul>"
"AnnotatedElementUtils.java:68"$0$0$0$11$67$" * <li>Searching on interfaces, if the annotated element is a class"
"AnnotatedElementUtils.java:69"$0$0$0$11$69$" * <li>Searching on superclasses, if the annotated element is a class"
"AnnotatedElementUtils.java:70"$0$0$0$11$70$" * <li>Resolving bridged methods, if the annotated element is a method"
"AnnotatedElementUtils.java:71"$0$0$0$13$79$" * <li>Searching on methods in interfaces, if the annotated element is a method"
"AnnotatedElementUtils.java:72"$0$0$0$13$81$" * <li>Searching on methods in superclasses, if the annotated element is a method"
"AnnotatedElementUtils.java:73"$0$0$0$2$8$" * </ul>"
"AnnotatedElementUtils.java:74"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:75"$0$0$0$5$42$" * <h3>Support for {@code @Inherited}</h3>"
"AnnotatedElementUtils.java:76"$1$0$0$11$80$" * <p>Methods following <em>get semantics</em> will honor the contract of Java's"
"AnnotatedElementUtils.java:77"$0$0$0$8$83$" * {@link java.lang.annotation.Inherited @Inherited} annotation except that locally"
"AnnotatedElementUtils.java:78"$0$0$0$11$84$" * declared annotations (including custom composed annotations) will be favored over"
"AnnotatedElementUtils.java:79"$0$0$0$9$80$" * inherited annotations. In contrast, methods following <em>find semantics</em>"
"AnnotatedElementUtils.java:80"$0$0$0$12$84$" * will completely ignore the presence of {@code @Inherited} since the <em>find</em>"
"AnnotatedElementUtils.java:81"$0$0$0$11$78$" * search algorithm manually traverses type and method hierarchies and thereby"
"AnnotatedElementUtils.java:82"$0$0$0$11$84$" * implicitly supports annotation inheritance without a need for {@code @Inherited}."
"AnnotatedElementUtils.java:83"$0$0$0$1$2$" *"
"AnnotatedElementUtils.java:84"$0$0$0$4$23$" * @author Phillip Webb"
"AnnotatedElementUtils.java:85"$0$0$0$4$26$" * @author Juergen Hoeller"
"AnnotatedElementUtils.java:86"$0$0$0$4$22$" * @author Sam Brannen"
"AnnotatedElementUtils.java:87"$0$0$0$3$13$" * @since 4.0"
"AnnotatedElementUtils.java:88"$0$0$0$3$16$" * @see AliasFor"
"AnnotatedElementUtils.java:89"$0$0$0$3$28$" * @see AnnotationAttributes"
"AnnotatedElementUtils.java:90"$0$0$0$3$23$" * @see AnnotationUtils"
"AnnotatedElementUtils.java:91"$0$0$0$3$28$" * @see BridgeMethodResolver"
"AnnotatedElementUtils.java:92"$0$0$0$1$3$" */"
"AnnotatedElementUtils.java:93"$0$0$0$5$45$"public abstract class AnnotatedElementUtils {"
"AnnotatedElementUtils.java:94"$0$0$0$0$0$""
"AnnotatedElementUtils.java:95"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:96"$0$0$0$10$72$"	 * Build an adapted {@link AnnotatedElement} for the given annotations,"
"AnnotatedElementUtils.java:97"$0$0$0$10$74$"	 * typically for use with other methods on {@link AnnotatedElementUtils}."
"AnnotatedElementUtils.java:98"$0$0$0$11$85$"	 * @param annotations the annotations to expose through the {@code AnnotatedElement}"
"AnnotatedElementUtils.java:99"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:100"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:101"$0$0$0$6$75$"	public static AnnotatedElement forAnnotations(Annotation... annotations) {"
"AnnotatedElementUtils.java:102"$0$0$0$3$57$"		return new AnnotatedElementForAnnotations(annotations);"
"AnnotatedElementUtils.java:103"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:104"$0$0$0$0$0$""
"AnnotatedElementUtils.java:105"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:106"$0$0$0$11$68$"	 * Get the fully qualified class names of all meta-annotation types"
"AnnotatedElementUtils.java:107"$0$0$0$10$80$"	 * <em>present</em> on the annotation (of the specified {@code annotationType})"
"AnnotatedElementUtils.java:108"$0$0$0$6$45$"	 * on the supplied {@link AnnotatedElement}."
"AnnotatedElementUtils.java:109"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:110"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:111"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:112"$0$0$0$11$79$"	 * @param annotationType the annotation type on which to find meta-annotations"
"AnnotatedElementUtils.java:113"$0$0$0$11$72$"	 * @return the names of all meta-annotations present on the annotation,"
"AnnotatedElementUtils.java:114"$0$0$0$8$32$"	 * or an empty set if not found"
"AnnotatedElementUtils.java:115"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:116"$1$0$0$4$58$"	 * @see #getMetaAnnotationTypes(AnnotatedElement, String)"
"AnnotatedElementUtils.java:117"$0$0$0$3$32$"	 * @see #hasMetaAnnotationTypes"
"AnnotatedElementUtils.java:118"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:119"$1$0$0$5$75$"	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element,"
"AnnotatedElementUtils.java:120"$0$0$0$5$48$"			Class<? extends Annotation> annotationType) {"
"AnnotatedElementUtils.java:121"$0$0$0$0$0$""
"AnnotatedElementUtils.java:122"$2$0$0$3$80$"		return getMetaAnnotationTypes(element, element.getAnnotation(annotationType));"
"AnnotatedElementUtils.java:123"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:124"$0$0$0$0$0$""
"AnnotatedElementUtils.java:125"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:126"$0$0$0$10$62$"	 * Get the fully qualified class names of all meta-annotation"
"AnnotatedElementUtils.java:127"$0$0$0$9$62$"	 * types <em>present</em> on the annotation (of the specified"
"AnnotatedElementUtils.java:128"$0$0$0$8$69$"	 * {@code annotationName}) on the supplied {@link AnnotatedElement}."
"AnnotatedElementUtils.java:129"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:130"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:131"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:132"$0$0$0$11$74$"	 * @param annotationName the fully qualified class name of the annotation"
"AnnotatedElementUtils.java:133"$0$0$0$7$42$"	 * type on which to find meta-annotations"
"AnnotatedElementUtils.java:134"$0$0$0$11$72$"	 * @return the names of all meta-annotations present on the annotation,"
"AnnotatedElementUtils.java:135"$0$0$0$8$33$"	 * or an empty set if none found"
"AnnotatedElementUtils.java:136"$1$0$0$4$57$"	 * @see #getMetaAnnotationTypes(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:137"$0$0$0$3$32$"	 * @see #hasMetaAnnotationTypes"
"AnnotatedElementUtils.java:138"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:139"$1$0$0$8$100$"	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element, String annotationName) {"
"AnnotatedElementUtils.java:140"$1$0$0$6$58$"		for (Annotation annotation : element.getAnnotations()) {"
"AnnotatedElementUtils.java:141"$1$0$0$3$70$"			if (annotation.annotationType().getName().equals(annotationName)) {"
"AnnotatedElementUtils.java:142"$1$0$0$3$55$"				return getMetaAnnotationTypes(element, annotation);"
"AnnotatedElementUtils.java:143"$0$0$0$1$4$"			}"
"AnnotatedElementUtils.java:144"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:145"$0$0$0$2$32$"		return Collections.emptySet();"
"AnnotatedElementUtils.java:146"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:147"$0$0$0$0$0$""
"AnnotatedElementUtils.java:148"$1$0$0$9$111$"	private static Set<String> getMetaAnnotationTypes(AnnotatedElement element, @Nullable Annotation annotation) {"
"AnnotatedElementUtils.java:149"$0$0$0$5$27$"		if (annotation == null) {"
"AnnotatedElementUtils.java:150"$0$0$0$2$33$"			return Collections.emptySet();"
"AnnotatedElementUtils.java:151"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:152"$1$0$0$2$61$"		return getAnnotations(annotation.annotationType()).stream()"
"AnnotatedElementUtils.java:153"$2$0$0$3$66$"				.map(mergedAnnotation -> mergedAnnotation.getType().getName())"
"AnnotatedElementUtils.java:154"$0$0$0$1$58$"				.collect(Collectors.toCollection(LinkedHashSet::new));"
"AnnotatedElementUtils.java:155"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:156"$0$0$0$0$0$""
"AnnotatedElementUtils.java:157"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:158"$0$0$0$10$72$"	 * Determine if the supplied {@link AnnotatedElement} is annotated with"
"AnnotatedElementUtils.java:159"$0$0$0$9$65$"	 * a <em>composed annotation</em> that is meta-annotated with an"
"AnnotatedElementUtils.java:160"$0$0$0$7$55$"	 * annotation of the specified {@code annotationType}."
"AnnotatedElementUtils.java:161"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:162"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:163"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:164"$0$0$0$8$58$"	 * @param annotationType the meta-annotation type to find"
"AnnotatedElementUtils.java:165"$0$0$0$10$65$"	 * @return {@code true} if a matching meta-annotation is present"
"AnnotatedElementUtils.java:166"$0$0$0$3$16$"	 * @since 4.2.3"
"AnnotatedElementUtils.java:167"$1$0$0$3$32$"	 * @see #getMetaAnnotationTypes"
"AnnotatedElementUtils.java:168"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:169"$0$0$0$10$117$"	public static boolean hasMetaAnnotationTypes(AnnotatedElement element, Class<? extends Annotation> annotationType) {"
"AnnotatedElementUtils.java:170"$1$0$0$2$98$"		return getAnnotations(element).stream(annotationType).anyMatch(MergedAnnotation::isMetaPresent);"
"AnnotatedElementUtils.java:171"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:172"$0$0$0$0$0$""
"AnnotatedElementUtils.java:173"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:174"$0$0$0$11$74$"	 * Determine if the supplied {@link AnnotatedElement} is annotated with a"
"AnnotatedElementUtils.java:175"$0$0$0$9$74$"	 * <em>composed annotation</em> that is meta-annotated with an annotation"
"AnnotatedElementUtils.java:176"$0$0$0$6$44$"	 * of the specified {@code annotationName}."
"AnnotatedElementUtils.java:177"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:178"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:179"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:180"$0$0$0$10$63$"	 * @param annotationName the fully qualified class name of the"
"AnnotatedElementUtils.java:181"$0$0$0$5$32$"	 * meta-annotation type to find"
"AnnotatedElementUtils.java:182"$0$0$0$10$65$"	 * @return {@code true} if a matching meta-annotation is present"
"AnnotatedElementUtils.java:183"$1$0$0$3$32$"	 * @see #getMetaAnnotationTypes"
"AnnotatedElementUtils.java:184"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:185"$0$0$0$8$96$"	public static boolean hasMetaAnnotationTypes(AnnotatedElement element, String annotationName) {"
"AnnotatedElementUtils.java:186"$1$0$0$2$98$"		return getAnnotations(element).stream(annotationName).anyMatch(MergedAnnotation::isMetaPresent);"
"AnnotatedElementUtils.java:187"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:188"$0$0$0$0$0$""
"AnnotatedElementUtils.java:189"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:190"$0$0$0$10$70$"	 * Determine if an annotation of the specified {@code annotationType}"
"AnnotatedElementUtils.java:191"$0$0$0$9$67$"	 * is <em>present</em> on the supplied {@link AnnotatedElement} or"
"AnnotatedElementUtils.java:192"$0$0$0$9$73$"	 * within the annotation hierarchy <em>above</em> the specified element."
"AnnotatedElementUtils.java:193"$1$0$0$10$87$"	 * <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes}"
"AnnotatedElementUtils.java:194"$0$0$0$6$33$"	 * will return a non-null value."
"AnnotatedElementUtils.java:195"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:196"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:197"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:198"$0$0$0$8$53$"	 * @param annotationType the annotation type to find"
"AnnotatedElementUtils.java:199"$0$0$0$10$60$"	 * @return {@code true} if a matching annotation is present"
"AnnotatedElementUtils.java:200"$0$0$0$3$16$"	 * @since 4.2.3"
"AnnotatedElementUtils.java:201"$0$0$0$4$48$"	 * @see #hasAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:202"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:203"$0$0$0$10$106$"	public static boolean isAnnotated(AnnotatedElement element, Class<? extends Annotation> annotationType) {"
"AnnotatedElementUtils.java:204"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotatedElementUtils.java:205"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotatedElementUtils.java:206"$0$0$0$2$62$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {"
"AnnotatedElementUtils.java:207"$0$0$0$2$54$"			return element.isAnnotationPresent(annotationType);"
"AnnotatedElementUtils.java:208"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:209"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotatedElementUtils.java:210"$1$0$0$2$59$"		return getAnnotations(element).isPresent(annotationType);"
"AnnotatedElementUtils.java:211"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:212"$0$0$0$0$0$""
"AnnotatedElementUtils.java:213"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:214"$0$0$0$11$73$"	 * Determine if an annotation of the specified {@code annotationName} is"
"AnnotatedElementUtils.java:215"$0$0$0$10$75$"	 * <em>present</em> on the supplied {@link AnnotatedElement} or within the"
"AnnotatedElementUtils.java:216"$0$0$0$7$62$"	 * annotation hierarchy <em>above</em> the specified element."
"AnnotatedElementUtils.java:217"$1$0$0$10$87$"	 * <p>If this method returns {@code true}, then {@link #getMergedAnnotationAttributes}"
"AnnotatedElementUtils.java:218"$0$0$0$6$33$"	 * will return a non-null value."
"AnnotatedElementUtils.java:219"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:220"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:221"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:222"$0$0$0$14$87$"	 * @param annotationName the fully qualified class name of the annotation type to find"
"AnnotatedElementUtils.java:223"$0$0$0$10$60$"	 * @return {@code true} if a matching annotation is present"
"AnnotatedElementUtils.java:224"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:225"$0$0$0$8$85$"	public static boolean isAnnotated(AnnotatedElement element, String annotationName) {"
"AnnotatedElementUtils.java:226"$1$0$0$2$59$"		return getAnnotations(element).isPresent(annotationName);"
"AnnotatedElementUtils.java:227"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:228"$0$0$0$0$0$""
"AnnotatedElementUtils.java:229"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:230"$0$0$0$11$75$"	 * Get the first annotation of the specified {@code annotationType} within"
"AnnotatedElementUtils.java:231"$0$0$0$10$76$"	 * the annotation hierarchy <em>above</em> the supplied {@code element} and"
"AnnotatedElementUtils.java:232"$0$0$0$9$77$"	 * merge that annotation's attributes with <em>matching</em> attributes from"
"AnnotatedElementUtils.java:233"$0$0$0$9$60$"	 * annotations in lower levels of the annotation hierarchy."
"AnnotatedElementUtils.java:234"$0$0$0$9$69$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both"
"AnnotatedElementUtils.java:235"$0$0$0$10$67$"	 * within a single annotation and within the annotation hierarchy."
"AnnotatedElementUtils.java:236"$1$0$0$8$97$"	 * <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)}."
"AnnotatedElementUtils.java:237"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:238"$0$0$0$8$53$"	 * @param annotationType the annotation type to find"
"AnnotatedElementUtils.java:239"$0$0$0$12$81$"	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found"
"AnnotatedElementUtils.java:240"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:241"$1$0$0$6$83$"	 * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:242"$0$0$0$6$84$"	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:243"$1$0$0$4$54$"	 * @see #getMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:244"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:245"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:246"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:247"$1$0$0$4$66$"	public static AnnotationAttributes getMergedAnnotationAttributes("
"AnnotatedElementUtils.java:248"$0$0$0$7$74$"			AnnotatedElement element, Class<? extends Annotation> annotationType) {"
"AnnotatedElementUtils.java:249"$0$0$0$0$0$""
"AnnotatedElementUtils.java:250"$1$0$0$4$64$"		MergedAnnotation<?> mergedAnnotation = getAnnotations(element)"
"AnnotatedElementUtils.java:251"$1$0$0$3$82$"				.get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared());"
"AnnotatedElementUtils.java:252"$1$0$0$4$65$"		return getAnnotationAttributes(mergedAnnotation, false, false);"
"AnnotatedElementUtils.java:253"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:254"$0$0$0$0$0$""
"AnnotatedElementUtils.java:255"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:256"$0$0$0$11$75$"	 * Get the first annotation of the specified {@code annotationName} within"
"AnnotatedElementUtils.java:257"$0$0$0$10$76$"	 * the annotation hierarchy <em>above</em> the supplied {@code element} and"
"AnnotatedElementUtils.java:258"$0$0$0$9$77$"	 * merge that annotation's attributes with <em>matching</em> attributes from"
"AnnotatedElementUtils.java:259"$0$0$0$9$60$"	 * annotations in lower levels of the annotation hierarchy."
"AnnotatedElementUtils.java:260"$0$0$0$9$69$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both"
"AnnotatedElementUtils.java:261"$0$0$0$10$67$"	 * within a single annotation and within the annotation hierarchy."
"AnnotatedElementUtils.java:262"$1$0$0$10$115$"	 * <p>This method delegates to {@link #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)},"
"AnnotatedElementUtils.java:263"$0$0$0$10$95$"	 * supplying {@code false} for {@code classValuesAsString} and {@code nestedAnnotationsAsMap}."
"AnnotatedElementUtils.java:264"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:265"$0$0$0$14$87$"	 * @param annotationName the fully qualified class name of the annotation type to find"
"AnnotatedElementUtils.java:266"$0$0$0$12$81$"	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found"
"AnnotatedElementUtils.java:267"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:268"$1$0$0$6$83$"	 * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:269"$0$0$0$6$84$"	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:270"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:271"$1$0$0$4$62$"	 * @see #getAllAnnotationAttributes(AnnotatedElement, String)"
"AnnotatedElementUtils.java:272"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:273"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:274"$1$0$0$5$91$"	public static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element,"
"AnnotatedElementUtils.java:275"$0$0$0$3$27$"			String annotationName) {"
"AnnotatedElementUtils.java:276"$0$0$0$0$0$""
"AnnotatedElementUtils.java:277"$1$0$0$5$78$"		return getMergedAnnotationAttributes(element, annotationName, false, false);"
"AnnotatedElementUtils.java:278"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:279"$0$0$0$0$0$""
"AnnotatedElementUtils.java:280"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:281"$0$0$0$11$75$"	 * Get the first annotation of the specified {@code annotationName} within"
"AnnotatedElementUtils.java:282"$0$0$0$10$76$"	 * the annotation hierarchy <em>above</em> the supplied {@code element} and"
"AnnotatedElementUtils.java:283"$0$0$0$9$77$"	 * merge that annotation's attributes with <em>matching</em> attributes from"
"AnnotatedElementUtils.java:284"$0$0$0$9$60$"	 * annotations in lower levels of the annotation hierarchy."
"AnnotatedElementUtils.java:285"$0$0$0$11$83$"	 * <p>Attributes from lower levels in the annotation hierarchy override attributes"
"AnnotatedElementUtils.java:286"$0$0$0$14$85$"	 * of the same name from higher levels, and {@link AliasFor @AliasFor} semantics are"
"AnnotatedElementUtils.java:287"$0$0$0$13$89$"	 * fully supported, both within a single annotation and within the annotation hierarchy."
"AnnotatedElementUtils.java:288"$1$0$0$11$87$"	 * <p>In contrast to {@link #getAllAnnotationAttributes}, the search algorithm used by"
"AnnotatedElementUtils.java:289"$0$0$0$13$86$"	 * this method will stop searching the annotation hierarchy once the first annotation"
"AnnotatedElementUtils.java:290"$0$0$0$12$77$"	 * of the specified {@code annotationName} has been found. As a consequence,"
"AnnotatedElementUtils.java:291"$0$0$0$11$83$"	 * additional annotations of the specified {@code annotationName} will be ignored."
"AnnotatedElementUtils.java:292"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:293"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:294"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:295"$0$0$0$14$87$"	 * @param annotationName the fully qualified class name of the annotation type to find"
"AnnotatedElementUtils.java:296"$0$0$0$12$85$"	 * @param classValuesAsString whether to convert Class references into Strings or to"
"AnnotatedElementUtils.java:297"$0$0$0$6$37$"	 * preserve them as Class references"
"AnnotatedElementUtils.java:298"$0$0$0$9$80$"	 * @param nestedAnnotationsAsMap whether to convert nested Annotation instances"
"AnnotatedElementUtils.java:299"$0$0$0$12$86$"	 * into {@code AnnotationAttributes} maps or to preserve them as Annotation instances"
"AnnotatedElementUtils.java:300"$0$0$0$12$81$"	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found"
"AnnotatedElementUtils.java:301"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:302"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:303"$0$0$0$6$84$"	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:304"$1$0$0$6$80$"	 * @see #getAllAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:305"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:306"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:307"$1$0$0$5$91$"	public static AnnotationAttributes getMergedAnnotationAttributes(AnnotatedElement element,"
"AnnotatedElementUtils.java:308"$0$0$0$7$88$"			String annotationName, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {"
"AnnotatedElementUtils.java:309"$0$0$0$0$0$""
"AnnotatedElementUtils.java:310"$1$0$0$4$64$"		MergedAnnotation<?> mergedAnnotation = getAnnotations(element)"
"AnnotatedElementUtils.java:311"$1$0$0$3$82$"				.get(annotationName, null, MergedAnnotationSelectors.firstDirectlyDeclared());"
"AnnotatedElementUtils.java:312"$1$0$0$4$96$"		return getAnnotationAttributes(mergedAnnotation, classValuesAsString, nestedAnnotationsAsMap);"
"AnnotatedElementUtils.java:313"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:314"$0$0$0$0$0$""
"AnnotatedElementUtils.java:315"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:316"$0$0$0$11$75$"	 * Get the first annotation of the specified {@code annotationType} within"
"AnnotatedElementUtils.java:317"$0$0$0$9$73$"	 * the annotation hierarchy <em>above</em> the supplied {@code element},"
"AnnotatedElementUtils.java:318"$0$0$0$9$77$"	 * merge that annotation's attributes with <em>matching</em> attributes from"
"AnnotatedElementUtils.java:319"$0$0$0$11$75$"	 * annotations in lower levels of the annotation hierarchy, and synthesize"
"AnnotatedElementUtils.java:320"$0$0$0$12$79$"	 * the result back into an annotation of the specified {@code annotationType}."
"AnnotatedElementUtils.java:321"$0$0$0$9$69$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both"
"AnnotatedElementUtils.java:322"$0$0$0$10$67$"	 * within a single annotation and within the annotation hierarchy."
"AnnotatedElementUtils.java:323"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:324"$0$0$0$8$53$"	 * @param annotationType the annotation type to find"
"AnnotatedElementUtils.java:325"$0$0$0$13$84$"	 * @return the merged, synthesized {@code Annotation}, or {@code null} if not found"
"AnnotatedElementUtils.java:326"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:327"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:328"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:329"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:330"$1$0$0$11$112$"	public static <A extends Annotation> A getMergedAnnotation(AnnotatedElement element, Class<A> annotationType) {"
"AnnotatedElementUtils.java:331"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotatedElementUtils.java:332"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotatedElementUtils.java:333"$0$0$0$2$62$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {"
"AnnotatedElementUtils.java:334"$1$0$0$2$56$"			return element.getDeclaredAnnotation(annotationType);"
"AnnotatedElementUtils.java:335"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:336"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotatedElementUtils.java:337"$1$0$0$2$32$"		return getAnnotations(element)"
"AnnotatedElementUtils.java:338"$1$0$0$3$81$"				.get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared())"
"AnnotatedElementUtils.java:339"$0$0$0$1$58$"				.synthesize(MergedAnnotation::isPresent).orElse(null);"
"AnnotatedElementUtils.java:340"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:341"$0$0$0$0$0$""
"AnnotatedElementUtils.java:342"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:343"$0$0$0$9$80$"	 * Get <strong>all</strong> annotations of the specified {@code annotationType}"
"AnnotatedElementUtils.java:344"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:345"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:346"$0$0$0$11$83$"	 * <em>matching</em> attributes from annotations in lower levels of the annotation"
"AnnotatedElementUtils.java:347"$0$0$0$13$81$"	 * hierarchy and synthesize the results back into an annotation of the specified"
"AnnotatedElementUtils.java:348"$0$0$0$3$27$"	 * {@code annotationType}."
"AnnotatedElementUtils.java:349"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:350"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:351"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:352"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:353"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:354"$0$0$0$11$74$"	 * @param annotationType the annotation type to find (never {@code null})"
"AnnotatedElementUtils.java:355"$0$0$0$11$73$"	 * @return the set of all merged, synthesized {@code Annotations} found,"
"AnnotatedElementUtils.java:356"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:357"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:358"$1$0$0$4$54$"	 * @see #getMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:359"$1$0$0$4$62$"	 * @see #getAllAnnotationAttributes(AnnotatedElement, String)"
"AnnotatedElementUtils.java:360"$0$0$0$4$59$"	 * @see #findAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:361"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:362"$1$0$0$7$69$"	public static <A extends Annotation> Set<A> getAllMergedAnnotations("
"AnnotatedElementUtils.java:363"$0$0$0$5$55$"			AnnotatedElement element, Class<A> annotationType) {"
"AnnotatedElementUtils.java:364"$0$0$0$0$0$""
"AnnotatedElementUtils.java:365"$1$0$0$2$55$"		return getAnnotations(element).stream(annotationType)"
"AnnotatedElementUtils.java:366"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotatedElementUtils.java:367"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:368"$0$0$0$0$0$""
"AnnotatedElementUtils.java:369"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:370"$0$0$0$9$81$"	 * Get <strong>all</strong> annotations of the specified {@code annotationTypes}"
"AnnotatedElementUtils.java:371"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:372"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:373"$0$0$0$10$72$"	 * <em>matching</em> attributes from annotations in lower levels of the"
"AnnotatedElementUtils.java:374"$0$0$0$11$75$"	 * annotation hierarchy and synthesize the results back into an annotation"
"AnnotatedElementUtils.java:375"$0$0$0$6$48$"	 * of the corresponding {@code annotationType}."
"AnnotatedElementUtils.java:376"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:377"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:378"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:379"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:380"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:381"$0$0$0$8$55$"	 * @param annotationTypes the annotation types to find"
"AnnotatedElementUtils.java:382"$0$0$0$11$73$"	 * @return the set of all merged, synthesized {@code Annotations} found,"
"AnnotatedElementUtils.java:383"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:384"$0$0$0$3$14$"	 * @since 5.1"
"AnnotatedElementUtils.java:385"$1$0$0$4$58$"	 * @see #getAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:386"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:387"$1$0$0$5$80$"	public static Set<Annotation> getAllMergedAnnotations(AnnotatedElement element,"
"AnnotatedElementUtils.java:388"$0$0$0$5$54$"			Set<Class<? extends Annotation>> annotationTypes) {"
"AnnotatedElementUtils.java:389"$0$0$0$0$0$""
"AnnotatedElementUtils.java:390"$1$0$0$2$41$"		return getAnnotations(element).stream()"
"AnnotatedElementUtils.java:391"$0$0$0$1$63$"				.filter(MergedAnnotationPredicates.typeIn(annotationTypes))"
"AnnotatedElementUtils.java:392"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotatedElementUtils.java:393"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:394"$0$0$0$0$0$""
"AnnotatedElementUtils.java:395"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:396"$0$0$0$10$83$"	 * Get all <em>repeatable annotations</em> of the specified {@code annotationType}"
"AnnotatedElementUtils.java:397"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:398"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:399"$0$0$0$11$83$"	 * <em>matching</em> attributes from annotations in lower levels of the annotation"
"AnnotatedElementUtils.java:400"$0$0$0$13$81$"	 * hierarchy and synthesize the results back into an annotation of the specified"
"AnnotatedElementUtils.java:401"$0$0$0$3$27$"	 * {@code annotationType}."
"AnnotatedElementUtils.java:402"$0$0$0$13$81$"	 * <p>The container type that holds the repeatable annotations will be looked up"
"AnnotatedElementUtils.java:403"$0$0$0$4$48$"	 * via {@link java.lang.annotation.Repeatable}."
"AnnotatedElementUtils.java:404"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:405"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:406"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:407"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:408"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:409"$0$0$0$11$74$"	 * @param annotationType the annotation type to find (never {@code null})"
"AnnotatedElementUtils.java:410"$0$0$0$11$71$"	 * @return the set of all merged repeatable {@code Annotations} found,"
"AnnotatedElementUtils.java:411"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:412"$0$0$0$10$85$"	 * @throws IllegalArgumentException if the {@code element} or {@code annotationType}"
"AnnotatedElementUtils.java:413"$0$0$0$12$64$"	 * is {@code null}, or if the container type cannot be resolved"
"AnnotatedElementUtils.java:414"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:415"$1$0$0$4$54$"	 * @see #getMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:416"$1$0$0$4$58$"	 * @see #getAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:417"$1$0$0$5$72$"	 * @see #getMergedRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotatedElementUtils.java:418"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:419"$1$0$0$7$76$"	public static <A extends Annotation> Set<A> getMergedRepeatableAnnotations("
"AnnotatedElementUtils.java:420"$0$0$0$5$55$"			AnnotatedElement element, Class<A> annotationType) {"
"AnnotatedElementUtils.java:421"$0$0$0$0$0$""
"AnnotatedElementUtils.java:422"$1$0$0$4$71$"		return getMergedRepeatableAnnotations(element, annotationType, null);"
"AnnotatedElementUtils.java:423"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:424"$0$0$0$0$0$""
"AnnotatedElementUtils.java:425"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:426"$0$0$0$10$83$"	 * Get all <em>repeatable annotations</em> of the specified {@code annotationType}"
"AnnotatedElementUtils.java:427"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:428"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:429"$0$0$0$11$83$"	 * <em>matching</em> attributes from annotations in lower levels of the annotation"
"AnnotatedElementUtils.java:430"$0$0$0$13$81$"	 * hierarchy and synthesize the results back into an annotation of the specified"
"AnnotatedElementUtils.java:431"$0$0$0$3$27$"	 * {@code annotationType}."
"AnnotatedElementUtils.java:432"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:433"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:434"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:435"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:436"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:437"$0$0$0$11$74$"	 * @param annotationType the annotation type to find (never {@code null})"
"AnnotatedElementUtils.java:438"$0$0$0$12$78$"	 * @param containerType the type of the container that holds the annotations;"
"AnnotatedElementUtils.java:439"$0$0$0$14$69$"	 * may be {@code null} if the container type should be looked up via"
"AnnotatedElementUtils.java:440"$0$0$0$3$43$"	 * {@link java.lang.annotation.Repeatable}"
"AnnotatedElementUtils.java:441"$0$0$0$11$71$"	 * @return the set of all merged repeatable {@code Annotations} found,"
"AnnotatedElementUtils.java:442"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:443"$0$0$0$10$85$"	 * @throws IllegalArgumentException if the {@code element} or {@code annotationType}"
"AnnotatedElementUtils.java:444"$0$0$0$12$64$"	 * is {@code null}, or if the container type cannot be resolved"
"AnnotatedElementUtils.java:445"$0$0$0$8$82$"	 * @throws AnnotationConfigurationException if the supplied {@code containerType}"
"AnnotatedElementUtils.java:446"$0$0$0$12$79$"	 * is not a valid container annotation for the supplied {@code annotationType}"
"AnnotatedElementUtils.java:447"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:448"$1$0$0$4$54$"	 * @see #getMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:449"$1$0$0$4$58$"	 * @see #getAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:450"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:451"$1$0$0$7$76$"	public static <A extends Annotation> Set<A> getMergedRepeatableAnnotations("
"AnnotatedElementUtils.java:452"$0$0$0$4$53$"			AnnotatedElement element, Class<A> annotationType,"
"AnnotatedElementUtils.java:453"$0$0$0$6$57$"			@Nullable Class<? extends Annotation> containerType) {"
"AnnotatedElementUtils.java:454"$0$0$0$0$0$""
"AnnotatedElementUtils.java:455"$1$0$0$4$73$"		return getRepeatableAnnotations(element, containerType, annotationType)"
"AnnotatedElementUtils.java:456"$0$0$0$1$27$"				.stream(annotationType)"
"AnnotatedElementUtils.java:457"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotatedElementUtils.java:458"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:459"$0$0$0$0$0$""
"AnnotatedElementUtils.java:460"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:461"$0$0$0$11$86$"	 * Get the annotation attributes of <strong>all</strong> annotations of the specified"
"AnnotatedElementUtils.java:462"$0$0$0$10$73$"	 * {@code annotationName} in the annotation hierarchy above the supplied"
"AnnotatedElementUtils.java:463"$0$0$0$11$78$"	 * {@link AnnotatedElement} and store the results in a {@link MultiValueMap}."
"AnnotatedElementUtils.java:464"$1$0$0$8$93$"	 * <p>Note: in contrast to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)},"
"AnnotatedElementUtils.java:465"$0$0$0$8$62$"	 * this method does <em>not</em> support attribute overrides."
"AnnotatedElementUtils.java:466"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:467"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:468"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:469"$0$0$0$14$87$"	 * @param annotationName the fully qualified class name of the annotation type to find"
"AnnotatedElementUtils.java:470"$0$0$0$12$86$"	 * @return a {@link MultiValueMap} keyed by attribute name, containing the annotation"
"AnnotatedElementUtils.java:471"$0$0$0$12$71$"	 * attributes from all annotations found, or {@code null} if not found"
"AnnotatedElementUtils.java:472"$1$0$0$6$80$"	 * @see #getAllAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:473"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:474"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:475"$1$0$0$5$72$"	public static MultiValueMap<String, Object> getAllAnnotationAttributes("
"AnnotatedElementUtils.java:476"$0$0$0$5$53$"			AnnotatedElement element, String annotationName) {"
"AnnotatedElementUtils.java:477"$0$0$0$0$0$""
"AnnotatedElementUtils.java:478"$1$0$0$5$75$"		return getAllAnnotationAttributes(element, annotationName, false, false);"
"AnnotatedElementUtils.java:479"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:480"$0$0$0$0$0$""
"AnnotatedElementUtils.java:481"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:482"$0$0$0$9$72$"	 * Get the annotation attributes of <strong>all</strong> annotations of"
"AnnotatedElementUtils.java:483"$0$0$0$10$74$"	 * the specified {@code annotationName} in the annotation hierarchy above"
"AnnotatedElementUtils.java:484"$0$0$0$11$68$"	 * the supplied {@link AnnotatedElement} and store the results in a"
"AnnotatedElementUtils.java:485"$0$0$0$3$26$"	 * {@link MultiValueMap}."
"AnnotatedElementUtils.java:486"$1$0$0$8$93$"	 * <p>Note: in contrast to {@link #getMergedAnnotationAttributes(AnnotatedElement, String)},"
"AnnotatedElementUtils.java:487"$0$0$0$8$62$"	 * this method does <em>not</em> support attribute overrides."
"AnnotatedElementUtils.java:488"$1$0$0$10$69$"	 * <p>This method follows <em>get semantics</em> as described in the"
"AnnotatedElementUtils.java:489"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:490"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:491"$0$0$0$14$87$"	 * @param annotationName the fully qualified class name of the annotation type to find"
"AnnotatedElementUtils.java:492"$0$0$0$12$85$"	 * @param classValuesAsString whether to convert Class references into Strings or to"
"AnnotatedElementUtils.java:493"$0$0$0$6$37$"	 * preserve them as Class references"
"AnnotatedElementUtils.java:494"$0$0$0$10$85$"	 * @param nestedAnnotationsAsMap whether to convert nested Annotation instances into"
"AnnotatedElementUtils.java:495"$0$0$0$11$81$"	 * {@code AnnotationAttributes} maps or to preserve them as Annotation instances"
"AnnotatedElementUtils.java:496"$0$0$0$12$86$"	 * @return a {@link MultiValueMap} keyed by attribute name, containing the annotation"
"AnnotatedElementUtils.java:497"$0$0$0$12$71$"	 * attributes from all annotations found, or {@code null} if not found"
"AnnotatedElementUtils.java:498"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:499"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:500"$1$0$0$6$97$"	public static MultiValueMap<String, Object> getAllAnnotationAttributes(AnnotatedElement element,"
"AnnotatedElementUtils.java:501"$0$0$0$9$100$"			String annotationName, final boolean classValuesAsString, final boolean nestedAnnotationsAsMap) {"
"AnnotatedElementUtils.java:502"$0$0$0$0$0$""
"AnnotatedElementUtils.java:503"$0$0$0$5$82$"		Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);"
"AnnotatedElementUtils.java:504"$1$0$0$2$55$"		return getAnnotations(element).stream(annotationName)"
"AnnotatedElementUtils.java:505"$1$0$0$1$78$"				.filter(MergedAnnotationPredicates.unique(MergedAnnotation::getMetaTypes))"
"AnnotatedElementUtils.java:506"$0$0$0$1$51$"				.map(MergedAnnotation::withNonMergedAttributes)"
"AnnotatedElementUtils.java:507"$0$0$0$2$106$"				.collect(MergedAnnotationCollectors.toMultiValueMap(AnnotatedElementUtils::nullIfEmpty, adaptations));"
"AnnotatedElementUtils.java:508"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:509"$0$0$0$0$0$""
"AnnotatedElementUtils.java:510"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:511"$0$0$0$10$70$"	 * Determine if an annotation of the specified {@code annotationType}"
"AnnotatedElementUtils.java:512"$0$0$0$9$69$"	 * is <em>available</em> on the supplied {@link AnnotatedElement} or"
"AnnotatedElementUtils.java:513"$0$0$0$9$73$"	 * within the annotation hierarchy <em>above</em> the specified element."
"AnnotatedElementUtils.java:514"$0$0$0$10$88$"	 * <p>If this method returns {@code true}, then {@link #findMergedAnnotationAttributes}"
"AnnotatedElementUtils.java:515"$0$0$0$6$33$"	 * will return a non-null value."
"AnnotatedElementUtils.java:516"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:517"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:518"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:519"$0$0$0$8$53$"	 * @param annotationType the annotation type to find"
"AnnotatedElementUtils.java:520"$0$0$0$10$60$"	 * @return {@code true} if a matching annotation is present"
"AnnotatedElementUtils.java:521"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:522"$0$0$0$4$46$"	 * @see #isAnnotated(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:523"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:524"$0$0$0$10$108$"	public static boolean hasAnnotation(AnnotatedElement element, Class<? extends Annotation> annotationType) {"
"AnnotatedElementUtils.java:525"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotatedElementUtils.java:526"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotatedElementUtils.java:527"$0$0$0$2$62$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {"
"AnnotatedElementUtils.java:528"$0$0$0$2$54$"			return element.isAnnotationPresent(annotationType);"
"AnnotatedElementUtils.java:529"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:530"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotatedElementUtils.java:531"$0$0$0$2$60$"		return findAnnotations(element).isPresent(annotationType);"
"AnnotatedElementUtils.java:532"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:533"$0$0$0$0$0$""
"AnnotatedElementUtils.java:534"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:535"$0$0$0$11$76$"	 * Find the first annotation of the specified {@code annotationType} within"
"AnnotatedElementUtils.java:536"$0$0$0$10$76$"	 * the annotation hierarchy <em>above</em> the supplied {@code element} and"
"AnnotatedElementUtils.java:537"$0$0$0$9$77$"	 * merge that annotation's attributes with <em>matching</em> attributes from"
"AnnotatedElementUtils.java:538"$0$0$0$9$60$"	 * annotations in lower levels of the annotation hierarchy."
"AnnotatedElementUtils.java:539"$0$0$0$10$72$"	 * <p>Attributes from lower levels in the annotation hierarchy override"
"AnnotatedElementUtils.java:540"$0$0$0$10$55$"	 * attributes of the same name from higher levels, and"
"AnnotatedElementUtils.java:541"$0$0$0$9$66$"	 * {@link AliasFor @AliasFor} semantics are fully supported, both"
"AnnotatedElementUtils.java:542"$0$0$0$10$67$"	 * within a single annotation and within the annotation hierarchy."
"AnnotatedElementUtils.java:543"$1$0$0$9$79$"	 * <p>In contrast to {@link #getAllAnnotationAttributes}, the search algorithm"
"AnnotatedElementUtils.java:544"$0$0$0$13$77$"	 * used by this method will stop searching the annotation hierarchy once the"
"AnnotatedElementUtils.java:545"$0$0$0$11$76$"	 * first annotation of the specified {@code annotationType} has been found."
"AnnotatedElementUtils.java:546"$0$0$0$9$61$"	 * As a consequence, additional annotations of the specified"
"AnnotatedElementUtils.java:547"$0$0$0$6$43$"	 * {@code annotationType} will be ignored."
"AnnotatedElementUtils.java:548"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:549"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:550"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:551"$0$0$0$8$53$"	 * @param annotationType the annotation type to find"
"AnnotatedElementUtils.java:552"$0$0$0$9$71$"	 * @param classValuesAsString whether to convert Class references into"
"AnnotatedElementUtils.java:553"$0$0$0$9$51$"	 * Strings or to preserve them as Class references"
"AnnotatedElementUtils.java:554"$0$0$0$10$85$"	 * @param nestedAnnotationsAsMap whether to convert nested Annotation instances into"
"AnnotatedElementUtils.java:555"$0$0$0$11$81$"	 * {@code AnnotationAttributes} maps or to preserve them as Annotation instances"
"AnnotatedElementUtils.java:556"$0$0$0$12$81$"	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found"
"AnnotatedElementUtils.java:557"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:558"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:559"$1$0$0$6$83$"	 * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:560"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:561"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:562"$0$0$0$5$92$"	public static AnnotationAttributes findMergedAnnotationAttributes(AnnotatedElement element,"
"AnnotatedElementUtils.java:563"$0$0$0$9$109$"			Class<? extends Annotation> annotationType, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {"
"AnnotatedElementUtils.java:564"$0$0$0$0$0$""
"AnnotatedElementUtils.java:565"$0$0$0$4$65$"		MergedAnnotation<?> mergedAnnotation = findAnnotations(element)"
"AnnotatedElementUtils.java:566"$1$0$0$3$82$"				.get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared());"
"AnnotatedElementUtils.java:567"$1$0$0$4$96$"		return getAnnotationAttributes(mergedAnnotation, classValuesAsString, nestedAnnotationsAsMap);"
"AnnotatedElementUtils.java:568"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:569"$0$0$0$0$0$""
"AnnotatedElementUtils.java:570"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:571"$0$0$0$11$76$"	 * Find the first annotation of the specified {@code annotationName} within"
"AnnotatedElementUtils.java:572"$0$0$0$10$76$"	 * the annotation hierarchy <em>above</em> the supplied {@code element} and"
"AnnotatedElementUtils.java:573"$0$0$0$9$77$"	 * merge that annotation's attributes with <em>matching</em> attributes from"
"AnnotatedElementUtils.java:574"$0$0$0$9$60$"	 * annotations in lower levels of the annotation hierarchy."
"AnnotatedElementUtils.java:575"$0$0$0$10$72$"	 * <p>Attributes from lower levels in the annotation hierarchy override"
"AnnotatedElementUtils.java:576"$0$0$0$10$55$"	 * attributes of the same name from higher levels, and"
"AnnotatedElementUtils.java:577"$0$0$0$9$66$"	 * {@link AliasFor @AliasFor} semantics are fully supported, both"
"AnnotatedElementUtils.java:578"$0$0$0$10$67$"	 * within a single annotation and within the annotation hierarchy."
"AnnotatedElementUtils.java:579"$1$0$0$8$69$"	 * <p>In contrast to {@link #getAllAnnotationAttributes}, the search"
"AnnotatedElementUtils.java:580"$0$0$0$11$68$"	 * algorithm used by this method will stop searching the annotation"
"AnnotatedElementUtils.java:581"$0$0$0$9$56$"	 * hierarchy once the first annotation of the specified"
"AnnotatedElementUtils.java:582"$0$0$0$10$71$"	 * {@code annotationName} has been found. As a consequence, additional"
"AnnotatedElementUtils.java:583"$0$0$0$10$72$"	 * annotations of the specified {@code annotationName} will be ignored."
"AnnotatedElementUtils.java:584"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:585"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:586"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:587"$0$0$0$14$87$"	 * @param annotationName the fully qualified class name of the annotation type to find"
"AnnotatedElementUtils.java:588"$0$0$0$12$85$"	 * @param classValuesAsString whether to convert Class references into Strings or to"
"AnnotatedElementUtils.java:589"$0$0$0$6$37$"	 * preserve them as Class references"
"AnnotatedElementUtils.java:590"$0$0$0$10$85$"	 * @param nestedAnnotationsAsMap whether to convert nested Annotation instances into"
"AnnotatedElementUtils.java:591"$0$0$0$11$81$"	 * {@code AnnotationAttributes} maps or to preserve them as Annotation instances"
"AnnotatedElementUtils.java:592"$0$0$0$12$81$"	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found"
"AnnotatedElementUtils.java:593"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:594"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:595"$1$0$0$6$83$"	 * @see #getMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:596"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:597"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:598"$0$0$0$5$92$"	public static AnnotationAttributes findMergedAnnotationAttributes(AnnotatedElement element,"
"AnnotatedElementUtils.java:599"$0$0$0$7$88$"			String annotationName, boolean classValuesAsString, boolean nestedAnnotationsAsMap) {"
"AnnotatedElementUtils.java:600"$0$0$0$0$0$""
"AnnotatedElementUtils.java:601"$0$0$0$4$65$"		MergedAnnotation<?> mergedAnnotation = findAnnotations(element)"
"AnnotatedElementUtils.java:602"$1$0$0$3$82$"				.get(annotationName, null, MergedAnnotationSelectors.firstDirectlyDeclared());"
"AnnotatedElementUtils.java:603"$1$0$0$4$96$"		return getAnnotationAttributes(mergedAnnotation, classValuesAsString, nestedAnnotationsAsMap);"
"AnnotatedElementUtils.java:604"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:605"$0$0$0$0$0$""
"AnnotatedElementUtils.java:606"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:607"$0$0$0$11$76$"	 * Find the first annotation of the specified {@code annotationType} within"
"AnnotatedElementUtils.java:608"$0$0$0$9$73$"	 * the annotation hierarchy <em>above</em> the supplied {@code element},"
"AnnotatedElementUtils.java:609"$0$0$0$9$77$"	 * merge that annotation's attributes with <em>matching</em> attributes from"
"AnnotatedElementUtils.java:610"$0$0$0$11$75$"	 * annotations in lower levels of the annotation hierarchy, and synthesize"
"AnnotatedElementUtils.java:611"$0$0$0$12$79$"	 * the result back into an annotation of the specified {@code annotationType}."
"AnnotatedElementUtils.java:612"$0$0$0$9$69$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both"
"AnnotatedElementUtils.java:613"$0$0$0$10$67$"	 * within a single annotation and within the annotation hierarchy."
"AnnotatedElementUtils.java:614"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:615"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:616"$0$0$0$6$40$"	 * @param element the annotated element"
"AnnotatedElementUtils.java:617"$0$0$0$8$53$"	 * @param annotationType the annotation type to find"
"AnnotatedElementUtils.java:618"$0$0$0$13$84$"	 * @return the merged, synthesized {@code Annotation}, or {@code null} if not found"
"AnnotatedElementUtils.java:619"$0$0$0$3$14$"	 * @since 4.2"
"AnnotatedElementUtils.java:620"$0$0$0$4$59$"	 * @see #findAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:621"$0$0$0$6$84$"	 * @see #findMergedAnnotationAttributes(AnnotatedElement, String, boolean, boolean)"
"AnnotatedElementUtils.java:622"$1$0$0$4$64$"	 * @see #getMergedAnnotationAttributes(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:623"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:624"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:625"$0$0$0$11$113$"	public static <A extends Annotation> A findMergedAnnotation(AnnotatedElement element, Class<A> annotationType) {"
"AnnotatedElementUtils.java:626"$0$0$1$11$71$"		// Shortcut: directly present on the element, with no merging needed?"
"AnnotatedElementUtils.java:627"$0$0$0$3$55$"		if (AnnotationFilter.PLAIN.matches(annotationType) ||"
"AnnotatedElementUtils.java:628"$0$0$0$2$62$"				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {"
"AnnotatedElementUtils.java:629"$1$0$0$2$56$"			return element.getDeclaredAnnotation(annotationType);"
"AnnotatedElementUtils.java:630"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:631"$0$0$1$6$50$"		// Exhaustive retrieval of merged annotations..."
"AnnotatedElementUtils.java:632"$0$0$0$2$33$"		return findAnnotations(element)"
"AnnotatedElementUtils.java:633"$1$0$0$3$81$"				.get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared())"
"AnnotatedElementUtils.java:634"$0$0$0$1$58$"				.synthesize(MergedAnnotation::isPresent).orElse(null);"
"AnnotatedElementUtils.java:635"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:636"$0$0$0$0$0$""
"AnnotatedElementUtils.java:637"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:638"$0$0$0$9$81$"	 * Find <strong>all</strong> annotations of the specified {@code annotationType}"
"AnnotatedElementUtils.java:639"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:640"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:641"$0$0$0$11$83$"	 * <em>matching</em> attributes from annotations in lower levels of the annotation"
"AnnotatedElementUtils.java:642"$0$0$0$13$81$"	 * hierarchy and synthesize the results back into an annotation of the specified"
"AnnotatedElementUtils.java:643"$0$0$0$3$27$"	 * {@code annotationType}."
"AnnotatedElementUtils.java:644"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:645"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:646"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:647"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:648"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:649"$0$0$0$11$74$"	 * @param annotationType the annotation type to find (never {@code null})"
"AnnotatedElementUtils.java:650"$0$0$0$11$73$"	 * @return the set of all merged, synthesized {@code Annotations} found,"
"AnnotatedElementUtils.java:651"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:652"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:653"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:654"$1$0$0$4$58$"	 * @see #getAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:655"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:656"$0$0$0$11$122$"	public static <A extends Annotation> Set<A> findAllMergedAnnotations(AnnotatedElement element, Class<A> annotationType) {"
"AnnotatedElementUtils.java:657"$0$0$0$2$56$"		return findAnnotations(element).stream(annotationType)"
"AnnotatedElementUtils.java:658"$0$0$0$1$40$"				.sorted(highAggregateIndexesFirst())"
"AnnotatedElementUtils.java:659"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotatedElementUtils.java:660"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:661"$0$0$0$0$0$""
"AnnotatedElementUtils.java:662"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:663"$0$0$0$9$82$"	 * Find <strong>all</strong> annotations of the specified {@code annotationTypes}"
"AnnotatedElementUtils.java:664"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:665"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:666"$0$0$0$10$72$"	 * <em>matching</em> attributes from annotations in lower levels of the"
"AnnotatedElementUtils.java:667"$0$0$0$11$75$"	 * annotation hierarchy and synthesize the results back into an annotation"
"AnnotatedElementUtils.java:668"$0$0$0$6$48$"	 * of the corresponding {@code annotationType}."
"AnnotatedElementUtils.java:669"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:670"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:671"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:672"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:673"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:674"$0$0$0$8$55$"	 * @param annotationTypes the annotation types to find"
"AnnotatedElementUtils.java:675"$0$0$0$11$73$"	 * @return the set of all merged, synthesized {@code Annotations} found,"
"AnnotatedElementUtils.java:676"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:677"$0$0$0$3$14$"	 * @since 5.1"
"AnnotatedElementUtils.java:678"$0$0$0$4$59$"	 * @see #findAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:679"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:680"$0$0$0$10$133$"	public static Set<Annotation> findAllMergedAnnotations(AnnotatedElement element, Set<Class<? extends Annotation>> annotationTypes) {"
"AnnotatedElementUtils.java:681"$0$0$0$2$42$"		return findAnnotations(element).stream()"
"AnnotatedElementUtils.java:682"$0$0$0$1$63$"				.filter(MergedAnnotationPredicates.typeIn(annotationTypes))"
"AnnotatedElementUtils.java:683"$0$0$0$1$40$"				.sorted(highAggregateIndexesFirst())"
"AnnotatedElementUtils.java:684"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotatedElementUtils.java:685"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:686"$0$0$0$0$0$""
"AnnotatedElementUtils.java:687"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:688"$0$0$0$10$84$"	 * Find all <em>repeatable annotations</em> of the specified {@code annotationType}"
"AnnotatedElementUtils.java:689"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:690"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:691"$0$0$0$11$83$"	 * <em>matching</em> attributes from annotations in lower levels of the annotation"
"AnnotatedElementUtils.java:692"$0$0$0$13$81$"	 * hierarchy and synthesize the results back into an annotation of the specified"
"AnnotatedElementUtils.java:693"$0$0$0$3$27$"	 * {@code annotationType}."
"AnnotatedElementUtils.java:694"$0$0$0$13$81$"	 * <p>The container type that holds the repeatable annotations will be looked up"
"AnnotatedElementUtils.java:695"$0$0$0$4$48$"	 * via {@link java.lang.annotation.Repeatable}."
"AnnotatedElementUtils.java:696"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:697"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:698"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:699"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:700"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:701"$0$0$0$11$74$"	 * @param annotationType the annotation type to find (never {@code null})"
"AnnotatedElementUtils.java:702"$0$0$0$11$71$"	 * @return the set of all merged repeatable {@code Annotations} found,"
"AnnotatedElementUtils.java:703"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:704"$0$0$0$10$85$"	 * @throws IllegalArgumentException if the {@code element} or {@code annotationType}"
"AnnotatedElementUtils.java:705"$0$0$0$12$64$"	 * is {@code null}, or if the container type cannot be resolved"
"AnnotatedElementUtils.java:706"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:707"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:708"$0$0$0$4$59$"	 * @see #findAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:709"$0$0$0$5$73$"	 * @see #findMergedRepeatableAnnotations(AnnotatedElement, Class, Class)"
"AnnotatedElementUtils.java:710"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:711"$0$0$0$8$102$"	public static <A extends Annotation> Set<A> findMergedRepeatableAnnotations(AnnotatedElement element,"
"AnnotatedElementUtils.java:712"$0$0$0$3$29$"			Class<A> annotationType) {"
"AnnotatedElementUtils.java:713"$0$0$0$0$0$""
"AnnotatedElementUtils.java:714"$0$0$0$4$72$"		return findMergedRepeatableAnnotations(element, annotationType, null);"
"AnnotatedElementUtils.java:715"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:716"$0$0$0$0$0$""
"AnnotatedElementUtils.java:717"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:718"$0$0$0$10$84$"	 * Find all <em>repeatable annotations</em> of the specified {@code annotationType}"
"AnnotatedElementUtils.java:719"$0$0$0$10$80$"	 * within the annotation hierarchy <em>above</em> the supplied {@code element};"
"AnnotatedElementUtils.java:720"$0$0$0$11$74$"	 * and for each annotation found, merge that annotation's attributes with"
"AnnotatedElementUtils.java:721"$0$0$0$11$83$"	 * <em>matching</em> attributes from annotations in lower levels of the annotation"
"AnnotatedElementUtils.java:722"$0$0$0$13$81$"	 * hierarchy and synthesize the results back into an annotation of the specified"
"AnnotatedElementUtils.java:723"$0$0$0$3$27$"	 * {@code annotationType}."
"AnnotatedElementUtils.java:724"$0$0$0$11$78$"	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both within a"
"AnnotatedElementUtils.java:725"$0$0$0$7$56$"	 * single annotation and within annotation hierarchies."
"AnnotatedElementUtils.java:726"$0$0$0$10$70$"	 * <p>This method follows <em>find semantics</em> as described in the"
"AnnotatedElementUtils.java:727"$0$0$0$5$59$"	 * {@linkplain AnnotatedElementUtils class-level javadoc}."
"AnnotatedElementUtils.java:728"$0$0$0$9$61$"	 * @param element the annotated element (never {@code null})"
"AnnotatedElementUtils.java:729"$0$0$0$11$74$"	 * @param annotationType the annotation type to find (never {@code null})"
"AnnotatedElementUtils.java:730"$0$0$0$12$78$"	 * @param containerType the type of the container that holds the annotations;"
"AnnotatedElementUtils.java:731"$0$0$0$14$69$"	 * may be {@code null} if the container type should be looked up via"
"AnnotatedElementUtils.java:732"$0$0$0$3$43$"	 * {@link java.lang.annotation.Repeatable}"
"AnnotatedElementUtils.java:733"$0$0$0$11$71$"	 * @return the set of all merged repeatable {@code Annotations} found,"
"AnnotatedElementUtils.java:734"$0$0$0$9$38$"	 * or an empty set if none were found"
"AnnotatedElementUtils.java:735"$0$0$0$10$85$"	 * @throws IllegalArgumentException if the {@code element} or {@code annotationType}"
"AnnotatedElementUtils.java:736"$0$0$0$12$64$"	 * is {@code null}, or if the container type cannot be resolved"
"AnnotatedElementUtils.java:737"$0$0$0$8$82$"	 * @throws AnnotationConfigurationException if the supplied {@code containerType}"
"AnnotatedElementUtils.java:738"$0$0$0$12$79$"	 * is not a valid container annotation for the supplied {@code annotationType}"
"AnnotatedElementUtils.java:739"$0$0$0$3$14$"	 * @since 4.3"
"AnnotatedElementUtils.java:740"$0$0$0$4$55$"	 * @see #findMergedAnnotation(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:741"$0$0$0$4$59$"	 * @see #findAllMergedAnnotations(AnnotatedElement, Class)"
"AnnotatedElementUtils.java:742"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:743"$0$0$0$8$102$"	public static <A extends Annotation> Set<A> findMergedRepeatableAnnotations(AnnotatedElement element,"
"AnnotatedElementUtils.java:744"$0$0$0$8$82$"			Class<A> annotationType, @Nullable Class<? extends Annotation> containerType) {"
"AnnotatedElementUtils.java:745"$0$0$0$0$0$""
"AnnotatedElementUtils.java:746"$0$0$0$4$74$"		return findRepeatableAnnotations(element, containerType, annotationType)"
"AnnotatedElementUtils.java:747"$0$0$0$1$27$"				.stream(annotationType)"
"AnnotatedElementUtils.java:748"$0$0$0$1$40$"				.sorted(highAggregateIndexesFirst())"
"AnnotatedElementUtils.java:749"$0$0$0$1$59$"				.collect(MergedAnnotationCollectors.toAnnotationSet());"
"AnnotatedElementUtils.java:750"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:751"$0$0$0$0$0$""
"AnnotatedElementUtils.java:752"$1$0$0$6$76$"	private static MergedAnnotations getAnnotations(AnnotatedElement element) {"
"AnnotatedElementUtils.java:753"$0$0$0$4$108$"		return MergedAnnotations.from(element, SearchStrategy.INHERITED_ANNOTATIONS, RepeatableContainers.none());"
"AnnotatedElementUtils.java:754"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:755"$0$0$0$0$0$""
"AnnotatedElementUtils.java:756"$1$0$0$5$84$"	private static MergedAnnotations getRepeatableAnnotations(AnnotatedElement element,"
"AnnotatedElementUtils.java:757"$0$0$0$10$101$"			@Nullable Class<? extends Annotation> containerType, Class<? extends Annotation> annotationType) {"
"AnnotatedElementUtils.java:758"$0$0$0$0$0$""
"AnnotatedElementUtils.java:759"$0$0$0$5$101$"		RepeatableContainers repeatableContainers = RepeatableContainers.of(annotationType, containerType);"
"AnnotatedElementUtils.java:760"$0$0$0$4$101$"		return MergedAnnotations.from(element, SearchStrategy.INHERITED_ANNOTATIONS, repeatableContainers);"
"AnnotatedElementUtils.java:761"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:762"$0$0$0$0$0$""
"AnnotatedElementUtils.java:763"$0$0$0$6$77$"	private static MergedAnnotations findAnnotations(AnnotatedElement element) {"
"AnnotatedElementUtils.java:764"$0$0$0$4$101$"		return MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY, RepeatableContainers.none());"
"AnnotatedElementUtils.java:765"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:766"$0$0$0$0$0$""
"AnnotatedElementUtils.java:767"$0$0$0$5$85$"	private static MergedAnnotations findRepeatableAnnotations(AnnotatedElement element,"
"AnnotatedElementUtils.java:768"$0$0$0$10$101$"			@Nullable Class<? extends Annotation> containerType, Class<? extends Annotation> annotationType) {"
"AnnotatedElementUtils.java:769"$0$0$0$0$0$""
"AnnotatedElementUtils.java:770"$0$0$0$5$101$"		RepeatableContainers repeatableContainers = RepeatableContainers.of(annotationType, containerType);"
"AnnotatedElementUtils.java:771"$0$0$0$4$94$"		return MergedAnnotations.from(element, SearchStrategy.TYPE_HIERARCHY, repeatableContainers);"
"AnnotatedElementUtils.java:772"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:773"$0$0$0$0$0$""
"AnnotatedElementUtils.java:774"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:775"$0$0$0$8$94$"	private static MultiValueMap<String, Object> nullIfEmpty(MultiValueMap<String, Object> map) {"
"AnnotatedElementUtils.java:776"$0$0$0$6$38$"		return (map.isEmpty() ? null : map);"
"AnnotatedElementUtils.java:777"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:778"$0$0$0$0$0$""
"AnnotatedElementUtils.java:779"$0$0$0$8$100$"	private static <A extends Annotation> Comparator<MergedAnnotation<A>> highAggregateIndexesFirst() {"
"AnnotatedElementUtils.java:780"$0$0$0$3$55$"		return Comparator.<MergedAnnotation<A>> comparingInt("
"AnnotatedElementUtils.java:781"$1$0$0$1$52$"				MergedAnnotation::getAggregateIndex).reversed();"
"AnnotatedElementUtils.java:782"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:783"$0$0$0$0$0$""
"AnnotatedElementUtils.java:784"$0$0$0$1$10$"	@Nullable"
"AnnotatedElementUtils.java:785"$1$0$0$5$92$"	private static AnnotationAttributes getAnnotationAttributes(MergedAnnotation<?> annotation,"
"AnnotatedElementUtils.java:786"$0$0$0$5$65$"			boolean classValuesAsString, boolean nestedAnnotationsAsMap) {"
"AnnotatedElementUtils.java:787"$0$0$0$0$0$""
"AnnotatedElementUtils.java:788"$0$0$0$3$32$"		if (!annotation.isPresent()) {"
"AnnotatedElementUtils.java:789"$0$0$0$2$15$"			return null;"
"AnnotatedElementUtils.java:790"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:791"$0$0$0$2$43$"		return annotation.asAnnotationAttributes("
"AnnotatedElementUtils.java:792"$0$0$0$2$63$"				Adapt.values(classValuesAsString, nestedAnnotationsAsMap));"
"AnnotatedElementUtils.java:793"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:794"$0$0$0$0$0$""
"AnnotatedElementUtils.java:795"$0$0$0$0$0$""
"AnnotatedElementUtils.java:796"$0$0$0$1$4$"	/**"
"AnnotatedElementUtils.java:797"$0$0$0$8$68$"	 * Adapted {@link AnnotatedElement} that hold specific annotations."
"AnnotatedElementUtils.java:798"$0$0$0$1$4$"	 */"
"AnnotatedElementUtils.java:799"$0$0$0$7$82$"	private static class AnnotatedElementForAnnotations implements AnnotatedElement {"
"AnnotatedElementUtils.java:800"$0$0$0$0$0$""
"AnnotatedElementUtils.java:801"$0$0$0$4$41$"		private final Annotation[] annotations;"
"AnnotatedElementUtils.java:802"$0$0$0$0$0$""
"AnnotatedElementUtils.java:803"$0$0$0$3$61$"		AnnotatedElementForAnnotations(Annotation... annotations) {"
"AnnotatedElementUtils.java:804"$0$0$0$3$34$"			this.annotations = annotations;"
"AnnotatedElementUtils.java:805"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:806"$0$0$0$0$0$""
"AnnotatedElementUtils.java:807"$0$0$0$1$11$"		@Override"
"AnnotatedElementUtils.java:808"$0$0$0$1$32$"		@SuppressWarnings(""unchecked"")"
"AnnotatedElementUtils.java:809"$0$0$0$1$11$"		@Nullable"
"AnnotatedElementUtils.java:810"$1$0$0$8$75$"		public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {"
"AnnotatedElementUtils.java:811"$0$0$0$6$51$"			for (Annotation annotation : this.annotations) {"
"AnnotatedElementUtils.java:812"$0$0$0$5$57$"				if (annotation.annotationType() == annotationClass) {"
"AnnotatedElementUtils.java:813"$0$0$0$3$27$"					return (T) annotation;"
"AnnotatedElementUtils.java:814"$0$0$0$1$5$"				}"
"AnnotatedElementUtils.java:815"$0$0$0$1$4$"			}"
"AnnotatedElementUtils.java:816"$0$0$0$2$15$"			return null;"
"AnnotatedElementUtils.java:817"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:818"$0$0$0$0$0$""
"AnnotatedElementUtils.java:819"$0$0$0$1$11$"		@Override"
"AnnotatedElementUtils.java:820"$1$0$0$4$40$"		public Annotation[] getAnnotations() {"
"AnnotatedElementUtils.java:821"$0$0$0$2$35$"			return this.annotations.clone();"
"AnnotatedElementUtils.java:822"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:823"$0$0$0$0$0$""
"AnnotatedElementUtils.java:824"$0$0$0$1$11$"		@Override"
"AnnotatedElementUtils.java:825"$1$0$0$4$48$"		public Annotation[] getDeclaredAnnotations() {"
"AnnotatedElementUtils.java:826"$0$0$0$2$35$"			return this.annotations.clone();"
"AnnotatedElementUtils.java:827"$0$0$0$1$3$"		}"
"AnnotatedElementUtils.java:828"$0$0$0$0$0$""
"AnnotatedElementUtils.java:829"$0$0$0$1$2$"	}"
"AnnotatedElementUtils.java:830"$0$0$0$0$0$""
"AnnotatedElementUtils.java:831"$0$0$0$1$1$"}"
"AbstractStaxXMLReader.java:1"$0$0$0$1$2$"/*"
"AbstractStaxXMLReader.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"AbstractStaxXMLReader.java:3"$0$0$0$1$2$" *"
"AbstractStaxXMLReader.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AbstractStaxXMLReader.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AbstractStaxXMLReader.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AbstractStaxXMLReader.java:7"$0$0$0$1$2$" *"
"AbstractStaxXMLReader.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AbstractStaxXMLReader.java:9"$0$0$0$1$2$" *"
"AbstractStaxXMLReader.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AbstractStaxXMLReader.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AbstractStaxXMLReader.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AbstractStaxXMLReader.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AbstractStaxXMLReader.java:14"$0$0$0$5$33$" * limitations under the License."
"AbstractStaxXMLReader.java:15"$0$0$0$1$3$" */"
"AbstractStaxXMLReader.java:16"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"AbstractStaxXMLReader.java:18"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:19"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"AbstractStaxXMLReader.java:20"$0$0$0$2$21$"import java.util.Map;"
"AbstractStaxXMLReader.java:21"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:22"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"AbstractStaxXMLReader.java:23"$0$0$0$2$33$"import javax.xml.stream.Location;"
"AbstractStaxXMLReader.java:24"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"AbstractStaxXMLReader.java:25"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:26"$0$0$0$2$31$"import org.xml.sax.InputSource;"
"AbstractStaxXMLReader.java:27"$0$0$0$2$27$"import org.xml.sax.Locator;"
"AbstractStaxXMLReader.java:28"$0$0$0$2$32$"import org.xml.sax.SAXException;"
"AbstractStaxXMLReader.java:29"$0$0$0$2$45$"import org.xml.sax.SAXNotRecognizedException;"
"AbstractStaxXMLReader.java:30"$0$0$0$2$44$"import org.xml.sax.SAXNotSupportedException;"
"AbstractStaxXMLReader.java:31"$0$0$0$2$37$"import org.xml.sax.SAXParseException;"
"AbstractStaxXMLReader.java:32"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AbstractStaxXMLReader.java:34"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"AbstractStaxXMLReader.java:35"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:36"$0$0$0$1$3$"/**"
"AbstractStaxXMLReader.java:37"$0$0$0$15$90$" * Abstract base class for SAX {@code XMLReader} implementations that use StAX as a basis."
"AbstractStaxXMLReader.java:38"$0$0$0$1$2$" *"
"AbstractStaxXMLReader.java:39"$0$0$0$4$24$" * @author Arjen Poutsma"
"AbstractStaxXMLReader.java:40"$0$0$0$4$26$" * @author Juergen Hoeller"
"AbstractStaxXMLReader.java:41"$0$0$0$3$13$" * @since 3.0"
"AbstractStaxXMLReader.java:42"$0$0$0$3$54$" * @see #setContentHandler(org.xml.sax.ContentHandler)"
"AbstractStaxXMLReader.java:43"$0$0$0$3$46$" * @see #setDTDHandler(org.xml.sax.DTDHandler)"
"AbstractStaxXMLReader.java:44"$0$0$0$3$54$" * @see #setEntityResolver(org.xml.sax.EntityResolver)"
"AbstractStaxXMLReader.java:45"$0$0$0$3$50$" * @see #setErrorHandler(org.xml.sax.ErrorHandler)"
"AbstractStaxXMLReader.java:46"$0$0$0$1$3$" */"
"AbstractStaxXMLReader.java:47"$0$0$0$6$64$"abstract class AbstractStaxXMLReader extends AbstractXMLReader {"
"AbstractStaxXMLReader.java:48"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:49"$0$0$0$7$96$"	private static final String NAMESPACES_FEATURE_NAME = ""http://xml.org/sax/features/namespaces"";"
"AbstractStaxXMLReader.java:50"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:51"$0$0$0$7$112$"	private static final String NAMESPACE_PREFIXES_FEATURE_NAME = ""http://xml.org/sax/features/namespace-prefixes"";"
"AbstractStaxXMLReader.java:52"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:53"$0$0$0$7$102$"	private static final String IS_STANDALONE_FEATURE_NAME = ""http://xml.org/sax/features/is-standalone"";"
"AbstractStaxXMLReader.java:54"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:55"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:56"$0$0$0$5$42$"	private boolean namespacesFeature = true;"
"AbstractStaxXMLReader.java:57"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:58"$0$0$0$5$50$"	private boolean namespacePrefixesFeature = false;"
"AbstractStaxXMLReader.java:59"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:60"$0$0$0$1$10$"	@Nullable"
"AbstractStaxXMLReader.java:61"$0$0$0$3$30$"	private Boolean isStandalone;"
"AbstractStaxXMLReader.java:62"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:63"$0$0$0$8$70$"	private final Map<String, String> namespaces = new LinkedHashMap<>();"
"AbstractStaxXMLReader.java:64"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:65"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:66"$0$0$0$1$10$"	@Override"
"AbstractStaxXMLReader.java:67"$1$0$0$8$100$"	public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException {"
"AbstractStaxXMLReader.java:68"$0$0$0$3$17$"		switch (name) {"
"AbstractStaxXMLReader.java:69"$0$0$0$2$32$"			case NAMESPACES_FEATURE_NAME:"
"AbstractStaxXMLReader.java:70"$0$0$0$2$34$"				return this.namespacesFeature;"
"AbstractStaxXMLReader.java:71"$0$0$0$2$40$"			case NAMESPACE_PREFIXES_FEATURE_NAME:"
"AbstractStaxXMLReader.java:72"$0$0$0$2$41$"				return this.namespacePrefixesFeature;"
"AbstractStaxXMLReader.java:73"$0$0$0$2$35$"			case IS_STANDALONE_FEATURE_NAME:"
"AbstractStaxXMLReader.java:74"$0$0$0$5$36$"				if (this.isStandalone != null) {"
"AbstractStaxXMLReader.java:75"$0$0$0$2$30$"					return this.isStandalone;"
"AbstractStaxXMLReader.java:76"$0$0$0$1$5$"				}"
"AbstractStaxXMLReader.java:77"$0$0$0$2$10$"				else {"
"AbstractStaxXMLReader.java:78"$0$0$0$7$86$"					throw new SAXNotSupportedException(""startDocument() callback not completed yet"");"
"AbstractStaxXMLReader.java:79"$0$0$0$1$5$"				}"
"AbstractStaxXMLReader.java:80"$0$0$0$1$11$"			default:"
"AbstractStaxXMLReader.java:81"$1$0$0$2$34$"				return super.getFeature(name);"
"AbstractStaxXMLReader.java:82"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:83"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:84"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:85"$0$0$0$1$10$"	@Override"
"AbstractStaxXMLReader.java:86"$0$0$0$10$112$"	public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {"
"AbstractStaxXMLReader.java:87"$0$0$0$3$45$"		if (NAMESPACES_FEATURE_NAME.equals(name)) {"
"AbstractStaxXMLReader.java:88"$0$0$0$3$34$"			this.namespacesFeature = value;"
"AbstractStaxXMLReader.java:89"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:90"$0$0$0$4$58$"		else if (NAMESPACE_PREFIXES_FEATURE_NAME.equals(name)) {"
"AbstractStaxXMLReader.java:91"$0$0$0$3$41$"			this.namespacePrefixesFeature = value;"
"AbstractStaxXMLReader.java:92"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:93"$0$0$0$2$8$"		else {"
"AbstractStaxXMLReader.java:94"$0$0$0$2$33$"			super.setFeature(name, value);"
"AbstractStaxXMLReader.java:95"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:96"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:97"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:98"$0$0$0$5$51$"	protected void setStandalone(boolean standalone) {"
"AbstractStaxXMLReader.java:99"$0$0$0$3$33$"		this.isStandalone = standalone;"
"AbstractStaxXMLReader.java:100"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:101"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:102"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:103"$0$0$0$11$98$"	 * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces} is turned on."
"AbstractStaxXMLReader.java:104"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:105"$0$0$0$4$43$"	protected boolean hasNamespacesFeature() {"
"AbstractStaxXMLReader.java:106"$0$0$0$2$32$"		return this.namespacesFeature;"
"AbstractStaxXMLReader.java:107"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:108"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:109"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:110"$0$0$0$11$107$"	 * Indicates whether the SAX feature {@code http://xml.org/sax/features/namespaces-prefixes} is turned on."
"AbstractStaxXMLReader.java:111"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:112"$0$0$0$4$50$"	protected boolean hasNamespacePrefixesFeature() {"
"AbstractStaxXMLReader.java:113"$0$0$0$2$39$"		return this.namespacePrefixesFeature;"
"AbstractStaxXMLReader.java:114"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:115"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:116"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:117"$0$0$0$15$72$"	 * Convert a {@code QName} to a qualified name, as used by DOM and SAX."
"AbstractStaxXMLReader.java:118"$0$0$0$12$71$"	 * The returned string has a format of {@code prefix:localName} if the"
"AbstractStaxXMLReader.java:119"$0$0$0$10$52$"	 * prefix is set, or just {@code localName} if not."
"AbstractStaxXMLReader.java:120"$0$0$0$6$34$"	 * @param qName the {@code QName}"
"AbstractStaxXMLReader.java:121"$0$0$0$5$30$"	 * @return the qualified name"
"AbstractStaxXMLReader.java:122"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:123"$0$0$0$5$48$"	protected String toQualifiedName(QName qName) {"
"AbstractStaxXMLReader.java:124"$1$0$0$4$36$"		String prefix = qName.getPrefix();"
"AbstractStaxXMLReader.java:125"$0$0$0$3$39$"		if (!StringUtils.hasLength(prefix)) {"
"AbstractStaxXMLReader.java:126"$1$0$0$2$31$"			return qName.getLocalPart();"
"AbstractStaxXMLReader.java:127"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:128"$0$0$0$2$8$"		else {"
"AbstractStaxXMLReader.java:129"$1$0$0$6$46$"			return prefix + "":"" + qName.getLocalPart();"
"AbstractStaxXMLReader.java:130"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:131"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:132"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:133"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:134"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:135"$0$0$0$9$58$"	 * Parse the StAX XML reader passed at construction-time."
"AbstractStaxXMLReader.java:136"$0$0$0$11$76$"	 * <p><b>NOTE:</b>: The given {@code InputSource} is not read, but ignored."
"AbstractStaxXMLReader.java:137"$0$0$0$5$29$"	 * @param ignored is ignored"
"AbstractStaxXMLReader.java:138"$0$0$0$11$88$"	 * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}"
"AbstractStaxXMLReader.java:139"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:140"$0$0$0$1$10$"	@Override"
"AbstractStaxXMLReader.java:141"$0$0$0$8$67$"	public final void parse(InputSource ignored) throws SAXException {"
"AbstractStaxXMLReader.java:142"$0$0$0$1$10$"		parse();"
"AbstractStaxXMLReader.java:143"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:144"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:145"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:146"$0$0$0$9$58$"	 * Parse the StAX XML reader passed at construction-time."
"AbstractStaxXMLReader.java:147"$0$0$0$11$74$"	 * <p><b>NOTE:</b>: The given system identifier is not read, but ignored."
"AbstractStaxXMLReader.java:148"$0$0$0$5$29$"	 * @param ignored is ignored"
"AbstractStaxXMLReader.java:149"$0$0$0$11$88$"	 * @throws SAXException a SAX exception, possibly wrapping a {@code XMLStreamException}"
"AbstractStaxXMLReader.java:150"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:151"$0$0$0$1$10$"	@Override"
"AbstractStaxXMLReader.java:152"$0$0$0$8$62$"	public final void parse(String ignored) throws SAXException {"
"AbstractStaxXMLReader.java:153"$0$0$0$1$10$"		parse();"
"AbstractStaxXMLReader.java:154"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:155"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:156"$0$0$0$6$43$"	private void parse() throws SAXException {"
"AbstractStaxXMLReader.java:157"$0$0$0$2$7$"		try {"
"AbstractStaxXMLReader.java:158"$0$0$0$1$19$"			parseInternal();"
"AbstractStaxXMLReader.java:159"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:160"$0$0$0$4$33$"		catch (XMLStreamException ex) {"
"AbstractStaxXMLReader.java:161"$0$0$0$4$26$"			Locator locator = null;"
"AbstractStaxXMLReader.java:162"$1$0$0$5$34$"			if (ex.getLocation() != null) {"
"AbstractStaxXMLReader.java:163"$1$0$0$4$48$"				locator = new StaxLocator(ex.getLocation());"
"AbstractStaxXMLReader.java:164"$0$0$0$1$4$"			}"
"AbstractStaxXMLReader.java:165"$1$0$0$7$88$"			SAXParseException saxException = new SAXParseException(ex.getMessage(), locator, ex);"
"AbstractStaxXMLReader.java:166"$1$0$0$5$35$"			if (getErrorHandler() != null) {"
"AbstractStaxXMLReader.java:167"$1$0$0$1$47$"				getErrorHandler().fatalError(saxException);"
"AbstractStaxXMLReader.java:168"$0$0$0$1$4$"			}"
"AbstractStaxXMLReader.java:169"$0$0$0$2$9$"			else {"
"AbstractStaxXMLReader.java:170"$0$0$0$2$23$"				throw saxException;"
"AbstractStaxXMLReader.java:171"$0$0$0$1$4$"			}"
"AbstractStaxXMLReader.java:172"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:173"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:174"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:175"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:176"$0$0$0$11$76$"	 * Template method that parses the StAX reader passed at construction-time."
"AbstractStaxXMLReader.java:177"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:178"$0$0$0$7$81$"	protected abstract void parseInternal() throws SAXException, XMLStreamException;"
"AbstractStaxXMLReader.java:179"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:180"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:181"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:182"$0$0$0$9$50$"	 * Start the prefix mapping for the given prefix."
"AbstractStaxXMLReader.java:183"$0$0$0$4$70$"	 * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String)"
"AbstractStaxXMLReader.java:184"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:185"$0$0$0$10$99$"	protected void startPrefixMapping(@Nullable String prefix, String namespace) throws SAXException {"
"AbstractStaxXMLReader.java:186"$1$0$0$7$72$"		if (getContentHandler() != null && StringUtils.hasLength(namespace)) {"
"AbstractStaxXMLReader.java:187"$0$0$0$5$24$"			if (prefix == null) {"
"AbstractStaxXMLReader.java:188"$0$0$0$3$16$"				prefix = """";"
"AbstractStaxXMLReader.java:189"$0$0$0$1$4$"			}"
"AbstractStaxXMLReader.java:190"$1$0$0$3$56$"			if (!namespace.equals(this.namespaces.get(prefix))) {"
"AbstractStaxXMLReader.java:191"$1$0$0$2$62$"				getContentHandler().startPrefixMapping(prefix, namespace);"
"AbstractStaxXMLReader.java:192"$0$0$0$2$43$"				this.namespaces.put(prefix, namespace);"
"AbstractStaxXMLReader.java:193"$0$0$0$1$4$"			}"
"AbstractStaxXMLReader.java:194"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:195"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:196"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:197"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:198"$0$0$0$9$48$"	 * End the prefix mapping for the given prefix."
"AbstractStaxXMLReader.java:199"$0$0$0$3$60$"	 * @see org.xml.sax.ContentHandler#endPrefixMapping(String)"
"AbstractStaxXMLReader.java:200"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:201"$0$0$0$7$69$"	protected void endPrefixMapping(String prefix) throws SAXException {"
"AbstractStaxXMLReader.java:202"$1$0$0$7$75$"		if (getContentHandler() != null && this.namespaces.containsKey(prefix)) {"
"AbstractStaxXMLReader.java:203"$1$0$0$1$48$"			getContentHandler().endPrefixMapping(prefix);"
"AbstractStaxXMLReader.java:204"$0$0$0$1$34$"			this.namespaces.remove(prefix);"
"AbstractStaxXMLReader.java:205"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:206"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:207"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:208"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:209"$0$0$0$1$4$"	/**"
"AbstractStaxXMLReader.java:210"$0$0$0$14$91$"	 * Implementation of the {@code Locator} interface based on a given StAX {@code Location}."
"AbstractStaxXMLReader.java:211"$0$0$0$3$16$"	 * @see Locator"
"AbstractStaxXMLReader.java:212"$0$0$0$3$17$"	 * @see Location"
"AbstractStaxXMLReader.java:213"$0$0$0$1$4$"	 */"
"AbstractStaxXMLReader.java:214"$0$0$0$7$54$"	private static class StaxLocator implements Locator {"
"AbstractStaxXMLReader.java:215"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:216"$0$0$0$4$34$"		private final Location location;"
"AbstractStaxXMLReader.java:217"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:218"$0$0$0$4$41$"		public StaxLocator(Location location) {"
"AbstractStaxXMLReader.java:219"$0$0$0$3$28$"			this.location = location;"
"AbstractStaxXMLReader.java:220"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:221"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:222"$0$0$0$1$11$"		@Override"
"AbstractStaxXMLReader.java:223"$1$0$0$4$31$"		public String getPublicId() {"
"AbstractStaxXMLReader.java:224"$1$0$0$2$38$"			return this.location.getPublicId();"
"AbstractStaxXMLReader.java:225"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:226"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:227"$0$0$0$1$11$"		@Override"
"AbstractStaxXMLReader.java:228"$1$0$0$4$31$"		public String getSystemId() {"
"AbstractStaxXMLReader.java:229"$1$0$0$2$38$"			return this.location.getSystemId();"
"AbstractStaxXMLReader.java:230"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:231"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:232"$0$0$0$1$11$"		@Override"
"AbstractStaxXMLReader.java:233"$1$0$0$4$30$"		public int getLineNumber() {"
"AbstractStaxXMLReader.java:234"$1$0$0$2$40$"			return this.location.getLineNumber();"
"AbstractStaxXMLReader.java:235"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:236"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:237"$0$0$0$1$11$"		@Override"
"AbstractStaxXMLReader.java:238"$1$0$0$4$32$"		public int getColumnNumber() {"
"AbstractStaxXMLReader.java:239"$1$0$0$2$42$"			return this.location.getColumnNumber();"
"AbstractStaxXMLReader.java:240"$0$0$0$1$3$"		}"
"AbstractStaxXMLReader.java:241"$0$0$0$1$2$"	}"
"AbstractStaxXMLReader.java:242"$0$0$0$0$0$""
"AbstractStaxXMLReader.java:243"$0$0$0$1$1$"}"
"PackagesAnnotationFilter.java:1"$0$0$0$1$2$"/*"
"PackagesAnnotationFilter.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"PackagesAnnotationFilter.java:3"$0$0$0$1$2$" *"
"PackagesAnnotationFilter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PackagesAnnotationFilter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PackagesAnnotationFilter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PackagesAnnotationFilter.java:7"$0$0$0$1$2$" *"
"PackagesAnnotationFilter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PackagesAnnotationFilter.java:9"$0$0$0$1$2$" *"
"PackagesAnnotationFilter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PackagesAnnotationFilter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PackagesAnnotationFilter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PackagesAnnotationFilter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PackagesAnnotationFilter.java:14"$0$0$0$5$33$" * limitations under the License."
"PackagesAnnotationFilter.java:15"$0$0$0$1$3$" */"
"PackagesAnnotationFilter.java:16"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"PackagesAnnotationFilter.java:18"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:19"$0$0$0$2$24$"import java.util.Arrays;"
"PackagesAnnotationFilter.java:20"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:21"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PackagesAnnotationFilter.java:22"$0$0$0$2$39$"import org.springframework.util.Assert;"
"PackagesAnnotationFilter.java:23"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"PackagesAnnotationFilter.java:24"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:25"$0$0$0$1$3$"/**"
"PackagesAnnotationFilter.java:26"$0$0$0$6$51$" * {@link AnnotationFilter} implementation used for"
"PackagesAnnotationFilter.java:27"$0$0$0$3$48$" * {@link AnnotationFilter#packages(String...)}."
"PackagesAnnotationFilter.java:28"$0$0$0$1$2$" *"
"PackagesAnnotationFilter.java:29"$0$0$0$4$23$" * @author Phillip Webb"
"PackagesAnnotationFilter.java:30"$0$0$0$3$13$" * @since 5.2"
"PackagesAnnotationFilter.java:31"$0$0$0$1$3$" */"
"PackagesAnnotationFilter.java:32"$0$0$0$6$66$"final class PackagesAnnotationFilter implements AnnotationFilter {"
"PackagesAnnotationFilter.java:33"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:34"$0$0$0$4$33$"	private final String[] prefixes;"
"PackagesAnnotationFilter.java:35"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:36"$0$0$0$4$28$"	private final int hashCode;"
"PackagesAnnotationFilter.java:37"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:38"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:39"$0$0$0$3$47$"	PackagesAnnotationFilter(String... packages) {"
"PackagesAnnotationFilter.java:40"$0$0$0$7$62$"		Assert.notNull(packages, ""Packages array must not be null"");"
"PackagesAnnotationFilter.java:41"$0$0$0$4$46$"		this.prefixes = new String[packages.length];"
"PackagesAnnotationFilter.java:42"$0$0$0$10$45$"		for (int i = 0; i < packages.length; i++) {"
"PackagesAnnotationFilter.java:43"$0$0$0$4$28$"			String pkg = packages[i];"
"PackagesAnnotationFilter.java:44"$0$0$0$8$70$"			Assert.hasText(pkg, ""Packages array must not have empty elements"");"
"PackagesAnnotationFilter.java:45"$0$0$0$5$32$"			this.prefixes[i] = pkg + ""."";"
"PackagesAnnotationFilter.java:46"$0$0$0$1$3$"		}"
"PackagesAnnotationFilter.java:47"$0$0$0$1$29$"		Arrays.sort(this.prefixes);"
"PackagesAnnotationFilter.java:48"$0$0$0$3$49$"		this.hashCode = Arrays.hashCode(this.prefixes);"
"PackagesAnnotationFilter.java:49"$0$0$0$1$2$"	}"
"PackagesAnnotationFilter.java:50"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:51"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:52"$0$0$0$1$10$"	@Override"
"PackagesAnnotationFilter.java:53"$0$0$0$5$48$"	public boolean matches(String annotationType) {"
"PackagesAnnotationFilter.java:54"$0$0$0$6$39$"		for (String prefix : this.prefixes) {"
"PackagesAnnotationFilter.java:55"$0$0$0$3$43$"			if (annotationType.startsWith(prefix)) {"
"PackagesAnnotationFilter.java:56"$0$0$0$2$16$"				return true;"
"PackagesAnnotationFilter.java:57"$0$0$0$1$4$"			}"
"PackagesAnnotationFilter.java:58"$0$0$0$1$3$"		}"
"PackagesAnnotationFilter.java:59"$0$0$0$2$15$"		return false;"
"PackagesAnnotationFilter.java:60"$0$0$0$1$2$"	}"
"PackagesAnnotationFilter.java:61"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:62"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:63"$0$0$0$1$10$"	@Override"
"PackagesAnnotationFilter.java:64"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"PackagesAnnotationFilter.java:65"$0$0$0$5$22$"		if (this == other) {"
"PackagesAnnotationFilter.java:66"$0$0$0$2$15$"			return true;"
"PackagesAnnotationFilter.java:67"$0$0$0$1$3$"		}"
"PackagesAnnotationFilter.java:68"$2$0$0$9$56$"		if (other == null || getClass() != other.getClass()) {"
"PackagesAnnotationFilter.java:69"$0$0$0$2$16$"			return false;"
"PackagesAnnotationFilter.java:70"$0$0$0$1$3$"		}"
"PackagesAnnotationFilter.java:71"$0$0$0$4$83$"		return Arrays.equals(this.prefixes, ((PackagesAnnotationFilter) other).prefixes);"
"PackagesAnnotationFilter.java:72"$0$0$0$1$2$"	}"
"PackagesAnnotationFilter.java:73"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:74"$0$0$0$1$10$"	@Override"
"PackagesAnnotationFilter.java:75"$0$0$0$4$24$"	public int hashCode() {"
"PackagesAnnotationFilter.java:76"$0$0$0$2$23$"		return this.hashCode;"
"PackagesAnnotationFilter.java:77"$0$0$0$1$2$"	}"
"PackagesAnnotationFilter.java:78"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:79"$0$0$0$1$10$"	@Override"
"PackagesAnnotationFilter.java:80"$0$0$0$4$27$"	public String toString() {"
"PackagesAnnotationFilter.java:81"$0$0$0$6$41$"		return ""Packages annotation filter: "" +"
"PackagesAnnotationFilter.java:82"$0$0$0$1$59$"				StringUtils.arrayToCommaDelimitedString(this.prefixes);"
"PackagesAnnotationFilter.java:83"$0$0$0$1$2$"	}"
"PackagesAnnotationFilter.java:84"$0$0$0$0$0$""
"PackagesAnnotationFilter.java:85"$0$0$0$1$1$"}"
"CollectionFactory.java:1"$0$0$0$1$2$"/*"
"CollectionFactory.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"CollectionFactory.java:3"$0$0$0$1$2$" *"
"CollectionFactory.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"CollectionFactory.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"CollectionFactory.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"CollectionFactory.java:7"$0$0$0$1$2$" *"
"CollectionFactory.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"CollectionFactory.java:9"$0$0$0$1$2$" *"
"CollectionFactory.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"CollectionFactory.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"CollectionFactory.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"CollectionFactory.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"CollectionFactory.java:14"$0$0$0$5$33$" * limitations under the License."
"CollectionFactory.java:15"$0$0$0$1$3$" */"
"CollectionFactory.java:16"$0$0$0$0$0$""
"CollectionFactory.java:17"$0$0$0$2$33$"package org.springframework.core;"
"CollectionFactory.java:18"$0$0$0$0$0$""
"CollectionFactory.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"CollectionFactory.java:20"$0$0$0$2$28$"import java.util.Collection;"
"CollectionFactory.java:21"$0$0$0$2$25$"import java.util.EnumMap;"
"CollectionFactory.java:22"$0$0$0$2$25$"import java.util.EnumSet;"
"CollectionFactory.java:23"$0$0$0$2$25$"import java.util.HashMap;"
"CollectionFactory.java:24"$0$0$0$2$25$"import java.util.HashSet;"
"CollectionFactory.java:25"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"CollectionFactory.java:26"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"CollectionFactory.java:27"$0$0$0$2$28$"import java.util.LinkedList;"
"CollectionFactory.java:28"$0$0$0$2$22$"import java.util.List;"
"CollectionFactory.java:29"$0$0$0$2$21$"import java.util.Map;"
"CollectionFactory.java:30"$0$0$0$2$30$"import java.util.NavigableMap;"
"CollectionFactory.java:31"$0$0$0$2$30$"import java.util.NavigableSet;"
"CollectionFactory.java:32"$0$0$0$2$28$"import java.util.Properties;"
"CollectionFactory.java:33"$0$0$0$2$21$"import java.util.Set;"
"CollectionFactory.java:34"$0$0$0$2$27$"import java.util.SortedMap;"
"CollectionFactory.java:35"$0$0$0$2$27$"import java.util.SortedSet;"
"CollectionFactory.java:36"$0$0$0$2$25$"import java.util.TreeMap;"
"CollectionFactory.java:37"$0$0$0$2$25$"import java.util.TreeSet;"
"CollectionFactory.java:38"$0$0$0$0$0$""
"CollectionFactory.java:39"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"CollectionFactory.java:40"$0$0$0$2$39$"import org.springframework.util.Assert;"
"CollectionFactory.java:41"$0$0$0$2$52$"import org.springframework.util.LinkedMultiValueMap;"
"CollectionFactory.java:42"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"CollectionFactory.java:43"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"CollectionFactory.java:44"$0$0$0$0$0$""
"CollectionFactory.java:45"$0$0$0$1$3$"/**"
"CollectionFactory.java:46"$0$0$0$14$84$" * Factory for collections that is aware of common Java and Spring collection types."
"CollectionFactory.java:47"$0$0$0$1$2$" *"
"CollectionFactory.java:48"$0$0$0$8$51$" * <p>Mainly for internal use within the framework."
"CollectionFactory.java:49"$0$0$0$1$2$" *"
"CollectionFactory.java:50"$0$0$0$4$26$" * @author Juergen Hoeller"
"CollectionFactory.java:51"$0$0$0$4$24$" * @author Arjen Poutsma"
"CollectionFactory.java:52"$0$0$0$4$24$" * @author Oliver Gierke"
"CollectionFactory.java:53"$0$0$0$4$22$" * @author Sam Brannen"
"CollectionFactory.java:54"$0$0$0$3$15$" * @since 1.1.1"
"CollectionFactory.java:55"$0$0$0$1$3$" */"
"CollectionFactory.java:56"$0$0$0$5$38$"public final class CollectionFactory {"
"CollectionFactory.java:57"$0$0$0$0$0$""
"CollectionFactory.java:58"$0$0$0$8$82$"	private static final Set<Class<?>> approximableCollectionTypes = new HashSet<>();"
"CollectionFactory.java:59"$0$0$0$0$0$""
"CollectionFactory.java:60"$0$0$0$8$75$"	private static final Set<Class<?>> approximableMapTypes = new HashSet<>();"
"CollectionFactory.java:61"$0$0$0$0$0$""
"CollectionFactory.java:62"$0$0$0$0$0$""
"CollectionFactory.java:63"$0$0$0$2$9$"	static {"
"CollectionFactory.java:64"$0$0$1$4$35$"		// Standard collection interfaces"
"CollectionFactory.java:65"$0$0$0$1$52$"		approximableCollectionTypes.add(Collection.class);"
"CollectionFactory.java:66"$0$0$0$1$46$"		approximableCollectionTypes.add(List.class);"
"CollectionFactory.java:67"$0$0$0$1$45$"		approximableCollectionTypes.add(Set.class);"
"CollectionFactory.java:68"$0$0$0$1$51$"		approximableCollectionTypes.add(SortedSet.class);"
"CollectionFactory.java:69"$0$0$0$1$54$"		approximableCollectionTypes.add(NavigableSet.class);"
"CollectionFactory.java:70"$0$0$0$1$38$"		approximableMapTypes.add(Map.class);"
"CollectionFactory.java:71"$0$0$0$1$44$"		approximableMapTypes.add(SortedMap.class);"
"CollectionFactory.java:72"$0$0$0$1$47$"		approximableMapTypes.add(NavigableMap.class);"
"CollectionFactory.java:73"$0$0$0$0$0$""
"CollectionFactory.java:74"$0$0$1$5$39$"		// Common concrete collection classes"
"CollectionFactory.java:75"$0$0$0$1$51$"		approximableCollectionTypes.add(ArrayList.class);"
"CollectionFactory.java:76"$0$0$0$1$52$"		approximableCollectionTypes.add(LinkedList.class);"
"CollectionFactory.java:77"$0$0$0$1$49$"		approximableCollectionTypes.add(HashSet.class);"
"CollectionFactory.java:78"$0$0$0$1$55$"		approximableCollectionTypes.add(LinkedHashSet.class);"
"CollectionFactory.java:79"$0$0$0$1$49$"		approximableCollectionTypes.add(TreeSet.class);"
"CollectionFactory.java:80"$0$0$0$1$49$"		approximableCollectionTypes.add(EnumSet.class);"
"CollectionFactory.java:81"$0$0$0$1$42$"		approximableMapTypes.add(HashMap.class);"
"CollectionFactory.java:82"$0$0$0$1$48$"		approximableMapTypes.add(LinkedHashMap.class);"
"CollectionFactory.java:83"$0$0$0$1$42$"		approximableMapTypes.add(TreeMap.class);"
"CollectionFactory.java:84"$0$0$0$1$42$"		approximableMapTypes.add(EnumMap.class);"
"CollectionFactory.java:85"$0$0$0$1$2$"	}"
"CollectionFactory.java:86"$0$0$0$0$0$""
"CollectionFactory.java:87"$0$0$0$0$0$""
"CollectionFactory.java:88"$0$0$0$3$30$"	private CollectionFactory() {"
"CollectionFactory.java:89"$0$0$0$1$2$"	}"
"CollectionFactory.java:90"$0$0$0$0$0$""
"CollectionFactory.java:91"$0$0$0$0$0$""
"CollectionFactory.java:92"$0$0$0$1$4$"	/**"
"CollectionFactory.java:93"$0$0$0$11$81$"	 * Determine whether the given collection type is an <em>approximable</em> type,"
"CollectionFactory.java:94"$0$0$0$9$74$"	 * i.e. a type that {@link #createApproximateCollection} can approximate."
"CollectionFactory.java:95"$0$0$0$8$54$"	 * @param collectionType the collection type to check"
"CollectionFactory.java:96"$0$0$0$9$61$"	 * @return {@code true} if the type is <em>approximable</em>"
"CollectionFactory.java:97"$0$0$0$1$4$"	 */"
"CollectionFactory.java:98"$0$0$0$7$88$"	public static boolean isApproximableCollectionType(@Nullable Class<?> collectionType) {"
"CollectionFactory.java:99"$0$0$0$6$90$"		return (collectionType != null && approximableCollectionTypes.contains(collectionType));"
"CollectionFactory.java:100"$0$0$0$1$2$"	}"
"CollectionFactory.java:101"$0$0$0$0$0$""
"CollectionFactory.java:102"$0$0$0$1$4$"	/**"
"CollectionFactory.java:103"$0$0$0$10$68$"	 * Create the most approximate collection for the given collection."
"CollectionFactory.java:104"$0$0$0$9$74$"	 * <p><strong>Warning</strong>: Since the parameterized type {@code E} is"
"CollectionFactory.java:105"$0$0$0$12$63$"	 * not bound to the type of elements contained in the supplied"
"CollectionFactory.java:106"$0$0$0$11$72$"	 * {@code collection}, type safety cannot be guaranteed if the supplied"
"CollectionFactory.java:107"$0$0$0$12$75$"	 * {@code collection} is an {@link EnumSet}. In such scenarios, the caller"
"CollectionFactory.java:108"$0$0$0$12$70$"	 * is responsible for ensuring that the element type for the supplied"
"CollectionFactory.java:109"$0$0$0$13$69$"	 * {@code collection} is an enum type matching type {@code E}. As an"
"CollectionFactory.java:110"$0$0$0$14$71$"	 * alternative, the caller may wish to treat the return value as a raw"
"CollectionFactory.java:111"$0$0$0$7$47$"	 * collection or collection of {@link Object}."
"CollectionFactory.java:112"$0$0$0$10$78$"	 * @param collection the original collection object, potentially {@code null}"
"CollectionFactory.java:113"$0$0$0$6$40$"	 * @param capacity the initial capacity"
"CollectionFactory.java:114"$0$0$0$7$44$"	 * @return a new, empty collection instance"
"CollectionFactory.java:115"$0$0$0$3$38$"	 * @see #isApproximableCollectionType"
"CollectionFactory.java:116"$0$0$0$3$29$"	 * @see java.util.LinkedList"
"CollectionFactory.java:117"$0$0$0$3$28$"	 * @see java.util.ArrayList"
"CollectionFactory.java:118"$0$0$0$3$26$"	 * @see java.util.EnumSet"
"CollectionFactory.java:119"$0$0$0$3$26$"	 * @see java.util.TreeSet"
"CollectionFactory.java:120"$0$0$0$3$32$"	 * @see java.util.LinkedHashSet"
"CollectionFactory.java:121"$0$0$0$1$4$"	 */"
"CollectionFactory.java:122"$0$0$0$3$53$"	@SuppressWarnings({""rawtypes"", ""unchecked"", ""cast""})"
"CollectionFactory.java:123"$0$0$0$10$105$"	public static <E> Collection<E> createApproximateCollection(@Nullable Object collection, int capacity) {"
"CollectionFactory.java:124"$0$0$0$5$41$"		if (collection instanceof LinkedList) {"
"CollectionFactory.java:125"$0$0$0$3$29$"			return new LinkedList<>();"
"CollectionFactory.java:126"$0$0$0$1$3$"		}"
"CollectionFactory.java:127"$0$0$0$6$40$"		else if (collection instanceof List) {"
"CollectionFactory.java:128"$0$0$0$3$36$"			return new ArrayList<>(capacity);"
"CollectionFactory.java:129"$0$0$0$1$3$"		}"
"CollectionFactory.java:130"$0$0$0$6$43$"		else if (collection instanceof EnumSet) {"
"CollectionFactory.java:131"$0$0$1$9$57$"			// Cast is necessary for compilation in Eclipse 4.4.1."
"CollectionFactory.java:132"$0$0$0$6$80$"			Collection<E> enumSet = (Collection<E>) EnumSet.copyOf((EnumSet) collection);"
"CollectionFactory.java:133"$0$0$0$1$19$"			enumSet.clear();"
"CollectionFactory.java:134"$0$0$0$2$18$"			return enumSet;"
"CollectionFactory.java:135"$0$0$0$1$3$"		}"
"CollectionFactory.java:136"$0$0$0$6$45$"		else if (collection instanceof SortedSet) {"
"CollectionFactory.java:137"$0$0$0$4$66$"			return new TreeSet<>(((SortedSet<E>) collection).comparator());"
"CollectionFactory.java:138"$0$0$0$1$3$"		}"
"CollectionFactory.java:139"$0$0$0$2$8$"		else {"
"CollectionFactory.java:140"$0$0$0$3$40$"			return new LinkedHashSet<>(capacity);"
"CollectionFactory.java:141"$0$0$0$1$3$"		}"
"CollectionFactory.java:142"$0$0$0$1$2$"	}"
"CollectionFactory.java:143"$0$0$0$0$0$""
"CollectionFactory.java:144"$0$0$0$1$4$"	/**"
"CollectionFactory.java:145"$0$0$0$11$73$"	 * Create the most appropriate collection for the given collection type."
"CollectionFactory.java:146"$0$0$0$9$71$"	 * <p>Delegates to {@link #createCollection(Class, Class, int)} with a"
"CollectionFactory.java:147"$0$0$0$5$30$"	 * {@code null} element type."
"CollectionFactory.java:148"$1$0$0$13$88$"	 * @param collectionType the desired type of the target collection (never {@code null})"
"CollectionFactory.java:149"$0$0$0$6$40$"	 * @param capacity the initial capacity"
"CollectionFactory.java:150"$0$0$0$6$37$"	 * @return a new collection instance"
"CollectionFactory.java:151"$0$0$0$8$75$"	 * @throws IllegalArgumentException if the supplied {@code collectionType}"
"CollectionFactory.java:152"$0$0$0$9$46$"	 * is {@code null} or of type {@link EnumSet}"
"CollectionFactory.java:153"$0$0$0$1$4$"	 */"
"CollectionFactory.java:154"$0$0$0$9$90$"	public static <E> Collection<E> createCollection(Class<?> collectionType, int capacity) {"
"CollectionFactory.java:155"$0$0$0$4$58$"		return createCollection(collectionType, null, capacity);"
"CollectionFactory.java:156"$0$0$0$1$2$"	}"
"CollectionFactory.java:157"$0$0$0$0$0$""
"CollectionFactory.java:158"$0$0$0$1$4$"	/**"
"CollectionFactory.java:159"$0$0$0$11$73$"	 * Create the most appropriate collection for the given collection type."
"CollectionFactory.java:160"$0$0$0$9$74$"	 * <p><strong>Warning</strong>: Since the parameterized type {@code E} is"
"CollectionFactory.java:161"$0$0$0$12$72$"	 * not bound to the supplied {@code elementType}, type safety cannot be"
"CollectionFactory.java:162"$0$0$0$10$72$"	 * guaranteed if the desired {@code collectionType} is {@link EnumSet}."
"CollectionFactory.java:163"$0$0$0$12$70$"	 * In such scenarios, the caller is responsible for ensuring that the"
"CollectionFactory.java:164"$0$0$0$12$73$"	 * supplied {@code elementType} is an enum type matching type {@code E}."
"CollectionFactory.java:165"$0$0$0$15$73$"	 * As an alternative, the caller may wish to treat the return value as a"
"CollectionFactory.java:166"$0$0$0$8$51$"	 * raw collection or collection of {@link Object}."
"CollectionFactory.java:167"$1$0$0$13$88$"	 * @param collectionType the desired type of the target collection (never {@code null})"
"CollectionFactory.java:168"$0$0$0$12$80$"	 * @param elementType the collection's element type, or {@code null} if unknown"
"CollectionFactory.java:169"$0$0$0$8$54$"	 * (note: only relevant for {@link EnumSet} creation)"
"CollectionFactory.java:170"$0$0$0$6$40$"	 * @param capacity the initial capacity"
"CollectionFactory.java:171"$0$0$0$6$37$"	 * @return a new collection instance"
"CollectionFactory.java:172"$0$0$0$3$16$"	 * @since 4.1.3"
"CollectionFactory.java:173"$0$0$0$3$32$"	 * @see java.util.LinkedHashSet"
"CollectionFactory.java:174"$0$0$0$3$28$"	 * @see java.util.ArrayList"
"CollectionFactory.java:175"$0$0$0$3$26$"	 * @see java.util.TreeSet"
"CollectionFactory.java:176"$0$0$0$3$26$"	 * @see java.util.EnumSet"
"CollectionFactory.java:177"$0$0$0$9$78$"	 * @throws IllegalArgumentException if the supplied {@code collectionType} is"
"CollectionFactory.java:178"$0$0$0$13$81$"	 * {@code null}; or if the desired {@code collectionType} is {@link EnumSet} and"
"CollectionFactory.java:179"$0$0$0$12$69$"	 * the supplied {@code elementType} is not a subtype of {@link Enum}"
"CollectionFactory.java:180"$0$0$0$1$4$"	 */"
"CollectionFactory.java:181"$0$0$0$2$41$"	@SuppressWarnings({""unchecked"", ""cast""})"
"CollectionFactory.java:182"$0$0$0$12$122$"	public static <E> Collection<E> createCollection(Class<?> collectionType, @Nullable Class<?> elementType, int capacity) {"
"CollectionFactory.java:183"$0$0$0$7$69$"		Assert.notNull(collectionType, ""Collection type must not be null"");"
"CollectionFactory.java:184"$0$0$0$3$37$"		if (collectionType.isInterface()) {"
"CollectionFactory.java:185"$0$0$0$9$75$"			if (Set.class == collectionType || Collection.class == collectionType) {"
"CollectionFactory.java:186"$0$0$0$3$41$"				return new LinkedHashSet<>(capacity);"
"CollectionFactory.java:187"$0$0$0$1$4$"			}"
"CollectionFactory.java:188"$0$0$0$6$43$"			else if (List.class == collectionType) {"
"CollectionFactory.java:189"$0$0$0$3$37$"				return new ArrayList<>(capacity);"
"CollectionFactory.java:190"$0$0$0$1$4$"			}"
"CollectionFactory.java:191"$0$0$0$10$88$"			else if (SortedSet.class == collectionType || NavigableSet.class == collectionType) {"
"CollectionFactory.java:192"$0$0$0$3$27$"				return new TreeSet<>();"
"CollectionFactory.java:193"$0$0$0$1$4$"			}"
"CollectionFactory.java:194"$0$0$0$2$9$"			else {"
"CollectionFactory.java:195"$1$0$0$8$104$"				throw new IllegalArgumentException(""Unsupported Collection interface: "" + collectionType.getName());"
"CollectionFactory.java:196"$0$0$0$1$4$"			}"
"CollectionFactory.java:197"$0$0$0$1$3$"		}"
"CollectionFactory.java:198"$0$0$0$4$60$"		else if (EnumSet.class.isAssignableFrom(collectionType)) {"
"CollectionFactory.java:199"$0$0$0$8$81$"			Assert.notNull(elementType, ""Cannot create EnumSet for unknown element type"");"
"CollectionFactory.java:200"$0$0$1$9$57$"			// Cast is necessary for compilation in Eclipse 4.4.1."
"CollectionFactory.java:201"$0$0$0$3$66$"			return (Collection<E>) EnumSet.noneOf(asEnumType(elementType));"
"CollectionFactory.java:202"$0$0$0$1$3$"		}"
"CollectionFactory.java:203"$0$0$0$2$8$"		else {"
"CollectionFactory.java:204"$0$0$0$3$60$"			if (!Collection.class.isAssignableFrom(collectionType)) {"
"CollectionFactory.java:205"$1$0$0$8$99$"				throw new IllegalArgumentException(""Unsupported Collection type: "" + collectionType.getName());"
"CollectionFactory.java:206"$0$0$0$1$4$"			}"
"CollectionFactory.java:207"$0$0$0$2$8$"			try {"
"CollectionFactory.java:208"$0$0$0$3$95$"				return (Collection<E>) ReflectionUtils.accessibleConstructor(collectionType).newInstance();"
"CollectionFactory.java:209"$0$0$0$1$4$"			}"
"CollectionFactory.java:210"$0$0$0$4$25$"			catch (Throwable ex) {"
"CollectionFactory.java:211"$0$0$0$3$39$"				throw new IllegalArgumentException("
"CollectionFactory.java:212"$1$0$0$9$79$"					""Could not instantiate Collection type: "" + collectionType.getName(), ex);"
"CollectionFactory.java:213"$0$0$0$1$4$"			}"
"CollectionFactory.java:214"$0$0$0$1$3$"		}"
"CollectionFactory.java:215"$0$0$0$1$2$"	}"
"CollectionFactory.java:216"$0$0$0$0$0$""
"CollectionFactory.java:217"$0$0$0$1$4$"	/**"
"CollectionFactory.java:218"$0$0$0$11$74$"	 * Determine whether the given map type is an <em>approximable</em> type,"
"CollectionFactory.java:219"$0$0$0$9$67$"	 * i.e. a type that {@link #createApproximateMap} can approximate."
"CollectionFactory.java:220"$0$0$0$8$40$"	 * @param mapType the map type to check"
"CollectionFactory.java:221"$0$0$0$9$61$"	 * @return {@code true} if the type is <em>approximable</em>"
"CollectionFactory.java:222"$0$0$0$1$4$"	 */"
"CollectionFactory.java:223"$0$0$0$7$74$"	public static boolean isApproximableMapType(@Nullable Class<?> mapType) {"
"CollectionFactory.java:224"$0$0$0$6$69$"		return (mapType != null && approximableMapTypes.contains(mapType));"
"CollectionFactory.java:225"$0$0$0$1$2$"	}"
"CollectionFactory.java:226"$0$0$0$0$0$""
"CollectionFactory.java:227"$0$0$0$1$4$"	/**"
"CollectionFactory.java:228"$0$0$0$10$54$"	 * Create the most approximate map for the given map."
"CollectionFactory.java:229"$0$0$0$9$74$"	 * <p><strong>Warning</strong>: Since the parameterized type {@code K} is"
"CollectionFactory.java:230"$0$0$0$14$72$"	 * not bound to the type of keys contained in the supplied {@code map},"
"CollectionFactory.java:231"$0$0$0$13$70$"	 * type safety cannot be guaranteed if the supplied {@code map} is an"
"CollectionFactory.java:232"$0$0$0$11$69$"	 * {@link EnumMap}. In such scenarios, the caller is responsible for"
"CollectionFactory.java:233"$0$0$0$15$74$"	 * ensuring that the key type in the supplied {@code map} is an enum type"
"CollectionFactory.java:234"$0$0$0$13$70$"	 * matching type {@code K}. As an alternative, the caller may wish to"
"CollectionFactory.java:235"$0$0$0$15$71$"	 * treat the return value as a raw map or map keyed by {@link Object}."
"CollectionFactory.java:236"$0$0$0$10$64$"	 * @param map the original map object, potentially {@code null}"
"CollectionFactory.java:237"$0$0$0$6$40$"	 * @param capacity the initial capacity"
"CollectionFactory.java:238"$0$0$0$7$37$"	 * @return a new, empty map instance"
"CollectionFactory.java:239"$0$0$0$3$31$"	 * @see #isApproximableMapType"
"CollectionFactory.java:240"$0$0$0$3$26$"	 * @see java.util.EnumMap"
"CollectionFactory.java:241"$0$0$0$3$26$"	 * @see java.util.TreeMap"
"CollectionFactory.java:242"$0$0$0$3$32$"	 * @see java.util.LinkedHashMap"
"CollectionFactory.java:243"$0$0$0$1$4$"	 */"
"CollectionFactory.java:244"$0$0$0$2$45$"	@SuppressWarnings({""rawtypes"", ""unchecked""})"
"CollectionFactory.java:245"$0$0$0$12$90$"	public static <K, V> Map<K, V> createApproximateMap(@Nullable Object map, int capacity) {"
"CollectionFactory.java:246"$0$0$0$5$31$"		if (map instanceof EnumMap) {"
"CollectionFactory.java:247"$0$0$0$6$48$"			EnumMap enumMap = new EnumMap((EnumMap) map);"
"CollectionFactory.java:248"$0$0$0$1$19$"			enumMap.clear();"
"CollectionFactory.java:249"$0$0$0$2$18$"			return enumMap;"
"CollectionFactory.java:250"$0$0$0$1$3$"		}"
"CollectionFactory.java:251"$0$0$0$6$38$"		else if (map instanceof SortedMap) {"
"CollectionFactory.java:252"$0$0$0$5$62$"			return new TreeMap<>(((SortedMap<K, V>) map).comparator());"
"CollectionFactory.java:253"$0$0$0$1$3$"		}"
"CollectionFactory.java:254"$0$0$0$2$8$"		else {"
"CollectionFactory.java:255"$0$0$0$3$40$"			return new LinkedHashMap<>(capacity);"
"CollectionFactory.java:256"$0$0$0$1$3$"		}"
"CollectionFactory.java:257"$0$0$0$1$2$"	}"
"CollectionFactory.java:258"$0$0$0$0$0$""
"CollectionFactory.java:259"$0$0$0$1$4$"	/**"
"CollectionFactory.java:260"$0$0$0$11$59$"	 * Create the most appropriate map for the given map type."
"CollectionFactory.java:261"$0$0$0$9$64$"	 * <p>Delegates to {@link #createMap(Class, Class, int)} with a"
"CollectionFactory.java:262"$0$0$0$5$26$"	 * {@code null} key type."
"CollectionFactory.java:263"$1$0$0$10$53$"	 * @param mapType the desired type of the target map"
"CollectionFactory.java:264"$0$0$0$6$40$"	 * @param capacity the initial capacity"
"CollectionFactory.java:265"$0$0$0$6$30$"	 * @return a new map instance"
"CollectionFactory.java:266"$0$0$0$9$71$"	 * @throws IllegalArgumentException if the supplied {@code mapType} is"
"CollectionFactory.java:267"$0$0$0$8$43$"	 * {@code null} or of type {@link EnumMap}"
"CollectionFactory.java:268"$0$0$0$1$4$"	 */"
"CollectionFactory.java:269"$0$0$0$11$75$"	public static <K, V> Map<K, V> createMap(Class<?> mapType, int capacity) {"
"CollectionFactory.java:270"$0$0$0$4$44$"		return createMap(mapType, null, capacity);"
"CollectionFactory.java:271"$0$0$0$1$2$"	}"
"CollectionFactory.java:272"$0$0$0$0$0$""
"CollectionFactory.java:273"$0$0$0$1$4$"	/**"
"CollectionFactory.java:274"$0$0$0$11$59$"	 * Create the most appropriate map for the given map type."
"CollectionFactory.java:275"$0$0$0$8$71$"	 * <p><strong>Warning</strong>: Since the parameterized type {@code K}"
"CollectionFactory.java:276"$0$0$0$13$71$"	 * is not bound to the supplied {@code keyType}, type safety cannot be"
"CollectionFactory.java:277"$0$0$0$12$73$"	 * guaranteed if the desired {@code mapType} is {@link EnumMap}. In such"
"CollectionFactory.java:278"$0$0$0$12$78$"	 * scenarios, the caller is responsible for ensuring that the {@code keyType}"
"CollectionFactory.java:279"$0$0$0$14$74$"	 * is an enum type matching type {@code K}. As an alternative, the caller"
"CollectionFactory.java:280"$0$0$0$16$67$"	 * may wish to treat the return value as a raw map or map keyed by"
"CollectionFactory.java:281"$0$0$0$11$68$"	 * {@link Object}. Similarly, type safety cannot be enforced if the"
"CollectionFactory.java:282"$0$0$0$7$53$"	 * desired {@code mapType} is {@link MultiValueMap}."
"CollectionFactory.java:283"$1$0$0$13$74$"	 * @param mapType the desired type of the target map (never {@code null})"
"CollectionFactory.java:284"$0$0$0$12$65$"	 * @param keyType the map's key type, or {@code null} if unknown"
"CollectionFactory.java:285"$0$0$0$8$54$"	 * (note: only relevant for {@link EnumMap} creation)"
"CollectionFactory.java:286"$0$0$0$6$40$"	 * @param capacity the initial capacity"
"CollectionFactory.java:287"$0$0$0$6$30$"	 * @return a new map instance"
"CollectionFactory.java:288"$0$0$0$3$16$"	 * @since 4.1.3"
"CollectionFactory.java:289"$0$0$0$3$32$"	 * @see java.util.LinkedHashMap"
"CollectionFactory.java:290"$0$0$0$3$26$"	 * @see java.util.TreeMap"
"CollectionFactory.java:291"$0$0$0$3$53$"	 * @see org.springframework.util.LinkedMultiValueMap"
"CollectionFactory.java:292"$0$0$0$3$26$"	 * @see java.util.EnumMap"
"CollectionFactory.java:293"$0$0$0$9$71$"	 * @throws IllegalArgumentException if the supplied {@code mapType} is"
"CollectionFactory.java:294"$0$0$0$13$74$"	 * {@code null}; or if the desired {@code mapType} is {@link EnumMap} and"
"CollectionFactory.java:295"$0$0$0$12$65$"	 * the supplied {@code keyType} is not a subtype of {@link Enum}"
"CollectionFactory.java:296"$0$0$0$1$4$"	 */"
"CollectionFactory.java:297"$0$0$0$2$45$"	@SuppressWarnings({""rawtypes"", ""unchecked""})"
"CollectionFactory.java:298"$0$0$0$14$103$"	public static <K, V> Map<K, V> createMap(Class<?> mapType, @Nullable Class<?> keyType, int capacity) {"
"CollectionFactory.java:299"$0$0$0$7$55$"		Assert.notNull(mapType, ""Map type must not be null"");"
"CollectionFactory.java:300"$0$0$0$3$30$"		if (mapType.isInterface()) {"
"CollectionFactory.java:301"$0$0$0$5$30$"			if (Map.class == mapType) {"
"CollectionFactory.java:302"$0$0$0$3$41$"				return new LinkedHashMap<>(capacity);"
"CollectionFactory.java:303"$0$0$0$1$4$"			}"
"CollectionFactory.java:304"$0$0$0$10$74$"			else if (SortedMap.class == mapType || NavigableMap.class == mapType) {"
"CollectionFactory.java:305"$0$0$0$3$27$"				return new TreeMap<>();"
"CollectionFactory.java:306"$0$0$0$1$4$"			}"
"CollectionFactory.java:307"$0$0$0$6$45$"			else if (MultiValueMap.class == mapType) {"
"CollectionFactory.java:308"$0$0$0$3$37$"				return new LinkedMultiValueMap();"
"CollectionFactory.java:309"$0$0$0$1$4$"			}"
"CollectionFactory.java:310"$0$0$0$2$9$"			else {"
"CollectionFactory.java:311"$1$0$0$8$90$"				throw new IllegalArgumentException(""Unsupported Map interface: "" + mapType.getName());"
"CollectionFactory.java:312"$0$0$0$1$4$"			}"
"CollectionFactory.java:313"$0$0$0$1$3$"		}"
"CollectionFactory.java:314"$0$0$0$6$38$"		else if (EnumMap.class == mapType) {"
"CollectionFactory.java:315"$0$0$0$8$73$"			Assert.notNull(keyType, ""Cannot create EnumMap for unknown key type"");"
"CollectionFactory.java:316"$0$0$0$3$43$"			return new EnumMap(asEnumType(keyType));"
"CollectionFactory.java:317"$0$0$0$1$3$"		}"
"CollectionFactory.java:318"$0$0$0$2$8$"		else {"
"CollectionFactory.java:319"$0$0$0$3$46$"			if (!Map.class.isAssignableFrom(mapType)) {"
"CollectionFactory.java:320"$1$0$0$8$85$"				throw new IllegalArgumentException(""Unsupported Map type: "" + mapType.getName());"
"CollectionFactory.java:321"$0$0$0$1$4$"			}"
"CollectionFactory.java:322"$0$0$0$2$8$"			try {"
"CollectionFactory.java:323"$0$0$0$4$84$"				return (Map<K, V>) ReflectionUtils.accessibleConstructor(mapType).newInstance();"
"CollectionFactory.java:324"$0$0$0$1$4$"			}"
"CollectionFactory.java:325"$0$0$0$4$25$"			catch (Throwable ex) {"
"CollectionFactory.java:326"$1$0$0$11$99$"				throw new IllegalArgumentException(""Could not instantiate Map type: "" + mapType.getName(), ex);"
"CollectionFactory.java:327"$0$0$0$1$4$"			}"
"CollectionFactory.java:328"$0$0$0$1$3$"		}"
"CollectionFactory.java:329"$0$0$0$1$2$"	}"
"CollectionFactory.java:330"$0$0$0$0$0$""
"CollectionFactory.java:331"$0$0$0$1$4$"	/**"
"CollectionFactory.java:332"$0$0$0$10$78$"	 * Create a variant of {@link java.util.Properties} that automatically adapts"
"CollectionFactory.java:333"$1$0$0$9$82$"	 * non-String values to String representations in {@link Properties#getProperty}."
"CollectionFactory.java:334"$0$0$0$10$77$"	 * <p>In addition, the returned {@code Properties} instance sorts properties"
"CollectionFactory.java:335"$0$0$0$6$41$"	 * alphanumerically based on their keys."
"CollectionFactory.java:336"$0$0$0$7$45$"	 * @return a new {@code Properties} instance"
"CollectionFactory.java:337"$0$0$0$3$16$"	 * @since 4.3.4"
"CollectionFactory.java:338"$0$0$0$3$41$"	 * @see #createSortedProperties(boolean)"
"CollectionFactory.java:339"$0$0$0$4$53$"	 * @see #createSortedProperties(Properties, boolean)"
"CollectionFactory.java:340"$0$0$0$1$4$"	 */"
"CollectionFactory.java:341"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"CollectionFactory.java:342"$0$0$0$5$60$"	public static Properties createStringAdaptingProperties() {"
"CollectionFactory.java:343"$0$0$0$4$38$"		return new SortedProperties(false) {"
"CollectionFactory.java:344"$0$0$0$1$12$"			@Override"
"CollectionFactory.java:345"$0$0$0$1$12$"			@Nullable"
"CollectionFactory.java:346"$1$0$0$5$42$"			public String getProperty(String key) {"
"CollectionFactory.java:347"$1$0$0$4$28$"				Object value = get(key);"
"CollectionFactory.java:348"$0$0$0$8$53$"				return (value != null ? value.toString() : null);"
"CollectionFactory.java:349"$0$0$0$1$4$"			}"
"CollectionFactory.java:350"$0$0$0$1$4$"		};"
"CollectionFactory.java:351"$0$0$0$1$2$"	}"
"CollectionFactory.java:352"$0$0$0$0$0$""
"CollectionFactory.java:353"$0$0$0$1$4$"	/**"
"CollectionFactory.java:354"$0$0$0$10$74$"	 * Create a variant of {@link java.util.Properties} that sorts properties"
"CollectionFactory.java:355"$0$0$0$6$41$"	 * alphanumerically based on their keys."
"CollectionFactory.java:356"$0$0$0$13$75$"	 * <p>This can be useful when storing the {@link Properties} instance in a"
"CollectionFactory.java:357"$0$0$0$14$79$"	 * properties file, since it allows such files to be generated in a repeatable"
"CollectionFactory.java:358"$0$0$0$10$72$"	 * manner with consistent ordering of properties. Comments in generated"
"CollectionFactory.java:359"$0$0$0$8$52$"	 * properties files can also be optionally omitted."
"CollectionFactory.java:360"$0$0$0$11$71$"	 * @param omitComments {@code true} if comments should be omitted when"
"CollectionFactory.java:361"$0$0$0$6$32$"	 * storing properties in a file"
"CollectionFactory.java:362"$0$0$0$7$45$"	 * @return a new {@code Properties} instance"
"CollectionFactory.java:363"$0$0$0$3$14$"	 * @since 5.2"
"CollectionFactory.java:364"$0$0$0$3$42$"	 * @see #createStringAdaptingProperties()"
"CollectionFactory.java:365"$0$0$0$4$53$"	 * @see #createSortedProperties(Properties, boolean)"
"CollectionFactory.java:366"$0$0$0$1$4$"	 */"
"CollectionFactory.java:367"$0$0$0$6$72$"	public static Properties createSortedProperties(boolean omitComments) {"
"CollectionFactory.java:368"$0$0$0$3$44$"		return new SortedProperties(omitComments);"
"CollectionFactory.java:369"$0$0$0$1$2$"	}"
"CollectionFactory.java:370"$0$0$0$0$0$""
"CollectionFactory.java:371"$0$0$0$1$4$"	/**"
"CollectionFactory.java:372"$0$0$0$10$74$"	 * Create a variant of {@link java.util.Properties} that sorts properties"
"CollectionFactory.java:373"$0$0$0$6$41$"	 * alphanumerically based on their keys."
"CollectionFactory.java:374"$0$0$0$13$75$"	 * <p>This can be useful when storing the {@code Properties} instance in a"
"CollectionFactory.java:375"$0$0$0$14$79$"	 * properties file, since it allows such files to be generated in a repeatable"
"CollectionFactory.java:376"$0$0$0$10$72$"	 * manner with consistent ordering of properties. Comments in generated"
"CollectionFactory.java:377"$0$0$0$8$52$"	 * properties files can also be optionally omitted."
"CollectionFactory.java:378"$0$0$0$10$70$"	 * <p>The returned {@code Properties} instance will be populated with"
"CollectionFactory.java:379"$0$0$0$10$71$"	 * properties from the supplied {@code properties} object, but default"
"CollectionFactory.java:380"$0$0$0$12$78$"	 * properties from the supplied {@code properties} object will not be copied."
"CollectionFactory.java:381"$0$0$0$12$74$"	 * @param properties the {@code Properties} object from which to copy the"
"CollectionFactory.java:382"$0$0$0$3$22$"	 * initial properties"
"CollectionFactory.java:383"$0$0$0$11$71$"	 * @param omitComments {@code true} if comments should be omitted when"
"CollectionFactory.java:384"$0$0$0$6$32$"	 * storing properties in a file"
"CollectionFactory.java:385"$0$0$0$7$45$"	 * @return a new {@code Properties} instance"
"CollectionFactory.java:386"$0$0$0$3$14$"	 * @since 5.2"
"CollectionFactory.java:387"$0$0$0$3$42$"	 * @see #createStringAdaptingProperties()"
"CollectionFactory.java:388"$0$0$0$3$41$"	 * @see #createSortedProperties(boolean)"
"CollectionFactory.java:389"$0$0$0$1$4$"	 */"
"CollectionFactory.java:390"$0$0$0$8$95$"	public static Properties createSortedProperties(Properties properties, boolean omitComments) {"
"CollectionFactory.java:391"$0$0$0$4$56$"		return new SortedProperties(properties, omitComments);"
"CollectionFactory.java:392"$0$0$0$1$2$"	}"
"CollectionFactory.java:393"$0$0$0$0$0$""
"CollectionFactory.java:394"$0$0$0$1$4$"	/**"
"CollectionFactory.java:395"$0$0$0$11$53$"	 * Cast the given type to a subtype of {@link Enum}."
"CollectionFactory.java:396"$0$0$0$9$53$"	 * @param enumType the enum type, never {@code null}"
"CollectionFactory.java:397"$0$0$0$10$53$"	 * @return the given type as subtype of {@link Enum}"
"CollectionFactory.java:398"$0$0$0$14$87$"	 * @throws IllegalArgumentException if the given type is not a subtype of {@link Enum}"
"CollectionFactory.java:399"$0$0$0$1$4$"	 */"
"CollectionFactory.java:400"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"CollectionFactory.java:401"$0$0$0$8$69$"	private static Class<? extends Enum> asEnumType(Class<?> enumType) {"
"CollectionFactory.java:402"$0$0$0$7$57$"		Assert.notNull(enumType, ""Enum type must not be null"");"
"CollectionFactory.java:403"$0$0$0$3$47$"		if (!Enum.class.isAssignableFrom(enumType)) {"
"CollectionFactory.java:404"$1$0$0$11$93$"			throw new IllegalArgumentException(""Supplied type is not an enum: "" + enumType.getName());"
"CollectionFactory.java:405"$0$0$0$1$3$"		}"
"CollectionFactory.java:406"$0$0$0$2$41$"		return enumType.asSubclass(Enum.class);"
"CollectionFactory.java:407"$0$0$0$1$2$"	}"
"CollectionFactory.java:408"$0$0$0$0$0$""
"CollectionFactory.java:409"$0$0$0$1$1$"}"
"DomContentHandler.java:1"$0$0$0$1$2$"/*"
"DomContentHandler.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"DomContentHandler.java:3"$0$0$0$1$2$" *"
"DomContentHandler.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DomContentHandler.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DomContentHandler.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DomContentHandler.java:7"$0$0$0$1$2$" *"
"DomContentHandler.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DomContentHandler.java:9"$0$0$0$1$2$" *"
"DomContentHandler.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DomContentHandler.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DomContentHandler.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DomContentHandler.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DomContentHandler.java:14"$0$0$0$5$33$" * limitations under the License."
"DomContentHandler.java:15"$0$0$0$1$3$" */"
"DomContentHandler.java:16"$0$0$0$0$0$""
"DomContentHandler.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"DomContentHandler.java:18"$0$0$0$0$0$""
"DomContentHandler.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"DomContentHandler.java:20"$0$0$0$2$22$"import java.util.List;"
"DomContentHandler.java:21"$0$0$0$0$0$""
"DomContentHandler.java:22"$0$0$0$2$28$"import org.w3c.dom.Document;"
"DomContentHandler.java:23"$0$0$0$2$27$"import org.w3c.dom.Element;"
"DomContentHandler.java:24"$0$0$0$2$24$"import org.w3c.dom.Node;"
"DomContentHandler.java:25"$0$0$0$2$41$"import org.w3c.dom.ProcessingInstruction;"
"DomContentHandler.java:26"$0$0$0$2$24$"import org.w3c.dom.Text;"
"DomContentHandler.java:27"$0$0$0$2$30$"import org.xml.sax.Attributes;"
"DomContentHandler.java:28"$0$0$0$2$34$"import org.xml.sax.ContentHandler;"
"DomContentHandler.java:29"$0$0$0$2$27$"import org.xml.sax.Locator;"
"DomContentHandler.java:30"$0$0$0$0$0$""
"DomContentHandler.java:31"$0$0$0$1$3$"/**"
"DomContentHandler.java:32"$0$0$0$12$82$" * SAX {@code ContentHandler} that transforms callback calls to DOM {@code Node}s."
"DomContentHandler.java:33"$0$0$0$1$2$" *"
"DomContentHandler.java:34"$0$0$0$4$24$" * @author Arjen Poutsma"
"DomContentHandler.java:35"$0$0$0$3$13$" * @since 3.0"
"DomContentHandler.java:36"$0$0$0$3$24$" * @see org.w3c.dom.Node"
"DomContentHandler.java:37"$0$0$0$1$3$" */"
"DomContentHandler.java:38"$0$0$0$5$51$"class DomContentHandler implements ContentHandler {"
"DomContentHandler.java:39"$0$0$0$0$0$""
"DomContentHandler.java:40"$0$0$0$4$33$"	private final Document document;"
"DomContentHandler.java:41"$0$0$0$0$0$""
"DomContentHandler.java:42"$0$0$0$7$58$"	private final List<Element> elements = new ArrayList<>();"
"DomContentHandler.java:43"$0$0$0$0$0$""
"DomContentHandler.java:44"$0$0$0$4$25$"	private final Node node;"
"DomContentHandler.java:45"$0$0$0$0$0$""
"DomContentHandler.java:46"$0$0$0$0$0$""
"DomContentHandler.java:47"$0$0$0$1$4$"	/**"
"DomContentHandler.java:48"$0$0$0$13$79$"	 * Create a new instance of the {@code DomContentHandler} with the given node."
"DomContentHandler.java:49"$0$0$0$9$45$"	 * @param node the node to publish events to"
"DomContentHandler.java:50"$0$0$0$1$4$"	 */"
"DomContentHandler.java:51"$0$0$0$3$31$"	DomContentHandler(Node node) {"
"DomContentHandler.java:52"$0$0$0$3$19$"		this.node = node;"
"DomContentHandler.java:53"$0$0$0$5$33$"		if (node instanceof Document) {"
"DomContentHandler.java:54"$0$0$0$4$35$"			this.document = (Document) node;"
"DomContentHandler.java:55"$0$0$0$1$3$"		}"
"DomContentHandler.java:56"$0$0$0$2$8$"		else {"
"DomContentHandler.java:57"$1$0$0$3$43$"			this.document = node.getOwnerDocument();"
"DomContentHandler.java:58"$0$0$0$1$3$"		}"
"DomContentHandler.java:59"$0$0$0$1$2$"	}"
"DomContentHandler.java:60"$0$0$0$0$0$""
"DomContentHandler.java:61"$0$0$0$0$0$""
"DomContentHandler.java:62"$1$0$0$4$27$"	private Node getParent() {"
"DomContentHandler.java:63"$0$0$0$3$33$"		if (!this.elements.isEmpty()) {"
"DomContentHandler.java:64"$1$0$0$4$54$"			return this.elements.get(this.elements.size() - 1);"
"DomContentHandler.java:65"$0$0$0$1$3$"		}"
"DomContentHandler.java:66"$0$0$0$2$8$"		else {"
"DomContentHandler.java:67"$0$0$0$2$20$"			return this.node;"
"DomContentHandler.java:68"$0$0$0$1$3$"		}"
"DomContentHandler.java:69"$0$0$0$1$2$"	}"
"DomContentHandler.java:70"$0$0$0$0$0$""
"DomContentHandler.java:71"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:72"$0$0$0$11$94$"	public void startElement(String uri, String localName, String qName, Attributes attributes) {"
"DomContentHandler.java:73"$1$0$0$4$28$"		Node parent = getParent();"
"DomContentHandler.java:74"$0$0$0$5$62$"		Element element = this.document.createElementNS(uri, qName);"
"DomContentHandler.java:75"$1$0$0$10$52$"		for (int i = 0; i < attributes.getLength(); i++) {"
"DomContentHandler.java:76"$1$0$0$4$41$"			String attrUri = attributes.getURI(i);"
"DomContentHandler.java:77"$1$0$0$4$45$"			String attrQname = attributes.getQName(i);"
"DomContentHandler.java:78"$1$0$0$4$41$"			String value = attributes.getValue(i);"
"DomContentHandler.java:79"$0$0$0$3$40$"			if (!attrQname.startsWith(""xmlns"")) {"
"DomContentHandler.java:80"$0$0$0$3$54$"				element.setAttributeNS(attrUri, attrQname, value);"
"DomContentHandler.java:81"$0$0$0$1$4$"			}"
"DomContentHandler.java:82"$0$0$0$1$3$"		}"
"DomContentHandler.java:83"$0$0$0$4$50$"		element = (Element) parent.appendChild(element);"
"DomContentHandler.java:84"$0$0$0$1$29$"		this.elements.add(element);"
"DomContentHandler.java:85"$0$0$0$1$2$"	}"
"DomContentHandler.java:86"$0$0$0$0$0$""
"DomContentHandler.java:87"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:88"$0$0$0$9$69$"	public void endElement(String uri, String localName, String qName) {"
"DomContentHandler.java:89"$0$0$0$3$49$"		this.elements.remove(this.elements.size() - 1);"
"DomContentHandler.java:90"$0$0$0$1$2$"	}"
"DomContentHandler.java:91"$0$0$0$0$0$""
"DomContentHandler.java:92"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:93"$0$0$0$9$59$"	public void characters(char[] ch, int start, int length) {"
"DomContentHandler.java:94"$0$0$0$7$46$"		String data = new String(ch, start, length);"
"DomContentHandler.java:95"$1$0$0$4$28$"		Node parent = getParent();"
"DomContentHandler.java:96"$1$0$0$4$41$"		Node lastChild = parent.getLastChild();"
"DomContentHandler.java:97"$1$0$0$9$71$"		if (lastChild != null && lastChild.getNodeType() == Node.TEXT_NODE) {"
"DomContentHandler.java:98"$0$0$0$2$39$"			((Text) lastChild).appendData(data);"
"DomContentHandler.java:99"$0$0$0$1$3$"		}"
"DomContentHandler.java:100"$0$0$0$2$8$"		else {"
"DomContentHandler.java:101"$0$0$0$4$50$"			Text text = this.document.createTextNode(data);"
"DomContentHandler.java:102"$0$0$0$1$28$"			parent.appendChild(text);"
"DomContentHandler.java:103"$0$0$0$1$3$"		}"
"DomContentHandler.java:104"$0$0$0$1$2$"	}"
"DomContentHandler.java:105"$0$0$0$0$0$""
"DomContentHandler.java:106"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:107"$1$0$0$7$64$"	public void processingInstruction(String target, String data) {"
"DomContentHandler.java:108"$1$0$0$4$28$"		Node parent = getParent();"
"DomContentHandler.java:109"$1$0$0$5$85$"		ProcessingInstruction pi = this.document.createProcessingInstruction(target, data);"
"DomContentHandler.java:110"$0$0$0$1$25$"		parent.appendChild(pi);"
"DomContentHandler.java:111"$0$0$0$1$2$"	}"
"DomContentHandler.java:112"$0$0$0$0$0$""
"DomContentHandler.java:113"$0$0$0$0$0$""
"DomContentHandler.java:114"$0$0$1$2$15$"	// Unsupported"
"DomContentHandler.java:115"$0$0$0$0$0$""
"DomContentHandler.java:116"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:117"$0$0$0$5$50$"	public void setDocumentLocator(Locator locator) {"
"DomContentHandler.java:118"$0$0$0$1$2$"	}"
"DomContentHandler.java:119"$0$0$0$0$0$""
"DomContentHandler.java:120"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:121"$0$0$0$4$30$"	public void startDocument() {"
"DomContentHandler.java:122"$0$0$0$1$2$"	}"
"DomContentHandler.java:123"$0$0$0$0$0$""
"DomContentHandler.java:124"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:125"$0$0$0$4$28$"	public void endDocument() {"
"DomContentHandler.java:126"$0$0$0$1$2$"	}"
"DomContentHandler.java:127"$0$0$0$0$0$""
"DomContentHandler.java:128"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:129"$0$0$0$7$60$"	public void startPrefixMapping(String prefix, String uri) {"
"DomContentHandler.java:130"$0$0$0$1$2$"	}"
"DomContentHandler.java:131"$0$0$0$0$0$""
"DomContentHandler.java:132"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:133"$0$0$0$5$46$"	public void endPrefixMapping(String prefix) {"
"DomContentHandler.java:134"$0$0$0$1$2$"	}"
"DomContentHandler.java:135"$0$0$0$0$0$""
"DomContentHandler.java:136"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:137"$0$0$0$9$68$"	public void ignorableWhitespace(char[] ch, int start, int length) {"
"DomContentHandler.java:138"$0$0$0$1$2$"	}"
"DomContentHandler.java:139"$0$0$0$0$0$""
"DomContentHandler.java:140"$0$0$0$1$10$"	@Override"
"DomContentHandler.java:141"$0$0$0$5$41$"	public void skippedEntity(String name) {"
"DomContentHandler.java:142"$0$0$0$1$2$"	}"
"DomContentHandler.java:143"$0$0$0$0$0$""
"DomContentHandler.java:144"$0$0$0$1$1$"}"
"BridgeMethodResolver.java:1"$0$0$0$1$2$"/*"
"BridgeMethodResolver.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"BridgeMethodResolver.java:3"$0$0$0$1$2$" *"
"BridgeMethodResolver.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"BridgeMethodResolver.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"BridgeMethodResolver.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"BridgeMethodResolver.java:7"$0$0$0$1$2$" *"
"BridgeMethodResolver.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"BridgeMethodResolver.java:9"$0$0$0$1$2$" *"
"BridgeMethodResolver.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"BridgeMethodResolver.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"BridgeMethodResolver.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"BridgeMethodResolver.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"BridgeMethodResolver.java:14"$0$0$0$5$33$" * limitations under the License."
"BridgeMethodResolver.java:15"$0$0$0$1$3$" */"
"BridgeMethodResolver.java:16"$0$0$0$0$0$""
"BridgeMethodResolver.java:17"$0$0$0$2$33$"package org.springframework.core;"
"BridgeMethodResolver.java:18"$0$0$0$0$0$""
"BridgeMethodResolver.java:19"$0$0$0$2$32$"import java.lang.reflect.Method;"
"BridgeMethodResolver.java:20"$0$0$0$2$30$"import java.lang.reflect.Type;"
"BridgeMethodResolver.java:21"$0$0$0$2$27$"import java.util.ArrayList;"
"BridgeMethodResolver.java:22"$0$0$0$2$24$"import java.util.Arrays;"
"BridgeMethodResolver.java:23"$0$0$0$2$22$"import java.util.List;"
"BridgeMethodResolver.java:24"$0$0$0$2$21$"import java.util.Map;"
"BridgeMethodResolver.java:25"$0$0$0$0$0$""
"BridgeMethodResolver.java:26"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"BridgeMethodResolver.java:27"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"BridgeMethodResolver.java:28"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"BridgeMethodResolver.java:29"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"BridgeMethodResolver.java:30"$0$0$0$2$61$"import org.springframework.util.ReflectionUtils.MethodFilter;"
"BridgeMethodResolver.java:31"$0$0$0$0$0$""
"BridgeMethodResolver.java:32"$0$0$0$1$3$"/**"
"BridgeMethodResolver.java:33"$0$0$0$11$79$" * Helper for resolving synthetic {@link Method#isBridge bridge Methods} to the"
"BridgeMethodResolver.java:34"$0$0$0$5$32$" * {@link Method} being bridged."
"BridgeMethodResolver.java:35"$0$0$0$1$2$" *"
"BridgeMethodResolver.java:36"$0$0$0$12$88$" * <p>Given a synthetic {@link Method#isBridge bridge Method} returns the {@link Method}"
"BridgeMethodResolver.java:37"$0$0$0$15$81$" * being bridged. A bridge method may be created by the compiler when extending a"
"BridgeMethodResolver.java:38"$0$0$0$10$80$" * parameterized type whose methods have parameterized arguments. During runtime"
"BridgeMethodResolver.java:39"$0$0$0$13$82$" * invocation the bridge {@link Method} may be invoked and/or used via reflection."
"BridgeMethodResolver.java:40"$0$0$0$15$87$" * When attempting to locate annotations on {@link Method Methods}, it is wise to check"
"BridgeMethodResolver.java:41"$0$0$0$14$88$" * for bridge {@link Method Methods} as appropriate and find the bridged {@link Method}."
"BridgeMethodResolver.java:42"$0$0$0$1$2$" *"
"BridgeMethodResolver.java:43"$0$0$0$4$102$" * <p>See <a href=""https://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5"">"
"BridgeMethodResolver.java:44"$0$0$0$14$85$" * The Java Language Specification</a> for more details on the use of bridge methods."
"BridgeMethodResolver.java:45"$0$0$0$1$2$" *"
"BridgeMethodResolver.java:46"$0$0$0$4$21$" * @author Rob Harrop"
"BridgeMethodResolver.java:47"$0$0$0$4$26$" * @author Juergen Hoeller"
"BridgeMethodResolver.java:48"$0$0$0$4$23$" * @author Phillip Webb"
"BridgeMethodResolver.java:49"$0$0$0$3$13$" * @since 2.0"
"BridgeMethodResolver.java:50"$0$0$0$1$3$" */"
"BridgeMethodResolver.java:51"$0$0$0$5$41$"public final class BridgeMethodResolver {"
"BridgeMethodResolver.java:52"$0$0$0$0$0$""
"BridgeMethodResolver.java:53"$0$0$0$9$85$"	private static final Map<Method, Method> cache = new ConcurrentReferenceHashMap<>();"
"BridgeMethodResolver.java:54"$0$0$0$0$0$""
"BridgeMethodResolver.java:55"$0$0$0$3$33$"	private BridgeMethodResolver() {"
"BridgeMethodResolver.java:56"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:57"$0$0$0$0$0$""
"BridgeMethodResolver.java:58"$0$0$0$0$0$""
"BridgeMethodResolver.java:59"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:60"$0$0$0$12$75$"	 * Find the original method for the supplied {@link Method bridge Method}."
"BridgeMethodResolver.java:61"$0$0$0$15$86$"	 * <p>It is safe to call this method passing in a non-bridge {@link Method} instance."
"BridgeMethodResolver.java:62"$0$0$0$16$92$"	 * In such a case, the supplied {@link Method} instance is returned directly to the caller."
"BridgeMethodResolver.java:63"$0$0$0$13$95$"	 * Callers are <strong>not</strong> required to check for bridging before calling this method."
"BridgeMethodResolver.java:64"$0$0$0$7$48$"	 * @param bridgeMethod the method to introspect"
"BridgeMethodResolver.java:65"$0$0$0$13$82$"	 * @return the original method (either the bridged method or the passed-in method"
"BridgeMethodResolver.java:66"$0$0$0$9$43$"	 * if no more specific one could be found)"
"BridgeMethodResolver.java:67"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:68"$0$0$0$6$62$"	public static Method findBridgedMethod(Method bridgeMethod) {"
"BridgeMethodResolver.java:69"$0$0$0$3$33$"		if (!bridgeMethod.isBridge()) {"
"BridgeMethodResolver.java:70"$0$0$0$2$23$"			return bridgeMethod;"
"BridgeMethodResolver.java:71"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:72"$1$0$0$4$49$"		Method bridgedMethod = cache.get(bridgeMethod);"
"BridgeMethodResolver.java:73"$0$0$0$5$30$"		if (bridgedMethod == null) {"
"BridgeMethodResolver.java:74"$0$0$1$10$63$"			// Gather all methods with matching name and parameter size."
"BridgeMethodResolver.java:75"$0$0$0$5$53$"			List<Method> candidateMethods = new ArrayList<>();"
"BridgeMethodResolver.java:76"$0$0$0$5$43$"			MethodFilter filter = candidateMethod ->"
"BridgeMethodResolver.java:77"$0$0$0$2$58$"					isBridgedCandidateFor(candidateMethod, bridgeMethod);"
"BridgeMethodResolver.java:78"$1$0$0$3$98$"			ReflectionUtils.doWithMethods(bridgeMethod.getDeclaringClass(), candidateMethods::add, filter);"
"BridgeMethodResolver.java:79"$0$0$0$3$37$"			if (!candidateMethods.isEmpty()) {"
"BridgeMethodResolver.java:80"$0$0$0$6$50$"				bridgedMethod = candidateMethods.size() == 1 ?"
"BridgeMethodResolver.java:81"$1$0$0$2$31$"						candidateMethods.get(0) :"
"BridgeMethodResolver.java:82"$0$0$0$2$55$"						searchCandidates(candidateMethods, bridgeMethod);"
"BridgeMethodResolver.java:83"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:84"$0$0$0$5$31$"			if (bridgedMethod == null) {"
"BridgeMethodResolver.java:85"$0$0$1$14$77$"				// A bridge method was passed in but we couldn't find the bridged method."
"BridgeMethodResolver.java:86"$0$0$1$12$71$"				// Let's proceed with the passed-in method and hope for the best..."
"BridgeMethodResolver.java:87"$0$0$0$3$33$"				bridgedMethod = bridgeMethod;"
"BridgeMethodResolver.java:88"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:89"$0$0$0$2$42$"			cache.put(bridgeMethod, bridgedMethod);"
"BridgeMethodResolver.java:90"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:91"$0$0$0$2$23$"		return bridgedMethod;"
"BridgeMethodResolver.java:92"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:93"$0$0$0$0$0$""
"BridgeMethodResolver.java:94"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:95"$0$0$0$11$73$"	 * Returns {@code true} if the supplied '{@code candidateMethod}' can be"
"BridgeMethodResolver.java:96"$0$0$0$14$98$"	 * consider a validate candidate for the {@link Method} that is {@link Method#isBridge() bridged}"
"BridgeMethodResolver.java:97"$0$0$0$12$82$"	 * by the supplied {@link Method bridge Method}. This method performs inexpensive"
"BridgeMethodResolver.java:98"$0$0$0$14$72$"	 * checks and can be used quickly filter for a set of possible matches."
"BridgeMethodResolver.java:99"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:100"$0$0$0$8$92$"	private static boolean isBridgedCandidateFor(Method candidateMethod, Method bridgeMethod) {"
"BridgeMethodResolver.java:101"$0$0$0$5$81$"		return (!candidateMethod.isBridge() && !candidateMethod.equals(bridgeMethod) &&"
"BridgeMethodResolver.java:102"$2$0$0$2$63$"				candidateMethod.getName().equals(bridgeMethod.getName()) &&"
"BridgeMethodResolver.java:103"$2$0$0$3$77$"				candidateMethod.getParameterCount() == bridgeMethod.getParameterCount());"
"BridgeMethodResolver.java:104"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:105"$0$0$0$0$0$""
"BridgeMethodResolver.java:106"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:107"$0$0$0$10$60$"	 * Searches for the bridged method in the given candidates."
"BridgeMethodResolver.java:108"$0$0$0$8$57$"	 * @param candidateMethods the List of candidate Methods"
"BridgeMethodResolver.java:109"$0$0$0$6$41$"	 * @param bridgeMethod the bridge method"
"BridgeMethodResolver.java:110"$0$0$0$11$61$"	 * @return the bridged method, or {@code null} if none found"
"BridgeMethodResolver.java:111"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:112"$0$0$0$1$10$"	@Nullable"
"BridgeMethodResolver.java:113"$0$0$0$8$93$"	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {"
"BridgeMethodResolver.java:114"$0$0$0$3$35$"		if (candidateMethods.isEmpty()) {"
"BridgeMethodResolver.java:115"$0$0$0$2$15$"			return null;"
"BridgeMethodResolver.java:116"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:117"$0$0$0$4$31$"		Method previousMethod = null;"
"BridgeMethodResolver.java:118"$0$0$0$4$25$"		boolean sameSig = true;"
"BridgeMethodResolver.java:119"$0$0$0$6$51$"		for (Method candidateMethod : candidateMethods) {"
"BridgeMethodResolver.java:120"$1$0$0$5$92$"			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {"
"BridgeMethodResolver.java:121"$0$0$0$2$27$"				return candidateMethod;"
"BridgeMethodResolver.java:122"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:123"$0$0$0$6$37$"			else if (previousMethod != null) {"
"BridgeMethodResolver.java:124"$0$0$0$4$24$"				sameSig = sameSig &&"
"BridgeMethodResolver.java:125"$2$0$0$2$107$"						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes());"
"BridgeMethodResolver.java:126"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:127"$0$0$0$3$36$"			previousMethod = candidateMethod;"
"BridgeMethodResolver.java:128"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:129"$1$0$0$6$52$"		return (sameSig ? candidateMethods.get(0) : null);"
"BridgeMethodResolver.java:130"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:131"$0$0$0$0$0$""
"BridgeMethodResolver.java:132"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:133"$0$0$0$14$77$"	 * Determines whether or not the bridge {@link Method} is the bridge for the"
"BridgeMethodResolver.java:134"$0$0$0$5$38$"	 * supplied candidate {@link Method}."
"BridgeMethodResolver.java:135"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:136"$0$0$0$9$105$"	static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {"
"BridgeMethodResolver.java:137"$0$0$0$5$75$"		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {"
"BridgeMethodResolver.java:138"$0$0$0$2$15$"			return true;"
"BridgeMethodResolver.java:139"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:140"$0$0$0$4$55$"		Method method = findGenericDeclaration(bridgeMethod);"
"BridgeMethodResolver.java:141"$0$0$0$8$90$"		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass));"
"BridgeMethodResolver.java:142"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:143"$0$0$0$0$0$""
"BridgeMethodResolver.java:144"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:145"$0$0$0$13$75$"	 * Returns {@code true} if the {@link Type} signature of both the supplied"
"BridgeMethodResolver.java:146"$1$0$0$9$88$"	 * {@link Method#getGenericParameterTypes() generic Method} and concrete {@link Method}"
"BridgeMethodResolver.java:147"$0$0$0$11$76$"	 * are equal after resolving all types against the declaringType, otherwise"
"BridgeMethodResolver.java:148"$0$0$0$4$26$"	 * returns {@code false}."
"BridgeMethodResolver.java:149"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:150"$0$0$0$10$116$"	private static boolean isResolvedTypeMatch(Method genericMethod, Method candidateMethod, Class<?> declaringClass) {"
"BridgeMethodResolver.java:151"$1$0$0$4$70$"		Type[] genericParameters = genericMethod.getGenericParameterTypes();"
"BridgeMethodResolver.java:152"$1$0$0$5$72$"		if (genericParameters.length != candidateMethod.getParameterCount()) {"
"BridgeMethodResolver.java:153"$0$0$0$2$16$"			return false;"
"BridgeMethodResolver.java:154"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:155"$1$0$0$4$71$"		Class<?>[] candidateParameters = candidateMethod.getParameterTypes();"
"BridgeMethodResolver.java:156"$0$0$0$10$56$"		for (int i = 0; i < candidateParameters.length; i++) {"
"BridgeMethodResolver.java:157"$0$0$0$6$105$"			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass);"
"BridgeMethodResolver.java:158"$0$0$0$4$56$"			Class<?> candidateParameter = candidateParameters[i];"
"BridgeMethodResolver.java:159"$0$0$0$3$38$"			if (candidateParameter.isArray()) {"
"BridgeMethodResolver.java:160"$0$0$1$8$49$"				// An array type: compare the component type."
"BridgeMethodResolver.java:161"$2$0$0$3$103$"				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().toClass())) {"
"BridgeMethodResolver.java:162"$0$0$0$2$18$"					return false;"
"BridgeMethodResolver.java:163"$0$0$0$1$5$"				}"
"BridgeMethodResolver.java:164"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:165"$0$0$1$8$48$"			// A non-array type: compare the type itself."
"BridgeMethodResolver.java:166"$0$0$0$3$64$"			if (!candidateParameter.equals(genericParameter.toClass())) {"
"BridgeMethodResolver.java:167"$0$0$0$2$17$"				return false;"
"BridgeMethodResolver.java:168"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:169"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:170"$0$0$0$2$14$"		return true;"
"BridgeMethodResolver.java:171"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:172"$0$0$0$0$0$""
"BridgeMethodResolver.java:173"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:174"$0$0$0$11$78$"	 * Searches for the generic {@link Method} declaration whose erased signature"
"BridgeMethodResolver.java:175"$0$0$0$8$47$"	 * matches that of the supplied bridge method."
"BridgeMethodResolver.java:176"$0$0$0$10$76$"	 * @throws IllegalStateException if the generic declaration cannot be found"
"BridgeMethodResolver.java:177"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:178"$0$0$0$1$10$"	@Nullable"
"BridgeMethodResolver.java:179"$0$0$0$6$68$"	private static Method findGenericDeclaration(Method bridgeMethod) {"
"BridgeMethodResolver.java:180"$0$0$1$12$70$"		// Search parent types for method that has same signature as bridge."
"BridgeMethodResolver.java:181"$2$0$0$4$73$"		Class<?> superclass = bridgeMethod.getDeclaringClass().getSuperclass();"
"BridgeMethodResolver.java:182"$0$0$0$9$60$"		while (superclass != null && Object.class != superclass) {"
"BridgeMethodResolver.java:183"$0$0$0$5$60$"			Method method = searchForMatch(superclass, bridgeMethod);"
"BridgeMethodResolver.java:184"$0$0$0$7$46$"			if (method != null && !method.isBridge()) {"
"BridgeMethodResolver.java:185"$0$0$0$2$18$"				return method;"
"BridgeMethodResolver.java:186"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:187"$1$0$0$3$43$"			superclass = superclass.getSuperclass();"
"BridgeMethodResolver.java:188"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:189"$0$0$0$0$0$""
"BridgeMethodResolver.java:190"$2$0$0$4$96$"		Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(bridgeMethod.getDeclaringClass());"
"BridgeMethodResolver.java:191"$0$0$0$3$52$"		return searchInterfaces(interfaces, bridgeMethod);"
"BridgeMethodResolver.java:192"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:193"$0$0$0$0$0$""
"BridgeMethodResolver.java:194"$0$0$0$1$10$"	@Nullable"
"BridgeMethodResolver.java:195"$0$0$0$8$85$"	private static Method searchInterfaces(Class<?>[] interfaces, Method bridgeMethod) {"
"BridgeMethodResolver.java:196"$0$0$0$6$35$"		for (Class<?> ifc : interfaces) {"
"BridgeMethodResolver.java:197"$0$0$0$5$53$"			Method method = searchForMatch(ifc, bridgeMethod);"
"BridgeMethodResolver.java:198"$0$0$0$7$46$"			if (method != null && !method.isBridge()) {"
"BridgeMethodResolver.java:199"$0$0$0$2$18$"				return method;"
"BridgeMethodResolver.java:200"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:201"$0$0$0$2$9$"			else {"
"BridgeMethodResolver.java:202"$1$0$0$4$65$"				method = searchInterfaces(ifc.getInterfaces(), bridgeMethod);"
"BridgeMethodResolver.java:203"$0$0$0$5$25$"				if (method != null) {"
"BridgeMethodResolver.java:204"$0$0$0$2$19$"					return method;"
"BridgeMethodResolver.java:205"$0$0$0$1$5$"				}"
"BridgeMethodResolver.java:206"$0$0$0$1$4$"			}"
"BridgeMethodResolver.java:207"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:208"$0$0$0$2$14$"		return null;"
"BridgeMethodResolver.java:209"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:210"$0$0$0$0$0$""
"BridgeMethodResolver.java:211"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:212"$0$0$0$14$87$"	 * If the supplied {@link Class} has a declared {@link Method} whose signature matches"
"BridgeMethodResolver.java:213"$0$0$0$14$87$"	 * that of the supplied {@link Method}, then this matching {@link Method} is returned,"
"BridgeMethodResolver.java:214"$0$0$0$6$39$"	 * otherwise {@code null} is returned."
"BridgeMethodResolver.java:215"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:216"$0$0$0$1$10$"	@Nullable"
"BridgeMethodResolver.java:217"$0$0$0$8$75$"	private static Method searchForMatch(Class<?> type, Method bridgeMethod) {"
"BridgeMethodResolver.java:218"$0$0$0$2$7$"		try {"
"BridgeMethodResolver.java:219"$3$0$0$3$91$"			return type.getDeclaredMethod(bridgeMethod.getName(), bridgeMethod.getParameterTypes());"
"BridgeMethodResolver.java:220"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:221"$0$0$0$4$36$"		catch (NoSuchMethodException ex) {"
"BridgeMethodResolver.java:222"$0$0$0$2$15$"			return null;"
"BridgeMethodResolver.java:223"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:224"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:225"$0$0$0$0$0$""
"BridgeMethodResolver.java:226"$0$0$0$1$4$"	/**"
"BridgeMethodResolver.java:227"$0$0$0$15$83$"	 * Compare the signatures of the bridge method and the method which it bridges. If"
"BridgeMethodResolver.java:228"$0$0$0$15$83$"	 * the parameter and return types are the same, it is a 'visibility' bridge method"
"BridgeMethodResolver.java:229"$0$0$0$8$81$"	 * introduced in Java 6 to fix https://bugs.java.com/view_bug.do?bug_id=6342411."
"BridgeMethodResolver.java:230"$0$0$0$4$90$"	 * See also https://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html"
"BridgeMethodResolver.java:231"$0$0$0$7$49$"	 * @return whether signatures match as described"
"BridgeMethodResolver.java:232"$0$0$0$1$4$"	 */"
"BridgeMethodResolver.java:233"$0$0$0$8$96$"	public static boolean isVisibilityBridgeMethodPair(Method bridgeMethod, Method bridgedMethod) {"
"BridgeMethodResolver.java:234"$0$0$0$5$38$"		if (bridgeMethod == bridgedMethod) {"
"BridgeMethodResolver.java:235"$0$0$0$2$15$"			return true;"
"BridgeMethodResolver.java:236"$0$0$0$1$3$"		}"
"BridgeMethodResolver.java:237"$2$0$0$3$79$"		return (bridgeMethod.getReturnType().equals(bridgedMethod.getReturnType()) &&"
"BridgeMethodResolver.java:238"$2$0$0$4$76$"				bridgeMethod.getParameterCount() == bridgedMethod.getParameterCount() &&"
"BridgeMethodResolver.java:239"$2$0$0$2$88$"				Arrays.equals(bridgeMethod.getParameterTypes(), bridgedMethod.getParameterTypes()));"
"BridgeMethodResolver.java:240"$0$0$0$1$2$"	}"
"BridgeMethodResolver.java:241"$0$0$0$0$0$""
"BridgeMethodResolver.java:242"$0$0$0$1$1$"}"
"ResourceArrayPropertyEditor.java:1"$0$0$0$1$2$"/*"
"ResourceArrayPropertyEditor.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ResourceArrayPropertyEditor.java:3"$0$0$0$1$2$" *"
"ResourceArrayPropertyEditor.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourceArrayPropertyEditor.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourceArrayPropertyEditor.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourceArrayPropertyEditor.java:7"$0$0$0$1$2$" *"
"ResourceArrayPropertyEditor.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourceArrayPropertyEditor.java:9"$0$0$0$1$2$" *"
"ResourceArrayPropertyEditor.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourceArrayPropertyEditor.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourceArrayPropertyEditor.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourceArrayPropertyEditor.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourceArrayPropertyEditor.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourceArrayPropertyEditor.java:15"$0$0$0$1$3$" */"
"ResourceArrayPropertyEditor.java:16"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:17"$0$0$0$2$44$"package org.springframework.core.io.support;"
"ResourceArrayPropertyEditor.java:18"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:19"$0$0$0$2$40$"import java.beans.PropertyEditorSupport;"
"ResourceArrayPropertyEditor.java:20"$0$0$0$2$27$"import java.io.IOException;"
"ResourceArrayPropertyEditor.java:21"$0$0$0$2$27$"import java.util.ArrayList;"
"ResourceArrayPropertyEditor.java:22"$0$0$0$2$24$"import java.util.Arrays;"
"ResourceArrayPropertyEditor.java:23"$0$0$0$2$28$"import java.util.Collection;"
"ResourceArrayPropertyEditor.java:24"$0$0$0$2$22$"import java.util.List;"
"ResourceArrayPropertyEditor.java:25"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:26"$0$0$0$2$38$"import org.apache.commons.logging.Log;"
"ResourceArrayPropertyEditor.java:27"$0$0$0$2$45$"import org.apache.commons.logging.LogFactory;"
"ResourceArrayPropertyEditor.java:28"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:29"$0$0$0$2$48$"import org.springframework.core.env.Environment;"
"ResourceArrayPropertyEditor.java:30"$0$0$0$2$53$"import org.springframework.core.env.PropertyResolver;"
"ResourceArrayPropertyEditor.java:31"$0$0$0$2$56$"import org.springframework.core.env.StandardEnvironment;"
"ResourceArrayPropertyEditor.java:32"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"ResourceArrayPropertyEditor.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResourceArrayPropertyEditor.java:34"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ResourceArrayPropertyEditor.java:35"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:36"$0$0$0$1$3$"/**"
"ResourceArrayPropertyEditor.java:37"$0$0$0$7$69$" * Editor for {@link org.springframework.core.io.Resource} arrays, to"
"ResourceArrayPropertyEditor.java:38"$0$0$0$7$57$" * automatically convert {@code String} location patterns"
"ResourceArrayPropertyEditor.java:39"$0$0$0$7$70$" * (e.g. {@code ""file:C:/my*.txt""} or {@code ""classpath*:myfile.txt""})"
"ResourceArrayPropertyEditor.java:40"$0$0$0$11$72$" * to {@code Resource} array properties. Can also translate a collection"
"ResourceArrayPropertyEditor.java:41"$0$0$0$11$62$" * or array of location patterns into a merged Resource array."
"ResourceArrayPropertyEditor.java:42"$0$0$0$1$2$" *"
"ResourceArrayPropertyEditor.java:43"$0$0$0$10$59$" * <p>A path may contain {@code ${...}} placeholders, to be"
"ResourceArrayPropertyEditor.java:44"$0$0$0$6$75$" * resolved as {@link org.springframework.core.env.Environment} properties:"
"ResourceArrayPropertyEditor.java:45"$0$0$0$10$78$" * e.g. {@code ${user.dir}}. Unresolvable placeholders are ignored by default."
"ResourceArrayPropertyEditor.java:46"$0$0$0$1$2$" *"
"ResourceArrayPropertyEditor.java:47"$0$0$0$6$53$" * <p>Delegates to a {@link ResourcePatternResolver},"
"ResourceArrayPropertyEditor.java:48"$0$0$0$7$66$" * by default using a {@link PathMatchingResourcePatternResolver}."
"ResourceArrayPropertyEditor.java:49"$0$0$0$1$2$" *"
"ResourceArrayPropertyEditor.java:50"$0$0$0$4$26$" * @author Juergen Hoeller"
"ResourceArrayPropertyEditor.java:51"$0$0$0$4$22$" * @author Chris Beams"
"ResourceArrayPropertyEditor.java:52"$0$0$0$3$15$" * @since 1.1.2"
"ResourceArrayPropertyEditor.java:53"$0$0$0$3$44$" * @see org.springframework.core.io.Resource"
"ResourceArrayPropertyEditor.java:54"$0$0$0$3$31$" * @see ResourcePatternResolver"
"ResourceArrayPropertyEditor.java:55"$0$0$0$3$43$" * @see PathMatchingResourcePatternResolver"
"ResourceArrayPropertyEditor.java:56"$0$0$0$1$3$" */"
"ResourceArrayPropertyEditor.java:57"$0$0$0$6$72$"public class ResourceArrayPropertyEditor extends PropertyEditorSupport {"
"ResourceArrayPropertyEditor.java:58"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:59"$1$0$0$7$88$"	private static final Log logger = LogFactory.getLog(ResourceArrayPropertyEditor.class);"
"ResourceArrayPropertyEditor.java:60"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:61"$0$0$0$4$63$"	private final ResourcePatternResolver resourcePatternResolver;"
"ResourceArrayPropertyEditor.java:62"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:63"$0$0$0$1$10$"	@Nullable"
"ResourceArrayPropertyEditor.java:64"$0$0$0$3$43$"	private PropertyResolver propertyResolver;"
"ResourceArrayPropertyEditor.java:65"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:66"$0$0$0$4$54$"	private final boolean ignoreUnresolvablePlaceholders;"
"ResourceArrayPropertyEditor.java:67"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:68"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:69"$0$0$0$1$4$"	/**"
"ResourceArrayPropertyEditor.java:70"$0$0$0$8$59$"	 * Create a new ResourceArrayPropertyEditor with a default"
"ResourceArrayPropertyEditor.java:71"$0$0$0$6$80$"	 * {@link PathMatchingResourcePatternResolver} and {@link StandardEnvironment}."
"ResourceArrayPropertyEditor.java:72"$0$0$0$3$44$"	 * @see PathMatchingResourcePatternResolver"
"ResourceArrayPropertyEditor.java:73"$0$0$0$3$20$"	 * @see Environment"
"ResourceArrayPropertyEditor.java:74"$0$0$0$1$4$"	 */"
"ResourceArrayPropertyEditor.java:75"$0$0$0$3$39$"	public ResourceArrayPropertyEditor() {"
"ResourceArrayPropertyEditor.java:76"$0$0$0$4$62$"		this(new PathMatchingResourcePatternResolver(), null, true);"
"ResourceArrayPropertyEditor.java:77"$0$0$0$1$2$"	}"
"ResourceArrayPropertyEditor.java:78"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:79"$0$0$0$1$4$"	/**"
"ResourceArrayPropertyEditor.java:80"$0$0$0$10$91$"	 * Create a new ResourceArrayPropertyEditor with the given {@link ResourcePatternResolver}"
"ResourceArrayPropertyEditor.java:81"$0$0$0$8$68$"	 * and {@link PropertyResolver} (typically an {@link Environment})."
"ResourceArrayPropertyEditor.java:82"$0$0$0$7$69$"	 * @param resourcePatternResolver the ResourcePatternResolver to use"
"ResourceArrayPropertyEditor.java:83"$0$0$0$7$55$"	 * @param propertyResolver the PropertyResolver to use"
"ResourceArrayPropertyEditor.java:84"$0$0$0$1$4$"	 */"
"ResourceArrayPropertyEditor.java:85"$0$0$0$2$36$"	public ResourceArrayPropertyEditor("
"ResourceArrayPropertyEditor.java:86"$0$0$0$6$98$"			ResourcePatternResolver resourcePatternResolver, @Nullable PropertyResolver propertyResolver) {"
"ResourceArrayPropertyEditor.java:87"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:88"$0$0$0$3$56$"		this(resourcePatternResolver, propertyResolver, true);"
"ResourceArrayPropertyEditor.java:89"$0$0$0$1$2$"	}"
"ResourceArrayPropertyEditor.java:90"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:91"$0$0$0$1$4$"	/**"
"ResourceArrayPropertyEditor.java:92"$0$0$0$10$91$"	 * Create a new ResourceArrayPropertyEditor with the given {@link ResourcePatternResolver}"
"ResourceArrayPropertyEditor.java:93"$0$0$0$8$68$"	 * and {@link PropertyResolver} (typically an {@link Environment})."
"ResourceArrayPropertyEditor.java:94"$0$0$0$7$69$"	 * @param resourcePatternResolver the ResourcePatternResolver to use"
"ResourceArrayPropertyEditor.java:95"$0$0$0$7$55$"	 * @param propertyResolver the PropertyResolver to use"
"ResourceArrayPropertyEditor.java:96"$0$0$0$8$85$"	 * @param ignoreUnresolvablePlaceholders whether to ignore unresolvable placeholders"
"ResourceArrayPropertyEditor.java:97"$0$0$0$9$54$"	 * if no corresponding system property could be found"
"ResourceArrayPropertyEditor.java:98"$0$0$0$1$4$"	 */"
"ResourceArrayPropertyEditor.java:99"$0$0$0$3$84$"	public ResourceArrayPropertyEditor(ResourcePatternResolver resourcePatternResolver,"
"ResourceArrayPropertyEditor.java:100"$0$0$0$6$89$"			@Nullable PropertyResolver propertyResolver, boolean ignoreUnresolvablePlaceholders) {"
"ResourceArrayPropertyEditor.java:101"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:102"$0$0$0$6$86$"		Assert.notNull(resourcePatternResolver, ""ResourcePatternResolver must not be null"");"
"ResourceArrayPropertyEditor.java:103"$0$0$0$3$57$"		this.resourcePatternResolver = resourcePatternResolver;"
"ResourceArrayPropertyEditor.java:104"$0$0$0$3$43$"		this.propertyResolver = propertyResolver;"
"ResourceArrayPropertyEditor.java:105"$0$0$0$3$71$"		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;"
"ResourceArrayPropertyEditor.java:106"$0$0$0$1$2$"	}"
"ResourceArrayPropertyEditor.java:107"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:108"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:109"$0$0$0$1$4$"	/**"
"ResourceArrayPropertyEditor.java:110"$0$0$0$16$82$"	 * Treat the given text as a location pattern and convert it to a Resource array."
"ResourceArrayPropertyEditor.java:111"$0$0$0$1$4$"	 */"
"ResourceArrayPropertyEditor.java:112"$0$0$0$1$10$"	@Override"
"ResourceArrayPropertyEditor.java:113"$0$0$0$5$37$"	public void setAsText(String text) {"
"ResourceArrayPropertyEditor.java:114"$0$0$0$4$44$"		String pattern = resolvePath(text).trim();"
"ResourceArrayPropertyEditor.java:115"$0$0$0$2$7$"		try {"
"ResourceArrayPropertyEditor.java:116"$1$0$0$1$64$"			setValue(this.resourcePatternResolver.getResources(pattern));"
"ResourceArrayPropertyEditor.java:117"$0$0$0$1$3$"		}"
"ResourceArrayPropertyEditor.java:118"$0$0$0$4$26$"		catch (IOException ex) {"
"ResourceArrayPropertyEditor.java:119"$0$0$0$3$38$"			throw new IllegalArgumentException("
"ResourceArrayPropertyEditor.java:120"$1$0$0$14$90$"					""Could not resolve resource location pattern ["" + pattern + ""]: "" + ex.getMessage());"
"ResourceArrayPropertyEditor.java:121"$0$0$0$1$3$"		}"
"ResourceArrayPropertyEditor.java:122"$0$0$0$1$2$"	}"
"ResourceArrayPropertyEditor.java:123"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:124"$0$0$0$1$4$"	/**"
"ResourceArrayPropertyEditor.java:125"$0$0$0$17$86$"	 * Treat the given value as a collection or array and convert it to a Resource array."
"ResourceArrayPropertyEditor.java:126"$0$0$0$12$85$"	 * Considers String elements as location patterns and takes Resource elements as-is."
"ResourceArrayPropertyEditor.java:127"$0$0$0$1$4$"	 */"
"ResourceArrayPropertyEditor.java:128"$0$0$0$1$10$"	@Override"
"ResourceArrayPropertyEditor.java:129"$0$0$0$7$69$"	public void setValue(Object value) throws IllegalArgumentException {"
"ResourceArrayPropertyEditor.java:130"$0$0$0$13$101$"		if (value instanceof Collection || (value instanceof Object[] && !(value instanceof Resource[]))) {"
"ResourceArrayPropertyEditor.java:131"$0$0$0$12$113$"			Collection<?> input = (value instanceof Collection ? (Collection<?>) value : Arrays.asList((Object[]) value));"
"ResourceArrayPropertyEditor.java:132"$0$0$0$5$45$"			List<Resource> merged = new ArrayList<>();"
"ResourceArrayPropertyEditor.java:133"$0$0$0$6$33$"			for (Object element : input) {"
"ResourceArrayPropertyEditor.java:134"$0$0$0$5$36$"				if (element instanceof String) {"
"ResourceArrayPropertyEditor.java:135"$0$0$1$10$61$"					// A location pattern: resolve it into a Resource array."
"ResourceArrayPropertyEditor.java:136"$0$0$1$11$66$"					// Might point to a single resource or to multiple resources."
"ResourceArrayPropertyEditor.java:137"$0$0$0$5$59$"					String pattern = resolvePath((String) element).trim();"
"ResourceArrayPropertyEditor.java:138"$0$0$0$2$10$"					try {"
"ResourceArrayPropertyEditor.java:139"$1$0$0$4$80$"						Resource[] resources = this.resourcePatternResolver.getResources(pattern);"
"ResourceArrayPropertyEditor.java:140"$0$0$0$6$43$"						for (Resource resource : resources) {"
"ResourceArrayPropertyEditor.java:141"$0$0$0$3$40$"							if (!merged.contains(resource)) {"
"ResourceArrayPropertyEditor.java:142"$0$0$0$1$29$"								merged.add(resource);"
"ResourceArrayPropertyEditor.java:143"$0$0$0$1$8$"							}"
"ResourceArrayPropertyEditor.java:144"$0$0$0$1$7$"						}"
"ResourceArrayPropertyEditor.java:145"$0$0$0$1$6$"					}"
"ResourceArrayPropertyEditor.java:146"$0$0$0$4$29$"					catch (IOException ex) {"
"ResourceArrayPropertyEditor.java:147"$0$0$1$12$83$"						// ignore - might be an unresolved placeholder or non-existing base directory"
"ResourceArrayPropertyEditor.java:148"$0$0$0$3$36$"						if (logger.isDebugEnabled()) {"
"ResourceArrayPropertyEditor.java:149"$0$0$0$12$86$"							logger.debug(""Could not retrieve resources for pattern '"" + pattern + ""'"", ex);"
"ResourceArrayPropertyEditor.java:150"$0$0$0$1$7$"						}"
"ResourceArrayPropertyEditor.java:151"$0$0$0$1$6$"					}"
"ResourceArrayPropertyEditor.java:152"$0$0$0$1$5$"				}"
"ResourceArrayPropertyEditor.java:153"$0$0$0$6$43$"				else if (element instanceof Resource) {"
"ResourceArrayPropertyEditor.java:154"$0$0$1$9$48$"					// A Resource object: add it to the result."
"ResourceArrayPropertyEditor.java:155"$0$0$0$5$44$"					Resource resource = (Resource) element;"
"ResourceArrayPropertyEditor.java:156"$0$0$0$3$38$"					if (!merged.contains(resource)) {"
"ResourceArrayPropertyEditor.java:157"$0$0$0$1$27$"						merged.add(resource);"
"ResourceArrayPropertyEditor.java:158"$0$0$0$1$6$"					}"
"ResourceArrayPropertyEditor.java:159"$0$0$0$1$5$"				}"
"ResourceArrayPropertyEditor.java:160"$0$0$0$2$10$"				else {"
"ResourceArrayPropertyEditor.java:161"$0$0$0$13$89$"					throw new IllegalArgumentException(""Cannot convert element ["" + element + ""] to ["" +"
"ResourceArrayPropertyEditor.java:162"$1$0$0$10$91$"							Resource.class.getName() + ""]: only location String and Resource object supported"");"
"ResourceArrayPropertyEditor.java:163"$0$0$0$1$5$"				}"
"ResourceArrayPropertyEditor.java:164"$0$0$0$1$4$"			}"
"ResourceArrayPropertyEditor.java:165"$0$0$0$2$51$"			super.setValue(merged.toArray(new Resource[0]));"
"ResourceArrayPropertyEditor.java:166"$0$0$0$1$3$"		}"
"ResourceArrayPropertyEditor.java:167"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:168"$0$0$0$2$8$"		else {"
"ResourceArrayPropertyEditor.java:169"$0$0$1$11$64$"			// An arbitrary value: probably a String or a Resource array."
"ResourceArrayPropertyEditor.java:170"$0$0$1$15$81$"			// setAsText will be called for a String; a Resource array will be used as-is."
"ResourceArrayPropertyEditor.java:171"$0$0$0$1$25$"			super.setValue(value);"
"ResourceArrayPropertyEditor.java:172"$0$0$0$1$3$"		}"
"ResourceArrayPropertyEditor.java:173"$0$0$0$1$2$"	}"
"ResourceArrayPropertyEditor.java:174"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:175"$0$0$0$1$4$"	/**"
"ResourceArrayPropertyEditor.java:176"$0$0$0$8$55$"	 * Resolve the given path, replacing placeholders with"
"ResourceArrayPropertyEditor.java:177"$0$0$0$7$54$"	 * corresponding system property values if necessary."
"ResourceArrayPropertyEditor.java:178"$0$0$0$7$38$"	 * @param path the original file path"
"ResourceArrayPropertyEditor.java:179"$0$0$0$6$34$"	 * @return the resolved file path"
"ResourceArrayPropertyEditor.java:180"$0$0$0$3$45$"	 * @see PropertyResolver#resolvePlaceholders"
"ResourceArrayPropertyEditor.java:181"$0$0$0$3$61$"	 * @see PropertyResolver#resolveRequiredPlaceholders(String)"
"ResourceArrayPropertyEditor.java:182"$0$0$0$1$4$"	 */"
"ResourceArrayPropertyEditor.java:183"$0$0$0$5$44$"	protected String resolvePath(String path) {"
"ResourceArrayPropertyEditor.java:184"$0$0$0$5$38$"		if (this.propertyResolver == null) {"
"ResourceArrayPropertyEditor.java:185"$0$0$0$4$53$"			this.propertyResolver = new StandardEnvironment();"
"ResourceArrayPropertyEditor.java:186"$0$0$0$1$3$"		}"
"ResourceArrayPropertyEditor.java:187"$0$0$0$5$97$"		return (this.ignoreUnresolvablePlaceholders ? this.propertyResolver.resolvePlaceholders(path) :"
"ResourceArrayPropertyEditor.java:188"$0$0$0$1$61$"				this.propertyResolver.resolveRequiredPlaceholders(path));"
"ResourceArrayPropertyEditor.java:189"$0$0$0$1$2$"	}"
"ResourceArrayPropertyEditor.java:190"$0$0$0$0$0$""
"ResourceArrayPropertyEditor.java:191"$0$0$0$1$1$"}"
"ConcurrentReferenceHashMap.java:1"$0$0$0$1$2$"/*"
"ConcurrentReferenceHashMap.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"ConcurrentReferenceHashMap.java:3"$0$0$0$1$2$" *"
"ConcurrentReferenceHashMap.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ConcurrentReferenceHashMap.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ConcurrentReferenceHashMap.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ConcurrentReferenceHashMap.java:7"$0$0$0$1$2$" *"
"ConcurrentReferenceHashMap.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ConcurrentReferenceHashMap.java:9"$0$0$0$1$2$" *"
"ConcurrentReferenceHashMap.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ConcurrentReferenceHashMap.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ConcurrentReferenceHashMap.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ConcurrentReferenceHashMap.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ConcurrentReferenceHashMap.java:14"$0$0$0$5$33$" * limitations under the License."
"ConcurrentReferenceHashMap.java:15"$0$0$0$1$3$" */"
"ConcurrentReferenceHashMap.java:16"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:17"$0$0$0$2$33$"package org.springframework.util;"
"ConcurrentReferenceHashMap.java:18"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:19"$0$0$0$2$36$"import java.lang.ref.ReferenceQueue;"
"ConcurrentReferenceHashMap.java:20"$0$0$0$2$35$"import java.lang.ref.SoftReference;"
"ConcurrentReferenceHashMap.java:21"$0$0$0$2$35$"import java.lang.ref.WeakReference;"
"ConcurrentReferenceHashMap.java:22"$0$0$0$2$31$"import java.lang.reflect.Array;"
"ConcurrentReferenceHashMap.java:23"$0$0$0$2$29$"import java.util.AbstractMap;"
"ConcurrentReferenceHashMap.java:24"$0$0$0$2$29$"import java.util.AbstractSet;"
"ConcurrentReferenceHashMap.java:25"$0$0$0$2$29$"import java.util.Collections;"
"ConcurrentReferenceHashMap.java:26"$0$0$0$2$25$"import java.util.EnumSet;"
"ConcurrentReferenceHashMap.java:27"$0$0$0$2$25$"import java.util.HashSet;"
"ConcurrentReferenceHashMap.java:28"$0$0$0$2$26$"import java.util.Iterator;"
"ConcurrentReferenceHashMap.java:29"$0$0$0$2$21$"import java.util.Map;"
"ConcurrentReferenceHashMap.java:30"$0$0$0$2$40$"import java.util.NoSuchElementException;"
"ConcurrentReferenceHashMap.java:31"$0$0$0$2$21$"import java.util.Set;"
"ConcurrentReferenceHashMap.java:32"$0$0$0$2$46$"import java.util.concurrent.ConcurrentHashMap;"
"ConcurrentReferenceHashMap.java:33"$0$0$0$2$42$"import java.util.concurrent.ConcurrentMap;"
"ConcurrentReferenceHashMap.java:34"$0$0$0$2$49$"import java.util.concurrent.atomic.AtomicInteger;"
"ConcurrentReferenceHashMap.java:35"$0$0$0$2$48$"import java.util.concurrent.locks.ReentrantLock;"
"ConcurrentReferenceHashMap.java:36"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:37"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ConcurrentReferenceHashMap.java:38"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:39"$0$0$0$1$3$"/**"
"ConcurrentReferenceHashMap.java:40"$0$0$0$10$75$" * A {@link ConcurrentHashMap} that uses {@link ReferenceType#SOFT soft} or"
"ConcurrentReferenceHashMap.java:41"$0$0$0$12$92$" * {@linkplain ReferenceType#WEAK weak} references for both {@code keys} and {@code values}."
"ConcurrentReferenceHashMap.java:42"$0$0$0$1$2$" *"
"ConcurrentReferenceHashMap.java:43"$0$0$0$10$49$" * <p>This class can be used as an alternative to"
"ConcurrentReferenceHashMap.java:44"$0$0$0$8$86$" * {@code Collections.synchronizedMap(new WeakHashMap<K, Reference<V>>())} in order to"
"ConcurrentReferenceHashMap.java:45"$0$0$0$11$89$" * support better performance when accessed concurrently. This implementation follows the"
"ConcurrentReferenceHashMap.java:46"$0$0$0$11$79$" * same design constraints as {@link ConcurrentHashMap} with the exception that"
"ConcurrentReferenceHashMap.java:47"$0$0$0$10$59$" * {@code null} values and {@code null} keys are supported."
"ConcurrentReferenceHashMap.java:48"$0$0$0$1$2$" *"
"ConcurrentReferenceHashMap.java:49"$0$0$0$14$84$" * <p><b>NOTE:</b> The use of references means that there is no guarantee that items"
"ConcurrentReferenceHashMap.java:50"$0$0$0$14$88$" * placed into the map will be subsequently available. The garbage collector may discard"
"ConcurrentReferenceHashMap.java:51"$0$0$0$16$87$" * references at any time, so it may appear that an unknown thread is silently removing"
"ConcurrentReferenceHashMap.java:52"$0$0$0$2$11$" * entries."
"ConcurrentReferenceHashMap.java:53"$0$0$0$1$2$" *"
"ConcurrentReferenceHashMap.java:54"$0$0$0$9$63$" * <p>If not explicitly specified, this implementation will use"
"ConcurrentReferenceHashMap.java:55"$0$0$0$6$52$" * {@linkplain SoftReference soft entry references}."
"ConcurrentReferenceHashMap.java:56"$0$0$0$1$2$" *"
"ConcurrentReferenceHashMap.java:57"$0$0$0$4$23$" * @author Phillip Webb"
"ConcurrentReferenceHashMap.java:58"$0$0$0$4$26$" * @author Juergen Hoeller"
"ConcurrentReferenceHashMap.java:59"$0$0$0$3$13$" * @since 3.2"
"ConcurrentReferenceHashMap.java:60"$0$0$0$6$26$" * @param <K> the key type"
"ConcurrentReferenceHashMap.java:61"$0$0$0$6$28$" * @param <V> the value type"
"ConcurrentReferenceHashMap.java:62"$0$0$0$1$3$" */"
"ConcurrentReferenceHashMap.java:63"$0$0$0$11$104$"public class ConcurrentReferenceHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {"
"ConcurrentReferenceHashMap.java:64"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:65"$0$0$0$7$56$"	private static final int DEFAULT_INITIAL_CAPACITY = 16;"
"ConcurrentReferenceHashMap.java:66"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:67"$0$0$0$7$56$"	private static final float DEFAULT_LOAD_FACTOR = 0.75f;"
"ConcurrentReferenceHashMap.java:68"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:69"$0$0$0$7$57$"	private static final int DEFAULT_CONCURRENCY_LEVEL = 16;"
"ConcurrentReferenceHashMap.java:70"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:71"$0$0$0$7$80$"	private static final ReferenceType DEFAULT_REFERENCE_TYPE = ReferenceType.SOFT;"
"ConcurrentReferenceHashMap.java:72"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:73"$0$0$0$9$62$"	private static final int MAXIMUM_CONCURRENCY_LEVEL = 1 << 16;"
"ConcurrentReferenceHashMap.java:74"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:75"$0$0$0$9$57$"	private static final int MAXIMUM_SEGMENT_SIZE = 1 << 30;"
"ConcurrentReferenceHashMap.java:76"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:77"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:78"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:79"$0$0$0$13$70$"	 * Array of segments indexed using the high order bits from the hash."
"ConcurrentReferenceHashMap.java:80"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:81"$0$0$0$4$34$"	private final Segment[] segments;"
"ConcurrentReferenceHashMap.java:82"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:83"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:84"$0$0$0$16$96$"	 * When the average number of references per table exceeds this value resize will be attempted."
"ConcurrentReferenceHashMap.java:85"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:86"$0$0$0$4$32$"	private final float loadFactor;"
"ConcurrentReferenceHashMap.java:87"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:88"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:89"$0$0$0$7$37$"	 * The reference type: SOFT or WEAK."
"ConcurrentReferenceHashMap.java:90"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:91"$0$0$0$4$43$"	private final ReferenceType referenceType;"
"ConcurrentReferenceHashMap.java:92"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:93"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:94"$0$0$0$19$96$"	 * The shift value used to calculate the size of the segments array and an index from the hash."
"ConcurrentReferenceHashMap.java:95"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:96"$0$0$0$4$25$"	private final int shift;"
"ConcurrentReferenceHashMap.java:97"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:98"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:99"$0$0$0$5$27$"	 * Late binding entry set."
"ConcurrentReferenceHashMap.java:100"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:101"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:102"$0$0$0$5$48$"	private volatile Set<Map.Entry<K, V>> entrySet;"
"ConcurrentReferenceHashMap.java:103"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:104"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:105"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:106"$0$0$0$7$61$"	 * Create a new {@code ConcurrentReferenceHashMap} instance."
"ConcurrentReferenceHashMap.java:107"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:108"$0$0$0$3$38$"	public ConcurrentReferenceHashMap() {"
"ConcurrentReferenceHashMap.java:109"$0$0$0$4$105$"		this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL, DEFAULT_REFERENCE_TYPE);"
"ConcurrentReferenceHashMap.java:110"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:111"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:112"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:113"$0$0$0$7$61$"	 * Create a new {@code ConcurrentReferenceHashMap} instance."
"ConcurrentReferenceHashMap.java:114"$0$0$0$9$58$"	 * @param initialCapacity the initial capacity of the map"
"ConcurrentReferenceHashMap.java:115"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:116"$0$0$0$4$57$"	public ConcurrentReferenceHashMap(int initialCapacity) {"
"ConcurrentReferenceHashMap.java:117"$0$0$0$4$96$"		this(initialCapacity, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL, DEFAULT_REFERENCE_TYPE);"
"ConcurrentReferenceHashMap.java:118"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:119"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:120"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:121"$0$0$0$7$61$"	 * Create a new {@code ConcurrentReferenceHashMap} instance."
"ConcurrentReferenceHashMap.java:122"$0$0$0$9$58$"	 * @param initialCapacity the initial capacity of the map"
"ConcurrentReferenceHashMap.java:123"$0$0$0$14$86$"	 * @param loadFactor the load factor. When the average number of references per table"
"ConcurrentReferenceHashMap.java:124"$0$0$0$8$47$"	 * exceeds this value resize will be attempted"
"ConcurrentReferenceHashMap.java:125"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:126"$0$0$0$6$75$"	public ConcurrentReferenceHashMap(int initialCapacity, float loadFactor) {"
"ConcurrentReferenceHashMap.java:127"$0$0$0$4$87$"		this(initialCapacity, loadFactor, DEFAULT_CONCURRENCY_LEVEL, DEFAULT_REFERENCE_TYPE);"
"ConcurrentReferenceHashMap.java:128"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:129"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:130"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:131"$0$0$0$7$61$"	 * Create a new {@code ConcurrentReferenceHashMap} instance."
"ConcurrentReferenceHashMap.java:132"$0$0$0$9$58$"	 * @param initialCapacity the initial capacity of the map"
"ConcurrentReferenceHashMap.java:133"$0$0$0$11$81$"	 * @param concurrencyLevel the expected number of threads that will concurrently"
"ConcurrentReferenceHashMap.java:134"$0$0$0$5$20$"	 * write to the map"
"ConcurrentReferenceHashMap.java:135"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:136"$0$0$0$6$79$"	public ConcurrentReferenceHashMap(int initialCapacity, int concurrencyLevel) {"
"ConcurrentReferenceHashMap.java:137"$0$0$0$4$87$"		this(initialCapacity, DEFAULT_LOAD_FACTOR, concurrencyLevel, DEFAULT_REFERENCE_TYPE);"
"ConcurrentReferenceHashMap.java:138"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:139"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:140"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:141"$0$0$0$7$61$"	 * Create a new {@code ConcurrentReferenceHashMap} instance."
"ConcurrentReferenceHashMap.java:142"$0$0$0$9$58$"	 * @param initialCapacity the initial capacity of the map"
"ConcurrentReferenceHashMap.java:143"$0$0$0$12$75$"	 * @param referenceType the reference type used for entries (soft or weak)"
"ConcurrentReferenceHashMap.java:144"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:145"$0$0$0$6$86$"	public ConcurrentReferenceHashMap(int initialCapacity, ReferenceType referenceType) {"
"ConcurrentReferenceHashMap.java:146"$0$0$0$4$87$"		this(initialCapacity, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL, referenceType);"
"ConcurrentReferenceHashMap.java:147"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:148"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:149"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:150"$0$0$0$7$61$"	 * Create a new {@code ConcurrentReferenceHashMap} instance."
"ConcurrentReferenceHashMap.java:151"$0$0$0$9$58$"	 * @param initialCapacity the initial capacity of the map"
"ConcurrentReferenceHashMap.java:152"$0$0$0$13$80$"	 * @param loadFactor the load factor. When the average number of references per"
"ConcurrentReferenceHashMap.java:153"$0$0$0$9$55$"	 * table exceeds this value, resize will be attempted."
"ConcurrentReferenceHashMap.java:154"$0$0$0$11$81$"	 * @param concurrencyLevel the expected number of threads that will concurrently"
"ConcurrentReferenceHashMap.java:155"$0$0$0$5$20$"	 * write to the map"
"ConcurrentReferenceHashMap.java:156"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:157"$0$0$0$8$97$"	public ConcurrentReferenceHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) {"
"ConcurrentReferenceHashMap.java:158"$0$0$0$4$78$"		this(initialCapacity, loadFactor, concurrencyLevel, DEFAULT_REFERENCE_TYPE);"
"ConcurrentReferenceHashMap.java:159"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:160"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:161"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:162"$0$0$0$7$61$"	 * Create a new {@code ConcurrentReferenceHashMap} instance."
"ConcurrentReferenceHashMap.java:163"$0$0$0$9$58$"	 * @param initialCapacity the initial capacity of the map"
"ConcurrentReferenceHashMap.java:164"$0$0$0$13$80$"	 * @param loadFactor the load factor. When the average number of references per"
"ConcurrentReferenceHashMap.java:165"$0$0$0$9$55$"	 * table exceeds this value, resize will be attempted."
"ConcurrentReferenceHashMap.java:166"$0$0$0$11$81$"	 * @param concurrencyLevel the expected number of threads that will concurrently"
"ConcurrentReferenceHashMap.java:167"$0$0$0$5$20$"	 * write to the map"
"ConcurrentReferenceHashMap.java:168"$0$0$0$12$75$"	 * @param referenceType the reference type used for entries (soft or weak)"
"ConcurrentReferenceHashMap.java:169"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:170"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"ConcurrentReferenceHashMap.java:171"$0$0$0$2$35$"	public ConcurrentReferenceHashMap("
"ConcurrentReferenceHashMap.java:172"$0$0$0$9$94$"			int initialCapacity, float loadFactor, int concurrencyLevel, ReferenceType referenceType) {"
"ConcurrentReferenceHashMap.java:173"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:174"$0$0$0$9$79$"		Assert.isTrue(initialCapacity >= 0, ""Initial capacity must not be negative"");"
"ConcurrentReferenceHashMap.java:175"$0$0$0$8$65$"		Assert.isTrue(loadFactor > 0f, ""Load factor must be positive"");"
"ConcurrentReferenceHashMap.java:176"$0$0$0$8$76$"		Assert.isTrue(concurrencyLevel > 0, ""Concurrency level must be positive"");"
"ConcurrentReferenceHashMap.java:177"$0$0$0$7$67$"		Assert.notNull(referenceType, ""Reference type must not be null"");"
"ConcurrentReferenceHashMap.java:178"$0$0$0$3$31$"		this.loadFactor = loadFactor;"
"ConcurrentReferenceHashMap.java:179"$0$0$0$4$75$"		this.shift = calculateShift(concurrencyLevel, MAXIMUM_CONCURRENCY_LEVEL);"
"ConcurrentReferenceHashMap.java:180"$0$0$0$6$29$"		int size = 1 << this.shift;"
"ConcurrentReferenceHashMap.java:181"$0$0$0$3$37$"		this.referenceType = referenceType;"
"ConcurrentReferenceHashMap.java:182"$0$0$0$11$78$"		int roundedUpSegmentCapacity = (int) ((initialCapacity + size - 1L) / size);"
"ConcurrentReferenceHashMap.java:183"$0$0$0$7$88$"		int initialSize = 1 << calculateShift(roundedUpSegmentCapacity, MAXIMUM_SEGMENT_SIZE);"
"ConcurrentReferenceHashMap.java:184"$0$0$0$6$74$"		Segment[] segments = (Segment[]) Array.newInstance(Segment.class, size);"
"ConcurrentReferenceHashMap.java:185"$1$0$0$7$62$"		int resizeThreshold = (int) (initialSize * getLoadFactor());"
"ConcurrentReferenceHashMap.java:186"$0$0$0$10$45$"		for (int i = 0; i < segments.length; i++) {"
"ConcurrentReferenceHashMap.java:187"$0$0$0$5$59$"			segments[i] = new Segment(initialSize, resizeThreshold);"
"ConcurrentReferenceHashMap.java:188"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:189"$0$0$0$3$27$"		this.segments = segments;"
"ConcurrentReferenceHashMap.java:190"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:191"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:192"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:193"$1$0$0$5$40$"	protected final float getLoadFactor() {"
"ConcurrentReferenceHashMap.java:194"$0$0$0$2$25$"		return this.loadFactor;"
"ConcurrentReferenceHashMap.java:195"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:196"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:197"$1$0$0$5$40$"	protected final int getSegmentsSize() {"
"ConcurrentReferenceHashMap.java:198"$0$0$0$2$30$"		return this.segments.length;"
"ConcurrentReferenceHashMap.java:199"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:200"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:201"$1$0$0$6$48$"	protected final Segment getSegment(int index) {"
"ConcurrentReferenceHashMap.java:202"$0$0$0$2$30$"		return this.segments[index];"
"ConcurrentReferenceHashMap.java:203"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:204"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:205"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:206"$0$0$0$8$61$"	 * Factory method that returns the {@link ReferenceManager}."
"ConcurrentReferenceHashMap.java:207"$0$0$0$11$61$"	 * This method will be called once for each {@link Segment}."
"ConcurrentReferenceHashMap.java:208"$0$0$0$6$35$"	 * @return a new reference manager"
"ConcurrentReferenceHashMap.java:209"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:210"$0$0$0$4$54$"	protected ReferenceManager createReferenceManager() {"
"ConcurrentReferenceHashMap.java:211"$0$0$0$3$32$"		return new ReferenceManager();"
"ConcurrentReferenceHashMap.java:212"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:213"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:214"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:215"$0$0$0$15$80$"	 * Get the hash for a given object, apply an additional hash function to reduce"
"ConcurrentReferenceHashMap.java:216"$0$0$0$10$75$"	 * collisions. This implementation uses the same Wang/Jenkins algorithm as"
"ConcurrentReferenceHashMap.java:217"$0$0$0$10$86$"	 * {@link ConcurrentHashMap}. Subclasses can override to provide alternative hashing."
"ConcurrentReferenceHashMap.java:218"$0$0$0$10$45$"	 * @param o the object to hash (may be null)"
"ConcurrentReferenceHashMap.java:219"$0$0$0$6$35$"	 * @return the resulting hash code"
"ConcurrentReferenceHashMap.java:220"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:221"$1$0$0$6$44$"	protected int getHash(@Nullable Object o) {"
"ConcurrentReferenceHashMap.java:222"$0$0$0$10$44$"		int hash = (o != null ? o.hashCode() : 0);"
"ConcurrentReferenceHashMap.java:223"$0$0$0$7$36$"		hash += (hash << 15) ^ 0xffffcd7d;"
"ConcurrentReferenceHashMap.java:224"$0$0$0$5$24$"		hash ^= (hash >>> 10);"
"ConcurrentReferenceHashMap.java:225"$0$0$0$5$22$"		hash += (hash << 3);"
"ConcurrentReferenceHashMap.java:226"$0$0$0$5$23$"		hash ^= (hash >>> 6);"
"ConcurrentReferenceHashMap.java:227"$0$0$0$9$37$"		hash += (hash << 2) + (hash << 14);"
"ConcurrentReferenceHashMap.java:228"$0$0$0$5$24$"		hash ^= (hash >>> 16);"
"ConcurrentReferenceHashMap.java:229"$0$0$0$2$14$"		return hash;"
"ConcurrentReferenceHashMap.java:230"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:231"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:232"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:233"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:234"$1$0$0$6$37$"	public V get(@Nullable Object key) {"
"ConcurrentReferenceHashMap.java:235"$1$0$0$6$70$"		Reference<K, V> ref = getReference(key, Restructure.WHEN_NECESSARY);"
"ConcurrentReferenceHashMap.java:236"$1$0$0$11$55$"		Entry<K, V> entry = (ref != null ? ref.get() : null);"
"ConcurrentReferenceHashMap.java:237"$1$0$0$8$51$"		return (entry != null ? entry.getValue() : null);"
"ConcurrentReferenceHashMap.java:238"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:239"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:240"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:241"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:242"$1$0$0$9$72$"	public V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {"
"ConcurrentReferenceHashMap.java:243"$1$0$0$6$70$"		Reference<K, V> ref = getReference(key, Restructure.WHEN_NECESSARY);"
"ConcurrentReferenceHashMap.java:244"$1$0$0$11$55$"		Entry<K, V> entry = (ref != null ? ref.get() : null);"
"ConcurrentReferenceHashMap.java:245"$1$0$0$8$59$"		return (entry != null ? entry.getValue() : defaultValue);"
"ConcurrentReferenceHashMap.java:246"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:247"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:248"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:249"$0$0$0$6$51$"	public boolean containsKey(@Nullable Object key) {"
"ConcurrentReferenceHashMap.java:250"$1$0$0$6$70$"		Reference<K, V> ref = getReference(key, Restructure.WHEN_NECESSARY);"
"ConcurrentReferenceHashMap.java:251"$1$0$0$11$55$"		Entry<K, V> entry = (ref != null ? ref.get() : null);"
"ConcurrentReferenceHashMap.java:252"$1$0$0$7$76$"		return (entry != null && ObjectUtils.nullSafeEquals(entry.getKey(), key));"
"ConcurrentReferenceHashMap.java:253"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:254"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:255"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:256"$0$0$0$14$82$"	 * Return a {@link Reference} to the {@link Entry} for the specified {@code key},"
"ConcurrentReferenceHashMap.java:257"$0$0$0$7$33$"	 * or {@code null} if not found."
"ConcurrentReferenceHashMap.java:258"$0$0$0$9$44$"	 * @param key the key (can be {@code null})"
"ConcurrentReferenceHashMap.java:259"$0$0$0$10$68$"	 * @param restructure types of restructure allowed during this call"
"ConcurrentReferenceHashMap.java:260"$0$0$0$10$55$"	 * @return the reference, or {@code null} if not found"
"ConcurrentReferenceHashMap.java:261"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:262"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:263"$1$0$0$10$94$"	protected final Reference<K, V> getReference(@Nullable Object key, Restructure restructure) {"
"ConcurrentReferenceHashMap.java:264"$1$0$0$4$26$"		int hash = getHash(key);"
"ConcurrentReferenceHashMap.java:265"$2$0$0$4$70$"		return getSegmentForHash(hash).getReference(key, hash, restructure);"
"ConcurrentReferenceHashMap.java:266"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:267"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:268"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:269"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:270"$0$0$0$9$51$"	public V put(@Nullable K key, @Nullable V value) {"
"ConcurrentReferenceHashMap.java:271"$0$0$0$4$31$"		return put(key, value, true);"
"ConcurrentReferenceHashMap.java:272"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:273"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:274"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:275"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:276"$0$0$0$9$59$"	public V putIfAbsent(@Nullable K key, @Nullable V value) {"
"ConcurrentReferenceHashMap.java:277"$0$0$0$4$32$"		return put(key, value, false);"
"ConcurrentReferenceHashMap.java:278"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:279"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:280"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:281"$0$0$0$14$97$"	private V put(@Nullable final K key, @Nullable final V value, final boolean overwriteExisting) {"
"ConcurrentReferenceHashMap.java:282"$0$0$0$6$84$"		return doTask(key, new Task<V>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.RESIZE) {"
"ConcurrentReferenceHashMap.java:283"$0$0$0$1$12$"			@Override"
"ConcurrentReferenceHashMap.java:284"$0$0$0$1$12$"			@Nullable"
"ConcurrentReferenceHashMap.java:285"$0$0$0$14$114$"			protected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry, @Nullable Entries<V> entries) {"
"ConcurrentReferenceHashMap.java:286"$0$0$0$5$24$"				if (entry != null) {"
"ConcurrentReferenceHashMap.java:287"$1$0$0$4$35$"					V oldValue = entry.getValue();"
"ConcurrentReferenceHashMap.java:288"$0$0$0$3$29$"					if (overwriteExisting) {"
"ConcurrentReferenceHashMap.java:289"$0$0$0$1$28$"						entry.setValue(value);"
"ConcurrentReferenceHashMap.java:290"$0$0$0$1$6$"					}"
"ConcurrentReferenceHashMap.java:291"$0$0$0$2$21$"					return oldValue;"
"ConcurrentReferenceHashMap.java:292"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:293"$0$0$0$6$56$"				Assert.state(entries != null, ""No entries segment"");"
"ConcurrentReferenceHashMap.java:294"$0$0$0$1$23$"				entries.add(value);"
"ConcurrentReferenceHashMap.java:295"$0$0$0$2$16$"				return null;"
"ConcurrentReferenceHashMap.java:296"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:297"$0$0$0$1$5$"		});"
"ConcurrentReferenceHashMap.java:298"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:299"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:300"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:301"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:302"$0$0$0$5$30$"	public V remove(Object key) {"
"ConcurrentReferenceHashMap.java:303"$0$0$0$6$90$"		return doTask(key, new Task<V>(TaskOption.RESTRUCTURE_AFTER, TaskOption.SKIP_IF_EMPTY) {"
"ConcurrentReferenceHashMap.java:304"$0$0$0$1$12$"			@Override"
"ConcurrentReferenceHashMap.java:305"$0$0$0$1$12$"			@Nullable"
"ConcurrentReferenceHashMap.java:306"$0$0$0$11$84$"			protected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {"
"ConcurrentReferenceHashMap.java:307"$0$0$0$5$24$"				if (entry != null) {"
"ConcurrentReferenceHashMap.java:308"$0$0$0$5$23$"					if (ref != null) {"
"ConcurrentReferenceHashMap.java:309"$0$0$0$1$20$"						ref.release();"
"ConcurrentReferenceHashMap.java:310"$0$0$0$1$6$"					}"
"ConcurrentReferenceHashMap.java:311"$0$0$0$2$24$"					return entry.value;"
"ConcurrentReferenceHashMap.java:312"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:313"$0$0$0$2$16$"				return null;"
"ConcurrentReferenceHashMap.java:314"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:315"$0$0$0$1$5$"		});"
"ConcurrentReferenceHashMap.java:316"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:317"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:318"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:319"$0$0$0$8$56$"	public boolean remove(Object key, final Object value) {"
"ConcurrentReferenceHashMap.java:320"$0$0$0$8$106$"		Boolean result = doTask(key, new Task<Boolean>(TaskOption.RESTRUCTURE_AFTER, TaskOption.SKIP_IF_EMPTY) {"
"ConcurrentReferenceHashMap.java:321"$0$0$0$1$12$"			@Override"
"ConcurrentReferenceHashMap.java:322"$0$0$0$11$90$"			protected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {"
"ConcurrentReferenceHashMap.java:323"$1$0$0$8$79$"				if (entry != null && ObjectUtils.nullSafeEquals(entry.getValue(), value)) {"
"ConcurrentReferenceHashMap.java:324"$0$0$0$5$23$"					if (ref != null) {"
"ConcurrentReferenceHashMap.java:325"$0$0$0$1$20$"						ref.release();"
"ConcurrentReferenceHashMap.java:326"$0$0$0$1$6$"					}"
"ConcurrentReferenceHashMap.java:327"$0$0$0$2$17$"					return true;"
"ConcurrentReferenceHashMap.java:328"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:329"$0$0$0$2$17$"				return false;"
"ConcurrentReferenceHashMap.java:330"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:331"$0$0$0$1$5$"		});"
"ConcurrentReferenceHashMap.java:332"$0$0$0$2$39$"		return (Boolean.TRUE.equals(result));"
"ConcurrentReferenceHashMap.java:333"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:334"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:335"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:336"$0$0$0$11$68$"	public boolean replace(K key, final V oldValue, final V newValue) {"
"ConcurrentReferenceHashMap.java:337"$0$0$0$8$107$"		Boolean result = doTask(key, new Task<Boolean>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.SKIP_IF_EMPTY) {"
"ConcurrentReferenceHashMap.java:338"$0$0$0$1$12$"			@Override"
"ConcurrentReferenceHashMap.java:339"$0$0$0$11$90$"			protected Boolean execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {"
"ConcurrentReferenceHashMap.java:340"$1$0$0$8$82$"				if (entry != null && ObjectUtils.nullSafeEquals(entry.getValue(), oldValue)) {"
"ConcurrentReferenceHashMap.java:341"$0$0$0$1$30$"					entry.setValue(newValue);"
"ConcurrentReferenceHashMap.java:342"$0$0$0$2$17$"					return true;"
"ConcurrentReferenceHashMap.java:343"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:344"$0$0$0$2$17$"				return false;"
"ConcurrentReferenceHashMap.java:345"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:346"$0$0$0$1$5$"		});"
"ConcurrentReferenceHashMap.java:347"$0$0$0$2$39$"		return (Boolean.TRUE.equals(result));"
"ConcurrentReferenceHashMap.java:348"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:349"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:350"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:351"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:352"$0$0$0$8$41$"	public V replace(K key, final V value) {"
"ConcurrentReferenceHashMap.java:353"$0$0$0$6$91$"		return doTask(key, new Task<V>(TaskOption.RESTRUCTURE_BEFORE, TaskOption.SKIP_IF_EMPTY) {"
"ConcurrentReferenceHashMap.java:354"$0$0$0$1$12$"			@Override"
"ConcurrentReferenceHashMap.java:355"$0$0$0$1$12$"			@Nullable"
"ConcurrentReferenceHashMap.java:356"$0$0$0$11$84$"			protected V execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {"
"ConcurrentReferenceHashMap.java:357"$0$0$0$5$24$"				if (entry != null) {"
"ConcurrentReferenceHashMap.java:358"$1$0$0$4$35$"					V oldValue = entry.getValue();"
"ConcurrentReferenceHashMap.java:359"$0$0$0$1$27$"					entry.setValue(value);"
"ConcurrentReferenceHashMap.java:360"$0$0$0$2$21$"					return oldValue;"
"ConcurrentReferenceHashMap.java:361"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:362"$0$0$0$2$16$"				return null;"
"ConcurrentReferenceHashMap.java:363"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:364"$0$0$0$1$5$"		});"
"ConcurrentReferenceHashMap.java:365"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:366"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:367"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:368"$0$0$0$4$22$"	public void clear() {"
"ConcurrentReferenceHashMap.java:369"$0$0$0$6$41$"		for (Segment segment : this.segments) {"
"ConcurrentReferenceHashMap.java:370"$0$0$0$1$19$"			segment.clear();"
"ConcurrentReferenceHashMap.java:371"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:372"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:373"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:374"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:375"$0$0$0$14$85$"	 * Remove any entries that have been garbage collected and are no longer referenced."
"ConcurrentReferenceHashMap.java:376"$0$0$0$11$84$"	 * Under normal circumstances garbage collected entries are automatically purged as"
"ConcurrentReferenceHashMap.java:377"$0$0$0$18$86$"	 * items are added or removed from the Map. This method can be used to force a purge,"
"ConcurrentReferenceHashMap.java:378"$0$0$0$14$73$"	 * and is useful when the Map is read frequently but updated less often."
"ConcurrentReferenceHashMap.java:379"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:380"$0$0$0$4$41$"	public void purgeUnreferencedEntries() {"
"ConcurrentReferenceHashMap.java:381"$0$0$0$6$41$"		for (Segment segment : this.segments) {"
"ConcurrentReferenceHashMap.java:382"$0$0$0$1$41$"			segment.restructureIfNecessary(false);"
"ConcurrentReferenceHashMap.java:383"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:384"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:385"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:386"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:387"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:388"$0$0$0$4$20$"	public int size() {"
"ConcurrentReferenceHashMap.java:389"$0$0$0$4$15$"		int size = 0;"
"ConcurrentReferenceHashMap.java:390"$0$0$0$6$41$"		for (Segment segment : this.segments) {"
"ConcurrentReferenceHashMap.java:391"$1$0$0$3$30$"			size += segment.getCount();"
"ConcurrentReferenceHashMap.java:392"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:393"$0$0$0$2$14$"		return size;"
"ConcurrentReferenceHashMap.java:394"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:395"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:396"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:397"$0$0$0$4$27$"	public boolean isEmpty() {"
"ConcurrentReferenceHashMap.java:398"$0$0$0$6$41$"		for (Segment segment : this.segments) {"
"ConcurrentReferenceHashMap.java:399"$1$0$0$5$32$"			if (segment.getCount() > 0) {"
"ConcurrentReferenceHashMap.java:400"$0$0$0$2$17$"				return false;"
"ConcurrentReferenceHashMap.java:401"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:402"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:403"$0$0$0$2$14$"		return true;"
"ConcurrentReferenceHashMap.java:404"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:405"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:406"$0$0$0$1$10$"	@Override"
"ConcurrentReferenceHashMap.java:407"$0$0$0$5$41$"	public Set<Map.Entry<K, V>> entrySet() {"
"ConcurrentReferenceHashMap.java:408"$0$0$0$5$48$"		Set<Map.Entry<K, V>> entrySet = this.entrySet;"
"ConcurrentReferenceHashMap.java:409"$0$0$0$5$25$"		if (entrySet == null) {"
"ConcurrentReferenceHashMap.java:410"$0$0$0$4$29$"			entrySet = new EntrySet();"
"ConcurrentReferenceHashMap.java:411"$0$0$0$3$28$"			this.entrySet = entrySet;"
"ConcurrentReferenceHashMap.java:412"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:413"$0$0$0$2$18$"		return entrySet;"
"ConcurrentReferenceHashMap.java:414"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:415"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:416"$0$0$0$1$10$"	@Nullable"
"ConcurrentReferenceHashMap.java:417"$0$0$0$9$59$"	private <T> T doTask(@Nullable Object key, Task<T> task) {"
"ConcurrentReferenceHashMap.java:418"$1$0$0$4$26$"		int hash = getHash(key);"
"ConcurrentReferenceHashMap.java:419"$1$0$0$4$57$"		return getSegmentForHash(hash).doTask(hash, key, task);"
"ConcurrentReferenceHashMap.java:420"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:421"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:422"$1$0$0$5$46$"	private Segment getSegmentForHash(int hash) {"
"ConcurrentReferenceHashMap.java:423"$0$0$0$10$82$"		return this.segments[(hash >>> (32 - this.shift)) & (this.segments.length - 1)];"
"ConcurrentReferenceHashMap.java:424"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:425"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:426"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:427"$0$0$0$15$83$"	 * Calculate a shift value that can be used to create a power-of-two value between"
"ConcurrentReferenceHashMap.java:428"$0$0$0$7$45$"	 * the specified maximum and minimum values."
"ConcurrentReferenceHashMap.java:429"$0$0$0$6$41$"	 * @param minimumValue the minimum value"
"ConcurrentReferenceHashMap.java:430"$0$0$0$6$41$"	 * @param maximumValue the maximum value"
"ConcurrentReferenceHashMap.java:431"$0$0$0$14$75$"	 * @return the calculated shift (use {@code 1 << shift} to obtain a value)"
"ConcurrentReferenceHashMap.java:432"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:433"$0$0$0$8$74$"	protected static int calculateShift(int minimumValue, int maximumValue) {"
"ConcurrentReferenceHashMap.java:434"$0$0$0$4$16$"		int shift = 0;"
"ConcurrentReferenceHashMap.java:435"$0$0$0$4$16$"		int value = 1;"
"ConcurrentReferenceHashMap.java:436"$0$0$0$9$56$"		while (value < minimumValue && value < maximumValue) {"
"ConcurrentReferenceHashMap.java:437"$0$0$0$3$15$"			value <<= 1;"
"ConcurrentReferenceHashMap.java:438"$0$0$0$1$11$"			shift++;"
"ConcurrentReferenceHashMap.java:439"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:440"$0$0$0$2$15$"		return shift;"
"ConcurrentReferenceHashMap.java:441"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:442"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:443"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:444"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:445"$0$0$0$8$50$"	 * Various reference types supported by this map."
"ConcurrentReferenceHashMap.java:446"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:447"$0$0$0$4$28$"	public enum ReferenceType {"
"ConcurrentReferenceHashMap.java:448"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:449"$0$0$0$6$50$"		/** Use {@link SoftReference SoftReferences}. */"
"ConcurrentReferenceHashMap.java:450"$0$0$0$1$7$"		SOFT,"
"ConcurrentReferenceHashMap.java:451"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:452"$0$0$0$6$50$"		/** Use {@link WeakReference WeakReferences}. */"
"ConcurrentReferenceHashMap.java:453"$0$0$0$1$6$"		WEAK"
"ConcurrentReferenceHashMap.java:454"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:455"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:456"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:457"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:458"$0$0$0$14$83$"	 * A single segment used to divide the map to allow better concurrent performance."
"ConcurrentReferenceHashMap.java:459"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:460"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"ConcurrentReferenceHashMap.java:461"$0$0$0$7$54$"	protected final class Segment extends ReentrantLock {"
"ConcurrentReferenceHashMap.java:462"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:463"$0$0$0$4$50$"		private final ReferenceManager referenceManager;"
"ConcurrentReferenceHashMap.java:464"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:465"$0$0$0$4$32$"		private final int initialSize;"
"ConcurrentReferenceHashMap.java:466"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:467"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:468"$0$0$0$13$72$"		 * Array of references indexed using the low order bits from the hash."
"ConcurrentReferenceHashMap.java:469"$0$0$0$11$73$"		 * This property should only be set along with {@code resizeThreshold}."
"ConcurrentReferenceHashMap.java:470"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:471"$0$0$0$5$48$"		private volatile Reference<K, V>[] references;"
"ConcurrentReferenceHashMap.java:472"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:473"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:474"$0$0$0$13$84$"		 * The total number of references contained in this segment. This includes chained"
"ConcurrentReferenceHashMap.java:475"$0$0$0$12$79$"		 * references and references that have been garbage collected but not purged."
"ConcurrentReferenceHashMap.java:476"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:477"$0$0$0$7$59$"		private final AtomicInteger count = new AtomicInteger(0);"
"ConcurrentReferenceHashMap.java:478"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:479"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:480"$0$0$0$13$83$"		 * The threshold when resizing of the references should occur. When {@code count}"
"ConcurrentReferenceHashMap.java:481"$0$0$0$8$51$"		 * exceeds this value references will be resized."
"ConcurrentReferenceHashMap.java:482"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:483"$0$0$0$3$30$"		private int resizeThreshold;"
"ConcurrentReferenceHashMap.java:484"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:485"$0$0$0$6$56$"		public Segment(int initialSize, int resizeThreshold) {"
"ConcurrentReferenceHashMap.java:486"$0$0$0$3$52$"			this.referenceManager = createReferenceManager();"
"ConcurrentReferenceHashMap.java:487"$0$0$0$3$34$"			this.initialSize = initialSize;"
"ConcurrentReferenceHashMap.java:488"$0$0$0$3$55$"			this.references = createReferenceArray(initialSize);"
"ConcurrentReferenceHashMap.java:489"$0$0$0$3$42$"			this.resizeThreshold = resizeThreshold;"
"ConcurrentReferenceHashMap.java:490"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:491"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:492"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:493"$1$0$0$11$96$"		public Reference<K, V> getReference(@Nullable Object key, int hash, Restructure restructure) {"
"ConcurrentReferenceHashMap.java:494"$0$0$0$5$51$"			if (restructure == Restructure.WHEN_NECESSARY) {"
"ConcurrentReferenceHashMap.java:495"$0$0$0$1$34$"				restructureIfNecessary(false);"
"ConcurrentReferenceHashMap.java:496"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:497"$1$0$0$5$31$"			if (this.count.get() == 0) {"
"ConcurrentReferenceHashMap.java:498"$0$0$0$2$16$"				return null;"
"ConcurrentReferenceHashMap.java:499"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:500"$0$0$1$11$63$"			// Use a local copy to protect against other threads writing"
"ConcurrentReferenceHashMap.java:501"$0$0$0$5$50$"			Reference<K, V>[] references = this.references;"
"ConcurrentReferenceHashMap.java:502"$1$0$0$5$42$"			int index = getIndex(hash, references);"
"ConcurrentReferenceHashMap.java:503"$0$0$0$5$44$"			Reference<K, V> head = references[index];"
"ConcurrentReferenceHashMap.java:504"$0$0$0$4$39$"			return findInChain(head, key, hash);"
"ConcurrentReferenceHashMap.java:505"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:506"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:507"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:508"$0$0$0$8$47$"		 * Apply an update operation to this segment."
"ConcurrentReferenceHashMap.java:509"$0$0$0$9$50$"		 * The segment will be locked during the update."
"ConcurrentReferenceHashMap.java:510"$0$0$0$8$36$"		 * @param hash the hash of the key"
"ConcurrentReferenceHashMap.java:511"$0$0$0$5$23$"		 * @param key the key"
"ConcurrentReferenceHashMap.java:512"$0$0$0$6$37$"		 * @param task the update operation"
"ConcurrentReferenceHashMap.java:513"$0$0$0$7$40$"		 * @return the result of the operation"
"ConcurrentReferenceHashMap.java:514"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:515"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:516"$0$0$0$14$87$"		public <T> T doTask(final int hash, @Nullable final Object key, final Task<T> task) {"
"ConcurrentReferenceHashMap.java:517"$0$0$0$4$54$"			boolean resize = task.hasOption(TaskOption.RESIZE);"
"ConcurrentReferenceHashMap.java:518"$0$0$0$3$55$"			if (task.hasOption(TaskOption.RESTRUCTURE_BEFORE)) {"
"ConcurrentReferenceHashMap.java:519"$0$0$0$1$35$"				restructureIfNecessary(resize);"
"ConcurrentReferenceHashMap.java:520"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:521"$1$0$0$7$75$"			if (task.hasOption(TaskOption.SKIP_IF_EMPTY) && this.count.get() == 0) {"
"ConcurrentReferenceHashMap.java:522"$0$0$0$4$42$"				return task.execute(null, null, null);"
"ConcurrentReferenceHashMap.java:523"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:524"$0$0$0$1$10$"			lock();"
"ConcurrentReferenceHashMap.java:525"$0$0$0$2$8$"			try {"
"ConcurrentReferenceHashMap.java:526"$1$0$0$6$54$"				final int index = getIndex(hash, this.references);"
"ConcurrentReferenceHashMap.java:527"$0$0$0$6$56$"				final Reference<K, V> head = this.references[index];"
"ConcurrentReferenceHashMap.java:528"$0$0$0$7$55$"				Reference<K, V> ref = findInChain(head, key, hash);"
"ConcurrentReferenceHashMap.java:529"$1$0$0$11$57$"				Entry<K, V> entry = (ref != null ? ref.get() : null);"
"ConcurrentReferenceHashMap.java:530"$0$0$0$6$35$"				Entries<V> entries = value -> {"
"ConcurrentReferenceHashMap.java:531"$0$0$0$1$35$"					@SuppressWarnings(""unchecked"")"
"ConcurrentReferenceHashMap.java:532"$0$0$0$8$56$"					Entry<K, V> newEntry = new Entry<>((K) key, value);"
"ConcurrentReferenceHashMap.java:533"$0$0$0$7$104$"					Reference<K, V> newReference = Segment.this.referenceManager.createReference(newEntry, hash, head);"
"ConcurrentReferenceHashMap.java:534"$0$0$0$3$51$"					Segment.this.references[index] = newReference;"
"ConcurrentReferenceHashMap.java:535"$0$0$0$1$42$"					Segment.this.count.incrementAndGet();"
"ConcurrentReferenceHashMap.java:536"$0$0$0$1$6$"				};"
"ConcurrentReferenceHashMap.java:537"$0$0$0$4$45$"				return task.execute(ref, entry, entries);"
"ConcurrentReferenceHashMap.java:538"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:539"$0$0$0$2$12$"			finally {"
"ConcurrentReferenceHashMap.java:540"$0$0$0$1$13$"				unlock();"
"ConcurrentReferenceHashMap.java:541"$0$0$0$3$55$"				if (task.hasOption(TaskOption.RESTRUCTURE_AFTER)) {"
"ConcurrentReferenceHashMap.java:542"$0$0$0$1$36$"					restructureIfNecessary(resize);"
"ConcurrentReferenceHashMap.java:543"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:544"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:545"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:546"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:547"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:548"$0$0$0$7$39$"		 * Clear all items from this segment."
"ConcurrentReferenceHashMap.java:549"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:550"$0$0$0$4$23$"		public void clear() {"
"ConcurrentReferenceHashMap.java:551"$1$0$0$5$31$"			if (this.count.get() == 0) {"
"ConcurrentReferenceHashMap.java:552"$0$0$0$1$11$"				return;"
"ConcurrentReferenceHashMap.java:553"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:554"$0$0$0$1$10$"			lock();"
"ConcurrentReferenceHashMap.java:555"$0$0$0$2$8$"			try {"
"ConcurrentReferenceHashMap.java:556"$0$0$0$3$61$"				this.references = createReferenceArray(this.initialSize);"
"ConcurrentReferenceHashMap.java:557"$1$0$0$6$76$"				this.resizeThreshold = (int) (this.references.length * getLoadFactor());"
"ConcurrentReferenceHashMap.java:558"$0$0$0$1$22$"				this.count.set(0);"
"ConcurrentReferenceHashMap.java:559"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:560"$0$0$0$2$12$"			finally {"
"ConcurrentReferenceHashMap.java:561"$0$0$0$1$13$"				unlock();"
"ConcurrentReferenceHashMap.java:562"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:563"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:564"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:565"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:566"$0$0$0$11$78$"		 * Restructure the underlying data structure when it becomes necessary. This"
"ConcurrentReferenceHashMap.java:567"$0$0$0$15$78$"		 * method can increase the size of the references table as well as purge any"
"ConcurrentReferenceHashMap.java:568"$0$0$0$7$49$"		 * references that have been garbage collected."
"ConcurrentReferenceHashMap.java:569"$0$0$0$7$48$"		 * @param allowResize if resizing is permitted"
"ConcurrentReferenceHashMap.java:570"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:571"$0$0$0$6$68$"		protected final void restructureIfNecessary(boolean allowResize) {"
"ConcurrentReferenceHashMap.java:572"$1$0$0$4$36$"			int currCount = this.count.get();"
"ConcurrentReferenceHashMap.java:573"$0$0$0$12$93$"			boolean needsResize = allowResize && (currCount > 0 && currCount >= this.resizeThreshold);"
"ConcurrentReferenceHashMap.java:574"$0$0$0$5$62$"			Reference<K, V> ref = this.referenceManager.pollForPurge();"
"ConcurrentReferenceHashMap.java:575"$0$0$0$7$38$"			if (ref != null || (needsResize)) {"
"ConcurrentReferenceHashMap.java:576"$0$0$0$2$34$"				restructure(allowResize, ref);"
"ConcurrentReferenceHashMap.java:577"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:578"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:579"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:580"$0$0$0$9$80$"		private void restructure(boolean allowResize, @Nullable Reference<K, V> ref) {"
"ConcurrentReferenceHashMap.java:581"$0$0$0$2$23$"			boolean needsResize;"
"ConcurrentReferenceHashMap.java:582"$0$0$0$1$10$"			lock();"
"ConcurrentReferenceHashMap.java:583"$0$0$0$2$8$"			try {"
"ConcurrentReferenceHashMap.java:584"$1$0$0$4$49$"				int countAfterRestructure = this.count.get();"
"ConcurrentReferenceHashMap.java:585"$0$0$0$5$58$"				Set<Reference<K, V>> toPurge = Collections.emptySet();"
"ConcurrentReferenceHashMap.java:586"$0$0$0$5$22$"				if (ref != null) {"
"ConcurrentReferenceHashMap.java:587"$0$0$0$4$31$"					toPurge = new HashSet<>();"
"ConcurrentReferenceHashMap.java:588"$0$0$0$5$26$"					while (ref != null) {"
"ConcurrentReferenceHashMap.java:589"$0$0$0$1$23$"						toPurge.add(ref);"
"ConcurrentReferenceHashMap.java:590"$0$0$0$3$49$"						ref = this.referenceManager.pollForPurge();"
"ConcurrentReferenceHashMap.java:591"$0$0$0$1$6$"					}"
"ConcurrentReferenceHashMap.java:592"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:593"$0$0$0$3$44$"				countAfterRestructure -= toPurge.size();"
"ConcurrentReferenceHashMap.java:594"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:595"$0$0$1$11$71$"				// Recalculate taking into account count inside lock and items that"
"ConcurrentReferenceHashMap.java:596"$0$0$1$4$21$"				// will be purged"
"ConcurrentReferenceHashMap.java:597"$0$0$0$9$95$"				needsResize = (countAfterRestructure > 0 && countAfterRestructure >= this.resizeThreshold);"
"ConcurrentReferenceHashMap.java:598"$0$0$0$4$29$"				boolean resizing = false;"
"ConcurrentReferenceHashMap.java:599"$0$0$0$4$49$"				int restructureSize = this.references.length;"
"ConcurrentReferenceHashMap.java:600"$0$0$0$9$79$"				if (allowResize && needsResize && restructureSize < MAXIMUM_SEGMENT_SIZE) {"
"ConcurrentReferenceHashMap.java:601"$0$0$0$3$27$"					restructureSize <<= 1;"
"ConcurrentReferenceHashMap.java:602"$0$0$0$3$21$"					resizing = true;"
"ConcurrentReferenceHashMap.java:603"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:604"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:605"$0$0$1$11$58$"				// Either create a new table or reuse the existing one"
"ConcurrentReferenceHashMap.java:606"$0$0$0$4$36$"				Reference<K, V>[] restructured ="
"ConcurrentReferenceHashMap.java:607"$0$0$0$5$75$"						(resizing ? createReferenceArray(restructureSize) : this.references);"
"ConcurrentReferenceHashMap.java:608"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:609"$0$0$1$2$18$"				// Restructure"
"ConcurrentReferenceHashMap.java:610"$0$0$0$10$54$"				for (int i = 0; i < this.references.length; i++) {"
"ConcurrentReferenceHashMap.java:611"$0$0$0$3$30$"					ref = this.references[i];"
"ConcurrentReferenceHashMap.java:612"$0$0$0$3$21$"					if (!resizing) {"
"ConcurrentReferenceHashMap.java:613"$0$0$0$3$29$"						restructured[i] = null;"
"ConcurrentReferenceHashMap.java:614"$0$0$0$1$6$"					}"
"ConcurrentReferenceHashMap.java:615"$0$0$0$5$26$"					while (ref != null) {"
"ConcurrentReferenceHashMap.java:616"$0$0$0$3$35$"						if (!toPurge.contains(ref)) {"
"ConcurrentReferenceHashMap.java:617"$1$0$0$5$37$"							Entry<K, V> entry = ref.get();"
"ConcurrentReferenceHashMap.java:618"$0$0$0$5$27$"							if (entry != null) {"
"ConcurrentReferenceHashMap.java:619"$2$0$0$5$58$"								int index = getIndex(ref.getHash(), restructured);"
"ConcurrentReferenceHashMap.java:620"$0$0$0$3$68$"								restructured[index] = this.referenceManager.createReference("
"ConcurrentReferenceHashMap.java:621"$1$0$0$3$53$"										entry, ref.getHash(), restructured[index]);"
"ConcurrentReferenceHashMap.java:622"$0$0$0$1$8$"							}"
"ConcurrentReferenceHashMap.java:623"$0$0$0$1$7$"						}"
"ConcurrentReferenceHashMap.java:624"$1$0$0$3$26$"						ref = ref.getNext();"
"ConcurrentReferenceHashMap.java:625"$0$0$0$1$6$"					}"
"ConcurrentReferenceHashMap.java:626"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:627"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:628"$0$0$1$4$31$"				// Replace volatile members"
"ConcurrentReferenceHashMap.java:629"$0$0$0$3$19$"				if (resizing) {"
"ConcurrentReferenceHashMap.java:630"$0$0$0$3$36$"					this.references = restructured;"
"ConcurrentReferenceHashMap.java:631"$1$0$0$6$77$"					this.resizeThreshold = (int) (this.references.length * getLoadFactor());"
"ConcurrentReferenceHashMap.java:632"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:633"$0$0$0$2$55$"				this.count.set(Math.max(countAfterRestructure, 0));"
"ConcurrentReferenceHashMap.java:634"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:635"$0$0$0$2$12$"			finally {"
"ConcurrentReferenceHashMap.java:636"$0$0$0$1$13$"				unlock();"
"ConcurrentReferenceHashMap.java:637"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:638"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:639"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:640"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:641"$0$0$0$12$92$"		private Reference<K, V> findInChain(Reference<K, V> ref, @Nullable Object key, int hash) {"
"ConcurrentReferenceHashMap.java:642"$0$0$0$5$33$"			Reference<K, V> currRef = ref;"
"ConcurrentReferenceHashMap.java:643"$0$0$0$5$28$"			while (currRef != null) {"
"ConcurrentReferenceHashMap.java:644"$1$0$0$5$36$"				if (currRef.getHash() == hash) {"
"ConcurrentReferenceHashMap.java:645"$1$0$0$5$39$"					Entry<K, V> entry = currRef.get();"
"ConcurrentReferenceHashMap.java:646"$0$0$0$5$25$"					if (entry != null) {"
"ConcurrentReferenceHashMap.java:647"$1$0$0$4$34$"						K entryKey = entry.getKey();"
"ConcurrentReferenceHashMap.java:648"$0$0$0$4$54$"						if (ObjectUtils.nullSafeEquals(entryKey, key)) {"
"ConcurrentReferenceHashMap.java:649"$0$0$0$2$22$"							return currRef;"
"ConcurrentReferenceHashMap.java:650"$0$0$0$1$7$"						}"
"ConcurrentReferenceHashMap.java:651"$0$0$0$1$6$"					}"
"ConcurrentReferenceHashMap.java:652"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:653"$1$0$0$3$32$"				currRef = currRef.getNext();"
"ConcurrentReferenceHashMap.java:654"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:655"$0$0$0$2$15$"			return null;"
"ConcurrentReferenceHashMap.java:656"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:657"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:658"$0$0$0$2$46$"		@SuppressWarnings({""rawtypes"", ""unchecked""})"
"ConcurrentReferenceHashMap.java:659"$0$0$0$6$60$"		private Reference<K, V>[] createReferenceArray(int size) {"
"ConcurrentReferenceHashMap.java:660"$0$0$0$3$30$"			return new Reference[size];"
"ConcurrentReferenceHashMap.java:661"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:662"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:663"$1$0$0$8$64$"		private int getIndex(int hash, Reference<K, V>[] references) {"
"ConcurrentReferenceHashMap.java:664"$0$0$0$6$43$"			return (hash & (references.length - 1));"
"ConcurrentReferenceHashMap.java:665"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:666"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:667"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:668"$0$0$0$9$53$"		 * Return the size of the current references array."
"ConcurrentReferenceHashMap.java:669"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:670"$1$0$0$5$30$"		public final int getSize() {"
"ConcurrentReferenceHashMap.java:671"$0$0$0$2$33$"			return this.references.length;"
"ConcurrentReferenceHashMap.java:672"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:673"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:674"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:675"$0$0$0$10$59$"		 * Return the total number of references in this segment."
"ConcurrentReferenceHashMap.java:676"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:677"$1$0$0$5$31$"		public final int getCount() {"
"ConcurrentReferenceHashMap.java:678"$1$0$0$2$27$"			return this.count.get();"
"ConcurrentReferenceHashMap.java:679"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:680"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:681"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:682"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:683"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:684"$0$0$0$14$85$"	 * A reference to an {@link Entry} contained in the map. Implementations are usually"
"ConcurrentReferenceHashMap.java:685"$0$0$0$10$90$"	 * wrappers around specific Java reference implementations (e.g., {@link SoftReference})."
"ConcurrentReferenceHashMap.java:686"$0$0$0$6$27$"	 * @param <K> the key type"
"ConcurrentReferenceHashMap.java:687"$0$0$0$6$29$"	 * @param <V> the value type"
"ConcurrentReferenceHashMap.java:688"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:689"$0$0$0$5$38$"	protected interface Reference<K, V> {"
"ConcurrentReferenceHashMap.java:690"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:691"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:692"$0$0$0$15$86$"		 * Return the referenced entry, or {@code null} if the entry is no longer available."
"ConcurrentReferenceHashMap.java:693"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:694"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:695"$1$0$0$3$20$"		Entry<K, V> get();"
"ConcurrentReferenceHashMap.java:696"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:697"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:698"$0$0$0$7$39$"		 * Return the hash for the reference."
"ConcurrentReferenceHashMap.java:699"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:700"$1$0$0$2$16$"		int getHash();"
"ConcurrentReferenceHashMap.java:701"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:702"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:703"$0$0$0$13$69$"		 * Return the next reference in the chain, or {@code null} if none."
"ConcurrentReferenceHashMap.java:704"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:705"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:706"$1$0$0$3$28$"		Reference<K, V> getNext();"
"ConcurrentReferenceHashMap.java:707"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:708"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:709"$0$0$0$12$64$"		 * Release this entry and ensure that it will be returned from"
"ConcurrentReferenceHashMap.java:710"$0$0$0$3$45$"		 * {@code ReferenceManager#pollForPurge()}."
"ConcurrentReferenceHashMap.java:711"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:712"$0$0$0$2$17$"		void release();"
"ConcurrentReferenceHashMap.java:713"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:714"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:715"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:716"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:717"$0$0$0$5$23$"	 * A single map entry."
"ConcurrentReferenceHashMap.java:718"$0$0$0$6$27$"	 * @param <K> the key type"
"ConcurrentReferenceHashMap.java:719"$0$0$0$6$29$"	 * @param <V> the value type"
"ConcurrentReferenceHashMap.java:720"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:721"$0$0$0$10$70$"	protected static final class Entry<K, V> implements Map.Entry<K, V> {"
"ConcurrentReferenceHashMap.java:722"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:723"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:724"$0$0$0$4$22$"		private final K key;"
"ConcurrentReferenceHashMap.java:725"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:726"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:727"$0$0$0$4$27$"		private volatile V value;"
"ConcurrentReferenceHashMap.java:728"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:729"$0$0$0$8$52$"		public Entry(@Nullable K key, @Nullable V value) {"
"ConcurrentReferenceHashMap.java:730"$0$0$0$3$18$"			this.key = key;"
"ConcurrentReferenceHashMap.java:731"$0$0$0$3$22$"			this.value = value;"
"ConcurrentReferenceHashMap.java:732"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:733"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:734"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:735"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:736"$1$0$0$4$21$"		public K getKey() {"
"ConcurrentReferenceHashMap.java:737"$0$0$0$2$19$"			return this.key;"
"ConcurrentReferenceHashMap.java:738"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:739"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:740"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:741"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:742"$1$0$0$4$23$"		public V getValue() {"
"ConcurrentReferenceHashMap.java:743"$0$0$0$2$21$"			return this.value;"
"ConcurrentReferenceHashMap.java:744"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:745"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:746"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:747"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:748"$0$0$0$6$40$"		public V setValue(@Nullable V value) {"
"ConcurrentReferenceHashMap.java:749"$0$0$0$4$27$"			V previous = this.value;"
"ConcurrentReferenceHashMap.java:750"$0$0$0$3$22$"			this.value = value;"
"ConcurrentReferenceHashMap.java:751"$0$0$0$2$19$"			return previous;"
"ConcurrentReferenceHashMap.java:752"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:753"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:754"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:755"$0$0$0$4$28$"		public String toString() {"
"ConcurrentReferenceHashMap.java:756"$0$0$0$6$40$"			return (this.key + ""="" + this.value);"
"ConcurrentReferenceHashMap.java:757"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:758"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:759"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:760"$0$0$0$1$31$"		@SuppressWarnings(""rawtypes"")"
"ConcurrentReferenceHashMap.java:761"$0$0$0$7$55$"		public final boolean equals(@Nullable Object other) {"
"ConcurrentReferenceHashMap.java:762"$0$0$0$5$23$"			if (this == other) {"
"ConcurrentReferenceHashMap.java:763"$0$0$0$2$16$"				return true;"
"ConcurrentReferenceHashMap.java:764"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:765"$0$0$0$5$39$"			if (!(other instanceof Map.Entry)) {"
"ConcurrentReferenceHashMap.java:766"$0$0$0$2$17$"				return false;"
"ConcurrentReferenceHashMap.java:767"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:768"$0$0$0$5$44$"			Map.Entry otherEntry = (Map.Entry) other;"
"ConcurrentReferenceHashMap.java:769"$2$0$0$4$71$"			return (ObjectUtils.nullSafeEquals(getKey(), otherEntry.getKey()) &&"
"ConcurrentReferenceHashMap.java:770"$2$0$0$2$68$"					ObjectUtils.nullSafeEquals(getValue(), otherEntry.getValue()));"
"ConcurrentReferenceHashMap.java:771"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:772"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:773"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:774"$0$0$0$5$31$"		public final int hashCode() {"
"ConcurrentReferenceHashMap.java:775"$0$0$0$4$94$"			return (ObjectUtils.nullSafeHashCode(this.key) ^ ObjectUtils.nullSafeHashCode(this.value));"
"ConcurrentReferenceHashMap.java:776"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:777"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:778"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:779"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:780"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:781"$0$0$0$13$76$"	 * A task that can be {@link Segment#doTask run} against a {@link Segment}."
"ConcurrentReferenceHashMap.java:782"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:783"$0$0$0$5$33$"	private abstract class Task<T> {"
"ConcurrentReferenceHashMap.java:784"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:785"$0$0$0$4$44$"		private final EnumSet<TaskOption> options;"
"ConcurrentReferenceHashMap.java:786"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:787"$0$0$0$4$38$"		public Task(TaskOption... options) {"
"ConcurrentReferenceHashMap.java:788"$0$0$0$10$109$"			this.options = (options.length == 0 ? EnumSet.noneOf(TaskOption.class) : EnumSet.of(options[0], options));"
"ConcurrentReferenceHashMap.java:789"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:790"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:791"$0$0$0$5$47$"		public boolean hasOption(TaskOption option) {"
"ConcurrentReferenceHashMap.java:792"$0$0$0$2$40$"			return this.options.contains(option);"
"ConcurrentReferenceHashMap.java:793"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:794"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:795"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:796"$0$0$0$4$22$"		 * Execute the task."
"ConcurrentReferenceHashMap.java:797"$0$0$0$9$53$"		 * @param ref the found reference (or {@code null})"
"ConcurrentReferenceHashMap.java:798"$0$0$0$9$51$"		 * @param entry the found entry (or {@code null})"
"ConcurrentReferenceHashMap.java:799"$0$0$0$8$52$"		 * @param entries access to the underlying entries"
"ConcurrentReferenceHashMap.java:800"$0$0$0$7$35$"		 * @return the result of the task"
"ConcurrentReferenceHashMap.java:801"$0$0$0$4$36$"		 * @see #execute(Reference, Entry)"
"ConcurrentReferenceHashMap.java:802"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:803"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:804"$0$0$0$14$113$"		protected T execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry, @Nullable Entries<V> entries) {"
"ConcurrentReferenceHashMap.java:805"$0$0$0$3$30$"			return execute(ref, entry);"
"ConcurrentReferenceHashMap.java:806"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:807"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:808"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:809"$0$0$0$17$94$"		 * Convenience method that can be used for tasks that do not need access to {@link Entries}."
"ConcurrentReferenceHashMap.java:810"$0$0$0$9$53$"		 * @param ref the found reference (or {@code null})"
"ConcurrentReferenceHashMap.java:811"$0$0$0$9$51$"		 * @param entry the found entry (or {@code null})"
"ConcurrentReferenceHashMap.java:812"$0$0$0$7$35$"		 * @return the result of the task"
"ConcurrentReferenceHashMap.java:813"$0$0$0$5$45$"		 * @see #execute(Reference, Entry, Entries)"
"ConcurrentReferenceHashMap.java:814"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:815"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:816"$0$0$0$11$83$"		protected T execute(@Nullable Reference<K, V> ref, @Nullable Entry<K, V> entry) {"
"ConcurrentReferenceHashMap.java:817"$0$0$0$2$15$"			return null;"
"ConcurrentReferenceHashMap.java:818"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:819"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:820"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:821"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:822"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:823"$0$0$0$8$48$"	 * Various options supported by a {@code Task}."
"ConcurrentReferenceHashMap.java:824"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:825"$0$0$0$4$26$"	private enum TaskOption {"
"ConcurrentReferenceHashMap.java:826"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:827"$0$0$0$4$62$"		RESTRUCTURE_BEFORE, RESTRUCTURE_AFTER, SKIP_IF_EMPTY, RESIZE"
"ConcurrentReferenceHashMap.java:828"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:829"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:830"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:831"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:832"$0$0$0$9$79$"	 * Allows a task access to {@link ConcurrentReferenceHashMap.Segment} entries."
"ConcurrentReferenceHashMap.java:833"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:834"$0$0$0$4$31$"	private interface Entries<V> {"
"ConcurrentReferenceHashMap.java:835"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:836"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:837"$0$0$0$9$46$"		 * Add a new entry with the specified value."
"ConcurrentReferenceHashMap.java:838"$0$0$0$7$34$"		 * @param value the value to add"
"ConcurrentReferenceHashMap.java:839"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:840"$0$0$0$4$30$"		void add(@Nullable V value);"
"ConcurrentReferenceHashMap.java:841"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:842"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:843"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:844"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:845"$0$0$0$4$38$"	 * Internal entry-set implementation."
"ConcurrentReferenceHashMap.java:846"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:847"$0$0$0$7$62$"	private class EntrySet extends AbstractSet<Map.Entry<K, V>> {"
"ConcurrentReferenceHashMap.java:848"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:849"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:850"$0$0$0$5$47$"		public Iterator<Map.Entry<K, V>> iterator() {"
"ConcurrentReferenceHashMap.java:851"$0$0$0$3$30$"			return new EntryIterator();"
"ConcurrentReferenceHashMap.java:852"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:853"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:854"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:855"$0$0$0$6$47$"		public boolean contains(@Nullable Object o) {"
"ConcurrentReferenceHashMap.java:856"$0$0$0$6$38$"			if (o instanceof Map.Entry<?, ?>) {"
"ConcurrentReferenceHashMap.java:857"$0$0$0$7$48$"				Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;"
"ConcurrentReferenceHashMap.java:858"$2$0$0$6$106$"				Reference<K, V> ref = ConcurrentReferenceHashMap.this.getReference(entry.getKey(), Restructure.NEVER);"
"ConcurrentReferenceHashMap.java:859"$1$0$0$11$62$"				Entry<K, V> otherEntry = (ref != null ? ref.get() : null);"
"ConcurrentReferenceHashMap.java:860"$0$0$0$5$29$"				if (otherEntry != null) {"
"ConcurrentReferenceHashMap.java:861"$2$0$0$3$85$"					return ObjectUtils.nullSafeEquals(otherEntry.getValue(), otherEntry.getValue());"
"ConcurrentReferenceHashMap.java:862"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:863"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:864"$0$0$0$2$16$"			return false;"
"ConcurrentReferenceHashMap.java:865"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:866"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:867"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:868"$0$0$0$5$35$"		public boolean remove(Object o) {"
"ConcurrentReferenceHashMap.java:869"$0$0$0$6$38$"			if (o instanceof Map.Entry<?, ?>) {"
"ConcurrentReferenceHashMap.java:870"$0$0$0$7$48$"				Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;"
"ConcurrentReferenceHashMap.java:871"$2$0$0$3$84$"				return ConcurrentReferenceHashMap.this.remove(entry.getKey(), entry.getValue());"
"ConcurrentReferenceHashMap.java:872"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:873"$0$0$0$2$16$"			return false;"
"ConcurrentReferenceHashMap.java:874"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:875"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:876"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:877"$0$0$0$4$21$"		public int size() {"
"ConcurrentReferenceHashMap.java:878"$0$0$0$2$49$"			return ConcurrentReferenceHashMap.this.size();"
"ConcurrentReferenceHashMap.java:879"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:880"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:881"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:882"$0$0$0$4$23$"		public void clear() {"
"ConcurrentReferenceHashMap.java:883"$0$0$0$1$43$"			ConcurrentReferenceHashMap.this.clear();"
"ConcurrentReferenceHashMap.java:884"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:885"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:886"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:887"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:888"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:889"$0$0$0$5$43$"	 * Internal entry iterator implementation."
"ConcurrentReferenceHashMap.java:890"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:891"$0$0$0$7$67$"	private class EntryIterator implements Iterator<Map.Entry<K, V>> {"
"ConcurrentReferenceHashMap.java:892"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:893"$0$0$0$3$27$"		private int segmentIndex;"
"ConcurrentReferenceHashMap.java:894"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:895"$0$0$0$3$29$"		private int referenceIndex;"
"ConcurrentReferenceHashMap.java:896"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:897"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:898"$0$0$0$4$39$"		private Reference<K, V>[] references;"
"ConcurrentReferenceHashMap.java:899"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:900"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:901"$0$0$0$4$36$"		private Reference<K, V> reference;"
"ConcurrentReferenceHashMap.java:902"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:903"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:904"$0$0$0$4$27$"		private Entry<K, V> next;"
"ConcurrentReferenceHashMap.java:905"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:906"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:907"$0$0$0$4$27$"		private Entry<K, V> last;"
"ConcurrentReferenceHashMap.java:908"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:909"$0$0$0$3$26$"		public EntryIterator() {"
"ConcurrentReferenceHashMap.java:910"$0$0$0$1$23$"			moveToNextSegment();"
"ConcurrentReferenceHashMap.java:911"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:912"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:913"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:914"$0$0$0$4$28$"		public boolean hasNext() {"
"ConcurrentReferenceHashMap.java:915"$1$0$0$1$24$"			getNextIfNecessary();"
"ConcurrentReferenceHashMap.java:916"$0$0$0$4$30$"			return (this.next != null);"
"ConcurrentReferenceHashMap.java:917"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:918"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:919"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:920"$0$0$0$5$29$"		public Entry<K, V> next() {"
"ConcurrentReferenceHashMap.java:921"$1$0$0$1$24$"			getNextIfNecessary();"
"ConcurrentReferenceHashMap.java:922"$0$0$0$5$27$"			if (this.next == null) {"
"ConcurrentReferenceHashMap.java:923"$0$0$0$3$39$"				throw new NoSuchElementException();"
"ConcurrentReferenceHashMap.java:924"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:925"$0$0$0$3$25$"			this.last = this.next;"
"ConcurrentReferenceHashMap.java:926"$0$0$0$3$20$"			this.next = null;"
"ConcurrentReferenceHashMap.java:927"$0$0$0$2$20$"			return this.last;"
"ConcurrentReferenceHashMap.java:928"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:929"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:930"$1$0$0$4$37$"		private void getNextIfNecessary() {"
"ConcurrentReferenceHashMap.java:931"$0$0$0$5$30$"			while (this.next == null) {"
"ConcurrentReferenceHashMap.java:932"$0$0$0$1$26$"				moveToNextReference();"
"ConcurrentReferenceHashMap.java:933"$0$0$0$5$33$"				if (this.reference == null) {"
"ConcurrentReferenceHashMap.java:934"$0$0$0$1$12$"					return;"
"ConcurrentReferenceHashMap.java:935"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:936"$1$0$0$3$37$"				this.next = this.reference.get();"
"ConcurrentReferenceHashMap.java:937"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:938"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:939"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:940"$0$0$0$4$38$"		private void moveToNextReference() {"
"ConcurrentReferenceHashMap.java:941"$0$0$0$5$32$"			if (this.reference != null) {"
"ConcurrentReferenceHashMap.java:942"$1$0$0$3$46$"				this.reference = this.reference.getNext();"
"ConcurrentReferenceHashMap.java:943"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:944"$0$0$0$9$62$"			while (this.reference == null && this.references != null) {"
"ConcurrentReferenceHashMap.java:945"$0$0$0$5$56$"				if (this.referenceIndex >= this.references.length) {"
"ConcurrentReferenceHashMap.java:946"$0$0$0$1$25$"					moveToNextSegment();"
"ConcurrentReferenceHashMap.java:947"$0$0$0$3$29$"					this.referenceIndex = 0;"
"ConcurrentReferenceHashMap.java:948"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:949"$0$0$0$2$10$"				else {"
"ConcurrentReferenceHashMap.java:950"$0$0$0$3$59$"					this.reference = this.references[this.referenceIndex];"
"ConcurrentReferenceHashMap.java:951"$0$0$0$1$27$"					this.referenceIndex++;"
"ConcurrentReferenceHashMap.java:952"$0$0$0$1$5$"				}"
"ConcurrentReferenceHashMap.java:953"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:954"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:955"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:956"$0$0$0$4$36$"		private void moveToNextSegment() {"
"ConcurrentReferenceHashMap.java:957"$0$0$0$3$25$"			this.reference = null;"
"ConcurrentReferenceHashMap.java:958"$0$0$0$3$26$"			this.references = null;"
"ConcurrentReferenceHashMap.java:959"$0$0$0$5$77$"			if (this.segmentIndex < ConcurrentReferenceHashMap.this.segments.length) {"
"ConcurrentReferenceHashMap.java:960"$0$0$0$3$93$"				this.references = ConcurrentReferenceHashMap.this.segments[this.segmentIndex].references;"
"ConcurrentReferenceHashMap.java:961"$0$0$0$1$24$"				this.segmentIndex++;"
"ConcurrentReferenceHashMap.java:962"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:963"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:964"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:965"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:966"$0$0$0$4$24$"		public void remove() {"
"ConcurrentReferenceHashMap.java:967"$0$0$0$7$59$"			Assert.state(this.last != null, ""No element to remove"");"
"ConcurrentReferenceHashMap.java:968"$1$0$0$1$62$"			ConcurrentReferenceHashMap.this.remove(this.last.getKey());"
"ConcurrentReferenceHashMap.java:969"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:970"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:971"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:972"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:973"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:974"$0$0$0$9$53$"	 * The types of restructuring that can be performed."
"ConcurrentReferenceHashMap.java:975"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:976"$0$0$0$4$29$"	protected enum Restructure {"
"ConcurrentReferenceHashMap.java:977"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:978"$0$0$0$2$23$"		WHEN_NECESSARY, NEVER"
"ConcurrentReferenceHashMap.java:979"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:980"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:981"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:982"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:983"$0$0$0$9$63$"	 * Strategy class used to manage {@link Reference References}."
"ConcurrentReferenceHashMap.java:984"$0$0$0$14$85$"	 * This class can be overridden if alternative reference types need to be supported."
"ConcurrentReferenceHashMap.java:985"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:986"$0$0$0$4$35$"	protected class ReferenceManager {"
"ConcurrentReferenceHashMap.java:987"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:988"$0$0$0$8$75$"		private final ReferenceQueue<Entry<K, V>> queue = new ReferenceQueue<>();"
"ConcurrentReferenceHashMap.java:989"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:990"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:991"$0$0$0$10$59$"		 * Factory method used to create a new {@link Reference}."
"ConcurrentReferenceHashMap.java:992"$0$0$0$9$54$"		 * @param entry the entry contained in the reference"
"ConcurrentReferenceHashMap.java:993"$0$0$0$5$25$"		 * @param hash the hash"
"ConcurrentReferenceHashMap.java:994"$0$0$0$14$73$"		 * @param next the next reference in the chain, or {@code null} if none"
"ConcurrentReferenceHashMap.java:995"$0$0$0$6$36$"		 * @return a new {@link Reference}"
"ConcurrentReferenceHashMap.java:996"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:997"$0$0$0$13$103$"		public Reference<K, V> createReference(Entry<K, V> entry, int hash, @Nullable Reference<K, V> next) {"
"ConcurrentReferenceHashMap.java:998"$0$0$0$5$77$"			if (ConcurrentReferenceHashMap.this.referenceType == ReferenceType.WEAK) {"
"ConcurrentReferenceHashMap.java:999"$0$0$0$6$67$"				return new WeakEntryReference<>(entry, hash, next, this.queue);"
"ConcurrentReferenceHashMap.java:1000"$0$0$0$1$4$"			}"
"ConcurrentReferenceHashMap.java:1001"$0$0$0$6$66$"			return new SoftEntryReference<>(entry, hash, next, this.queue);"
"ConcurrentReferenceHashMap.java:1002"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1003"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1004"$0$0$0$1$5$"		/**"
"ConcurrentReferenceHashMap.java:1005"$0$0$0$15$84$"		 * Return any reference that has been garbage collected and can be purged from the"
"ConcurrentReferenceHashMap.java:1006"$0$0$0$12$77$"		 * underlying structure or {@code null} if no references need purging. This"
"ConcurrentReferenceHashMap.java:1007"$0$0$0$13$75$"		 * method must be thread safe and ideally should not block when returning"
"ConcurrentReferenceHashMap.java:1008"$0$0$0$11$68$"		 * {@code null}. References should be returned once and only once."
"ConcurrentReferenceHashMap.java:1009"$0$0$0$9$49$"		 * @return a reference to purge or {@code null}"
"ConcurrentReferenceHashMap.java:1010"$0$0$0$1$5$"		 */"
"ConcurrentReferenceHashMap.java:1011"$0$0$0$1$32$"		@SuppressWarnings(""unchecked"")"
"ConcurrentReferenceHashMap.java:1012"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:1013"$0$0$0$5$41$"		public Reference<K, V> pollForPurge() {"
"ConcurrentReferenceHashMap.java:1014"$0$0$0$4$46$"			return (Reference<K, V>) this.queue.poll();"
"ConcurrentReferenceHashMap.java:1015"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1016"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:1017"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1018"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1019"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:1020"$0$0$0$9$87$"	 * Internal {@link Reference} implementation for {@link SoftReference SoftReferences}."
"ConcurrentReferenceHashMap.java:1021"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:1022"$0$0$0$13$116$"	private static final class SoftEntryReference<K, V> extends SoftReference<Entry<K, V>> implements Reference<K, V> {"
"ConcurrentReferenceHashMap.java:1023"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1024"$0$0$0$4$25$"		private final int hash;"
"ConcurrentReferenceHashMap.java:1025"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1026"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:1027"$0$0$0$5$46$"		private final Reference<K, V> nextReference;"
"ConcurrentReferenceHashMap.java:1028"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1029"$0$0$0$10$88$"		public SoftEntryReference(Entry<K, V> entry, int hash, @Nullable Reference<K, V> next,"
"ConcurrentReferenceHashMap.java:1030"$0$0$0$4$40$"				ReferenceQueue<Entry<K, V>> queue) {"
"ConcurrentReferenceHashMap.java:1031"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1032"$0$0$0$2$23$"			super(entry, queue);"
"ConcurrentReferenceHashMap.java:1033"$0$0$0$3$20$"			this.hash = hash;"
"ConcurrentReferenceHashMap.java:1034"$0$0$0$3$29$"			this.nextReference = next;"
"ConcurrentReferenceHashMap.java:1035"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1036"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1037"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:1038"$1$0$0$4$24$"		public int getHash() {"
"ConcurrentReferenceHashMap.java:1039"$0$0$0$2$20$"			return this.hash;"
"ConcurrentReferenceHashMap.java:1040"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1041"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1042"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:1043"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:1044"$1$0$0$5$36$"		public Reference<K, V> getNext() {"
"ConcurrentReferenceHashMap.java:1045"$0$0$0$2$29$"			return this.nextReference;"
"ConcurrentReferenceHashMap.java:1046"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1047"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1048"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:1049"$0$0$0$4$25$"		public void release() {"
"ConcurrentReferenceHashMap.java:1050"$0$0$0$1$13$"			enqueue();"
"ConcurrentReferenceHashMap.java:1051"$0$0$0$1$11$"			clear();"
"ConcurrentReferenceHashMap.java:1052"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1053"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:1054"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1055"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1056"$0$0$0$1$4$"	/**"
"ConcurrentReferenceHashMap.java:1057"$0$0$0$9$87$"	 * Internal {@link Reference} implementation for {@link WeakReference WeakReferences}."
"ConcurrentReferenceHashMap.java:1058"$0$0$0$1$4$"	 */"
"ConcurrentReferenceHashMap.java:1059"$0$0$0$13$116$"	private static final class WeakEntryReference<K, V> extends WeakReference<Entry<K, V>> implements Reference<K, V> {"
"ConcurrentReferenceHashMap.java:1060"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1061"$0$0$0$4$25$"		private final int hash;"
"ConcurrentReferenceHashMap.java:1062"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1063"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:1064"$0$0$0$5$46$"		private final Reference<K, V> nextReference;"
"ConcurrentReferenceHashMap.java:1065"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1066"$0$0$0$10$88$"		public WeakEntryReference(Entry<K, V> entry, int hash, @Nullable Reference<K, V> next,"
"ConcurrentReferenceHashMap.java:1067"$0$0$0$4$40$"				ReferenceQueue<Entry<K, V>> queue) {"
"ConcurrentReferenceHashMap.java:1068"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1069"$0$0$0$2$23$"			super(entry, queue);"
"ConcurrentReferenceHashMap.java:1070"$0$0$0$3$20$"			this.hash = hash;"
"ConcurrentReferenceHashMap.java:1071"$0$0$0$3$29$"			this.nextReference = next;"
"ConcurrentReferenceHashMap.java:1072"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1073"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1074"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:1075"$1$0$0$4$24$"		public int getHash() {"
"ConcurrentReferenceHashMap.java:1076"$0$0$0$2$20$"			return this.hash;"
"ConcurrentReferenceHashMap.java:1077"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1078"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1079"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:1080"$0$0$0$1$11$"		@Nullable"
"ConcurrentReferenceHashMap.java:1081"$1$0$0$5$36$"		public Reference<K, V> getNext() {"
"ConcurrentReferenceHashMap.java:1082"$0$0$0$2$29$"			return this.nextReference;"
"ConcurrentReferenceHashMap.java:1083"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1084"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1085"$0$0$0$1$11$"		@Override"
"ConcurrentReferenceHashMap.java:1086"$0$0$0$4$25$"		public void release() {"
"ConcurrentReferenceHashMap.java:1087"$0$0$0$1$13$"			enqueue();"
"ConcurrentReferenceHashMap.java:1088"$0$0$0$1$11$"			clear();"
"ConcurrentReferenceHashMap.java:1089"$0$0$0$1$3$"		}"
"ConcurrentReferenceHashMap.java:1090"$0$0$0$1$2$"	}"
"ConcurrentReferenceHashMap.java:1091"$0$0$0$0$0$""
"ConcurrentReferenceHashMap.java:1092"$0$0$0$1$1$"}"
"StaxEventHandler.java:1"$0$0$0$1$2$"/*"
"StaxEventHandler.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"StaxEventHandler.java:3"$0$0$0$1$2$" *"
"StaxEventHandler.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StaxEventHandler.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StaxEventHandler.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StaxEventHandler.java:7"$0$0$0$1$2$" *"
"StaxEventHandler.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StaxEventHandler.java:9"$0$0$0$1$2$" *"
"StaxEventHandler.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StaxEventHandler.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StaxEventHandler.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StaxEventHandler.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StaxEventHandler.java:14"$0$0$0$5$33$" * limitations under the License."
"StaxEventHandler.java:15"$0$0$0$1$3$" */"
"StaxEventHandler.java:16"$0$0$0$0$0$""
"StaxEventHandler.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"StaxEventHandler.java:18"$0$0$0$0$0$""
"StaxEventHandler.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"StaxEventHandler.java:20"$0$0$0$2$22$"import java.util.List;"
"StaxEventHandler.java:21"$0$0$0$2$21$"import java.util.Map;"
"StaxEventHandler.java:22"$0$0$0$0$0$""
"StaxEventHandler.java:23"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"StaxEventHandler.java:24"$0$0$0$2$33$"import javax.xml.stream.Location;"
"StaxEventHandler.java:25"$0$0$0$2$40$"import javax.xml.stream.XMLEventFactory;"
"StaxEventHandler.java:26"$0$0$0$2$39$"import javax.xml.stream.XMLEventWriter;"
"StaxEventHandler.java:27"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"StaxEventHandler.java:28"$0$0$0$2$41$"import javax.xml.stream.events.Attribute;"
"StaxEventHandler.java:29"$0$0$0$2$41$"import javax.xml.stream.events.Namespace;"
"StaxEventHandler.java:30"$0$0$0$0$0$""
"StaxEventHandler.java:31"$0$0$0$2$30$"import org.xml.sax.Attributes;"
"StaxEventHandler.java:32"$0$0$0$2$27$"import org.xml.sax.Locator;"
"StaxEventHandler.java:33"$0$0$0$2$38$"import org.xml.sax.ext.LexicalHandler;"
"StaxEventHandler.java:34"$0$0$0$0$0$""
"StaxEventHandler.java:35"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StaxEventHandler.java:36"$0$0$0$0$0$""
"StaxEventHandler.java:37"$0$0$0$1$3$"/**"
"StaxEventHandler.java:38"$0$0$0$7$68$" * SAX {@link org.xml.sax.ContentHandler} and {@link LexicalHandler}"
"StaxEventHandler.java:39"$0$0$0$7$67$" * that writes to a {@link javax.xml.stream.util.XMLEventConsumer}."
"StaxEventHandler.java:40"$0$0$0$1$2$" *"
"StaxEventHandler.java:41"$0$0$0$4$24$" * @author Arjen Poutsma"
"StaxEventHandler.java:42"$0$0$0$3$15$" * @since 4.0.3"
"StaxEventHandler.java:43"$0$0$0$1$3$" */"
"StaxEventHandler.java:44"$0$0$0$5$52$"class StaxEventHandler extends AbstractStaxHandler {"
"StaxEventHandler.java:45"$0$0$0$0$0$""
"StaxEventHandler.java:46"$0$0$0$4$44$"	private final XMLEventFactory eventFactory;"
"StaxEventHandler.java:47"$0$0$0$0$0$""
"StaxEventHandler.java:48"$0$0$0$4$42$"	private final XMLEventWriter eventWriter;"
"StaxEventHandler.java:49"$0$0$0$0$0$""
"StaxEventHandler.java:50"$0$0$0$0$0$""
"StaxEventHandler.java:51"$0$0$0$1$4$"	/**"
"StaxEventHandler.java:52"$0$0$0$13$86$"	 * Construct a new instance of the {@code StaxEventContentHandler} that writes to the"
"StaxEventHandler.java:53"$0$0$0$11$84$"	 * given {@code XMLEventWriter}. A default {@code XMLEventFactory} will be created."
"StaxEventHandler.java:54"$0$0$0$9$52$"	 * @param eventWriter the writer to write events to"
"StaxEventHandler.java:55"$0$0$0$1$4$"	 */"
"StaxEventHandler.java:56"$0$0$0$4$54$"	public StaxEventHandler(XMLEventWriter eventWriter) {"
"StaxEventHandler.java:57"$0$0$0$3$52$"		this.eventFactory = XMLEventFactory.newInstance();"
"StaxEventHandler.java:58"$0$0$0$3$33$"		this.eventWriter = eventWriter;"
"StaxEventHandler.java:59"$0$0$0$1$2$"	}"
"StaxEventHandler.java:60"$0$0$0$0$0$""
"StaxEventHandler.java:61"$0$0$0$1$4$"	/**"
"StaxEventHandler.java:62"$0$0$0$13$87$"	 * Construct a new instance of the {@code StaxEventContentHandler} that uses the given"
"StaxEventHandler.java:63"$0$0$0$13$84$"	 * event factory to create events and writes to the given {@code XMLEventConsumer}."
"StaxEventHandler.java:64"$0$0$0$9$52$"	 * @param eventWriter the writer to write events to"
"StaxEventHandler.java:65"$0$0$0$9$52$"	 * @param factory the factory used to create events"
"StaxEventHandler.java:66"$0$0$0$1$4$"	 */"
"StaxEventHandler.java:67"$0$0$0$6$79$"	public StaxEventHandler(XMLEventWriter eventWriter, XMLEventFactory factory) {"
"StaxEventHandler.java:68"$0$0$0$3$30$"		this.eventFactory = factory;"
"StaxEventHandler.java:69"$0$0$0$3$33$"		this.eventWriter = eventWriter;"
"StaxEventHandler.java:70"$0$0$0$1$2$"	}"
"StaxEventHandler.java:71"$0$0$0$0$0$""
"StaxEventHandler.java:72"$0$0$0$0$0$""
"StaxEventHandler.java:73"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:74"$0$0$0$6$60$"	public void setDocumentLocator(@Nullable Locator locator) {"
"StaxEventHandler.java:75"$0$0$0$5$24$"		if (locator != null) {"
"StaxEventHandler.java:76"$0$0$0$2$70$"			this.eventFactory.setLocation(new LocatorLocationAdapter(locator));"
"StaxEventHandler.java:77"$0$0$0$1$3$"		}"
"StaxEventHandler.java:78"$0$0$0$1$2$"	}"
"StaxEventHandler.java:79"$0$0$0$0$0$""
"StaxEventHandler.java:80"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:81"$0$0$0$6$67$"	protected void startDocumentInternal() throws XMLStreamException {"
"StaxEventHandler.java:82"$0$0$0$1$64$"		this.eventWriter.add(this.eventFactory.createStartDocument());"
"StaxEventHandler.java:83"$0$0$0$1$2$"	}"
"StaxEventHandler.java:84"$0$0$0$0$0$""
"StaxEventHandler.java:85"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:86"$0$0$0$6$65$"	protected void endDocumentInternal() throws XMLStreamException {"
"StaxEventHandler.java:87"$0$0$0$1$62$"		this.eventWriter.add(this.eventFactory.createEndDocument());"
"StaxEventHandler.java:88"$0$0$0$1$2$"	}"
"StaxEventHandler.java:89"$0$0$0$0$0$""
"StaxEventHandler.java:90"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:91"$0$0$0$6$65$"	protected void startElementInternal(QName name, Attributes atts,"
"StaxEventHandler.java:92"$0$0$0$6$68$"			Map<String, String> namespaceMapping) throws XMLStreamException {"
"StaxEventHandler.java:93"$0$0$0$0$0$""
"StaxEventHandler.java:94"$1$0$0$4$51$"		List<Attribute> attributes = getAttributes(atts);"
"StaxEventHandler.java:95"$1$0$0$4$63$"		List<Namespace> namespaces = getNamespaces(namespaceMapping);"
"StaxEventHandler.java:96"$0$0$0$1$23$"		this.eventWriter.add("
"StaxEventHandler.java:97"$0$0$0$3$94$"				this.eventFactory.createStartElement(name, attributes.iterator(), namespaces.iterator()));"
"StaxEventHandler.java:98"$0$0$0$0$0$""
"StaxEventHandler.java:99"$0$0$0$1$2$"	}"
"StaxEventHandler.java:100"$0$0$0$0$0$""
"StaxEventHandler.java:101"$1$0$0$6$79$"	private List<Namespace> getNamespaces(Map<String, String> namespaceMappings) {"
"StaxEventHandler.java:102"$0$0$0$5$69$"		List<Namespace> result = new ArrayList<>(namespaceMappings.size());"
"StaxEventHandler.java:103"$0$0$0$3$53$"		namespaceMappings.forEach((prefix, namespaceUri) ->"
"StaxEventHandler.java:104"$0$0$0$2$73$"				result.add(this.eventFactory.createNamespace(prefix, namespaceUri)));"
"StaxEventHandler.java:105"$0$0$0$2$16$"		return result;"
"StaxEventHandler.java:106"$0$0$0$1$2$"	}"
"StaxEventHandler.java:107"$0$0$0$0$0$""
"StaxEventHandler.java:108"$1$0$0$5$63$"	private List<Attribute> getAttributes(Attributes attributes) {"
"StaxEventHandler.java:109"$1$0$0$4$42$"		int attrLength = attributes.getLength();"
"StaxEventHandler.java:110"$0$0$0$5$55$"		List<Attribute> result = new ArrayList<>(attrLength);"
"StaxEventHandler.java:111"$0$0$0$10$40$"		for (int i = 0; i < attrLength; i++) {"
"StaxEventHandler.java:112"$2$0$0$5$74$"			QName attrName = toQName(attributes.getURI(i), attributes.getQName(i));"
"StaxEventHandler.java:113"$0$0$0$3$43$"			if (!isNamespaceDeclaration(attrName)) {"
"StaxEventHandler.java:114"$1$0$0$2$84$"				result.add(this.eventFactory.createAttribute(attrName, attributes.getValue(i)));"
"StaxEventHandler.java:115"$0$0$0$1$4$"			}"
"StaxEventHandler.java:116"$0$0$0$1$3$"		}"
"StaxEventHandler.java:117"$0$0$0$2$16$"		return result;"
"StaxEventHandler.java:118"$0$0$0$1$2$"	}"
"StaxEventHandler.java:119"$0$0$0$0$0$""
"StaxEventHandler.java:120"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:121"$0$0$0$10$112$"	protected void endElementInternal(QName name, Map<String, String> namespaceMapping) throws XMLStreamException {"
"StaxEventHandler.java:122"$1$0$0$4$63$"		List<Namespace> namespaces = getNamespaces(namespaceMapping);"
"StaxEventHandler.java:123"$0$0$0$2$88$"		this.eventWriter.add(this.eventFactory.createEndElement(name, namespaces.iterator()));"
"StaxEventHandler.java:124"$0$0$0$1$2$"	}"
"StaxEventHandler.java:125"$0$0$0$0$0$""
"StaxEventHandler.java:126"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:127"$0$0$0$7$75$"	protected void charactersInternal(String data) throws XMLStreamException {"
"StaxEventHandler.java:128"$0$0$0$1$65$"		this.eventWriter.add(this.eventFactory.createCharacters(data));"
"StaxEventHandler.java:129"$0$0$0$1$2$"	}"
"StaxEventHandler.java:130"$0$0$0$0$0$""
"StaxEventHandler.java:131"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:132"$0$0$0$7$70$"	protected void cDataInternal(String data) throws XMLStreamException {"
"StaxEventHandler.java:133"$0$0$0$1$60$"		this.eventWriter.add(this.eventFactory.createCData(data));"
"StaxEventHandler.java:134"$0$0$0$1$2$"	}"
"StaxEventHandler.java:135"$0$0$0$0$0$""
"StaxEventHandler.java:136"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:137"$0$0$0$7$84$"	protected void ignorableWhitespaceInternal(String data) throws XMLStreamException {"
"StaxEventHandler.java:138"$0$0$0$1$69$"		this.eventWriter.add(this.eventFactory.createIgnorableSpace(data));"
"StaxEventHandler.java:139"$0$0$0$1$2$"	}"
"StaxEventHandler.java:140"$0$0$0$0$0$""
"StaxEventHandler.java:141"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:142"$1$0$0$9$101$"	protected void processingInstructionInternal(String target, String data) throws XMLStreamException {"
"StaxEventHandler.java:143"$1$0$0$2$84$"		this.eventWriter.add(this.eventFactory.createProcessingInstruction(target, data));"
"StaxEventHandler.java:144"$0$0$0$1$2$"	}"
"StaxEventHandler.java:145"$0$0$0$0$0$""
"StaxEventHandler.java:146"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:147"$0$0$0$7$67$"	protected void dtdInternal(String dtd) throws XMLStreamException {"
"StaxEventHandler.java:148"$0$0$0$1$57$"		this.eventWriter.add(this.eventFactory.createDTD(dtd));"
"StaxEventHandler.java:149"$0$0$0$1$2$"	}"
"StaxEventHandler.java:150"$0$0$0$0$0$""
"StaxEventHandler.java:151"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:152"$0$0$0$7$75$"	protected void commentInternal(String comment) throws XMLStreamException {"
"StaxEventHandler.java:153"$0$0$0$1$65$"		this.eventWriter.add(this.eventFactory.createComment(comment));"
"StaxEventHandler.java:154"$0$0$0$1$2$"	}"
"StaxEventHandler.java:155"$0$0$0$0$0$""
"StaxEventHandler.java:156"$0$0$1$2$11$"	// Ignored"
"StaxEventHandler.java:157"$0$0$0$1$10$"	@Override"
"StaxEventHandler.java:158"$0$0$0$5$52$"	protected void skippedEntityInternal(String name) {"
"StaxEventHandler.java:159"$0$0$0$1$2$"	}"
"StaxEventHandler.java:160"$0$0$0$0$0$""
"StaxEventHandler.java:161"$0$0$0$0$0$""
"StaxEventHandler.java:162"$0$0$0$8$72$"	private static final class LocatorLocationAdapter implements Location {"
"StaxEventHandler.java:163"$0$0$0$0$0$""
"StaxEventHandler.java:164"$0$0$0$4$32$"		private final Locator locator;"
"StaxEventHandler.java:165"$0$0$0$0$0$""
"StaxEventHandler.java:166"$0$0$0$4$50$"		public LocatorLocationAdapter(Locator locator) {"
"StaxEventHandler.java:167"$0$0$0$3$26$"			this.locator = locator;"
"StaxEventHandler.java:168"$0$0$0$1$3$"		}"
"StaxEventHandler.java:169"$0$0$0$0$0$""
"StaxEventHandler.java:170"$0$0$0$1$11$"		@Override"
"StaxEventHandler.java:171"$1$0$0$4$30$"		public int getLineNumber() {"
"StaxEventHandler.java:172"$1$0$0$2$39$"			return this.locator.getLineNumber();"
"StaxEventHandler.java:173"$0$0$0$1$3$"		}"
"StaxEventHandler.java:174"$0$0$0$0$0$""
"StaxEventHandler.java:175"$0$0$0$1$11$"		@Override"
"StaxEventHandler.java:176"$1$0$0$4$32$"		public int getColumnNumber() {"
"StaxEventHandler.java:177"$1$0$0$2$41$"			return this.locator.getColumnNumber();"
"StaxEventHandler.java:178"$0$0$0$1$3$"		}"
"StaxEventHandler.java:179"$0$0$0$0$0$""
"StaxEventHandler.java:180"$0$0$0$1$11$"		@Override"
"StaxEventHandler.java:181"$1$0$0$4$35$"		public int getCharacterOffset() {"
"StaxEventHandler.java:182"$0$0$0$2$13$"			return -1;"
"StaxEventHandler.java:183"$0$0$0$1$3$"		}"
"StaxEventHandler.java:184"$0$0$0$0$0$""
"StaxEventHandler.java:185"$0$0$0$1$11$"		@Override"
"StaxEventHandler.java:186"$1$0$0$4$31$"		public String getPublicId() {"
"StaxEventHandler.java:187"$1$0$0$2$37$"			return this.locator.getPublicId();"
"StaxEventHandler.java:188"$0$0$0$1$3$"		}"
"StaxEventHandler.java:189"$0$0$0$0$0$""
"StaxEventHandler.java:190"$0$0$0$1$11$"		@Override"
"StaxEventHandler.java:191"$1$0$0$4$31$"		public String getSystemId() {"
"StaxEventHandler.java:192"$1$0$0$2$37$"			return this.locator.getSystemId();"
"StaxEventHandler.java:193"$0$0$0$1$3$"		}"
"StaxEventHandler.java:194"$0$0$0$1$2$"	}"
"StaxEventHandler.java:195"$0$0$0$0$0$""
"StaxEventHandler.java:196"$0$0$0$1$1$"}"
"ResolvableType.java:1"$0$0$0$1$2$"/*"
"ResolvableType.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ResolvableType.java:3"$0$0$0$1$2$" *"
"ResolvableType.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResolvableType.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResolvableType.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResolvableType.java:7"$0$0$0$1$2$" *"
"ResolvableType.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResolvableType.java:9"$0$0$0$1$2$" *"
"ResolvableType.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResolvableType.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResolvableType.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResolvableType.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResolvableType.java:14"$0$0$0$5$33$" * limitations under the License."
"ResolvableType.java:15"$0$0$0$1$3$" */"
"ResolvableType.java:16"$0$0$0$0$0$""
"ResolvableType.java:17"$0$0$0$2$33$"package org.springframework.core;"
"ResolvableType.java:18"$0$0$0$0$0$""
"ResolvableType.java:19"$0$0$0$2$28$"import java.io.Serializable;"
"ResolvableType.java:20"$0$0$0$2$31$"import java.lang.reflect.Array;"
"ResolvableType.java:21"$0$0$0$2$37$"import java.lang.reflect.Constructor;"
"ResolvableType.java:22"$0$0$0$2$31$"import java.lang.reflect.Field;"
"ResolvableType.java:23"$0$0$0$2$42$"import java.lang.reflect.GenericArrayType;"
"ResolvableType.java:24"$0$0$0$2$32$"import java.lang.reflect.Method;"
"ResolvableType.java:25"$0$0$0$2$43$"import java.lang.reflect.ParameterizedType;"
"ResolvableType.java:26"$0$0$0$2$30$"import java.lang.reflect.Type;"
"ResolvableType.java:27"$0$0$0$2$38$"import java.lang.reflect.TypeVariable;"
"ResolvableType.java:28"$0$0$0$2$38$"import java.lang.reflect.WildcardType;"
"ResolvableType.java:29"$0$0$0$2$24$"import java.util.Arrays;"
"ResolvableType.java:30"$0$0$0$2$28$"import java.util.Collection;"
"ResolvableType.java:31"$0$0$0$2$33$"import java.util.IdentityHashMap;"
"ResolvableType.java:32"$0$0$0$2$21$"import java.util.Map;"
"ResolvableType.java:33"$0$0$0$2$30$"import java.util.StringJoiner;"
"ResolvableType.java:34"$0$0$0$0$0$""
"ResolvableType.java:35"$0$0$0$2$74$"import org.springframework.core.SerializableTypeWrapper.FieldTypeProvider;"
"ResolvableType.java:36"$0$0$0$2$84$"import org.springframework.core.SerializableTypeWrapper.MethodParameterTypeProvider;"
"ResolvableType.java:37"$0$0$0$2$69$"import org.springframework.core.SerializableTypeWrapper.TypeProvider;"
"ResolvableType.java:38"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResolvableType.java:39"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ResolvableType.java:40"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"ResolvableType.java:41"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"ResolvableType.java:42"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"ResolvableType.java:43"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"ResolvableType.java:44"$0$0$0$0$0$""
"ResolvableType.java:45"$0$0$0$1$3$"/**"
"ResolvableType.java:46"$0$0$0$9$74$" * Encapsulates a Java {@link java.lang.reflect.Type}, providing access to"
"ResolvableType.java:47"$2$0$0$8$79$" * {@link #getSuperType() supertypes}, {@link #getInterfaces() interfaces}, and"
"ResolvableType.java:48"$1$0$0$11$86$" * {@link #getGeneric(int...) generic parameters} along with the ability to ultimately"
"ResolvableType.java:49"$0$0$0$8$59$" * {@link #resolve() resolve} to a {@link java.lang.Class}."
"ResolvableType.java:50"$0$0$0$1$2$" *"
"ResolvableType.java:51"$0$0$0$10$83$" * <p>{@code ResolvableTypes} may be obtained from {@link #forField(Field) fields},"
"ResolvableType.java:52"$0$0$0$6$62$" * {@link #forMethodParameter(Method, int) method parameters},"
"ResolvableType.java:53"$0$0$0$6$57$" * {@link #forMethodReturnType(Method) method returns} or"
"ResolvableType.java:54"$0$0$0$12$86$" * {@link #forClass(Class) classes}. Most methods on this class will themselves return"
"ResolvableType.java:55"$0$0$0$9$81$" * {@link ResolvableType ResolvableTypes}, allowing easy navigation. For example:"
"ResolvableType.java:56"$0$0$0$3$21$" * <pre class=""code"">"
"ResolvableType.java:57"$0$0$0$5$60$" * private HashMap&lt;Integer, List&lt;String&gt;&gt; myMap;"
"ResolvableType.java:58"$0$0$0$1$2$" *"
"ResolvableType.java:59"$0$0$0$5$26$" * public void example() {"
"ResolvableType.java:60"$2$0$0$5$88$" *     ResolvableType t = ResolvableType.forField(getClass().getDeclaredField(""myMap""));"
"ResolvableType.java:61"$1$0$0$5$74$" *     t.getSuperType(); // AbstractMap&lt;Integer, List&lt;String&gt;&gt;"
"ResolvableType.java:62"$0$0$0$5$59$" *     t.asMap(); // Map&lt;Integer, List&lt;String&gt;&gt;"
"ResolvableType.java:63"$1$0$0$4$44$" *     t.getGeneric(0).resolve(); // Integer"
"ResolvableType.java:64"$1$0$0$4$41$" *     t.getGeneric(1).resolve(); // List"
"ResolvableType.java:65"$1$0$0$4$45$" *     t.getGeneric(1); // List&lt;String&gt;"
"ResolvableType.java:66"$0$0$0$5$40$" *     t.resolveGeneric(1, 0); // String"
"ResolvableType.java:67"$0$0$0$2$4$" * }"
"ResolvableType.java:68"$0$0$0$2$9$" * </pre>"
"ResolvableType.java:69"$0$0$0$1$2$" *"
"ResolvableType.java:70"$0$0$0$4$23$" * @author Phillip Webb"
"ResolvableType.java:71"$0$0$0$4$26$" * @author Juergen Hoeller"
"ResolvableType.java:72"$0$0$0$4$26$" * @author Stephane Nicoll"
"ResolvableType.java:73"$0$0$0$3$13$" * @since 4.0"
"ResolvableType.java:74"$0$0$0$3$24$" * @see #forField(Field)"
"ResolvableType.java:75"$0$0$0$4$40$" * @see #forMethodParameter(Method, int)"
"ResolvableType.java:76"$0$0$0$3$36$" * @see #forMethodReturnType(Method)"
"ResolvableType.java:77"$0$0$0$4$50$" * @see #forConstructorParameter(Constructor, int)"
"ResolvableType.java:78"$0$0$0$3$24$" * @see #forClass(Class)"
"ResolvableType.java:79"$0$0$0$3$22$" * @see #forType(Type)"
"ResolvableType.java:80"$0$0$0$3$28$" * @see #forInstance(Object)"
"ResolvableType.java:81"$0$0$0$3$30$" * @see ResolvableTypeProvider"
"ResolvableType.java:82"$0$0$0$1$3$" */"
"ResolvableType.java:83"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"ResolvableType.java:84"$0$0$0$6$53$"public class ResolvableType implements Serializable {"
"ResolvableType.java:85"$0$0$0$0$0$""
"ResolvableType.java:86"$0$0$0$1$4$"	/**"
"ResolvableType.java:87"$0$0$0$13$84$"	 * {@code ResolvableType} returned when no value is available. {@code NONE} is used"
"ResolvableType.java:88"$0$0$0$15$86$"	 * in preference to {@code null} so that multiple method calls can be safely chained."
"ResolvableType.java:89"$0$0$0$1$4$"	 */"
"ResolvableType.java:90"$0$0$0$11$97$"	public static final ResolvableType NONE = new ResolvableType(EmptyType.INSTANCE, null, null, 0);"
"ResolvableType.java:91"$0$0$0$0$0$""
"ResolvableType.java:92"$0$0$0$8$81$"	private static final ResolvableType[] EMPTY_TYPES_ARRAY = new ResolvableType[0];"
"ResolvableType.java:93"$0$0$0$0$0$""
"ResolvableType.java:94"$0$0$0$7$88$"	private static final ConcurrentReferenceHashMap<ResolvableType, ResolvableType> cache ="
"ResolvableType.java:95"$0$0$0$2$41$"			new ConcurrentReferenceHashMap<>(256);"
"ResolvableType.java:96"$0$0$0$0$0$""
"ResolvableType.java:97"$0$0$0$0$0$""
"ResolvableType.java:98"$0$0$0$1$4$"	/**"
"ResolvableType.java:99"$0$0$0$7$43$"	 * The underlying Java type being managed."
"ResolvableType.java:100"$0$0$0$1$4$"	 */"
"ResolvableType.java:101"$0$0$0$4$25$"	private final Type type;"
"ResolvableType.java:102"$0$0$0$0$0$""
"ResolvableType.java:103"$0$0$0$1$4$"	/**"
"ResolvableType.java:104"$0$0$0$6$35$"	 * Optional provider for the type."
"ResolvableType.java:105"$0$0$0$1$4$"	 */"
"ResolvableType.java:106"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:107"$0$0$0$4$41$"	private final TypeProvider typeProvider;"
"ResolvableType.java:108"$0$0$0$0$0$""
"ResolvableType.java:109"$0$0$0$1$4$"	/**"
"ResolvableType.java:110"$0$0$0$14$84$"	 * The {@code VariableResolver} to use or {@code null} if no resolver is available."
"ResolvableType.java:111"$0$0$0$1$4$"	 */"
"ResolvableType.java:112"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:113"$0$0$0$4$49$"	private final VariableResolver variableResolver;"
"ResolvableType.java:114"$0$0$0$0$0$""
"ResolvableType.java:115"$0$0$0$1$4$"	/**"
"ResolvableType.java:116"$0$0$0$16$82$"	 * The component type for an array or {@code null} if the type should be deduced."
"ResolvableType.java:117"$0$0$0$1$4$"	 */"
"ResolvableType.java:118"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:119"$0$0$0$4$44$"	private final ResolvableType componentType;"
"ResolvableType.java:120"$0$0$0$0$0$""
"ResolvableType.java:121"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:122"$0$0$0$4$28$"	private final Integer hash;"
"ResolvableType.java:123"$0$0$0$0$0$""
"ResolvableType.java:124"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:125"$0$0$0$3$27$"	private Class<?> resolved;"
"ResolvableType.java:126"$0$0$0$0$0$""
"ResolvableType.java:127"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:128"$0$0$0$4$43$"	private volatile ResolvableType superType;"
"ResolvableType.java:129"$0$0$0$0$0$""
"ResolvableType.java:130"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:131"$0$0$0$4$46$"	private volatile ResolvableType[] interfaces;"
"ResolvableType.java:132"$0$0$0$0$0$""
"ResolvableType.java:133"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:134"$0$0$0$4$44$"	private volatile ResolvableType[] generics;"
"ResolvableType.java:135"$0$0$0$0$0$""
"ResolvableType.java:136"$0$0$0$0$0$""
"ResolvableType.java:137"$0$0$0$1$4$"	/**"
"ResolvableType.java:138"$0$0$0$14$91$"	 * Private constructor used to create a new {@link ResolvableType} for cache key purposes,"
"ResolvableType.java:139"$0$0$0$5$31$"	 * with no upfront resolution."
"ResolvableType.java:140"$0$0$0$1$4$"	 */"
"ResolvableType.java:141"$0$0$0$2$24$"	private ResolvableType("
"ResolvableType.java:142"$0$0$0$9$97$"			Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {"
"ResolvableType.java:143"$0$0$0$0$0$""
"ResolvableType.java:144"$0$0$0$3$19$"		this.type = type;"
"ResolvableType.java:145"$0$0$0$3$35$"		this.typeProvider = typeProvider;"
"ResolvableType.java:146"$0$0$0$3$43$"		this.variableResolver = variableResolver;"
"ResolvableType.java:147"$0$0$0$3$28$"		this.componentType = null;"
"ResolvableType.java:148"$0$0$0$3$34$"		this.hash = calculateHashCode();"
"ResolvableType.java:149"$0$0$0$3$23$"		this.resolved = null;"
"ResolvableType.java:150"$0$0$0$1$2$"	}"
"ResolvableType.java:151"$0$0$0$0$0$""
"ResolvableType.java:152"$0$0$0$1$4$"	/**"
"ResolvableType.java:153"$0$0$0$14$93$"	 * Private constructor used to create a new {@link ResolvableType} for cache value purposes,"
"ResolvableType.java:154"$0$0$0$8$54$"	 * with upfront resolution and a pre-calculated hash."
"ResolvableType.java:155"$0$0$0$3$14$"	 * @since 4.2"
"ResolvableType.java:156"$0$0$0$1$4$"	 */"
"ResolvableType.java:157"$0$0$0$6$71$"	private ResolvableType(Type type, @Nullable TypeProvider typeProvider,"
"ResolvableType.java:158"$0$0$0$7$73$"			@Nullable VariableResolver variableResolver, @Nullable Integer hash) {"
"ResolvableType.java:159"$0$0$0$0$0$""
"ResolvableType.java:160"$0$0$0$3$19$"		this.type = type;"
"ResolvableType.java:161"$0$0$0$3$35$"		this.typeProvider = typeProvider;"
"ResolvableType.java:162"$0$0$0$3$43$"		this.variableResolver = variableResolver;"
"ResolvableType.java:163"$0$0$0$3$28$"		this.componentType = null;"
"ResolvableType.java:164"$0$0$0$3$19$"		this.hash = hash;"
"ResolvableType.java:165"$0$0$0$3$33$"		this.resolved = resolveClass();"
"ResolvableType.java:166"$0$0$0$1$2$"	}"
"ResolvableType.java:167"$0$0$0$0$0$""
"ResolvableType.java:168"$0$0$0$1$4$"	/**"
"ResolvableType.java:169"$0$0$0$13$90$"	 * Private constructor used to create a new {@link ResolvableType} for uncached purposes,"
"ResolvableType.java:170"$0$0$0$8$55$"	 * with upfront resolution but lazily calculated hash."
"ResolvableType.java:171"$0$0$0$1$4$"	 */"
"ResolvableType.java:172"$0$0$0$6$71$"	private ResolvableType(Type type, @Nullable TypeProvider typeProvider,"
"ResolvableType.java:173"$0$0$0$7$89$"			@Nullable VariableResolver variableResolver, @Nullable ResolvableType componentType) {"
"ResolvableType.java:174"$0$0$0$0$0$""
"ResolvableType.java:175"$0$0$0$3$19$"		this.type = type;"
"ResolvableType.java:176"$0$0$0$3$35$"		this.typeProvider = typeProvider;"
"ResolvableType.java:177"$0$0$0$3$43$"		this.variableResolver = variableResolver;"
"ResolvableType.java:178"$0$0$0$3$37$"		this.componentType = componentType;"
"ResolvableType.java:179"$0$0$0$3$19$"		this.hash = null;"
"ResolvableType.java:180"$0$0$0$3$33$"		this.resolved = resolveClass();"
"ResolvableType.java:181"$0$0$0$1$2$"	}"
"ResolvableType.java:182"$0$0$0$0$0$""
"ResolvableType.java:183"$0$0$0$1$4$"	/**"
"ResolvableType.java:184"$0$0$0$15$93$"	 * Private constructor used to create a new {@link ResolvableType} on a {@link Class} basis."
"ResolvableType.java:185"$0$0$0$15$93$"	 * Avoids all {@code instanceof} checks in order to create a straight {@link Class} wrapper."
"ResolvableType.java:186"$0$0$0$3$14$"	 * @since 4.2"
"ResolvableType.java:187"$0$0$0$1$4$"	 */"
"ResolvableType.java:188"$0$0$0$5$51$"	private ResolvableType(@Nullable Class<?> clazz) {"
"ResolvableType.java:189"$0$0$0$9$57$"		this.resolved = (clazz != null ? clazz : Object.class);"
"ResolvableType.java:190"$0$0$0$3$28$"		this.type = this.resolved;"
"ResolvableType.java:191"$0$0$0$3$27$"		this.typeProvider = null;"
"ResolvableType.java:192"$0$0$0$3$31$"		this.variableResolver = null;"
"ResolvableType.java:193"$0$0$0$3$28$"		this.componentType = null;"
"ResolvableType.java:194"$0$0$0$3$19$"		this.hash = null;"
"ResolvableType.java:195"$0$0$0$1$2$"	}"
"ResolvableType.java:196"$0$0$0$0$0$""
"ResolvableType.java:197"$0$0$0$0$0$""
"ResolvableType.java:198"$0$0$0$1$4$"	/**"
"ResolvableType.java:199"$0$0$0$9$57$"	 * Return the underling Java {@link Type} being managed."
"ResolvableType.java:200"$0$0$0$1$4$"	 */"
"ResolvableType.java:201"$1$0$0$4$24$"	public Type getType() {"
"ResolvableType.java:202"$0$0$0$2$51$"		return SerializableTypeWrapper.unwrap(this.type);"
"ResolvableType.java:203"$0$0$0$1$2$"	}"
"ResolvableType.java:204"$0$0$0$0$0$""
"ResolvableType.java:205"$0$0$0$1$4$"	/**"
"ResolvableType.java:206"$0$0$0$11$73$"	 * Return the underlying Java {@link Class} being managed, if available;"
"ResolvableType.java:207"$0$0$0$4$27$"	 * otherwise {@code null}."
"ResolvableType.java:208"$0$0$0$1$4$"	 */"
"ResolvableType.java:209"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:210"$1$0$0$4$32$"	public Class<?> getRawClass() {"
"ResolvableType.java:211"$0$0$0$5$35$"		if (this.type == this.resolved) {"
"ResolvableType.java:212"$0$0$0$2$24$"			return this.resolved;"
"ResolvableType.java:213"$0$0$0$1$3$"		}"
"ResolvableType.java:214"$0$0$0$4$27$"		Type rawType = this.type;"
"ResolvableType.java:215"$0$0$0$5$45$"		if (rawType instanceof ParameterizedType) {"
"ResolvableType.java:216"$1$0$0$4$56$"			rawType = ((ParameterizedType) rawType).getRawType();"
"ResolvableType.java:217"$0$0$0$1$3$"		}"
"ResolvableType.java:218"$0$0$0$9$64$"		return (rawType instanceof Class ? (Class<?>) rawType : null);"
"ResolvableType.java:219"$0$0$0$1$2$"	}"
"ResolvableType.java:220"$0$0$0$0$0$""
"ResolvableType.java:221"$0$0$0$1$4$"	/**"
"ResolvableType.java:222"$0$0$0$14$85$"	 * Return the underlying source of the resolvable type. Will return a {@link Field},"
"ResolvableType.java:223"$0$0$0$12$87$"	 * {@link MethodParameter} or {@link Type} depending on how the {@link ResolvableType}"
"ResolvableType.java:224"$0$0$0$14$87$"	 * was constructed. With the exception of the {@link #NONE} constant, this method will"
"ResolvableType.java:225"$0$0$0$14$87$"	 * never return {@code null}. This method is primarily to provide access to additional"
"ResolvableType.java:226"$0$0$0$11$77$"	 * type information or meta-data that alternative JVM languages may provide."
"ResolvableType.java:227"$0$0$0$1$4$"	 */"
"ResolvableType.java:228"$1$0$0$4$28$"	public Object getSource() {"
"ResolvableType.java:229"$1$0$0$10$85$"		Object source = (this.typeProvider != null ? this.typeProvider.getSource() : null);"
"ResolvableType.java:230"$0$0$0$8$47$"		return (source != null ? source : this.type);"
"ResolvableType.java:231"$0$0$0$1$2$"	}"
"ResolvableType.java:232"$0$0$0$0$0$""
"ResolvableType.java:233"$0$0$0$1$4$"	/**"
"ResolvableType.java:234"$0$0$0$12$65$"	 * Return this type as a resolved {@code Class}, falling back to"
"ResolvableType.java:235"$0$0$0$10$66$"	 * {@link java.lang.Object} if no specific class can be resolved."
"ResolvableType.java:236"$0$0$0$11$69$"	 * @return the resolved {@link Class} or the {@code Object} fallback"
"ResolvableType.java:237"$0$0$0$3$14$"	 * @since 5.1"
"ResolvableType.java:238"$1$0$0$3$23$"	 * @see #getRawClass()"
"ResolvableType.java:239"$0$0$0$3$24$"	 * @see #resolve(Class)"
"ResolvableType.java:240"$0$0$0$1$4$"	 */"
"ResolvableType.java:241"$0$0$0$4$28$"	public Class<?> toClass() {"
"ResolvableType.java:242"$0$0$0$2$31$"		return resolve(Object.class);"
"ResolvableType.java:243"$0$0$0$1$2$"	}"
"ResolvableType.java:244"$0$0$0$0$0$""
"ResolvableType.java:245"$0$0$0$1$4$"	/**"
"ResolvableType.java:246"$0$0$0$13$85$"	 * Determine whether the given object is an instance of this {@code ResolvableType}."
"ResolvableType.java:247"$0$0$0$7$34$"	 * @param obj the object to check"
"ResolvableType.java:248"$0$0$0$3$14$"	 * @since 4.2"
"ResolvableType.java:249"$0$0$0$3$33$"	 * @see #isAssignableFrom(Class)"
"ResolvableType.java:250"$0$0$0$1$4$"	 */"
"ResolvableType.java:251"$0$0$0$6$50$"	public boolean isInstance(@Nullable Object obj) {"
"ResolvableType.java:252"$1$0$0$6$59$"		return (obj != null && isAssignableFrom(obj.getClass()));"
"ResolvableType.java:253"$0$0$0$1$2$"	}"
"ResolvableType.java:254"$0$0$0$0$0$""
"ResolvableType.java:255"$0$0$0$1$4$"	/**"
"ResolvableType.java:256"$0$0$0$10$72$"	 * Determine whether this {@code ResolvableType} is assignable from the"
"ResolvableType.java:257"$0$0$0$4$25$"	 * specified other type."
"ResolvableType.java:258"$0$0$0$13$68$"	 * @param other the type to be checked against (as a {@code Class})"
"ResolvableType.java:259"$0$0$0$3$14$"	 * @since 4.2"
"ResolvableType.java:260"$0$0$0$3$42$"	 * @see #isAssignableFrom(ResolvableType)"
"ResolvableType.java:261"$0$0$0$1$4$"	 */"
"ResolvableType.java:262"$0$0$0$5$50$"	public boolean isAssignableFrom(Class<?> other) {"
"ResolvableType.java:263"$0$0$0$3$49$"		return isAssignableFrom(forClass(other), null);"
"ResolvableType.java:264"$0$0$0$1$2$"	}"
"ResolvableType.java:265"$0$0$0$0$0$""
"ResolvableType.java:266"$0$0$0$1$4$"	/**"
"ResolvableType.java:267"$0$0$0$10$72$"	 * Determine whether this {@code ResolvableType} is assignable from the"
"ResolvableType.java:268"$0$0$0$4$25$"	 * specified other type."
"ResolvableType.java:269"$0$0$0$12$74$"	 * <p>Attempts to follow the same rules as the Java compiler, considering"
"ResolvableType.java:270"$0$0$0$10$65$"	 * whether both the {@link #resolve() resolved} {@code Class} is"
"ResolvableType.java:271"$0$0$0$8$72$"	 * {@link Class#isAssignableFrom(Class) assignable from} the given type"
"ResolvableType.java:272"$1$0$0$11$74$"	 * as well as whether all {@link #getGenerics() generics} are assignable."
"ResolvableType.java:273"$0$0$0$13$77$"	 * @param other the type to be checked against (as a {@code ResolvableType})"
"ResolvableType.java:274"$0$0$0$14$76$"	 * @return {@code true} if the specified other type can be assigned to this"
"ResolvableType.java:275"$0$0$0$6$51$"	 * {@code ResolvableType}; {@code false} otherwise"
"ResolvableType.java:276"$0$0$0$1$4$"	 */"
"ResolvableType.java:277"$0$0$0$5$56$"	public boolean isAssignableFrom(ResolvableType other) {"
"ResolvableType.java:278"$0$0$0$3$39$"		return isAssignableFrom(other, null);"
"ResolvableType.java:279"$0$0$0$1$2$"	}"
"ResolvableType.java:280"$0$0$0$0$0$""
"ResolvableType.java:281"$0$0$0$9$98$"	private boolean isAssignableFrom(ResolvableType other, @Nullable Map<Type, Type> matchedBefore) {"
"ResolvableType.java:282"$0$0$0$6$59$"		Assert.notNull(other, ""ResolvableType must not be null"");"
"ResolvableType.java:283"$0$0$0$0$0$""
"ResolvableType.java:284"$0$0$1$10$54$"		// If we cannot resolve types, we are not assignable"
"ResolvableType.java:285"$0$0$0$9$38$"		if (this == NONE || other == NONE) {"
"ResolvableType.java:286"$0$0$0$2$16$"			return false;"
"ResolvableType.java:287"$0$0$0$1$3$"		}"
"ResolvableType.java:288"$0$0$0$0$0$""
"ResolvableType.java:289"$0$0$1$10$56$"		// Deal with array by delegating to the component type"
"ResolvableType.java:290"$0$0$0$3$18$"		if (isArray()) {"
"ResolvableType.java:291"$2$0$0$4$93$"			return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));"
"ResolvableType.java:292"$0$0$0$1$3$"		}"
"ResolvableType.java:293"$0$0$0$0$0$""
"ResolvableType.java:294"$1$0$0$9$76$"		if (matchedBefore != null && matchedBefore.get(this.type) == other.type) {"
"ResolvableType.java:295"$0$0$0$2$15$"			return true;"
"ResolvableType.java:296"$0$0$0$1$3$"		}"
"ResolvableType.java:297"$0$0$0$0$0$""
"ResolvableType.java:298"$0$0$1$5$30$"		// Deal with wildcard bounds"
"ResolvableType.java:299"$1$0$0$4$54$"		WildcardBounds ourBounds = WildcardBounds.get(this);"
"ResolvableType.java:300"$1$0$0$4$56$"		WildcardBounds typeBounds = WildcardBounds.get(other);"
"ResolvableType.java:301"$0$0$0$0$0$""
"ResolvableType.java:302"$0$0$1$11$54$"		// In the form X is assignable to <? extends Number>"
"ResolvableType.java:303"$0$0$0$5$27$"		if (typeBounds != null) {"
"ResolvableType.java:304"$0$0$0$7$67$"			return (ourBounds != null && ourBounds.isSameKind(typeBounds) &&"
"ResolvableType.java:305"$1$0$0$1$57$"					ourBounds.isAssignableFrom(typeBounds.getBounds()));"
"ResolvableType.java:306"$0$0$0$1$3$"		}"
"ResolvableType.java:307"$0$0$0$0$0$""
"ResolvableType.java:308"$0$0$1$11$57$"		// In the form <? extends Number> is assignable to X..."
"ResolvableType.java:309"$0$0$0$5$26$"		if (ourBounds != null) {"
"ResolvableType.java:310"$0$0$0$2$44$"			return ourBounds.isAssignableFrom(other);"
"ResolvableType.java:311"$0$0$0$1$3$"		}"
"ResolvableType.java:312"$0$0$0$0$0$""
"ResolvableType.java:313"$0$0$1$7$45$"		// Main assignability check about to follow"
"ResolvableType.java:314"$0$0$0$13$98$"		boolean exactMatch = (matchedBefore != null);  // We're checking nested generic variables now..."
"ResolvableType.java:315"$0$0$0$4$31$"		boolean checkGenerics = true;"
"ResolvableType.java:316"$0$0$0$4$30$"		Class<?> ourResolved = null;"
"ResolvableType.java:317"$0$0$0$5$42$"		if (this.type instanceof TypeVariable) {"
"ResolvableType.java:318"$0$0$0$5$58$"			TypeVariable<?> variable = (TypeVariable<?>) this.type;"
"ResolvableType.java:319"$0$0$1$5$37$"			// Try default variable resolution"
"ResolvableType.java:320"$0$0$0$5$39$"			if (this.variableResolver != null) {"
"ResolvableType.java:321"$0$0$0$4$78$"				ResolvableType resolved = this.variableResolver.resolveVariable(variable);"
"ResolvableType.java:322"$0$0$0$5$27$"				if (resolved != null) {"
"ResolvableType.java:323"$0$0$0$3$38$"					ourResolved = resolved.resolve();"
"ResolvableType.java:324"$0$0$0$1$5$"				}"
"ResolvableType.java:325"$0$0$0$1$4$"			}"
"ResolvableType.java:326"$0$0$0$5$29$"			if (ourResolved == null) {"
"ResolvableType.java:327"$1$0$1$7$50$"				// Try variable resolution against target type"
"ResolvableType.java:328"$0$0$0$5$41$"				if (other.variableResolver != null) {"
"ResolvableType.java:329"$0$0$0$4$80$"					ResolvableType resolved = other.variableResolver.resolveVariable(variable);"
"ResolvableType.java:330"$0$0$0$5$28$"					if (resolved != null) {"
"ResolvableType.java:331"$0$0$0$3$39$"						ourResolved = resolved.resolve();"
"ResolvableType.java:332"$0$0$0$3$28$"						checkGenerics = false;"
"ResolvableType.java:333"$0$0$0$1$6$"					}"
"ResolvableType.java:334"$0$0$0$1$5$"				}"
"ResolvableType.java:335"$0$0$0$1$4$"			}"
"ResolvableType.java:336"$0$0$0$5$29$"			if (ourResolved == null) {"
"ResolvableType.java:337"$0$0$1$12$82$"				// Unresolved type variable, potentially nested -> never insist on exact match"
"ResolvableType.java:338"$0$0$0$3$23$"				exactMatch = false;"
"ResolvableType.java:339"$0$0$0$1$4$"			}"
"ResolvableType.java:340"$0$0$0$1$3$"		}"
"ResolvableType.java:341"$0$0$0$5$28$"		if (ourResolved == null) {"
"ResolvableType.java:342"$0$0$0$3$39$"			ourResolved = resolve(Object.class);"
"ResolvableType.java:343"$0$0$0$1$3$"		}"
"ResolvableType.java:344"$0$0$0$4$43$"		Class<?> otherResolved = other.toClass();"
"ResolvableType.java:345"$0$0$0$0$0$""
"ResolvableType.java:346"$0$0$1$9$45$"		// We need an exact type match for generics"
"ResolvableType.java:347"$0$0$1$7$59$"		// List<CharSequence> is not assignable from List<String>"
"ResolvableType.java:348"$0$0$0$8$111$"		if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) {"
"ResolvableType.java:349"$0$0$0$2$16$"			return false;"
"ResolvableType.java:350"$0$0$0$1$3$"		}"
"ResolvableType.java:351"$0$0$0$0$0$""
"ResolvableType.java:352"$0$0$0$3$22$"		if (checkGenerics) {"
"ResolvableType.java:353"$0$0$1$5$36$"			// Recursively check each generic"
"ResolvableType.java:354"$1$0$0$4$48$"			ResolvableType[] ourGenerics = getGenerics();"
"ResolvableType.java:355"$1$0$0$4$71$"			ResolvableType[] typeGenerics = other.as(ourResolved).getGenerics();"
"ResolvableType.java:356"$0$0$0$5$51$"			if (ourGenerics.length != typeGenerics.length) {"
"ResolvableType.java:357"$0$0$0$2$17$"				return false;"
"ResolvableType.java:358"$0$0$0$1$4$"			}"
"ResolvableType.java:359"$0$0$0$5$31$"			if (matchedBefore == null) {"
"ResolvableType.java:360"$0$0$0$4$45$"				matchedBefore = new IdentityHashMap<>(1);"
"ResolvableType.java:361"$0$0$0$1$4$"			}"
"ResolvableType.java:362"$0$0$0$2$44$"			matchedBefore.put(this.type, other.type);"
"ResolvableType.java:363"$0$0$0$10$49$"			for (int i = 0; i < ourGenerics.length; i++) {"
"ResolvableType.java:364"$0$0$0$4$75$"				if (!ourGenerics[i].isAssignableFrom(typeGenerics[i], matchedBefore)) {"
"ResolvableType.java:365"$0$0$0$2$18$"					return false;"
"ResolvableType.java:366"$0$0$0$1$5$"				}"
"ResolvableType.java:367"$0$0$0$1$4$"			}"
"ResolvableType.java:368"$0$0$0$1$3$"		}"
"ResolvableType.java:369"$0$0$0$0$0$""
"ResolvableType.java:370"$0$0$0$2$14$"		return true;"
"ResolvableType.java:371"$0$0$0$1$2$"	}"
"ResolvableType.java:372"$0$0$0$0$0$""
"ResolvableType.java:373"$0$0$0$1$4$"	/**"
"ResolvableType.java:374"$0$0$0$15$82$"	 * Return {@code true} if this type resolves to a Class that represents an array."
"ResolvableType.java:375"$1$0$0$3$28$"	 * @see #getComponentType()"
"ResolvableType.java:376"$0$0$0$1$4$"	 */"
"ResolvableType.java:377"$0$0$0$4$27$"	public boolean isArray() {"
"ResolvableType.java:378"$0$0$0$5$21$"		if (this == NONE) {"
"ResolvableType.java:379"$0$0$0$2$16$"			return false;"
"ResolvableType.java:380"$0$0$0$1$3$"		}"
"ResolvableType.java:381"$0$0$0$8$77$"		return ((this.type instanceof Class && ((Class<?>) this.type).isArray()) ||"
"ResolvableType.java:382"$0$0$0$5$70$"				this.type instanceof GenericArrayType || resolveType().isArray());"
"ResolvableType.java:383"$0$0$0$1$2$"	}"
"ResolvableType.java:384"$0$0$0$0$0$""
"ResolvableType.java:385"$0$0$0$1$4$"	/**"
"ResolvableType.java:386"$0$0$0$12$77$"	 * Return the ResolvableType representing the component type of the array or"
"ResolvableType.java:387"$0$0$0$11$59$"	 * {@link #NONE} if this type does not represent an array."
"ResolvableType.java:388"$0$0$0$3$19$"	 * @see #isArray()"
"ResolvableType.java:389"$0$0$0$1$4$"	 */"
"ResolvableType.java:390"$1$0$0$4$43$"	public ResolvableType getComponentType() {"
"ResolvableType.java:391"$0$0$0$5$21$"		if (this == NONE) {"
"ResolvableType.java:392"$0$0$0$2$15$"			return NONE;"
"ResolvableType.java:393"$0$0$0$1$3$"		}"
"ResolvableType.java:394"$0$0$0$5$35$"		if (this.componentType != null) {"
"ResolvableType.java:395"$0$0$0$2$29$"			return this.componentType;"
"ResolvableType.java:396"$0$0$0$1$3$"		}"
"ResolvableType.java:397"$0$0$0$5$35$"		if (this.type instanceof Class) {"
"ResolvableType.java:398"$1$0$0$5$70$"			Class<?> componentType = ((Class<?>) this.type).getComponentType();"
"ResolvableType.java:399"$0$0$0$3$56$"			return forType(componentType, this.variableResolver);"
"ResolvableType.java:400"$0$0$0$1$3$"		}"
"ResolvableType.java:401"$0$0$0$5$46$"		if (this.type instanceof GenericArrayType) {"
"ResolvableType.java:402"$1$0$0$4$99$"			return forType(((GenericArrayType) this.type).getGenericComponentType(), this.variableResolver);"
"ResolvableType.java:403"$0$0$0$1$3$"		}"
"ResolvableType.java:404"$1$0$0$2$42$"		return resolveType().getComponentType();"
"ResolvableType.java:405"$0$0$0$1$2$"	}"
"ResolvableType.java:406"$0$0$0$0$0$""
"ResolvableType.java:407"$0$0$0$1$4$"	/**"
"ResolvableType.java:408"$0$0$0$13$83$"	 * Convenience method to return this type as a resolvable {@link Collection} type."
"ResolvableType.java:409"$0$0$0$12$67$"	 * Returns {@link #NONE} if this type does not implement or extend"
"ResolvableType.java:410"$0$0$0$3$23$"	 * {@link Collection}."
"ResolvableType.java:411"$0$0$0$3$19$"	 * @see #as(Class)"
"ResolvableType.java:412"$0$0$0$3$17$"	 * @see #asMap()"
"ResolvableType.java:413"$0$0$0$1$4$"	 */"
"ResolvableType.java:414"$0$0$0$4$39$"	public ResolvableType asCollection() {"
"ResolvableType.java:415"$0$0$0$2$30$"		return as(Collection.class);"
"ResolvableType.java:416"$0$0$0$1$2$"	}"
"ResolvableType.java:417"$0$0$0$0$0$""
"ResolvableType.java:418"$0$0$0$1$4$"	/**"
"ResolvableType.java:419"$0$0$0$13$76$"	 * Convenience method to return this type as a resolvable {@link Map} type."
"ResolvableType.java:420"$0$0$0$12$67$"	 * Returns {@link #NONE} if this type does not implement or extend"
"ResolvableType.java:421"$0$0$0$3$16$"	 * {@link Map}."
"ResolvableType.java:422"$0$0$0$3$19$"	 * @see #as(Class)"
"ResolvableType.java:423"$0$0$0$3$24$"	 * @see #asCollection()"
"ResolvableType.java:424"$0$0$0$1$4$"	 */"
"ResolvableType.java:425"$0$0$0$4$32$"	public ResolvableType asMap() {"
"ResolvableType.java:426"$0$0$0$2$23$"		return as(Map.class);"
"ResolvableType.java:427"$0$0$0$1$2$"	}"
"ResolvableType.java:428"$0$0$0$0$0$""
"ResolvableType.java:429"$0$0$0$1$4$"	/**"
"ResolvableType.java:430"$0$0$0$13$81$"	 * Return this type as a {@link ResolvableType} of the specified class. Searches"
"ResolvableType.java:431"$2$0$0$8$76$"	 * {@link #getSuperType() supertype} and {@link #getInterfaces() interface}"
"ResolvableType.java:432"$0$0$0$14$78$"	 * hierarchies to find a match, returning {@link #NONE} if this type does not"
"ResolvableType.java:433"$0$0$0$7$44$"	 * implement or extend the specified class."
"ResolvableType.java:434"$0$0$0$8$54$"	 * @param type the required type (typically narrowed)"
"ResolvableType.java:435"$0$0$0$11$78$"	 * @return a {@link ResolvableType} representing this object as the specified"
"ResolvableType.java:436"$0$0$0$11$57$"	 * type, or {@link #NONE} if not resolvable as that type"
"ResolvableType.java:437"$0$0$0$3$24$"	 * @see #asCollection()"
"ResolvableType.java:438"$0$0$0$3$17$"	 * @see #asMap()"
"ResolvableType.java:439"$1$0$0$3$24$"	 * @see #getSuperType()"
"ResolvableType.java:440"$1$0$0$3$25$"	 * @see #getInterfaces()"
"ResolvableType.java:441"$0$0$0$1$4$"	 */"
"ResolvableType.java:442"$0$0$0$5$42$"	public ResolvableType as(Class<?> type) {"
"ResolvableType.java:443"$0$0$0$5$21$"		if (this == NONE) {"
"ResolvableType.java:444"$0$0$0$2$15$"			return NONE;"
"ResolvableType.java:445"$0$0$0$1$3$"		}"
"ResolvableType.java:446"$0$0$0$4$32$"		Class<?> resolved = resolve();"
"ResolvableType.java:447"$0$0$0$9$45$"		if (resolved == null || resolved == type) {"
"ResolvableType.java:448"$0$0$0$2$15$"			return this;"
"ResolvableType.java:449"$0$0$0$1$3$"		}"
"ResolvableType.java:450"$1$0$0$6$56$"		for (ResolvableType interfaceType : getInterfaces()) {"
"ResolvableType.java:451"$0$0$0$4$59$"			ResolvableType interfaceAsType = interfaceType.as(type);"
"ResolvableType.java:452"$0$0$0$5$33$"			if (interfaceAsType != NONE) {"
"ResolvableType.java:453"$0$0$0$2$27$"				return interfaceAsType;"
"ResolvableType.java:454"$0$0$0$1$4$"			}"
"ResolvableType.java:455"$0$0$0$1$3$"		}"
"ResolvableType.java:456"$1$0$0$2$33$"		return getSuperType().as(type);"
"ResolvableType.java:457"$0$0$0$1$2$"	}"
"ResolvableType.java:458"$0$0$0$0$0$""
"ResolvableType.java:459"$0$0$0$1$4$"	/**"
"ResolvableType.java:460"$0$0$0$12$83$"	 * Return a {@link ResolvableType} representing the direct supertype of this type."
"ResolvableType.java:461"$0$0$0$11$67$"	 * If no supertype is available this method returns {@link #NONE}."
"ResolvableType.java:462"$0$0$0$12$91$"	 * <p>Note: The resulting {@link ResolvableType} instance may not be {@link Serializable}."
"ResolvableType.java:463"$1$0$0$3$25$"	 * @see #getInterfaces()"
"ResolvableType.java:464"$0$0$0$1$4$"	 */"
"ResolvableType.java:465"$1$0$0$4$39$"	public ResolvableType getSuperType() {"
"ResolvableType.java:466"$0$0$0$4$32$"		Class<?> resolved = resolve();"
"ResolvableType.java:467"$1$0$0$9$68$"		if (resolved == null || resolved.getGenericSuperclass() == null) {"
"ResolvableType.java:468"$0$0$0$2$15$"			return NONE;"
"ResolvableType.java:469"$0$0$0$1$3$"		}"
"ResolvableType.java:470"$0$0$0$4$44$"		ResolvableType superType = this.superType;"
"ResolvableType.java:471"$0$0$0$5$26$"		if (superType == null) {"
"ResolvableType.java:472"$1$0$0$4$62$"			superType = forType(resolved.getGenericSuperclass(), this);"
"ResolvableType.java:473"$0$0$0$3$30$"			this.superType = superType;"
"ResolvableType.java:474"$0$0$0$1$3$"		}"
"ResolvableType.java:475"$0$0$0$2$19$"		return superType;"
"ResolvableType.java:476"$0$0$0$1$2$"	}"
"ResolvableType.java:477"$0$0$0$0$0$""
"ResolvableType.java:478"$0$0$0$1$4$"	/**"
"ResolvableType.java:479"$0$0$0$10$76$"	 * Return a {@link ResolvableType} array representing the direct interfaces"
"ResolvableType.java:480"$0$0$0$14$79$"	 * implemented by this type. If this type does not implement any interfaces an"
"ResolvableType.java:481"$0$0$0$5$28$"	 * empty array is returned."
"ResolvableType.java:482"$0$0$0$12$92$"	 * <p>Note: The resulting {@link ResolvableType} instances may not be {@link Serializable}."
"ResolvableType.java:483"$1$0$0$3$24$"	 * @see #getSuperType()"
"ResolvableType.java:484"$0$0$0$1$4$"	 */"
"ResolvableType.java:485"$1$0$0$4$42$"	public ResolvableType[] getInterfaces() {"
"ResolvableType.java:486"$0$0$0$4$32$"		Class<?> resolved = resolve();"
"ResolvableType.java:487"$0$0$0$5$25$"		if (resolved == null) {"
"ResolvableType.java:488"$0$0$0$2$28$"			return EMPTY_TYPES_ARRAY;"
"ResolvableType.java:489"$0$0$0$1$3$"		}"
"ResolvableType.java:490"$0$0$0$4$48$"		ResolvableType[] interfaces = this.interfaces;"
"ResolvableType.java:491"$0$0$0$5$27$"		if (interfaces == null) {"
"ResolvableType.java:492"$1$0$0$4$56$"			Type[] genericIfcs = resolved.getGenericInterfaces();"
"ResolvableType.java:493"$0$0$0$4$55$"			interfaces = new ResolvableType[genericIfcs.length];"
"ResolvableType.java:494"$0$0$0$10$49$"			for (int i = 0; i < genericIfcs.length; i++) {"
"ResolvableType.java:495"$0$0$0$4$50$"				interfaces[i] = forType(genericIfcs[i], this);"
"ResolvableType.java:496"$0$0$0$1$4$"			}"
"ResolvableType.java:497"$0$0$0$3$32$"			this.interfaces = interfaces;"
"ResolvableType.java:498"$0$0$0$1$3$"		}"
"ResolvableType.java:499"$0$0$0$2$20$"		return interfaces;"
"ResolvableType.java:500"$0$0$0$1$2$"	}"
"ResolvableType.java:501"$0$0$0$0$0$""
"ResolvableType.java:502"$0$0$0$1$4$"	/**"
"ResolvableType.java:503"$0$0$0$10$65$"	 * Return {@code true} if this type contains generic parameters."
"ResolvableType.java:504"$1$0$0$3$28$"	 * @see #getGeneric(int...)"
"ResolvableType.java:505"$1$0$0$3$23$"	 * @see #getGenerics()"
"ResolvableType.java:506"$0$0$0$1$4$"	 */"
"ResolvableType.java:507"$0$0$0$4$31$"	public boolean hasGenerics() {"
"ResolvableType.java:508"$1$0$0$4$36$"		return (getGenerics().length > 0);"
"ResolvableType.java:509"$0$0$0$1$2$"	}"
"ResolvableType.java:510"$0$0$0$0$0$""
"ResolvableType.java:511"$0$0$0$1$4$"	/**"
"ResolvableType.java:512"$0$0$0$11$73$"	 * Return {@code true} if this type contains unresolvable generics only,"
"ResolvableType.java:513"$0$0$0$12$66$"	 * that is, no substitute for any of its declared type variables."
"ResolvableType.java:514"$0$0$0$1$4$"	 */"
"ResolvableType.java:515"$0$0$0$3$35$"	boolean isEntirelyUnresolvable() {"
"ResolvableType.java:516"$0$0$0$5$21$"		if (this == NONE) {"
"ResolvableType.java:517"$0$0$0$2$16$"			return false;"
"ResolvableType.java:518"$0$0$0$1$3$"		}"
"ResolvableType.java:519"$1$0$0$4$44$"		ResolvableType[] generics = getGenerics();"
"ResolvableType.java:520"$0$0$0$6$43$"		for (ResolvableType generic : generics) {"
"ResolvableType.java:521"$0$0$0$5$85$"			if (!generic.isUnresolvableTypeVariable() && !generic.isWildcardWithoutBounds()) {"
"ResolvableType.java:522"$0$0$0$2$17$"				return false;"
"ResolvableType.java:523"$0$0$0$1$4$"			}"
"ResolvableType.java:524"$0$0$0$1$3$"		}"
"ResolvableType.java:525"$0$0$0$2$14$"		return true;"
"ResolvableType.java:526"$0$0$0$1$2$"	}"
"ResolvableType.java:527"$0$0$0$0$0$""
"ResolvableType.java:528"$0$0$0$1$4$"	/**"
"ResolvableType.java:529"$0$0$0$10$72$"	 * Determine whether the underlying type has any unresolvable generics:"
"ResolvableType.java:530"$0$0$0$11$67$"	 * either through an unresolvable type variable on the type itself"
"ResolvableType.java:531"$0$0$0$11$65$"	 * or through implementing a generic interface in a raw fashion,"
"ResolvableType.java:532"$0$0$0$8$62$"	 * i.e. without substituting that interface's type variables."
"ResolvableType.java:533"$0$0$0$12$64$"	 * The result will be {@code true} only in those two scenarios."
"ResolvableType.java:534"$0$0$0$1$4$"	 */"
"ResolvableType.java:535"$0$0$0$4$43$"	public boolean hasUnresolvableGenerics() {"
"ResolvableType.java:536"$0$0$0$5$21$"		if (this == NONE) {"
"ResolvableType.java:537"$0$0$0$2$16$"			return false;"
"ResolvableType.java:538"$0$0$0$1$3$"		}"
"ResolvableType.java:539"$1$0$0$4$44$"		ResolvableType[] generics = getGenerics();"
"ResolvableType.java:540"$0$0$0$6$43$"		for (ResolvableType generic : generics) {"
"ResolvableType.java:541"$0$0$0$5$83$"			if (generic.isUnresolvableTypeVariable() || generic.isWildcardWithoutBounds()) {"
"ResolvableType.java:542"$0$0$0$2$16$"				return true;"
"ResolvableType.java:543"$0$0$0$1$4$"			}"
"ResolvableType.java:544"$0$0$0$1$3$"		}"
"ResolvableType.java:545"$0$0$0$4$32$"		Class<?> resolved = resolve();"
"ResolvableType.java:546"$0$0$0$5$25$"		if (resolved != null) {"
"ResolvableType.java:547"$1$0$0$6$66$"			for (Type genericInterface : resolved.getGenericInterfaces()) {"
"ResolvableType.java:548"$0$0$0$5$44$"				if (genericInterface instanceof Class) {"
"ResolvableType.java:549"$0$0$0$4$63$"					if (forClass((Class<?>) genericInterface).hasGenerics()) {"
"ResolvableType.java:550"$0$0$0$2$18$"						return true;"
"ResolvableType.java:551"$0$0$0$1$6$"					}"
"ResolvableType.java:552"$0$0$0$1$5$"				}"
"ResolvableType.java:553"$0$0$0$1$4$"			}"
"ResolvableType.java:554"$1$0$0$2$51$"			return getSuperType().hasUnresolvableGenerics();"
"ResolvableType.java:555"$0$0$0$1$3$"		}"
"ResolvableType.java:556"$0$0$0$2$15$"		return false;"
"ResolvableType.java:557"$0$0$0$1$2$"	}"
"ResolvableType.java:558"$0$0$0$0$0$""
"ResolvableType.java:559"$0$0$0$1$4$"	/**"
"ResolvableType.java:560"$0$0$0$11$65$"	 * Determine whether the underlying type is a type variable that"
"ResolvableType.java:561"$0$0$0$9$64$"	 * cannot be resolved through the associated variable resolver."
"ResolvableType.java:562"$0$0$0$1$4$"	 */"
"ResolvableType.java:563"$0$0$0$4$47$"	private boolean isUnresolvableTypeVariable() {"
"ResolvableType.java:564"$0$0$0$5$42$"		if (this.type instanceof TypeVariable) {"
"ResolvableType.java:565"$0$0$0$5$39$"			if (this.variableResolver == null) {"
"ResolvableType.java:566"$0$0$0$2$16$"				return true;"
"ResolvableType.java:567"$0$0$0$1$4$"			}"
"ResolvableType.java:568"$0$0$0$5$58$"			TypeVariable<?> variable = (TypeVariable<?>) this.type;"
"ResolvableType.java:569"$0$0$0$4$77$"			ResolvableType resolved = this.variableResolver.resolveVariable(variable);"
"ResolvableType.java:570"$0$0$0$7$67$"			if (resolved == null || resolved.isUnresolvableTypeVariable()) {"
"ResolvableType.java:571"$0$0$0$2$16$"				return true;"
"ResolvableType.java:572"$0$0$0$1$4$"			}"
"ResolvableType.java:573"$0$0$0$1$3$"		}"
"ResolvableType.java:574"$0$0$0$2$15$"		return false;"
"ResolvableType.java:575"$0$0$0$1$2$"	}"
"ResolvableType.java:576"$0$0$0$0$0$""
"ResolvableType.java:577"$0$0$0$1$4$"	/**"
"ResolvableType.java:578"$0$0$0$9$63$"	 * Determine whether the underlying type represents a wildcard"
"ResolvableType.java:579"$0$0$0$11$70$"	 * without specific bounds (i.e., equal to {@code ? extends Object})."
"ResolvableType.java:580"$0$0$0$1$4$"	 */"
"ResolvableType.java:581"$0$0$0$4$44$"	private boolean isWildcardWithoutBounds() {"
"ResolvableType.java:582"$0$0$0$5$42$"		if (this.type instanceof WildcardType) {"
"ResolvableType.java:583"$0$0$0$5$46$"			WildcardType wt = (WildcardType) this.type;"
"ResolvableType.java:584"$1$0$0$5$41$"			if (wt.getLowerBounds().length == 0) {"
"ResolvableType.java:585"$1$0$0$4$45$"				Type[] upperBounds = wt.getUpperBounds();"
"ResolvableType.java:586"$0$0$0$13$97$"				if (upperBounds.length == 0 || (upperBounds.length == 1 && Object.class == upperBounds[0])) {"
"ResolvableType.java:587"$0$0$0$2$17$"					return true;"
"ResolvableType.java:588"$0$0$0$1$5$"				}"
"ResolvableType.java:589"$0$0$0$1$4$"			}"
"ResolvableType.java:590"$0$0$0$1$3$"		}"
"ResolvableType.java:591"$0$0$0$2$15$"		return false;"
"ResolvableType.java:592"$0$0$0$1$2$"	}"
"ResolvableType.java:593"$0$0$0$0$0$""
"ResolvableType.java:594"$0$0$0$1$4$"	/**"
"ResolvableType.java:595"$0$0$0$10$68$"	 * Return a {@link ResolvableType} for the specified nesting level."
"ResolvableType.java:596"$1$0$0$7$49$"	 * See {@link #getNested(int, Map)} for details."
"ResolvableType.java:597"$0$0$0$6$41$"	 * @param nestingLevel the nesting level"
"ResolvableType.java:598"$0$0$0$9$61$"	 * @return the {@link ResolvableType} type, or {@code #NONE}"
"ResolvableType.java:599"$0$0$0$1$4$"	 */"
"ResolvableType.java:600"$1$0$0$5$52$"	public ResolvableType getNested(int nestingLevel) {"
"ResolvableType.java:601"$1$0$0$3$39$"		return getNested(nestingLevel, null);"
"ResolvableType.java:602"$0$0$0$1$2$"	}"
"ResolvableType.java:603"$0$0$0$0$0$""
"ResolvableType.java:604"$0$0$0$1$4$"	/**"
"ResolvableType.java:605"$0$0$0$10$68$"	 * Return a {@link ResolvableType} for the specified nesting level."
"ResolvableType.java:606"$0$0$0$14$90$"	 * <p>The nesting level refers to the specific generic parameter that should be returned."
"ResolvableType.java:607"$0$0$0$15$83$"	 * A nesting level of 1 indicates this type; 2 indicates the first nested generic;"
"ResolvableType.java:608"$0$0$0$15$89$"	 * 3 the second; and so on. For example, given {@code List<Set<Integer>>} level 1 refers"
"ResolvableType.java:609"$0$0$0$16$82$"	 * to the {@code List}, level 2 the {@code Set}, and level 3 the {@code Integer}."
"ResolvableType.java:610"$0$0$0$13$86$"	 * <p>The {@code typeIndexesPerLevel} map can be used to reference a specific generic"
"ResolvableType.java:611"$0$0$0$18$85$"	 * for the given level. For example, an index of 0 would refer to a {@code Map} key;"
"ResolvableType.java:612"$0$0$0$18$82$"	 * whereas, 1 would refer to the value. If the map does not contain a value for a"
"ResolvableType.java:613"$0$0$0$14$76$"	 * specific level the last generic will be used (e.g. a {@code Map} value)."
"ResolvableType.java:614"$0$0$0$12$70$"	 * <p>Nesting levels may also apply to array types; for example given"
"ResolvableType.java:615"$0$0$0$12$68$"	 * {@code String[]}, a nesting level of 2 refers to {@code String}."
"ResolvableType.java:616"$0$0$0$11$69$"	 * <p>If a type does not {@link #hasGenerics() contain} generics the"
"ResolvableType.java:617"$1$0$0$8$67$"	 * {@link #getSuperType() supertype} hierarchy will be considered."
"ResolvableType.java:618"$0$0$0$12$74$"	 * @param nestingLevel the required nesting level, indexed from 1 for the"
"ResolvableType.java:619"$0$0$0$16$76$"	 * current type, 2 for the first nested generic, 3 for the second and so on"
"ResolvableType.java:620"$0$0$0$12$77$"	 * @param typeIndexesPerLevel a map containing the generic index for a given"
"ResolvableType.java:621"$0$0$0$7$39$"	 * nesting level (may be {@code null})"
"ResolvableType.java:622"$0$0$0$12$75$"	 * @return a {@link ResolvableType} for the nested level, or {@link #NONE}"
"ResolvableType.java:623"$0$0$0$1$4$"	 */"
"ResolvableType.java:624"$1$0$0$9$105$"	public ResolvableType getNested(int nestingLevel, @Nullable Map<Integer, Integer> typeIndexesPerLevel) {"
"ResolvableType.java:625"$0$0$0$4$31$"		ResolvableType result = this;"
"ResolvableType.java:626"$0$0$0$10$43$"		for (int i = 2; i <= nestingLevel; i++) {"
"ResolvableType.java:627"$0$0$0$3$26$"			if (result.isArray()) {"
"ResolvableType.java:628"$1$0$0$3$39$"				result = result.getComponentType();"
"ResolvableType.java:629"$0$0$0$1$4$"			}"
"ResolvableType.java:630"$0$0$0$2$9$"			else {"
"ResolvableType.java:631"$0$0$1$4$27$"				// Handle derived types"
"ResolvableType.java:632"$0$0$0$7$68$"				while (result != ResolvableType.NONE && !result.hasGenerics()) {"
"ResolvableType.java:633"$1$0$0$3$36$"					result = result.getSuperType();"
"ResolvableType.java:634"$0$0$0$1$5$"				}"
"ResolvableType.java:635"$1$0$0$10$86$"				Integer index = (typeIndexesPerLevel != null ? typeIndexesPerLevel.get(i) : null);"
"ResolvableType.java:636"$1$0$0$11$70$"				index = (index == null ? result.getGenerics().length - 1 : index);"
"ResolvableType.java:637"$1$0$0$3$38$"				result = result.getGeneric(index);"
"ResolvableType.java:638"$0$0$0$1$4$"			}"
"ResolvableType.java:639"$0$0$0$1$3$"		}"
"ResolvableType.java:640"$0$0$0$2$16$"		return result;"
"ResolvableType.java:641"$0$0$0$1$2$"	}"
"ResolvableType.java:642"$0$0$0$0$0$""
"ResolvableType.java:643"$0$0$0$1$4$"	/**"
"ResolvableType.java:644"$0$0$0$11$78$"	 * Return a {@link ResolvableType} representing the generic parameter for the"
"ResolvableType.java:645"$0$0$0$12$69$"	 * given indexes. Indexes are zero based; for example given the type"
"ResolvableType.java:646"$1$0$0$9$77$"	 * {@code Map<Integer, List<String>>}, {@code getGeneric(0)} will access the"
"ResolvableType.java:647"$0$0$0$12$84$"	 * {@code Integer}. Nested generics can be accessed by specifying multiple indexes;"
"ResolvableType.java:648"$1$0$0$13$80$"	 * for example {@code getGeneric(1, 0)} will access the {@code String} from the"
"ResolvableType.java:649"$0$0$0$13$79$"	 * nested {@code List}. For convenience, if no indexes are specified the first"
"ResolvableType.java:650"$0$0$0$4$24$"	 * generic is returned."
"ResolvableType.java:651"$0$0$0$14$85$"	 * <p>If no generic is available at the specified indexes {@link #NONE} is returned."
"ResolvableType.java:652"$0$0$0$11$66$"	 * @param indexes the indexes that refer to the generic parameter"
"ResolvableType.java:653"$0$0$0$9$48$"	 * (may be omitted to return the first generic)"
"ResolvableType.java:654"$0$0$0$12$80$"	 * @return a {@link ResolvableType} for the specified generic, or {@link #NONE}"
"ResolvableType.java:655"$0$0$0$3$23$"	 * @see #hasGenerics()"
"ResolvableType.java:656"$1$0$0$3$23$"	 * @see #getGenerics()"
"ResolvableType.java:657"$0$0$0$3$32$"	 * @see #resolveGeneric(int...)"
"ResolvableType.java:658"$0$0$0$3$27$"	 * @see #resolveGenerics()"
"ResolvableType.java:659"$0$0$0$1$4$"	 */"
"ResolvableType.java:660"$1$0$0$6$61$"	public ResolvableType getGeneric(@Nullable int... indexes) {"
"ResolvableType.java:661"$1$0$0$4$44$"		ResolvableType[] generics = getGenerics();"
"ResolvableType.java:662"$0$0$0$9$47$"		if (indexes == null || indexes.length == 0) {"
"ResolvableType.java:663"$0$0$0$8$54$"			return (generics.length == 0 ? NONE : generics[0]);"
"ResolvableType.java:664"$0$0$0$1$3$"		}"
"ResolvableType.java:665"$0$0$0$4$32$"		ResolvableType generic = this;"
"ResolvableType.java:666"$0$0$0$6$29$"		for (int index : indexes) {"
"ResolvableType.java:667"$1$0$0$3$36$"			generics = generic.getGenerics();"
"ResolvableType.java:668"$0$0$0$9$47$"			if (index < 0 || index >= generics.length) {"
"ResolvableType.java:669"$0$0$0$2$16$"				return NONE;"
"ResolvableType.java:670"$0$0$0$1$4$"			}"
"ResolvableType.java:671"$0$0$0$3$29$"			generic = generics[index];"
"ResolvableType.java:672"$0$0$0$1$3$"		}"
"ResolvableType.java:673"$0$0$0$2$17$"		return generic;"
"ResolvableType.java:674"$0$0$0$1$2$"	}"
"ResolvableType.java:675"$0$0$0$0$0$""
"ResolvableType.java:676"$0$0$0$1$4$"	/**"
"ResolvableType.java:677"$0$0$0$13$100$"	 * Return an array of {@link ResolvableType ResolvableTypes} representing the generic parameters of"
"ResolvableType.java:678"$0$0$0$17$86$"	 * this type. If no generics are available an empty array is returned. If you need to"
"ResolvableType.java:679"$1$0$0$12$86$"	 * access a specific generic consider using the {@link #getGeneric(int...)} method as"
"ResolvableType.java:680"$0$0$0$10$60$"	 * it allows access to nested generics and protects against"
"ResolvableType.java:681"$0$0$0$3$39$"	 * {@code IndexOutOfBoundsExceptions}."
"ResolvableType.java:682"$0$0$0$12$98$"	 * @return an array of {@link ResolvableType ResolvableTypes} representing the generic parameters"
"ResolvableType.java:683"$0$0$0$4$24$"	 * (never {@code null})"
"ResolvableType.java:684"$0$0$0$3$23$"	 * @see #hasGenerics()"
"ResolvableType.java:685"$1$0$0$3$28$"	 * @see #getGeneric(int...)"
"ResolvableType.java:686"$0$0$0$3$32$"	 * @see #resolveGeneric(int...)"
"ResolvableType.java:687"$0$0$0$3$27$"	 * @see #resolveGenerics()"
"ResolvableType.java:688"$0$0$0$1$4$"	 */"
"ResolvableType.java:689"$1$0$0$4$40$"	public ResolvableType[] getGenerics() {"
"ResolvableType.java:690"$0$0$0$5$21$"		if (this == NONE) {"
"ResolvableType.java:691"$0$0$0$2$28$"			return EMPTY_TYPES_ARRAY;"
"ResolvableType.java:692"$0$0$0$1$3$"		}"
"ResolvableType.java:693"$0$0$0$4$44$"		ResolvableType[] generics = this.generics;"
"ResolvableType.java:694"$0$0$0$5$25$"		if (generics == null) {"
"ResolvableType.java:695"$0$0$0$5$36$"			if (this.type instanceof Class) {"
"ResolvableType.java:696"$1$0$0$5$67$"				Type[] typeParams = ((Class<?>) this.type).getTypeParameters();"
"ResolvableType.java:697"$0$0$0$4$53$"				generics = new ResolvableType[typeParams.length];"
"ResolvableType.java:698"$0$0$0$10$47$"				for (int i = 0; i < generics.length; i++) {"
"ResolvableType.java:699"$0$0$0$4$63$"					generics[i] = ResolvableType.forType(typeParams[i], this);"
"ResolvableType.java:700"$0$0$0$1$5$"				}"
"ResolvableType.java:701"$0$0$0$1$4$"			}"
"ResolvableType.java:702"$0$0$0$6$53$"			else if (this.type instanceof ParameterizedType) {"
"ResolvableType.java:703"$1$0$0$5$90$"				Type[] actualTypeArguments = ((ParameterizedType) this.type).getActualTypeArguments();"
"ResolvableType.java:704"$0$0$0$4$62$"				generics = new ResolvableType[actualTypeArguments.length];"
"ResolvableType.java:705"$0$0$0$10$58$"				for (int i = 0; i < actualTypeArguments.length; i++) {"
"ResolvableType.java:706"$0$0$0$4$74$"					generics[i] = forType(actualTypeArguments[i], this.variableResolver);"
"ResolvableType.java:707"$0$0$0$1$5$"				}"
"ResolvableType.java:708"$0$0$0$1$4$"			}"
"ResolvableType.java:709"$0$0$0$2$9$"			else {"
"ResolvableType.java:710"$1$0$0$3$43$"				generics = resolveType().getGenerics();"
"ResolvableType.java:711"$0$0$0$1$4$"			}"
"ResolvableType.java:712"$0$0$0$3$28$"			this.generics = generics;"
"ResolvableType.java:713"$0$0$0$1$3$"		}"
"ResolvableType.java:714"$0$0$0$2$18$"		return generics;"
"ResolvableType.java:715"$0$0$0$1$2$"	}"
"ResolvableType.java:716"$0$0$0$0$0$""
"ResolvableType.java:717"$0$0$0$1$4$"	/**"
"ResolvableType.java:718"$2$0$0$9$63$"	 * Convenience method that will {@link #getGenerics() get} and"
"ResolvableType.java:719"$0$0$0$6$50$"	 * {@link #resolve() resolve} generic parameters."
"ResolvableType.java:720"$0$0$0$11$72$"	 * @return an array of resolved generic parameters (the resulting array"
"ResolvableType.java:721"$0$0$0$13$74$"	 * will never be {@code null}, but it may contain {@code null} elements})"
"ResolvableType.java:722"$1$0$0$3$23$"	 * @see #getGenerics()"
"ResolvableType.java:723"$0$0$0$3$19$"	 * @see #resolve()"
"ResolvableType.java:724"$0$0$0$1$4$"	 */"
"ResolvableType.java:725"$0$0$0$4$38$"	public Class<?>[] resolveGenerics() {"
"ResolvableType.java:726"$1$0$0$4$44$"		ResolvableType[] generics = getGenerics();"
"ResolvableType.java:727"$0$0$0$5$62$"		Class<?>[] resolvedGenerics = new Class<?>[generics.length];"
"ResolvableType.java:728"$0$0$0$10$45$"		for (int i = 0; i < generics.length; i++) {"
"ResolvableType.java:729"$0$0$0$3$47$"			resolvedGenerics[i] = generics[i].resolve();"
"ResolvableType.java:730"$0$0$0$1$3$"		}"
"ResolvableType.java:731"$0$0$0$2$26$"		return resolvedGenerics;"
"ResolvableType.java:732"$0$0$0$1$2$"	}"
"ResolvableType.java:733"$0$0$0$0$0$""
"ResolvableType.java:734"$0$0$0$1$4$"	/**"
"ResolvableType.java:735"$2$0$0$11$81$"	 * Convenience method that will {@link #getGenerics() get} and {@link #resolve()"
"ResolvableType.java:736"$0$0$0$12$81$"	 * resolve} generic parameters, using the specified {@code fallback} if any type"
"ResolvableType.java:737"$0$0$0$4$23$"	 * cannot be resolved."
"ResolvableType.java:738"$0$0$0$11$65$"	 * @param fallback the fallback class to use if resolution fails"
"ResolvableType.java:739"$0$0$0$8$51$"	 * @return an array of resolved generic parameters"
"ResolvableType.java:740"$1$0$0$3$23$"	 * @see #getGenerics()"
"ResolvableType.java:741"$0$0$0$3$19$"	 * @see #resolve()"
"ResolvableType.java:742"$0$0$0$1$4$"	 */"
"ResolvableType.java:743"$0$0$0$5$55$"	public Class<?>[] resolveGenerics(Class<?> fallback) {"
"ResolvableType.java:744"$1$0$0$4$44$"		ResolvableType[] generics = getGenerics();"
"ResolvableType.java:745"$0$0$0$5$62$"		Class<?>[] resolvedGenerics = new Class<?>[generics.length];"
"ResolvableType.java:746"$0$0$0$10$45$"		for (int i = 0; i < generics.length; i++) {"
"ResolvableType.java:747"$0$0$0$3$55$"			resolvedGenerics[i] = generics[i].resolve(fallback);"
"ResolvableType.java:748"$0$0$0$1$3$"		}"
"ResolvableType.java:749"$0$0$0$2$26$"		return resolvedGenerics;"
"ResolvableType.java:750"$0$0$0$1$2$"	}"
"ResolvableType.java:751"$0$0$0$0$0$""
"ResolvableType.java:752"$0$0$0$1$4$"	/**"
"ResolvableType.java:753"$2$0$0$9$68$"	 * Convenience method that will {@link #getGeneric(int...) get} and"
"ResolvableType.java:754"$0$0$0$8$61$"	 * {@link #resolve() resolve} a specific generic parameters."
"ResolvableType.java:755"$0$0$0$11$66$"	 * @param indexes the indexes that refer to the generic parameter"
"ResolvableType.java:756"$0$0$0$9$48$"	 * (may be omitted to return the first generic)"
"ResolvableType.java:757"$0$0$0$9$52$"	 * @return a resolved {@link Class} or {@code null}"
"ResolvableType.java:758"$1$0$0$3$28$"	 * @see #getGeneric(int...)"
"ResolvableType.java:759"$0$0$0$3$19$"	 * @see #resolve()"
"ResolvableType.java:760"$0$0$0$1$4$"	 */"
"ResolvableType.java:761"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:762"$0$0$0$5$49$"	public Class<?> resolveGeneric(int... indexes) {"
"ResolvableType.java:763"$1$0$0$2$39$"		return getGeneric(indexes).resolve();"
"ResolvableType.java:764"$0$0$0$1$2$"	}"
"ResolvableType.java:765"$0$0$0$0$0$""
"ResolvableType.java:766"$0$0$0$1$4$"	/**"
"ResolvableType.java:767"$0$0$0$11$74$"	 * Resolve this type to a {@link java.lang.Class}, returning {@code null}"
"ResolvableType.java:768"$0$0$0$13$71$"	 * if the type cannot be resolved. This method will consider bounds of"
"ResolvableType.java:769"$0$0$0$9$80$"	 * {@link TypeVariable TypeVariables} and {@link WildcardType WildcardTypes} if"
"ResolvableType.java:770"$0$0$0$12$85$"	 * direct resolution fails; however, bounds of {@code Object.class} will be ignored."
"ResolvableType.java:771"$0$0$0$12$81$"	 * <p>If this method returns a non-null {@code Class} and {@link #hasGenerics()}"
"ResolvableType.java:772"$0$0$0$13$82$"	 * returns {@code false}, the given type effectively wraps a plain {@code Class},"
"ResolvableType.java:773"$0$0$0$9$61$"	 * allowing for plain {@code Class} processing if desirable."
"ResolvableType.java:774"$0$0$0$12$73$"	 * @return the resolved {@link Class}, or {@code null} if not resolvable"
"ResolvableType.java:775"$0$0$0$3$24$"	 * @see #resolve(Class)"
"ResolvableType.java:776"$0$0$0$3$32$"	 * @see #resolveGeneric(int...)"
"ResolvableType.java:777"$0$0$0$3$27$"	 * @see #resolveGenerics()"
"ResolvableType.java:778"$0$0$0$1$4$"	 */"
"ResolvableType.java:779"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:780"$0$0$0$4$28$"	public Class<?> resolve() {"
"ResolvableType.java:781"$0$0$0$2$23$"		return this.resolved;"
"ResolvableType.java:782"$0$0$0$1$2$"	}"
"ResolvableType.java:783"$0$0$0$0$0$""
"ResolvableType.java:784"$0$0$0$1$4$"	/**"
"ResolvableType.java:785"$0$0$0$11$75$"	 * Resolve this type to a {@link java.lang.Class}, returning the specified"
"ResolvableType.java:786"$0$0$0$14$85$"	 * {@code fallback} if the type cannot be resolved. This method will consider bounds"
"ResolvableType.java:787"$0$0$0$10$83$"	 * of {@link TypeVariable TypeVariables} and {@link WildcardType WildcardTypes} if"
"ResolvableType.java:788"$0$0$0$12$85$"	 * direct resolution fails; however, bounds of {@code Object.class} will be ignored."
"ResolvableType.java:789"$0$0$0$11$65$"	 * @param fallback the fallback class to use if resolution fails"
"ResolvableType.java:790"$0$0$0$10$62$"	 * @return the resolved {@link Class} or the {@code fallback}"
"ResolvableType.java:791"$0$0$0$3$19$"	 * @see #resolve()"
"ResolvableType.java:792"$0$0$0$3$32$"	 * @see #resolveGeneric(int...)"
"ResolvableType.java:793"$0$0$0$3$27$"	 * @see #resolveGenerics()"
"ResolvableType.java:794"$0$0$0$1$4$"	 */"
"ResolvableType.java:795"$0$0$0$5$45$"	public Class<?> resolve(Class<?> fallback) {"
"ResolvableType.java:796"$0$0$0$8$60$"		return (this.resolved != null ? this.resolved : fallback);"
"ResolvableType.java:797"$0$0$0$1$2$"	}"
"ResolvableType.java:798"$0$0$0$0$0$""
"ResolvableType.java:799"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:800"$0$0$0$4$34$"	private Class<?> resolveClass() {"
"ResolvableType.java:801"$0$0$0$5$40$"		if (this.type == EmptyType.INSTANCE) {"
"ResolvableType.java:802"$0$0$0$2$15$"			return null;"
"ResolvableType.java:803"$0$0$0$1$3$"		}"
"ResolvableType.java:804"$0$0$0$5$35$"		if (this.type instanceof Class) {"
"ResolvableType.java:805"$0$0$0$3$31$"			return (Class<?>) this.type;"
"ResolvableType.java:806"$0$0$0$1$3$"		}"
"ResolvableType.java:807"$0$0$0$5$46$"		if (this.type instanceof GenericArrayType) {"
"ResolvableType.java:808"$1$0$0$4$61$"			Class<?> resolvedComponent = getComponentType().resolve();"
"ResolvableType.java:809"$1$0$0$9$98$"			return (resolvedComponent != null ? Array.newInstance(resolvedComponent, 0).getClass() : null);"
"ResolvableType.java:810"$0$0$0$1$3$"		}"
"ResolvableType.java:811"$0$0$0$2$33$"		return resolveType().resolve();"
"ResolvableType.java:812"$0$0$0$1$2$"	}"
"ResolvableType.java:813"$0$0$0$0$0$""
"ResolvableType.java:814"$0$0$0$1$4$"	/**"
"ResolvableType.java:815"$0$0$0$15$87$"	 * Resolve this type by a single level, returning the resolved value or {@link #NONE}."
"ResolvableType.java:816"$0$0$0$13$87$"	 * <p>Note: The returned {@link ResolvableType} should only be used as an intermediary"
"ResolvableType.java:817"$0$0$0$6$31$"	 * as it cannot be serialized."
"ResolvableType.java:818"$0$0$0$1$4$"	 */"
"ResolvableType.java:819"$0$0$0$3$31$"	ResolvableType resolveType() {"
"ResolvableType.java:820"$0$0$0$5$47$"		if (this.type instanceof ParameterizedType) {"
"ResolvableType.java:821"$1$0$0$4$87$"			return forType(((ParameterizedType) this.type).getRawType(), this.variableResolver);"
"ResolvableType.java:822"$0$0$0$1$3$"		}"
"ResolvableType.java:823"$0$0$0$5$42$"		if (this.type instanceof WildcardType) {"
"ResolvableType.java:824"$1$0$0$5$78$"			Type resolved = resolveBounds(((WildcardType) this.type).getUpperBounds());"
"ResolvableType.java:825"$0$0$0$5$26$"			if (resolved == null) {"
"ResolvableType.java:826"$1$0$0$4$74$"				resolved = resolveBounds(((WildcardType) this.type).getLowerBounds());"
"ResolvableType.java:827"$0$0$0$1$4$"			}"
"ResolvableType.java:828"$0$0$0$3$51$"			return forType(resolved, this.variableResolver);"
"ResolvableType.java:829"$0$0$0$1$3$"		}"
"ResolvableType.java:830"$0$0$0$5$42$"		if (this.type instanceof TypeVariable) {"
"ResolvableType.java:831"$0$0$0$5$58$"			TypeVariable<?> variable = (TypeVariable<?>) this.type;"
"ResolvableType.java:832"$0$0$1$5$37$"			// Try default variable resolution"
"ResolvableType.java:833"$0$0$0$5$39$"			if (this.variableResolver != null) {"
"ResolvableType.java:834"$0$0$0$4$78$"				ResolvableType resolved = this.variableResolver.resolveVariable(variable);"
"ResolvableType.java:835"$0$0$0$5$27$"				if (resolved != null) {"
"ResolvableType.java:836"$0$0$0$2$21$"					return resolved;"
"ResolvableType.java:837"$0$0$0$1$5$"				}"
"ResolvableType.java:838"$0$0$0$1$4$"			}"
"ResolvableType.java:839"$0$0$1$4$24$"			// Fallback to bounds"
"ResolvableType.java:840"$1$0$0$3$78$"			return forType(resolveBounds(variable.getBounds()), this.variableResolver);"
"ResolvableType.java:841"$0$0$0$1$3$"		}"
"ResolvableType.java:842"$0$0$0$2$14$"		return NONE;"
"ResolvableType.java:843"$0$0$0$1$2$"	}"
"ResolvableType.java:844"$0$0$0$0$0$""
"ResolvableType.java:845"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:846"$0$0$0$5$44$"	private Type resolveBounds(Type[] bounds) {"
"ResolvableType.java:847"$0$0$0$9$56$"		if (bounds.length == 0 || bounds[0] == Object.class) {"
"ResolvableType.java:848"$0$0$0$2$15$"			return null;"
"ResolvableType.java:849"$0$0$0$1$3$"		}"
"ResolvableType.java:850"$0$0$0$2$19$"		return bounds[0];"
"ResolvableType.java:851"$0$0$0$1$2$"	}"
"ResolvableType.java:852"$0$0$0$0$0$""
"ResolvableType.java:853"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:854"$0$0$0$5$67$"	private ResolvableType resolveVariable(TypeVariable<?> variable) {"
"ResolvableType.java:855"$0$0$0$5$42$"		if (this.type instanceof TypeVariable) {"
"ResolvableType.java:856"$0$0$0$2$50$"			return resolveType().resolveVariable(variable);"
"ResolvableType.java:857"$0$0$0$1$3$"		}"
"ResolvableType.java:858"$0$0$0$5$47$"		if (this.type instanceof ParameterizedType) {"
"ResolvableType.java:859"$0$0$0$5$71$"			ParameterizedType parameterizedType = (ParameterizedType) this.type;"
"ResolvableType.java:860"$0$0$0$4$33$"			Class<?> resolved = resolve();"
"ResolvableType.java:861"$0$0$0$5$26$"			if (resolved == null) {"
"ResolvableType.java:862"$0$0$0$2$16$"				return null;"
"ResolvableType.java:863"$0$0$0$1$4$"			}"
"ResolvableType.java:864"$1$0$0$4$62$"			TypeVariable<?>[] variables = resolved.getTypeParameters();"
"ResolvableType.java:865"$0$0$0$10$47$"			for (int i = 0; i < variables.length; i++) {"
"ResolvableType.java:866"$2$0$0$4$81$"				if (ObjectUtils.nullSafeEquals(variables[i].getName(), variable.getName())) {"
"ResolvableType.java:867"$1$0$0$4$69$"					Type actualType = parameterizedType.getActualTypeArguments()[i];"
"ResolvableType.java:868"$0$0$0$3$55$"					return forType(actualType, this.variableResolver);"
"ResolvableType.java:869"$0$0$0$1$5$"				}"
"ResolvableType.java:870"$0$0$0$1$4$"			}"
"ResolvableType.java:871"$1$0$0$4$53$"			Type ownerType = parameterizedType.getOwnerType();"
"ResolvableType.java:872"$0$0$0$5$27$"			if (ownerType != null) {"
"ResolvableType.java:873"$0$0$0$3$79$"				return forType(ownerType, this.variableResolver).resolveVariable(variable);"
"ResolvableType.java:874"$0$0$0$1$4$"			}"
"ResolvableType.java:875"$0$0$0$1$3$"		}"
"ResolvableType.java:876"$0$0$0$5$42$"		if (this.type instanceof WildcardType) {"
"ResolvableType.java:877"$0$0$0$4$69$"			ResolvableType resolved = resolveType().resolveVariable(variable);"
"ResolvableType.java:878"$0$0$0$5$26$"			if (resolved != null) {"
"ResolvableType.java:879"$0$0$0$2$20$"				return resolved;"
"ResolvableType.java:880"$0$0$0$1$4$"			}"
"ResolvableType.java:881"$0$0$0$1$3$"		}"
"ResolvableType.java:882"$0$0$0$5$38$"		if (this.variableResolver != null) {"
"ResolvableType.java:883"$0$0$0$2$58$"			return this.variableResolver.resolveVariable(variable);"
"ResolvableType.java:884"$0$0$0$1$3$"		}"
"ResolvableType.java:885"$0$0$0$2$14$"		return null;"
"ResolvableType.java:886"$0$0$0$1$2$"	}"
"ResolvableType.java:887"$0$0$0$0$0$""
"ResolvableType.java:888"$0$0$0$0$0$""
"ResolvableType.java:889"$0$0$0$1$10$"	@Override"
"ResolvableType.java:890"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"ResolvableType.java:891"$0$0$0$5$22$"		if (this == other) {"
"ResolvableType.java:892"$0$0$0$2$15$"			return true;"
"ResolvableType.java:893"$0$0$0$1$3$"		}"
"ResolvableType.java:894"$0$0$0$5$43$"		if (!(other instanceof ResolvableType)) {"
"ResolvableType.java:895"$0$0$0$2$16$"			return false;"
"ResolvableType.java:896"$0$0$0$1$3$"		}"
"ResolvableType.java:897"$0$0$0$0$0$""
"ResolvableType.java:898"$0$0$0$5$52$"		ResolvableType otherType = (ResolvableType) other;"
"ResolvableType.java:899"$0$0$0$4$63$"		if (!ObjectUtils.nullSafeEquals(this.type, otherType.type)) {"
"ResolvableType.java:900"$0$0$0$2$16$"			return false;"
"ResolvableType.java:901"$0$0$0$1$3$"		}"
"ResolvableType.java:902"$0$0$0$5$52$"		if (this.typeProvider != otherType.typeProvider &&"
"ResolvableType.java:903"$0$0$0$8$67$"				(this.typeProvider == null || otherType.typeProvider == null ||"
"ResolvableType.java:904"$2$0$0$3$98$"				!ObjectUtils.nullSafeEquals(this.typeProvider.getType(), otherType.typeProvider.getType()))) {"
"ResolvableType.java:905"$0$0$0$2$16$"			return false;"
"ResolvableType.java:906"$0$0$0$1$3$"		}"
"ResolvableType.java:907"$0$0$0$5$60$"		if (this.variableResolver != otherType.variableResolver &&"
"ResolvableType.java:908"$0$0$0$8$75$"				(this.variableResolver == null || otherType.variableResolver == null ||"
"ResolvableType.java:909"$2$0$0$3$110$"				!ObjectUtils.nullSafeEquals(this.variableResolver.getSource(), otherType.variableResolver.getSource()))) {"
"ResolvableType.java:910"$0$0$0$2$16$"			return false;"
"ResolvableType.java:911"$0$0$0$1$3$"		}"
"ResolvableType.java:912"$0$0$0$4$81$"		if (!ObjectUtils.nullSafeEquals(this.componentType, otherType.componentType)) {"
"ResolvableType.java:913"$0$0$0$2$16$"			return false;"
"ResolvableType.java:914"$0$0$0$1$3$"		}"
"ResolvableType.java:915"$0$0$0$2$14$"		return true;"
"ResolvableType.java:916"$0$0$0$1$2$"	}"
"ResolvableType.java:917"$0$0$0$0$0$""
"ResolvableType.java:918"$0$0$0$1$10$"	@Override"
"ResolvableType.java:919"$0$0$0$4$24$"	public int hashCode() {"
"ResolvableType.java:920"$0$0$0$8$63$"		return (this.hash != null ? this.hash : calculateHashCode());"
"ResolvableType.java:921"$0$0$0$1$2$"	}"
"ResolvableType.java:922"$0$0$0$0$0$""
"ResolvableType.java:923"$0$0$0$4$34$"	private int calculateHashCode() {"
"ResolvableType.java:924"$0$0$0$4$57$"		int hashCode = ObjectUtils.nullSafeHashCode(this.type);"
"ResolvableType.java:925"$0$0$0$5$34$"		if (this.typeProvider != null) {"
"ResolvableType.java:926"$1$0$0$7$88$"			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.typeProvider.getType());"
"ResolvableType.java:927"$0$0$0$1$3$"		}"
"ResolvableType.java:928"$0$0$0$5$38$"		if (this.variableResolver != null) {"
"ResolvableType.java:929"$1$0$0$7$94$"			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.variableResolver.getSource());"
"ResolvableType.java:930"$0$0$0$1$3$"		}"
"ResolvableType.java:931"$0$0$0$5$35$"		if (this.componentType != null) {"
"ResolvableType.java:932"$0$0$0$7$79$"			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.componentType);"
"ResolvableType.java:933"$0$0$0$1$3$"		}"
"ResolvableType.java:934"$0$0$0$2$18$"		return hashCode;"
"ResolvableType.java:935"$0$0$0$1$2$"	}"
"ResolvableType.java:936"$0$0$0$0$0$""
"ResolvableType.java:937"$0$0$0$1$4$"	/**"
"ResolvableType.java:938"$0$0$0$9$69$"	 * Adapts this {@link ResolvableType} to a {@link VariableResolver}."
"ResolvableType.java:939"$0$0$0$1$4$"	 */"
"ResolvableType.java:940"$0$0$0$1$10$"	@Nullable"
"ResolvableType.java:941"$0$0$0$3$40$"	VariableResolver asVariableResolver() {"
"ResolvableType.java:942"$0$0$0$5$21$"		if (this == NONE) {"
"ResolvableType.java:943"$0$0$0$2$15$"			return null;"
"ResolvableType.java:944"$0$0$0$1$3$"		}"
"ResolvableType.java:945"$0$0$0$3$43$"		return new DefaultVariableResolver(this);"
"ResolvableType.java:946"$0$0$0$1$2$"	}"
"ResolvableType.java:947"$0$0$0$0$0$""
"ResolvableType.java:948"$0$0$0$1$4$"	/**"
"ResolvableType.java:949"$0$0$0$7$51$"	 * Custom serialization support for {@link #NONE}."
"ResolvableType.java:950"$0$0$0$1$4$"	 */"
"ResolvableType.java:951"$0$0$0$4$31$"	private Object readResolve() {"
"ResolvableType.java:952"$0$0$0$8$57$"		return (this.type == EmptyType.INSTANCE ? NONE : this);"
"ResolvableType.java:953"$0$0$0$1$2$"	}"
"ResolvableType.java:954"$0$0$0$0$0$""
"ResolvableType.java:955"$0$0$0$1$4$"	/**"
"ResolvableType.java:956"$0$0$0$13$74$"	 * Return a String representation of this type in its fully resolved form"
"ResolvableType.java:957"$0$0$0$5$39$"	 * (including any generic parameters)."
"ResolvableType.java:958"$0$0$0$1$4$"	 */"
"ResolvableType.java:959"$0$0$0$1$10$"	@Override"
"ResolvableType.java:960"$0$0$0$4$27$"	public String toString() {"
"ResolvableType.java:961"$0$0$0$3$18$"		if (isArray()) {"
"ResolvableType.java:962"$1$0$0$4$36$"			return getComponentType() + ""[]"";"
"ResolvableType.java:963"$0$0$0$1$3$"		}"
"ResolvableType.java:964"$0$0$0$5$30$"		if (this.resolved == null) {"
"ResolvableType.java:965"$0$0$0$2$14$"			return ""?"";"
"ResolvableType.java:966"$0$0$0$1$3$"		}"
"ResolvableType.java:967"$0$0$0$5$42$"		if (this.type instanceof TypeVariable) {"
"ResolvableType.java:968"$0$0$0$5$58$"			TypeVariable<?> variable = (TypeVariable<?>) this.type;"
"ResolvableType.java:969"$0$0$0$9$98$"			if (this.variableResolver == null || this.variableResolver.resolveVariable(variable) == null) {"
"ResolvableType.java:970"$0$0$1$8$62$"				// Don't bother with variable boundaries for toString()..."
"ResolvableType.java:971"$0$0$1$9$63$"				// Can cause infinite recursions in case of self-references"
"ResolvableType.java:972"$0$0$0$2$15$"				return ""?"";"
"ResolvableType.java:973"$0$0$0$1$4$"			}"
"ResolvableType.java:974"$0$0$0$1$3$"		}"
"ResolvableType.java:975"$0$0$0$3$22$"		if (hasGenerics()) {"
"ResolvableType.java:976"$2$0$0$10$104$"			return this.resolved.getName() + '<' + StringUtils.arrayToDelimitedString(getGenerics(), "", "") + '>';"
"ResolvableType.java:977"$0$0$0$1$3$"		}"
"ResolvableType.java:978"$1$0$0$2$33$"		return this.resolved.getName();"
"ResolvableType.java:979"$0$0$0$1$2$"	}"
"ResolvableType.java:980"$0$0$0$0$0$""
"ResolvableType.java:981"$0$0$0$0$0$""
"ResolvableType.java:982"$0$0$1$3$19$"	// Factory methods"
"ResolvableType.java:983"$0$0$0$0$0$""
"ResolvableType.java:984"$0$0$0$1$4$"	/**"
"ResolvableType.java:985"$0$0$0$10$68$"	 * Return a {@link ResolvableType} for the specified {@link Class},"
"ResolvableType.java:986"$0$0$0$10$69$"	 * using the full generic type information for assignability checks."
"ResolvableType.java:987"$0$0$0$5$68$"	 * For example: {@code ResolvableType.forClass(MyArrayList.class)}."
"ResolvableType.java:988"$0$0$0$11$70$"	 * @param clazz the class to introspect ({@code null} is semantically"
"ResolvableType.java:989"$0$0$0$10$66$"	 * equivalent to {@code Object.class} for typical use cases here)"
"ResolvableType.java:990"$0$0$0$9$60$"	 * @return a {@link ResolvableType} for the specified class"
"ResolvableType.java:991"$0$0$0$4$32$"	 * @see #forClass(Class, Class)"
"ResolvableType.java:992"$0$0$0$4$47$"	 * @see #forClassWithGenerics(Class, Class...)"
"ResolvableType.java:993"$0$0$0$1$4$"	 */"
"ResolvableType.java:994"$0$0$0$7$66$"	public static ResolvableType forClass(@Nullable Class<?> clazz) {"
"ResolvableType.java:995"$0$0$0$3$35$"		return new ResolvableType(clazz);"
"ResolvableType.java:996"$0$0$0$1$2$"	}"
"ResolvableType.java:997"$0$0$0$0$0$""
"ResolvableType.java:998"$0$0$0$1$4$"	/**"
"ResolvableType.java:999"$0$0$0$10$68$"	 * Return a {@link ResolvableType} for the specified {@link Class},"
"ResolvableType.java:1000"$0$0$0$11$71$"	 * doing assignability checks against the raw class only (analogous to"
"ResolvableType.java:1001"$0$0$0$10$71$"	 * {@link Class#isAssignableFrom}, which this serves as a wrapper for."
"ResolvableType.java:1002"$0$0$0$5$64$"	 * For example: {@code ResolvableType.forRawClass(List.class)}."
"ResolvableType.java:1003"$0$0$0$11$70$"	 * @param clazz the class to introspect ({@code null} is semantically"
"ResolvableType.java:1004"$0$0$0$10$66$"	 * equivalent to {@code Object.class} for typical use cases here)"
"ResolvableType.java:1005"$0$0$0$9$60$"	 * @return a {@link ResolvableType} for the specified class"
"ResolvableType.java:1006"$0$0$0$3$14$"	 * @since 4.2"
"ResolvableType.java:1007"$0$0$0$3$25$"	 * @see #forClass(Class)"
"ResolvableType.java:1008"$1$0$0$3$23$"	 * @see #getRawClass()"
"ResolvableType.java:1009"$0$0$0$1$4$"	 */"
"ResolvableType.java:1010"$0$0$0$7$69$"	public static ResolvableType forRawClass(@Nullable Class<?> clazz) {"
"ResolvableType.java:1011"$0$0$0$4$36$"		return new ResolvableType(clazz) {"
"ResolvableType.java:1012"$0$0$0$1$12$"			@Override"
"ResolvableType.java:1013"$1$0$0$4$42$"			public ResolvableType[] getGenerics() {"
"ResolvableType.java:1014"$0$0$0$2$29$"				return EMPTY_TYPES_ARRAY;"
"ResolvableType.java:1015"$0$0$0$1$4$"			}"
"ResolvableType.java:1016"$0$0$0$1$12$"			@Override"
"ResolvableType.java:1017"$0$0$0$5$52$"			public boolean isAssignableFrom(Class<?> other) {"
"ResolvableType.java:1018"$0$0$0$7$68$"				return (clazz == null || ClassUtils.isAssignable(clazz, other));"
"ResolvableType.java:1019"$0$0$0$1$4$"			}"
"ResolvableType.java:1020"$0$0$0$1$12$"			@Override"
"ResolvableType.java:1021"$0$0$0$5$58$"			public boolean isAssignableFrom(ResolvableType other) {"
"ResolvableType.java:1022"$0$0$0$4$42$"				Class<?> otherClass = other.resolve();"
"ResolvableType.java:1023"$0$0$0$11$97$"				return (otherClass != null && (clazz == null || ClassUtils.isAssignable(clazz, otherClass)));"
"ResolvableType.java:1024"$0$0$0$1$4$"			}"
"ResolvableType.java:1025"$0$0$0$1$4$"		};"
"ResolvableType.java:1026"$0$0$0$1$2$"	}"
"ResolvableType.java:1027"$0$0$0$0$0$""
"ResolvableType.java:1028"$0$0$0$1$4$"	/**"
"ResolvableType.java:1029"$0$0$0$10$63$"	 * Return a {@link ResolvableType} for the specified base type"
"ResolvableType.java:1030"$0$0$0$10$64$"	 * (interface or base class) with a given implementation class."
"ResolvableType.java:1031"$0$0$0$6$80$"	 * For example: {@code ResolvableType.forClass(List.class, MyArrayList.class)}."
"ResolvableType.java:1032"$0$0$0$11$60$"	 * @param baseType the base type (must not be {@code null})"
"ResolvableType.java:1033"$0$0$0$6$55$"	 * @param implementationClass the implementation class"
"ResolvableType.java:1034"$0$0$0$13$78$"	 * @return a {@link ResolvableType} for the specified base type backed by the"
"ResolvableType.java:1035"$0$0$0$4$30$"	 * given implementation class"
"ResolvableType.java:1036"$0$0$0$3$25$"	 * @see #forClass(Class)"
"ResolvableType.java:1037"$0$0$0$4$47$"	 * @see #forClassWithGenerics(Class, Class...)"
"ResolvableType.java:1038"$0$0$0$1$4$"	 */"
"ResolvableType.java:1039"$0$0$0$8$89$"	public static ResolvableType forClass(Class<?> baseType, Class<?> implementationClass) {"
"ResolvableType.java:1040"$0$0$0$7$57$"		Assert.notNull(baseType, ""Base type must not be null"");"
"ResolvableType.java:1041"$0$0$0$4$68$"		ResolvableType asType = forType(implementationClass).as(baseType);"
"ResolvableType.java:1042"$0$0$0$8$55$"		return (asType == NONE ? forType(baseType) : asType);"
"ResolvableType.java:1043"$0$0$0$1$2$"	}"
"ResolvableType.java:1044"$0$0$0$0$0$""
"ResolvableType.java:1045"$0$0$0$1$4$"	/**"
"ResolvableType.java:1046"$0$0$0$13$95$"	 * Return a {@link ResolvableType} for the specified {@link Class} with pre-declared generics."
"ResolvableType.java:1047"$0$0$0$9$55$"	 * @param clazz the class (or interface) to introspect"
"ResolvableType.java:1048"$0$0$0$8$45$"	 * @param generics the generics of the class"
"ResolvableType.java:1049"$0$0$0$11$72$"	 * @return a {@link ResolvableType} for the specific class and generics"
"ResolvableType.java:1050"$0$0$0$4$56$"	 * @see #forClassWithGenerics(Class, ResolvableType...)"
"ResolvableType.java:1051"$0$0$0$1$4$"	 */"
"ResolvableType.java:1052"$0$0$0$8$90$"	public static ResolvableType forClassWithGenerics(Class<?> clazz, Class<?>... generics) {"
"ResolvableType.java:1053"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ResolvableType.java:1054"$0$0$0$7$62$"		Assert.notNull(generics, ""Generics array must not be null"");"
"ResolvableType.java:1055"$0$0$0$5$76$"		ResolvableType[] resolvableGenerics = new ResolvableType[generics.length];"
"ResolvableType.java:1056"$0$0$0$10$45$"		for (int i = 0; i < generics.length; i++) {"
"ResolvableType.java:1057"$0$0$0$3$49$"			resolvableGenerics[i] = forClass(generics[i]);"
"ResolvableType.java:1058"$0$0$0$1$3$"		}"
"ResolvableType.java:1059"$0$0$0$3$57$"		return forClassWithGenerics(clazz, resolvableGenerics);"
"ResolvableType.java:1060"$0$0$0$1$2$"	}"
"ResolvableType.java:1061"$0$0$0$0$0$""
"ResolvableType.java:1062"$0$0$0$1$4$"	/**"
"ResolvableType.java:1063"$0$0$0$13$95$"	 * Return a {@link ResolvableType} for the specified {@link Class} with pre-declared generics."
"ResolvableType.java:1064"$0$0$0$9$55$"	 * @param clazz the class (or interface) to introspect"
"ResolvableType.java:1065"$0$0$0$8$45$"	 * @param generics the generics of the class"
"ResolvableType.java:1066"$0$0$0$11$72$"	 * @return a {@link ResolvableType} for the specific class and generics"
"ResolvableType.java:1067"$0$0$0$4$47$"	 * @see #forClassWithGenerics(Class, Class...)"
"ResolvableType.java:1068"$0$0$0$1$4$"	 */"
"ResolvableType.java:1069"$0$0$0$8$96$"	public static ResolvableType forClassWithGenerics(Class<?> clazz, ResolvableType... generics) {"
"ResolvableType.java:1070"$0$0$0$6$50$"		Assert.notNull(clazz, ""Class must not be null"");"
"ResolvableType.java:1071"$0$0$0$7$62$"		Assert.notNull(generics, ""Generics array must not be null"");"
"ResolvableType.java:1072"$1$0$0$4$58$"		TypeVariable<?>[] variables = clazz.getTypeParameters();"
"ResolvableType.java:1073"$0$0$0$8$96$"		Assert.isTrue(variables.length == generics.length, ""Mismatched number of generics specified"");"
"ResolvableType.java:1074"$0$0$0$0$0$""
"ResolvableType.java:1075"$0$0$0$5$47$"		Type[] arguments = new Type[generics.length];"
"ResolvableType.java:1076"$0$0$0$10$45$"		for (int i = 0; i < generics.length; i++) {"
"ResolvableType.java:1077"$0$0$0$4$40$"			ResolvableType generic = generics[i];"
"ResolvableType.java:1078"$1$0$0$10$64$"			Type argument = (generic != null ? generic.getType() : null);"
"ResolvableType.java:1079"$0$0$0$13$102$"			arguments[i] = (argument != null && !(argument instanceof TypeVariable) ? argument : variables[i]);"
"ResolvableType.java:1080"$0$0$0$1$3$"		}"
"ResolvableType.java:1081"$0$0$0$0$0$""
"ResolvableType.java:1082"$0$0$0$6$85$"		ParameterizedType syntheticType = new SyntheticParameterizedType(clazz, arguments);"
"ResolvableType.java:1083"$0$0$0$5$88$"		return forType(syntheticType, new TypeVariablesVariableResolver(variables, generics));"
"ResolvableType.java:1084"$0$0$0$1$2$"	}"
"ResolvableType.java:1085"$0$0$0$0$0$""
"ResolvableType.java:1086"$0$0$0$1$4$"	/**"
"ResolvableType.java:1087"$0$0$0$13$85$"	 * Return a {@link ResolvableType} for the specified instance. The instance does not"
"ResolvableType.java:1088"$0$0$0$11$84$"	 * convey generic information but if it implements {@link ResolvableTypeProvider} a"
"ResolvableType.java:1089"$0$0$0$14$80$"	 * more precise {@link ResolvableType} can be used than the simple one based on"
"ResolvableType.java:1090"$0$0$0$6$48$"	 * the {@link #forClass(Class) Class instance}."
"ResolvableType.java:1091"$0$0$0$5$32$"	 * @param instance the instance"
"ResolvableType.java:1092"$0$0$0$9$63$"	 * @return a {@link ResolvableType} for the specified instance"
"ResolvableType.java:1093"$0$0$0$3$14$"	 * @since 4.2"
"ResolvableType.java:1094"$0$0$0$3$31$"	 * @see ResolvableTypeProvider"
"ResolvableType.java:1095"$0$0$0$1$4$"	 */"
"ResolvableType.java:1096"$0$0$0$6$60$"	public static ResolvableType forInstance(Object instance) {"
"ResolvableType.java:1097"$0$0$0$6$56$"		Assert.notNull(instance, ""Instance must not be null"");"
"ResolvableType.java:1098"$0$0$0$5$51$"		if (instance instanceof ResolvableTypeProvider) {"
"ResolvableType.java:1099"$1$0$0$5$81$"			ResolvableType type = ((ResolvableTypeProvider) instance).getResolvableType();"
"ResolvableType.java:1100"$0$0$0$5$22$"			if (type != null) {"
"ResolvableType.java:1101"$0$0$0$2$16$"				return type;"
"ResolvableType.java:1102"$0$0$0$1$4$"			}"
"ResolvableType.java:1103"$0$0$0$1$3$"		}"
"ResolvableType.java:1104"$1$0$0$2$54$"		return ResolvableType.forClass(instance.getClass());"
"ResolvableType.java:1105"$0$0$0$1$2$"	}"
"ResolvableType.java:1106"$0$0$0$0$0$""
"ResolvableType.java:1107"$0$0$0$1$4$"	/**"
"ResolvableType.java:1108"$0$0$0$10$68$"	 * Return a {@link ResolvableType} for the specified {@link Field}."
"ResolvableType.java:1109"$0$0$0$6$33$"	 * @param field the source field"
"ResolvableType.java:1110"$0$0$0$9$60$"	 * @return a {@link ResolvableType} for the specified field"
"ResolvableType.java:1111"$0$0$0$4$32$"	 * @see #forField(Field, Class)"
"ResolvableType.java:1112"$0$0$0$1$4$"	 */"
"ResolvableType.java:1113"$0$0$0$6$53$"	public static ResolvableType forField(Field field) {"
"ResolvableType.java:1114"$0$0$0$6$50$"		Assert.notNull(field, ""Field must not be null"");"
"ResolvableType.java:1115"$0$0$0$5$59$"		return forType(null, new FieldTypeProvider(field), null);"
"ResolvableType.java:1116"$0$0$0$1$2$"	}"
"ResolvableType.java:1117"$0$0$0$0$0$""
"ResolvableType.java:1118"$0$0$0$1$4$"	/**"
"ResolvableType.java:1119"$0$0$0$13$80$"	 * Return a {@link ResolvableType} for the specified {@link Field} with a given"
"ResolvableType.java:1120"$0$0$0$2$19$"	 * implementation."
"ResolvableType.java:1121"$0$0$0$13$79$"	 * <p>Use this variant when the class that declares the field includes generic"
"ResolvableType.java:1122"$0$0$0$10$71$"	 * parameter variables that are satisfied by the implementation class."
"ResolvableType.java:1123"$0$0$0$6$33$"	 * @param field the source field"
"ResolvableType.java:1124"$0$0$0$6$55$"	 * @param implementationClass the implementation class"
"ResolvableType.java:1125"$0$0$0$9$60$"	 * @return a {@link ResolvableType} for the specified field"
"ResolvableType.java:1126"$0$0$0$3$25$"	 * @see #forField(Field)"
"ResolvableType.java:1127"$0$0$0$1$4$"	 */"
"ResolvableType.java:1128"$0$0$0$8$83$"	public static ResolvableType forField(Field field, Class<?> implementationClass) {"
"ResolvableType.java:1129"$0$0$0$6$50$"		Assert.notNull(field, ""Field must not be null"");"
"ResolvableType.java:1130"$1$0$0$4$84$"		ResolvableType owner = forType(implementationClass).as(field.getDeclaringClass());"
"ResolvableType.java:1131"$0$0$0$5$81$"		return forType(null, new FieldTypeProvider(field), owner.asVariableResolver());"
"ResolvableType.java:1132"$0$0$0$1$2$"	}"
"ResolvableType.java:1133"$0$0$0$0$0$""
"ResolvableType.java:1134"$0$0$0$1$4$"	/**"
"ResolvableType.java:1135"$0$0$0$13$80$"	 * Return a {@link ResolvableType} for the specified {@link Field} with a given"
"ResolvableType.java:1136"$0$0$0$2$19$"	 * implementation."
"ResolvableType.java:1137"$0$0$0$13$79$"	 * <p>Use this variant when the class that declares the field includes generic"
"ResolvableType.java:1138"$0$0$0$10$70$"	 * parameter variables that are satisfied by the implementation type."
"ResolvableType.java:1139"$0$0$0$6$33$"	 * @param field the source field"
"ResolvableType.java:1140"$0$0$0$6$53$"	 * @param implementationType the implementation type"
"ResolvableType.java:1141"$0$0$0$9$60$"	 * @return a {@link ResolvableType} for the specified field"
"ResolvableType.java:1142"$0$0$0$3$25$"	 * @see #forField(Field)"
"ResolvableType.java:1143"$0$0$0$1$4$"	 */"
"ResolvableType.java:1144"$0$0$0$9$98$"	public static ResolvableType forField(Field field, @Nullable ResolvableType implementationType) {"
"ResolvableType.java:1145"$0$0$0$6$50$"		Assert.notNull(field, ""Field must not be null"");"
"ResolvableType.java:1146"$0$0$0$10$82$"		ResolvableType owner = (implementationType != null ? implementationType : NONE);"
"ResolvableType.java:1147"$1$0$0$3$46$"		owner = owner.as(field.getDeclaringClass());"
"ResolvableType.java:1148"$0$0$0$5$81$"		return forType(null, new FieldTypeProvider(field), owner.asVariableResolver());"
"ResolvableType.java:1149"$0$0$0$1$2$"	}"
"ResolvableType.java:1150"$0$0$0$0$0$""
"ResolvableType.java:1151"$0$0$0$1$4$"	/**"
"ResolvableType.java:1152"$0$0$0$12$76$"	 * Return a {@link ResolvableType} for the specified {@link Field} with the"
"ResolvableType.java:1153"$0$0$0$4$24$"	 * given nesting level."
"ResolvableType.java:1154"$0$0$0$6$33$"	 * @param field the source field"
"ResolvableType.java:1155"$0$0$0$15$80$"	 * @param nestingLevel the nesting level (1 for the outer level; 2 for a nested"
"ResolvableType.java:1156"$0$0$0$4$22$"	 * generic type; etc)"
"ResolvableType.java:1157"$0$0$0$3$25$"	 * @see #forField(Field)"
"ResolvableType.java:1158"$0$0$0$1$4$"	 */"
"ResolvableType.java:1159"$0$0$0$8$71$"	public static ResolvableType forField(Field field, int nestingLevel) {"
"ResolvableType.java:1160"$0$0$0$6$50$"		Assert.notNull(field, ""Field must not be null"");"
"ResolvableType.java:1161"$1$0$0$5$83$"		return forType(null, new FieldTypeProvider(field), null).getNested(nestingLevel);"
"ResolvableType.java:1162"$0$0$0$1$2$"	}"
"ResolvableType.java:1163"$0$0$0$0$0$""
"ResolvableType.java:1164"$0$0$0$1$4$"	/**"
"ResolvableType.java:1165"$0$0$0$13$80$"	 * Return a {@link ResolvableType} for the specified {@link Field} with a given"
"ResolvableType.java:1166"$0$0$0$7$47$"	 * implementation and the given nesting level."
"ResolvableType.java:1167"$0$0$0$13$79$"	 * <p>Use this variant when the class that declares the field includes generic"
"ResolvableType.java:1168"$0$0$0$10$71$"	 * parameter variables that are satisfied by the implementation class."
"ResolvableType.java:1169"$0$0$0$6$33$"	 * @param field the source field"
"ResolvableType.java:1170"$0$0$0$15$80$"	 * @param nestingLevel the nesting level (1 for the outer level; 2 for a nested"
"ResolvableType.java:1171"$0$0$0$4$22$"	 * generic type; etc)"
"ResolvableType.java:1172"$0$0$0$6$55$"	 * @param implementationClass the implementation class"
"ResolvableType.java:1173"$0$0$0$9$60$"	 * @return a {@link ResolvableType} for the specified field"
"ResolvableType.java:1174"$0$0$0$3$25$"	 * @see #forField(Field)"
"ResolvableType.java:1175"$0$0$0$1$4$"	 */"
"ResolvableType.java:1176"$0$0$0$11$111$"	public static ResolvableType forField(Field field, int nestingLevel, @Nullable Class<?> implementationClass) {"
"ResolvableType.java:1177"$0$0$0$6$50$"		Assert.notNull(field, ""Field must not be null"");"
"ResolvableType.java:1178"$1$0$0$4$84$"		ResolvableType owner = forType(implementationClass).as(field.getDeclaringClass());"
"ResolvableType.java:1179"$1$0$0$5$105$"		return forType(null, new FieldTypeProvider(field), owner.asVariableResolver()).getNested(nestingLevel);"
"ResolvableType.java:1180"$0$0$0$1$2$"	}"
"ResolvableType.java:1181"$0$0$0$0$0$""
"ResolvableType.java:1182"$0$0$0$1$4$"	/**"
"ResolvableType.java:1183"$0$0$0$11$84$"	 * Return a {@link ResolvableType} for the specified {@link Constructor} parameter."
"ResolvableType.java:1184"$0$0$0$11$72$"	 * @param constructor the source constructor (must not be {@code null})"
"ResolvableType.java:1185"$0$0$0$6$45$"	 * @param parameterIndex the parameter index"
"ResolvableType.java:1186"$0$0$0$10$76$"	 * @return a {@link ResolvableType} for the specified constructor parameter"
"ResolvableType.java:1187"$0$0$0$5$58$"	 * @see #forConstructorParameter(Constructor, int, Class)"
"ResolvableType.java:1188"$0$0$0$1$4$"	 */"
"ResolvableType.java:1189"$0$0$0$8$103$"	public static ResolvableType forConstructorParameter(Constructor<?> constructor, int parameterIndex) {"
"ResolvableType.java:1190"$0$0$0$6$62$"		Assert.notNull(constructor, ""Constructor must not be null"");"
"ResolvableType.java:1191"$0$0$0$4$78$"		return forMethodParameter(new MethodParameter(constructor, parameterIndex));"
"ResolvableType.java:1192"$0$0$0$1$2$"	}"
"ResolvableType.java:1193"$0$0$0$0$0$""
"ResolvableType.java:1194"$0$0$0$1$4$"	/**"
"ResolvableType.java:1195"$0$0$0$11$83$"	 * Return a {@link ResolvableType} for the specified {@link Constructor} parameter"
"ResolvableType.java:1196"$0$0$0$14$82$"	 * with a given implementation. Use this variant when the class that declares the"
"ResolvableType.java:1197"$0$0$0$11$78$"	 * constructor includes generic parameter variables that are satisfied by the"
"ResolvableType.java:1198"$0$0$0$3$25$"	 * implementation class."
"ResolvableType.java:1199"$0$0$0$11$72$"	 * @param constructor the source constructor (must not be {@code null})"
"ResolvableType.java:1200"$0$0$0$6$45$"	 * @param parameterIndex the parameter index"
"ResolvableType.java:1201"$0$0$0$6$55$"	 * @param implementationClass the implementation class"
"ResolvableType.java:1202"$0$0$0$10$76$"	 * @return a {@link ResolvableType} for the specified constructor parameter"
"ResolvableType.java:1203"$0$0$0$4$51$"	 * @see #forConstructorParameter(Constructor, int)"
"ResolvableType.java:1204"$0$0$0$1$4$"	 */"
"ResolvableType.java:1205"$0$0$0$7$101$"	public static ResolvableType forConstructorParameter(Constructor<?> constructor, int parameterIndex,"
"ResolvableType.java:1206"$0$0$0$3$34$"			Class<?> implementationClass) {"
"ResolvableType.java:1207"$0$0$0$0$0$""
"ResolvableType.java:1208"$0$0$0$6$62$"		Assert.notNull(constructor, ""Constructor must not be null"");"
"ResolvableType.java:1209"$0$0$0$7$106$"		MethodParameter methodParameter = new MethodParameter(constructor, parameterIndex, implementationClass);"
"ResolvableType.java:1210"$0$0$0$2$45$"		return forMethodParameter(methodParameter);"
"ResolvableType.java:1211"$0$0$0$1$2$"	}"
"ResolvableType.java:1212"$0$0$0$0$0$""
"ResolvableType.java:1213"$0$0$0$1$4$"	/**"
"ResolvableType.java:1214"$0$0$0$12$81$"	 * Return a {@link ResolvableType} for the specified {@link Method} return type."
"ResolvableType.java:1215"$0$0$0$10$55$"	 * @param method the source for the method return type"
"ResolvableType.java:1216"$0$0$0$10$68$"	 * @return a {@link ResolvableType} for the specified method return"
"ResolvableType.java:1217"$0$0$0$4$44$"	 * @see #forMethodReturnType(Method, Class)"
"ResolvableType.java:1218"$0$0$0$1$4$"	 */"
"ResolvableType.java:1219"$0$0$0$6$66$"	public static ResolvableType forMethodReturnType(Method method) {"
"ResolvableType.java:1220"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ResolvableType.java:1221"$0$0$0$4$61$"		return forMethodParameter(new MethodParameter(method, -1));"
"ResolvableType.java:1222"$0$0$0$1$2$"	}"
"ResolvableType.java:1223"$0$0$0$0$0$""
"ResolvableType.java:1224"$0$0$0$1$4$"	/**"
"ResolvableType.java:1225"$0$0$0$12$81$"	 * Return a {@link ResolvableType} for the specified {@link Method} return type."
"ResolvableType.java:1226"$0$0$0$13$77$"	 * Use this variant when the class that declares the method includes generic"
"ResolvableType.java:1227"$0$0$0$10$71$"	 * parameter variables that are satisfied by the implementation class."
"ResolvableType.java:1228"$0$0$0$10$55$"	 * @param method the source for the method return type"
"ResolvableType.java:1229"$0$0$0$6$55$"	 * @param implementationClass the implementation class"
"ResolvableType.java:1230"$0$0$0$10$68$"	 * @return a {@link ResolvableType} for the specified method return"
"ResolvableType.java:1231"$0$0$0$3$37$"	 * @see #forMethodReturnType(Method)"
"ResolvableType.java:1232"$0$0$0$1$4$"	 */"
"ResolvableType.java:1233"$0$0$0$8$96$"	public static ResolvableType forMethodReturnType(Method method, Class<?> implementationClass) {"
"ResolvableType.java:1234"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ResolvableType.java:1235"$0$0$0$7$89$"		MethodParameter methodParameter = new MethodParameter(method, -1, implementationClass);"
"ResolvableType.java:1236"$0$0$0$2$45$"		return forMethodParameter(methodParameter);"
"ResolvableType.java:1237"$0$0$0$1$2$"	}"
"ResolvableType.java:1238"$0$0$0$0$0$""
"ResolvableType.java:1239"$0$0$0$1$4$"	/**"
"ResolvableType.java:1240"$0$0$0$11$79$"	 * Return a {@link ResolvableType} for the specified {@link Method} parameter."
"ResolvableType.java:1241"$0$0$0$11$62$"	 * @param method the source method (must not be {@code null})"
"ResolvableType.java:1242"$0$0$0$6$45$"	 * @param parameterIndex the parameter index"
"ResolvableType.java:1243"$0$0$0$10$71$"	 * @return a {@link ResolvableType} for the specified method parameter"
"ResolvableType.java:1244"$0$0$0$5$48$"	 * @see #forMethodParameter(Method, int, Class)"
"ResolvableType.java:1245"$0$0$0$3$45$"	 * @see #forMethodParameter(MethodParameter)"
"ResolvableType.java:1246"$0$0$0$1$4$"	 */"
"ResolvableType.java:1247"$0$0$0$8$85$"	public static ResolvableType forMethodParameter(Method method, int parameterIndex) {"
"ResolvableType.java:1248"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ResolvableType.java:1249"$0$0$0$4$73$"		return forMethodParameter(new MethodParameter(method, parameterIndex));"
"ResolvableType.java:1250"$0$0$0$1$2$"	}"
"ResolvableType.java:1251"$0$0$0$0$0$""
"ResolvableType.java:1252"$0$0$0$1$4$"	/**"
"ResolvableType.java:1253"$0$0$0$13$85$"	 * Return a {@link ResolvableType} for the specified {@link Method} parameter with a"
"ResolvableType.java:1254"$0$0$0$13$82$"	 * given implementation. Use this variant when the class that declares the method"
"ResolvableType.java:1255"$0$0$0$12$88$"	 * includes generic parameter variables that are satisfied by the implementation class."
"ResolvableType.java:1256"$0$0$0$11$62$"	 * @param method the source method (must not be {@code null})"
"ResolvableType.java:1257"$0$0$0$6$45$"	 * @param parameterIndex the parameter index"
"ResolvableType.java:1258"$0$0$0$6$55$"	 * @param implementationClass the implementation class"
"ResolvableType.java:1259"$0$0$0$10$71$"	 * @return a {@link ResolvableType} for the specified method parameter"
"ResolvableType.java:1260"$0$0$0$5$48$"	 * @see #forMethodParameter(Method, int, Class)"
"ResolvableType.java:1261"$0$0$0$3$45$"	 * @see #forMethodParameter(MethodParameter)"
"ResolvableType.java:1262"$0$0$0$1$4$"	 */"
"ResolvableType.java:1263"$0$0$0$10$115$"	public static ResolvableType forMethodParameter(Method method, int parameterIndex, Class<?> implementationClass) {"
"ResolvableType.java:1264"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"ResolvableType.java:1265"$0$0$0$7$101$"		MethodParameter methodParameter = new MethodParameter(method, parameterIndex, implementationClass);"
"ResolvableType.java:1266"$0$0$0$2$45$"		return forMethodParameter(methodParameter);"
"ResolvableType.java:1267"$0$0$0$1$2$"	}"
"ResolvableType.java:1268"$0$0$0$0$0$""
"ResolvableType.java:1269"$0$0$0$1$4$"	/**"
"ResolvableType.java:1270"$0$0$0$10$78$"	 * Return a {@link ResolvableType} for the specified {@link MethodParameter}."
"ResolvableType.java:1271"$0$0$0$12$81$"	 * @param methodParameter the source method parameter (must not be {@code null})"
"ResolvableType.java:1272"$0$0$0$10$71$"	 * @return a {@link ResolvableType} for the specified method parameter"
"ResolvableType.java:1273"$0$0$0$4$41$"	 * @see #forMethodParameter(Method, int)"
"ResolvableType.java:1274"$0$0$0$1$4$"	 */"
"ResolvableType.java:1275"$0$0$0$6$83$"	public static ResolvableType forMethodParameter(MethodParameter methodParameter) {"
"ResolvableType.java:1276"$0$0$0$4$58$"		return forMethodParameter(methodParameter, (Type) null);"
"ResolvableType.java:1277"$0$0$0$1$2$"	}"
"ResolvableType.java:1278"$0$0$0$0$0$""
"ResolvableType.java:1279"$0$0$0$1$4$"	/**"
"ResolvableType.java:1280"$0$0$0$12$84$"	 * Return a {@link ResolvableType} for the specified {@link MethodParameter} with a"
"ResolvableType.java:1281"$0$0$0$14$87$"	 * given implementation type. Use this variant when the class that declares the method"
"ResolvableType.java:1282"$0$0$0$12$87$"	 * includes generic parameter variables that are satisfied by the implementation type."
"ResolvableType.java:1283"$0$0$0$12$81$"	 * @param methodParameter the source method parameter (must not be {@code null})"
"ResolvableType.java:1284"$0$0$0$6$53$"	 * @param implementationType the implementation type"
"ResolvableType.java:1285"$0$0$0$10$71$"	 * @return a {@link ResolvableType} for the specified method parameter"
"ResolvableType.java:1286"$0$0$0$3$45$"	 * @see #forMethodParameter(MethodParameter)"
"ResolvableType.java:1287"$0$0$0$1$4$"	 */"
"ResolvableType.java:1288"$0$0$0$5$81$"	public static ResolvableType forMethodParameter(MethodParameter methodParameter,"
"ResolvableType.java:1289"$0$0$0$4$49$"			@Nullable ResolvableType implementationType) {"
"ResolvableType.java:1290"$0$0$0$0$0$""
"ResolvableType.java:1291"$0$0$0$6$70$"		Assert.notNull(methodParameter, ""MethodParameter must not be null"");"
"ResolvableType.java:1292"$0$0$0$8$73$"		implementationType = (implementationType != null ? implementationType :"
"ResolvableType.java:1293"$1$0$0$1$51$"				forType(methodParameter.getContainingClass()));"
"ResolvableType.java:1294"$1$0$0$4$84$"		ResolvableType owner = implementationType.as(methodParameter.getDeclaringClass());"
"ResolvableType.java:1295"$0$0$0$5$101$"		return forType(null, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver())."
"ResolvableType.java:1296"$2$0$0$2$86$"				getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);"
"ResolvableType.java:1297"$0$0$0$1$2$"	}"
"ResolvableType.java:1298"$0$0$0$0$0$""
"ResolvableType.java:1299"$0$0$0$1$4$"	/**"
"ResolvableType.java:1300"$0$0$0$10$78$"	 * Return a {@link ResolvableType} for the specified {@link MethodParameter},"
"ResolvableType.java:1301"$1$0$0$12$69$"	 * overriding the target type to resolve with a specific given type."
"ResolvableType.java:1302"$0$0$0$12$81$"	 * @param methodParameter the source method parameter (must not be {@code null})"
"ResolvableType.java:1303"$1$0$0$14$81$"	 * @param targetType the type to resolve (a part of the method parameter's type)"
"ResolvableType.java:1304"$0$0$0$10$71$"	 * @return a {@link ResolvableType} for the specified method parameter"
"ResolvableType.java:1305"$0$0$0$4$41$"	 * @see #forMethodParameter(Method, int)"
"ResolvableType.java:1306"$0$0$0$1$4$"	 */"
"ResolvableType.java:1307"$1$0$0$9$110$"	public static ResolvableType forMethodParameter(MethodParameter methodParameter, @Nullable Type targetType) {"
"ResolvableType.java:1308"$0$0$0$6$70$"		Assert.notNull(methodParameter, ""MethodParameter must not be null"");"
"ResolvableType.java:1309"$2$0$0$4$92$"		return forMethodParameter(methodParameter, targetType, methodParameter.getNestingLevel());"
"ResolvableType.java:1310"$0$0$0$1$2$"	}"
"ResolvableType.java:1311"$0$0$0$0$0$""
"ResolvableType.java:1312"$0$0$0$1$4$"	/**"
"ResolvableType.java:1313"$0$0$0$11$80$"	 * Return a {@link ResolvableType} for the specified {@link MethodParameter} at"
"ResolvableType.java:1314"$1$0$0$14$83$"	 * a specific nesting level, overriding the target type to resolve with a specific"
"ResolvableType.java:1315"$0$0$0$3$15$"	 * given type."
"ResolvableType.java:1316"$0$0$0$12$81$"	 * @param methodParameter the source method parameter (must not be {@code null})"
"ResolvableType.java:1317"$1$0$0$14$81$"	 * @param targetType the type to resolve (a part of the method parameter's type)"
"ResolvableType.java:1318"$0$0$0$8$48$"	 * @param nestingLevel the nesting level to use"
"ResolvableType.java:1319"$0$0$0$10$71$"	 * @return a {@link ResolvableType} for the specified method parameter"
"ResolvableType.java:1320"$0$0$0$3$14$"	 * @since 5.2"
"ResolvableType.java:1321"$0$0$0$4$41$"	 * @see #forMethodParameter(Method, int)"
"ResolvableType.java:1322"$0$0$0$1$4$"	 */"
"ResolvableType.java:1323"$0$0$0$3$42$"	static ResolvableType forMethodParameter("
"ResolvableType.java:1324"$1$0$0$8$82$"			MethodParameter methodParameter, @Nullable Type targetType, int nestingLevel) {"
"ResolvableType.java:1325"$0$0$0$0$0$""
"ResolvableType.java:1326"$2$0$0$4$111$"		ResolvableType owner = forType(methodParameter.getContainingClass()).as(methodParameter.getDeclaringClass());"
"ResolvableType.java:1327"$1$0$0$5$107$"		return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver())."
"ResolvableType.java:1328"$1$0$0$2$65$"				getNested(nestingLevel, methodParameter.typeIndexesPerLevel);"
"ResolvableType.java:1329"$0$0$0$1$2$"	}"
"ResolvableType.java:1330"$0$0$0$0$0$""
"ResolvableType.java:1331"$0$0$0$1$4$"	/**"
"ResolvableType.java:1332"$0$0$0$13$86$"	 * Return a {@link ResolvableType} as a array of the specified {@code componentType}."
"ResolvableType.java:1333"$0$0$0$6$43$"	 * @param componentType the component type"
"ResolvableType.java:1334"$0$0$0$13$80$"	 * @return a {@link ResolvableType} as an array of the specified component type"
"ResolvableType.java:1335"$0$0$0$1$4$"	 */"
"ResolvableType.java:1336"$0$0$0$6$79$"	public static ResolvableType forArrayComponent(ResolvableType componentType) {"
"ResolvableType.java:1337"$0$0$0$7$67$"		Assert.notNull(componentType, ""Component type must not be null"");"
"ResolvableType.java:1338"$1$0$0$5$81$"		Class<?> arrayClass = Array.newInstance(componentType.resolve(), 0).getClass();"
"ResolvableType.java:1339"$0$0$0$6$67$"		return new ResolvableType(arrayClass, null, null, componentType);"
"ResolvableType.java:1340"$0$0$0$1$2$"	}"
"ResolvableType.java:1341"$0$0$0$0$0$""
"ResolvableType.java:1342"$0$0$0$1$4$"	/**"
"ResolvableType.java:1343"$0$0$0$10$67$"	 * Return a {@link ResolvableType} for the specified {@link Type}."
"ResolvableType.java:1344"$0$0$0$12$91$"	 * <p>Note: The resulting {@link ResolvableType} instance may not be {@link Serializable}."
"ResolvableType.java:1345"$0$0$0$9$58$"	 * @param type the source type (potentially {@code null})"
"ResolvableType.java:1346"$0$0$0$10$67$"	 * @return a {@link ResolvableType} for the specified {@link Type}"
"ResolvableType.java:1347"$0$0$0$4$39$"	 * @see #forType(Type, ResolvableType)"
"ResolvableType.java:1348"$0$0$0$1$4$"	 */"
"ResolvableType.java:1349"$0$0$0$7$60$"	public static ResolvableType forType(@Nullable Type type) {"
"ResolvableType.java:1350"$0$0$0$4$35$"		return forType(type, null, null);"
"ResolvableType.java:1351"$0$0$0$1$2$"	}"
"ResolvableType.java:1352"$0$0$0$0$0$""
"ResolvableType.java:1353"$0$0$0$1$4$"	/**"
"ResolvableType.java:1354"$0$0$0$14$86$"	 * Return a {@link ResolvableType} for the specified {@link Type} backed by the given"
"ResolvableType.java:1355"$0$0$0$3$15$"	 * owner type."
"ResolvableType.java:1356"$0$0$0$12$91$"	 * <p>Note: The resulting {@link ResolvableType} instance may not be {@link Serializable}."
"ResolvableType.java:1357"$0$0$0$9$47$"	 * @param type the source type or {@code null}"
"ResolvableType.java:1358"$0$0$0$10$57$"	 * @param owner the owner type used to resolve variables"
"ResolvableType.java:1359"$0$0$0$12$77$"	 * @return a {@link ResolvableType} for the specified {@link Type} and owner"
"ResolvableType.java:1360"$0$0$0$3$23$"	 * @see #forType(Type)"
"ResolvableType.java:1361"$0$0$0$1$4$"	 */"
"ResolvableType.java:1362"$0$0$0$10$92$"	public static ResolvableType forType(@Nullable Type type, @Nullable ResolvableType owner) {"
"ResolvableType.java:1363"$0$0$0$4$43$"		VariableResolver variableResolver = null;"
"ResolvableType.java:1364"$0$0$0$5$22$"		if (owner != null) {"
"ResolvableType.java:1365"$0$0$0$3$49$"			variableResolver = owner.asVariableResolver();"
"ResolvableType.java:1366"$0$0$0$1$3$"		}"
"ResolvableType.java:1367"$0$0$0$3$41$"		return forType(type, variableResolver);"
"ResolvableType.java:1368"$0$0$0$1$2$"	}"
"ResolvableType.java:1369"$0$0$0$0$0$""
"ResolvableType.java:1370"$0$0$0$0$0$""
"ResolvableType.java:1371"$0$0$0$1$4$"	/**"
"ResolvableType.java:1372"$0$0$0$10$89$"	 * Return a {@link ResolvableType} for the specified {@link ParameterizedTypeReference}."
"ResolvableType.java:1373"$0$0$0$12$91$"	 * <p>Note: The resulting {@link ResolvableType} instance may not be {@link Serializable}."
"ResolvableType.java:1374"$0$0$0$11$69$"	 * @param typeReference the reference to obtain the source type from"
"ResolvableType.java:1375"$0$0$0$10$89$"	 * @return a {@link ResolvableType} for the specified {@link ParameterizedTypeReference}"
"ResolvableType.java:1376"$0$0$0$3$17$"	 * @since 4.3.12"
"ResolvableType.java:1377"$0$0$0$3$23$"	 * @see #forType(Type)"
"ResolvableType.java:1378"$0$0$0$1$4$"	 */"
"ResolvableType.java:1379"$0$0$0$6$84$"	public static ResolvableType forType(ParameterizedTypeReference<?> typeReference) {"
"ResolvableType.java:1380"$1$0$0$4$54$"		return forType(typeReference.getType(), null, null);"
"ResolvableType.java:1381"$0$0$0$1$2$"	}"
"ResolvableType.java:1382"$0$0$0$0$0$""
"ResolvableType.java:1383"$0$0$0$1$4$"	/**"
"ResolvableType.java:1384"$0$0$0$14$84$"	 * Return a {@link ResolvableType} for the specified {@link Type} backed by a given"
"ResolvableType.java:1385"$0$0$0$3$29$"	 * {@link VariableResolver}."
"ResolvableType.java:1386"$0$0$0$9$47$"	 * @param type the source type or {@code null}"
"ResolvableType.java:1387"$0$0$0$9$65$"	 * @param variableResolver the variable resolver or {@code null}"
"ResolvableType.java:1388"$0$0$0$13$96$"	 * @return a {@link ResolvableType} for the specified {@link Type} and {@link VariableResolver}"
"ResolvableType.java:1389"$0$0$0$1$4$"	 */"
"ResolvableType.java:1390"$0$0$0$9$98$"	static ResolvableType forType(@Nullable Type type, @Nullable VariableResolver variableResolver) {"
"ResolvableType.java:1391"$0$0$0$4$47$"		return forType(type, null, variableResolver);"
"ResolvableType.java:1392"$0$0$0$1$2$"	}"
"ResolvableType.java:1393"$0$0$0$0$0$""
"ResolvableType.java:1394"$0$0$0$1$4$"	/**"
"ResolvableType.java:1395"$0$0$0$14$84$"	 * Return a {@link ResolvableType} for the specified {@link Type} backed by a given"
"ResolvableType.java:1396"$0$0$0$3$29$"	 * {@link VariableResolver}."
"ResolvableType.java:1397"$0$0$0$9$47$"	 * @param type the source type or {@code null}"
"ResolvableType.java:1398"$0$0$0$9$57$"	 * @param typeProvider the type provider or {@code null}"
"ResolvableType.java:1399"$0$0$0$9$65$"	 * @param variableResolver the variable resolver or {@code null}"
"ResolvableType.java:1400"$0$0$0$13$96$"	 * @return a {@link ResolvableType} for the specified {@link Type} and {@link VariableResolver}"
"ResolvableType.java:1401"$0$0$0$1$4$"	 */"
"ResolvableType.java:1402"$0$0$0$3$31$"	static ResolvableType forType("
"ResolvableType.java:1403"$0$0$0$10$107$"			@Nullable Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {"
"ResolvableType.java:1404"$0$0$0$0$0$""
"ResolvableType.java:1405"$0$0$0$9$45$"		if (type == null && typeProvider != null) {"
"ResolvableType.java:1406"$0$0$0$3$64$"			type = SerializableTypeWrapper.forTypeProvider(typeProvider);"
"ResolvableType.java:1407"$0$0$0$1$3$"		}"
"ResolvableType.java:1408"$0$0$0$5$21$"		if (type == null) {"
"ResolvableType.java:1409"$0$0$0$2$15$"			return NONE;"
"ResolvableType.java:1410"$0$0$0$1$3$"		}"
"ResolvableType.java:1411"$0$0$0$0$0$""
"ResolvableType.java:1412"$0$0$1$11$64$"		// For simple Class references, build the wrapper right away -"
"ResolvableType.java:1413"$0$0$1$9$63$"		// no expensive resolution necessary, so not worth caching..."
"ResolvableType.java:1414"$0$0$0$5$30$"		if (type instanceof Class) {"
"ResolvableType.java:1415"$0$0$0$7$90$"			return new ResolvableType(type, typeProvider, variableResolver, (ResolvableType) null);"
"ResolvableType.java:1416"$0$0$0$1$3$"		}"
"ResolvableType.java:1417"$0$0$0$0$0$""
"ResolvableType.java:1418"$0$0$1$16$85$"		// Purge empty entries on access since we don't have a clean-up thread or the like."
"ResolvableType.java:1419"$0$0$0$1$35$"		cache.purgeUnreferencedEntries();"
"ResolvableType.java:1420"$0$0$0$0$0$""
"ResolvableType.java:1421"$0$0$1$15$85$"		// Check the cache - we may have a ResolvableType which has been resolved before..."
"ResolvableType.java:1422"$0$0$0$7$87$"		ResolvableType resultType = new ResolvableType(type, typeProvider, variableResolver);"
"ResolvableType.java:1423"$1$0$0$4$52$"		ResolvableType cachedType = cache.get(resultType);"
"ResolvableType.java:1424"$0$0$0$5$27$"		if (cachedType == null) {"
"ResolvableType.java:1425"$0$0$0$7$90$"			cachedType = new ResolvableType(type, typeProvider, variableResolver, resultType.hash);"
"ResolvableType.java:1426"$0$0$0$2$37$"			cache.put(cachedType, cachedType);"
"ResolvableType.java:1427"$0$0$0$1$3$"		}"
"ResolvableType.java:1428"$0$0$0$3$44$"		resultType.resolved = cachedType.resolved;"
"ResolvableType.java:1429"$0$0$0$2$20$"		return resultType;"
"ResolvableType.java:1430"$0$0$0$1$2$"	}"
"ResolvableType.java:1431"$0$0$0$0$0$""
"ResolvableType.java:1432"$0$0$0$1$4$"	/**"
"ResolvableType.java:1433"$0$0$0$8$84$"	 * Clear the internal {@code ResolvableType}/{@code SerializableTypeWrapper} cache."
"ResolvableType.java:1434"$0$0$0$3$14$"	 * @since 4.2"
"ResolvableType.java:1435"$0$0$0$1$4$"	 */"
"ResolvableType.java:1436"$0$0$0$5$34$"	public static void clearCache() {"
"ResolvableType.java:1437"$0$0$0$1$16$"		cache.clear();"
"ResolvableType.java:1438"$0$0$0$1$40$"		SerializableTypeWrapper.cache.clear();"
"ResolvableType.java:1439"$0$0$0$1$2$"	}"
"ResolvableType.java:1440"$0$0$0$0$0$""
"ResolvableType.java:1441"$0$0$0$0$0$""
"ResolvableType.java:1442"$0$0$0$1$4$"	/**"
"ResolvableType.java:1443"$0$0$0$9$74$"	 * Strategy interface used to resolve {@link TypeVariable TypeVariables}."
"ResolvableType.java:1444"$0$0$0$1$4$"	 */"
"ResolvableType.java:1445"$0$0$0$5$50$"	interface VariableResolver extends Serializable {"
"ResolvableType.java:1446"$0$0$0$0$0$""
"ResolvableType.java:1447"$0$0$0$1$5$"		/**"
"ResolvableType.java:1448"$0$0$0$12$70$"		 * Return the source of the resolver (used for hashCode and equals)."
"ResolvableType.java:1449"$0$0$0$1$5$"		 */"
"ResolvableType.java:1450"$1$0$0$2$21$"		Object getSource();"
"ResolvableType.java:1451"$0$0$0$0$0$""
"ResolvableType.java:1452"$0$0$0$1$5$"		/**"
"ResolvableType.java:1453"$0$0$0$5$36$"		 * Resolve the specified variable."
"ResolvableType.java:1454"$0$0$0$7$44$"		 * @param variable the variable to resolve"
"ResolvableType.java:1455"$0$0$0$11$64$"		 * @return the resolved variable, or {@code null} if not found"
"ResolvableType.java:1456"$0$0$0$1$5$"		 */"
"ResolvableType.java:1457"$0$0$0$1$11$"		@Nullable"
"ResolvableType.java:1458"$0$0$0$3$59$"		ResolvableType resolveVariable(TypeVariable<?> variable);"
"ResolvableType.java:1459"$0$0$0$1$2$"	}"
"ResolvableType.java:1460"$0$0$0$0$0$""
"ResolvableType.java:1461"$0$0$0$0$0$""
"ResolvableType.java:1462"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"ResolvableType.java:1463"$0$0$0$7$75$"	private static class DefaultVariableResolver implements VariableResolver {"
"ResolvableType.java:1464"$0$0$0$0$0$""
"ResolvableType.java:1465"$0$0$0$4$38$"		private final ResolvableType source;"
"ResolvableType.java:1466"$0$0$0$0$0$""
"ResolvableType.java:1467"$0$0$0$3$58$"		DefaultVariableResolver(ResolvableType resolvableType) {"
"ResolvableType.java:1468"$0$0$0$3$32$"			this.source = resolvableType;"
"ResolvableType.java:1469"$0$0$0$1$3$"		}"
"ResolvableType.java:1470"$0$0$0$0$0$""
"ResolvableType.java:1471"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1472"$0$0$0$1$11$"		@Nullable"
"ResolvableType.java:1473"$0$0$0$5$67$"		public ResolvableType resolveVariable(TypeVariable<?> variable) {"
"ResolvableType.java:1474"$0$0$0$2$48$"			return this.source.resolveVariable(variable);"
"ResolvableType.java:1475"$0$0$0$1$3$"		}"
"ResolvableType.java:1476"$0$0$0$0$0$""
"ResolvableType.java:1477"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1478"$1$0$0$4$29$"		public Object getSource() {"
"ResolvableType.java:1479"$0$0$0$2$22$"			return this.source;"
"ResolvableType.java:1480"$0$0$0$1$3$"		}"
"ResolvableType.java:1481"$0$0$0$1$2$"	}"
"ResolvableType.java:1482"$0$0$0$0$0$""
"ResolvableType.java:1483"$0$0$0$0$0$""
"ResolvableType.java:1484"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"ResolvableType.java:1485"$0$0$0$7$81$"	private static class TypeVariablesVariableResolver implements VariableResolver {"
"ResolvableType.java:1486"$0$0$0$0$0$""
"ResolvableType.java:1487"$0$0$0$4$44$"		private final TypeVariable<?>[] variables;"
"ResolvableType.java:1488"$0$0$0$0$0$""
"ResolvableType.java:1489"$0$0$0$4$42$"		private final ResolvableType[] generics;"
"ResolvableType.java:1490"$0$0$0$0$0$""
"ResolvableType.java:1491"$0$0$0$6$96$"		public TypeVariablesVariableResolver(TypeVariable<?>[] variables, ResolvableType[] generics) {"
"ResolvableType.java:1492"$0$0$0$3$30$"			this.variables = variables;"
"ResolvableType.java:1493"$0$0$0$3$28$"			this.generics = generics;"
"ResolvableType.java:1494"$0$0$0$1$3$"		}"
"ResolvableType.java:1495"$0$0$0$0$0$""
"ResolvableType.java:1496"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1497"$0$0$0$1$11$"		@Nullable"
"ResolvableType.java:1498"$0$0$0$5$67$"		public ResolvableType resolveVariable(TypeVariable<?> variable) {"
"ResolvableType.java:1499"$0$0$0$4$80$"			TypeVariable<?> variableToCompare = SerializableTypeWrapper.unwrap(variable);"
"ResolvableType.java:1500"$0$0$0$10$52$"			for (int i = 0; i < this.variables.length; i++) {"
"ResolvableType.java:1501"$0$0$0$4$89$"				TypeVariable<?> resolvedVariable = SerializableTypeWrapper.unwrap(this.variables[i]);"
"ResolvableType.java:1502"$0$0$0$4$74$"				if (ObjectUtils.nullSafeEquals(resolvedVariable, variableToCompare)) {"
"ResolvableType.java:1503"$0$0$0$2$29$"					return this.generics[i];"
"ResolvableType.java:1504"$0$0$0$1$5$"				}"
"ResolvableType.java:1505"$0$0$0$1$4$"			}"
"ResolvableType.java:1506"$0$0$0$2$15$"			return null;"
"ResolvableType.java:1507"$0$0$0$1$3$"		}"
"ResolvableType.java:1508"$0$0$0$0$0$""
"ResolvableType.java:1509"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1510"$1$0$0$4$29$"		public Object getSource() {"
"ResolvableType.java:1511"$0$0$0$2$24$"			return this.generics;"
"ResolvableType.java:1512"$0$0$0$1$3$"		}"
"ResolvableType.java:1513"$0$0$0$1$2$"	}"
"ResolvableType.java:1514"$0$0$0$0$0$""
"ResolvableType.java:1515"$0$0$0$0$0$""
"ResolvableType.java:1516"$0$0$0$9$99$"	private static final class SyntheticParameterizedType implements ParameterizedType, Serializable {"
"ResolvableType.java:1517"$0$0$0$0$0$""
"ResolvableType.java:1518"$0$0$0$4$29$"		private final Type rawType;"
"ResolvableType.java:1519"$0$0$0$0$0$""
"ResolvableType.java:1520"$0$0$0$4$37$"		private final Type[] typeArguments;"
"ResolvableType.java:1521"$0$0$0$0$0$""
"ResolvableType.java:1522"$0$0$0$6$73$"		public SyntheticParameterizedType(Type rawType, Type[] typeArguments) {"
"ResolvableType.java:1523"$0$0$0$3$26$"			this.rawType = rawType;"
"ResolvableType.java:1524"$0$0$0$3$38$"			this.typeArguments = typeArguments;"
"ResolvableType.java:1525"$0$0$0$1$3$"		}"
"ResolvableType.java:1526"$0$0$0$0$0$""
"ResolvableType.java:1527"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1528"$1$0$0$4$31$"		public String getTypeName() {"
"ResolvableType.java:1529"$1$0$0$4$48$"			String typeName = this.rawType.getTypeName();"
"ResolvableType.java:1530"$0$0$0$5$39$"			if (this.typeArguments.length > 0) {"
"ResolvableType.java:1531"$0$0$0$8$65$"				StringJoiner stringJoiner = new StringJoiner("", "", ""<"", "">"");"
"ResolvableType.java:1532"$0$0$0$6$46$"				for (Type argument : this.typeArguments) {"
"ResolvableType.java:1533"$1$0$0$1$46$"					stringJoiner.add(argument.getTypeName());"
"ResolvableType.java:1534"$0$0$0$1$5$"				}"
"ResolvableType.java:1535"$0$0$0$4$35$"				return typeName + stringJoiner;"
"ResolvableType.java:1536"$0$0$0$1$4$"			}"
"ResolvableType.java:1537"$0$0$0$2$19$"			return typeName;"
"ResolvableType.java:1538"$0$0$0$1$3$"		}"
"ResolvableType.java:1539"$0$0$0$0$0$""
"ResolvableType.java:1540"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1541"$0$0$0$1$11$"		@Nullable"
"ResolvableType.java:1542"$1$0$0$4$30$"		public Type getOwnerType() {"
"ResolvableType.java:1543"$0$0$0$2$15$"			return null;"
"ResolvableType.java:1544"$0$0$0$1$3$"		}"
"ResolvableType.java:1545"$0$0$0$0$0$""
"ResolvableType.java:1546"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1547"$1$0$0$4$28$"		public Type getRawType() {"
"ResolvableType.java:1548"$0$0$0$2$23$"			return this.rawType;"
"ResolvableType.java:1549"$0$0$0$1$3$"		}"
"ResolvableType.java:1550"$0$0$0$0$0$""
"ResolvableType.java:1551"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1552"$1$0$0$4$42$"		public Type[] getActualTypeArguments() {"
"ResolvableType.java:1553"$0$0$0$2$29$"			return this.typeArguments;"
"ResolvableType.java:1554"$0$0$0$1$3$"		}"
"ResolvableType.java:1555"$0$0$0$0$0$""
"ResolvableType.java:1556"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1557"$0$0$0$6$49$"		public boolean equals(@Nullable Object other) {"
"ResolvableType.java:1558"$0$0$0$5$23$"			if (this == other) {"
"ResolvableType.java:1559"$0$0$0$2$16$"				return true;"
"ResolvableType.java:1560"$0$0$0$1$4$"			}"
"ResolvableType.java:1561"$0$0$0$5$47$"			if (!(other instanceof ParameterizedType)) {"
"ResolvableType.java:1562"$0$0$0$2$17$"				return false;"
"ResolvableType.java:1563"$0$0$0$1$4$"			}"
"ResolvableType.java:1564"$0$0$0$5$59$"			ParameterizedType otherType = (ParameterizedType) other;"
"ResolvableType.java:1565"$2$0$0$7$93$"			return (otherType.getOwnerType() == null && this.rawType.equals(otherType.getRawType()) &&"
"ResolvableType.java:1566"$1$0$0$2$76$"					Arrays.equals(this.typeArguments, otherType.getActualTypeArguments()));"
"ResolvableType.java:1567"$0$0$0$1$3$"		}"
"ResolvableType.java:1568"$0$0$0$0$0$""
"ResolvableType.java:1569"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1570"$0$0$0$4$25$"		public int hashCode() {"
"ResolvableType.java:1571"$0$0$0$6$79$"			return (this.rawType.hashCode() * 31 + Arrays.hashCode(this.typeArguments));"
"ResolvableType.java:1572"$0$0$0$1$3$"		}"
"ResolvableType.java:1573"$0$0$0$0$0$""
"ResolvableType.java:1574"$0$0$0$1$11$"		@Override"
"ResolvableType.java:1575"$0$0$0$4$28$"		public String toString() {"
"ResolvableType.java:1576"$1$0$0$2$24$"			return getTypeName();"
"ResolvableType.java:1577"$0$0$0$1$3$"		}"
"ResolvableType.java:1578"$0$0$0$1$2$"	}"
"ResolvableType.java:1579"$0$0$0$0$0$""
"ResolvableType.java:1580"$0$0$0$0$0$""
"ResolvableType.java:1581"$0$0$0$1$4$"	/**"
"ResolvableType.java:1582"$0$0$0$10$77$"	 * Internal helper to handle bounds from {@link WildcardType WildcardTypes}."
"ResolvableType.java:1583"$0$0$0$1$4$"	 */"
"ResolvableType.java:1584"$0$0$0$5$38$"	private static class WildcardBounds {"
"ResolvableType.java:1585"$0$0$0$0$0$""
"ResolvableType.java:1586"$0$0$0$4$26$"		private final Kind kind;"
"ResolvableType.java:1587"$0$0$0$0$0$""
"ResolvableType.java:1588"$0$0$0$4$40$"		private final ResolvableType[] bounds;"
"ResolvableType.java:1589"$0$0$0$0$0$""
"ResolvableType.java:1590"$0$0$0$1$5$"		/**"
"ResolvableType.java:1591"$0$0$0$10$74$"		 * Internal constructor to create a new {@link WildcardBounds} instance."
"ResolvableType.java:1592"$0$0$0$7$35$"		 * @param kind the kind of bounds"
"ResolvableType.java:1593"$0$0$0$5$29$"		 * @param bounds the bounds"
"ResolvableType.java:1594"$1$0$0$3$30$"		 * @see #get(ResolvableType)"
"ResolvableType.java:1595"$0$0$0$1$5$"		 */"
"ResolvableType.java:1596"$0$0$0$6$61$"		public WildcardBounds(Kind kind, ResolvableType[] bounds) {"
"ResolvableType.java:1597"$0$0$0$3$20$"			this.kind = kind;"
"ResolvableType.java:1598"$0$0$0$3$24$"			this.bounds = bounds;"
"ResolvableType.java:1599"$0$0$0$1$3$"		}"
"ResolvableType.java:1600"$0$0$0$0$0$""
"ResolvableType.java:1601"$0$0$0$1$5$"		/**"
"ResolvableType.java:1602"$0$0$0$15$81$"		 * Return {@code true} if this bounds is the same kind as the specified bounds."
"ResolvableType.java:1603"$0$0$0$1$5$"		 */"
"ResolvableType.java:1604"$0$0$0$5$52$"		public boolean isSameKind(WildcardBounds bounds) {"
"ResolvableType.java:1605"$0$0$0$4$35$"			return this.kind == bounds.kind;"
"ResolvableType.java:1606"$0$0$0$1$3$"		}"
"ResolvableType.java:1607"$0$0$0$0$0$""
"ResolvableType.java:1608"$0$0$0$1$5$"		/**"
"ResolvableType.java:1609"$0$0$0$14$81$"		 * Return {@code true} if this bounds is assignable to all the specified types."
"ResolvableType.java:1610"$0$0$0$8$43$"		 * @param types the types to test against"
"ResolvableType.java:1611"$0$0$0$12$67$"		 * @return {@code true} if this bounds is assignable to all types"
"ResolvableType.java:1612"$0$0$0$1$5$"		 */"
"ResolvableType.java:1613"$0$0$0$5$60$"		public boolean isAssignableFrom(ResolvableType... types) {"
"ResolvableType.java:1614"$0$0$0$6$45$"			for (ResolvableType bound : this.bounds) {"
"ResolvableType.java:1615"$0$0$0$6$39$"				for (ResolvableType type : types) {"
"ResolvableType.java:1616"$0$0$0$4$38$"					if (!isAssignable(bound, type)) {"
"ResolvableType.java:1617"$0$0$0$2$19$"						return false;"
"ResolvableType.java:1618"$0$0$0$1$6$"					}"
"ResolvableType.java:1619"$0$0$0$1$5$"				}"
"ResolvableType.java:1620"$0$0$0$1$4$"			}"
"ResolvableType.java:1621"$0$0$0$2$15$"			return true;"
"ResolvableType.java:1622"$0$0$0$1$3$"		}"
"ResolvableType.java:1623"$0$0$0$0$0$""
"ResolvableType.java:1624"$0$0$0$7$76$"		private boolean isAssignable(ResolvableType source, ResolvableType from) {"
"ResolvableType.java:1625"$0$0$0$8$100$"			return (this.kind == Kind.UPPER ? source.isAssignableFrom(from) : from.isAssignableFrom(source));"
"ResolvableType.java:1626"$0$0$0$1$3$"		}"
"ResolvableType.java:1627"$0$0$0$0$0$""
"ResolvableType.java:1628"$0$0$0$1$5$"		/**"
"ResolvableType.java:1629"$0$0$0$5$34$"		 * Return the underlying bounds."
"ResolvableType.java:1630"$0$0$0$1$5$"		 */"
"ResolvableType.java:1631"$1$0$0$4$39$"		public ResolvableType[] getBounds() {"
"ResolvableType.java:1632"$0$0$0$2$22$"			return this.bounds;"
"ResolvableType.java:1633"$0$0$0$1$3$"		}"
"ResolvableType.java:1634"$0$0$0$0$0$""
"ResolvableType.java:1635"$0$0$0$1$5$"		/**"
"ResolvableType.java:1636"$0$0$0$11$76$"		 * Get a {@link WildcardBounds} instance for the specified type, returning"
"ResolvableType.java:1637"$0$0$0$14$85$"		 * {@code null} if the specified type cannot be resolved to a {@link WildcardType}."
"ResolvableType.java:1638"$0$0$0$6$32$"		 * @param type the source type"
"ResolvableType.java:1639"$0$0$0$9$62$"		 * @return a {@link WildcardBounds} instance or {@code null}"
"ResolvableType.java:1640"$0$0$0$1$5$"		 */"
"ResolvableType.java:1641"$0$0$0$1$11$"		@Nullable"
"ResolvableType.java:1642"$1$0$0$6$57$"		public static WildcardBounds get(ResolvableType type) {"
"ResolvableType.java:1643"$0$0$0$4$43$"			ResolvableType resolveToWildcard = type;"
"ResolvableType.java:1644"$1$0$0$5$67$"			while (!(resolveToWildcard.getType() instanceof WildcardType)) {"
"ResolvableType.java:1645"$0$0$0$5$36$"				if (resolveToWildcard == NONE) {"
"ResolvableType.java:1646"$0$0$0$2$17$"					return null;"
"ResolvableType.java:1647"$0$0$0$1$5$"				}"
"ResolvableType.java:1648"$0$0$0$3$56$"				resolveToWildcard = resolveToWildcard.resolveType();"
"ResolvableType.java:1649"$0$0$0$1$4$"			}"
"ResolvableType.java:1650"$0$0$0$5$69$"			WildcardType wildcardType = (WildcardType) resolveToWildcard.type;"
"ResolvableType.java:1651"$1$0$0$10$90$"			Kind boundsType = (wildcardType.getLowerBounds().length > 0 ? Kind.LOWER : Kind.UPPER);"
"ResolvableType.java:1652"$2$0$0$10$110$"			Type[] bounds = (boundsType == Kind.UPPER ? wildcardType.getUpperBounds() : wildcardType.getLowerBounds());"
"ResolvableType.java:1653"$0$0$0$5$73$"			ResolvableType[] resolvableBounds = new ResolvableType[bounds.length];"
"ResolvableType.java:1654"$0$0$0$10$44$"			for (int i = 0; i < bounds.length; i++) {"
"ResolvableType.java:1655"$0$0$0$4$83$"				resolvableBounds[i] = ResolvableType.forType(bounds[i], type.variableResolver);"
"ResolvableType.java:1656"$0$0$0$1$4$"			}"
"ResolvableType.java:1657"$0$0$0$4$59$"			return new WildcardBounds(boundsType, resolvableBounds);"
"ResolvableType.java:1658"$0$0$0$1$3$"		}"
"ResolvableType.java:1659"$0$0$0$0$0$""
"ResolvableType.java:1660"$0$0$0$1$5$"		/**"
"ResolvableType.java:1661"$0$0$0$6$33$"		 * The various kinds of bounds."
"ResolvableType.java:1662"$0$0$0$1$5$"		 */"
"ResolvableType.java:1663"$0$0$0$4$26$"		enum Kind {UPPER, LOWER}"
"ResolvableType.java:1664"$0$0$0$1$2$"	}"
"ResolvableType.java:1665"$0$0$0$0$0$""
"ResolvableType.java:1666"$0$0$0$0$0$""
"ResolvableType.java:1667"$0$0$0$1$4$"	/**"
"ResolvableType.java:1668"$0$0$0$10$59$"	 * Internal {@link Type} used to represent an empty value."
"ResolvableType.java:1669"$0$0$0$1$4$"	 */"
"ResolvableType.java:1670"$0$0$0$1$28$"	@SuppressWarnings(""serial"")"
"ResolvableType.java:1671"$0$0$0$7$55$"	static class EmptyType implements Type, Serializable {"
"ResolvableType.java:1672"$0$0$0$0$0$""
"ResolvableType.java:1673"$0$0$0$7$47$"		static final Type INSTANCE = new EmptyType();"
"ResolvableType.java:1674"$0$0$0$0$0$""
"ResolvableType.java:1675"$0$0$0$3$24$"		Object readResolve() {"
"ResolvableType.java:1676"$0$0$0$2$19$"			return INSTANCE;"
"ResolvableType.java:1677"$0$0$0$1$3$"		}"
"ResolvableType.java:1678"$0$0$0$1$2$"	}"
"ResolvableType.java:1679"$0$0$0$0$0$""
"ResolvableType.java:1680"$0$0$0$1$1$"}"
"Profiles.java:1"$0$0$0$1$2$"/*"
"Profiles.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"Profiles.java:3"$0$0$0$1$2$" *"
"Profiles.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"Profiles.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"Profiles.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"Profiles.java:7"$0$0$0$1$2$" *"
"Profiles.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"Profiles.java:9"$0$0$0$1$2$" *"
"Profiles.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"Profiles.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"Profiles.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"Profiles.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"Profiles.java:14"$0$0$0$5$33$" * limitations under the License."
"Profiles.java:15"$0$0$0$1$3$" */"
"Profiles.java:16"$0$0$0$0$0$""
"Profiles.java:17"$0$0$0$2$37$"package org.springframework.core.env;"
"Profiles.java:18"$0$0$0$0$0$""
"Profiles.java:19"$0$0$0$2$36$"import java.util.function.Predicate;"
"Profiles.java:20"$0$0$0$0$0$""
"Profiles.java:21"$0$0$0$1$3$"/**"
"Profiles.java:22"$0$0$0$8$82$" * Profile predicate that may be {@linkplain Environment#acceptsProfiles(Profiles)"
"Profiles.java:23"$0$0$0$6$39$" * accepted} by an {@link Environment}."
"Profiles.java:24"$0$0$0$1$2$" *"
"Profiles.java:25"$0$0$0$11$69$" * <p>May be implemented directly or, more usually, created using the"
"Profiles.java:26"$0$0$0$6$49$" * {@link #of(String...) of(...)} factory method."
"Profiles.java:27"$0$0$0$1$2$" *"
"Profiles.java:28"$0$0$0$4$23$" * @author Phillip Webb"
"Profiles.java:29"$0$0$0$3$13$" * @since 5.1"
"Profiles.java:30"$0$0$0$1$3$" */"
"Profiles.java:31"$0$0$0$1$19$"FunctionalInterface"
"Profiles.java:32"$0$0$0$4$27$"public interface Profiles {"
"Profiles.java:33"$0$0$0$0$0$""
"Profiles.java:34"$0$0$0$1$4$"	/**"
"Profiles.java:35"$0$0$0$11$77$"	 * Test if this {@code Profiles} instance <em>matches</em> against the given"
"Profiles.java:36"$0$0$0$4$30$"	 * active profiles predicate."
"Profiles.java:37"$0$0$0$11$73$"	 * @param activeProfiles predicate that tests whether a given profile is"
"Profiles.java:38"$0$0$0$3$20$"	 * currently active"
"Profiles.java:39"$0$0$0$1$4$"	 */"
"Profiles.java:40"$0$0$0$3$51$"	boolean matches(Predicate<String> activeProfiles);"
"Profiles.java:41"$0$0$0$0$0$""
"Profiles.java:42"$0$0$0$0$0$""
"Profiles.java:43"$0$0$0$1$4$"	/**"
"Profiles.java:44"$0$0$0$12$74$"	 * Create a new {@link Profiles} instance that checks for matches against"
"Profiles.java:45"$0$0$0$5$39$"	 * the given <em>profile strings</em>."
"Profiles.java:46"$0$0$0$8$80$"	 * <p>The returned instance will {@linkplain Profiles#matches(Predicate) match}"
"Profiles.java:47"$0$0$0$10$52$"	 * if any one of the given profile strings matches."
"Profiles.java:48"$0$0$0$12$70$"	 * <p>A profile string may contain a simple profile name (for example"
"Profiles.java:49"$0$0$0$11$78$"	 * {@code ""production""}) or a profile expression. A profile expression allows"
"Profiles.java:50"$0$0$0$11$67$"	 * for more complicated profile logic to be expressed, for example"
"Profiles.java:51"$0$0$0$5$33$"	 * {@code ""production & cloud""}."
"Profiles.java:52"$0$0$0$9$68$"	 * <p>The following operators are supported in profile expressions:"
"Profiles.java:53"$0$0$0$2$8$"	 * <ul>"
"Profiles.java:54"$0$0$0$10$62$"	 * <li>{@code !} - A logical <em>not</em> of the profile</li>"
"Profiles.java:55"$0$0$0$10$63$"	 * <li>{@code &} - A logical <em>and</em> of the profiles</li>"
"Profiles.java:56"$0$0$0$10$62$"	 * <li>{@code |} - A logical <em>or</em> of the profiles</li>"
"Profiles.java:57"$0$0$0$2$9$"	 * </ul>"
"Profiles.java:58"$0$0$0$15$78$"	 * <p>Please note that the {@code &} and {@code |} operators may not be mixed"
"Profiles.java:59"$0$0$0$16$77$"	 * without using parentheses. For example {@code ""a & b | c""} is not a valid"
"Profiles.java:60"$0$0$0$14$64$"	 * expression; it must be expressed as {@code ""(a & b) | c""} or"
"Profiles.java:61"$0$0$0$7$26$"	 * {@code ""a & (b | c)""}."
"Profiles.java:62"$0$0$0$8$59$"	 * @param profiles the <em>profile strings</em> to include"
"Profiles.java:63"$0$0$0$7$43$"	 * @return a new {@link Profiles} instance"
"Profiles.java:64"$0$0$0$1$4$"	 */"
"Profiles.java:65"$0$0$0$5$41$"	static Profiles of(String... profiles) {"
"Profiles.java:66"$0$0$0$2$40$"		return ProfilesParser.parse(profiles);"
"Profiles.java:67"$0$0$0$1$2$"	}"
"Profiles.java:68"$0$0$0$0$0$""
"Profiles.java:69"$0$0$0$1$1$"}"
"SpringFactoriesLoader.java:1"$0$0$0$1$2$"/*"
"SpringFactoriesLoader.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"SpringFactoriesLoader.java:3"$0$0$0$1$2$" *"
"SpringFactoriesLoader.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SpringFactoriesLoader.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SpringFactoriesLoader.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SpringFactoriesLoader.java:7"$0$0$0$1$2$" *"
"SpringFactoriesLoader.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SpringFactoriesLoader.java:9"$0$0$0$1$2$" *"
"SpringFactoriesLoader.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SpringFactoriesLoader.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SpringFactoriesLoader.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SpringFactoriesLoader.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SpringFactoriesLoader.java:14"$0$0$0$5$33$" * limitations under the License."
"SpringFactoriesLoader.java:15"$0$0$0$1$3$" */"
"SpringFactoriesLoader.java:16"$0$0$0$0$0$""
"SpringFactoriesLoader.java:17"$0$0$0$2$44$"package org.springframework.core.io.support;"
"SpringFactoriesLoader.java:18"$0$0$0$0$0$""
"SpringFactoriesLoader.java:19"$0$0$0$2$27$"import java.io.IOException;"
"SpringFactoriesLoader.java:20"$0$0$0$2$20$"import java.net.URL;"
"SpringFactoriesLoader.java:21"$0$0$0$2$27$"import java.util.ArrayList;"
"SpringFactoriesLoader.java:22"$0$0$0$2$29$"import java.util.Collections;"
"SpringFactoriesLoader.java:23"$0$0$0$2$29$"import java.util.Enumeration;"
"SpringFactoriesLoader.java:24"$0$0$0$2$22$"import java.util.List;"
"SpringFactoriesLoader.java:25"$0$0$0$2$21$"import java.util.Map;"
"SpringFactoriesLoader.java:26"$0$0$0$2$28$"import java.util.Properties;"
"SpringFactoriesLoader.java:27"$0$0$0$0$0$""
"SpringFactoriesLoader.java:28"$0$0$0$2$38$"import org.apache.commons.logging.Log;"
"SpringFactoriesLoader.java:29"$0$0$0$2$45$"import org.apache.commons.logging.LogFactory;"
"SpringFactoriesLoader.java:30"$0$0$0$0$0$""
"SpringFactoriesLoader.java:31"$0$0$0$2$74$"import org.springframework.core.annotation.AnnotationAwareOrderComparator;"
"SpringFactoriesLoader.java:32"$0$0$0$2$47$"import org.springframework.core.io.UrlResource;"
"SpringFactoriesLoader.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SpringFactoriesLoader.java:34"$0$0$0$2$39$"import org.springframework.util.Assert;"
"SpringFactoriesLoader.java:35"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"SpringFactoriesLoader.java:36"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"SpringFactoriesLoader.java:37"$0$0$0$2$52$"import org.springframework.util.LinkedMultiValueMap;"
"SpringFactoriesLoader.java:38"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"SpringFactoriesLoader.java:39"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"SpringFactoriesLoader.java:40"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"SpringFactoriesLoader.java:41"$0$0$0$0$0$""
"SpringFactoriesLoader.java:42"$0$0$0$1$3$"/**"
"SpringFactoriesLoader.java:43"$0$0$0$12$83$" * General purpose factory loading mechanism for internal use within the framework."
"SpringFactoriesLoader.java:44"$0$0$0$1$2$" *"
"SpringFactoriesLoader.java:45"$0$0$0$8$86$" * <p>{@code SpringFactoriesLoader} {@linkplain #loadFactories loads} and instantiates"
"SpringFactoriesLoader.java:46"$0$0$0$11$83$" * factories of a given type from {@value #FACTORIES_RESOURCE_LOCATION} files which"
"SpringFactoriesLoader.java:47"$0$0$0$14$86$" * may be present in multiple JAR files in the classpath. The {@code spring.factories}"
"SpringFactoriesLoader.java:48"$0$0$0$15$82$" * file must be in {@link Properties} format, where the key is the fully qualified"
"SpringFactoriesLoader.java:49"$0$0$0$16$86$" * name of the interface or abstract class, and the value is a comma-separated list of"
"SpringFactoriesLoader.java:50"$0$0$0$6$43$" * implementation class names. For example:"
"SpringFactoriesLoader.java:51"$0$0$0$1$2$" *"
"SpringFactoriesLoader.java:52"$0$0$0$3$90$" * <pre class=""code"">example.MyService=example.MyServiceImpl1,example.MyServiceImpl2</pre>"
"SpringFactoriesLoader.java:53"$0$0$0$1$2$" *"
"SpringFactoriesLoader.java:54"$0$0$0$13$91$" * where {@code example.MyService} is the name of the interface, and {@code MyServiceImpl1}"
"SpringFactoriesLoader.java:55"$0$0$0$7$54$" * and {@code MyServiceImpl2} are two implementations."
"SpringFactoriesLoader.java:56"$0$0$0$1$2$" *"
"SpringFactoriesLoader.java:57"$0$0$0$4$24$" * @author Arjen Poutsma"
"SpringFactoriesLoader.java:58"$0$0$0$4$26$" * @author Juergen Hoeller"
"SpringFactoriesLoader.java:59"$0$0$0$4$22$" * @author Sam Brannen"
"SpringFactoriesLoader.java:60"$0$0$0$3$13$" * @since 3.2"
"SpringFactoriesLoader.java:61"$0$0$0$1$3$" */"
"SpringFactoriesLoader.java:62"$0$0$0$5$42$"public final class SpringFactoriesLoader {"
"SpringFactoriesLoader.java:63"$0$0$0$0$0$""
"SpringFactoriesLoader.java:64"$0$0$0$1$4$"	/**"
"SpringFactoriesLoader.java:65"$0$0$0$7$39$"	 * The location to look for factories."
"SpringFactoriesLoader.java:66"$0$0$0$8$44$"	 * <p>Can be present in multiple JAR files."
"SpringFactoriesLoader.java:67"$0$0$0$1$4$"	 */"
"SpringFactoriesLoader.java:68"$0$0$0$7$86$"	public static final String FACTORIES_RESOURCE_LOCATION = ""META-INF/spring.factories"";"
"SpringFactoriesLoader.java:69"$0$0$0$0$0$""
"SpringFactoriesLoader.java:70"$0$0$0$0$0$""
"SpringFactoriesLoader.java:71"$1$0$0$7$82$"	private static final Log logger = LogFactory.getLog(SpringFactoriesLoader.class);"
"SpringFactoriesLoader.java:72"$0$0$0$0$0$""
"SpringFactoriesLoader.java:73"$0$0$0$10$113$"	private static final Map<ClassLoader, MultiValueMap<String, String>> cache = new ConcurrentReferenceHashMap<>();"
"SpringFactoriesLoader.java:74"$0$0$0$0$0$""
"SpringFactoriesLoader.java:75"$0$0$0$0$0$""
"SpringFactoriesLoader.java:76"$0$0$0$3$34$"	private SpringFactoriesLoader() {"
"SpringFactoriesLoader.java:77"$0$0$0$1$2$"	}"
"SpringFactoriesLoader.java:78"$0$0$0$0$0$""
"SpringFactoriesLoader.java:79"$0$0$0$0$0$""
"SpringFactoriesLoader.java:80"$0$0$0$1$4$"	/**"
"SpringFactoriesLoader.java:81"$0$0$0$12$75$"	 * Load and instantiate the factory implementations of the given type from"
"SpringFactoriesLoader.java:82"$0$0$0$8$72$"	 * {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader."
"SpringFactoriesLoader.java:83"$0$0$0$9$88$"	 * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}."
"SpringFactoriesLoader.java:84"$0$0$0$11$84$"	 * <p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}"
"SpringFactoriesLoader.java:85"$0$0$0$7$43$"	 * to obtain all registered factory names."
"SpringFactoriesLoader.java:86"$0$0$0$11$79$"	 * @param factoryType the interface or abstract class representing the factory"
"SpringFactoriesLoader.java:87"$0$0$0$17$98$"	 * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)"
"SpringFactoriesLoader.java:88"$0$0$0$9$79$"	 * @throws IllegalArgumentException if any factory implementation class cannot"
"SpringFactoriesLoader.java:89"$0$0$0$12$67$"	 * be loaded or if an error occurs while instantiating any factory"
"SpringFactoriesLoader.java:90"$0$0$0$3$26$"	 * @see #loadFactoryNames"
"SpringFactoriesLoader.java:91"$0$0$0$1$4$"	 */"
"SpringFactoriesLoader.java:92"$0$0$0$10$99$"	public static <T> List<T> loadFactories(Class<T> factoryType, @Nullable ClassLoader classLoader) {"
"SpringFactoriesLoader.java:93"$0$0$0$6$64$"		Assert.notNull(factoryType, ""'factoryType' must not be null"");"
"SpringFactoriesLoader.java:94"$0$0$0$4$45$"		ClassLoader classLoaderToUse = classLoader;"
"SpringFactoriesLoader.java:95"$0$0$0$5$33$"		if (classLoaderToUse == null) {"
"SpringFactoriesLoader.java:96"$1$0$0$3$67$"			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();"
"SpringFactoriesLoader.java:97"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:98"$0$0$0$5$92$"		List<String> factoryImplementationNames = loadFactoryNames(factoryType, classLoaderToUse);"
"SpringFactoriesLoader.java:99"$0$0$0$3$32$"		if (logger.isTraceEnabled()) {"
"SpringFactoriesLoader.java:100"$1$0$0$10$95$"			logger.trace(""Loaded ["" + factoryType.getName() + ""] names: "" + factoryImplementationNames);"
"SpringFactoriesLoader.java:101"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:102"$0$0$0$5$70$"		List<T> result = new ArrayList<>(factoryImplementationNames.size());"
"SpringFactoriesLoader.java:103"$0$0$0$6$71$"		for (String factoryImplementationName : factoryImplementationNames) {"
"SpringFactoriesLoader.java:104"$0$0$0$3$92$"			result.add(instantiateFactory(factoryImplementationName, factoryType, classLoaderToUse));"
"SpringFactoriesLoader.java:105"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:106"$0$0$0$1$46$"		AnnotationAwareOrderComparator.sort(result);"
"SpringFactoriesLoader.java:107"$0$0$0$2$16$"		return result;"
"SpringFactoriesLoader.java:108"$0$0$0$1$2$"	}"
"SpringFactoriesLoader.java:109"$0$0$0$0$0$""
"SpringFactoriesLoader.java:110"$0$0$0$1$4$"	/**"
"SpringFactoriesLoader.java:111"$0$0$0$12$74$"	 * Load the fully qualified class names of factory implementations of the"
"SpringFactoriesLoader.java:112"$0$0$0$9$74$"	 * given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given"
"SpringFactoriesLoader.java:113"$0$0$0$3$17$"	 * class loader."
"SpringFactoriesLoader.java:114"$0$0$0$11$79$"	 * @param factoryType the interface or abstract class representing the factory"
"SpringFactoriesLoader.java:115"$0$0$0$12$75$"	 * @param classLoader the ClassLoader to use for loading resources; can be"
"SpringFactoriesLoader.java:116"$0$0$0$7$35$"	 * {@code null} to use the default"
"SpringFactoriesLoader.java:117"$0$0$0$11$83$"	 * @throws IllegalArgumentException if an error occurs while loading factory names"
"SpringFactoriesLoader.java:118"$0$0$0$3$23$"	 * @see #loadFactories"
"SpringFactoriesLoader.java:119"$0$0$0$1$4$"	 */"
"SpringFactoriesLoader.java:120"$0$0$0$9$103$"	public static List<String> loadFactoryNames(Class<?> factoryType, @Nullable ClassLoader classLoader) {"
"SpringFactoriesLoader.java:121"$1$0$0$4$49$"		String factoryTypeName = factoryType.getName();"
"SpringFactoriesLoader.java:122"$1$0$0$3$97$"		return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());"
"SpringFactoriesLoader.java:123"$0$0$0$1$2$"	}"
"SpringFactoriesLoader.java:124"$0$0$0$0$0$""
"SpringFactoriesLoader.java:125"$0$0$0$8$98$"	private static Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader) {"
"SpringFactoriesLoader.java:126"$1$0$0$5$64$"		MultiValueMap<String, String> result = cache.get(classLoader);"
"SpringFactoriesLoader.java:127"$0$0$0$5$23$"		if (result != null) {"
"SpringFactoriesLoader.java:128"$0$0$0$2$17$"			return result;"
"SpringFactoriesLoader.java:129"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:130"$0$0$0$0$0$""
"SpringFactoriesLoader.java:131"$0$0$0$2$7$"		try {"
"SpringFactoriesLoader.java:132"$0$0$0$7$49$"			Enumeration<URL> urls = (classLoader != null ?"
"SpringFactoriesLoader.java:133"$1$0$0$2$60$"					classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :"
"SpringFactoriesLoader.java:134"$1$0$0$1$66$"					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));"
"SpringFactoriesLoader.java:135"$0$0$0$4$40$"			result = new LinkedMultiValueMap<>();"
"SpringFactoriesLoader.java:136"$0$0$0$3$35$"			while (urls.hasMoreElements()) {"
"SpringFactoriesLoader.java:137"$0$0$0$4$33$"				URL url = urls.nextElement();"
"SpringFactoriesLoader.java:138"$0$0$0$5$48$"				UrlResource resource = new UrlResource(url);"
"SpringFactoriesLoader.java:139"$0$0$0$4$75$"				Properties properties = PropertiesLoaderUtils.loadProperties(resource);"
"SpringFactoriesLoader.java:140"$0$0$0$7$57$"				for (Map.Entry<?, ?> entry : properties.entrySet()) {"
"SpringFactoriesLoader.java:141"$1$0$0$5$63$"					String factoryTypeName = ((String) entry.getKey()).trim();"
"SpringFactoriesLoader.java:142"$1$0$0$7$118$"					for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {"
"SpringFactoriesLoader.java:143"$0$0$0$2$68$"						result.add(factoryTypeName, factoryImplementationName.trim());"
"SpringFactoriesLoader.java:144"$0$0$0$1$6$"					}"
"SpringFactoriesLoader.java:145"$0$0$0$1$5$"				}"
"SpringFactoriesLoader.java:146"$0$0$0$1$4$"			}"
"SpringFactoriesLoader.java:147"$0$0$0$2$34$"			cache.put(classLoader, result);"
"SpringFactoriesLoader.java:148"$0$0$0$2$17$"			return result;"
"SpringFactoriesLoader.java:149"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:150"$0$0$0$4$26$"		catch (IOException ex) {"
"SpringFactoriesLoader.java:151"$0$0$0$10$82$"			throw new IllegalArgumentException(""Unable to load factories from location ["" +"
"SpringFactoriesLoader.java:152"$0$0$0$4$44$"					FACTORIES_RESOURCE_LOCATION + ""]"", ex);"
"SpringFactoriesLoader.java:153"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:154"$0$0$0$1$2$"	}"
"SpringFactoriesLoader.java:155"$0$0$0$0$0$""
"SpringFactoriesLoader.java:156"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"SpringFactoriesLoader.java:157"$0$0$0$11$123$"	private static <T> T instantiateFactory(String factoryImplementationName, Class<T> factoryType, ClassLoader classLoader) {"
"SpringFactoriesLoader.java:158"$0$0$0$2$7$"		try {"
"SpringFactoriesLoader.java:159"$0$0$0$5$100$"			Class<?> factoryImplementationClass = ClassUtils.forName(factoryImplementationName, classLoader);"
"SpringFactoriesLoader.java:160"$0$0$0$3$67$"			if (!factoryType.isAssignableFrom(factoryImplementationClass)) {"
"SpringFactoriesLoader.java:161"$0$0$0$3$39$"				throw new IllegalArgumentException("
"SpringFactoriesLoader.java:162"$1$0$0$17$117$"						""Class ["" + factoryImplementationName + ""] is not assignable to factory type ["" + factoryType.getName() + ""]"");"
"SpringFactoriesLoader.java:163"$0$0$0$1$4$"			}"
"SpringFactoriesLoader.java:164"$0$0$0$3$94$"			return (T) ReflectionUtils.accessibleConstructor(factoryImplementationClass).newInstance();"
"SpringFactoriesLoader.java:165"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:166"$0$0$0$4$24$"		catch (Throwable ex) {"
"SpringFactoriesLoader.java:167"$0$0$0$3$38$"			throw new IllegalArgumentException("
"SpringFactoriesLoader.java:168"$1$0$0$18$127$"				""Unable to instantiate factory class ["" + factoryImplementationName + ""] for factory type ["" + factoryType.getName() + ""]"","
"SpringFactoriesLoader.java:169"$0$0$0$1$8$"				ex);"
"SpringFactoriesLoader.java:170"$0$0$0$1$3$"		}"
"SpringFactoriesLoader.java:171"$0$0$0$1$2$"	}"
"SpringFactoriesLoader.java:172"$0$0$0$0$0$""
"SpringFactoriesLoader.java:173"$0$0$0$1$1$"}"
"ClassPathResource.java:1"$0$0$0$1$2$"/*"
"ClassPathResource.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ClassPathResource.java:3"$0$0$0$1$2$" *"
"ClassPathResource.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ClassPathResource.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ClassPathResource.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ClassPathResource.java:7"$0$0$0$1$2$" *"
"ClassPathResource.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ClassPathResource.java:9"$0$0$0$1$2$" *"
"ClassPathResource.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ClassPathResource.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ClassPathResource.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ClassPathResource.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ClassPathResource.java:14"$0$0$0$5$33$" * limitations under the License."
"ClassPathResource.java:15"$0$0$0$1$3$" */"
"ClassPathResource.java:16"$0$0$0$0$0$""
"ClassPathResource.java:17"$0$0$0$2$36$"package org.springframework.core.io;"
"ClassPathResource.java:18"$0$0$0$0$0$""
"ClassPathResource.java:19"$0$0$0$2$37$"import java.io.FileNotFoundException;"
"ClassPathResource.java:20"$0$0$0$2$27$"import java.io.IOException;"
"ClassPathResource.java:21"$0$0$0$2$27$"import java.io.InputStream;"
"ClassPathResource.java:22"$0$0$0$2$20$"import java.net.URL;"
"ClassPathResource.java:23"$0$0$0$0$0$""
"ClassPathResource.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ClassPathResource.java:25"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ClassPathResource.java:26"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"ClassPathResource.java:27"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"ClassPathResource.java:28"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"ClassPathResource.java:29"$0$0$0$0$0$""
"ClassPathResource.java:30"$0$0$0$1$3$"/**"
"ClassPathResource.java:31"$0$0$0$11$74$" * {@link Resource} implementation for class path resources. Uses either a"
"ClassPathResource.java:32"$0$0$0$12$76$" * given {@link ClassLoader} or a given {@link Class} for loading resources."
"ClassPathResource.java:33"$0$0$0$1$2$" *"
"ClassPathResource.java:34"$0$0$0$10$67$" * <p>Supports resolution as {@code java.io.File} if the class path"
"ClassPathResource.java:35"$0$0$0$14$71$" * resource resides in the file system, but not for resources in a JAR."
"ClassPathResource.java:36"$0$0$0$6$37$" * Always supports resolution as URL."
"ClassPathResource.java:37"$0$0$0$1$2$" *"
"ClassPathResource.java:38"$0$0$0$4$26$" * @author Juergen Hoeller"
"ClassPathResource.java:39"$0$0$0$4$22$" * @author Sam Brannen"
"ClassPathResource.java:40"$0$0$0$3$20$" * @since 28.12.2003"
"ClassPathResource.java:41"$1$0$0$3$47$" * @see ClassLoader#getResourceAsStream(String)"
"ClassPathResource.java:42"$1$0$0$3$41$" * @see Class#getResourceAsStream(String)"
"ClassPathResource.java:43"$0$0$0$1$3$" */"
"ClassPathResource.java:44"$0$0$0$6$70$"public class ClassPathResource extends AbstractFileResolvingResource {"
"ClassPathResource.java:45"$0$0$0$0$0$""
"ClassPathResource.java:46"$0$0$0$4$27$"	private final String path;"
"ClassPathResource.java:47"$0$0$0$0$0$""
"ClassPathResource.java:48"$0$0$0$1$10$"	@Nullable"
"ClassPathResource.java:49"$0$0$0$3$33$"	private ClassLoader classLoader;"
"ClassPathResource.java:50"$0$0$0$0$0$""
"ClassPathResource.java:51"$0$0$0$1$10$"	@Nullable"
"ClassPathResource.java:52"$0$0$0$3$24$"	private Class<?> clazz;"
"ClassPathResource.java:53"$0$0$0$0$0$""
"ClassPathResource.java:54"$0$0$0$0$0$""
"ClassPathResource.java:55"$0$0$0$1$4$"	/**"
"ClassPathResource.java:56"$0$0$0$10$73$"	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage."
"ClassPathResource.java:57"$0$0$0$12$71$"	 * A leading slash will be removed, as the ClassLoader resource access"
"ClassPathResource.java:58"$0$0$0$6$31$"	 * methods will not accept it."
"ClassPathResource.java:59"$0$0$0$10$55$"	 * <p>The thread context class loader will be used for"
"ClassPathResource.java:60"$0$0$0$4$25$"	 * loading the resource."
"ClassPathResource.java:61"$0$0$0$10$55$"	 * @param path the absolute path within the class path"
"ClassPathResource.java:62"$1$0$0$3$58$"	 * @see java.lang.ClassLoader#getResourceAsStream(String)"
"ClassPathResource.java:63"$1$0$0$3$68$"	 * @see org.springframework.util.ClassUtils#getDefaultClassLoader()"
"ClassPathResource.java:64"$0$0$0$1$4$"	 */"
"ClassPathResource.java:65"$0$0$0$4$40$"	public ClassPathResource(String path) {"
"ClassPathResource.java:66"$0$0$0$3$33$"		this(path, (ClassLoader) null);"
"ClassPathResource.java:67"$0$0$0$1$2$"	}"
"ClassPathResource.java:68"$0$0$0$0$0$""
"ClassPathResource.java:69"$0$0$0$1$4$"	/**"
"ClassPathResource.java:70"$0$0$0$10$73$"	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage."
"ClassPathResource.java:71"$0$0$0$12$71$"	 * A leading slash will be removed, as the ClassLoader resource access"
"ClassPathResource.java:72"$0$0$0$6$31$"	 * methods will not accept it."
"ClassPathResource.java:73"$0$0$0$9$54$"	 * @param path the absolute path within the classpath"
"ClassPathResource.java:74"$0$0$0$11$66$"	 * @param classLoader the class loader to load the resource with,"
"ClassPathResource.java:75"$0$0$0$10$55$"	 * or {@code null} for the thread context class loader"
"ClassPathResource.java:76"$1$0$0$3$48$"	 * @see ClassLoader#getResourceAsStream(String)"
"ClassPathResource.java:77"$0$0$0$1$4$"	 */"
"ClassPathResource.java:78"$0$0$0$7$75$"	public ClassPathResource(String path, @Nullable ClassLoader classLoader) {"
"ClassPathResource.java:79"$0$0$0$6$48$"		Assert.notNull(path, ""Path must not be null"");"
"ClassPathResource.java:80"$0$0$0$4$49$"		String pathToUse = StringUtils.cleanPath(path);"
"ClassPathResource.java:81"$0$0$0$3$34$"		if (pathToUse.startsWith(""/"")) {"
"ClassPathResource.java:82"$0$0$0$3$38$"			pathToUse = pathToUse.substring(1);"
"ClassPathResource.java:83"$0$0$0$1$3$"		}"
"ClassPathResource.java:84"$0$0$0$3$24$"		this.path = pathToUse;"
"ClassPathResource.java:85"$1$0$0$9$94$"		this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());"
"ClassPathResource.java:86"$0$0$0$1$2$"	}"
"ClassPathResource.java:87"$0$0$0$0$0$""
"ClassPathResource.java:88"$0$0$0$1$4$"	/**"
"ClassPathResource.java:89"$0$0$0$10$67$"	 * Create a new {@code ClassPathResource} for {@code Class} usage."
"ClassPathResource.java:90"$0$0$0$13$67$"	 * The path can be relative to the given class, or absolute within"
"ClassPathResource.java:91"$0$0$0$7$38$"	 * the classpath via a leading slash."
"ClassPathResource.java:92"$0$0$0$11$63$"	 * @param path relative or absolute path within the class path"
"ClassPathResource.java:93"$0$0$0$9$49$"	 * @param clazz the class to load resources with"
"ClassPathResource.java:94"$1$0$0$3$44$"	 * @see java.lang.Class#getResourceAsStream"
"ClassPathResource.java:95"$0$0$0$1$4$"	 */"
"ClassPathResource.java:96"$0$0$0$7$66$"	public ClassPathResource(String path, @Nullable Class<?> clazz) {"
"ClassPathResource.java:97"$0$0$0$6$48$"		Assert.notNull(path, ""Path must not be null"");"
"ClassPathResource.java:98"$0$0$0$3$42$"		this.path = StringUtils.cleanPath(path);"
"ClassPathResource.java:99"$0$0$0$3$21$"		this.clazz = clazz;"
"ClassPathResource.java:100"$0$0$0$1$2$"	}"
"ClassPathResource.java:101"$0$0$0$0$0$""
"ClassPathResource.java:102"$0$0$0$1$4$"	/**"
"ClassPathResource.java:103"$0$0$0$10$76$"	 * Create a new {@code ClassPathResource} with optional {@code ClassLoader}"
"ClassPathResource.java:104"$0$0$0$8$47$"	 * and {@code Class}. Only for internal usage."
"ClassPathResource.java:105"$0$0$0$10$62$"	 * @param path relative or absolute path within the classpath"
"ClassPathResource.java:106"$0$0$0$13$73$"	 * @param classLoader the class loader to load the resource with, if any"
"ClassPathResource.java:107"$0$0$0$11$57$"	 * @param clazz the class to load resources with, if any"
"ClassPathResource.java:108"$0$0$0$11$58$"	 * @deprecated as of 4.3.13, in favor of selective use of"
"ClassPathResource.java:109"$0$0$0$8$96$"	 * {@link #ClassPathResource(String, ClassLoader)} vs {@link #ClassPathResource(String, Class)}"
"ClassPathResource.java:110"$0$0$0$1$4$"	 */"
"ClassPathResource.java:111"$0$0$0$1$12$"	@Deprecated"
"ClassPathResource.java:112"$0$0$0$10$104$"	protected ClassPathResource(String path, @Nullable ClassLoader classLoader, @Nullable Class<?> clazz) {"
"ClassPathResource.java:113"$0$0$0$3$42$"		this.path = StringUtils.cleanPath(path);"
"ClassPathResource.java:114"$0$0$0$3$33$"		this.classLoader = classLoader;"
"ClassPathResource.java:115"$0$0$0$3$21$"		this.clazz = clazz;"
"ClassPathResource.java:116"$0$0$0$1$2$"	}"
"ClassPathResource.java:117"$0$0$0$0$0$""
"ClassPathResource.java:118"$0$0$0$0$0$""
"ClassPathResource.java:119"$0$0$0$1$4$"	/**"
"ClassPathResource.java:120"$0$0$0$14$79$"	 * Return the path for this resource (as resource path within the class path)."
"ClassPathResource.java:121"$0$0$0$1$4$"	 */"
"ClassPathResource.java:122"$1$0$0$5$32$"	public final String getPath() {"
"ClassPathResource.java:123"$0$0$0$2$19$"		return this.path;"
"ClassPathResource.java:124"$0$0$0$1$2$"	}"
"ClassPathResource.java:125"$0$0$0$0$0$""
"ClassPathResource.java:126"$0$0$0$1$4$"	/**"
"ClassPathResource.java:127"$0$0$0$11$68$"	 * Return the ClassLoader that this resource will be obtained from."
"ClassPathResource.java:128"$0$0$0$1$4$"	 */"
"ClassPathResource.java:129"$0$0$0$1$10$"	@Nullable"
"ClassPathResource.java:130"$1$0$0$5$44$"	public final ClassLoader getClassLoader() {"
"ClassPathResource.java:131"$1$0$0$8$79$"		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader);"
"ClassPathResource.java:132"$0$0$0$1$2$"	}"
"ClassPathResource.java:133"$0$0$0$0$0$""
"ClassPathResource.java:134"$0$0$0$0$0$""
"ClassPathResource.java:135"$0$0$0$1$4$"	/**"
"ClassPathResource.java:136"$0$0$0$11$68$"	 * This implementation checks for the resolution of a resource URL."
"ClassPathResource.java:137"$1$0$0$3$50$"	 * @see java.lang.ClassLoader#getResource(String)"
"ClassPathResource.java:138"$1$0$0$3$44$"	 * @see java.lang.Class#getResource(String)"
"ClassPathResource.java:139"$0$0$0$1$4$"	 */"
"ClassPathResource.java:140"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:141"$0$0$0$4$26$"	public boolean exists() {"
"ClassPathResource.java:142"$0$0$0$4$32$"		return (resolveURL() != null);"
"ClassPathResource.java:143"$0$0$0$1$2$"	}"
"ClassPathResource.java:144"$0$0$0$0$0$""
"ClassPathResource.java:145"$0$0$0$1$4$"	/**"
"ClassPathResource.java:146"$0$0$0$10$58$"	 * Resolves a URL for the underlying class path resource."
"ClassPathResource.java:147"$0$0$0$11$63$"	 * @return the resolved URL, or {@code null} if not resolvable"
"ClassPathResource.java:148"$0$0$0$1$4$"	 */"
"ClassPathResource.java:149"$0$0$0$1$10$"	@Nullable"
"ClassPathResource.java:150"$0$0$0$4$29$"	protected URL resolveURL() {"
"ClassPathResource.java:151"$0$0$0$5$27$"		if (this.clazz != null) {"
"ClassPathResource.java:152"$1$0$0$2$44$"			return this.clazz.getResource(this.path);"
"ClassPathResource.java:153"$0$0$0$1$3$"		}"
"ClassPathResource.java:154"$0$0$0$6$38$"		else if (this.classLoader != null) {"
"ClassPathResource.java:155"$1$0$0$2$50$"			return this.classLoader.getResource(this.path);"
"ClassPathResource.java:156"$0$0$0$1$3$"		}"
"ClassPathResource.java:157"$0$0$0$2$8$"		else {"
"ClassPathResource.java:158"$1$0$0$2$51$"			return ClassLoader.getSystemResource(this.path);"
"ClassPathResource.java:159"$0$0$0$1$3$"		}"
"ClassPathResource.java:160"$0$0$0$1$2$"	}"
"ClassPathResource.java:161"$0$0$0$0$0$""
"ClassPathResource.java:162"$0$0$0$1$4$"	/**"
"ClassPathResource.java:163"$0$0$0$12$79$"	 * This implementation opens an InputStream for the given class path resource."
"ClassPathResource.java:164"$1$0$0$3$58$"	 * @see java.lang.ClassLoader#getResourceAsStream(String)"
"ClassPathResource.java:165"$1$0$0$3$52$"	 * @see java.lang.Class#getResourceAsStream(String)"
"ClassPathResource.java:166"$0$0$0$1$4$"	 */"
"ClassPathResource.java:167"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:168"$1$0$0$6$57$"	public InputStream getInputStream() throws IOException {"
"ClassPathResource.java:169"$0$0$0$2$17$"		InputStream is;"
"ClassPathResource.java:170"$0$0$0$5$27$"		if (this.clazz != null) {"
"ClassPathResource.java:171"$1$0$0$3$50$"			is = this.clazz.getResourceAsStream(this.path);"
"ClassPathResource.java:172"$0$0$0$1$3$"		}"
"ClassPathResource.java:173"$0$0$0$6$38$"		else if (this.classLoader != null) {"
"ClassPathResource.java:174"$1$0$0$3$56$"			is = this.classLoader.getResourceAsStream(this.path);"
"ClassPathResource.java:175"$0$0$0$1$3$"		}"
"ClassPathResource.java:176"$0$0$0$2$8$"		else {"
"ClassPathResource.java:177"$1$0$0$3$57$"			is = ClassLoader.getSystemResourceAsStream(this.path);"
"ClassPathResource.java:178"$0$0$0$1$3$"		}"
"ClassPathResource.java:179"$0$0$0$5$19$"		if (is == null) {"
"ClassPathResource.java:180"$1$0$0$13$101$"			throw new FileNotFoundException(getDescription() + "" cannot be opened because it does not exist"");"
"ClassPathResource.java:181"$0$0$0$1$3$"		}"
"ClassPathResource.java:182"$0$0$0$2$12$"		return is;"
"ClassPathResource.java:183"$0$0$0$1$2$"	}"
"ClassPathResource.java:184"$0$0$0$0$0$""
"ClassPathResource.java:185"$0$0$0$1$4$"	/**"
"ClassPathResource.java:186"$0$0$0$12$77$"	 * This implementation returns a URL for the underlying class path resource,"
"ClassPathResource.java:187"$0$0$0$3$17$"	 * if available."
"ClassPathResource.java:188"$1$0$0$3$50$"	 * @see java.lang.ClassLoader#getResource(String)"
"ClassPathResource.java:189"$1$0$0$3$44$"	 * @see java.lang.Class#getResource(String)"
"ClassPathResource.java:190"$0$0$0$1$4$"	 */"
"ClassPathResource.java:191"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:192"$1$0$0$6$41$"	public URL getURL() throws IOException {"
"ClassPathResource.java:193"$0$0$0$4$25$"		URL url = resolveURL();"
"ClassPathResource.java:194"$0$0$0$5$20$"		if (url == null) {"
"ClassPathResource.java:195"$1$0$0$15$110$"			throw new FileNotFoundException(getDescription() + "" cannot be resolved to URL because it does not exist"");"
"ClassPathResource.java:196"$0$0$0$1$3$"		}"
"ClassPathResource.java:197"$0$0$0$2$13$"		return url;"
"ClassPathResource.java:198"$0$0$0$1$2$"	}"
"ClassPathResource.java:199"$0$0$0$0$0$""
"ClassPathResource.java:200"$0$0$0$1$4$"	/**"
"ClassPathResource.java:201"$0$0$0$10$76$"	 * This implementation creates a ClassPathResource, applying the given path"
"ClassPathResource.java:202"$0$0$0$12$71$"	 * relative to the path of the underlying resource of this descriptor."
"ClassPathResource.java:203"$0$0$0$4$79$"	 * @see org.springframework.util.StringUtils#applyRelativePath(String, String)"
"ClassPathResource.java:204"$0$0$0$1$4$"	 */"
"ClassPathResource.java:205"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:206"$0$0$0$5$54$"	public Resource createRelative(String relativePath) {"
"ClassPathResource.java:207"$0$0$0$5$76$"		String pathToUse = StringUtils.applyRelativePath(this.path, relativePath);"
"ClassPathResource.java:208"$0$0$0$9$77$"		return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) :"
"ClassPathResource.java:209"$0$0$0$3$56$"				new ClassPathResource(pathToUse, this.classLoader));"
"ClassPathResource.java:210"$0$0$0$1$2$"	}"
"ClassPathResource.java:211"$0$0$0$0$0$""
"ClassPathResource.java:212"$0$0$0$1$4$"	/**"
"ClassPathResource.java:213"$0$0$0$13$73$"	 * This implementation returns the name of the file that this class path"
"ClassPathResource.java:214"$0$0$0$4$23$"	 * resource refers to."
"ClassPathResource.java:215"$1$0$0$3$65$"	 * @see org.springframework.util.StringUtils#getFilename(String)"
"ClassPathResource.java:216"$0$0$0$1$4$"	 */"
"ClassPathResource.java:217"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:218"$0$0$0$1$10$"	@Nullable"
"ClassPathResource.java:219"$1$0$0$4$30$"	public String getFilename() {"
"ClassPathResource.java:220"$1$0$0$2$44$"		return StringUtils.getFilename(this.path);"
"ClassPathResource.java:221"$0$0$0$1$2$"	}"
"ClassPathResource.java:222"$0$0$0$0$0$""
"ClassPathResource.java:223"$0$0$0$1$4$"	/**"
"ClassPathResource.java:224"$0$0$0$12$84$"	 * This implementation returns a description that includes the class path location."
"ClassPathResource.java:225"$0$0$0$1$4$"	 */"
"ClassPathResource.java:226"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:227"$1$0$0$4$33$"	public String getDescription() {"
"ClassPathResource.java:228"$0$0$0$8$69$"		StringBuilder builder = new StringBuilder(""class path resource ["");"
"ClassPathResource.java:229"$0$0$0$4$31$"		String pathToUse = this.path;"
"ClassPathResource.java:230"$0$0$0$7$57$"		if (this.clazz != null && !pathToUse.startsWith(""/"")) {"
"ClassPathResource.java:231"$0$0$0$1$69$"			builder.append(ClassUtils.classPackageAsResourcePath(this.clazz));"
"ClassPathResource.java:232"$0$0$0$1$23$"			builder.append('/');"
"ClassPathResource.java:233"$0$0$0$1$3$"		}"
"ClassPathResource.java:234"$0$0$0$3$34$"		if (pathToUse.startsWith(""/"")) {"
"ClassPathResource.java:235"$0$0$0$3$38$"			pathToUse = pathToUse.substring(1);"
"ClassPathResource.java:236"$0$0$0$1$3$"		}"
"ClassPathResource.java:237"$0$0$0$1$28$"		builder.append(pathToUse);"
"ClassPathResource.java:238"$0$0$0$1$22$"		builder.append(']');"
"ClassPathResource.java:239"$0$0$0$2$28$"		return builder.toString();"
"ClassPathResource.java:240"$0$0$0$1$2$"	}"
"ClassPathResource.java:241"$0$0$0$0$0$""
"ClassPathResource.java:242"$0$0$0$0$0$""
"ClassPathResource.java:243"$0$0$0$1$4$"	/**"
"ClassPathResource.java:244"$0$0$0$9$69$"	 * This implementation compares the underlying class path locations."
"ClassPathResource.java:245"$0$0$0$1$4$"	 */"
"ClassPathResource.java:246"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:247"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"ClassPathResource.java:248"$0$0$0$5$22$"		if (this == other) {"
"ClassPathResource.java:249"$0$0$0$2$15$"			return true;"
"ClassPathResource.java:250"$0$0$0$1$3$"		}"
"ClassPathResource.java:251"$0$0$0$5$46$"		if (!(other instanceof ClassPathResource)) {"
"ClassPathResource.java:252"$0$0$0$2$16$"			return false;"
"ClassPathResource.java:253"$0$0$0$1$3$"		}"
"ClassPathResource.java:254"$0$0$0$5$57$"		ClassPathResource otherRes = (ClassPathResource) other;"
"ClassPathResource.java:255"$0$0$0$3$44$"		return (this.path.equals(otherRes.path) &&"
"ClassPathResource.java:256"$0$0$0$3$73$"				ObjectUtils.nullSafeEquals(this.classLoader, otherRes.classLoader) &&"
"ClassPathResource.java:257"$0$0$0$2$60$"				ObjectUtils.nullSafeEquals(this.clazz, otherRes.clazz));"
"ClassPathResource.java:258"$0$0$0$1$2$"	}"
"ClassPathResource.java:259"$0$0$0$0$0$""
"ClassPathResource.java:260"$0$0$0$1$4$"	/**"
"ClassPathResource.java:261"$0$0$0$10$63$"	 * This implementation returns the hash code of the underlying"
"ClassPathResource.java:262"$0$0$0$4$24$"	 * class path location."
"ClassPathResource.java:263"$0$0$0$1$4$"	 */"
"ClassPathResource.java:264"$0$0$0$1$10$"	@Override"
"ClassPathResource.java:265"$0$0$0$4$24$"	public int hashCode() {"
"ClassPathResource.java:266"$0$0$0$2$30$"		return this.path.hashCode();"
"ClassPathResource.java:267"$0$0$0$1$2$"	}"
"ClassPathResource.java:268"$0$0$0$0$0$""
"ClassPathResource.java:269"$0$0$0$1$1$"}"
"MethodParameter.java:1"$0$0$0$1$2$"/*"
"MethodParameter.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"MethodParameter.java:3"$0$0$0$1$2$" *"
"MethodParameter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MethodParameter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MethodParameter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MethodParameter.java:7"$0$0$0$1$2$" *"
"MethodParameter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MethodParameter.java:9"$0$0$0$1$2$" *"
"MethodParameter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MethodParameter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MethodParameter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MethodParameter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MethodParameter.java:14"$0$0$0$5$33$" * limitations under the License."
"MethodParameter.java:15"$0$0$0$1$3$" */"
"MethodParameter.java:16"$0$0$0$0$0$""
"MethodParameter.java:17"$0$0$0$2$33$"package org.springframework.core;"
"MethodParameter.java:18"$0$0$0$0$0$""
"MethodParameter.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"MethodParameter.java:20"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"MethodParameter.java:21"$0$0$0$2$37$"import java.lang.reflect.Constructor;"
"MethodParameter.java:22"$0$0$0$2$36$"import java.lang.reflect.Executable;"
"MethodParameter.java:23"$0$0$0$2$32$"import java.lang.reflect.Member;"
"MethodParameter.java:24"$0$0$0$2$32$"import java.lang.reflect.Method;"
"MethodParameter.java:25"$0$0$0$2$35$"import java.lang.reflect.Parameter;"
"MethodParameter.java:26"$0$0$0$2$43$"import java.lang.reflect.ParameterizedType;"
"MethodParameter.java:27"$0$0$0$2$30$"import java.lang.reflect.Type;"
"MethodParameter.java:28"$0$0$0$2$25$"import java.util.HashMap;"
"MethodParameter.java:29"$0$0$0$2$21$"import java.util.Map;"
"MethodParameter.java:30"$0$0$0$2$26$"import java.util.Optional;"
"MethodParameter.java:31"$0$0$0$2$36$"import java.util.function.Predicate;"
"MethodParameter.java:32"$0$0$0$0$0$""
"MethodParameter.java:33"$0$0$0$2$19$"import kotlin.Unit;"
"MethodParameter.java:34"$0$0$0$2$32$"import kotlin.reflect.KFunction;"
"MethodParameter.java:35"$0$0$0$2$33$"import kotlin.reflect.KParameter;"
"MethodParameter.java:36"$0$0$0$2$44$"import kotlin.reflect.jvm.ReflectJvmMapping;"
"MethodParameter.java:37"$0$0$0$0$0$""
"MethodParameter.java:38"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MethodParameter.java:39"$0$0$0$2$39$"import org.springframework.util.Assert;"
"MethodParameter.java:40"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"MethodParameter.java:41"$0$0$0$2$44$"import org.springframework.util.ObjectUtils;"
"MethodParameter.java:42"$0$0$0$0$0$""
"MethodParameter.java:43"$0$0$0$1$3$"/**"
"MethodParameter.java:44"$0$0$0$15$96$" * Helper class that encapsulates the specification of a method parameter, i.e. a {@link Method}"
"MethodParameter.java:45"$0$0$0$17$95$" * or {@link Constructor} plus a parameter index and a nested type index for a declared generic"
"MethodParameter.java:46"$0$0$0$10$56$" * type. Useful as a specification object to pass along."
"MethodParameter.java:47"$0$0$0$1$2$" *"
"MethodParameter.java:48"$0$0$0$9$99$" * <p>As of 4.2, there is a {@link org.springframework.core.annotation.SynthesizingMethodParameter}"
"MethodParameter.java:49"$0$0$0$13$97$" * subclass available which synthesizes annotations with attribute aliases. That subclass is used"
"MethodParameter.java:50"$0$0$0$9$58$" * for web and message endpoint processing, in particular."
"MethodParameter.java:51"$0$0$0$1$2$" *"
"MethodParameter.java:52"$0$0$0$4$26$" * @author Juergen Hoeller"
"MethodParameter.java:53"$0$0$0$4$21$" * @author Rob Harrop"
"MethodParameter.java:54"$0$0$0$4$23$" * @author Andy Clement"
"MethodParameter.java:55"$0$0$0$4$22$" * @author Sam Brannen"
"MethodParameter.java:56"$0$0$0$4$28$" * @author Sebastien Deleuze"
"MethodParameter.java:57"$0$0$0$4$23$" * @author Phillip Webb"
"MethodParameter.java:58"$0$0$0$3$13$" * @since 2.0"
"MethodParameter.java:59"$0$0$0$3$71$" * @see org.springframework.core.annotation.SynthesizingMethodParameter"
"MethodParameter.java:60"$0$0$0$1$3$" */"
"MethodParameter.java:61"$0$0$0$4$30$"public class MethodParameter {"
"MethodParameter.java:62"$0$0$0$0$0$""
"MethodParameter.java:63"$0$0$0$8$78$"	private static final Annotation[] EMPTY_ANNOTATION_ARRAY = new Annotation[0];"
"MethodParameter.java:64"$0$0$0$0$0$""
"MethodParameter.java:65"$0$0$0$0$0$""
"MethodParameter.java:66"$0$0$0$4$37$"	private final Executable executable;"
"MethodParameter.java:67"$0$0$0$0$0$""
"MethodParameter.java:68"$0$0$0$4$34$"	private final int parameterIndex;"
"MethodParameter.java:69"$0$0$0$0$0$""
"MethodParameter.java:70"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:71"$0$0$0$4$38$"	private volatile Parameter parameter;"
"MethodParameter.java:72"$0$0$0$0$0$""
"MethodParameter.java:73"$0$0$0$3$26$"	private int nestingLevel;"
"MethodParameter.java:74"$0$0$0$0$0$""
"MethodParameter.java:75"$0$0$0$10$53$"	/** Map from Integer level to Integer type index. */"
"MethodParameter.java:76"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:77"$0$0$0$3$43$"	Map<Integer, Integer> typeIndexesPerLevel;"
"MethodParameter.java:78"$0$0$0$0$0$""
"MethodParameter.java:79"$1$0$0$13$96$"	/** The containing class. Could also be supplied by overriding {@link #getContainingClass()} */"
"MethodParameter.java:80"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:81"$0$0$0$4$43$"	private volatile Class<?> containingClass;"
"MethodParameter.java:82"$0$0$0$0$0$""
"MethodParameter.java:83"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:84"$0$0$0$4$41$"	private volatile Class<?> parameterType;"
"MethodParameter.java:85"$0$0$0$0$0$""
"MethodParameter.java:86"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:87"$0$0$0$4$44$"	private volatile Type genericParameterType;"
"MethodParameter.java:88"$0$0$0$0$0$""
"MethodParameter.java:89"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:90"$0$0$0$4$52$"	private volatile Annotation[] parameterAnnotations;"
"MethodParameter.java:91"$0$0$0$0$0$""
"MethodParameter.java:92"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:93"$0$0$0$4$66$"	private volatile ParameterNameDiscoverer parameterNameDiscoverer;"
"MethodParameter.java:94"$0$0$0$0$0$""
"MethodParameter.java:95"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:96"$0$0$0$4$39$"	private volatile String parameterName;"
"MethodParameter.java:97"$0$0$0$0$0$""
"MethodParameter.java:98"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:99"$0$0$0$4$56$"	private volatile MethodParameter nestedMethodParameter;"
"MethodParameter.java:100"$0$0$0$0$0$""
"MethodParameter.java:101"$0$0$0$0$0$""
"MethodParameter.java:102"$0$0$0$1$4$"	/**"
"MethodParameter.java:103"$0$0$0$14$84$"	 * Create a new {@code MethodParameter} for the given method, with nesting level 1."
"MethodParameter.java:104"$0$0$0$10$55$"	 * @param method the Method to specify a parameter for"
"MethodParameter.java:105"$0$0$0$12$71$"	 * @param parameterIndex the index of the parameter: -1 for the method"
"MethodParameter.java:106"$0$0$0$14$74$"	 * return type; 0 for the first method parameter; 1 for the second method"
"MethodParameter.java:107"$0$0$0$3$19$"	 * parameter, etc."
"MethodParameter.java:108"$0$0$0$1$4$"	 */"
"MethodParameter.java:109"$0$0$0$6$60$"	public MethodParameter(Method method, int parameterIndex) {"
"MethodParameter.java:110"$0$0$0$3$34$"		this(method, parameterIndex, 1);"
"MethodParameter.java:111"$0$0$0$1$2$"	}"
"MethodParameter.java:112"$0$0$0$0$0$""
"MethodParameter.java:113"$0$0$0$1$4$"	/**"
"MethodParameter.java:114"$0$0$0$10$62$"	 * Create a new {@code MethodParameter} for the given method."
"MethodParameter.java:115"$0$0$0$10$55$"	 * @param method the Method to specify a parameter for"
"MethodParameter.java:116"$0$0$0$12$71$"	 * @param parameterIndex the index of the parameter: -1 for the method"
"MethodParameter.java:117"$0$0$0$14$74$"	 * return type; 0 for the first method parameter; 1 for the second method"
"MethodParameter.java:118"$0$0$0$3$19$"	 * parameter, etc."
"MethodParameter.java:119"$1$0$0$10$60$"	 * @param nestingLevel the nesting level of the target type"
"MethodParameter.java:120"$0$0$0$15$71$"	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the"
"MethodParameter.java:121"$0$0$0$13$73$"	 * nested List, whereas 2 would indicate the element of the nested List)"
"MethodParameter.java:122"$0$0$0$1$4$"	 */"
"MethodParameter.java:123"$0$0$0$8$78$"	public MethodParameter(Method method, int parameterIndex, int nestingLevel) {"
"MethodParameter.java:124"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"MethodParameter.java:125"$0$0$0$3$27$"		this.executable = method;"
"MethodParameter.java:126"$0$0$0$4$62$"		this.parameterIndex = validateIndex(method, parameterIndex);"
"MethodParameter.java:127"$0$0$0$3$35$"		this.nestingLevel = nestingLevel;"
"MethodParameter.java:128"$0$0$0$1$2$"	}"
"MethodParameter.java:129"$0$0$0$0$0$""
"MethodParameter.java:130"$0$0$0$1$4$"	/**"
"MethodParameter.java:131"$0$0$0$13$81$"	 * Create a new MethodParameter for the given constructor, with nesting level 1."
"MethodParameter.java:132"$0$0$0$10$65$"	 * @param constructor the Constructor to specify a parameter for"
"MethodParameter.java:133"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"MethodParameter.java:134"$0$0$0$1$4$"	 */"
"MethodParameter.java:135"$0$0$0$6$73$"	public MethodParameter(Constructor<?> constructor, int parameterIndex) {"
"MethodParameter.java:136"$0$0$0$3$39$"		this(constructor, parameterIndex, 1);"
"MethodParameter.java:137"$0$0$0$1$2$"	}"
"MethodParameter.java:138"$0$0$0$0$0$""
"MethodParameter.java:139"$0$0$0$1$4$"	/**"
"MethodParameter.java:140"$0$0$0$9$59$"	 * Create a new MethodParameter for the given constructor."
"MethodParameter.java:141"$0$0$0$10$65$"	 * @param constructor the Constructor to specify a parameter for"
"MethodParameter.java:142"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"MethodParameter.java:143"$1$0$0$10$60$"	 * @param nestingLevel the nesting level of the target type"
"MethodParameter.java:144"$0$0$0$15$71$"	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the"
"MethodParameter.java:145"$0$0$0$13$73$"	 * nested List, whereas 2 would indicate the element of the nested List)"
"MethodParameter.java:146"$0$0$0$1$4$"	 */"
"MethodParameter.java:147"$0$0$0$8$91$"	public MethodParameter(Constructor<?> constructor, int parameterIndex, int nestingLevel) {"
"MethodParameter.java:148"$0$0$0$6$62$"		Assert.notNull(constructor, ""Constructor must not be null"");"
"MethodParameter.java:149"$0$0$0$3$32$"		this.executable = constructor;"
"MethodParameter.java:150"$0$0$0$4$67$"		this.parameterIndex = validateIndex(constructor, parameterIndex);"
"MethodParameter.java:151"$0$0$0$3$35$"		this.nestingLevel = nestingLevel;"
"MethodParameter.java:152"$0$0$0$1$2$"	}"
"MethodParameter.java:153"$0$0$0$0$0$""
"MethodParameter.java:154"$0$0$0$1$4$"	/**"
"MethodParameter.java:155"$0$0$0$11$72$"	 * Internal constructor used to create a {@link MethodParameter} with a"
"MethodParameter.java:156"$0$0$0$5$33$"	 * containing class already set."
"MethodParameter.java:157"$0$0$0$10$63$"	 * @param executable the Executable to specify a parameter for"
"MethodParameter.java:158"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"MethodParameter.java:159"$0$0$0$6$47$"	 * @param containingClass the containing class"
"MethodParameter.java:160"$0$0$0$3$14$"	 * @since 5.2"
"MethodParameter.java:161"$0$0$0$1$4$"	 */"
"MethodParameter.java:162"$0$0$0$8$97$"	MethodParameter(Executable executable, int parameterIndex, @Nullable Class<?> containingClass) {"
"MethodParameter.java:163"$0$0$0$6$60$"		Assert.notNull(executable, ""Executable must not be null"");"
"MethodParameter.java:164"$0$0$0$3$31$"		this.executable = executable;"
"MethodParameter.java:165"$0$0$0$4$66$"		this.parameterIndex = validateIndex(executable, parameterIndex);"
"MethodParameter.java:166"$0$0$0$3$24$"		this.nestingLevel = 1;"
"MethodParameter.java:167"$0$0$0$3$41$"		this.containingClass = containingClass;"
"MethodParameter.java:168"$0$0$0$1$2$"	}"
"MethodParameter.java:169"$0$0$0$0$0$""
"MethodParameter.java:170"$0$0$0$1$4$"	/**"
"MethodParameter.java:171"$0$0$0$9$72$"	 * Copy constructor, resulting in an independent MethodParameter object"
"MethodParameter.java:172"$0$0$0$15$79$"	 * based on the same metadata and cache state that the original object was in."
"MethodParameter.java:173"$0$0$0$10$68$"	 * @param original the original MethodParameter object to copy from"
"MethodParameter.java:174"$0$0$0$1$4$"	 */"
"MethodParameter.java:175"$0$0$0$4$51$"	public MethodParameter(MethodParameter original) {"
"MethodParameter.java:176"$0$0$0$6$56$"		Assert.notNull(original, ""Original must not be null"");"
"MethodParameter.java:177"$0$0$0$3$40$"		this.executable = original.executable;"
"MethodParameter.java:178"$0$0$0$3$48$"		this.parameterIndex = original.parameterIndex;"
"MethodParameter.java:179"$0$0$0$3$38$"		this.parameter = original.parameter;"
"MethodParameter.java:180"$0$0$0$3$44$"		this.nestingLevel = original.nestingLevel;"
"MethodParameter.java:181"$0$0$0$3$58$"		this.typeIndexesPerLevel = original.typeIndexesPerLevel;"
"MethodParameter.java:182"$0$0$0$3$50$"		this.containingClass = original.containingClass;"
"MethodParameter.java:183"$0$0$0$3$46$"		this.parameterType = original.parameterType;"
"MethodParameter.java:184"$0$0$0$3$60$"		this.genericParameterType = original.genericParameterType;"
"MethodParameter.java:185"$0$0$0$3$60$"		this.parameterAnnotations = original.parameterAnnotations;"
"MethodParameter.java:186"$0$0$0$3$66$"		this.parameterNameDiscoverer = original.parameterNameDiscoverer;"
"MethodParameter.java:187"$0$0$0$3$46$"		this.parameterName = original.parameterName;"
"MethodParameter.java:188"$0$0$0$1$2$"	}"
"MethodParameter.java:189"$0$0$0$0$0$""
"MethodParameter.java:190"$0$0$0$0$0$""
"MethodParameter.java:191"$0$0$0$1$4$"	/**"
"MethodParameter.java:192"$0$0$0$7$38$"	 * Return the wrapped Method, if any."
"MethodParameter.java:193"$0$0$0$8$55$"	 * <p>Note: Either Method or Constructor is available."
"MethodParameter.java:194"$0$0$0$9$47$"	 * @return the Method, or {@code null} if none"
"MethodParameter.java:195"$0$0$0$1$4$"	 */"
"MethodParameter.java:196"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:197"$1$0$0$4$28$"	public Method getMethod() {"
"MethodParameter.java:198"$0$0$0$9$79$"		return (this.executable instanceof Method ? (Method) this.executable : null);"
"MethodParameter.java:199"$0$0$0$1$2$"	}"
"MethodParameter.java:200"$0$0$0$0$0$""
"MethodParameter.java:201"$0$0$0$1$4$"	/**"
"MethodParameter.java:202"$0$0$0$7$43$"	 * Return the wrapped Constructor, if any."
"MethodParameter.java:203"$0$0$0$8$55$"	 * <p>Note: Either Method or Constructor is available."
"MethodParameter.java:204"$0$0$0$9$52$"	 * @return the Constructor, or {@code null} if none"
"MethodParameter.java:205"$0$0$0$1$4$"	 */"
"MethodParameter.java:206"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:207"$1$0$0$4$41$"	public Constructor<?> getConstructor() {"
"MethodParameter.java:208"$0$0$0$9$92$"		return (this.executable instanceof Constructor ? (Constructor<?>) this.executable : null);"
"MethodParameter.java:209"$0$0$0$1$2$"	}"
"MethodParameter.java:210"$0$0$0$0$0$""
"MethodParameter.java:211"$0$0$0$1$4$"	/**"
"MethodParameter.java:212"$0$0$0$11$72$"	 * Return the class that declares the underlying Method or Constructor."
"MethodParameter.java:213"$0$0$0$1$4$"	 */"
"MethodParameter.java:214"$1$0$0$4$38$"	public Class<?> getDeclaringClass() {"
"MethodParameter.java:215"$1$0$0$2$45$"		return this.executable.getDeclaringClass();"
"MethodParameter.java:216"$0$0$0$1$2$"	}"
"MethodParameter.java:217"$0$0$0$0$0$""
"MethodParameter.java:218"$0$0$0$1$4$"	/**"
"MethodParameter.java:219"$0$0$0$5$30$"	 * Return the wrapped member."
"MethodParameter.java:220"$0$0$0$8$47$"	 * @return the Method or Constructor as Member"
"MethodParameter.java:221"$0$0$0$1$4$"	 */"
"MethodParameter.java:222"$1$0$0$4$28$"	public Member getMember() {"
"MethodParameter.java:223"$0$0$0$2$25$"		return this.executable;"
"MethodParameter.java:224"$0$0$0$1$2$"	}"
"MethodParameter.java:225"$0$0$0$0$0$""
"MethodParameter.java:226"$0$0$0$1$4$"	/**"
"MethodParameter.java:227"$0$0$0$6$41$"	 * Return the wrapped annotated element."
"MethodParameter.java:228"$0$0$0$11$83$"	 * <p>Note: This method exposes the annotations declared on the method/constructor"
"MethodParameter.java:229"$0$0$0$12$78$"	 * itself (i.e. at the method/constructor level, not at the parameter level)."
"MethodParameter.java:230"$0$0$0$8$57$"	 * @return the Method or Constructor as AnnotatedElement"
"MethodParameter.java:231"$0$0$0$1$4$"	 */"
"MethodParameter.java:232"$1$0$0$4$48$"	public AnnotatedElement getAnnotatedElement() {"
"MethodParameter.java:233"$0$0$0$2$25$"		return this.executable;"
"MethodParameter.java:234"$0$0$0$1$2$"	}"
"MethodParameter.java:235"$0$0$0$0$0$""
"MethodParameter.java:236"$0$0$0$1$4$"	/**"
"MethodParameter.java:237"$0$0$0$5$34$"	 * Return the wrapped executable."
"MethodParameter.java:238"$0$0$0$8$51$"	 * @return the Method or Constructor as Executable"
"MethodParameter.java:239"$0$0$0$3$14$"	 * @since 5.0"
"MethodParameter.java:240"$0$0$0$1$4$"	 */"
"MethodParameter.java:241"$1$0$0$4$36$"	public Executable getExecutable() {"
"MethodParameter.java:242"$0$0$0$2$25$"		return this.executable;"
"MethodParameter.java:243"$0$0$0$1$2$"	}"
"MethodParameter.java:244"$0$0$0$0$0$""
"MethodParameter.java:245"$0$0$0$1$4$"	/**"
"MethodParameter.java:246"$0$0$0$9$77$"	 * Return the {@link Parameter} descriptor for method/constructor parameter."
"MethodParameter.java:247"$0$0$0$3$14$"	 * @since 5.0"
"MethodParameter.java:248"$0$0$0$1$4$"	 */"
"MethodParameter.java:249"$1$0$0$4$34$"	public Parameter getParameter() {"
"MethodParameter.java:250"$0$0$0$5$32$"		if (this.parameterIndex < 0) {"
"MethodParameter.java:251"$0$0$0$10$98$"			throw new IllegalStateException(""Cannot retrieve Parameter descriptor for method return type"");"
"MethodParameter.java:252"$0$0$0$1$3$"		}"
"MethodParameter.java:253"$0$0$0$4$39$"		Parameter parameter = this.parameter;"
"MethodParameter.java:254"$0$0$0$5$26$"		if (parameter == null) {"
"MethodParameter.java:255"$2$0$0$3$68$"			parameter = getExecutable().getParameters()[this.parameterIndex];"
"MethodParameter.java:256"$0$0$0$3$30$"			this.parameter = parameter;"
"MethodParameter.java:257"$0$0$0$1$3$"		}"
"MethodParameter.java:258"$0$0$0$2$19$"		return parameter;"
"MethodParameter.java:259"$0$0$0$1$2$"	}"
"MethodParameter.java:260"$0$0$0$0$0$""
"MethodParameter.java:261"$0$0$0$1$4$"	/**"
"MethodParameter.java:262"$0$0$0$8$57$"	 * Return the index of the method/constructor parameter."
"MethodParameter.java:263"$0$0$0$12$63$"	 * @return the parameter index (-1 in case of the return type)"
"MethodParameter.java:264"$0$0$0$1$4$"	 */"
"MethodParameter.java:265"$1$0$0$4$33$"	public int getParameterIndex() {"
"MethodParameter.java:266"$0$0$0$2$29$"		return this.parameterIndex;"
"MethodParameter.java:267"$0$0$0$1$2$"	}"
"MethodParameter.java:268"$0$0$0$0$0$""
"MethodParameter.java:269"$0$0$0$1$4$"	/**"
"MethodParameter.java:270"$0$0$0$6$44$"	 * Increase this parameter's nesting level."
"MethodParameter.java:271"$1$0$0$3$27$"	 * @see #getNestingLevel()"
"MethodParameter.java:272"$0$0$0$9$62$"	 * @deprecated since 5.2 in favor of {@link #nested(Integer)}"
"MethodParameter.java:273"$0$0$0$1$4$"	 */"
"MethodParameter.java:274"$0$0$0$1$12$"	@Deprecated"
"MethodParameter.java:275"$0$0$0$4$37$"	public void increaseNestingLevel() {"
"MethodParameter.java:276"$0$0$0$1$22$"		this.nestingLevel++;"
"MethodParameter.java:277"$0$0$0$1$2$"	}"
"MethodParameter.java:278"$0$0$0$0$0$""
"MethodParameter.java:279"$0$0$0$1$4$"	/**"
"MethodParameter.java:280"$0$0$0$6$44$"	 * Decrease this parameter's nesting level."
"MethodParameter.java:281"$1$0$0$3$27$"	 * @see #getNestingLevel()"
"MethodParameter.java:282"$0$0$0$12$80$"	 * @deprecated since 5.2 in favor of retaining the original MethodParameter and"
"MethodParameter.java:283"$0$0$0$8$57$"	 * using {@link #nested(Integer)} if nesting is required"
"MethodParameter.java:284"$0$0$0$1$4$"	 */"
"MethodParameter.java:285"$0$0$0$1$12$"	@Deprecated"
"MethodParameter.java:286"$0$0$0$4$37$"	public void decreaseNestingLevel() {"
"MethodParameter.java:287"$1$0$0$1$53$"		getTypeIndexesPerLevel().remove(this.nestingLevel);"
"MethodParameter.java:288"$0$0$0$1$22$"		this.nestingLevel--;"
"MethodParameter.java:289"$0$0$0$1$2$"	}"
"MethodParameter.java:290"$0$0$0$0$0$""
"MethodParameter.java:291"$0$0$0$1$4$"	/**"
"MethodParameter.java:292"$1$0$0$9$47$"	 * Return the nesting level of the target type"
"MethodParameter.java:293"$0$0$0$15$71$"	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the"
"MethodParameter.java:294"$0$0$0$13$74$"	 * nested List, whereas 2 would indicate the element of the nested List)."
"MethodParameter.java:295"$0$0$0$1$4$"	 */"
"MethodParameter.java:296"$1$0$0$4$31$"	public int getNestingLevel() {"
"MethodParameter.java:297"$0$0$0$2$27$"		return this.nestingLevel;"
"MethodParameter.java:298"$0$0$0$1$2$"	}"
"MethodParameter.java:299"$0$0$0$0$0$""
"MethodParameter.java:300"$0$0$0$1$4$"	/**"
"MethodParameter.java:301"$0$0$0$11$66$"	 * Return a variant of this {@code MethodParameter} with the type"
"MethodParameter.java:302"$0$0$0$10$53$"	 * for the current level set to the specified value."
"MethodParameter.java:303"$0$0$0$7$39$"	 * @param typeIndex the new type index"
"MethodParameter.java:304"$0$0$0$3$14$"	 * @since 5.2"
"MethodParameter.java:305"$0$0$0$1$4$"	 */"
"MethodParameter.java:306"$0$0$0$5$54$"	public MethodParameter withTypeIndex(int typeIndex) {"
"MethodParameter.java:307"$0$0$0$3$46$"		return nested(this.nestingLevel, typeIndex);"
"MethodParameter.java:308"$0$0$0$1$2$"	}"
"MethodParameter.java:309"$0$0$0$0$0$""
"MethodParameter.java:310"$0$0$0$1$4$"	/**"
"MethodParameter.java:311"$0$0$0$10$53$"	 * Set the type index for the current nesting level."
"MethodParameter.java:312"$0$0$0$7$49$"	 * @param typeIndex the corresponding type index"
"MethodParameter.java:313"$0$0$0$9$48$"	 * (or {@code null} for the default type index)"
"MethodParameter.java:314"$1$0$0$3$27$"	 * @see #getNestingLevel()"
"MethodParameter.java:315"$0$0$0$9$60$"	 * @deprecated since 5.2 in favor of {@link #withTypeIndex}"
"MethodParameter.java:316"$0$0$0$1$4$"	 */"
"MethodParameter.java:317"$0$0$0$1$12$"	@Deprecated"
"MethodParameter.java:318"$0$0$0$5$57$"	public void setTypeIndexForCurrentLevel(int typeIndex) {"
"MethodParameter.java:319"$1$0$0$2$61$"		getTypeIndexesPerLevel().put(this.nestingLevel, typeIndex);"
"MethodParameter.java:320"$0$0$0$1$2$"	}"
"MethodParameter.java:321"$0$0$0$0$0$""
"MethodParameter.java:322"$0$0$0$1$4$"	/**"
"MethodParameter.java:323"$0$0$0$10$56$"	 * Return the type index for the current nesting level."
"MethodParameter.java:324"$0$0$0$9$57$"	 * @return the corresponding type index, or {@code null}"
"MethodParameter.java:325"$0$0$0$9$57$"	 * if none specified (indicating the default type index)"
"MethodParameter.java:326"$1$0$0$3$27$"	 * @see #getNestingLevel()"
"MethodParameter.java:327"$0$0$0$1$4$"	 */"
"MethodParameter.java:328"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:329"$1$0$0$4$47$"	public Integer getTypeIndexForCurrentLevel() {"
"MethodParameter.java:330"$1$0$0$2$49$"		return getTypeIndexForLevel(this.nestingLevel);"
"MethodParameter.java:331"$0$0$0$1$2$"	}"
"MethodParameter.java:332"$0$0$0$0$0$""
"MethodParameter.java:333"$0$0$0$1$4$"	/**"
"MethodParameter.java:334"$0$0$0$10$58$"	 * Return the type index for the specified nesting level."
"MethodParameter.java:335"$0$0$0$8$50$"	 * @param nestingLevel the nesting level to check"
"MethodParameter.java:336"$0$0$0$9$57$"	 * @return the corresponding type index, or {@code null}"
"MethodParameter.java:337"$0$0$0$9$57$"	 * if none specified (indicating the default type index)"
"MethodParameter.java:338"$0$0$0$1$4$"	 */"
"MethodParameter.java:339"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:340"$1$0$0$5$56$"	public Integer getTypeIndexForLevel(int nestingLevel) {"
"MethodParameter.java:341"$2$0$0$2$52$"		return getTypeIndexesPerLevel().get(nestingLevel);"
"MethodParameter.java:342"$0$0$0$1$2$"	}"
"MethodParameter.java:343"$0$0$0$0$0$""
"MethodParameter.java:344"$0$0$0$1$4$"	/**"
"MethodParameter.java:345"$0$0$0$7$63$"	 * Obtain the (lazily constructed) type-indexes-per-level Map."
"MethodParameter.java:346"$0$0$0$1$4$"	 */"
"MethodParameter.java:347"$1$0$0$5$57$"	private Map<Integer, Integer> getTypeIndexesPerLevel() {"
"MethodParameter.java:348"$0$0$0$5$41$"		if (this.typeIndexesPerLevel == null) {"
"MethodParameter.java:349"$0$0$0$4$47$"			this.typeIndexesPerLevel = new HashMap<>(4);"
"MethodParameter.java:350"$0$0$0$1$3$"		}"
"MethodParameter.java:351"$0$0$0$2$34$"		return this.typeIndexesPerLevel;"
"MethodParameter.java:352"$0$0$0$1$2$"	}"
"MethodParameter.java:353"$0$0$0$0$0$""
"MethodParameter.java:354"$0$0$0$1$4$"	/**"
"MethodParameter.java:355"$0$0$0$12$72$"	 * Return a variant of this {@code MethodParameter} which points to the"
"MethodParameter.java:356"$0$0$0$8$48$"	 * same parameter but one nesting level deeper."
"MethodParameter.java:357"$0$0$0$3$14$"	 * @since 4.3"
"MethodParameter.java:358"$0$0$0$1$4$"	 */"
"MethodParameter.java:359"$0$0$0$4$34$"	public MethodParameter nested() {"
"MethodParameter.java:360"$0$0$0$2$22$"		return nested(null);"
"MethodParameter.java:361"$0$0$0$1$2$"	}"
"MethodParameter.java:362"$0$0$0$0$0$""
"MethodParameter.java:363"$0$0$0$1$4$"	/**"
"MethodParameter.java:364"$0$0$0$12$72$"	 * Return a variant of this {@code MethodParameter} which points to the"
"MethodParameter.java:365"$0$0$0$8$48$"	 * same parameter but one nesting level deeper."
"MethodParameter.java:366"$0$0$0$11$61$"	 * @param typeIndex the type index for the new nesting level"
"MethodParameter.java:367"$0$0$0$3$14$"	 * @since 5.2"
"MethodParameter.java:368"$0$0$0$1$4$"	 */"
"MethodParameter.java:369"$0$0$0$6$61$"	public MethodParameter nested(@Nullable Integer typeIndex) {"
"MethodParameter.java:370"$0$0$0$4$59$"		MethodParameter nestedParam = this.nestedMethodParameter;"
"MethodParameter.java:371"$0$0$0$9$49$"		if (nestedParam != null && typeIndex == null) {"
"MethodParameter.java:372"$0$0$0$2$22$"			return nestedParam;"
"MethodParameter.java:373"$0$0$0$1$3$"		}"
"MethodParameter.java:374"$0$0$0$6$57$"		nestedParam = nested(this.nestingLevel + 1, typeIndex);"
"MethodParameter.java:375"$0$0$0$5$26$"		if (typeIndex == null) {"
"MethodParameter.java:376"$0$0$0$3$44$"			this.nestedMethodParameter = nestedParam;"
"MethodParameter.java:377"$0$0$0$1$3$"		}"
"MethodParameter.java:378"$0$0$0$2$21$"		return nestedParam;"
"MethodParameter.java:379"$0$0$0$1$2$"	}"
"MethodParameter.java:380"$0$0$0$0$0$""
"MethodParameter.java:381"$0$0$0$8$80$"	private MethodParameter nested(int nestingLevel, @Nullable Integer typeIndex) {"
"MethodParameter.java:382"$0$0$0$4$33$"		MethodParameter copy = clone();"
"MethodParameter.java:383"$0$0$0$3$35$"		copy.nestingLevel = nestingLevel;"
"MethodParameter.java:384"$0$0$0$5$41$"		if (this.typeIndexesPerLevel != null) {"
"MethodParameter.java:385"$0$0$0$4$70$"			copy.typeIndexesPerLevel = new HashMap<>(this.typeIndexesPerLevel);"
"MethodParameter.java:386"$0$0$0$1$3$"		}"
"MethodParameter.java:387"$0$0$0$5$26$"		if (typeIndex != null) {"
"MethodParameter.java:388"$1$0$0$2$67$"			copy.getTypeIndexesPerLevel().put(copy.nestingLevel, typeIndex);"
"MethodParameter.java:389"$0$0$0$1$3$"		}"
"MethodParameter.java:390"$0$0$0$3$28$"		copy.parameterType = null;"
"MethodParameter.java:391"$0$0$0$3$35$"		copy.genericParameterType = null;"
"MethodParameter.java:392"$0$0$0$2$14$"		return copy;"
"MethodParameter.java:393"$0$0$0$1$2$"	}"
"MethodParameter.java:394"$0$0$0$0$0$""
"MethodParameter.java:395"$0$0$0$1$4$"	/**"
"MethodParameter.java:396"$0$0$0$12$75$"	 * Return whether this method indicates a parameter which is not required:"
"MethodParameter.java:397"$0$0$0$12$74$"	 * either in the form of Java 8's {@link java.util.Optional}, any variant"
"MethodParameter.java:398"$0$0$0$11$74$"	 * of a parameter-level {@code Nullable} annotation (such as from JSR-305"
"MethodParameter.java:399"$0$0$0$12$74$"	 * or the FindBugs set of annotations), or a language-level nullable type"
"MethodParameter.java:400"$0$0$0$8$60$"	 * declaration or {@code Continuation} parameter in Kotlin."
"MethodParameter.java:401"$0$0$0$3$14$"	 * @since 4.3"
"MethodParameter.java:402"$0$0$0$1$4$"	 */"
"MethodParameter.java:403"$0$0$0$4$30$"	public boolean isOptional() {"
"MethodParameter.java:404"$1$0$0$7$76$"		return (getParameterType() == Optional.class || hasNullableAnnotation() ||"
"MethodParameter.java:405"$0$0$0$2$47$"				(KotlinDetector.isKotlinReflectPresent() &&"
"MethodParameter.java:406"$1$0$0$2$58$"						KotlinDetector.isKotlinType(getContainingClass()) &&"
"MethodParameter.java:407"$0$0$0$1$40$"						KotlinDelegate.isOptional(this)));"
"MethodParameter.java:408"$0$0$0$1$2$"	}"
"MethodParameter.java:409"$0$0$0$0$0$""
"MethodParameter.java:410"$0$0$0$1$4$"	/**"
"MethodParameter.java:411"$0$0$0$13$74$"	 * Check whether this method parameter is annotated with any variant of a"
"MethodParameter.java:412"$0$0$0$8$74$"	 * {@code Nullable} annotation, e.g. {@code javax.annotation.Nullable} or"
"MethodParameter.java:413"$0$0$0$3$53$"	 * {@code edu.umd.cs.findbugs.annotations.Nullable}."
"MethodParameter.java:414"$0$0$0$1$4$"	 */"
"MethodParameter.java:415"$0$0$0$4$42$"	private boolean hasNullableAnnotation() {"
"MethodParameter.java:416"$1$0$0$6$52$"		for (Annotation ann : getParameterAnnotations()) {"
"MethodParameter.java:417"$1$0$0$3$65$"			if (""Nullable"".equals(ann.annotationType().getSimpleName())) {"
"MethodParameter.java:418"$0$0$0$2$16$"				return true;"
"MethodParameter.java:419"$0$0$0$1$4$"			}"
"MethodParameter.java:420"$0$0$0$1$3$"		}"
"MethodParameter.java:421"$0$0$0$2$15$"		return false;"
"MethodParameter.java:422"$0$0$0$1$2$"	}"
"MethodParameter.java:423"$0$0$0$0$0$""
"MethodParameter.java:424"$0$0$0$1$4$"	/**"
"MethodParameter.java:425"$0$0$0$11$68$"	 * Return a variant of this {@code MethodParameter} which points to"
"MethodParameter.java:426"$0$0$0$13$64$"	 * the same parameter but one nesting level deeper in case of a"
"MethodParameter.java:427"$0$0$0$4$43$"	 * {@link java.util.Optional} declaration."
"MethodParameter.java:428"$0$0$0$3$14$"	 * @since 4.3"
"MethodParameter.java:429"$0$0$0$3$22$"	 * @see #isOptional()"
"MethodParameter.java:430"$0$0$0$3$18$"	 * @see #nested()"
"MethodParameter.java:431"$0$0$0$1$4$"	 */"
"MethodParameter.java:432"$0$0$0$4$44$"	public MethodParameter nestedIfOptional() {"
"MethodParameter.java:433"$1$0$0$8$66$"		return (getParameterType() == Optional.class ? nested() : this);"
"MethodParameter.java:434"$0$0$0$1$2$"	}"
"MethodParameter.java:435"$0$0$0$0$0$""
"MethodParameter.java:436"$0$0$0$1$4$"	/**"
"MethodParameter.java:437"$0$0$0$12$72$"	 * Return a variant of this {@code MethodParameter} which refers to the"
"MethodParameter.java:438"$0$0$0$4$27$"	 * given containing class."
"MethodParameter.java:439"$0$0$0$9$69$"	 * @param containingClass a specific containing class (potentially a"
"MethodParameter.java:440"$0$0$0$11$71$"	 * subclass of the declaring class, e.g. substituting a type variable)"
"MethodParameter.java:441"$0$0$0$3$14$"	 * @since 5.2"
"MethodParameter.java:442"$1$0$0$3$28$"	 * @see #getParameterType()"
"MethodParameter.java:443"$0$0$0$1$4$"	 */"
"MethodParameter.java:444"$0$0$0$6$81$"	public MethodParameter withContainingClass(@Nullable Class<?> containingClass) {"
"MethodParameter.java:445"$0$0$0$4$35$"		MethodParameter result = clone();"
"MethodParameter.java:446"$0$0$0$3$43$"		result.containingClass = containingClass;"
"MethodParameter.java:447"$0$0$0$3$30$"		result.parameterType = null;"
"MethodParameter.java:448"$0$0$0$2$16$"		return result;"
"MethodParameter.java:449"$0$0$0$1$2$"	}"
"MethodParameter.java:450"$0$0$0$0$0$""
"MethodParameter.java:451"$0$0$0$1$4$"	/**"
"MethodParameter.java:452"$0$0$0$11$65$"	 * Set a containing class to resolve the parameter type against."
"MethodParameter.java:453"$0$0$0$1$4$"	 */"
"MethodParameter.java:454"$0$0$0$1$12$"	@Deprecated"
"MethodParameter.java:455"$0$0$0$4$52$"	void setContainingClass(Class<?> containingClass) {"
"MethodParameter.java:456"$0$0$0$3$41$"		this.containingClass = containingClass;"
"MethodParameter.java:457"$0$0$0$3$28$"		this.parameterType = null;"
"MethodParameter.java:458"$0$0$0$1$2$"	}"
"MethodParameter.java:459"$0$0$0$0$0$""
"MethodParameter.java:460"$0$0$0$1$4$"	/**"
"MethodParameter.java:461"$0$0$0$9$58$"	 * Return the containing class for this method parameter."
"MethodParameter.java:462"$0$0$0$11$70$"	 * @return a specific containing class (potentially a subclass of the"
"MethodParameter.java:463"$0$0$0$10$68$"	 * declaring class), or otherwise simply the declaring class itself"
"MethodParameter.java:464"$1$0$0$3$29$"	 * @see #getDeclaringClass()"
"MethodParameter.java:465"$0$0$0$1$4$"	 */"
"MethodParameter.java:466"$1$0$0$4$39$"	public Class<?> getContainingClass() {"
"MethodParameter.java:467"$0$0$0$4$50$"		Class<?> containingClass = this.containingClass;"
"MethodParameter.java:468"$1$0$0$8$75$"		return (containingClass != null ? containingClass : getDeclaringClass());"
"MethodParameter.java:469"$0$0$0$1$2$"	}"
"MethodParameter.java:470"$0$0$0$0$0$""
"MethodParameter.java:471"$0$0$0$1$4$"	/**"
"MethodParameter.java:472"$0$0$0$7$44$"	 * Set a resolved (generic) parameter type."
"MethodParameter.java:473"$0$0$0$1$4$"	 */"
"MethodParameter.java:474"$0$0$0$1$12$"	@Deprecated"
"MethodParameter.java:475"$0$0$0$5$58$"	void setParameterType(@Nullable Class<?> parameterType) {"
"MethodParameter.java:476"$0$0$0$3$37$"		this.parameterType = parameterType;"
"MethodParameter.java:477"$0$0$0$1$2$"	}"
"MethodParameter.java:478"$0$0$0$0$0$""
"MethodParameter.java:479"$0$0$0$1$4$"	/**"
"MethodParameter.java:480"$0$0$0$8$56$"	 * Return the type of the method/constructor parameter."
"MethodParameter.java:481"$0$0$0$8$51$"	 * @return the parameter type (never {@code null})"
"MethodParameter.java:482"$0$0$0$1$4$"	 */"
"MethodParameter.java:483"$1$0$0$4$37$"	public Class<?> getParameterType() {"
"MethodParameter.java:484"$0$0$0$4$42$"		Class<?> paramType = this.parameterType;"
"MethodParameter.java:485"$0$0$0$5$26$"		if (paramType != null) {"
"MethodParameter.java:486"$0$0$0$2$20$"			return paramType;"
"MethodParameter.java:487"$0$0$0$1$3$"		}"
"MethodParameter.java:488"$2$0$0$5$52$"		if (getContainingClass() != getDeclaringClass()) {"
"MethodParameter.java:489"$0$0$0$5$74$"			paramType = ResolvableType.forMethodParameter(this, null, 1).resolve();"
"MethodParameter.java:490"$0$0$0$1$3$"		}"
"MethodParameter.java:491"$0$0$0$5$26$"		if (paramType == null) {"
"MethodParameter.java:492"$0$0$0$3$38$"			paramType = computeParameterType();"
"MethodParameter.java:493"$0$0$0$1$3$"		}"
"MethodParameter.java:494"$0$0$0$3$33$"		this.parameterType = paramType;"
"MethodParameter.java:495"$0$0$0$2$19$"		return paramType;"
"MethodParameter.java:496"$0$0$0$1$2$"	}"
"MethodParameter.java:497"$0$0$0$0$0$""
"MethodParameter.java:498"$0$0$0$1$4$"	/**"
"MethodParameter.java:499"$0$0$0$9$64$"	 * Return the generic type of the method/constructor parameter."
"MethodParameter.java:500"$0$0$0$8$51$"	 * @return the parameter type (never {@code null})"
"MethodParameter.java:501"$0$0$0$3$14$"	 * @since 3.0"
"MethodParameter.java:502"$0$0$0$1$4$"	 */"
"MethodParameter.java:503"$1$0$0$4$40$"	public Type getGenericParameterType() {"
"MethodParameter.java:504"$0$0$0$4$45$"		Type paramType = this.genericParameterType;"
"MethodParameter.java:505"$0$0$0$5$26$"		if (paramType == null) {"
"MethodParameter.java:506"$0$0$0$5$33$"			if (this.parameterIndex < 0) {"
"MethodParameter.java:507"$1$0$0$4$32$"				Method method = getMethod();"
"MethodParameter.java:508"$0$0$0$6$33$"				paramType = (method != null ?"
"MethodParameter.java:509"$1$0$0$4$101$"						(KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(getContainingClass()) ?"
"MethodParameter.java:510"$2$0$0$5$97$"						KotlinDelegate.getGenericReturnType(method) : method.getGenericReturnType()) : void.class);"
"MethodParameter.java:511"$0$0$0$1$4$"			}"
"MethodParameter.java:512"$0$0$0$2$9$"			else {"
"MethodParameter.java:513"$1$0$0$4$78$"				Type[] genericParameterTypes = this.executable.getGenericParameterTypes();"
"MethodParameter.java:514"$0$0$0$4$36$"				int index = this.parameterIndex;"
"MethodParameter.java:515"$0$0$0$5$49$"				if (this.executable instanceof Constructor &&"
"MethodParameter.java:516"$1$0$0$2$69$"						ClassUtils.isInnerClass(this.executable.getDeclaringClass()) &&"
"MethodParameter.java:517"$1$0$0$6$80$"						genericParameterTypes.length == this.executable.getParameterCount() - 1) {"
"MethodParameter.java:518"$0$0$1$10$70$"					// Bug in javac: type array excludes enclosing instance parameter"
"MethodParameter.java:519"$0$0$1$11$74$"					// for inner classes with at least one generic constructor parameter,"
"MethodParameter.java:520"$0$0$1$12$65$"					// so access it with the actual parameter index lowered by 1"
"MethodParameter.java:521"$0$0$0$5$37$"					index = this.parameterIndex - 1;"
"MethodParameter.java:522"$0$0$0$1$5$"				}"
"MethodParameter.java:523"$0$0$0$10$69$"				paramType = (index >= 0 && index < genericParameterTypes.length ?"
"MethodParameter.java:524"$0$0$0$3$61$"						genericParameterTypes[index] : computeParameterType());"
"MethodParameter.java:525"$0$0$0$1$4$"			}"
"MethodParameter.java:526"$0$0$0$3$41$"			this.genericParameterType = paramType;"
"MethodParameter.java:527"$0$0$0$1$3$"		}"
"MethodParameter.java:528"$0$0$0$2$19$"		return paramType;"
"MethodParameter.java:529"$0$0$0$1$2$"	}"
"MethodParameter.java:530"$0$0$0$0$0$""
"MethodParameter.java:531"$0$0$0$4$42$"	private Class<?> computeParameterType() {"
"MethodParameter.java:532"$0$0$0$5$32$"		if (this.parameterIndex < 0) {"
"MethodParameter.java:533"$1$0$0$4$31$"			Method method = getMethod();"
"MethodParameter.java:534"$0$0$0$5$24$"			if (method == null) {"
"MethodParameter.java:535"$0$0$0$2$22$"				return void.class;"
"MethodParameter.java:536"$0$0$0$1$4$"			}"
"MethodParameter.java:537"$1$0$0$5$102$"			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(getContainingClass())) {"
"MethodParameter.java:538"$1$0$0$2$48$"				return KotlinDelegate.getReturnType(method);"
"MethodParameter.java:539"$0$0$0$1$4$"			}"
"MethodParameter.java:540"$1$0$0$2$33$"			return method.getReturnType();"
"MethodParameter.java:541"$0$0$0$1$3$"		}"
"MethodParameter.java:542"$1$0$0$2$66$"		return this.executable.getParameterTypes()[this.parameterIndex];"
"MethodParameter.java:543"$0$0$0$1$2$"	}"
"MethodParameter.java:544"$0$0$0$0$0$""
"MethodParameter.java:545"$0$0$0$1$4$"	/**"
"MethodParameter.java:546"$0$0$0$9$63$"	 * Return the nested type of the method/constructor parameter."
"MethodParameter.java:547"$0$0$0$8$51$"	 * @return the parameter type (never {@code null})"
"MethodParameter.java:548"$0$0$0$3$14$"	 * @since 3.1"
"MethodParameter.java:549"$1$0$0$3$27$"	 * @see #getNestingLevel()"
"MethodParameter.java:550"$0$0$0$1$4$"	 */"
"MethodParameter.java:551"$1$0$0$4$43$"	public Class<?> getNestedParameterType() {"
"MethodParameter.java:552"$0$0$0$5$30$"		if (this.nestingLevel > 1) {"
"MethodParameter.java:553"$1$0$0$4$41$"			Type type = getGenericParameterType();"
"MethodParameter.java:554"$0$0$0$10$49$"			for (int i = 2; i <= this.nestingLevel; i++) {"
"MethodParameter.java:555"$0$0$0$5$44$"				if (type instanceof ParameterizedType) {"
"MethodParameter.java:556"$1$0$0$5$71$"					Type[] args = ((ParameterizedType) type).getActualTypeArguments();"
"MethodParameter.java:557"$1$0$0$4$45$"					Integer index = getTypeIndexForLevel(i);"
"MethodParameter.java:558"$0$0$0$11$58$"					type = args[index != null ? index : args.length - 1];"
"MethodParameter.java:559"$0$0$0$1$5$"				}"
"MethodParameter.java:560"$0$0$1$5$41$"				// TODO: Object.class if unresolvable"
"MethodParameter.java:561"$0$0$0$1$4$"			}"
"MethodParameter.java:562"$0$0$0$5$31$"			if (type instanceof Class) {"
"MethodParameter.java:563"$0$0$0$3$27$"				return (Class<?>) type;"
"MethodParameter.java:564"$0$0$0$1$4$"			}"
"MethodParameter.java:565"$0$0$0$6$48$"			else if (type instanceof ParameterizedType) {"
"MethodParameter.java:566"$1$0$0$5$55$"				Type arg = ((ParameterizedType) type).getRawType();"
"MethodParameter.java:567"$0$0$0$5$31$"				if (arg instanceof Class) {"
"MethodParameter.java:568"$0$0$0$3$27$"					return (Class<?>) arg;"
"MethodParameter.java:569"$0$0$0$1$5$"				}"
"MethodParameter.java:570"$0$0$0$1$4$"			}"
"MethodParameter.java:571"$0$0$0$2$23$"			return Object.class;"
"MethodParameter.java:572"$0$0$0$1$3$"		}"
"MethodParameter.java:573"$0$0$0$2$8$"		else {"
"MethodParameter.java:574"$1$0$0$2$29$"			return getParameterType();"
"MethodParameter.java:575"$0$0$0$1$3$"		}"
"MethodParameter.java:576"$0$0$0$1$2$"	}"
"MethodParameter.java:577"$0$0$0$0$0$""
"MethodParameter.java:578"$0$0$0$1$4$"	/**"
"MethodParameter.java:579"$0$0$0$10$71$"	 * Return the nested generic type of the method/constructor parameter."
"MethodParameter.java:580"$0$0$0$8$51$"	 * @return the parameter type (never {@code null})"
"MethodParameter.java:581"$0$0$0$3$14$"	 * @since 4.2"
"MethodParameter.java:582"$1$0$0$3$27$"	 * @see #getNestingLevel()"
"MethodParameter.java:583"$0$0$0$1$4$"	 */"
"MethodParameter.java:584"$1$0$0$4$46$"	public Type getNestedGenericParameterType() {"
"MethodParameter.java:585"$0$0$0$5$30$"		if (this.nestingLevel > 1) {"
"MethodParameter.java:586"$1$0$0$4$41$"			Type type = getGenericParameterType();"
"MethodParameter.java:587"$0$0$0$10$49$"			for (int i = 2; i <= this.nestingLevel; i++) {"
"MethodParameter.java:588"$0$0$0$5$44$"				if (type instanceof ParameterizedType) {"
"MethodParameter.java:589"$1$0$0$5$71$"					Type[] args = ((ParameterizedType) type).getActualTypeArguments();"
"MethodParameter.java:590"$1$0$0$4$45$"					Integer index = getTypeIndexForLevel(i);"
"MethodParameter.java:591"$0$0$0$11$58$"					type = args[index != null ? index : args.length - 1];"
"MethodParameter.java:592"$0$0$0$1$5$"				}"
"MethodParameter.java:593"$0$0$0$1$4$"			}"
"MethodParameter.java:594"$0$0$0$2$15$"			return type;"
"MethodParameter.java:595"$0$0$0$1$3$"		}"
"MethodParameter.java:596"$0$0$0$2$8$"		else {"
"MethodParameter.java:597"$1$0$0$2$36$"			return getGenericParameterType();"
"MethodParameter.java:598"$0$0$0$1$3$"		}"
"MethodParameter.java:599"$0$0$0$1$2$"	}"
"MethodParameter.java:600"$0$0$0$0$0$""
"MethodParameter.java:601"$0$0$0$1$4$"	/**"
"MethodParameter.java:602"$1$0$0$10$80$"	 * Return the annotations associated with the target method/constructor itself."
"MethodParameter.java:603"$0$0$0$1$4$"	 */"
"MethodParameter.java:604"$1$0$0$4$45$"	public Annotation[] getMethodAnnotations() {"
"MethodParameter.java:605"$2$0$0$2$70$"		return adaptAnnotationArray(getAnnotatedElement().getAnnotations());"
"MethodParameter.java:606"$0$0$0$1$2$"	}"
"MethodParameter.java:607"$0$0$0$0$0$""
"MethodParameter.java:608"$0$0$0$1$4$"	/**"
"MethodParameter.java:609"$0$0$0$11$77$"	 * Return the method/constructor annotation of the given type, if available."
"MethodParameter.java:610"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"MethodParameter.java:611"$0$0$0$11$63$"	 * @return the annotation object, or {@code null} if not found"
"MethodParameter.java:612"$0$0$0$1$4$"	 */"
"MethodParameter.java:613"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:614"$1$0$0$8$79$"	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {"
"MethodParameter.java:615"$2$0$0$4$69$"		A annotation = getAnnotatedElement().getAnnotation(annotationType);"
"MethodParameter.java:616"$0$0$0$8$67$"		return (annotation != null ? adaptAnnotation(annotation) : null);"
"MethodParameter.java:617"$0$0$0$1$2$"	}"
"MethodParameter.java:618"$0$0$0$0$0$""
"MethodParameter.java:619"$0$0$0$1$4$"	/**"
"MethodParameter.java:620"$0$0$0$11$75$"	 * Return whether the method/constructor is annotated with the given type."
"MethodParameter.java:621"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"MethodParameter.java:622"$0$0$0$3$14$"	 * @since 4.3"
"MethodParameter.java:623"$1$0$0$3$36$"	 * @see #getMethodAnnotation(Class)"
"MethodParameter.java:624"$0$0$0$1$4$"	 */"
"MethodParameter.java:625"$0$0$0$8$85$"	public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {"
"MethodParameter.java:626"$1$0$0$2$67$"		return getAnnotatedElement().isAnnotationPresent(annotationType);"
"MethodParameter.java:627"$0$0$0$1$2$"	}"
"MethodParameter.java:628"$0$0$0$0$0$""
"MethodParameter.java:629"$0$0$0$1$4$"	/**"
"MethodParameter.java:630"$0$0$0$10$85$"	 * Return the annotations associated with the specific method/constructor parameter."
"MethodParameter.java:631"$0$0$0$1$4$"	 */"
"MethodParameter.java:632"$1$0$0$4$48$"	public Annotation[] getParameterAnnotations() {"
"MethodParameter.java:633"$0$0$0$4$53$"		Annotation[] paramAnns = this.parameterAnnotations;"
"MethodParameter.java:634"$0$0$0$5$26$"		if (paramAnns == null) {"
"MethodParameter.java:635"$1$0$0$4$78$"			Annotation[][] annotationArray = this.executable.getParameterAnnotations();"
"MethodParameter.java:636"$0$0$0$4$35$"			int index = this.parameterIndex;"
"MethodParameter.java:637"$0$0$0$5$48$"			if (this.executable instanceof Constructor &&"
"MethodParameter.java:638"$1$0$0$2$68$"					ClassUtils.isInnerClass(this.executable.getDeclaringClass()) &&"
"MethodParameter.java:639"$1$0$0$6$73$"					annotationArray.length == this.executable.getParameterCount() - 1) {"
"MethodParameter.java:640"$0$0$1$13$85$"				// Bug in javac in JDK <9: annotation array excludes enclosing instance parameter"
"MethodParameter.java:641"$0$0$1$15$83$"				// for inner classes, so access it with the actual parameter index lowered by 1"
"MethodParameter.java:642"$0$0$0$5$36$"				index = this.parameterIndex - 1;"
"MethodParameter.java:643"$0$0$0$1$4$"			}"
"MethodParameter.java:644"$0$0$0$10$62$"			paramAnns = (index >= 0 && index < annotationArray.length ?"
"MethodParameter.java:645"$0$0$0$3$76$"					adaptAnnotationArray(annotationArray[index]) : EMPTY_ANNOTATION_ARRAY);"
"MethodParameter.java:646"$0$0$0$3$41$"			this.parameterAnnotations = paramAnns;"
"MethodParameter.java:647"$0$0$0$1$3$"		}"
"MethodParameter.java:648"$0$0$0$2$19$"		return paramAnns;"
"MethodParameter.java:649"$0$0$0$1$2$"	}"
"MethodParameter.java:650"$0$0$0$0$0$""
"MethodParameter.java:651"$0$0$0$1$4$"	/**"
"MethodParameter.java:652"$0$0$0$12$69$"	 * Return {@code true} if the parameter has at least one annotation,"
"MethodParameter.java:653"$0$0$0$7$33$"	 * {@code false} if it has none."
"MethodParameter.java:654"$1$0$0$3$35$"	 * @see #getParameterAnnotations()"
"MethodParameter.java:655"$0$0$0$1$4$"	 */"
"MethodParameter.java:656"$0$0$0$4$43$"	public boolean hasParameterAnnotations() {"
"MethodParameter.java:657"$1$0$0$4$49$"		return (getParameterAnnotations().length != 0);"
"MethodParameter.java:658"$0$0$0$1$2$"	}"
"MethodParameter.java:659"$0$0$0$0$0$""
"MethodParameter.java:660"$0$0$0$1$4$"	/**"
"MethodParameter.java:661"$0$0$0$11$68$"	 * Return the parameter annotation of the given type, if available."
"MethodParameter.java:662"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"MethodParameter.java:663"$0$0$0$11$63$"	 * @return the annotation object, or {@code null} if not found"
"MethodParameter.java:664"$0$0$0$1$4$"	 */"
"MethodParameter.java:665"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"MethodParameter.java:666"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:667"$1$0$0$8$82$"	public <A extends Annotation> A getParameterAnnotation(Class<A> annotationType) {"
"MethodParameter.java:668"$1$0$0$4$48$"		Annotation[] anns = getParameterAnnotations();"
"MethodParameter.java:669"$0$0$0$6$31$"		for (Annotation ann : anns) {"
"MethodParameter.java:670"$0$0$0$3$40$"			if (annotationType.isInstance(ann)) {"
"MethodParameter.java:671"$0$0$0$3$19$"				return (A) ann;"
"MethodParameter.java:672"$0$0$0$1$4$"			}"
"MethodParameter.java:673"$0$0$0$1$3$"		}"
"MethodParameter.java:674"$0$0$0$2$14$"		return null;"
"MethodParameter.java:675"$0$0$0$1$2$"	}"
"MethodParameter.java:676"$0$0$0$0$0$""
"MethodParameter.java:677"$0$0$0$1$4$"	/**"
"MethodParameter.java:678"$0$0$0$12$76$"	 * Return whether the parameter is declared with the given annotation type."
"MethodParameter.java:679"$0$0$0$9$57$"	 * @param annotationType the annotation type to look for"
"MethodParameter.java:680"$1$0$0$3$39$"	 * @see #getParameterAnnotation(Class)"
"MethodParameter.java:681"$0$0$0$1$4$"	 */"
"MethodParameter.java:682"$0$0$0$8$88$"	public <A extends Annotation> boolean hasParameterAnnotation(Class<A> annotationType) {"
"MethodParameter.java:683"$1$0$0$4$58$"		return (getParameterAnnotation(annotationType) != null);"
"MethodParameter.java:684"$0$0$0$1$2$"	}"
"MethodParameter.java:685"$0$0$0$0$0$""
"MethodParameter.java:686"$0$0$0$1$4$"	/**"
"MethodParameter.java:687"$0$0$0$9$66$"	 * Initialize parameter name discovery for this method parameter."
"MethodParameter.java:688"$0$0$0$13$74$"	 * <p>This method does not actually try to retrieve the parameter name at"
"MethodParameter.java:689"$0$0$0$13$77$"	 * this point; it just allows discovery to happen when the application calls"
"MethodParameter.java:690"$1$0$0$5$42$"	 * {@link #getParameterName()} (if ever)."
"MethodParameter.java:691"$0$0$0$1$4$"	 */"
"MethodParameter.java:692"$0$0$0$6$100$"	public void initParameterNameDiscovery(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {"
"MethodParameter.java:693"$0$0$0$3$57$"		this.parameterNameDiscoverer = parameterNameDiscoverer;"
"MethodParameter.java:694"$0$0$0$1$2$"	}"
"MethodParameter.java:695"$0$0$0$0$0$""
"MethodParameter.java:696"$0$0$0$1$4$"	/**"
"MethodParameter.java:697"$0$0$0$8$56$"	 * Return the name of the method/constructor parameter."
"MethodParameter.java:698"$0$0$0$11$57$"	 * @return the parameter name (may be {@code null} if no"
"MethodParameter.java:699"$0$0$0$12$64$"	 * parameter name metadata is contained in the class file or no"
"MethodParameter.java:700"$0$0$0$4$63$"	 * {@link #initParameterNameDiscovery ParameterNameDiscoverer}"
"MethodParameter.java:701"$0$0$0$7$31$"	 * has been set to begin with)"
"MethodParameter.java:702"$0$0$0$1$4$"	 */"
"MethodParameter.java:703"$0$0$0$1$10$"	@Nullable"
"MethodParameter.java:704"$1$0$0$4$35$"	public String getParameterName() {"
"MethodParameter.java:705"$0$0$0$5$32$"		if (this.parameterIndex < 0) {"
"MethodParameter.java:706"$0$0$0$2$15$"			return null;"
"MethodParameter.java:707"$0$0$0$1$3$"		}"
"MethodParameter.java:708"$0$0$0$4$68$"		ParameterNameDiscoverer discoverer = this.parameterNameDiscoverer;"
"MethodParameter.java:709"$0$0$0$5$27$"		if (discoverer != null) {"
"MethodParameter.java:710"$0$0$0$4$34$"			String[] parameterNames = null;"
"MethodParameter.java:711"$0$0$0$5$43$"			if (this.executable instanceof Method) {"
"MethodParameter.java:712"$1$0$0$4$76$"				parameterNames = discoverer.getParameterNames((Method) this.executable);"
"MethodParameter.java:713"$0$0$0$1$4$"			}"
"MethodParameter.java:714"$0$0$0$6$53$"			else if (this.executable instanceof Constructor) {"
"MethodParameter.java:715"$1$0$0$4$84$"				parameterNames = discoverer.getParameterNames((Constructor<?>) this.executable);"
"MethodParameter.java:716"$0$0$0$1$4$"			}"
"MethodParameter.java:717"$0$0$0$5$32$"			if (parameterNames != null) {"
"MethodParameter.java:718"$0$0$0$3$61$"				this.parameterName = parameterNames[this.parameterIndex];"
"MethodParameter.java:719"$0$0$0$1$4$"			}"
"MethodParameter.java:720"$0$0$0$3$39$"			this.parameterNameDiscoverer = null;"
"MethodParameter.java:721"$0$0$0$1$3$"		}"
"MethodParameter.java:722"$0$0$0$2$28$"		return this.parameterName;"
"MethodParameter.java:723"$0$0$0$1$2$"	}"
"MethodParameter.java:724"$0$0$0$0$0$""
"MethodParameter.java:725"$0$0$0$0$0$""
"MethodParameter.java:726"$0$0$0$1$4$"	/**"
"MethodParameter.java:727"$0$0$0$11$72$"	 * A template method to post-process a given annotation instance before"
"MethodParameter.java:728"$0$0$0$6$31$"	 * returning it to the caller."
"MethodParameter.java:729"$0$0$0$10$76$"	 * <p>The default implementation simply returns the given annotation as-is."
"MethodParameter.java:730"$0$0$0$9$57$"	 * @param annotation the annotation about to be returned"
"MethodParameter.java:731"$0$0$0$10$70$"	 * @return the post-processed annotation (or simply the original one)"
"MethodParameter.java:732"$0$0$0$3$14$"	 * @since 4.2"
"MethodParameter.java:733"$0$0$0$1$4$"	 */"
"MethodParameter.java:734"$0$0$0$8$67$"	protected <A extends Annotation> A adaptAnnotation(A annotation) {"
"MethodParameter.java:735"$0$0$0$2$20$"		return annotation;"
"MethodParameter.java:736"$0$0$0$1$2$"	}"
"MethodParameter.java:737"$0$0$0$0$0$""
"MethodParameter.java:738"$0$0$0$1$4$"	/**"
"MethodParameter.java:739"$0$0$0$11$69$"	 * A template method to post-process a given annotation array before"
"MethodParameter.java:740"$0$0$0$6$31$"	 * returning it to the caller."
"MethodParameter.java:741"$0$0$0$11$82$"	 * <p>The default implementation simply returns the given annotation array as-is."
"MethodParameter.java:742"$0$0$0$10$64$"	 * @param annotations the annotation array about to be returned"
"MethodParameter.java:743"$0$0$0$11$76$"	 * @return the post-processed annotation array (or simply the original one)"
"MethodParameter.java:744"$0$0$0$3$14$"	 * @since 4.2"
"MethodParameter.java:745"$0$0$0$1$4$"	 */"
"MethodParameter.java:746"$0$0$0$5$72$"	protected Annotation[] adaptAnnotationArray(Annotation[] annotations) {"
"MethodParameter.java:747"$0$0$0$2$21$"		return annotations;"
"MethodParameter.java:748"$0$0$0$1$2$"	}"
"MethodParameter.java:749"$0$0$0$0$0$""
"MethodParameter.java:750"$0$0$0$0$0$""
"MethodParameter.java:751"$0$0$0$1$10$"	@Override"
"MethodParameter.java:752"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"MethodParameter.java:753"$0$0$0$5$22$"		if (this == other) {"
"MethodParameter.java:754"$0$0$0$2$15$"			return true;"
"MethodParameter.java:755"$0$0$0$1$3$"		}"
"MethodParameter.java:756"$0$0$0$5$44$"		if (!(other instanceof MethodParameter)) {"
"MethodParameter.java:757"$0$0$0$2$16$"			return false;"
"MethodParameter.java:758"$0$0$0$1$3$"		}"
"MethodParameter.java:759"$0$0$0$5$55$"		MethodParameter otherParam = (MethodParameter) other;"
"MethodParameter.java:760"$2$0$0$5$68$"		return (getContainingClass() == otherParam.getContainingClass() &&"
"MethodParameter.java:761"$0$0$0$3$91$"				ObjectUtils.nullSafeEquals(this.typeIndexesPerLevel, otherParam.typeIndexesPerLevel) &&"
"MethodParameter.java:762"$0$0$0$4$51$"				this.nestingLevel == otherParam.nestingLevel &&"
"MethodParameter.java:763"$0$0$0$4$55$"				this.parameterIndex == otherParam.parameterIndex &&"
"MethodParameter.java:764"$0$0$0$1$51$"				this.executable.equals(otherParam.executable));"
"MethodParameter.java:765"$0$0$0$1$2$"	}"
"MethodParameter.java:766"$0$0$0$0$0$""
"MethodParameter.java:767"$0$0$0$1$10$"	@Override"
"MethodParameter.java:768"$0$0$0$4$24$"	public int hashCode() {"
"MethodParameter.java:769"$0$0$0$6$65$"		return (31 * this.executable.hashCode() + this.parameterIndex);"
"MethodParameter.java:770"$0$0$0$1$2$"	}"
"MethodParameter.java:771"$0$0$0$0$0$""
"MethodParameter.java:772"$0$0$0$1$10$"	@Override"
"MethodParameter.java:773"$0$0$0$4$27$"	public String toString() {"
"MethodParameter.java:774"$1$0$0$4$30$"		Method method = getMethod();"
"MethodParameter.java:775"$1$0$0$14$81$"		return (method != null ? ""method '"" + method.getName() + ""'"" : ""constructor"") +"
"MethodParameter.java:776"$0$0$0$5$40$"				"" parameter "" + this.parameterIndex;"
"MethodParameter.java:777"$0$0$0$1$2$"	}"
"MethodParameter.java:778"$0$0$0$0$0$""
"MethodParameter.java:779"$0$0$0$1$10$"	@Override"
"MethodParameter.java:780"$0$0$0$4$33$"	public MethodParameter clone() {"
"MethodParameter.java:781"$0$0$0$3$35$"		return new MethodParameter(this);"
"MethodParameter.java:782"$0$0$0$1$2$"	}"
"MethodParameter.java:783"$0$0$0$0$0$""
"MethodParameter.java:784"$0$0$0$1$4$"	/**"
"MethodParameter.java:785"$0$0$0$11$69$"	 * Create a new MethodParameter for the given method or constructor."
"MethodParameter.java:786"$0$0$0$11$65$"	 * <p>This is a convenience factory method for scenarios where a"
"MethodParameter.java:787"$0$0$0$11$68$"	 * Method or Constructor reference is treated in a generic fashion."
"MethodParameter.java:788"$0$0$0$12$83$"	 * @param methodOrConstructor the Method or Constructor to specify a parameter for"
"MethodParameter.java:789"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"MethodParameter.java:790"$0$0$0$6$54$"	 * @return the corresponding MethodParameter instance"
"MethodParameter.java:791"$0$0$0$10$61$"	 * @deprecated as of 5.0, in favor of {@link #forExecutable}"
"MethodParameter.java:792"$0$0$0$1$4$"	 */"
"MethodParameter.java:793"$0$0$0$1$12$"	@Deprecated"
"MethodParameter.java:794"$0$0$0$8$103$"	public static MethodParameter forMethodOrConstructor(Object methodOrConstructor, int parameterIndex) {"
"MethodParameter.java:795"$0$0$0$5$53$"		if (!(methodOrConstructor instanceof Executable)) {"
"MethodParameter.java:796"$0$0$0$3$38$"			throw new IllegalArgumentException("
"MethodParameter.java:797"$0$0$0$14$89$"					""Given object ["" + methodOrConstructor + ""] is neither a Method nor a Constructor"");"
"MethodParameter.java:798"$0$0$0$1$3$"		}"
"MethodParameter.java:799"$0$0$0$4$73$"		return forExecutable((Executable) methodOrConstructor, parameterIndex);"
"MethodParameter.java:800"$0$0$0$1$2$"	}"
"MethodParameter.java:801"$0$0$0$0$0$""
"MethodParameter.java:802"$0$0$0$1$4$"	/**"
"MethodParameter.java:803"$0$0$0$11$69$"	 * Create a new MethodParameter for the given method or constructor."
"MethodParameter.java:804"$0$0$0$11$65$"	 * <p>This is a convenience factory method for scenarios where a"
"MethodParameter.java:805"$0$0$0$11$68$"	 * Method or Constructor reference is treated in a generic fashion."
"MethodParameter.java:806"$0$0$0$12$74$"	 * @param executable the Method or Constructor to specify a parameter for"
"MethodParameter.java:807"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"MethodParameter.java:808"$0$0$0$6$54$"	 * @return the corresponding MethodParameter instance"
"MethodParameter.java:809"$0$0$0$3$14$"	 * @since 5.0"
"MethodParameter.java:810"$0$0$0$1$4$"	 */"
"MethodParameter.java:811"$0$0$0$8$89$"	public static MethodParameter forExecutable(Executable executable, int parameterIndex) {"
"MethodParameter.java:812"$0$0$0$5$37$"		if (executable instanceof Method) {"
"MethodParameter.java:813"$0$0$0$5$67$"			return new MethodParameter((Method) executable, parameterIndex);"
"MethodParameter.java:814"$0$0$0$1$3$"		}"
"MethodParameter.java:815"$0$0$0$6$47$"		else if (executable instanceof Constructor) {"
"MethodParameter.java:816"$0$0$0$5$75$"			return new MethodParameter((Constructor<?>) executable, parameterIndex);"
"MethodParameter.java:817"$0$0$0$1$3$"		}"
"MethodParameter.java:818"$0$0$0$2$8$"		else {"
"MethodParameter.java:819"$0$0$0$8$81$"			throw new IllegalArgumentException(""Not a Method/Constructor: "" + executable);"
"MethodParameter.java:820"$0$0$0$1$3$"		}"
"MethodParameter.java:821"$0$0$0$1$2$"	}"
"MethodParameter.java:822"$0$0$0$0$0$""
"MethodParameter.java:823"$0$0$0$1$4$"	/**"
"MethodParameter.java:824"$0$0$0$10$68$"	 * Create a new MethodParameter for the given parameter descriptor."
"MethodParameter.java:825"$0$0$0$11$65$"	 * <p>This is a convenience factory method for scenarios where a"
"MethodParameter.java:826"$0$0$0$9$61$"	 * Java 8 {@link Parameter} descriptor is already available."
"MethodParameter.java:827"$0$0$0$6$45$"	 * @param parameter the parameter descriptor"
"MethodParameter.java:828"$0$0$0$6$54$"	 * @return the corresponding MethodParameter instance"
"MethodParameter.java:829"$0$0$0$3$14$"	 * @since 5.0"
"MethodParameter.java:830"$0$0$0$1$4$"	 */"
"MethodParameter.java:831"$0$0$0$6$66$"	public static MethodParameter forParameter(Parameter parameter) {"
"MethodParameter.java:832"$1$0$0$3$90$"		return forExecutable(parameter.getDeclaringExecutable(), findParameterIndex(parameter));"
"MethodParameter.java:833"$0$0$0$1$2$"	}"
"MethodParameter.java:834"$0$0$0$0$0$""
"MethodParameter.java:835"$0$0$0$6$63$"	protected static int findParameterIndex(Parameter parameter) {"
"MethodParameter.java:836"$1$0$0$4$61$"		Executable executable = parameter.getDeclaringExecutable();"
"MethodParameter.java:837"$1$0$0$4$53$"		Parameter[] allParams = executable.getParameters();"
"MethodParameter.java:838"$0$0$1$9$60$"		// Try first with identity checks for greater performance."
"MethodParameter.java:839"$0$0$0$10$46$"		for (int i = 0; i < allParams.length; i++) {"
"MethodParameter.java:840"$0$0$0$5$35$"			if (parameter == allParams[i]) {"
"MethodParameter.java:841"$0$0$0$2$13$"				return i;"
"MethodParameter.java:842"$0$0$0$1$4$"			}"
"MethodParameter.java:843"$0$0$0$1$3$"		}"
"MethodParameter.java:844"$0$0$1$13$77$"		// Potentially try again with object equality checks in order to avoid race"
"MethodParameter.java:845"$1$0$1$5$76$"		// conditions while invoking java.lang.reflect.Executable.getParameters()."
"MethodParameter.java:846"$0$0$0$10$46$"		for (int i = 0; i < allParams.length; i++) {"
"MethodParameter.java:847"$0$0$0$3$40$"			if (parameter.equals(allParams[i])) {"
"MethodParameter.java:848"$0$0$0$2$13$"				return i;"
"MethodParameter.java:849"$0$0$0$1$4$"			}"
"MethodParameter.java:850"$0$0$0$1$3$"		}"
"MethodParameter.java:851"$0$0$0$8$70$"		throw new IllegalArgumentException(""Given parameter ["" + parameter +"
"MethodParameter.java:852"$0$0$0$10$66$"				""] does not match any parameter in the declaring executable"");"
"MethodParameter.java:853"$0$0$0$1$2$"	}"
"MethodParameter.java:854"$0$0$0$0$0$""
"MethodParameter.java:855"$0$0$0$8$78$"	private static int validateIndex(Executable executable, int parameterIndex) {"
"MethodParameter.java:856"$1$0$0$4$45$"		int count = executable.getParameterCount();"
"MethodParameter.java:857"$0$0$0$7$63$"		Assert.isTrue(parameterIndex >= -1 && parameterIndex < count,"
"MethodParameter.java:858"$0$0$0$15$71$"				() -> ""Parameter index needs to be between -1 and "" + (count - 1));"
"MethodParameter.java:859"$0$0$0$2$24$"		return parameterIndex;"
"MethodParameter.java:860"$0$0$0$1$2$"	}"
"MethodParameter.java:861"$0$0$0$0$0$""
"MethodParameter.java:862"$0$0$0$0$0$""
"MethodParameter.java:863"$0$0$0$1$4$"	/**"
"MethodParameter.java:864"$0$0$0$12$64$"	 * Inner class to avoid a hard dependency on Kotlin at runtime."
"MethodParameter.java:865"$0$0$0$1$4$"	 */"
"MethodParameter.java:866"$0$0$0$5$38$"	private static class KotlinDelegate {"
"MethodParameter.java:867"$0$0$0$0$0$""
"MethodParameter.java:868"$0$0$0$1$5$"		/**"
"MethodParameter.java:869"$0$0$0$12$91$"		 * Check whether the specified {@link MethodParameter} represents a nullable Kotlin type,"
"MethodParameter.java:870"$0$0$0$14$80$"		 * an optional parameter (with a default value in the Kotlin declaration) or a"
"MethodParameter.java:871"$0$0$0$8$65$"		 * {@code Continuation} parameter used in suspending functions."
"MethodParameter.java:872"$0$0$0$1$5$"		 */"
"MethodParameter.java:873"$0$0$0$6$59$"		public static boolean isOptional(MethodParameter param) {"
"MethodParameter.java:874"$1$0$0$4$37$"			Method method = param.getMethod();"
"MethodParameter.java:875"$1$0$0$4$41$"			int index = param.getParameterIndex();"
"MethodParameter.java:876"$0$0$0$9$39$"			if (method != null && index == -1) {"
"MethodParameter.java:877"$1$0$0$4$72$"				KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);"
"MethodParameter.java:878"$1$0$0$6$77$"				return (function != null && function.getReturnType().isMarkedNullable());"
"MethodParameter.java:879"$0$0$0$1$4$"			}"
"MethodParameter.java:880"$0$0$0$2$25$"			KFunction<?> function;"
"MethodParameter.java:881"$0$0$0$2$35$"			Predicate<KParameter> predicate;"
"MethodParameter.java:882"$0$0$0$5$24$"			if (method != null) {"
"MethodParameter.java:883"$2$0$0$3$86$"				if (param.getParameterType().getName().equals(""kotlin.coroutines.Continuation"")) {"
"MethodParameter.java:884"$0$0$0$2$17$"					return true;"
"MethodParameter.java:885"$0$0$0$1$5$"				}"
"MethodParameter.java:886"$1$0$0$3$59$"				function = ReflectJvmMapping.getKotlinFunction(method);"
"MethodParameter.java:887"$1$0$0$5$63$"				predicate = p -> KParameter.Kind.VALUE.equals(p.getKind());"
"MethodParameter.java:888"$0$0$0$1$4$"			}"
"MethodParameter.java:889"$0$0$0$2$9$"			else {"
"MethodParameter.java:890"$1$0$0$4$49$"				Constructor<?> ctor = param.getConstructor();"
"MethodParameter.java:891"$0$0$0$8$71$"				Assert.state(ctor != null, ""Neither method nor constructor found"");"
"MethodParameter.java:892"$1$0$0$3$57$"				function = ReflectJvmMapping.getKotlinFunction(ctor);"
"MethodParameter.java:893"$1$0$0$6$66$"				predicate = p -> (KParameter.Kind.VALUE.equals(p.getKind()) ||"
"MethodParameter.java:894"$1$0$0$1$52$"						KParameter.Kind.INSTANCE.equals(p.getKind()));"
"MethodParameter.java:895"$0$0$0$1$4$"			}"
"MethodParameter.java:896"$0$0$0$5$26$"			if (function != null) {"
"MethodParameter.java:897"$0$0$0$4$14$"				int i = 0;"
"MethodParameter.java:898"$1$0$0$6$60$"				for (KParameter kParameter : function.getParameters()) {"
"MethodParameter.java:899"$0$0$0$3$38$"					if (predicate.test(kParameter)) {"
"MethodParameter.java:900"$0$0$0$5$25$"						if (index == i++) {"
"MethodParameter.java:901"$1$0$0$4$83$"							return (kParameter.getType().isMarkedNullable() || kParameter.isOptional());"
"MethodParameter.java:902"$0$0$0$1$7$"						}"
"MethodParameter.java:903"$0$0$0$1$6$"					}"
"MethodParameter.java:904"$0$0$0$1$5$"				}"
"MethodParameter.java:905"$0$0$0$1$4$"			}"
"MethodParameter.java:906"$0$0$0$2$16$"			return false;"
"MethodParameter.java:907"$0$0$0$1$3$"		}"
"MethodParameter.java:908"$0$0$0$0$0$""
"MethodParameter.java:909"$0$0$0$1$5$"		/**"
"MethodParameter.java:910"$0$0$0$13$77$"		 * Return the generic return type of the method, with support of suspending"
"MethodParameter.java:911"$0$0$0$5$37$"		 * functions via Kotlin reflection."
"MethodParameter.java:912"$0$0$0$1$5$"		 */"
"MethodParameter.java:913"$1$0$0$6$59$"		static private Type getGenericReturnType(Method method) {"
"MethodParameter.java:914"$0$0$0$2$8$"			try {"
"MethodParameter.java:915"$1$0$0$4$72$"				KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);"
"MethodParameter.java:916"$0$0$0$7$51$"				if (function != null && function.isSuspend()) {"
"MethodParameter.java:917"$2$0$0$2$68$"					return ReflectJvmMapping.getJavaType(function.getReturnType());"
"MethodParameter.java:918"$0$0$0$1$5$"				}"
"MethodParameter.java:919"$0$0$0$1$4$"			}"
"MethodParameter.java:920"$0$0$0$4$45$"			catch (UnsupportedOperationException ex) {"
"MethodParameter.java:921"$0$0$1$11$69$"				// probably a synthetic class - let's use java reflection instead"
"MethodParameter.java:922"$0$0$0$1$4$"			}"
"MethodParameter.java:923"$1$0$0$2$40$"			return method.getGenericReturnType();"
"MethodParameter.java:924"$0$0$0$1$3$"		}"
"MethodParameter.java:925"$0$0$0$0$0$""
"MethodParameter.java:926"$0$0$0$1$5$"		/**"
"MethodParameter.java:927"$0$0$0$12$69$"		 * Return the return type of the method, with support of suspending"
"MethodParameter.java:928"$0$0$0$5$37$"		 * functions via Kotlin reflection."
"MethodParameter.java:929"$0$0$0$1$5$"		 */"
"MethodParameter.java:930"$1$0$0$6$56$"		static private Class<?> getReturnType(Method method) {"
"MethodParameter.java:931"$0$0$0$2$8$"			try {"
"MethodParameter.java:932"$1$0$0$4$72$"				KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);"
"MethodParameter.java:933"$0$0$0$7$51$"				if (function != null && function.isSuspend()) {"
"MethodParameter.java:934"$2$0$0$4$78$"					Type paramType = ReflectJvmMapping.getJavaType(function.getReturnType());"
"MethodParameter.java:935"$0$0$0$5$35$"					if (paramType == Unit.class) {"
"MethodParameter.java:936"$0$0$0$3$29$"						paramType = void.class;"
"MethodParameter.java:937"$0$0$0$1$6$"					}"
"MethodParameter.java:938"$1$0$0$2$78$"					return ResolvableType.forType(paramType).resolve(method.getReturnType());"
"MethodParameter.java:939"$0$0$0$1$5$"				}"
"MethodParameter.java:940"$0$0$0$1$4$"			}"
"MethodParameter.java:941"$0$0$0$4$45$"			catch (UnsupportedOperationException ex) {"
"MethodParameter.java:942"$0$0$1$11$69$"				// probably a synthetic class - let's use java reflection instead"
"MethodParameter.java:943"$0$0$0$1$4$"			}"
"MethodParameter.java:944"$1$0$0$2$33$"			return method.getReturnType();"
"MethodParameter.java:945"$0$0$0$1$3$"		}"
"MethodParameter.java:946"$0$0$0$1$2$"	}"
"MethodParameter.java:947"$0$0$0$0$0$""
"MethodParameter.java:948"$0$0$0$1$1$"}"
"ListBasedXMLEventReader.java:1"$0$0$0$1$2$"/*"
"ListBasedXMLEventReader.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ListBasedXMLEventReader.java:3"$0$0$0$1$2$" *"
"ListBasedXMLEventReader.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ListBasedXMLEventReader.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ListBasedXMLEventReader.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ListBasedXMLEventReader.java:7"$0$0$0$1$2$" *"
"ListBasedXMLEventReader.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ListBasedXMLEventReader.java:9"$0$0$0$1$2$" *"
"ListBasedXMLEventReader.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ListBasedXMLEventReader.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ListBasedXMLEventReader.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ListBasedXMLEventReader.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ListBasedXMLEventReader.java:14"$0$0$0$5$33$" * limitations under the License."
"ListBasedXMLEventReader.java:15"$0$0$0$1$3$" */"
"ListBasedXMLEventReader.java:16"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"ListBasedXMLEventReader.java:18"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"ListBasedXMLEventReader.java:20"$0$0$0$2$22$"import java.util.List;"
"ListBasedXMLEventReader.java:21"$0$0$0$2$40$"import java.util.NoSuchElementException;"
"ListBasedXMLEventReader.java:22"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:23"$0$0$0$2$43$"import javax.xml.stream.XMLStreamConstants;"
"ListBasedXMLEventReader.java:24"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"ListBasedXMLEventReader.java:25"$0$0$0$2$42$"import javax.xml.stream.events.Characters;"
"ListBasedXMLEventReader.java:26"$0$0$0$2$40$"import javax.xml.stream.events.XMLEvent;"
"ListBasedXMLEventReader.java:27"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ListBasedXMLEventReader.java:29"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ListBasedXMLEventReader.java:30"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:31"$0$0$0$1$3$"/**"
"ListBasedXMLEventReader.java:32"$0$0$0$10$67$" * Implementation of {@code XMLEventReader} based on a {@link List}"
"ListBasedXMLEventReader.java:33"$0$0$0$5$32$" * of {@link XMLEvent} elements."
"ListBasedXMLEventReader.java:34"$0$0$0$1$2$" *"
"ListBasedXMLEventReader.java:35"$0$0$0$4$24$" * @author Arjen Poutsma"
"ListBasedXMLEventReader.java:36"$0$0$0$4$26$" * @author Juergen Hoeller"
"ListBasedXMLEventReader.java:37"$0$0$0$3$13$" * @since 5.0"
"ListBasedXMLEventReader.java:38"$0$0$0$1$3$" */"
"ListBasedXMLEventReader.java:39"$0$0$0$5$62$"class ListBasedXMLEventReader extends AbstractXMLEventReader {"
"ListBasedXMLEventReader.java:40"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:41"$0$0$0$4$37$"	private final List<XMLEvent> events;"
"ListBasedXMLEventReader.java:42"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:43"$0$0$0$1$10$"	@Nullable"
"ListBasedXMLEventReader.java:44"$0$0$0$3$31$"	private XMLEvent currentEvent;"
"ListBasedXMLEventReader.java:45"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:46"$0$0$0$5$24$"	private int cursor = 0;"
"ListBasedXMLEventReader.java:47"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:48"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:49"$0$0$0$4$56$"	public ListBasedXMLEventReader(List<XMLEvent> events) {"
"ListBasedXMLEventReader.java:50"$0$0$0$7$59$"		Assert.notNull(events, ""XMLEvent List must not be null"");"
"ListBasedXMLEventReader.java:51"$0$0$0$4$40$"		this.events = new ArrayList<>(events);"
"ListBasedXMLEventReader.java:52"$0$0$0$1$2$"	}"
"ListBasedXMLEventReader.java:53"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:54"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:55"$0$0$0$1$10$"	@Override"
"ListBasedXMLEventReader.java:56"$0$0$0$4$27$"	public boolean hasNext() {"
"ListBasedXMLEventReader.java:57"$0$0$0$4$44$"		return (this.cursor < this.events.size());"
"ListBasedXMLEventReader.java:58"$0$0$0$1$2$"	}"
"ListBasedXMLEventReader.java:59"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:60"$0$0$0$1$10$"	@Override"
"ListBasedXMLEventReader.java:61"$0$0$0$4$30$"	public XMLEvent nextEvent() {"
"ListBasedXMLEventReader.java:62"$0$0$0$3$18$"		if (hasNext()) {"
"ListBasedXMLEventReader.java:63"$1$0$0$3$52$"			this.currentEvent = this.events.get(this.cursor);"
"ListBasedXMLEventReader.java:64"$0$0$0$1$17$"			this.cursor++;"
"ListBasedXMLEventReader.java:65"$0$0$0$2$28$"			return this.currentEvent;"
"ListBasedXMLEventReader.java:66"$0$0$0$1$3$"		}"
"ListBasedXMLEventReader.java:67"$0$0$0$2$8$"		else {"
"ListBasedXMLEventReader.java:68"$0$0$0$3$38$"			throw new NoSuchElementException();"
"ListBasedXMLEventReader.java:69"$0$0$0$1$3$"		}"
"ListBasedXMLEventReader.java:70"$0$0$0$1$2$"	}"
"ListBasedXMLEventReader.java:71"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:72"$0$0$0$1$10$"	@Override"
"ListBasedXMLEventReader.java:73"$0$0$0$1$10$"	@Nullable"
"ListBasedXMLEventReader.java:74"$0$0$0$4$25$"	public XMLEvent peek() {"
"ListBasedXMLEventReader.java:75"$0$0$0$3$18$"		if (hasNext()) {"
"ListBasedXMLEventReader.java:76"$1$0$0$2$39$"			return this.events.get(this.cursor);"
"ListBasedXMLEventReader.java:77"$0$0$0$1$3$"		}"
"ListBasedXMLEventReader.java:78"$0$0$0$2$8$"		else {"
"ListBasedXMLEventReader.java:79"$0$0$0$2$15$"			return null;"
"ListBasedXMLEventReader.java:80"$0$0$0$1$3$"		}"
"ListBasedXMLEventReader.java:81"$0$0$0$1$2$"	}"
"ListBasedXMLEventReader.java:82"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:83"$0$0$0$1$10$"	@Override"
"ListBasedXMLEventReader.java:84"$1$0$0$6$59$"	public String getElementText() throws XMLStreamException {"
"ListBasedXMLEventReader.java:85"$0$0$0$1$18$"		checkIfClosed();"
"ListBasedXMLEventReader.java:86"$0$0$0$7$73$"		if (this.currentEvent == null || !this.currentEvent.isStartElement()) {"
"ListBasedXMLEventReader.java:87"$0$0$0$8$78$"			throw new XMLStreamException(""Not at START_ELEMENT: "" + this.currentEvent);"
"ListBasedXMLEventReader.java:88"$0$0$0$1$3$"		}"
"ListBasedXMLEventReader.java:89"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:90"$0$0$0$5$46$"		StringBuilder builder = new StringBuilder();"
"ListBasedXMLEventReader.java:91"$0$0$0$3$16$"		while (true) {"
"ListBasedXMLEventReader.java:92"$0$0$0$4$32$"			XMLEvent event = nextEvent();"
"ListBasedXMLEventReader.java:93"$0$0$0$3$30$"			if (event.isEndElement()) {"
"ListBasedXMLEventReader.java:94"$0$0$0$1$10$"				break;"
"ListBasedXMLEventReader.java:95"$0$0$0$1$4$"			}"
"ListBasedXMLEventReader.java:96"$0$0$0$4$36$"			else if (!event.isCharacters()) {"
"ListBasedXMLEventReader.java:97"$0$0$0$8$72$"				throw new XMLStreamException(""Unexpected non-text event: "" + event);"
"ListBasedXMLEventReader.java:98"$0$0$0$1$4$"			}"
"ListBasedXMLEventReader.java:99"$0$0$0$4$48$"			Characters characters = event.asCharacters();"
"ListBasedXMLEventReader.java:100"$0$0$0$3$45$"			if (!characters.isIgnorableWhiteSpace()) {"
"ListBasedXMLEventReader.java:101"$1$0$0$1$51$"				builder.append(event.asCharacters().getData());"
"ListBasedXMLEventReader.java:102"$0$0$0$1$4$"			}"
"ListBasedXMLEventReader.java:103"$0$0$0$1$3$"		}"
"ListBasedXMLEventReader.java:104"$0$0$0$2$28$"		return builder.toString();"
"ListBasedXMLEventReader.java:105"$0$0$0$1$2$"	}"
"ListBasedXMLEventReader.java:106"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:107"$0$0$0$1$10$"	@Override"
"ListBasedXMLEventReader.java:108"$0$0$0$1$10$"	@Nullable"
"ListBasedXMLEventReader.java:109"$0$0$0$6$54$"	public XMLEvent nextTag() throws XMLStreamException {"
"ListBasedXMLEventReader.java:110"$0$0$0$1$18$"		checkIfClosed();"
"ListBasedXMLEventReader.java:111"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:112"$0$0$0$3$16$"		while (true) {"
"ListBasedXMLEventReader.java:113"$0$0$0$4$32$"			XMLEvent event = nextEvent();"
"ListBasedXMLEventReader.java:114"$1$0$0$3$34$"			switch (event.getEventType()) {"
"ListBasedXMLEventReader.java:115"$0$0$0$2$42$"				case XMLStreamConstants.START_ELEMENT:"
"ListBasedXMLEventReader.java:116"$0$0$0$2$40$"				case XMLStreamConstants.END_ELEMENT:"
"ListBasedXMLEventReader.java:117"$0$0$0$2$18$"					return event;"
"ListBasedXMLEventReader.java:118"$0$0$0$2$41$"				case XMLStreamConstants.END_DOCUMENT:"
"ListBasedXMLEventReader.java:119"$0$0$0$2$17$"					return null;"
"ListBasedXMLEventReader.java:120"$0$0$0$2$34$"				case XMLStreamConstants.SPACE:"
"ListBasedXMLEventReader.java:121"$0$0$0$2$36$"				case XMLStreamConstants.COMMENT:"
"ListBasedXMLEventReader.java:122"$0$0$0$2$51$"				case XMLStreamConstants.PROCESSING_INSTRUCTION:"
"ListBasedXMLEventReader.java:123"$0$0$0$1$14$"					continue;"
"ListBasedXMLEventReader.java:124"$0$0$0$2$34$"				case XMLStreamConstants.CDATA:"
"ListBasedXMLEventReader.java:125"$0$0$0$2$39$"				case XMLStreamConstants.CHARACTERS:"
"ListBasedXMLEventReader.java:126"$0$0$0$3$48$"					if (!event.asCharacters().isWhiteSpace()) {"
"ListBasedXMLEventReader.java:127"$0$0$0$3$35$"						throw new XMLStreamException("
"ListBasedXMLEventReader.java:128"$0$0$0$9$72$"								""Non-ignorable whitespace CDATA or CHARACTERS event: "" + event);"
"ListBasedXMLEventReader.java:129"$0$0$0$1$6$"					}"
"ListBasedXMLEventReader.java:130"$0$0$0$1$11$"					break;"
"ListBasedXMLEventReader.java:131"$0$0$0$1$12$"				default:"
"ListBasedXMLEventReader.java:132"$0$0$0$9$85$"					throw new XMLStreamException(""Expected START_ELEMENT or END_ELEMENT: "" + event);"
"ListBasedXMLEventReader.java:133"$0$0$0$1$4$"			}"
"ListBasedXMLEventReader.java:134"$0$0$0$1$3$"		}"
"ListBasedXMLEventReader.java:135"$0$0$0$1$2$"	}"
"ListBasedXMLEventReader.java:136"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:137"$0$0$0$1$10$"	@Override"
"ListBasedXMLEventReader.java:138"$0$0$0$4$22$"	public void close() {"
"ListBasedXMLEventReader.java:139"$0$0$0$1$16$"		super.close();"
"ListBasedXMLEventReader.java:140"$0$0$0$1$22$"		this.events.clear();"
"ListBasedXMLEventReader.java:141"$0$0$0$1$2$"	}"
"ListBasedXMLEventReader.java:142"$0$0$0$0$0$""
"ListBasedXMLEventReader.java:143"$0$0$0$1$1$"}"
"AnnotationMetadataReadingVisitor.java:1"$0$0$0$1$2$"/*"
"AnnotationMetadataReadingVisitor.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"AnnotationMetadataReadingVisitor.java:3"$0$0$0$1$2$" *"
"AnnotationMetadataReadingVisitor.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"AnnotationMetadataReadingVisitor.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"AnnotationMetadataReadingVisitor.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"AnnotationMetadataReadingVisitor.java:7"$0$0$0$1$2$" *"
"AnnotationMetadataReadingVisitor.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"AnnotationMetadataReadingVisitor.java:9"$0$0$0$1$2$" *"
"AnnotationMetadataReadingVisitor.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"AnnotationMetadataReadingVisitor.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"AnnotationMetadataReadingVisitor.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"AnnotationMetadataReadingVisitor.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"AnnotationMetadataReadingVisitor.java:14"$0$0$0$5$33$" * limitations under the License."
"AnnotationMetadataReadingVisitor.java:15"$0$0$0$1$3$" */"
"AnnotationMetadataReadingVisitor.java:16"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:17"$0$0$0$2$51$"package org.springframework.core.type.classreading;"
"AnnotationMetadataReadingVisitor.java:18"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:19"$0$0$0$2$28$"import java.util.Collection;"
"AnnotationMetadataReadingVisitor.java:20"$0$0$0$2$29$"import java.util.Collections;"
"AnnotationMetadataReadingVisitor.java:21"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"AnnotationMetadataReadingVisitor.java:22"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"AnnotationMetadataReadingVisitor.java:23"$0$0$0$2$22$"import java.util.List;"
"AnnotationMetadataReadingVisitor.java:24"$0$0$0$2$21$"import java.util.Map;"
"AnnotationMetadataReadingVisitor.java:25"$0$0$0$2$21$"import java.util.Set;"
"AnnotationMetadataReadingVisitor.java:26"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:27"$0$0$0$2$49$"import org.springframework.asm.AnnotationVisitor;"
"AnnotationMetadataReadingVisitor.java:28"$0$0$0$2$45$"import org.springframework.asm.MethodVisitor;"
"AnnotationMetadataReadingVisitor.java:29"$0$0$0$2$39$"import org.springframework.asm.Opcodes;"
"AnnotationMetadataReadingVisitor.java:30"$0$0$0$2$36$"import org.springframework.asm.Type;"
"AnnotationMetadataReadingVisitor.java:31"$0$0$0$2$64$"import org.springframework.core.annotation.AnnotationAttributes;"
"AnnotationMetadataReadingVisitor.java:32"$0$0$0$2$59$"import org.springframework.core.annotation.AnnotationUtils;"
"AnnotationMetadataReadingVisitor.java:33"$0$0$0$2$61$"import org.springframework.core.annotation.MergedAnnotations;"
"AnnotationMetadataReadingVisitor.java:34"$0$0$0$2$56$"import org.springframework.core.type.AnnotationMetadata;"
"AnnotationMetadataReadingVisitor.java:35"$0$0$0$2$52$"import org.springframework.core.type.MethodMetadata;"
"AnnotationMetadataReadingVisitor.java:36"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"AnnotationMetadataReadingVisitor.java:37"$0$0$0$2$52$"import org.springframework.util.LinkedMultiValueMap;"
"AnnotationMetadataReadingVisitor.java:38"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"AnnotationMetadataReadingVisitor.java:39"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:40"$0$0$0$1$3$"/**"
"AnnotationMetadataReadingVisitor.java:41"$0$0$0$14$76$" * ASM class visitor which looks for the class name and implemented types as"
"AnnotationMetadataReadingVisitor.java:42"$0$0$0$13$74$" * well as for the annotations defined on the class, exposing them through"
"AnnotationMetadataReadingVisitor.java:43"$0$0$0$5$74$" * the {@link org.springframework.core.type.AnnotationMetadata} interface."
"AnnotationMetadataReadingVisitor.java:44"$0$0$0$1$2$" *"
"AnnotationMetadataReadingVisitor.java:45"$0$0$0$4$26$" * @author Juergen Hoeller"
"AnnotationMetadataReadingVisitor.java:46"$0$0$0$4$22$" * @author Mark Fisher"
"AnnotationMetadataReadingVisitor.java:47"$0$0$0$4$22$" * @author Costin Leau"
"AnnotationMetadataReadingVisitor.java:48"$0$0$0$4$23$" * @author Phillip Webb"
"AnnotationMetadataReadingVisitor.java:49"$0$0$0$4$22$" * @author Sam Brannen"
"AnnotationMetadataReadingVisitor.java:50"$0$0$0$3$13$" * @since 2.5"
"AnnotationMetadataReadingVisitor.java:51"$0$0$0$13$74$" * @deprecated As of Spring Framework 5.2, this class has been replaced by"
"AnnotationMetadataReadingVisitor.java:52"$0$0$0$8$77$" * {@link SimpleAnnotationMetadataReadingVisitor} for internal use within the"
"AnnotationMetadataReadingVisitor.java:53"$0$0$0$9$52$" * framework, but there is no public replacement for"
"AnnotationMetadataReadingVisitor.java:54"$0$0$0$3$44$" * {@code AnnotationMetadataReadingVisitor}."
"AnnotationMetadataReadingVisitor.java:55"$0$0$0$1$3$" */"
"AnnotationMetadataReadingVisitor.java:56"$0$0$0$1$10$"Deprecated"
"AnnotationMetadataReadingVisitor.java:57"$0$0$0$8$113$"public class AnnotationMetadataReadingVisitor extends ClassMetadataReadingVisitor implements AnnotationMetadata {"
"AnnotationMetadataReadingVisitor.java:58"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:59"$0$0$0$1$10$"	@Nullable"
"AnnotationMetadataReadingVisitor.java:60"$0$0$0$4$41$"	protected final ClassLoader classLoader;"
"AnnotationMetadataReadingVisitor.java:61"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:62"$0$0$0$7$68$"	protected final Set<String> annotationSet = new LinkedHashSet<>(4);"
"AnnotationMetadataReadingVisitor.java:63"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:64"$0$0$0$8$85$"	protected final Map<String, Set<String>> metaAnnotationMap = new LinkedHashMap<>(4);"
"AnnotationMetadataReadingVisitor.java:65"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:66"$0$0$0$1$4$"	/**"
"AnnotationMetadataReadingVisitor.java:67"$0$0$0$11$80$"	 * Declared as a {@link LinkedMultiValueMap} instead of a {@link MultiValueMap}"
"AnnotationMetadataReadingVisitor.java:68"$0$0$0$12$73$"	 * to ensure that the hierarchical ordering of the entries is preserved."
"AnnotationMetadataReadingVisitor.java:69"$1$0$0$3$68$"	 * @see AnnotationReadingVisitorUtils#getMergedAnnotationAttributes"
"AnnotationMetadataReadingVisitor.java:70"$0$0$0$1$4$"	 */"
"AnnotationMetadataReadingVisitor.java:71"$0$0$0$8$112$"	protected final LinkedMultiValueMap<String, AnnotationAttributes> attributesMap = new LinkedMultiValueMap<>(4);"
"AnnotationMetadataReadingVisitor.java:72"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:73"$0$0$0$7$80$"	protected final Set<MethodMetadata> methodMetadataSet = new LinkedHashSet<>(4);"
"AnnotationMetadataReadingVisitor.java:74"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:75"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:76"$0$0$0$5$77$"	public AnnotationMetadataReadingVisitor(@Nullable ClassLoader classLoader) {"
"AnnotationMetadataReadingVisitor.java:77"$0$0$0$3$33$"		this.classLoader = classLoader;"
"AnnotationMetadataReadingVisitor.java:78"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:79"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:80"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:81"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:82"$1$0$0$4$44$"	public MergedAnnotations getAnnotations() {"
"AnnotationMetadataReadingVisitor.java:83"$0$0$0$3$44$"		throw new UnsupportedOperationException();"
"AnnotationMetadataReadingVisitor.java:84"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:85"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:86"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:87"$0$0$0$13$112$"	public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {"
"AnnotationMetadataReadingVisitor.java:88"$0$0$1$13$94$"		// Skip bridge methods - we're only interested in original annotation-defining user methods."
"AnnotationMetadataReadingVisitor.java:89"$0$0$1$15$87$"		// On JDK 8, we'd otherwise run into double detection of the same annotated method..."
"AnnotationMetadataReadingVisitor.java:90"$0$0$0$7$43$"		if ((access & Opcodes.ACC_BRIDGE) != 0) {"
"AnnotationMetadataReadingVisitor.java:91"$0$0$0$6$71$"			return super.visitMethod(access, name, desc, signature, exceptions);"
"AnnotationMetadataReadingVisitor.java:92"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:93"$1$0$0$5$71$"		return new MethodMetadataReadingVisitor(name, access, getClassName(),"
"AnnotationMetadataReadingVisitor.java:94"$2$0$0$3$87$"				Type.getReturnType(desc).getClassName(), this.classLoader, this.methodMetadataSet);"
"AnnotationMetadataReadingVisitor.java:95"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:96"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:97"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:98"$0$0$0$1$10$"	@Nullable"
"AnnotationMetadataReadingVisitor.java:99"$0$0$0$7$73$"	public AnnotationVisitor visitAnnotation(String desc, boolean visible) {"
"AnnotationMetadataReadingVisitor.java:100"$0$0$0$3$17$"		if (!visible) {"
"AnnotationMetadataReadingVisitor.java:101"$0$0$0$2$15$"			return null;"
"AnnotationMetadataReadingVisitor.java:102"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:103"$2$0$0$4$55$"		String className = Type.getType(desc).getClassName();"
"AnnotationMetadataReadingVisitor.java:104"$0$0$0$3$65$"		if (AnnotationUtils.isInJavaLangAnnotationPackage(className)) {"
"AnnotationMetadataReadingVisitor.java:105"$0$0$0$2$15$"			return null;"
"AnnotationMetadataReadingVisitor.java:106"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:107"$0$0$0$1$36$"		this.annotationSet.add(className);"
"AnnotationMetadataReadingVisitor.java:108"$0$0$0$3$48$"		return new AnnotationAttributesReadingVisitor("
"AnnotationMetadataReadingVisitor.java:109"$0$0$0$4$77$"				className, this.attributesMap, this.metaAnnotationMap, this.classLoader);"
"AnnotationMetadataReadingVisitor.java:110"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:111"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:112"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:113"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:114"$1$0$0$4$42$"	public Set<String> getAnnotationTypes() {"
"AnnotationMetadataReadingVisitor.java:115"$0$0$0$2$28$"		return this.annotationSet;"
"AnnotationMetadataReadingVisitor.java:116"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:117"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:118"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:119"$1$0$0$5$67$"	public Set<String> getMetaAnnotationTypes(String annotationName) {"
"AnnotationMetadataReadingVisitor.java:120"$1$0$0$4$79$"		Set<String> metaAnnotationTypes = this.metaAnnotationMap.get(annotationName);"
"AnnotationMetadataReadingVisitor.java:121"$0$0$0$8$86$"		return (metaAnnotationTypes != null ? metaAnnotationTypes : Collections.emptySet());"
"AnnotationMetadataReadingVisitor.java:122"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:123"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:124"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:125"$0$0$0$5$62$"	public boolean hasMetaAnnotation(String metaAnnotationType) {"
"AnnotationMetadataReadingVisitor.java:126"$0$0$0$3$74$"		if (AnnotationUtils.isInJavaLangAnnotationPackage(metaAnnotationType)) {"
"AnnotationMetadataReadingVisitor.java:127"$0$0$0$2$16$"			return false;"
"AnnotationMetadataReadingVisitor.java:128"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:129"$0$0$0$4$73$"		Collection<Set<String>> allMetaTypes = this.metaAnnotationMap.values();"
"AnnotationMetadataReadingVisitor.java:130"$0$0$0$6$46$"		for (Set<String> metaTypes : allMetaTypes) {"
"AnnotationMetadataReadingVisitor.java:131"$0$0$0$3$48$"			if (metaTypes.contains(metaAnnotationType)) {"
"AnnotationMetadataReadingVisitor.java:132"$0$0$0$2$16$"				return true;"
"AnnotationMetadataReadingVisitor.java:133"$0$0$0$1$4$"			}"
"AnnotationMetadataReadingVisitor.java:134"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:135"$0$0$0$2$15$"		return false;"
"AnnotationMetadataReadingVisitor.java:136"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:137"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:138"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:139"$0$0$0$5$52$"	public boolean isAnnotated(String annotationName) {"
"AnnotationMetadataReadingVisitor.java:140"$0$0$0$3$75$"		return (!AnnotationUtils.isInJavaLangAnnotationPackage(annotationName) &&"
"AnnotationMetadataReadingVisitor.java:141"$0$0$0$1$52$"				this.attributesMap.containsKey(annotationName));"
"AnnotationMetadataReadingVisitor.java:142"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:143"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:144"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:145"$0$0$0$5$54$"	public boolean hasAnnotation(String annotationName) {"
"AnnotationMetadataReadingVisitor.java:146"$1$0$0$2$55$"		return getAnnotationTypes().contains(annotationName);"
"AnnotationMetadataReadingVisitor.java:147"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:148"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:149"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:150"$0$0$0$1$10$"	@Nullable"
"AnnotationMetadataReadingVisitor.java:151"$1$0$0$7$106$"	public AnnotationAttributes getAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"AnnotationMetadataReadingVisitor.java:152"$1$0$0$4$89$"		AnnotationAttributes raw = AnnotationReadingVisitorUtils.getMergedAnnotationAttributes("
"AnnotationMetadataReadingVisitor.java:153"$0$0$0$3$64$"				this.attributesMap, this.metaAnnotationMap, annotationName);"
"AnnotationMetadataReadingVisitor.java:154"$0$0$0$5$20$"		if (raw == null) {"
"AnnotationMetadataReadingVisitor.java:155"$0$0$0$2$15$"			return null;"
"AnnotationMetadataReadingVisitor.java:156"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:157"$0$0$0$2$58$"		return AnnotationReadingVisitorUtils.convertClassValues("
"AnnotationMetadataReadingVisitor.java:158"$1$0$0$9$82$"				""class '"" + getClassName() + ""'"", this.classLoader, raw, classValuesAsString);"
"AnnotationMetadataReadingVisitor.java:159"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:160"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:161"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:162"$0$0$0$1$10$"	@Nullable"
"AnnotationMetadataReadingVisitor.java:163"$1$0$0$8$118$"	public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"AnnotationMetadataReadingVisitor.java:164"$0$0$0$6$76$"		MultiValueMap<String, Object> allAttributes = new LinkedMultiValueMap<>();"
"AnnotationMetadataReadingVisitor.java:165"$1$0$0$4$81$"		List<AnnotationAttributes> attributes = this.attributesMap.get(annotationName);"
"AnnotationMetadataReadingVisitor.java:166"$0$0$0$5$27$"		if (attributes == null) {"
"AnnotationMetadataReadingVisitor.java:167"$0$0$0$2$15$"			return null;"
"AnnotationMetadataReadingVisitor.java:168"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:169"$1$0$0$9$61$"		String annotatedElement = ""class '"" + getClassName() + ""'"";"
"AnnotationMetadataReadingVisitor.java:170"$0$0$0$6$47$"		for (AnnotationAttributes raw : attributes) {"
"AnnotationMetadataReadingVisitor.java:171"$0$0$0$6$91$"			for (Map.Entry<String, Object> entry : AnnotationReadingVisitorUtils.convertClassValues("
"AnnotationMetadataReadingVisitor.java:172"$0$0$0$5$80$"					annotatedElement, this.classLoader, raw, classValuesAsString).entrySet()) {"
"AnnotationMetadataReadingVisitor.java:173"$2$0$0$2$56$"				allAttributes.add(entry.getKey(), entry.getValue());"
"AnnotationMetadataReadingVisitor.java:174"$0$0$0$1$4$"			}"
"AnnotationMetadataReadingVisitor.java:175"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:176"$0$0$0$2$23$"		return allAttributes;"
"AnnotationMetadataReadingVisitor.java:177"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:178"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:179"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:180"$0$0$0$5$60$"	public boolean hasAnnotatedMethods(String annotationName) {"
"AnnotationMetadataReadingVisitor.java:181"$0$0$0$6$64$"		for (MethodMetadata methodMetadata : this.methodMetadataSet) {"
"AnnotationMetadataReadingVisitor.java:182"$0$0$0$3$52$"			if (methodMetadata.isAnnotated(annotationName)) {"
"AnnotationMetadataReadingVisitor.java:183"$0$0$0$2$16$"				return true;"
"AnnotationMetadataReadingVisitor.java:184"$0$0$0$1$4$"			}"
"AnnotationMetadataReadingVisitor.java:185"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:186"$0$0$0$2$15$"		return false;"
"AnnotationMetadataReadingVisitor.java:187"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:188"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:189"$0$0$0$1$10$"	@Override"
"AnnotationMetadataReadingVisitor.java:190"$1$0$0$5$72$"	public Set<MethodMetadata> getAnnotatedMethods(String annotationName) {"
"AnnotationMetadataReadingVisitor.java:191"$0$0$0$5$64$"		Set<MethodMetadata> annotatedMethods = new LinkedHashSet<>(4);"
"AnnotationMetadataReadingVisitor.java:192"$0$0$0$6$64$"		for (MethodMetadata methodMetadata : this.methodMetadataSet) {"
"AnnotationMetadataReadingVisitor.java:193"$0$0$0$3$52$"			if (methodMetadata.isAnnotated(annotationName)) {"
"AnnotationMetadataReadingVisitor.java:194"$0$0$0$1$41$"				annotatedMethods.add(methodMetadata);"
"AnnotationMetadataReadingVisitor.java:195"$0$0$0$1$4$"			}"
"AnnotationMetadataReadingVisitor.java:196"$0$0$0$1$3$"		}"
"AnnotationMetadataReadingVisitor.java:197"$0$0$0$2$26$"		return annotatedMethods;"
"AnnotationMetadataReadingVisitor.java:198"$0$0$0$1$2$"	}"
"AnnotationMetadataReadingVisitor.java:199"$0$0$0$0$0$""
"AnnotationMetadataReadingVisitor.java:200"$0$0$0$1$1$"}"
"ComparableComparator.java:1"$0$0$0$1$2$"/*"
"ComparableComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ComparableComparator.java:3"$0$0$0$1$2$" *"
"ComparableComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ComparableComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ComparableComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ComparableComparator.java:7"$0$0$0$1$2$" *"
"ComparableComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ComparableComparator.java:9"$0$0$0$1$2$" *"
"ComparableComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ComparableComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ComparableComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ComparableComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ComparableComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"ComparableComparator.java:15"$0$0$0$1$3$" */"
"ComparableComparator.java:16"$0$0$0$0$0$""
"ComparableComparator.java:17"$0$0$0$2$44$"package org.springframework.util.comparator;"
"ComparableComparator.java:18"$0$0$0$0$0$""
"ComparableComparator.java:19"$0$0$0$2$28$"import java.util.Comparator;"
"ComparableComparator.java:20"$0$0$0$0$0$""
"ComparableComparator.java:21"$0$0$0$1$3$"/**"
"ComparableComparator.java:22"$0$0$0$9$66$" * Comparator that adapts Comparables to the Comparator interface."
"ComparableComparator.java:23"$0$0$0$10$62$" * Mainly for internal use in other Comparators, when supposed"
"ComparableComparator.java:24"$0$0$0$5$26$" * to work on Comparables."
"ComparableComparator.java:25"$0$0$0$1$2$" *"
"ComparableComparator.java:26"$0$0$0$4$23$" * @author Keith Donald"
"ComparableComparator.java:27"$0$0$0$3$15$" * @since 1.2.2"
"ComparableComparator.java:28"$0$0$0$15$84$" * @param <T> the type of comparable objects that may be compared by this comparator"
"ComparableComparator.java:29"$0$0$0$3$18$" * @see Comparable"
"ComparableComparator.java:30"$0$0$0$1$3$" */"
"ComparableComparator.java:31"$0$0$0$8$85$"public class ComparableComparator<T extends Comparable<T>> implements Comparator<T> {"
"ComparableComparator.java:32"$0$0$0$0$0$""
"ComparableComparator.java:33"$0$0$0$1$4$"	/**"
"ComparableComparator.java:34"$0$0$0$8$49$"	 * A shared instance of this default comparator."
"ComparableComparator.java:35"$0$0$0$3$33$"	 * @see Comparators#comparable()"
"ComparableComparator.java:36"$0$0$0$1$4$"	 */"
"ComparableComparator.java:37"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"ComparableComparator.java:38"$0$0$0$8$80$"	public static final ComparableComparator INSTANCE = new ComparableComparator();"
"ComparableComparator.java:39"$0$0$0$0$0$""
"ComparableComparator.java:40"$0$0$0$0$0$""
"ComparableComparator.java:41"$0$0$0$1$10$"	@Override"
"ComparableComparator.java:42"$0$0$0$7$33$"	public int compare(T o1, T o2) {"
"ComparableComparator.java:43"$0$0$0$2$26$"		return o1.compareTo(o2);"
"ComparableComparator.java:44"$0$0$0$1$2$"	}"
"ComparableComparator.java:45"$0$0$0$0$0$""
"ComparableComparator.java:46"$0$0$0$1$1$"}"
"XMLEventStreamWriter.java:1"$0$0$0$1$2$"/*"
"XMLEventStreamWriter.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"XMLEventStreamWriter.java:3"$0$0$0$1$2$" *"
"XMLEventStreamWriter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"XMLEventStreamWriter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"XMLEventStreamWriter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"XMLEventStreamWriter.java:7"$0$0$0$1$2$" *"
"XMLEventStreamWriter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"XMLEventStreamWriter.java:9"$0$0$0$1$2$" *"
"XMLEventStreamWriter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"XMLEventStreamWriter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"XMLEventStreamWriter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"XMLEventStreamWriter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"XMLEventStreamWriter.java:14"$0$0$0$5$33$" * limitations under the License."
"XMLEventStreamWriter.java:15"$0$0$0$1$3$" */"
"XMLEventStreamWriter.java:16"$0$0$0$0$0$""
"XMLEventStreamWriter.java:17"$0$0$0$2$37$"package org.springframework.util.xml;"
"XMLEventStreamWriter.java:18"$0$0$0$0$0$""
"XMLEventStreamWriter.java:19"$0$0$0$2$27$"import java.util.ArrayList;"
"XMLEventStreamWriter.java:20"$0$0$0$2$26$"import java.util.Iterator;"
"XMLEventStreamWriter.java:21"$0$0$0$2$22$"import java.util.List;"
"XMLEventStreamWriter.java:22"$0$0$0$0$0$""
"XMLEventStreamWriter.java:23"$0$0$0$2$44$"import javax.xml.namespace.NamespaceContext;"
"XMLEventStreamWriter.java:24"$0$0$0$2$33$"import javax.xml.namespace.QName;"
"XMLEventStreamWriter.java:25"$0$0$0$2$40$"import javax.xml.stream.XMLEventFactory;"
"XMLEventStreamWriter.java:26"$0$0$0$2$39$"import javax.xml.stream.XMLEventWriter;"
"XMLEventStreamWriter.java:27"$0$0$0$2$43$"import javax.xml.stream.XMLStreamException;"
"XMLEventStreamWriter.java:28"$0$0$0$2$40$"import javax.xml.stream.XMLStreamWriter;"
"XMLEventStreamWriter.java:29"$0$0$0$2$42$"import javax.xml.stream.events.EndElement;"
"XMLEventStreamWriter.java:30"$0$0$0$2$41$"import javax.xml.stream.events.Namespace;"
"XMLEventStreamWriter.java:31"$0$0$0$2$44$"import javax.xml.stream.events.StartElement;"
"XMLEventStreamWriter.java:32"$0$0$0$0$0$""
"XMLEventStreamWriter.java:33"$0$0$0$1$3$"/**"
"XMLEventStreamWriter.java:34"$0$0$0$7$75$" * Implementation of the {@link javax.xml.stream.XMLStreamWriter} interface"
"XMLEventStreamWriter.java:35"$0$0$0$6$40$" * that wraps an {@link XMLEventWriter}."
"XMLEventStreamWriter.java:36"$0$0$0$1$2$" *"
"XMLEventStreamWriter.java:37"$0$0$0$4$24$" * @author Arjen Poutsma"
"XMLEventStreamWriter.java:38"$0$0$0$3$15$" * @since 3.0.5"
"XMLEventStreamWriter.java:39"$0$0$0$4$108$" * @see StaxUtils#createEventStreamWriter(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)"
"XMLEventStreamWriter.java:40"$0$0$0$1$3$" */"
"XMLEventStreamWriter.java:41"$0$0$0$5$55$"class XMLEventStreamWriter implements XMLStreamWriter {"
"XMLEventStreamWriter.java:42"$0$0$0$0$0$""
"XMLEventStreamWriter.java:43"$0$0$0$7$56$"	private static final String DEFAULT_ENCODING = ""UTF-8"";"
"XMLEventStreamWriter.java:44"$0$0$0$0$0$""
"XMLEventStreamWriter.java:45"$0$0$0$4$42$"	private final XMLEventWriter eventWriter;"
"XMLEventStreamWriter.java:46"$0$0$0$0$0$""
"XMLEventStreamWriter.java:47"$0$0$0$4$44$"	private final XMLEventFactory eventFactory;"
"XMLEventStreamWriter.java:48"$0$0$0$0$0$""
"XMLEventStreamWriter.java:49"$0$0$0$7$64$"	private final List<EndElement> endElements = new ArrayList<>();"
"XMLEventStreamWriter.java:50"$0$0$0$0$0$""
"XMLEventStreamWriter.java:51"$0$0$0$5$38$"	private boolean emptyElement = false;"
"XMLEventStreamWriter.java:52"$0$0$0$0$0$""
"XMLEventStreamWriter.java:53"$0$0$0$0$0$""
"XMLEventStreamWriter.java:54"$0$0$0$6$88$"	public XMLEventStreamWriter(XMLEventWriter eventWriter, XMLEventFactory eventFactory) {"
"XMLEventStreamWriter.java:55"$0$0$0$3$33$"		this.eventWriter = eventWriter;"
"XMLEventStreamWriter.java:56"$0$0$0$3$35$"		this.eventFactory = eventFactory;"
"XMLEventStreamWriter.java:57"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:58"$0$0$0$0$0$""
"XMLEventStreamWriter.java:59"$0$0$0$0$0$""
"XMLEventStreamWriter.java:60"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:61"$0$0$0$7$86$"	public void setNamespaceContext(NamespaceContext context) throws XMLStreamException {"
"XMLEventStreamWriter.java:62"$0$0$0$1$48$"		this.eventWriter.setNamespaceContext(context);"
"XMLEventStreamWriter.java:63"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:64"$0$0$0$0$0$""
"XMLEventStreamWriter.java:65"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:66"$1$0$0$4$48$"	public NamespaceContext getNamespaceContext() {"
"XMLEventStreamWriter.java:67"$1$0$0$2$48$"		return this.eventWriter.getNamespaceContext();"
"XMLEventStreamWriter.java:68"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:69"$0$0$0$0$0$""
"XMLEventStreamWriter.java:70"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:71"$0$0$0$9$77$"	public void setPrefix(String prefix, String uri) throws XMLStreamException {"
"XMLEventStreamWriter.java:72"$0$0$0$2$42$"		this.eventWriter.setPrefix(prefix, uri);"
"XMLEventStreamWriter.java:73"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:74"$0$0$0$0$0$""
"XMLEventStreamWriter.java:75"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:76"$1$0$0$7$64$"	public String getPrefix(String uri) throws XMLStreamException {"
"XMLEventStreamWriter.java:77"$1$0$0$2$41$"		return this.eventWriter.getPrefix(uri);"
"XMLEventStreamWriter.java:78"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:79"$0$0$0$0$0$""
"XMLEventStreamWriter.java:80"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:81"$0$0$0$7$72$"	public void setDefaultNamespace(String uri) throws XMLStreamException {"
"XMLEventStreamWriter.java:82"$0$0$0$1$44$"		this.eventWriter.setDefaultNamespace(uri);"
"XMLEventStreamWriter.java:83"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:84"$0$0$0$0$0$""
"XMLEventStreamWriter.java:85"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:86"$1$0$0$7$73$"	public Object getProperty(String name) throws IllegalArgumentException {"
"XMLEventStreamWriter.java:87"$0$0$0$3$39$"		throw new IllegalArgumentException();"
"XMLEventStreamWriter.java:88"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:89"$0$0$0$0$0$""
"XMLEventStreamWriter.java:90"$0$0$0$0$0$""
"XMLEventStreamWriter.java:91"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:92"$0$0$0$6$61$"	public void writeStartDocument() throws XMLStreamException {"
"XMLEventStreamWriter.java:93"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:94"$0$0$0$1$64$"		this.eventWriter.add(this.eventFactory.createStartDocument());"
"XMLEventStreamWriter.java:95"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:96"$0$0$0$0$0$""
"XMLEventStreamWriter.java:97"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:98"$0$0$0$7$75$"	public void writeStartDocument(String version) throws XMLStreamException {"
"XMLEventStreamWriter.java:99"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:100"$0$0$0$2$89$"		this.eventWriter.add(this.eventFactory.createStartDocument(DEFAULT_ENCODING, version));"
"XMLEventStreamWriter.java:101"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:102"$0$0$0$0$0$""
"XMLEventStreamWriter.java:103"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:104"$0$0$0$9$92$"	public void writeStartDocument(String encoding, String version) throws XMLStreamException {"
"XMLEventStreamWriter.java:105"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:106"$0$0$0$2$81$"		this.eventWriter.add(this.eventFactory.createStartDocument(encoding, version));"
"XMLEventStreamWriter.java:107"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:108"$0$0$0$0$0$""
"XMLEventStreamWriter.java:109"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:110"$0$0$0$7$76$"	public void writeStartElement(String localName) throws XMLStreamException {"
"XMLEventStreamWriter.java:111"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:112"$0$0$0$4$94$"		doWriteStartElement(this.eventFactory.createStartElement(new QName(localName), null, null));"
"XMLEventStreamWriter.java:113"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:114"$0$0$0$0$0$""
"XMLEventStreamWriter.java:115"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:116"$0$0$0$9$97$"	public void writeStartElement(String namespaceURI, String localName) throws XMLStreamException {"
"XMLEventStreamWriter.java:117"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:118"$0$0$0$5$108$"		doWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName), null, null));"
"XMLEventStreamWriter.java:119"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:120"$0$0$0$0$0$""
"XMLEventStreamWriter.java:121"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:122"$0$0$0$11$112$"	public void writeStartElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {"
"XMLEventStreamWriter.java:123"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:124"$0$0$0$6$116$"		doWriteStartElement(this.eventFactory.createStartElement(new QName(namespaceURI, localName, prefix), null, null));"
"XMLEventStreamWriter.java:125"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:126"$0$0$0$0$0$""
"XMLEventStreamWriter.java:127"$0$0$0$7$88$"	private void doWriteStartElement(StartElement startElement) throws XMLStreamException {"
"XMLEventStreamWriter.java:128"$0$0$0$1$37$"		this.eventWriter.add(startElement);"
"XMLEventStreamWriter.java:129"$2$0$0$2$113$"		this.endElements.add(this.eventFactory.createEndElement(startElement.getName(), startElement.getNamespaces()));"
"XMLEventStreamWriter.java:130"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:131"$0$0$0$0$0$""
"XMLEventStreamWriter.java:132"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:133"$0$0$0$7$76$"	public void writeEmptyElement(String localName) throws XMLStreamException {"
"XMLEventStreamWriter.java:134"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:135"$0$0$0$1$31$"		writeStartElement(localName);"
"XMLEventStreamWriter.java:136"$0$0$0$3$27$"		this.emptyElement = true;"
"XMLEventStreamWriter.java:137"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:138"$0$0$0$0$0$""
"XMLEventStreamWriter.java:139"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:140"$0$0$0$9$97$"	public void writeEmptyElement(String namespaceURI, String localName) throws XMLStreamException {"
"XMLEventStreamWriter.java:141"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:142"$0$0$0$2$45$"		writeStartElement(namespaceURI, localName);"
"XMLEventStreamWriter.java:143"$0$0$0$3$27$"		this.emptyElement = true;"
"XMLEventStreamWriter.java:144"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:145"$0$0$0$0$0$""
"XMLEventStreamWriter.java:146"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:147"$0$0$0$11$112$"	public void writeEmptyElement(String prefix, String localName, String namespaceURI) throws XMLStreamException {"
"XMLEventStreamWriter.java:148"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:149"$0$0$0$3$53$"		writeStartElement(prefix, localName, namespaceURI);"
"XMLEventStreamWriter.java:150"$0$0$0$3$27$"		this.emptyElement = true;"
"XMLEventStreamWriter.java:151"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:152"$0$0$0$0$0$""
"XMLEventStreamWriter.java:153"$0$0$0$6$72$"	private void closeEmptyElementIfNecessary() throws XMLStreamException {"
"XMLEventStreamWriter.java:154"$0$0$0$3$26$"		if (this.emptyElement) {"
"XMLEventStreamWriter.java:155"$0$0$0$3$29$"			this.emptyElement = false;"
"XMLEventStreamWriter.java:156"$0$0$0$1$21$"			writeEndElement();"
"XMLEventStreamWriter.java:157"$0$0$0$1$3$"		}"
"XMLEventStreamWriter.java:158"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:159"$0$0$0$0$0$""
"XMLEventStreamWriter.java:160"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:161"$0$0$0$6$58$"	public void writeEndElement() throws XMLStreamException {"
"XMLEventStreamWriter.java:162"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:163"$0$0$0$6$41$"		int last = this.endElements.size() - 1;"
"XMLEventStreamWriter.java:164"$1$0$0$4$57$"		EndElement lastEndElement = this.endElements.get(last);"
"XMLEventStreamWriter.java:165"$0$0$0$1$39$"		this.eventWriter.add(lastEndElement);"
"XMLEventStreamWriter.java:166"$0$0$0$1$32$"		this.endElements.remove(last);"
"XMLEventStreamWriter.java:167"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:168"$0$0$0$0$0$""
"XMLEventStreamWriter.java:169"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:170"$0$0$0$9$87$"	public void writeAttribute(String localName, String value) throws XMLStreamException {"
"XMLEventStreamWriter.java:171"$0$0$0$2$76$"		this.eventWriter.add(this.eventFactory.createAttribute(localName, value));"
"XMLEventStreamWriter.java:172"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:173"$0$0$0$0$0$""
"XMLEventStreamWriter.java:174"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:175"$0$0$0$11$108$"	public void writeAttribute(String namespaceURI, String localName, String value) throws XMLStreamException {"
"XMLEventStreamWriter.java:176"$0$0$0$4$101$"		this.eventWriter.add(this.eventFactory.createAttribute(new QName(namespaceURI, localName), value));"
"XMLEventStreamWriter.java:177"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:178"$0$0$0$0$0$""
"XMLEventStreamWriter.java:179"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:180"$0$0$0$10$95$"	public void writeAttribute(String prefix, String namespaceURI, String localName, String value)"
"XMLEventStreamWriter.java:181"$0$0$0$3$30$"			throws XMLStreamException {"
"XMLEventStreamWriter.java:182"$0$0$0$0$0$""
"XMLEventStreamWriter.java:183"$0$0$0$4$98$"		this.eventWriter.add(this.eventFactory.createAttribute(prefix, namespaceURI, localName, value));"
"XMLEventStreamWriter.java:184"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:185"$0$0$0$0$0$""
"XMLEventStreamWriter.java:186"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:187"$0$0$0$9$91$"	public void writeNamespace(String prefix, String namespaceURI) throws XMLStreamException {"
"XMLEventStreamWriter.java:188"$0$0$0$2$76$"		doWriteNamespace(this.eventFactory.createNamespace(prefix, namespaceURI));"
"XMLEventStreamWriter.java:189"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:190"$0$0$0$0$0$""
"XMLEventStreamWriter.java:191"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:192"$0$0$0$7$83$"	public void writeDefaultNamespace(String namespaceURI) throws XMLStreamException {"
"XMLEventStreamWriter.java:193"$0$0$0$1$68$"		doWriteNamespace(this.eventFactory.createNamespace(namespaceURI));"
"XMLEventStreamWriter.java:194"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:195"$0$0$0$0$0$""
"XMLEventStreamWriter.java:196"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"XMLEventStreamWriter.java:197"$0$0$0$7$79$"	private void doWriteNamespace(Namespace namespace) throws XMLStreamException {"
"XMLEventStreamWriter.java:198"$0$0$0$6$41$"		int last = this.endElements.size() - 1;"
"XMLEventStreamWriter.java:199"$1$0$0$4$56$"		EndElement oldEndElement = this.endElements.get(last);"
"XMLEventStreamWriter.java:200"$1$0$0$4$57$"		Iterator oldNamespaces = oldEndElement.getNamespaces();"
"XMLEventStreamWriter.java:201"$0$0$0$5$52$"		List<Namespace> newNamespaces = new ArrayList<>();"
"XMLEventStreamWriter.java:202"$0$0$0$3$35$"		while (oldNamespaces.hasNext()) {"
"XMLEventStreamWriter.java:203"$0$0$0$5$61$"			Namespace oldNamespace = (Namespace) oldNamespaces.next();"
"XMLEventStreamWriter.java:204"$0$0$0$1$35$"			newNamespaces.add(oldNamespace);"
"XMLEventStreamWriter.java:205"$0$0$0$1$3$"		}"
"XMLEventStreamWriter.java:206"$0$0$0$1$31$"		newNamespaces.add(namespace);"
"XMLEventStreamWriter.java:207"$1$0$0$5$115$"		EndElement newEndElement = this.eventFactory.createEndElement(oldEndElement.getName(), newNamespaces.iterator());"
"XMLEventStreamWriter.java:208"$0$0$0$1$34$"		this.eventWriter.add(namespace);"
"XMLEventStreamWriter.java:209"$0$0$0$2$44$"		this.endElements.set(last, newEndElement);"
"XMLEventStreamWriter.java:210"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:211"$0$0$0$0$0$""
"XMLEventStreamWriter.java:212"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:213"$0$0$0$7$69$"	public void writeCharacters(String text) throws XMLStreamException {"
"XMLEventStreamWriter.java:214"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:215"$0$0$0$1$65$"		this.eventWriter.add(this.eventFactory.createCharacters(text));"
"XMLEventStreamWriter.java:216"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:217"$0$0$0$0$0$""
"XMLEventStreamWriter.java:218"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:219"$0$0$0$11$89$"	public void writeCharacters(char[] text, int start, int len) throws XMLStreamException {"
"XMLEventStreamWriter.java:220"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:221"$0$0$0$4$89$"		this.eventWriter.add(this.eventFactory.createCharacters(new String(text, start, len)));"
"XMLEventStreamWriter.java:222"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:223"$0$0$0$0$0$""
"XMLEventStreamWriter.java:224"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:225"$0$0$0$7$64$"	public void writeCData(String data) throws XMLStreamException {"
"XMLEventStreamWriter.java:226"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:227"$0$0$0$1$60$"		this.eventWriter.add(this.eventFactory.createCData(data));"
"XMLEventStreamWriter.java:228"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:229"$0$0$0$0$0$""
"XMLEventStreamWriter.java:230"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:231"$0$0$0$7$66$"	public void writeComment(String data) throws XMLStreamException {"
"XMLEventStreamWriter.java:232"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:233"$0$0$0$1$62$"		this.eventWriter.add(this.eventFactory.createComment(data));"
"XMLEventStreamWriter.java:234"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:235"$0$0$0$0$0$""
"XMLEventStreamWriter.java:236"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:237"$1$0$0$7$82$"	public void writeProcessingInstruction(String target) throws XMLStreamException {"
"XMLEventStreamWriter.java:238"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:239"$1$0$0$2$82$"		this.eventWriter.add(this.eventFactory.createProcessingInstruction(target, """"));"
"XMLEventStreamWriter.java:240"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:241"$0$0$0$0$0$""
"XMLEventStreamWriter.java:242"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:243"$1$0$0$9$95$"	public void writeProcessingInstruction(String target, String data) throws XMLStreamException {"
"XMLEventStreamWriter.java:244"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:245"$1$0$0$2$84$"		this.eventWriter.add(this.eventFactory.createProcessingInstruction(target, data));"
"XMLEventStreamWriter.java:246"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:247"$0$0$0$0$0$""
"XMLEventStreamWriter.java:248"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:249"$0$0$0$7$61$"	public void writeDTD(String dtd) throws XMLStreamException {"
"XMLEventStreamWriter.java:250"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:251"$0$0$0$1$57$"		this.eventWriter.add(this.eventFactory.createDTD(dtd));"
"XMLEventStreamWriter.java:252"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:253"$0$0$0$0$0$""
"XMLEventStreamWriter.java:254"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:255"$0$0$0$7$68$"	public void writeEntityRef(String name) throws XMLStreamException {"
"XMLEventStreamWriter.java:256"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:257"$0$0$0$2$76$"		this.eventWriter.add(this.eventFactory.createEntityReference(name, null));"
"XMLEventStreamWriter.java:258"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:259"$0$0$0$0$0$""
"XMLEventStreamWriter.java:260"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:261"$0$0$0$6$59$"	public void writeEndDocument() throws XMLStreamException {"
"XMLEventStreamWriter.java:262"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:263"$0$0$0$1$62$"		this.eventWriter.add(this.eventFactory.createEndDocument());"
"XMLEventStreamWriter.java:264"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:265"$0$0$0$0$0$""
"XMLEventStreamWriter.java:266"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:267"$0$0$0$6$48$"	public void flush() throws XMLStreamException {"
"XMLEventStreamWriter.java:268"$0$0$0$1$27$"		this.eventWriter.flush();"
"XMLEventStreamWriter.java:269"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:270"$0$0$0$0$0$""
"XMLEventStreamWriter.java:271"$0$0$0$1$10$"	@Override"
"XMLEventStreamWriter.java:272"$0$0$0$6$48$"	public void close() throws XMLStreamException {"
"XMLEventStreamWriter.java:273"$0$0$0$1$33$"		closeEmptyElementIfNecessary();"
"XMLEventStreamWriter.java:274"$0$0$0$1$27$"		this.eventWriter.close();"
"XMLEventStreamWriter.java:275"$0$0$0$1$2$"	}"
"XMLEventStreamWriter.java:276"$0$0$0$0$0$""
"XMLEventStreamWriter.java:277"$0$0$0$1$1$"}"
"MonoToListenableFutureAdapter.java:1"$0$0$0$1$2$"/*"
"MonoToListenableFutureAdapter.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"MonoToListenableFutureAdapter.java:3"$0$0$0$1$2$" *"
"MonoToListenableFutureAdapter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MonoToListenableFutureAdapter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MonoToListenableFutureAdapter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MonoToListenableFutureAdapter.java:7"$0$0$0$1$2$" *"
"MonoToListenableFutureAdapter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MonoToListenableFutureAdapter.java:9"$0$0$0$1$2$" *"
"MonoToListenableFutureAdapter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MonoToListenableFutureAdapter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MonoToListenableFutureAdapter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MonoToListenableFutureAdapter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MonoToListenableFutureAdapter.java:14"$0$0$0$5$33$" * limitations under the License."
"MonoToListenableFutureAdapter.java:15"$0$0$0$1$3$" */"
"MonoToListenableFutureAdapter.java:16"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:17"$0$0$0$2$44$"package org.springframework.util.concurrent;"
"MonoToListenableFutureAdapter.java:18"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:19"$0$0$0$2$26$"import java.time.Duration;"
"MonoToListenableFutureAdapter.java:20"$0$0$0$2$37$"import java.util.concurrent.TimeUnit;"
"MonoToListenableFutureAdapter.java:21"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:22"$0$0$0$2$35$"import reactor.core.publisher.Mono;"
"MonoToListenableFutureAdapter.java:23"$0$0$0$2$44$"import reactor.core.publisher.MonoProcessor;"
"MonoToListenableFutureAdapter.java:24"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MonoToListenableFutureAdapter.java:26"$0$0$0$2$39$"import org.springframework.util.Assert;"
"MonoToListenableFutureAdapter.java:27"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:28"$0$0$0$1$3$"/**"
"MonoToListenableFutureAdapter.java:29"$0$0$0$9$57$" * Adapts a {@link Mono} into a {@link ListenableFuture}."
"MonoToListenableFutureAdapter.java:30"$0$0$0$1$2$" *"
"MonoToListenableFutureAdapter.java:31"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"MonoToListenableFutureAdapter.java:32"$0$0$0$4$27$" * @author Stephane Maldini"
"MonoToListenableFutureAdapter.java:33"$0$0$0$3$13$" * @since 5.1"
"MonoToListenableFutureAdapter.java:34"$0$0$0$6$29$" * @param <T> the object type"
"MonoToListenableFutureAdapter.java:35"$0$0$0$1$3$" */"
"MonoToListenableFutureAdapter.java:36"$0$0$0$6$78$"public class MonoToListenableFutureAdapter<T> implements ListenableFuture<T> {"
"MonoToListenableFutureAdapter.java:37"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:38"$0$0$0$4$42$"	private final MonoProcessor<T> processor;"
"MonoToListenableFutureAdapter.java:39"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:40"$0$0$0$7$103$"	private final ListenableFutureCallbackRegistry<T> registry = new ListenableFutureCallbackRegistry<>();"
"MonoToListenableFutureAdapter.java:41"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:42"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:43"$0$0$0$4$53$"	public MonoToListenableFutureAdapter(Mono<T> mono) {"
"MonoToListenableFutureAdapter.java:44"$0$0$0$6$48$"		Assert.notNull(mono, ""Mono must not be null"");"
"MonoToListenableFutureAdapter.java:45"$0$0$0$3$23$"		this.processor = mono"
"MonoToListenableFutureAdapter.java:46"$0$0$0$1$40$"				.doOnSuccess(this.registry::success)"
"MonoToListenableFutureAdapter.java:47"$0$0$0$1$38$"				.doOnError(this.registry::failure)"
"MonoToListenableFutureAdapter.java:48"$0$0$0$1$19$"				.toProcessor();"
"MonoToListenableFutureAdapter.java:49"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:50"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:51"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:52"$0$0$0$1$10$"	@Override"
"MonoToListenableFutureAdapter.java:53"$0$0$0$1$10$"	@Nullable"
"MonoToListenableFutureAdapter.java:54"$1$0$0$4$17$"	public T get() {"
"MonoToListenableFutureAdapter.java:55"$0$0$0$2$32$"		return this.processor.block();"
"MonoToListenableFutureAdapter.java:56"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:57"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:58"$0$0$0$1$10$"	@Override"
"MonoToListenableFutureAdapter.java:59"$0$0$0$1$10$"	@Nullable"
"MonoToListenableFutureAdapter.java:60"$1$0$0$7$44$"	public T get(long timeout, TimeUnit unit) {"
"MonoToListenableFutureAdapter.java:61"$0$0$0$6$52$"		Assert.notNull(unit, ""TimeUnit must not be null"");"
"MonoToListenableFutureAdapter.java:62"$0$0$0$5$86$"		Duration duration = Duration.ofMillis(TimeUnit.MILLISECONDS.convert(timeout, unit));"
"MonoToListenableFutureAdapter.java:63"$0$0$0$2$40$"		return this.processor.block(duration);"
"MonoToListenableFutureAdapter.java:64"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:65"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:66"$0$0$0$1$10$"	@Override"
"MonoToListenableFutureAdapter.java:67"$0$0$0$5$55$"	public boolean cancel(boolean mayInterruptIfRunning) {"
"MonoToListenableFutureAdapter.java:68"$0$0$0$3$22$"		if (isCancelled()) {"
"MonoToListenableFutureAdapter.java:69"$0$0$0$2$16$"			return false;"
"MonoToListenableFutureAdapter.java:70"$0$0$0$1$3$"		}"
"MonoToListenableFutureAdapter.java:71"$0$0$0$1$26$"		this.processor.cancel();"
"MonoToListenableFutureAdapter.java:72"$0$0$1$12$76$"		// isCancelled may still return false, if mono completed before the cancel"
"MonoToListenableFutureAdapter.java:73"$0$0$0$2$38$"		return this.processor.isCancelled();"
"MonoToListenableFutureAdapter.java:74"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:75"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:76"$0$0$0$1$10$"	@Override"
"MonoToListenableFutureAdapter.java:77"$0$0$0$4$31$"	public boolean isCancelled() {"
"MonoToListenableFutureAdapter.java:78"$0$0$0$2$38$"		return this.processor.isCancelled();"
"MonoToListenableFutureAdapter.java:79"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:80"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:81"$0$0$0$1$10$"	@Override"
"MonoToListenableFutureAdapter.java:82"$0$0$0$4$26$"	public boolean isDone() {"
"MonoToListenableFutureAdapter.java:83"$0$0$0$2$39$"		return this.processor.isTerminated();"
"MonoToListenableFutureAdapter.java:84"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:85"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:86"$0$0$0$1$10$"	@Override"
"MonoToListenableFutureAdapter.java:87"$0$0$0$7$72$"	public void addCallback(ListenableFutureCallback<? super T> callback) {"
"MonoToListenableFutureAdapter.java:88"$0$0$0$1$38$"		this.registry.addCallback(callback);"
"MonoToListenableFutureAdapter.java:89"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:90"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:91"$0$0$0$1$10$"	@Override"
"MonoToListenableFutureAdapter.java:92"$0$0$0$9$87$"	public void addCallback(SuccessCallback<? super T> success, FailureCallback failure) {"
"MonoToListenableFutureAdapter.java:93"$0$0$0$1$44$"		this.registry.addSuccessCallback(success);"
"MonoToListenableFutureAdapter.java:94"$0$0$0$1$44$"		this.registry.addFailureCallback(failure);"
"MonoToListenableFutureAdapter.java:95"$0$0$0$1$2$"	}"
"MonoToListenableFutureAdapter.java:96"$0$0$0$0$0$""
"MonoToListenableFutureAdapter.java:97"$0$0$0$1$1$"}"
"MethodInvoker.java:1"$0$0$0$1$2$"/*"
"MethodInvoker.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"MethodInvoker.java:3"$0$0$0$1$2$" *"
"MethodInvoker.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MethodInvoker.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MethodInvoker.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MethodInvoker.java:7"$0$0$0$1$2$" *"
"MethodInvoker.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MethodInvoker.java:9"$0$0$0$1$2$" *"
"MethodInvoker.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MethodInvoker.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MethodInvoker.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MethodInvoker.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MethodInvoker.java:14"$0$0$0$5$33$" * limitations under the License."
"MethodInvoker.java:15"$0$0$0$1$3$" */"
"MethodInvoker.java:16"$0$0$0$0$0$""
"MethodInvoker.java:17"$0$0$0$2$33$"package org.springframework.util;"
"MethodInvoker.java:18"$0$0$0$0$0$""
"MethodInvoker.java:19"$1$0$0$2$51$"import java.lang.reflect.InvocationTargetException;"
"MethodInvoker.java:20"$0$0$0$2$32$"import java.lang.reflect.Method;"
"MethodInvoker.java:21"$0$0$0$2$34$"import java.lang.reflect.Modifier;"
"MethodInvoker.java:22"$0$0$0$0$0$""
"MethodInvoker.java:23"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MethodInvoker.java:24"$0$0$0$0$0$""
"MethodInvoker.java:25"$0$0$0$1$3$"/**"
"MethodInvoker.java:26"$0$0$0$14$78$" * Helper class that allows for specifying a method to invoke in a declarative"
"MethodInvoker.java:27"$0$0$0$7$39$" * fashion, be it static or non-static."
"MethodInvoker.java:28"$0$0$0$1$2$" *"
"MethodInvoker.java:29"$4$0$0$6$83$" * <p>Usage: Specify ""targetClass""/""targetMethod"" or ""targetObject""/""targetMethod"","
"MethodInvoker.java:30"$0$0$0$10$73$" * optionally specify arguments, prepare the invoker. Afterwards, you may"
"MethodInvoker.java:31"$0$0$0$12$74$" * invoke the method any number of times, obtaining the invocation result."
"MethodInvoker.java:32"$0$0$0$1$2$" *"
"MethodInvoker.java:33"$0$0$0$4$27$" * @author Colin Sampaleanu"
"MethodInvoker.java:34"$0$0$0$4$26$" * @author Juergen Hoeller"
"MethodInvoker.java:35"$0$0$0$3$20$" * @since 19.02.2004"
"MethodInvoker.java:36"$0$0$0$3$16$" * @see #prepare"
"MethodInvoker.java:37"$0$0$0$3$15$" * @see #invoke"
"MethodInvoker.java:38"$0$0$0$1$3$" */"
"MethodInvoker.java:39"$0$0$0$4$28$"public class MethodInvoker {"
"MethodInvoker.java:40"$0$0$0$0$0$""
"MethodInvoker.java:41"$0$0$0$8$63$"	private static final Object[] EMPTY_ARGUMENTS = new Object[0];"
"MethodInvoker.java:42"$0$0$0$0$0$""
"MethodInvoker.java:43"$0$0$0$0$0$""
"MethodInvoker.java:44"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:45"$1$0$0$3$32$"	protected Class<?> targetClass;"
"MethodInvoker.java:46"$0$0$0$0$0$""
"MethodInvoker.java:47"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:48"$1$0$0$3$29$"	private Object targetObject;"
"MethodInvoker.java:49"$0$0$0$0$0$""
"MethodInvoker.java:50"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:51"$1$0$0$3$29$"	private String targetMethod;"
"MethodInvoker.java:52"$0$0$0$0$0$""
"MethodInvoker.java:53"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:54"$0$0$0$3$29$"	private String staticMethod;"
"MethodInvoker.java:55"$0$0$0$0$0$""
"MethodInvoker.java:56"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:57"$0$0$0$3$28$"	private Object[] arguments;"
"MethodInvoker.java:58"$0$0$0$0$0$""
"MethodInvoker.java:59"$0$0$0$7$32$"	/** The method we will call. */"
"MethodInvoker.java:60"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:61"$0$0$0$3$29$"	private Method methodObject;"
"MethodInvoker.java:62"$0$0$0$0$0$""
"MethodInvoker.java:63"$0$0$0$0$0$""
"MethodInvoker.java:64"$0$0$0$1$4$"	/**"
"MethodInvoker.java:65"$2$0$0$12$60$"	 * Set the target class on which to call the target method."
"MethodInvoker.java:66"$1$0$0$10$58$"	 * Only necessary when the target method is static; else,"
"MethodInvoker.java:67"$1$0$0$9$49$"	 * a target object needs to be specified anyway."
"MethodInvoker.java:68"$1$0$0$3$25$"	 * @see #setTargetObject"
"MethodInvoker.java:69"$1$0$0$3$25$"	 * @see #setTargetMethod"
"MethodInvoker.java:70"$0$0$0$1$4$"	 */"
"MethodInvoker.java:71"$2$0$0$6$61$"	public void setTargetClass(@Nullable Class<?> targetClass) {"
"MethodInvoker.java:72"$2$0$0$3$33$"		this.targetClass = targetClass;"
"MethodInvoker.java:73"$0$0$0$1$2$"	}"
"MethodInvoker.java:74"$0$0$0$0$0$""
"MethodInvoker.java:75"$0$0$0$1$4$"	/**"
"MethodInvoker.java:76"$2$0$0$12$63$"	 * Return the target class on which to call the target method."
"MethodInvoker.java:77"$0$0$0$1$4$"	 */"
"MethodInvoker.java:78"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:79"$2$0$0$4$35$"	public Class<?> getTargetClass() {"
"MethodInvoker.java:80"$1$0$0$2$26$"		return this.targetClass;"
"MethodInvoker.java:81"$0$0$0$1$2$"	}"
"MethodInvoker.java:82"$0$0$0$0$0$""
"MethodInvoker.java:83"$0$0$0$1$4$"	/**"
"MethodInvoker.java:84"$2$0$0$12$61$"	 * Set the target object on which to call the target method."
"MethodInvoker.java:85"$1$0$0$10$56$"	 * Only necessary when the target method is not static;"
"MethodInvoker.java:86"$1$0$0$7$39$"	 * else, a target class is sufficient."
"MethodInvoker.java:87"$1$0$0$3$24$"	 * @see #setTargetClass"
"MethodInvoker.java:88"$1$0$0$3$25$"	 * @see #setTargetMethod"
"MethodInvoker.java:89"$0$0$0$1$4$"	 */"
"MethodInvoker.java:90"$2$0$0$6$61$"	public void setTargetObject(@Nullable Object targetObject) {"
"MethodInvoker.java:91"$2$0$0$3$35$"		this.targetObject = targetObject;"
"MethodInvoker.java:92"$1$0$0$5$29$"		if (targetObject != null) {"
"MethodInvoker.java:93"$3$0$0$3$46$"			this.targetClass = targetObject.getClass();"
"MethodInvoker.java:94"$0$0$0$1$3$"		}"
"MethodInvoker.java:95"$0$0$0$1$2$"	}"
"MethodInvoker.java:96"$0$0$0$0$0$""
"MethodInvoker.java:97"$0$0$0$1$4$"	/**"
"MethodInvoker.java:98"$2$0$0$12$64$"	 * Return the target object on which to call the target method."
"MethodInvoker.java:99"$0$0$0$1$4$"	 */"
"MethodInvoker.java:100"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:101"$2$0$0$4$34$"	public Object getTargetObject() {"
"MethodInvoker.java:102"$1$0$0$2$27$"		return this.targetObject;"
"MethodInvoker.java:103"$0$0$0$1$2$"	}"
"MethodInvoker.java:104"$0$0$0$0$0$""
"MethodInvoker.java:105"$0$0$0$1$4$"	/**"
"MethodInvoker.java:106"$0$0$0$10$45$"	 * Set the name of the method to be invoked."
"MethodInvoker.java:107"$0$0$0$11$60$"	 * Refers to either a static method or a non-static method,"
"MethodInvoker.java:108"$1$0$0$8$43$"	 * depending on a target object being set."
"MethodInvoker.java:109"$1$0$0$3$24$"	 * @see #setTargetClass"
"MethodInvoker.java:110"$1$0$0$3$25$"	 * @see #setTargetObject"
"MethodInvoker.java:111"$0$0$0$1$4$"	 */"
"MethodInvoker.java:112"$2$0$0$6$61$"	public void setTargetMethod(@Nullable String targetMethod) {"
"MethodInvoker.java:113"$2$0$0$3$35$"		this.targetMethod = targetMethod;"
"MethodInvoker.java:114"$0$0$0$1$2$"	}"
"MethodInvoker.java:115"$0$0$0$0$0$""
"MethodInvoker.java:116"$0$0$0$1$4$"	/**"
"MethodInvoker.java:117"$0$0$0$10$48$"	 * Return the name of the method to be invoked."
"MethodInvoker.java:118"$0$0$0$1$4$"	 */"
"MethodInvoker.java:119"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:120"$2$0$0$4$34$"	public String getTargetMethod() {"
"MethodInvoker.java:121"$1$0$0$2$27$"		return this.targetMethod;"
"MethodInvoker.java:122"$0$0$0$1$2$"	}"
"MethodInvoker.java:123"$0$0$0$0$0$""
"MethodInvoker.java:124"$0$0$0$1$4$"	/**"
"MethodInvoker.java:125"$0$0$0$10$55$"	 * Set a fully qualified static method name to invoke,"
"MethodInvoker.java:126"$0$0$0$3$50$"	 * e.g. ""example.MyExampleClass.myExampleMethod""."
"MethodInvoker.java:127"$2$0$0$8$70$"	 * Convenient alternative to specifying targetClass and targetMethod."
"MethodInvoker.java:128"$1$0$0$3$24$"	 * @see #setTargetClass"
"MethodInvoker.java:129"$1$0$0$3$25$"	 * @see #setTargetMethod"
"MethodInvoker.java:130"$0$0$0$1$4$"	 */"
"MethodInvoker.java:131"$0$0$0$5$51$"	public void setStaticMethod(String staticMethod) {"
"MethodInvoker.java:132"$0$0$0$3$35$"		this.staticMethod = staticMethod;"
"MethodInvoker.java:133"$0$0$0$1$2$"	}"
"MethodInvoker.java:134"$0$0$0$0$0$""
"MethodInvoker.java:135"$0$0$0$1$4$"	/**"
"MethodInvoker.java:136"$0$0$0$13$73$"	 * Set arguments for the method invocation. If this property is not set,"
"MethodInvoker.java:137"$0$0$0$16$78$"	 * or the Object array is of length 0, a method with no arguments is assumed."
"MethodInvoker.java:138"$0$0$0$1$4$"	 */"
"MethodInvoker.java:139"$0$0$0$5$48$"	public void setArguments(Object... arguments) {"
"MethodInvoker.java:140"$0$0$0$3$29$"		this.arguments = arguments;"
"MethodInvoker.java:141"$0$0$0$1$2$"	}"
"MethodInvoker.java:142"$0$0$0$0$0$""
"MethodInvoker.java:143"$0$0$0$1$4$"	/**"
"MethodInvoker.java:144"$0$0$0$8$51$"	 * Return the arguments for the method invocation."
"MethodInvoker.java:145"$0$0$0$1$4$"	 */"
"MethodInvoker.java:146"$1$0$0$4$33$"	public Object[] getArguments() {"
"MethodInvoker.java:147"$0$0$0$8$69$"		return (this.arguments != null ? this.arguments : EMPTY_ARGUMENTS);"
"MethodInvoker.java:148"$0$0$0$1$2$"	}"
"MethodInvoker.java:149"$0$0$0$0$0$""
"MethodInvoker.java:150"$0$0$0$0$0$""
"MethodInvoker.java:151"$0$0$0$1$4$"	/**"
"MethodInvoker.java:152"$0$0$0$5$33$"	 * Prepare the specified method."
"MethodInvoker.java:153"$0$0$0$11$61$"	 * The method can be invoked any number of times afterwards."
"MethodInvoker.java:154"$1$0$0$3$27$"	 * @see #getPreparedMethod"
"MethodInvoker.java:155"$0$0$0$3$16$"	 * @see #invoke"
"MethodInvoker.java:156"$0$0$0$1$4$"	 */"
"MethodInvoker.java:157"$0$0$0$7$77$"	public void prepare() throws ClassNotFoundException, NoSuchMethodException {"
"MethodInvoker.java:158"$0$0$0$5$34$"		if (this.staticMethod != null) {"
"MethodInvoker.java:159"$0$0$0$4$57$"			int lastDotIndex = this.staticMethod.lastIndexOf('.');"
"MethodInvoker.java:160"$0$0$0$9$74$"			if (lastDotIndex == -1 || lastDotIndex == this.staticMethod.length()) {"
"MethodInvoker.java:161"$0$0$0$3$39$"				throw new IllegalArgumentException("
"MethodInvoker.java:162"$0$0$0$12$73$"						""staticMethod must be a fully qualified class plus method name: "" +"
"MethodInvoker.java:163"$0$0$0$2$55$"						""e.g. 'example.MyExampleClass.myExampleMethod'"");"
"MethodInvoker.java:164"$0$0$0$1$4$"			}"
"MethodInvoker.java:165"$0$0$0$5$67$"			String className = this.staticMethod.substring(0, lastDotIndex);"
"MethodInvoker.java:166"$0$0$0$6$69$"			String methodName = this.staticMethod.substring(lastDotIndex + 1);"
"MethodInvoker.java:167"$1$0$0$3$50$"			this.targetClass = resolveClassName(className);"
"MethodInvoker.java:168"$1$0$0$3$34$"			this.targetMethod = methodName;"
"MethodInvoker.java:169"$0$0$0$1$3$"		}"
"MethodInvoker.java:170"$0$0$0$0$0$""
"MethodInvoker.java:171"$3$0$0$4$42$"		Class<?> targetClass = getTargetClass();"
"MethodInvoker.java:172"$3$0$0$4$42$"		String targetMethod = getTargetMethod();"
"MethodInvoker.java:173"$3$0$0$7$84$"		Assert.notNull(targetClass, ""Either 'targetClass' or 'targetObject' is required"");"
"MethodInvoker.java:174"$2$0$0$5$70$"		Assert.notNull(targetMethod, ""Property 'targetMethod' is required"");"
"MethodInvoker.java:175"$0$0$0$0$0$""
"MethodInvoker.java:176"$1$0$0$4$38$"		Object[] arguments = getArguments();"
"MethodInvoker.java:177"$0$0$0$5$55$"		Class<?>[] argTypes = new Class<?>[arguments.length];"
"MethodInvoker.java:178"$0$0$0$10$46$"		for (int i = 0; i < arguments.length; ++i) {"
"MethodInvoker.java:179"$1$0$0$9$81$"			argTypes[i] = (arguments[i] != null ? arguments[i].getClass() : Object.class);"
"MethodInvoker.java:180"$0$0$0$1$3$"		}"
"MethodInvoker.java:181"$0$0$0$0$0$""
"MethodInvoker.java:182"$1$0$1$8$39$"		// Try to get the exact method first."
"MethodInvoker.java:183"$0$0$0$2$7$"		try {"
"MethodInvoker.java:184"$3$0$0$4$69$"			this.methodObject = targetClass.getMethod(targetMethod, argTypes);"
"MethodInvoker.java:185"$0$0$0$1$3$"		}"
"MethodInvoker.java:186"$0$0$0$4$36$"		catch (NoSuchMethodException ex) {"
"MethodInvoker.java:187"$1$0$1$10$55$"			// Just rethrow exception if we can't get any match."
"MethodInvoker.java:188"$0$0$0$3$44$"			this.methodObject = findMatchingMethod();"
"MethodInvoker.java:189"$0$0$0$5$35$"			if (this.methodObject == null) {"
"MethodInvoker.java:190"$0$0$0$2$13$"				throw ex;"
"MethodInvoker.java:191"$0$0$0$1$4$"			}"
"MethodInvoker.java:192"$0$0$0$1$3$"		}"
"MethodInvoker.java:193"$0$0$0$1$2$"	}"
"MethodInvoker.java:194"$0$0$0$0$0$""
"MethodInvoker.java:195"$0$0$0$1$4$"	/**"
"MethodInvoker.java:196"$0$0$0$9$46$"	 * Resolve the given class name into a Class."
"MethodInvoker.java:197"$0$0$0$7$67$"	 * <p>The default implementations uses {@code ClassUtils.forName},"
"MethodInvoker.java:198"$0$0$0$7$42$"	 * using the thread context class loader."
"MethodInvoker.java:199"$0$0$0$8$46$"	 * @param className the class name to resolve"
"MethodInvoker.java:200"$0$0$0$5$30$"	 * @return the resolved Class"
"MethodInvoker.java:201"$0$0$0$9$64$"	 * @throws ClassNotFoundException if the class name was invalid"
"MethodInvoker.java:202"$0$0$0$1$4$"	 */"
"MethodInvoker.java:203"$0$0$0$7$86$"	protected Class<?> resolveClassName(String className) throws ClassNotFoundException {"
"MethodInvoker.java:204"$1$0$0$3$75$"		return ClassUtils.forName(className, ClassUtils.getDefaultClassLoader());"
"MethodInvoker.java:205"$0$0$0$1$2$"	}"
"MethodInvoker.java:206"$0$0$0$0$0$""
"MethodInvoker.java:207"$0$0$0$1$4$"	/**"
"MethodInvoker.java:208"$0$0$0$13$79$"	 * Find a matching method with the specified name for the specified arguments."
"MethodInvoker.java:209"$0$0$0$10$54$"	 * @return a matching method, or {@code null} if none"
"MethodInvoker.java:210"$2$0$0$3$26$"	 * @see #getTargetClass()"
"MethodInvoker.java:211"$2$0$0$3$27$"	 * @see #getTargetMethod()"
"MethodInvoker.java:212"$1$0$0$3$24$"	 * @see #getArguments()"
"MethodInvoker.java:213"$0$0$0$1$4$"	 */"
"MethodInvoker.java:214"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:215"$0$0$0$4$40$"	protected Method findMatchingMethod() {"
"MethodInvoker.java:216"$3$0$0$4$42$"		String targetMethod = getTargetMethod();"
"MethodInvoker.java:217"$1$0$0$4$38$"		Object[] arguments = getArguments();"
"MethodInvoker.java:218"$0$0$0$4$34$"		int argCount = arguments.length;"
"MethodInvoker.java:219"$0$0$0$0$0$""
"MethodInvoker.java:220"$3$0$0$4$42$"		Class<?> targetClass = getTargetClass();"
"MethodInvoker.java:221"$2$0$0$7$59$"		Assert.state(targetClass != null, ""No target class set"");"
"MethodInvoker.java:222"$2$0$0$4$75$"		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(targetClass);"
"MethodInvoker.java:223"$0$0$0$4$44$"		int minTypeDiffWeight = Integer.MAX_VALUE;"
"MethodInvoker.java:224"$0$0$0$4$31$"		Method matchingMethod = null;"
"MethodInvoker.java:225"$0$0$0$0$0$""
"MethodInvoker.java:226"$0$0$0$6$39$"		for (Method candidate : candidates) {"
"MethodInvoker.java:227"$2$0$0$3$50$"			if (candidate.getName().equals(targetMethod)) {"
"MethodInvoker.java:228"$1$0$0$5$52$"				if (candidate.getParameterCount() == argCount) {"
"MethodInvoker.java:229"$1$0$0$4$59$"					Class<?>[] paramTypes = candidate.getParameterTypes();"
"MethodInvoker.java:230"$1$0$0$5$73$"					int typeDiffWeight = getTypeDifferenceWeight(paramTypes, arguments);"
"MethodInvoker.java:231"$0$0$0$5$46$"					if (typeDiffWeight < minTypeDiffWeight) {"
"MethodInvoker.java:232"$0$0$0$3$41$"						minTypeDiffWeight = typeDiffWeight;"
"MethodInvoker.java:233"$0$0$0$3$33$"						matchingMethod = candidate;"
"MethodInvoker.java:234"$0$0$0$1$6$"					}"
"MethodInvoker.java:235"$0$0$0$1$5$"				}"
"MethodInvoker.java:236"$0$0$0$1$4$"			}"
"MethodInvoker.java:237"$0$0$0$1$3$"		}"
"MethodInvoker.java:238"$0$0$0$0$0$""
"MethodInvoker.java:239"$0$0$0$2$24$"		return matchingMethod;"
"MethodInvoker.java:240"$0$0$0$1$2$"	}"
"MethodInvoker.java:241"$0$0$0$0$0$""
"MethodInvoker.java:242"$0$0$0$1$4$"	/**"
"MethodInvoker.java:243"$0$0$0$10$59$"	 * Return the prepared Method object that will be invoked."
"MethodInvoker.java:244"$0$0$0$11$60$"	 * <p>Can for example be used to determine the return type."
"MethodInvoker.java:245"$0$0$0$9$59$"	 * @return the prepared Method object (never {@code null})"
"MethodInvoker.java:246"$0$0$0$10$73$"	 * @throws IllegalStateException if the invoker hasn't been prepared yet"
"MethodInvoker.java:247"$0$0$0$3$17$"	 * @see #prepare"
"MethodInvoker.java:248"$0$0$0$3$16$"	 * @see #invoke"
"MethodInvoker.java:249"$0$0$0$1$4$"	 */"
"MethodInvoker.java:250"$1$0$0$6$65$"	public Method getPreparedMethod() throws IllegalStateException {"
"MethodInvoker.java:251"$0$0$0$5$34$"		if (this.methodObject == null) {"
"MethodInvoker.java:252"$0$0$0$11$98$"			throw new IllegalStateException(""prepare() must be called prior to invoke() on MethodInvoker"");"
"MethodInvoker.java:253"$0$0$0$1$3$"		}"
"MethodInvoker.java:254"$0$0$0$2$27$"		return this.methodObject;"
"MethodInvoker.java:255"$0$0$0$1$2$"	}"
"MethodInvoker.java:256"$0$0$0$0$0$""
"MethodInvoker.java:257"$0$0$0$1$4$"	/**"
"MethodInvoker.java:258"$0$0$0$9$58$"	 * Return whether this invoker has been prepared already,"
"MethodInvoker.java:259"$1$0$0$10$74$"	 * i.e. whether it allows access to {@link #getPreparedMethod()} already."
"MethodInvoker.java:260"$0$0$0$1$4$"	 */"
"MethodInvoker.java:261"$0$0$0$4$30$"	public boolean isPrepared() {"
"MethodInvoker.java:262"$0$0$0$4$37$"		return (this.methodObject != null);"
"MethodInvoker.java:263"$0$0$0$1$2$"	}"
"MethodInvoker.java:264"$0$0$0$0$0$""
"MethodInvoker.java:265"$0$0$0$1$4$"	/**"
"MethodInvoker.java:266"$0$0$0$5$32$"	 * Invoke the specified method."
"MethodInvoker.java:267"$0$0$0$9$54$"	 * <p>The invoker needs to have been prepared before."
"MethodInvoker.java:268"$0$0$0$11$73$"	 * @return the object (possibly null) returned by the method invocation,"
"MethodInvoker.java:269"$0$0$0$12$56$"	 * or {@code null} if the method has a void return type"
"MethodInvoker.java:270"$2$0$0$10$77$"	 * @throws InvocationTargetException if the target method threw an exception"
"MethodInvoker.java:271"$1$0$0$10$76$"	 * @throws IllegalAccessException if the target method couldn't be accessed"
"MethodInvoker.java:272"$0$0$0$3$17$"	 * @see #prepare"
"MethodInvoker.java:273"$0$0$0$1$4$"	 */"
"MethodInvoker.java:274"$0$0$0$1$10$"	@Nullable"
"MethodInvoker.java:275"$1$0$0$7$82$"	public Object invoke() throws InvocationTargetException, IllegalAccessException {"
"MethodInvoker.java:276"$1$0$1$11$60$"		// In the static case, target will simply be {@code null}."
"MethodInvoker.java:277"$3$0$0$4$42$"		Object targetObject = getTargetObject();"
"MethodInvoker.java:278"$1$0$0$4$46$"		Method preparedMethod = getPreparedMethod();"
"MethodInvoker.java:279"$2$0$0$7$82$"		if (targetObject == null && !Modifier.isStatic(preparedMethod.getModifiers())) {"
"MethodInvoker.java:280"$2$0$0$11$95$"			throw new IllegalArgumentException(""Target method must not be non-static without a target"");"
"MethodInvoker.java:281"$0$0$0$1$3$"		}"
"MethodInvoker.java:282"$0$0$0$1$49$"		ReflectionUtils.makeAccessible(preparedMethod);"
"MethodInvoker.java:283"$2$0$0$3$61$"		return preparedMethod.invoke(targetObject, getArguments());"
"MethodInvoker.java:284"$0$0$0$1$2$"	}"
"MethodInvoker.java:285"$0$0$0$0$0$""
"MethodInvoker.java:286"$0$0$0$0$0$""
"MethodInvoker.java:287"$0$0$0$1$4$"	/**"
"MethodInvoker.java:288"$0$0$0$15$94$"	 * Algorithm that judges the match between the declared parameter types of a candidate method"
"MethodInvoker.java:289"$0$0$0$16$85$"	 * and a specific list of arguments that this method is supposed to be invoked with."
"MethodInvoker.java:290"$0$0$0$13$91$"	 * <p>Determines a weight that represents the class hierarchy difference between types and"
"MethodInvoker.java:291"$0$0$0$16$91$"	 * arguments. A direct match, i.e. type Integer -> arg of class Integer, does not increase"
"MethodInvoker.java:292"$0$0$0$18$90$"	 * the result - all direct matches means weight 0. A match between type Object and arg of"
"MethodInvoker.java:293"$0$0$0$18$89$"	 * class Integer would increase the weight by 2, due to the superclass 2 steps up in the"
"MethodInvoker.java:294"$0$0$0$15$91$"	 * hierarchy (i.e. Object) being the last one that still matches the required type Object."
"MethodInvoker.java:295"$0$0$0$16$88$"	 * Type Number and class Integer would increase the weight by 1 accordingly, due to the"
"MethodInvoker.java:296"$0$0$0$15$93$"	 * superclass 1 step up the hierarchy (i.e. Number) still matching the required type Number."
"MethodInvoker.java:297"$0$0$0$16$91$"	 * Therefore, with an arg of type Integer, a constructor (Integer) would be preferred to a"
"MethodInvoker.java:298"$0$0$0$13$84$"	 * constructor (Number) which would in turn be preferred to a constructor (Object)."
"MethodInvoker.java:299"$1$0$0$6$41$"	 * All argument weights get accumulated."
"MethodInvoker.java:300"$0$0$0$14$86$"	 * <p>Note: This is the algorithm used by MethodInvoker itself and also the algorithm"
"MethodInvoker.java:301"$0$0$0$14$89$"	 * used for constructor and factory method selection in Spring's bean container (in case"
"MethodInvoker.java:302"$0$0$0$13$89$"	 * of lenient constructor resolution which is the default for regular bean definitions)."
"MethodInvoker.java:303"$0$0$0$8$50$"	 * @param paramTypes the parameter types to match"
"MethodInvoker.java:304"$0$0$0$7$38$"	 * @param args the arguments to match"
"MethodInvoker.java:305"$0$0$0$8$52$"	 * @return the accumulated weight for all arguments"
"MethodInvoker.java:306"$0$0$0$1$4$"	 */"
"MethodInvoker.java:307"$1$0$0$8$82$"	public static int getTypeDifferenceWeight(Class<?>[] paramTypes, Object[] args) {"
"MethodInvoker.java:308"$0$0$0$4$17$"		int result = 0;"
"MethodInvoker.java:309"$0$0$0$10$47$"		for (int i = 0; i < paramTypes.length; i++) {"
"MethodInvoker.java:310"$0$0$0$4$63$"			if (!ClassUtils.isAssignableValue(paramTypes[i], args[i])) {"
"MethodInvoker.java:311"$0$0$0$2$29$"				return Integer.MAX_VALUE;"
"MethodInvoker.java:312"$0$0$0$1$4$"			}"
"MethodInvoker.java:313"$0$0$0$5$25$"			if (args[i] != null) {"
"MethodInvoker.java:314"$0$0$0$4$39$"				Class<?> paramType = paramTypes[i];"
"MethodInvoker.java:315"$2$0$0$4$61$"				Class<?> superClass = args[i].getClass().getSuperclass();"
"MethodInvoker.java:316"$0$0$0$5$32$"				while (superClass != null) {"
"MethodInvoker.java:317"$0$0$0$3$40$"					if (paramType.equals(superClass)) {"
"MethodInvoker.java:318"$0$0$0$5$26$"						result = result + 2;"
"MethodInvoker.java:319"$0$0$0$3$24$"						superClass = null;"
"MethodInvoker.java:320"$0$0$0$1$6$"					}"
"MethodInvoker.java:321"$0$0$0$5$63$"					else if (ClassUtils.isAssignable(paramType, superClass)) {"
"MethodInvoker.java:322"$0$0$0$5$26$"						result = result + 2;"
"MethodInvoker.java:323"$1$0$0$3$46$"						superClass = superClass.getSuperclass();"
"MethodInvoker.java:324"$0$0$0$1$6$"					}"
"MethodInvoker.java:325"$0$0$0$2$11$"					else {"
"MethodInvoker.java:326"$0$0$0$3$24$"						superClass = null;"
"MethodInvoker.java:327"$0$0$0$1$6$"					}"
"MethodInvoker.java:328"$0$0$0$1$5$"				}"
"MethodInvoker.java:329"$0$0$0$3$34$"				if (paramType.isInterface()) {"
"MethodInvoker.java:330"$0$0$0$5$25$"					result = result + 1;"
"MethodInvoker.java:331"$0$0$0$1$5$"				}"
"MethodInvoker.java:332"$0$0$0$1$4$"			}"
"MethodInvoker.java:333"$0$0$0$1$3$"		}"
"MethodInvoker.java:334"$0$0$0$2$16$"		return result;"
"MethodInvoker.java:335"$0$0$0$1$2$"	}"
"MethodInvoker.java:336"$0$0$0$0$0$""
"MethodInvoker.java:337"$0$0$0$1$1$"}"
"Conventions.java:1"$0$0$0$1$2$"/*"
"Conventions.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"Conventions.java:3"$0$0$0$1$2$" *"
"Conventions.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"Conventions.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"Conventions.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"Conventions.java:7"$0$0$0$1$2$" *"
"Conventions.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"Conventions.java:9"$0$0$0$1$2$" *"
"Conventions.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"Conventions.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"Conventions.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"Conventions.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"Conventions.java:14"$0$0$0$5$33$" * limitations under the License."
"Conventions.java:15"$0$0$0$1$3$" */"
"Conventions.java:16"$0$0$0$0$0$""
"Conventions.java:17"$0$0$0$2$33$"package org.springframework.core;"
"Conventions.java:18"$0$0$0$0$0$""
"Conventions.java:19"$0$0$0$2$32$"import java.lang.reflect.Method;"
"Conventions.java:20"$0$0$0$2$31$"import java.lang.reflect.Proxy;"
"Conventions.java:21"$0$0$0$2$28$"import java.util.Collection;"
"Conventions.java:22"$0$0$0$2$26$"import java.util.Iterator;"
"Conventions.java:23"$0$0$0$0$0$""
"Conventions.java:24"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"Conventions.java:25"$0$0$0$2$39$"import org.springframework.util.Assert;"
"Conventions.java:26"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"Conventions.java:27"$0$0$0$0$0$""
"Conventions.java:28"$0$0$0$1$3$"/**"
"Conventions.java:29"$0$0$0$11$72$" * Provides methods to support various naming and other conventions used"
"Conventions.java:30"$0$0$0$11$74$" * throughout the framework. Mainly for internal use within the framework."
"Conventions.java:31"$0$0$0$1$2$" *"
"Conventions.java:32"$0$0$0$4$21$" * @author Rob Harrop"
"Conventions.java:33"$0$0$0$4$26$" * @author Juergen Hoeller"
"Conventions.java:34"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"Conventions.java:35"$0$0$0$3$13$" * @since 2.0"
"Conventions.java:36"$0$0$0$1$3$" */"
"Conventions.java:37"$0$0$0$5$32$"public final class Conventions {"
"Conventions.java:38"$0$0$0$0$0$""
"Conventions.java:39"$0$0$0$1$4$"	/**"
"Conventions.java:40"$0$0$0$8$44$"	 * Suffix added to names when using arrays."
"Conventions.java:41"$0$0$0$1$4$"	 */"
"Conventions.java:42"$0$0$0$7$52$"	private static final String PLURAL_SUFFIX = ""List"";"
"Conventions.java:43"$0$0$0$0$0$""
"Conventions.java:44"$0$0$0$0$0$""
"Conventions.java:45"$0$0$0$3$24$"	private Conventions() {"
"Conventions.java:46"$0$0$0$1$2$"	}"
"Conventions.java:47"$0$0$0$0$0$""
"Conventions.java:48"$0$0$0$0$0$""
"Conventions.java:49"$0$0$0$1$4$"	/**"
"Conventions.java:50"$0$0$0$11$76$"	 * Determine the conventional variable name for the supplied {@code Object}"
"Conventions.java:51"$0$0$0$13$68$"	 * based on its concrete type. The convention used is to return the"
"Conventions.java:52"$0$0$0$11$74$"	 * un-capitalized short name of the {@code Class}, according to JavaBeans"
"Conventions.java:53"$0$0$0$4$26$"	 * property naming rules."
"Conventions.java:54"$0$0$0$3$23$"	 * <p>For example:<br>"
"Conventions.java:55"$0$0$0$6$59$"	 * {@code com.myapp.Product} becomes {@code ""product""}<br>"
"Conventions.java:56"$0$0$0$6$63$"	 * {@code com.myapp.MyProduct} becomes {@code ""myProduct""}<br>"
"Conventions.java:57"$0$0$0$6$63$"	 * {@code com.myapp.UKProduct} becomes {@code ""UKProduct""}<br>"
"Conventions.java:58"$0$0$0$13$77$"	 * <p>For arrays the pluralized version of the array component type is used."
"Conventions.java:59"$0$0$0$13$75$"	 * For {@code Collection}s an attempt is made to 'peek ahead' to determine"
"Conventions.java:60"$0$0$0$9$57$"	 * the component type and return its pluralized version."
"Conventions.java:61"$0$0$0$11$58$"	 * @param value the value to generate a variable name for"
"Conventions.java:62"$0$0$0$6$39$"	 * @return the generated variable name"
"Conventions.java:63"$0$0$0$1$4$"	 */"
"Conventions.java:64"$1$0$0$6$53$"	public static String getVariableName(Object value) {"
"Conventions.java:65"$0$0$0$6$50$"		Assert.notNull(value, ""Value must not be null"");"
"Conventions.java:66"$0$0$0$2$22$"		Class<?> valueClass;"
"Conventions.java:67"$0$0$0$4$28$"		boolean pluralize = false;"
"Conventions.java:68"$0$0$0$0$0$""
"Conventions.java:69"$1$0$0$3$35$"		if (value.getClass().isArray()) {"
"Conventions.java:70"$2$0$0$3$52$"			valueClass = value.getClass().getComponentType();"
"Conventions.java:71"$0$0$0$3$20$"			pluralize = true;"
"Conventions.java:72"$0$0$0$1$3$"		}"
"Conventions.java:73"$0$0$0$6$41$"		else if (value instanceof Collection) {"
"Conventions.java:74"$0$0$0$5$52$"			Collection<?> collection = (Collection<?>) value;"
"Conventions.java:75"$0$0$0$3$30$"			if (collection.isEmpty()) {"
"Conventions.java:76"$0$0$0$3$39$"				throw new IllegalArgumentException("
"Conventions.java:77"$0$0$0$8$63$"						""Cannot generate variable name for an empty Collection"");"
"Conventions.java:78"$0$0$0$1$4$"			}"
"Conventions.java:79"$0$0$0$4$47$"			Object valueToCheck = peekAhead(collection);"
"Conventions.java:80"$1$0$0$3$47$"			valueClass = getClassForValue(valueToCheck);"
"Conventions.java:81"$0$0$0$3$20$"			pluralize = true;"
"Conventions.java:82"$0$0$0$1$3$"		}"
"Conventions.java:83"$0$0$0$2$8$"		else {"
"Conventions.java:84"$1$0$0$3$40$"			valueClass = getClassForValue(value);"
"Conventions.java:85"$0$0$0$1$3$"		}"
"Conventions.java:86"$0$0$0$0$0$""
"Conventions.java:87"$1$0$0$4$62$"		String name = ClassUtils.getShortNameAsProperty(valueClass);"
"Conventions.java:88"$0$0$0$6$46$"		return (pluralize ? pluralize(name) : name);"
"Conventions.java:89"$0$0$0$1$2$"	}"
"Conventions.java:90"$0$0$0$0$0$""
"Conventions.java:91"$0$0$0$1$4$"	/**"
"Conventions.java:92"$0$0$0$11$75$"	 * Determine the conventional variable name for the given parameter taking"
"Conventions.java:93"$0$0$0$9$54$"	 * the generic collection type, if any, into account."
"Conventions.java:94"$0$0$0$9$57$"	 * <p>As of 5.0 this method supports reactive types:<br>"
"Conventions.java:95"$0$0$0$6$69$"	 * {@code Mono<com.myapp.Product>} becomes {@code ""productMono""}<br>"
"Conventions.java:96"$0$0$0$6$73$"	 * {@code Flux<com.myapp.MyProduct>} becomes {@code ""myProductFlux""}<br>"
"Conventions.java:97"$0$0$0$6$85$"	 * {@code Observable<com.myapp.MyProduct>} becomes {@code ""myProductObservable""}<br>"
"Conventions.java:98"$0$0$0$8$56$"	 * @param parameter the method or constructor parameter"
"Conventions.java:99"$0$0$0$6$39$"	 * @return the generated variable name"
"Conventions.java:100"$0$0$0$1$4$"	 */"
"Conventions.java:101"$1$0$0$6$78$"	public static String getVariableNameForParameter(MethodParameter parameter) {"
"Conventions.java:102"$0$0$0$6$64$"		Assert.notNull(parameter, ""MethodParameter must not be null"");"
"Conventions.java:103"$0$0$0$2$22$"		Class<?> valueClass;"
"Conventions.java:104"$0$0$0$4$28$"		boolean pluralize = false;"
"Conventions.java:105"$0$0$0$4$29$"		String reactiveSuffix = """";"
"Conventions.java:106"$0$0$0$0$0$""
"Conventions.java:107"$1$0$0$3$47$"		if (parameter.getParameterType().isArray()) {"
"Conventions.java:108"$2$0$0$3$64$"			valueClass = parameter.getParameterType().getComponentType();"
"Conventions.java:109"$0$0$0$3$20$"			pluralize = true;"
"Conventions.java:110"$0$0$0$1$3$"		}"
"Conventions.java:111"$1$0$0$4$77$"		else if (Collection.class.isAssignableFrom(parameter.getParameterType())) {"
"Conventions.java:112"$0$0$0$3$93$"			valueClass = ResolvableType.forMethodParameter(parameter).asCollection().resolveGeneric();"
"Conventions.java:113"$0$0$0$5$28$"			if (valueClass == null) {"
"Conventions.java:114"$0$0$0$3$39$"				throw new IllegalArgumentException("
"Conventions.java:115"$0$0$0$9$79$"						""Cannot generate variable name for non-typed Collection parameter type"");"
"Conventions.java:116"$0$0$0$1$4$"			}"
"Conventions.java:117"$0$0$0$3$20$"			pluralize = true;"
"Conventions.java:118"$0$0$0$1$3$"		}"
"Conventions.java:119"$0$0$0$2$8$"		else {"
"Conventions.java:120"$1$0$0$3$45$"			valueClass = parameter.getParameterType();"
"Conventions.java:121"$2$0$0$4$96$"			ReactiveAdapter adapter = ReactiveAdapterRegistry.getSharedInstance().getAdapter(valueClass);"
"Conventions.java:122"$1$0$0$7$65$"			if (adapter != null && !adapter.getDescriptor().isNoValue()) {"
"Conventions.java:123"$1$0$0$3$57$"				reactiveSuffix = ClassUtils.getShortName(valueClass);"
"Conventions.java:124"$1$0$0$3$61$"				valueClass = parameter.nested().getNestedParameterType();"
"Conventions.java:125"$0$0$0$1$4$"			}"
"Conventions.java:126"$0$0$0$1$3$"		}"
"Conventions.java:127"$0$0$0$0$0$""
"Conventions.java:128"$1$0$0$4$62$"		String name = ClassUtils.getShortNameAsProperty(valueClass);"
"Conventions.java:129"$0$0$0$8$63$"		return (pluralize ? pluralize(name) : name + reactiveSuffix);"
"Conventions.java:130"$0$0$0$1$2$"	}"
"Conventions.java:131"$0$0$0$0$0$""
"Conventions.java:132"$0$0$0$1$4$"	/**"
"Conventions.java:133"$0$0$0$12$71$"	 * Determine the conventional variable name for the return type of the"
"Conventions.java:134"$0$0$0$12$75$"	 * given method, taking the generic collection type, if any, into account."
"Conventions.java:135"$0$0$0$11$60$"	 * @param method the method to generate a variable name for"
"Conventions.java:136"$0$0$0$6$39$"	 * @return the generated variable name"
"Conventions.java:137"$0$0$0$1$4$"	 */"
"Conventions.java:138"$1$0$0$6$67$"	public static String getVariableNameForReturnType(Method method) {"
"Conventions.java:139"$2$0$0$4$76$"		return getVariableNameForReturnType(method, method.getReturnType(), null);"
"Conventions.java:140"$0$0$0$1$2$"	}"
"Conventions.java:141"$0$0$0$0$0$""
"Conventions.java:142"$0$0$0$1$4$"	/**"
"Conventions.java:143"$0$0$0$13$77$"	 * Determine the conventional variable name for the return type of the given"
"Conventions.java:144"$0$0$0$12$77$"	 * method, taking the generic collection type, if any, into account, falling"
"Conventions.java:145"$0$0$0$14$74$"	 * back on the given actual return value if the method declaration is not"
"Conventions.java:146"$0$0$0$11$75$"	 * specific enough, e.g. {@code Object} return type or untyped collection."
"Conventions.java:147"$0$0$0$11$60$"	 * @param method the method to generate a variable name for"
"Conventions.java:148"$0$0$0$13$72$"	 * @param value the return value (may be {@code null} if not available)"
"Conventions.java:149"$0$0$0$6$39$"	 * @return the generated variable name"
"Conventions.java:150"$0$0$0$1$4$"	 */"
"Conventions.java:151"$1$0$0$9$91$"	public static String getVariableNameForReturnType(Method method, @Nullable Object value) {"
"Conventions.java:152"$2$0$0$4$77$"		return getVariableNameForReturnType(method, method.getReturnType(), value);"
"Conventions.java:153"$0$0$0$1$2$"	}"
"Conventions.java:154"$0$0$0$0$0$""
"Conventions.java:155"$0$0$0$1$4$"	/**"
"Conventions.java:156"$0$0$0$13$77$"	 * Determine the conventional variable name for the return type of the given"
"Conventions.java:157"$0$0$0$12$77$"	 * method, taking the generic collection type, if any, into account, falling"
"Conventions.java:158"$0$0$0$14$76$"	 * back on the given return value if the method declaration is not specific"
"Conventions.java:159"$0$0$0$10$66$"	 * enough, e.g. {@code Object} return type or untyped collection."
"Conventions.java:160"$0$0$0$9$57$"	 * <p>As of 5.0 this method supports reactive types:<br>"
"Conventions.java:161"$0$0$0$6$69$"	 * {@code Mono<com.myapp.Product>} becomes {@code ""productMono""}<br>"
"Conventions.java:162"$0$0$0$6$73$"	 * {@code Flux<com.myapp.MyProduct>} becomes {@code ""myProductFlux""}<br>"
"Conventions.java:163"$0$0$0$6$85$"	 * {@code Observable<com.myapp.MyProduct>} becomes {@code ""myProductObservable""}<br>"
"Conventions.java:164"$0$0$0$11$60$"	 * @param method the method to generate a variable name for"
"Conventions.java:165"$0$0$0$10$62$"	 * @param resolvedType the resolved return type of the method"
"Conventions.java:166"$0$0$0$13$72$"	 * @param value the return value (may be {@code null} if not available)"
"Conventions.java:167"$0$0$0$6$39$"	 * @return the generated variable name"
"Conventions.java:168"$0$0$0$1$4$"	 */"
"Conventions.java:169"$1$0$0$11$114$"	public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, @Nullable Object value) {"
"Conventions.java:170"$0$0$0$6$52$"		Assert.notNull(method, ""Method must not be null"");"
"Conventions.java:171"$0$0$0$0$0$""
"Conventions.java:172"$0$0$0$5$37$"		if (Object.class == resolvedType) {"
"Conventions.java:173"$0$0$0$5$23$"			if (value == null) {"
"Conventions.java:174"$0$0$0$3$39$"				throw new IllegalArgumentException("
"Conventions.java:175"$0$0$0$12$81$"						""Cannot generate variable name for an Object return type with null value"");"
"Conventions.java:176"$0$0$0$1$4$"			}"
"Conventions.java:177"$1$0$0$2$33$"			return getVariableName(value);"
"Conventions.java:178"$0$0$0$1$3$"		}"
"Conventions.java:179"$0$0$0$0$0$""
"Conventions.java:180"$0$0$0$2$22$"		Class<?> valueClass;"
"Conventions.java:181"$0$0$0$4$28$"		boolean pluralize = false;"
"Conventions.java:182"$0$0$0$4$29$"		String reactiveSuffix = """";"
"Conventions.java:183"$0$0$0$0$0$""
"Conventions.java:184"$0$0$0$3$31$"		if (resolvedType.isArray()) {"
"Conventions.java:185"$1$0$0$3$48$"			valueClass = resolvedType.getComponentType();"
"Conventions.java:186"$0$0$0$3$20$"			pluralize = true;"
"Conventions.java:187"$0$0$0$1$3$"		}"
"Conventions.java:188"$0$0$0$4$61$"		else if (Collection.class.isAssignableFrom(resolvedType)) {"
"Conventions.java:189"$0$0$0$3$91$"			valueClass = ResolvableType.forMethodReturnType(method).asCollection().resolveGeneric();"
"Conventions.java:190"$0$0$0$5$28$"			if (valueClass == null) {"
"Conventions.java:191"$0$0$0$5$41$"				if (!(value instanceof Collection)) {"
"Conventions.java:192"$0$0$0$8$74$"					throw new IllegalArgumentException(""Cannot generate variable name "" +"
"Conventions.java:193"$0$0$0$9$74$"							""for non-typed Collection return type and a non-Collection value"");"
"Conventions.java:194"$0$0$0$1$5$"				}"
"Conventions.java:195"$0$0$0$5$53$"				Collection<?> collection = (Collection<?>) value;"
"Conventions.java:196"$0$0$0$3$31$"				if (collection.isEmpty()) {"
"Conventions.java:197"$0$0$0$8$74$"					throw new IllegalArgumentException(""Cannot generate variable name "" +"
"Conventions.java:198"$0$0$0$10$77$"							""for non-typed Collection return type and an empty Collection value"");"
"Conventions.java:199"$0$0$0$1$5$"				}"
"Conventions.java:200"$0$0$0$4$48$"				Object valueToCheck = peekAhead(collection);"
"Conventions.java:201"$1$0$0$3$48$"				valueClass = getClassForValue(valueToCheck);"
"Conventions.java:202"$0$0$0$1$4$"			}"
"Conventions.java:203"$0$0$0$3$20$"			pluralize = true;"
"Conventions.java:204"$0$0$0$1$3$"		}"
"Conventions.java:205"$0$0$0$2$8$"		else {"
"Conventions.java:206"$0$0$0$3$29$"			valueClass = resolvedType;"
"Conventions.java:207"$2$0$0$4$96$"			ReactiveAdapter adapter = ReactiveAdapterRegistry.getSharedInstance().getAdapter(valueClass);"
"Conventions.java:208"$1$0$0$7$65$"			if (adapter != null && !adapter.getDescriptor().isNoValue()) {"
"Conventions.java:209"$1$0$0$3$57$"				reactiveSuffix = ClassUtils.getShortName(valueClass);"
"Conventions.java:210"$1$0$0$3$83$"				valueClass = ResolvableType.forMethodReturnType(method).getGeneric().toClass();"
"Conventions.java:211"$0$0$0$1$4$"			}"
"Conventions.java:212"$0$0$0$1$3$"		}"
"Conventions.java:213"$0$0$0$0$0$""
"Conventions.java:214"$1$0$0$4$62$"		String name = ClassUtils.getShortNameAsProperty(valueClass);"
"Conventions.java:215"$0$0$0$8$63$"		return (pluralize ? pluralize(name) : name + reactiveSuffix);"
"Conventions.java:216"$0$0$0$1$2$"	}"
"Conventions.java:217"$0$0$0$0$0$""
"Conventions.java:218"$0$0$0$1$4$"	/**"
"Conventions.java:219"$0$0$0$11$77$"	 * Convert {@code String}s in attribute name format (e.g. lowercase, hyphens"
"Conventions.java:220"$0$0$0$10$73$"	 * separating words) into property name format (camel-case). For example"
"Conventions.java:221"$0$0$0$6$69$"	 * {@code transaction-manager} becomes {@code ""transactionManager""}."
"Conventions.java:222"$0$0$0$1$4$"	 */"
"Conventions.java:223"$0$0$0$6$73$"	public static String attributeNameToPropertyName(String attributeName) {"
"Conventions.java:224"$0$0$0$6$68$"		Assert.notNull(attributeName, ""'attributeName' must not be null"");"
"Conventions.java:225"$0$0$0$3$37$"		if (!attributeName.contains(""-"")) {"
"Conventions.java:226"$0$0$0$2$24$"			return attributeName;"
"Conventions.java:227"$0$0$0$1$3$"		}"
"Conventions.java:228"$0$0$0$4$45$"		char[] chars = attributeName.toCharArray();"
"Conventions.java:229"$0$0$0$13$86$"		char[] result = new char[chars.length -1]; // not completely accurate but good guess"
"Conventions.java:230"$0$0$0$4$18$"		int currPos = 0;"
"Conventions.java:231"$0$0$0$4$32$"		boolean upperCaseNext = false;"
"Conventions.java:232"$0$0$0$6$24$"		for (char c : chars) {"
"Conventions.java:233"$0$0$0$5$18$"			if (c == '-') {"
"Conventions.java:234"$0$0$0$3$25$"				upperCaseNext = true;"
"Conventions.java:235"$0$0$0$1$4$"			}"
"Conventions.java:236"$0$0$0$4$28$"			else if (upperCaseNext) {"
"Conventions.java:237"$0$0$0$3$49$"				result[currPos++] = Character.toUpperCase(c);"
"Conventions.java:238"$0$0$0$3$26$"				upperCaseNext = false;"
"Conventions.java:239"$0$0$0$1$4$"			}"
"Conventions.java:240"$0$0$0$2$9$"			else {"
"Conventions.java:241"$0$0$0$3$26$"				result[currPos++] = c;"
"Conventions.java:242"$0$0$0$1$4$"			}"
"Conventions.java:243"$0$0$0$1$3$"		}"
"Conventions.java:244"$0$0$0$5$40$"		return new String(result, 0, currPos);"
"Conventions.java:245"$0$0$0$1$2$"	}"
"Conventions.java:246"$0$0$0$0$0$""
"Conventions.java:247"$0$0$0$1$4$"	/**"
"Conventions.java:248"$0$0$0$12$76$"	 * Return an attribute name qualified by the given enclosing {@link Class}."
"Conventions.java:249"$0$0$0$12$75$"	 * For example the attribute name '{@code foo}' qualified by {@link Class}"
"Conventions.java:250"$0$0$0$7$76$"	 * '{@code com.myapp.SomeClass}' would be '{@code com.myapp.SomeClass.foo}'"
"Conventions.java:251"$0$0$0$1$4$"	 */"
"Conventions.java:252"$1$0$0$8$96$"	public static String getQualifiedAttributeName(Class<?> enclosingClass, String attributeName) {"
"Conventions.java:253"$0$0$0$6$70$"		Assert.notNull(enclosingClass, ""'enclosingClass' must not be null"");"
"Conventions.java:254"$0$0$0$6$68$"		Assert.notNull(attributeName, ""'attributeName' must not be null"");"
"Conventions.java:255"$1$0$0$6$56$"		return enclosingClass.getName() + '.' + attributeName;"
"Conventions.java:256"$0$0$0$1$2$"	}"
"Conventions.java:257"$0$0$0$0$0$""
"Conventions.java:258"$0$0$0$0$0$""
"Conventions.java:259"$0$0$0$1$4$"	/**"
"Conventions.java:260"$0$0$0$14$80$"	 * Determine the class to use for naming a variable containing the given value."
"Conventions.java:261"$0$0$0$13$75$"	 * <p>Will return the class of the given value, except when encountering a"
"Conventions.java:262"$0$0$0$12$70$"	 * JDK proxy, in which case it will determine the 'primary' interface"
"Conventions.java:263"$0$0$0$5$30$"	 * implemented by that proxy."
"Conventions.java:264"$0$0$0$7$35$"	 * @param value the value to check"
"Conventions.java:265"$0$0$0$10$50$"	 * @return the class to use for naming a variable"
"Conventions.java:266"$0$0$0$1$4$"	 */"
"Conventions.java:267"$1$0$0$6$57$"	private static Class<?> getClassForValue(Object value) {"
"Conventions.java:268"$1$0$0$4$41$"		Class<?> valueClass = value.getClass();"
"Conventions.java:269"$0$0$0$3$39$"		if (Proxy.isProxyClass(valueClass)) {"
"Conventions.java:270"$1$0$0$4$48$"			Class<?>[] ifcs = valueClass.getInterfaces();"
"Conventions.java:271"$0$0$0$6$30$"			for (Class<?> ifc : ifcs) {"
"Conventions.java:272"$0$0$0$3$51$"				if (!ClassUtils.isJavaLanguageInterface(ifc)) {"
"Conventions.java:273"$0$0$0$2$16$"					return ifc;"
"Conventions.java:274"$0$0$0$1$5$"				}"
"Conventions.java:275"$0$0$0$1$4$"			}"
"Conventions.java:276"$0$0$0$1$3$"		}"
"Conventions.java:277"$2$0$0$10$99$"		else if (valueClass.getName().lastIndexOf('$') != -1 && valueClass.getDeclaringClass() == null) {"
"Conventions.java:278"$0$0$1$11$48$"			// '$' in the class name but no inner class -"
"Conventions.java:279"$0$0$1$9$56$"			// assuming it's a special subclass (e.g. by OpenJPA)"
"Conventions.java:280"$1$0$0$3$43$"			valueClass = valueClass.getSuperclass();"
"Conventions.java:281"$0$0$0$1$3$"		}"
"Conventions.java:282"$0$0$0$2$20$"		return valueClass;"
"Conventions.java:283"$0$0$0$1$2$"	}"
"Conventions.java:284"$0$0$0$0$0$""
"Conventions.java:285"$0$0$0$1$4$"	/**"
"Conventions.java:286"$0$0$0$5$29$"	 * Pluralize the given name."
"Conventions.java:287"$0$0$0$1$4$"	 */"
"Conventions.java:288"$0$0$0$6$47$"	private static String pluralize(String name) {"
"Conventions.java:289"$0$0$0$4$30$"		return name + PLURAL_SUFFIX;"
"Conventions.java:290"$0$0$0$1$2$"	}"
"Conventions.java:291"$0$0$0$0$0$""
"Conventions.java:292"$0$0$0$1$4$"	/**"
"Conventions.java:293"$0$0$0$12$71$"	 * Retrieve the {@code Class} of an element in the {@code Collection}."
"Conventions.java:294"$0$0$0$13$74$"	 * The exact element for which the {@code Class} is retrieved will depend"
"Conventions.java:295"$0$0$0$7$54$"	 * on the concrete {@code Collection} implementation."
"Conventions.java:296"$0$0$0$1$4$"	 */"
"Conventions.java:297"$0$0$0$7$59$"	private static <E> E peekAhead(Collection<E> collection) {"
"Conventions.java:298"$0$0$0$4$41$"		Iterator<E> it = collection.iterator();"
"Conventions.java:299"$0$0$0$3$22$"		if (!it.hasNext()) {"
"Conventions.java:300"$0$0$0$3$35$"			throw new IllegalStateException("
"Conventions.java:301"$0$0$0$11$72$"					""Unable to peek ahead in non-empty collection - no element found"");"
"Conventions.java:302"$0$0$0$1$3$"		}"
"Conventions.java:303"$0$0$0$4$22$"		E value = it.next();"
"Conventions.java:304"$0$0$0$5$22$"		if (value == null) {"
"Conventions.java:305"$0$0$0$3$35$"			throw new IllegalStateException("
"Conventions.java:306"$0$0$0$12$79$"					""Unable to peek ahead in non-empty collection - only null element found"");"
"Conventions.java:307"$0$0$0$1$3$"		}"
"Conventions.java:308"$0$0$0$2$15$"		return value;"
"Conventions.java:309"$0$0$0$1$2$"	}"
"Conventions.java:310"$0$0$0$0$0$""
"Conventions.java:311"$0$0$0$1$1$"}"
"PathMatchingResourcePatternResolver.java:1"$0$0$0$1$2$"/*"
"PathMatchingResourcePatternResolver.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"PathMatchingResourcePatternResolver.java:3"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PathMatchingResourcePatternResolver.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PathMatchingResourcePatternResolver.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PathMatchingResourcePatternResolver.java:7"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PathMatchingResourcePatternResolver.java:9"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PathMatchingResourcePatternResolver.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PathMatchingResourcePatternResolver.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PathMatchingResourcePatternResolver.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PathMatchingResourcePatternResolver.java:14"$0$0$0$5$33$" * limitations under the License."
"PathMatchingResourcePatternResolver.java:15"$0$0$0$1$3$" */"
"PathMatchingResourcePatternResolver.java:16"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:17"$0$0$0$2$44$"package org.springframework.core.io.support;"
"PathMatchingResourcePatternResolver.java:18"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:19"$0$0$0$2$20$"import java.io.File;"
"PathMatchingResourcePatternResolver.java:20"$0$0$0$2$37$"import java.io.FileNotFoundException;"
"PathMatchingResourcePatternResolver.java:21"$0$0$0$2$27$"import java.io.IOException;"
"PathMatchingResourcePatternResolver.java:22"$0$0$0$2$43$"import java.lang.reflect.InvocationHandler;"
"PathMatchingResourcePatternResolver.java:23"$0$0$0$2$32$"import java.lang.reflect.Method;"
"PathMatchingResourcePatternResolver.java:24"$0$0$0$2$33$"import java.net.JarURLConnection;"
"PathMatchingResourcePatternResolver.java:25"$0$0$0$2$38$"import java.net.MalformedURLException;"
"PathMatchingResourcePatternResolver.java:26"$0$0$0$2$35$"import java.net.URISyntaxException;"
"PathMatchingResourcePatternResolver.java:27"$0$0$0$2$20$"import java.net.URL;"
"PathMatchingResourcePatternResolver.java:28"$0$0$0$2$31$"import java.net.URLClassLoader;"
"PathMatchingResourcePatternResolver.java:29"$0$0$0$2$30$"import java.net.URLConnection;"
"PathMatchingResourcePatternResolver.java:30"$0$0$0$2$24$"import java.util.Arrays;"
"PathMatchingResourcePatternResolver.java:31"$0$0$0$2$29$"import java.util.Collections;"
"PathMatchingResourcePatternResolver.java:32"$0$0$0$2$28$"import java.util.Comparator;"
"PathMatchingResourcePatternResolver.java:33"$0$0$0$2$29$"import java.util.Enumeration;"
"PathMatchingResourcePatternResolver.java:34"$0$0$0$2$31$"import java.util.LinkedHashSet;"
"PathMatchingResourcePatternResolver.java:35"$0$0$0$2$21$"import java.util.Set;"
"PathMatchingResourcePatternResolver.java:36"$0$0$0$2$30$"import java.util.jar.JarEntry;"
"PathMatchingResourcePatternResolver.java:37"$0$0$0$2$29$"import java.util.jar.JarFile;"
"PathMatchingResourcePatternResolver.java:38"$0$0$0$2$34$"import java.util.zip.ZipException;"
"PathMatchingResourcePatternResolver.java:39"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:40"$0$0$0$2$38$"import org.apache.commons.logging.Log;"
"PathMatchingResourcePatternResolver.java:41"$0$0$0$2$45$"import org.apache.commons.logging.LogFactory;"
"PathMatchingResourcePatternResolver.java:42"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:43"$0$0$0$2$57$"import org.springframework.core.io.DefaultResourceLoader;"
"PathMatchingResourcePatternResolver.java:44"$0$0$0$2$54$"import org.springframework.core.io.FileSystemResource;"
"PathMatchingResourcePatternResolver.java:45"$0$0$0$2$44$"import org.springframework.core.io.Resource;"
"PathMatchingResourcePatternResolver.java:46"$0$0$0$2$50$"import org.springframework.core.io.ResourceLoader;"
"PathMatchingResourcePatternResolver.java:47"$0$0$0$2$47$"import org.springframework.core.io.UrlResource;"
"PathMatchingResourcePatternResolver.java:48"$0$0$0$2$47$"import org.springframework.core.io.VfsResource;"
"PathMatchingResourcePatternResolver.java:49"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PathMatchingResourcePatternResolver.java:50"$0$0$0$2$47$"import org.springframework.util.AntPathMatcher;"
"PathMatchingResourcePatternResolver.java:51"$0$0$0$2$39$"import org.springframework.util.Assert;"
"PathMatchingResourcePatternResolver.java:52"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"PathMatchingResourcePatternResolver.java:53"$0$0$0$2$44$"import org.springframework.util.PathMatcher;"
"PathMatchingResourcePatternResolver.java:54"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"PathMatchingResourcePatternResolver.java:55"$0$0$0$2$46$"import org.springframework.util.ResourceUtils;"
"PathMatchingResourcePatternResolver.java:56"$0$0$0$2$44$"import org.springframework.util.StringUtils;"
"PathMatchingResourcePatternResolver.java:57"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:58"$0$0$0$1$3$"/**"
"PathMatchingResourcePatternResolver.java:59"$0$0$0$11$77$" * A {@link ResourcePatternResolver} implementation that is able to resolve a"
"PathMatchingResourcePatternResolver.java:60"$0$0$0$11$72$" * specified resource location path into one or more matching Resources."
"PathMatchingResourcePatternResolver.java:61"$0$0$0$16$75$" * The source path may be a simple path which has a one-to-one mapping to a"
"PathMatchingResourcePatternResolver.java:62"$1$0$0$6$72$" * target {@link org.springframework.core.io.Resource}, or alternatively"
"PathMatchingResourcePatternResolver.java:63"$0$0$0$9$62$" * may contain the special ""{@code classpath*:}"" prefix and/or"
"PathMatchingResourcePatternResolver.java:64"$0$0$0$8$65$" * internal Ant-style regular expressions (matched using Spring's"
"PathMatchingResourcePatternResolver.java:65"$0$0$0$4$60$" * {@link org.springframework.util.AntPathMatcher} utility)."
"PathMatchingResourcePatternResolver.java:66"$0$0$0$8$48$" * Both of the latter are effectively wildcards."
"PathMatchingResourcePatternResolver.java:67"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:68"$0$0$0$3$26$" * <p><b>No Wildcards:</b>"
"PathMatchingResourcePatternResolver.java:69"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:70"$0$0$0$15$80$" * <p>In the simple case, if the specified location path does not start with the"
"PathMatchingResourcePatternResolver.java:71"$0$0$0$11$76$" * {@code ""classpath*:}"" prefix, and does not contain a PathMatcher pattern,"
"PathMatchingResourcePatternResolver.java:72"$0$0$0$11$59$" * this resolver will simply return a single resource via a"
"PathMatchingResourcePatternResolver.java:73"$1$0$0$9$71$" * {@code getResource()} call on the underlying {@code ResourceLoader}."
"PathMatchingResourcePatternResolver.java:74"$0$0$0$10$76$" * Examples are real URLs such as ""{@code file:C:/context.xml}"", pseudo-URLs"
"PathMatchingResourcePatternResolver.java:75"$0$0$0$9$72$" * such as ""{@code classpath:/context.xml}"", and simple unprefixed paths"
"PathMatchingResourcePatternResolver.java:76"$0$0$0$11$71$" * such as ""{@code /WEB-INF/context.xml}"". The latter will resolve in a"
"PathMatchingResourcePatternResolver.java:77"$0$0$0$9$66$" * fashion specific to the underlying {@code ResourceLoader} (e.g."
"PathMatchingResourcePatternResolver.java:78"$0$0$0$7$71$" * {@code ServletContextResource} for a {@code WebApplicationContext})."
"PathMatchingResourcePatternResolver.java:79"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:80"$0$0$0$3$32$" * <p><b>Ant-style Patterns:</b>"
"PathMatchingResourcePatternResolver.java:81"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:82"$0$0$0$10$65$" * <p>When the path location contains an Ant-style pattern, e.g.:"
"PathMatchingResourcePatternResolver.java:83"$0$0$0$3$21$" * <pre class=""code"">"
"PathMatchingResourcePatternResolver.java:84"$0$0$0$2$25$" * /WEB-INF/*-context.xml"
"PathMatchingResourcePatternResolver.java:85"$0$0$0$2$46$" * com/mycompany/**&#47;applicationContext.xml"
"PathMatchingResourcePatternResolver.java:86"$0$0$0$2$34$" * file:C:/some/path/*-context.xml"
"PathMatchingResourcePatternResolver.java:87"$0$0$0$2$62$" * classpath:com/mycompany/**&#47;applicationContext.xml</pre>"
"PathMatchingResourcePatternResolver.java:88"$0$0$0$14$78$" * the resolver follows a more complex but defined procedure to try to resolve"
"PathMatchingResourcePatternResolver.java:89"$0$0$0$15$75$" * the wildcard. It produces a {@code Resource} for the path up to the last"
"PathMatchingResourcePatternResolver.java:90"$0$0$0$14$73$" * non-wildcard segment and obtains a {@code URL} from it. If this URL is"
"PathMatchingResourcePatternResolver.java:91"$0$0$0$10$63$" * not a ""{@code jar:}"" URL or container-specific variant (e.g."
"PathMatchingResourcePatternResolver.java:92"$0$0$0$10$68$" * ""{@code zip:}"" in WebLogic, ""{@code wsjar}"" in WebSphere"", etc.),"
"PathMatchingResourcePatternResolver.java:93"$0$0$0$14$75$" * then a {@code java.io.File} is obtained from it, and used to resolve the"
"PathMatchingResourcePatternResolver.java:94"$0$0$0$15$77$" * wildcard by walking the filesystem. In the case of a jar URL, the resolver"
"PathMatchingResourcePatternResolver.java:95"$1$0$0$11$78$" * either gets a {@code java.net.JarURLConnection} from it, or manually parses"
"PathMatchingResourcePatternResolver.java:96"$0$0$0$16$79$" * the jar URL, and then traverses the contents of the jar file, to resolve the"
"PathMatchingResourcePatternResolver.java:97"$0$0$0$2$13$" * wildcards."
"PathMatchingResourcePatternResolver.java:98"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:99"$0$0$0$4$41$" * <p><b>Implications on portability:</b>"
"PathMatchingResourcePatternResolver.java:100"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:101"$0$0$0$13$72$" * <p>If the specified path is already a file URL (either explicitly, or"
"PathMatchingResourcePatternResolver.java:102"$0$0$0$11$74$" * implicitly because the base {@code ResourceLoader} is a filesystem one,"
"PathMatchingResourcePatternResolver.java:103"$0$0$0$12$75$" * then wildcarding is guaranteed to work in a completely portable fashion."
"PathMatchingResourcePatternResolver.java:104"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:105"$0$0$0$13$75$" * <p>If the specified path is a classpath location, then the resolver must"
"PathMatchingResourcePatternResolver.java:106"$0$0$0$10$54$" * obtain the last non-wildcard path segment URL via a"
"PathMatchingResourcePatternResolver.java:107"$1$0$0$9$63$" * {@code Classloader.getResource()} call. Since this is just a"
"PathMatchingResourcePatternResolver.java:108"$0$0$0$15$70$" * node of the path (not the file at the end) it is actually undefined"
"PathMatchingResourcePatternResolver.java:109"$0$0$0$14$74$" * (in the ClassLoader Javadocs) exactly what sort of a URL is returned in"
"PathMatchingResourcePatternResolver.java:110"$0$0$0$12$76$" * this case. In practice, it is usually a {@code java.io.File} representing"
"PathMatchingResourcePatternResolver.java:111"$0$0$0$11$71$" * the directory, where the classpath resource resolves to a filesystem"
"PathMatchingResourcePatternResolver.java:112"$0$0$0$14$77$" * location, or a jar URL of some sort, where the classpath resource resolves"
"PathMatchingResourcePatternResolver.java:113"$0$0$0$14$78$" * to a jar location. Still, there is a portability concern on this operation."
"PathMatchingResourcePatternResolver.java:114"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:115"$0$0$0$14$78$" * <p>If a jar URL is obtained for the last non-wildcard segment, the resolver"
"PathMatchingResourcePatternResolver.java:116"$1$0$0$12$70$" * must be able to get a {@code java.net.JarURLConnection} from it, or"
"PathMatchingResourcePatternResolver.java:117"$0$0$0$16$74$" * manually parse the jar URL, to be able to walk the contents of the jar,"
"PathMatchingResourcePatternResolver.java:118"$0$0$0$13$74$" * and resolve the wildcard. This will work in most environments, but will"
"PathMatchingResourcePatternResolver.java:119"$0$0$0$12$67$" * fail in others, and it is strongly recommended that the wildcard"
"PathMatchingResourcePatternResolver.java:120"$0$0$0$12$72$" * resolution of resources coming from jars be thoroughly tested in your"
"PathMatchingResourcePatternResolver.java:121"$0$0$0$8$46$" * specific environment before you rely on it."
"PathMatchingResourcePatternResolver.java:122"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:123"$0$0$0$4$40$" * <p><b>{@code classpath*:} Prefix:</b>"
"PathMatchingResourcePatternResolver.java:124"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:125"$0$0$0$12$80$" * <p>There is special support for retrieving multiple class path resources with"
"PathMatchingResourcePatternResolver.java:126"$0$0$0$11$68$" * the same name, via the ""{@code classpath*:}"" prefix. For example,"
"PathMatchingResourcePatternResolver.java:127"$0$0$0$7$68$" * ""{@code classpath*:META-INF/beans.xml}"" will find all ""beans.xml"""
"PathMatchingResourcePatternResolver.java:128"$0$0$0$15$75$" * files in the class path, be it in ""classes"" directories or in JAR files."
"PathMatchingResourcePatternResolver.java:129"$0$0$0$13$78$" * This is particularly useful for autodetecting config files of the same name"
"PathMatchingResourcePatternResolver.java:130"$0$0$0$14$76$" * at the same location within each jar file. Internally, this happens via a"
"PathMatchingResourcePatternResolver.java:131"$1$0$0$8$71$" * {@code ClassLoader.getResources()} call, and is completely portable."
"PathMatchingResourcePatternResolver.java:132"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:133"$0$0$0$13$81$" * <p>The ""classpath*:"" prefix can also be combined with a PathMatcher pattern in"
"PathMatchingResourcePatternResolver.java:134"$0$0$0$10$80$" * the rest of the location path, for example ""classpath*:META-INF/*-beans.xml""."
"PathMatchingResourcePatternResolver.java:135"$0$0$0$11$60$" * In this case, the resolution strategy is fairly simple: a"
"PathMatchingResourcePatternResolver.java:136"$1$0$0$10$75$" * {@code ClassLoader.getResources()} call is used on the last non-wildcard"
"PathMatchingResourcePatternResolver.java:137"$1$0$0$14$80$" * path segment to get all the matching resources in the class loader hierarchy,"
"PathMatchingResourcePatternResolver.java:138"$0$0$0$12$80$" * and then off each resource the same PathMatcher resolution strategy described"
"PathMatchingResourcePatternResolver.java:139"$0$0$0$8$42$" * above is used for the wildcard subpath."
"PathMatchingResourcePatternResolver.java:140"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:141"$0$0$0$3$25$" * <p><b>Other notes:</b>"
"PathMatchingResourcePatternResolver.java:142"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:143"$0$0$0$9$72$" * <p><b>WARNING:</b> Note that ""{@code classpath*:}"" when combined with"
"PathMatchingResourcePatternResolver.java:144"$0$0$0$13$78$" * Ant-style patterns will only work reliably with at least one root directory"
"PathMatchingResourcePatternResolver.java:145"$1$0$0$14$79$" * before the pattern starts, unless the actual target files reside in the file"
"PathMatchingResourcePatternResolver.java:146"$0$0$0$11$73$" * system. This means that a pattern like ""{@code classpath*:*.xml}"" will"
"PathMatchingResourcePatternResolver.java:147"$0$0$0$15$80$" * <i>not</i> retrieve files from the root of jar files but rather only from the"
"PathMatchingResourcePatternResolver.java:148"$0$0$0$13$79$" * root of expanded directories. This originates from a limitation in the JDK's"
"PathMatchingResourcePatternResolver.java:149"$1$0$0$9$75$" * {@code ClassLoader.getResources()} method which only returns file system"
"PathMatchingResourcePatternResolver.java:150"$0$0$0$12$81$" * locations for a passed-in empty String (indicating potential roots to search)."
"PathMatchingResourcePatternResolver.java:151"$0$0$0$10$80$" * This {@code ResourcePatternResolver} implementation is trying to mitigate the"
"PathMatchingResourcePatternResolver.java:152"$0$0$0$10$78$" * jar root lookup limitation through {@link URLClassLoader} introspection and"
"PathMatchingResourcePatternResolver.java:153"$0$0$0$8$82$" * ""java.class.path"" manifest evaluation; however, without portability guarantees."
"PathMatchingResourcePatternResolver.java:154"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:155"$0$0$0$9$76$" * <p><b>WARNING:</b> Ant-style patterns with ""classpath:"" resources are not"
"PathMatchingResourcePatternResolver.java:156"$0$0$0$14$83$" * guaranteed to find matching resources if the root package to search is available"
"PathMatchingResourcePatternResolver.java:157"$0$0$0$13$71$" * in multiple class path locations. This is because a resource such as"
"PathMatchingResourcePatternResolver.java:158"$0$0$0$3$21$" * <pre class=""code"">"
"PathMatchingResourcePatternResolver.java:159"$0$0$0$2$49$" *     com/mycompany/package1/service-context.xml"
"PathMatchingResourcePatternResolver.java:160"$0$0$0$2$9$" * </pre>"
"PathMatchingResourcePatternResolver.java:161"$0$0$0$13$55$" * may be in only one location, but when a path such as"
"PathMatchingResourcePatternResolver.java:162"$0$0$0$3$21$" * <pre class=""code"">"
"PathMatchingResourcePatternResolver.java:163"$0$0$0$2$57$" *     classpath:com/mycompany/**&#47;service-context.xml"
"PathMatchingResourcePatternResolver.java:164"$0$0$0$2$9$" * </pre>"
"PathMatchingResourcePatternResolver.java:165"$0$0$0$16$75$" * is used to try to resolve it, the resolver will work off the (first) URL"
"PathMatchingResourcePatternResolver.java:166"$1$0$0$10$79$" * returned by {@code getResource(""com/mycompany"");}. If this base package node"
"PathMatchingResourcePatternResolver.java:167"$0$0$0$13$79$" * exists in multiple classloader locations, the actual end resource may not be"
"PathMatchingResourcePatternResolver.java:168"$0$0$0$10$77$" * underneath. Therefore, preferably, use ""{@code classpath*:}"" with the same"
"PathMatchingResourcePatternResolver.java:169"$0$0$0$13$76$" * Ant-style pattern in such a case, which will search <i>all</i> class path"
"PathMatchingResourcePatternResolver.java:170"$0$0$0$7$43$" * locations that contain the root package."
"PathMatchingResourcePatternResolver.java:171"$0$0$0$1$2$" *"
"PathMatchingResourcePatternResolver.java:172"$0$0$0$4$26$" * @author Juergen Hoeller"
"PathMatchingResourcePatternResolver.java:173"$0$0$0$4$27$" * @author Colin Sampaleanu"
"PathMatchingResourcePatternResolver.java:174"$0$0$0$4$27$" * @author Marius Bogoevici"
"PathMatchingResourcePatternResolver.java:175"$0$0$0$4$22$" * @author Costin Leau"
"PathMatchingResourcePatternResolver.java:176"$0$0$0$4$23$" * @author Phillip Webb"
"PathMatchingResourcePatternResolver.java:177"$0$0$0$3$15$" * @since 1.0.2"
"PathMatchingResourcePatternResolver.java:178"$0$0$0$3$33$" * @see #CLASSPATH_ALL_URL_PREFIX"
"PathMatchingResourcePatternResolver.java:179"$0$0$0$3$47$" * @see org.springframework.util.AntPathMatcher"
"PathMatchingResourcePatternResolver.java:180"$1$0$0$3$70$" * @see org.springframework.core.io.ResourceLoader#getResource(String)"
"PathMatchingResourcePatternResolver.java:181"$1$0$0$3$40$" * @see ClassLoader#getResources(String)"
"PathMatchingResourcePatternResolver.java:182"$0$0$0$1$3$" */"
"PathMatchingResourcePatternResolver.java:183"$0$0$0$6$85$"public class PathMatchingResourcePatternResolver implements ResourcePatternResolver {"
"PathMatchingResourcePatternResolver.java:184"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:185"$1$0$0$7$96$"	private static final Log logger = LogFactory.getLog(PathMatchingResourcePatternResolver.class);"
"PathMatchingResourcePatternResolver.java:186"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:187"$0$0$0$1$10$"	@Nullable"
"PathMatchingResourcePatternResolver.java:188"$0$0$0$4$44$"	private static Method equinoxResolveMethod;"
"PathMatchingResourcePatternResolver.java:189"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:190"$0$0$0$2$9$"	static {"
"PathMatchingResourcePatternResolver.java:191"$0$0$0$2$7$"		try {"
"PathMatchingResourcePatternResolver.java:192"$0$0$1$8$49$"			// Detect Equinox OSGi (e.g. on WebSphere 6.1)"
"PathMatchingResourcePatternResolver.java:193"$0$0$0$4$89$"			Class<?> fileLocatorClass = ClassUtils.forName(""org.eclipse.core.runtime.FileLocator"","
"PathMatchingResourcePatternResolver.java:194"$1$0$0$1$65$"					PathMatchingResourcePatternResolver.class.getClassLoader());"
"PathMatchingResourcePatternResolver.java:195"$1$0$0$4$75$"			equinoxResolveMethod = fileLocatorClass.getMethod(""resolve"", URL.class);"
"PathMatchingResourcePatternResolver.java:196"$0$0$0$8$76$"			logger.trace(""Found Equinox FileLocator for OSGi bundle URL resolution"");"
"PathMatchingResourcePatternResolver.java:197"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:198"$0$0$0$4$24$"		catch (Throwable ex) {"
"PathMatchingResourcePatternResolver.java:199"$0$0$0$3$31$"			equinoxResolveMethod = null;"
"PathMatchingResourcePatternResolver.java:200"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:201"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:202"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:203"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:204"$0$0$0$4$45$"	private final ResourceLoader resourceLoader;"
"PathMatchingResourcePatternResolver.java:205"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:206"$0$0$0$6$56$"	private PathMatcher pathMatcher = new AntPathMatcher();"
"PathMatchingResourcePatternResolver.java:207"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:208"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:209"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:210"$0$0$0$8$82$"	 * Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader."
"PathMatchingResourcePatternResolver.java:211"$0$0$0$11$74$"	 * <p>ClassLoader access will happen via the thread context class loader."
"PathMatchingResourcePatternResolver.java:212"$0$0$0$3$58$"	 * @see org.springframework.core.io.DefaultResourceLoader"
"PathMatchingResourcePatternResolver.java:213"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:214"$0$0$0$3$47$"	public PathMatchingResourcePatternResolver() {"
"PathMatchingResourcePatternResolver.java:215"$0$0$0$4$52$"		this.resourceLoader = new DefaultResourceLoader();"
"PathMatchingResourcePatternResolver.java:216"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:217"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:218"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:219"$0$0$0$5$53$"	 * Create a new PathMatchingResourcePatternResolver."
"PathMatchingResourcePatternResolver.java:220"$0$0$0$11$74$"	 * <p>ClassLoader access will happen via the thread context class loader."
"PathMatchingResourcePatternResolver.java:221"$0$0$0$10$73$"	 * @param resourceLoader the ResourceLoader to load root directories and"
"PathMatchingResourcePatternResolver.java:222"$0$0$0$4$25$"	 * actual resources with"
"PathMatchingResourcePatternResolver.java:223"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:224"$0$0$0$4$76$"	public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {"
"PathMatchingResourcePatternResolver.java:225"$0$0$0$6$68$"		Assert.notNull(resourceLoader, ""ResourceLoader must not be null"");"
"PathMatchingResourcePatternResolver.java:226"$0$0$0$3$39$"		this.resourceLoader = resourceLoader;"
"PathMatchingResourcePatternResolver.java:227"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:228"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:229"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:230"$0$0$0$8$82$"	 * Create a new PathMatchingResourcePatternResolver with a DefaultResourceLoader."
"PathMatchingResourcePatternResolver.java:231"$0$0$0$10$72$"	 * @param classLoader the ClassLoader to load classpath resources with,"
"PathMatchingResourcePatternResolver.java:232"$0$0$0$11$61$"	 * or {@code null} for using the thread context class loader"
"PathMatchingResourcePatternResolver.java:233"$0$0$0$8$41$"	 * at the time of actual resource access"
"PathMatchingResourcePatternResolver.java:234"$0$0$0$3$58$"	 * @see org.springframework.core.io.DefaultResourceLoader"
"PathMatchingResourcePatternResolver.java:235"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:236"$0$0$0$5$80$"	public PathMatchingResourcePatternResolver(@Nullable ClassLoader classLoader) {"
"PathMatchingResourcePatternResolver.java:237"$0$0$0$4$63$"		this.resourceLoader = new DefaultResourceLoader(classLoader);"
"PathMatchingResourcePatternResolver.java:238"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:239"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:240"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:241"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:242"$0$0$0$10$68$"	 * Return the ResourceLoader that this pattern resolver works with."
"PathMatchingResourcePatternResolver.java:243"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:244"$1$0$0$4$44$"	public ResourceLoader getResourceLoader() {"
"PathMatchingResourcePatternResolver.java:245"$0$0$0$2$29$"		return this.resourceLoader;"
"PathMatchingResourcePatternResolver.java:246"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:247"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:248"$0$0$0$1$10$"	@Override"
"PathMatchingResourcePatternResolver.java:249"$0$0$0$1$10$"	@Nullable"
"PathMatchingResourcePatternResolver.java:250"$1$0$0$4$38$"	public ClassLoader getClassLoader() {"
"PathMatchingResourcePatternResolver.java:251"$2$0$0$2$46$"		return getResourceLoader().getClassLoader();"
"PathMatchingResourcePatternResolver.java:252"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:253"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:254"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:255"$0$0$0$9$54$"	 * Set the PathMatcher implementation to use for this"
"PathMatchingResourcePatternResolver.java:256"$0$0$0$7$57$"	 * resource pattern resolver. Default is AntPathMatcher."
"PathMatchingResourcePatternResolver.java:257"$0$0$0$3$48$"	 * @see org.springframework.util.AntPathMatcher"
"PathMatchingResourcePatternResolver.java:258"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:259"$0$0$0$5$54$"	public void setPathMatcher(PathMatcher pathMatcher) {"
"PathMatchingResourcePatternResolver.java:260"$0$0$0$6$62$"		Assert.notNull(pathMatcher, ""PathMatcher must not be null"");"
"PathMatchingResourcePatternResolver.java:261"$0$0$0$3$33$"		this.pathMatcher = pathMatcher;"
"PathMatchingResourcePatternResolver.java:262"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:263"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:264"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:265"$0$0$0$10$68$"	 * Return the PathMatcher that this resource pattern resolver uses."
"PathMatchingResourcePatternResolver.java:266"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:267"$1$0$0$4$38$"	public PathMatcher getPathMatcher() {"
"PathMatchingResourcePatternResolver.java:268"$0$0$0$2$26$"		return this.pathMatcher;"
"PathMatchingResourcePatternResolver.java:269"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:270"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:271"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:272"$0$0$0$1$10$"	@Override"
"PathMatchingResourcePatternResolver.java:273"$1$0$0$5$47$"	public Resource getResource(String location) {"
"PathMatchingResourcePatternResolver.java:274"$2$0$0$2$51$"		return getResourceLoader().getResource(location);"
"PathMatchingResourcePatternResolver.java:275"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:276"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:277"$0$0$0$1$10$"	@Override"
"PathMatchingResourcePatternResolver.java:278"$1$0$0$7$76$"	public Resource[] getResources(String locationPattern) throws IOException {"
"PathMatchingResourcePatternResolver.java:279"$0$0$0$7$71$"		Assert.notNull(locationPattern, ""Location pattern must not be null"");"
"PathMatchingResourcePatternResolver.java:280"$0$0$0$3$61$"		if (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) {"
"PathMatchingResourcePatternResolver.java:281"$0$0$1$11$71$"			// a class path resource (multiple resources for same name possible)"
"PathMatchingResourcePatternResolver.java:282"$1$0$0$3$98$"			if (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) {"
"PathMatchingResourcePatternResolver.java:283"$0$0$1$6$36$"				// a class path resource pattern"
"PathMatchingResourcePatternResolver.java:284"$0$0$0$2$54$"				return findPathMatchingResources(locationPattern);"
"PathMatchingResourcePatternResolver.java:285"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:286"$0$0$0$2$9$"			else {"
"PathMatchingResourcePatternResolver.java:287"$0$0$1$9$51$"				// all class path resources with the given name"
"PathMatchingResourcePatternResolver.java:288"$0$0$0$2$99$"				return findAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));"
"PathMatchingResourcePatternResolver.java:289"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:290"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:291"$0$0$0$2$8$"		else {"
"PathMatchingResourcePatternResolver.java:292"$0$0$1$11$60$"			// Generally only look for a pattern after a prefix here,"
"PathMatchingResourcePatternResolver.java:293"$0$0$1$13$74$"			// and on Tomcat only after the ""*/"" separator for its ""war:"" protocol."
"PathMatchingResourcePatternResolver.java:294"$0$0$0$9$92$"			int prefixEnd = (locationPattern.startsWith(""war:"") ? locationPattern.indexOf(""*/"") + 1 :"
"PathMatchingResourcePatternResolver.java:295"$0$0$0$3$39$"					locationPattern.indexOf(':') + 1);"
"PathMatchingResourcePatternResolver.java:296"$1$0$0$3$74$"			if (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) {"
"PathMatchingResourcePatternResolver.java:297"$0$0$1$4$21$"				// a file pattern"
"PathMatchingResourcePatternResolver.java:298"$0$0$0$2$54$"				return findPathMatchingResources(locationPattern);"
"PathMatchingResourcePatternResolver.java:299"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:300"$0$0$0$2$9$"			else {"
"PathMatchingResourcePatternResolver.java:301"$0$0$1$8$44$"				// a single resource with the given name"
"PathMatchingResourcePatternResolver.java:302"$2$0$0$4$77$"				return new Resource[] {getResourceLoader().getResource(locationPattern)};"
"PathMatchingResourcePatternResolver.java:303"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:304"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:305"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:306"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:307"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:308"$0$0$0$13$82$"	 * Find all class location resources with the given location via the ClassLoader."
"PathMatchingResourcePatternResolver.java:309"$0$0$0$5$62$"	 * Delegates to {@link #doFindAllClassPathResources(String)}."
"PathMatchingResourcePatternResolver.java:310"$0$0$0$9$58$"	 * @param location the absolute path within the classpath"
"PathMatchingResourcePatternResolver.java:311"$0$0$0$7$40$"	 * @return the result as Resource array"
"PathMatchingResourcePatternResolver.java:312"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PathMatchingResourcePatternResolver.java:313"$1$0$0$3$43$"	 * @see java.lang.ClassLoader#getResources"
"PathMatchingResourcePatternResolver.java:314"$0$0$0$3$31$"	 * @see #convertClassLoaderURL"
"PathMatchingResourcePatternResolver.java:315"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:316"$0$0$0$7$85$"	protected Resource[] findAllClassPathResources(String location) throws IOException {"
"PathMatchingResourcePatternResolver.java:317"$0$0$0$4$25$"		String path = location;"
"PathMatchingResourcePatternResolver.java:318"$0$0$0$3$29$"		if (path.startsWith(""/"")) {"
"PathMatchingResourcePatternResolver.java:319"$0$0$0$3$28$"			path = path.substring(1);"
"PathMatchingResourcePatternResolver.java:320"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:321"$0$0$0$4$59$"		Set<Resource> result = doFindAllClassPathResources(path);"
"PathMatchingResourcePatternResolver.java:322"$0$0$0$3$32$"		if (logger.isTraceEnabled()) {"
"PathMatchingResourcePatternResolver.java:323"$0$0$0$13$89$"			logger.trace(""Resolved classpath location ["" + location + ""] to resources "" + result);"
"PathMatchingResourcePatternResolver.java:324"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:325"$0$0$0$3$41$"		return result.toArray(new Resource[0]);"
"PathMatchingResourcePatternResolver.java:326"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:327"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:328"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:329"$0$0$0$13$78$"	 * Find all class location resources with the given path via the ClassLoader."
"PathMatchingResourcePatternResolver.java:330"$0$0$0$5$57$"	 * Called by {@link #findAllClassPathResources(String)}."
"PathMatchingResourcePatternResolver.java:331"$0$0$0$13$78$"	 * @param path the absolute path within the classpath (never a leading slash)"
"PathMatchingResourcePatternResolver.java:332"$0$0$0$9$56$"	 * @return a mutable Set of matching Resource instances"
"PathMatchingResourcePatternResolver.java:333"$0$0$0$3$16$"	 * @since 4.1.1"
"PathMatchingResourcePatternResolver.java:334"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:335"$0$0$0$7$86$"	protected Set<Resource> doFindAllClassPathResources(String path) throws IOException {"
"PathMatchingResourcePatternResolver.java:336"$0$0$0$5$49$"		Set<Resource> result = new LinkedHashSet<>(16);"
"PathMatchingResourcePatternResolver.java:337"$1$0$0$4$36$"		ClassLoader cl = getClassLoader();"
"PathMatchingResourcePatternResolver.java:338"$2$0$0$10$110$"		Enumeration<URL> resourceUrls = (cl != null ? cl.getResources(path) : ClassLoader.getSystemResources(path));"
"PathMatchingResourcePatternResolver.java:339"$0$0$0$3$42$"		while (resourceUrls.hasMoreElements()) {"
"PathMatchingResourcePatternResolver.java:340"$0$0$0$4$40$"			URL url = resourceUrls.nextElement();"
"PathMatchingResourcePatternResolver.java:341"$0$0$0$1$42$"			result.add(convertClassLoaderURL(url));"
"PathMatchingResourcePatternResolver.java:342"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:343"$0$0$0$3$24$"		if ("""".equals(path)) {"
"PathMatchingResourcePatternResolver.java:344"$0$0$1$15$95$"			// The above result is likely to be incomplete, i.e. only containing file system references."
"PathMatchingResourcePatternResolver.java:345"$0$0$1$17$83$"			// We need to have pointers to each of the jar files on the classpath as well..."
"PathMatchingResourcePatternResolver.java:346"$0$0$0$2$41$"			addAllClassLoaderJarRoots(cl, result);"
"PathMatchingResourcePatternResolver.java:347"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:348"$0$0$0$2$16$"		return result;"
"PathMatchingResourcePatternResolver.java:349"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:350"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:351"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:352"$0$0$0$14$83$"	 * Convert the given URL as returned from the ClassLoader into a {@link Resource}."
"PathMatchingResourcePatternResolver.java:353"$0$0$0$10$80$"	 * <p>The default implementation simply creates a {@link UrlResource} instance."
"PathMatchingResourcePatternResolver.java:354"$0$0$0$10$53$"	 * @param url a URL as returned from the ClassLoader"
"PathMatchingResourcePatternResolver.java:355"$0$0$0$6$45$"	 * @return the corresponding Resource object"
"PathMatchingResourcePatternResolver.java:356"$1$0$0$3$43$"	 * @see java.lang.ClassLoader#getResources"
"PathMatchingResourcePatternResolver.java:357"$0$0$0$3$45$"	 * @see org.springframework.core.io.Resource"
"PathMatchingResourcePatternResolver.java:358"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:359"$0$0$0$5$52$"	protected Resource convertClassLoaderURL(URL url) {"
"PathMatchingResourcePatternResolver.java:360"$0$0$0$3$30$"		return new UrlResource(url);"
"PathMatchingResourcePatternResolver.java:361"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:362"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:363"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:364"$0$0$0$15$86$"	 * Search all {@link URLClassLoader} URLs for jar file references and add them to the"
"PathMatchingResourcePatternResolver.java:365"$0$0$0$18$87$"	 * given set of resources in the form of pointers to the root of the jar file content."
"PathMatchingResourcePatternResolver.java:366"$0$0$0$10$74$"	 * @param classLoader the ClassLoader to search (including its ancestors)"
"PathMatchingResourcePatternResolver.java:367"$0$0$0$12$58$"	 * @param result the set of resources to add jar roots to"
"PathMatchingResourcePatternResolver.java:368"$0$0$0$3$16$"	 * @since 4.1.1"
"PathMatchingResourcePatternResolver.java:369"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:370"$0$0$0$8$100$"	protected void addAllClassLoaderJarRoots(@Nullable ClassLoader classLoader, Set<Resource> result) {"
"PathMatchingResourcePatternResolver.java:371"$0$0$0$5$46$"		if (classLoader instanceof URLClassLoader) {"
"PathMatchingResourcePatternResolver.java:372"$0$0$0$2$8$"			try {"
"PathMatchingResourcePatternResolver.java:373"$1$0$0$7$62$"				for (URL url : ((URLClassLoader) classLoader).getURLs()) {"
"PathMatchingResourcePatternResolver.java:374"$0$0$0$2$10$"					try {"
"PathMatchingResourcePatternResolver.java:375"$1$0$0$5$91$"						UrlResource jarResource = (ResourceUtils.URL_PROTOCOL_JAR.equals(url.getProtocol()) ?"
"PathMatchingResourcePatternResolver.java:376"$0$0$0$3$30$"								new UrlResource(url) :"
"PathMatchingResourcePatternResolver.java:377"$0$0$0$6$95$"								new UrlResource(ResourceUtils.JAR_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR));"
"PathMatchingResourcePatternResolver.java:378"$0$0$0$3$33$"						if (jarResource.exists()) {"
"PathMatchingResourcePatternResolver.java:379"$0$0$0$1$31$"							result.add(jarResource);"
"PathMatchingResourcePatternResolver.java:380"$0$0$0$1$7$"						}"
"PathMatchingResourcePatternResolver.java:381"$0$0$0$1$6$"					}"
"PathMatchingResourcePatternResolver.java:382"$0$0$0$4$39$"					catch (MalformedURLException ex) {"
"PathMatchingResourcePatternResolver.java:383"$0$0$0$3$36$"						if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:384"$0$0$0$10$75$"							logger.debug(""Cannot search for matching files underneath ["" + url +"
"PathMatchingResourcePatternResolver.java:385"$1$0$0$14$87$"									""] because it cannot be converted to a valid 'jar:' URL: "" + ex.getMessage());"
"PathMatchingResourcePatternResolver.java:386"$0$0$0$1$7$"						}"
"PathMatchingResourcePatternResolver.java:387"$0$0$0$1$6$"					}"
"PathMatchingResourcePatternResolver.java:388"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:389"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:390"$0$0$0$4$25$"			catch (Exception ex) {"
"PathMatchingResourcePatternResolver.java:391"$0$0$0$3$34$"				if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:392"$0$0$0$10$83$"					logger.debug(""Cannot introspect jar files since ClassLoader ["" + classLoader +"
"PathMatchingResourcePatternResolver.java:393"$1$0$0$8$48$"							""] does not support 'getURLs()': "" + ex);"
"PathMatchingResourcePatternResolver.java:394"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:395"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:396"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:397"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:398"$1$0$0$5$58$"		if (classLoader == ClassLoader.getSystemClassLoader()) {"
"PathMatchingResourcePatternResolver.java:399"$0$0$1$4$46$"			// ""java.class.path"" manifest evaluation..."
"PathMatchingResourcePatternResolver.java:400"$0$0$0$1$39$"			addClassPathManifestEntries(result);"
"PathMatchingResourcePatternResolver.java:401"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:402"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:403"$0$0$0$5$28$"		if (classLoader != null) {"
"PathMatchingResourcePatternResolver.java:404"$0$0$0$2$8$"			try {"
"PathMatchingResourcePatternResolver.java:405"$0$0$1$3$29$"				// Hierarchy traversal..."
"PathMatchingResourcePatternResolver.java:406"$1$0$0$2$63$"				addAllClassLoaderJarRoots(classLoader.getParent(), result);"
"PathMatchingResourcePatternResolver.java:407"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:408"$0$0$0$4$25$"			catch (Exception ex) {"
"PathMatchingResourcePatternResolver.java:409"$0$0$0$3$34$"				if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:410"$0$0$0$12$93$"					logger.debug(""Cannot introspect jar files in parent ClassLoader since ["" + classLoader +"
"PathMatchingResourcePatternResolver.java:411"$1$0$0$8$50$"							""] does not support 'getParent()': "" + ex);"
"PathMatchingResourcePatternResolver.java:412"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:413"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:414"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:415"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:416"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:417"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:418"$0$0$0$13$92$"	 * Determine jar file references from the ""java.class.path."" manifest property and add them"
"PathMatchingResourcePatternResolver.java:419"$0$0$0$20$94$"	 * to the given set of resources in the form of pointers to the root of the jar file content."
"PathMatchingResourcePatternResolver.java:420"$0$0$0$12$58$"	 * @param result the set of resources to add jar roots to"
"PathMatchingResourcePatternResolver.java:421"$0$0$0$3$14$"	 * @since 4.3"
"PathMatchingResourcePatternResolver.java:422"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:423"$0$0$0$5$67$"	protected void addClassPathManifestEntries(Set<Resource> result) {"
"PathMatchingResourcePatternResolver.java:424"$0$0$0$2$7$"		try {"
"PathMatchingResourcePatternResolver.java:425"$1$0$0$4$72$"			String javaClassPathProperty = System.getProperty(""java.class.path"");"
"PathMatchingResourcePatternResolver.java:426"$0$0$0$5$61$"			for (String path : StringUtils.delimitedListToStringArray("
"PathMatchingResourcePatternResolver.java:427"$1$0$0$3$68$"					javaClassPathProperty, System.getProperty(""path.separator""))) {"
"PathMatchingResourcePatternResolver.java:428"$0$0$0$2$9$"				try {"
"PathMatchingResourcePatternResolver.java:429"$1$0$0$5$56$"					String filePath = new File(path).getAbsolutePath();"
"PathMatchingResourcePatternResolver.java:430"$0$0$0$4$45$"					int prefixIndex = filePath.indexOf(':');"
"PathMatchingResourcePatternResolver.java:431"$0$0$0$5$28$"					if (prefixIndex == 1) {"
"PathMatchingResourcePatternResolver.java:432"$0$0$1$14$96$"						// Possibly ""c:"" drive prefix on Windows, to be upper-cased for proper duplicate detection"
"PathMatchingResourcePatternResolver.java:433"$0$0$0$3$50$"						filePath = StringUtils.capitalize(filePath);"
"PathMatchingResourcePatternResolver.java:434"$0$0$0$1$6$"					}"
"PathMatchingResourcePatternResolver.java:435"$0$0$0$6$77$"					UrlResource jarResource = new UrlResource(ResourceUtils.JAR_URL_PREFIX +"
"PathMatchingResourcePatternResolver.java:436"$0$0$0$5$83$"							ResourceUtils.FILE_URL_PREFIX + filePath + ResourceUtils.JAR_URL_SEPARATOR);"
"PathMatchingResourcePatternResolver.java:437"$1$0$1$7$75$"					// Potentially overlapping with URLClassLoader.getURLs() result above!"
"PathMatchingResourcePatternResolver.java:438"$0$0$0$8$100$"					if (!result.contains(jarResource) && !hasDuplicate(filePath, result) && jarResource.exists()) {"
"PathMatchingResourcePatternResolver.java:439"$0$0$0$1$30$"						result.add(jarResource);"
"PathMatchingResourcePatternResolver.java:440"$0$0$0$1$6$"					}"
"PathMatchingResourcePatternResolver.java:441"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:442"$0$0$0$4$38$"				catch (MalformedURLException ex) {"
"PathMatchingResourcePatternResolver.java:443"$0$0$0$3$35$"					if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:444"$0$0$0$10$75$"						logger.debug(""Cannot search for matching files underneath ["" + path +"
"PathMatchingResourcePatternResolver.java:445"$1$0$0$14$86$"								""] because it cannot be converted to a valid 'jar:' URL: "" + ex.getMessage());"
"PathMatchingResourcePatternResolver.java:446"$0$0$0$1$6$"					}"
"PathMatchingResourcePatternResolver.java:447"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:448"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:449"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:450"$0$0$0$4$24$"		catch (Exception ex) {"
"PathMatchingResourcePatternResolver.java:451"$0$0$0$3$33$"			if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:452"$0$0$0$9$81$"				logger.debug(""Failed to evaluate 'java.class.path' manifest entries: "" + ex);"
"PathMatchingResourcePatternResolver.java:453"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:454"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:455"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:456"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:457"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:458"$0$0$0$14$86$"	 * Check whether the given file path has a duplicate but differently structured entry"
"PathMatchingResourcePatternResolver.java:459"$0$0$0$12$65$"	 * in the existing result, i.e. with or without a leading slash."
"PathMatchingResourcePatternResolver.java:460"$0$0$0$12$67$"	 * @param filePath the file path (with or without a leading slash)"
"PathMatchingResourcePatternResolver.java:461"$0$0$0$6$36$"	 * @param result the current result"
"PathMatchingResourcePatternResolver.java:462"$0$0$0$16$86$"	 * @return {@code true} if there is a duplicate (i.e. to ignore the given file path),"
"PathMatchingResourcePatternResolver.java:463"$0$0$0$14$87$"	 * {@code false} to proceed with adding a corresponding resource to the current result"
"PathMatchingResourcePatternResolver.java:464"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:465"$0$0$0$7$70$"	private boolean hasDuplicate(String filePath, Set<Resource> result) {"
"PathMatchingResourcePatternResolver.java:466"$0$0$0$3$25$"		if (result.isEmpty()) {"
"PathMatchingResourcePatternResolver.java:467"$0$0$0$2$16$"			return false;"
"PathMatchingResourcePatternResolver.java:468"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:469"$0$0$0$10$93$"		String duplicatePath = (filePath.startsWith(""/"") ? filePath.substring(1) : ""/"" + filePath);"
"PathMatchingResourcePatternResolver.java:470"$0$0$0$2$7$"		try {"
"PathMatchingResourcePatternResolver.java:471"$0$0$0$6$104$"			return result.contains(new UrlResource(ResourceUtils.JAR_URL_PREFIX + ResourceUtils.FILE_URL_PREFIX +"
"PathMatchingResourcePatternResolver.java:472"$0$0$0$3$55$"					duplicatePath + ResourceUtils.JAR_URL_SEPARATOR));"
"PathMatchingResourcePatternResolver.java:473"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:474"$0$0$0$4$36$"		catch (MalformedURLException ex) {"
"PathMatchingResourcePatternResolver.java:475"$0$0$1$7$49$"			// Ignore: just for testing against duplicate."
"PathMatchingResourcePatternResolver.java:476"$0$0$0$2$16$"			return false;"
"PathMatchingResourcePatternResolver.java:477"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:478"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:479"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:480"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:481"$0$0$0$12$68$"	 * Find all resources that match the given location pattern via the"
"PathMatchingResourcePatternResolver.java:482"$0$0$0$11$72$"	 * Ant-style PathMatcher. Supports resources in jar files and zip files"
"PathMatchingResourcePatternResolver.java:483"$0$0$0$6$27$"	 * and in the file system."
"PathMatchingResourcePatternResolver.java:484"$0$0$0$8$56$"	 * @param locationPattern the location pattern to match"
"PathMatchingResourcePatternResolver.java:485"$0$0$0$7$40$"	 * @return the result as Resource array"
"PathMatchingResourcePatternResolver.java:486"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PathMatchingResourcePatternResolver.java:487"$0$0$0$3$40$"	 * @see #doFindPathMatchingJarResources"
"PathMatchingResourcePatternResolver.java:488"$0$0$0$3$41$"	 * @see #doFindPathMatchingFileResources"
"PathMatchingResourcePatternResolver.java:489"$0$0$0$3$45$"	 * @see org.springframework.util.PathMatcher"
"PathMatchingResourcePatternResolver.java:490"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:491"$0$0$0$7$92$"	protected Resource[] findPathMatchingResources(String locationPattern) throws IOException {"
"PathMatchingResourcePatternResolver.java:492"$0$0$0$4$57$"		String rootDirPath = determineRootDir(locationPattern);"
"PathMatchingResourcePatternResolver.java:493"$0$0$0$4$70$"		String subPattern = locationPattern.substring(rootDirPath.length());"
"PathMatchingResourcePatternResolver.java:494"$1$0$0$4$58$"		Resource[] rootDirResources = getResources(rootDirPath);"
"PathMatchingResourcePatternResolver.java:495"$0$0$0$5$49$"		Set<Resource> result = new LinkedHashSet<>(16);"
"PathMatchingResourcePatternResolver.java:496"$0$0$0$6$53$"		for (Resource rootDirResource : rootDirResources) {"
"PathMatchingResourcePatternResolver.java:497"$0$0$0$3$61$"			rootDirResource = resolveRootDirResource(rootDirResource);"
"PathMatchingResourcePatternResolver.java:498"$1$0$0$4$45$"			URL rootDirUrl = rootDirResource.getURL();"
"PathMatchingResourcePatternResolver.java:499"$1$0$0$7$87$"			if (equinoxResolveMethod != null && rootDirUrl.getProtocol().startsWith(""bundle"")) {"
"PathMatchingResourcePatternResolver.java:500"$0$0$0$7$97$"				URL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, null, rootDirUrl);"
"PathMatchingResourcePatternResolver.java:501"$0$0$0$5$30$"				if (resolvedUrl != null) {"
"PathMatchingResourcePatternResolver.java:502"$0$0$0$3$30$"					rootDirUrl = resolvedUrl;"
"PathMatchingResourcePatternResolver.java:503"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:504"$0$0$0$4$50$"				rootDirResource = new UrlResource(rootDirUrl);"
"PathMatchingResourcePatternResolver.java:505"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:506"$1$0$0$3$77$"			if (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {"
"PathMatchingResourcePatternResolver.java:507"$1$0$0$3$111$"				result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()));"
"PathMatchingResourcePatternResolver.java:508"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:509"$0$0$0$6$83$"			else if (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) {"
"PathMatchingResourcePatternResolver.java:510"$0$0$0$3$91$"				result.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern));"
"PathMatchingResourcePatternResolver.java:511"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:512"$0$0$0$2$9$"			else {"
"PathMatchingResourcePatternResolver.java:513"$0$0$0$2$80$"				result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));"
"PathMatchingResourcePatternResolver.java:514"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:515"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:516"$0$0$0$3$32$"		if (logger.isTraceEnabled()) {"
"PathMatchingResourcePatternResolver.java:517"$0$0$0$13$94$"			logger.trace(""Resolved location pattern ["" + locationPattern + ""] to resources "" + result);"
"PathMatchingResourcePatternResolver.java:518"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:519"$0$0$0$3$41$"		return result.toArray(new Resource[0]);"
"PathMatchingResourcePatternResolver.java:520"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:521"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:522"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:523"$0$0$0$9$56$"	 * Determine the root directory for the given location."
"PathMatchingResourcePatternResolver.java:524"$0$0$0$10$65$"	 * <p>Used for determining the starting point for file matching,"
"PathMatchingResourcePatternResolver.java:525"$0$0$0$10$67$"	 * resolving the root directory location to a {@code java.io.File}"
"PathMatchingResourcePatternResolver.java:526"$0$0$0$9$63$"	 * and passing it into {@code retrieveMatchingFiles}, with the"
"PathMatchingResourcePatternResolver.java:527"$0$0$0$7$41$"	 * remainder of the location as pattern."
"PathMatchingResourcePatternResolver.java:528"$0$0$0$8$64$"	 * <p>Will return ""/WEB-INF/"" for the pattern ""/WEB-INF/*.xml"","
"PathMatchingResourcePatternResolver.java:529"$0$0$0$3$16$"	 * for example."
"PathMatchingResourcePatternResolver.java:530"$0$0$0$7$41$"	 * @param location the location to check"
"PathMatchingResourcePatternResolver.java:531"$0$0$0$12$68$"	 * @return the part of the location that denotes the root directory"
"PathMatchingResourcePatternResolver.java:532"$0$0$0$3$31$"	 * @see #retrieveMatchingFiles"
"PathMatchingResourcePatternResolver.java:533"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:534"$0$0$0$5$53$"	protected String determineRootDir(String location) {"
"PathMatchingResourcePatternResolver.java:535"$0$0$0$6$44$"		int prefixEnd = location.indexOf(':') + 1;"
"PathMatchingResourcePatternResolver.java:536"$0$0$0$4$37$"		int rootDirEnd = location.length();"
"PathMatchingResourcePatternResolver.java:537"$1$0$0$8$107$"		while (rootDirEnd > prefixEnd && getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) {"
"PathMatchingResourcePatternResolver.java:538"$0$0$0$8$62$"			rootDirEnd = location.lastIndexOf('/', rootDirEnd - 2) + 1;"
"PathMatchingResourcePatternResolver.java:539"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:540"$0$0$0$5$24$"		if (rootDirEnd == 0) {"
"PathMatchingResourcePatternResolver.java:541"$0$0$0$3$26$"			rootDirEnd = prefixEnd;"
"PathMatchingResourcePatternResolver.java:542"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:543"$0$0$0$3$43$"		return location.substring(0, rootDirEnd);"
"PathMatchingResourcePatternResolver.java:544"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:545"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:546"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:547"$0$0$0$8$53$"	 * Resolve the specified resource for path matching."
"PathMatchingResourcePatternResolver.java:548"$0$0$0$11$78$"	 * <p>By default, Equinox OSGi ""bundleresource:"" / ""bundleentry:"" URL will be"
"PathMatchingResourcePatternResolver.java:549"$0$0$0$13$74$"	 * resolved into a standard jar file URL that be traversed using Spring's"
"PathMatchingResourcePatternResolver.java:550"$0$0$0$11$79$"	 * standard jar file traversal algorithm. For any preceding custom resolution,"
"PathMatchingResourcePatternResolver.java:551"$0$0$0$10$69$"	 * override this method and replace the resource handle accordingly."
"PathMatchingResourcePatternResolver.java:552"$0$0$0$7$43$"	 * @param original the resource to resolve"
"PathMatchingResourcePatternResolver.java:553"$0$0$0$12$78$"	 * @return the resolved resource (may be identical to the passed-in resource)"
"PathMatchingResourcePatternResolver.java:554"$0$0$0$8$53$"	 * @throws IOException in case of resolution failure"
"PathMatchingResourcePatternResolver.java:555"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:556"$0$0$0$7$82$"	protected Resource resolveRootDirResource(Resource original) throws IOException {"
"PathMatchingResourcePatternResolver.java:557"$0$0$0$2$18$"		return original;"
"PathMatchingResourcePatternResolver.java:558"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:559"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:560"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:561"$0$0$0$11$69$"	 * Return whether the given resource handle indicates a jar resource"
"PathMatchingResourcePatternResolver.java:562"$0$0$0$8$70$"	 * that the {@code doFindPathMatchingJarResources} method can handle."
"PathMatchingResourcePatternResolver.java:563"$0$0$0$11$70$"	 * <p>By default, the URL protocols ""jar"", ""zip"", ""vfszip and ""wsjar"""
"PathMatchingResourcePatternResolver.java:564"$0$0$0$12$69$"	 * will be treated as jar resources. This template method allows for"
"PathMatchingResourcePatternResolver.java:565"$0$0$0$9$63$"	 * detecting further kinds of jar-like resources, e.g. through"
"PathMatchingResourcePatternResolver.java:566"$0$0$0$9$58$"	 * {@code instanceof} checks on the resource handle type."
"PathMatchingResourcePatternResolver.java:567"$0$0$0$8$48$"	 * @param resource the resource handle to check"
"PathMatchingResourcePatternResolver.java:568"$0$0$0$10$60$"	 * (usually the root directory to start path matching from)"
"PathMatchingResourcePatternResolver.java:569"$0$0$0$3$40$"	 * @see #doFindPathMatchingJarResources"
"PathMatchingResourcePatternResolver.java:570"$0$0$0$3$56$"	 * @see org.springframework.util.ResourceUtils#isJarURL"
"PathMatchingResourcePatternResolver.java:571"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:572"$0$0$0$7$72$"	protected boolean isJarResource(Resource resource) throws IOException {"
"PathMatchingResourcePatternResolver.java:573"$0$0$0$2$15$"		return false;"
"PathMatchingResourcePatternResolver.java:574"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:575"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:576"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:577"$0$0$0$13$73$"	 * Find all resources in jar files that match the given location pattern"
"PathMatchingResourcePatternResolver.java:578"$0$0$0$5$34$"	 * via the Ant-style PathMatcher."
"PathMatchingResourcePatternResolver.java:579"$0$0$0$8$57$"	 * @param rootDirResource the root directory as Resource"
"PathMatchingResourcePatternResolver.java:580"$0$0$0$8$57$"	 * @param rootDirURL the pre-resolved root directory URL"
"PathMatchingResourcePatternResolver.java:581"$0$0$0$12$73$"	 * @param subPattern the sub pattern to match (below the root directory)"
"PathMatchingResourcePatternResolver.java:582"$0$0$0$9$56$"	 * @return a mutable Set of matching Resource instances"
"PathMatchingResourcePatternResolver.java:583"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PathMatchingResourcePatternResolver.java:584"$0$0$0$3$14$"	 * @since 4.3"
"PathMatchingResourcePatternResolver.java:585"$0$0$0$3$34$"	 * @see java.net.JarURLConnection"
"PathMatchingResourcePatternResolver.java:586"$0$0$0$3$45$"	 * @see org.springframework.util.PathMatcher"
"PathMatchingResourcePatternResolver.java:587"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:588"$0$0$0$8$116$"	protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, URL rootDirURL, String subPattern)"
"PathMatchingResourcePatternResolver.java:589"$0$0$0$3$23$"			throws IOException {"
"PathMatchingResourcePatternResolver.java:590"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:591"$0$0$0$4$50$"		URLConnection con = rootDirURL.openConnection();"
"PathMatchingResourcePatternResolver.java:592"$0$0$0$2$18$"		JarFile jarFile;"
"PathMatchingResourcePatternResolver.java:593"$0$0$0$2$20$"		String jarFileUrl;"
"PathMatchingResourcePatternResolver.java:594"$0$0$0$2$23$"		String rootEntryPath;"
"PathMatchingResourcePatternResolver.java:595"$0$0$0$2$23$"		boolean closeJarFile;"
"PathMatchingResourcePatternResolver.java:596"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:597"$0$0$0$5$40$"		if (con instanceof JarURLConnection) {"
"PathMatchingResourcePatternResolver.java:598"$0$0$1$10$59$"			// Should usually be the case for traditional JAR files."
"PathMatchingResourcePatternResolver.java:599"$0$0$0$5$52$"			JarURLConnection jarCon = (JarURLConnection) con;"
"PathMatchingResourcePatternResolver.java:600"$0$0$0$1$46$"			ResourceUtils.useCachesIfNecessary(jarCon);"
"PathMatchingResourcePatternResolver.java:601"$1$0$0$3$33$"			jarFile = jarCon.getJarFile();"
"PathMatchingResourcePatternResolver.java:602"$1$0$0$3$56$"			jarFileUrl = jarCon.getJarFileURL().toExternalForm();"
"PathMatchingResourcePatternResolver.java:603"$1$0$0$4$44$"			JarEntry jarEntry = jarCon.getJarEntry();"
"PathMatchingResourcePatternResolver.java:604"$1$0$0$9$64$"			rootEntryPath = (jarEntry != null ? jarEntry.getName() : """");"
"PathMatchingResourcePatternResolver.java:605"$1$0$0$3$41$"			closeJarFile = !jarCon.getUseCaches();"
"PathMatchingResourcePatternResolver.java:606"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:607"$0$0$0$2$8$"		else {"
"PathMatchingResourcePatternResolver.java:608"$0$0$1$11$64$"			// No JarURLConnection -> need to resort to URL file parsing."
"PathMatchingResourcePatternResolver.java:609"$0$0$1$11$74$"			// We'll assume URLs of the format ""jar:path!/entry"", with the protocol"
"PathMatchingResourcePatternResolver.java:610"$0$0$1$10$60$"			// being arbitrary as long as following the entry format."
"PathMatchingResourcePatternResolver.java:611"$0$0$1$11$70$"			// We'll also handle paths with and without leading ""file:"" prefix."
"PathMatchingResourcePatternResolver.java:612"$1$0$0$4$41$"			String urlFile = rootDirURL.getFile();"
"PathMatchingResourcePatternResolver.java:613"$0$0$0$2$8$"			try {"
"PathMatchingResourcePatternResolver.java:614"$0$0$0$4$74$"				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR);"
"PathMatchingResourcePatternResolver.java:615"$0$0$0$5$31$"				if (separatorIndex == -1) {"
"PathMatchingResourcePatternResolver.java:616"$0$0$0$3$71$"					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);"
"PathMatchingResourcePatternResolver.java:617"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:618"$0$0$0$5$31$"				if (separatorIndex != -1) {"
"PathMatchingResourcePatternResolver.java:619"$0$0$0$4$55$"					jarFileUrl = urlFile.substring(0, separatorIndex);"
"PathMatchingResourcePatternResolver.java:620"$0$0$0$11$91$"					rootEntryPath = urlFile.substring(separatorIndex + 2);  // both separators are 2 chars"
"PathMatchingResourcePatternResolver.java:621"$1$0$0$3$38$"					jarFile = getJarFile(jarFileUrl);"
"PathMatchingResourcePatternResolver.java:622"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:623"$0$0$0$2$10$"				else {"
"PathMatchingResourcePatternResolver.java:624"$0$0$0$4$36$"					jarFile = new JarFile(urlFile);"
"PathMatchingResourcePatternResolver.java:625"$0$0$0$3$26$"					jarFileUrl = urlFile;"
"PathMatchingResourcePatternResolver.java:626"$0$0$0$3$24$"					rootEntryPath = """";"
"PathMatchingResourcePatternResolver.java:627"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:628"$0$0$0$3$24$"				closeJarFile = true;"
"PathMatchingResourcePatternResolver.java:629"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:630"$0$0$0$4$28$"			catch (ZipException ex) {"
"PathMatchingResourcePatternResolver.java:631"$0$0$0$3$34$"				if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:632"$0$0$0$10$76$"					logger.debug(""Skipping invalid jar classpath entry ["" + urlFile + ""]"");"
"PathMatchingResourcePatternResolver.java:633"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:634"$0$0$0$2$34$"				return Collections.emptySet();"
"PathMatchingResourcePatternResolver.java:635"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:636"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:637"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:638"$0$0$0$2$7$"		try {"
"PathMatchingResourcePatternResolver.java:639"$0$0$0$3$33$"			if (logger.isTraceEnabled()) {"
"PathMatchingResourcePatternResolver.java:640"$0$0$0$12$84$"				logger.trace(""Looking for matching resources in jar file ["" + jarFileUrl + ""]"");"
"PathMatchingResourcePatternResolver.java:641"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:642"$0$0$0$5$67$"			if (!"""".equals(rootEntryPath) && !rootEntryPath.endsWith(""/"")) {"
"PathMatchingResourcePatternResolver.java:643"$0$0$1$13$72$"				// Root entry path must end with slash to allow for proper matching."
"PathMatchingResourcePatternResolver.java:644"$0$0$1$14$70$"				// The Sun JRE does not return a slash here, but BEA JRockit does."
"PathMatchingResourcePatternResolver.java:645"$0$0$0$5$40$"				rootEntryPath = rootEntryPath + ""/"";"
"PathMatchingResourcePatternResolver.java:646"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:647"$0$0$0$5$49$"			Set<Resource> result = new LinkedHashSet<>(8);"
"PathMatchingResourcePatternResolver.java:648"$0$0$0$7$88$"			for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements();) {"
"PathMatchingResourcePatternResolver.java:649"$0$0$0$4$43$"				JarEntry entry = entries.nextElement();"
"PathMatchingResourcePatternResolver.java:650"$1$0$0$4$39$"				String entryPath = entry.getName();"
"PathMatchingResourcePatternResolver.java:651"$0$0$0$3$46$"				if (entryPath.startsWith(rootEntryPath)) {"
"PathMatchingResourcePatternResolver.java:652"$0$0$0$4$71$"					String relativePath = entryPath.substring(rootEntryPath.length());"
"PathMatchingResourcePatternResolver.java:653"$1$0$0$4$60$"					if (getPathMatcher().match(subPattern, relativePath)) {"
"PathMatchingResourcePatternResolver.java:654"$0$0$0$1$63$"						result.add(rootDirResource.createRelative(relativePath));"
"PathMatchingResourcePatternResolver.java:655"$0$0$0$1$6$"					}"
"PathMatchingResourcePatternResolver.java:656"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:657"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:658"$0$0$0$2$17$"			return result;"
"PathMatchingResourcePatternResolver.java:659"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:660"$0$0$0$2$11$"		finally {"
"PathMatchingResourcePatternResolver.java:661"$0$0$0$3$22$"			if (closeJarFile) {"
"PathMatchingResourcePatternResolver.java:662"$0$0$0$1$20$"				jarFile.close();"
"PathMatchingResourcePatternResolver.java:663"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:664"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:665"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:666"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:667"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:668"$0$0$0$11$57$"	 * Resolve the given jar file URL into a JarFile object."
"PathMatchingResourcePatternResolver.java:669"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:670"$1$0$0$7$69$"	protected JarFile getJarFile(String jarFileUrl) throws IOException {"
"PathMatchingResourcePatternResolver.java:671"$0$0$0$3$61$"		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {"
"PathMatchingResourcePatternResolver.java:672"$0$0$0$2$8$"			try {"
"PathMatchingResourcePatternResolver.java:673"$1$0$0$3$80$"				return new JarFile(ResourceUtils.toURI(jarFileUrl).getSchemeSpecificPart());"
"PathMatchingResourcePatternResolver.java:674"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:675"$0$0$0$4$34$"			catch (URISyntaxException ex) {"
"PathMatchingResourcePatternResolver.java:676"$0$0$1$13$77$"				// Fallback for URLs that are not valid URIs (should hardly ever happen)."
"PathMatchingResourcePatternResolver.java:677"$0$0$0$3$85$"				return new JarFile(jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()));"
"PathMatchingResourcePatternResolver.java:678"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:679"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:680"$0$0$0$2$8$"		else {"
"PathMatchingResourcePatternResolver.java:681"$0$0$0$3$34$"			return new JarFile(jarFileUrl);"
"PathMatchingResourcePatternResolver.java:682"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:683"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:684"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:685"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:686"$0$0$0$14$79$"	 * Find all resources in the file system that match the given location pattern"
"PathMatchingResourcePatternResolver.java:687"$0$0$0$5$34$"	 * via the Ant-style PathMatcher."
"PathMatchingResourcePatternResolver.java:688"$0$0$0$8$57$"	 * @param rootDirResource the root directory as Resource"
"PathMatchingResourcePatternResolver.java:689"$0$0$0$12$73$"	 * @param subPattern the sub pattern to match (below the root directory)"
"PathMatchingResourcePatternResolver.java:690"$0$0$0$9$56$"	 * @return a mutable Set of matching Resource instances"
"PathMatchingResourcePatternResolver.java:691"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PathMatchingResourcePatternResolver.java:692"$0$0$0$3$31$"	 * @see #retrieveMatchingFiles"
"PathMatchingResourcePatternResolver.java:693"$0$0$0$3$45$"	 * @see org.springframework.util.PathMatcher"
"PathMatchingResourcePatternResolver.java:694"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:695"$0$0$0$6$101$"	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern)"
"PathMatchingResourcePatternResolver.java:696"$0$0$0$3$23$"			throws IOException {"
"PathMatchingResourcePatternResolver.java:697"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:698"$0$0$0$2$15$"		File rootDir;"
"PathMatchingResourcePatternResolver.java:699"$0$0$0$2$7$"		try {"
"PathMatchingResourcePatternResolver.java:700"$2$0$0$3$57$"			rootDir = rootDirResource.getFile().getAbsoluteFile();"
"PathMatchingResourcePatternResolver.java:701"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:702"$0$0$0$4$36$"		catch (FileNotFoundException ex) {"
"PathMatchingResourcePatternResolver.java:703"$0$0$0$3$33$"			if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:704"$0$0$0$10$83$"				logger.debug(""Cannot search for matching files underneath "" + rootDirResource +"
"PathMatchingResourcePatternResolver.java:705"$1$0$0$8$49$"						"" in the file system: "" + ex.getMessage());"
"PathMatchingResourcePatternResolver.java:706"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:707"$0$0$0$2$33$"			return Collections.emptySet();"
"PathMatchingResourcePatternResolver.java:708"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:709"$0$0$0$4$24$"		catch (Exception ex) {"
"PathMatchingResourcePatternResolver.java:710"$0$0$0$3$32$"			if (logger.isInfoEnabled()) {"
"PathMatchingResourcePatternResolver.java:711"$0$0$0$15$87$"				logger.info(""Failed to resolve "" + rootDirResource + "" in the file system: "" + ex);"
"PathMatchingResourcePatternResolver.java:712"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:713"$0$0$0$2$33$"			return Collections.emptySet();"
"PathMatchingResourcePatternResolver.java:714"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:715"$0$0$0$3$64$"		return doFindMatchingFileSystemResources(rootDir, subPattern);"
"PathMatchingResourcePatternResolver.java:716"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:717"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:718"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:719"$0$0$0$14$79$"	 * Find all resources in the file system that match the given location pattern"
"PathMatchingResourcePatternResolver.java:720"$0$0$0$5$34$"	 * via the Ant-style PathMatcher."
"PathMatchingResourcePatternResolver.java:721"$0$0$0$10$56$"	 * @param rootDir the root directory in the file system"
"PathMatchingResourcePatternResolver.java:722"$0$0$0$12$73$"	 * @param subPattern the sub pattern to match (below the root directory)"
"PathMatchingResourcePatternResolver.java:723"$0$0$0$9$56$"	 * @return a mutable Set of matching Resource instances"
"PathMatchingResourcePatternResolver.java:724"$0$0$0$8$45$"	 * @throws IOException in case of I/O errors"
"PathMatchingResourcePatternResolver.java:725"$0$0$0$3$31$"	 * @see #retrieveMatchingFiles"
"PathMatchingResourcePatternResolver.java:726"$0$0$0$3$45$"	 * @see org.springframework.util.PathMatcher"
"PathMatchingResourcePatternResolver.java:727"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:728"$0$0$0$9$112$"	protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {"
"PathMatchingResourcePatternResolver.java:729"$0$0$0$3$32$"		if (logger.isTraceEnabled()) {"
"PathMatchingResourcePatternResolver.java:730"$1$0$0$12$96$"			logger.trace(""Looking for matching resources in directory tree ["" + rootDir.getPath() + ""]"");"
"PathMatchingResourcePatternResolver.java:731"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:732"$0$0$0$5$71$"		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern);"
"PathMatchingResourcePatternResolver.java:733"$0$0$0$5$67$"		Set<Resource> result = new LinkedHashSet<>(matchingFiles.size());"
"PathMatchingResourcePatternResolver.java:734"$0$0$0$6$35$"		for (File file : matchingFiles) {"
"PathMatchingResourcePatternResolver.java:735"$0$0$0$2$44$"			result.add(new FileSystemResource(file));"
"PathMatchingResourcePatternResolver.java:736"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:737"$0$0$0$2$16$"		return result;"
"PathMatchingResourcePatternResolver.java:738"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:739"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:740"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:741"$0$0$0$9$53$"	 * Retrieve files that match the given path pattern,"
"PathMatchingResourcePatternResolver.java:742"$0$0$0$8$56$"	 * checking the given directory and its subdirectories."
"PathMatchingResourcePatternResolver.java:743"$0$0$0$8$46$"	 * @param rootDir the directory to start from"
"PathMatchingResourcePatternResolver.java:744"$0$0$0$8$48$"	 * @param pattern the pattern to match against,"
"PathMatchingResourcePatternResolver.java:745"$0$0$0$6$34$"	 * relative to the root directory"
"PathMatchingResourcePatternResolver.java:746"$0$0$0$9$56$"	 * @return a mutable Set of matching Resource instances"
"PathMatchingResourcePatternResolver.java:747"$0$0$0$10$68$"	 * @throws IOException if directory contents could not be retrieved"
"PathMatchingResourcePatternResolver.java:748"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:749"$0$0$0$9$93$"	protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {"
"PathMatchingResourcePatternResolver.java:750"$0$0$0$3$26$"		if (!rootDir.exists()) {"
"PathMatchingResourcePatternResolver.java:751"$0$0$1$5$45$"			// Silently skip non-existing directories."
"PathMatchingResourcePatternResolver.java:752"$0$0$0$3$33$"			if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:753"$1$0$0$11$91$"				logger.debug(""Skipping ["" + rootDir.getAbsolutePath() + ""] because it does not exist"");"
"PathMatchingResourcePatternResolver.java:754"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:755"$0$0$0$2$33$"			return Collections.emptySet();"
"PathMatchingResourcePatternResolver.java:756"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:757"$0$0$0$3$31$"		if (!rootDir.isDirectory()) {"
"PathMatchingResourcePatternResolver.java:758"$0$0$1$10$55$"			// Complain louder if it exists but is no directory."
"PathMatchingResourcePatternResolver.java:759"$0$0$0$3$32$"			if (logger.isInfoEnabled()) {"
"PathMatchingResourcePatternResolver.java:760"$1$0$0$13$103$"				logger.info(""Skipping ["" + rootDir.getAbsolutePath() + ""] because it does not denote a directory"");"
"PathMatchingResourcePatternResolver.java:761"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:762"$0$0$0$2$33$"			return Collections.emptySet();"
"PathMatchingResourcePatternResolver.java:763"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:764"$0$0$0$3$27$"		if (!rootDir.canRead()) {"
"PathMatchingResourcePatternResolver.java:765"$0$0$0$3$32$"			if (logger.isInfoEnabled()) {"
"PathMatchingResourcePatternResolver.java:766"$1$0$0$11$105$"				logger.info(""Skipping search for matching files underneath directory ["" + rootDir.getAbsolutePath() +"
"PathMatchingResourcePatternResolver.java:767"$0$0$0$11$72$"						""] because the application is not allowed to read the directory"");"
"PathMatchingResourcePatternResolver.java:768"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:769"$0$0$0$2$33$"			return Collections.emptySet();"
"PathMatchingResourcePatternResolver.java:770"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:771"$1$0$0$6$91$"		String fullPattern = StringUtils.replace(rootDir.getAbsolutePath(), File.separator, ""/"");"
"PathMatchingResourcePatternResolver.java:772"$0$0$0$3$33$"		if (!pattern.startsWith(""/"")) {"
"PathMatchingResourcePatternResolver.java:773"$0$0$0$3$22$"			fullPattern += ""/"";"
"PathMatchingResourcePatternResolver.java:774"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:775"$0$0$0$7$80$"		fullPattern = fullPattern + StringUtils.replace(pattern, File.separator, ""/"");"
"PathMatchingResourcePatternResolver.java:776"$0$0$0$5$44$"		Set<File> result = new LinkedHashSet<>(8);"
"PathMatchingResourcePatternResolver.java:777"$0$0$0$3$56$"		doRetrieveMatchingFiles(fullPattern, rootDir, result);"
"PathMatchingResourcePatternResolver.java:778"$0$0$0$2$16$"		return result;"
"PathMatchingResourcePatternResolver.java:779"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:780"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:781"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:782"$0$0$0$9$60$"	 * Recursively retrieve files that match the given pattern,"
"PathMatchingResourcePatternResolver.java:783"$0$0$0$8$41$"	 * adding them to the given result list."
"PathMatchingResourcePatternResolver.java:784"$0$0$0$8$52$"	 * @param fullPattern the pattern to match against,"
"PathMatchingResourcePatternResolver.java:785"$0$0$0$6$38$"	 * with prepended root directory path"
"PathMatchingResourcePatternResolver.java:786"$0$0$0$6$36$"	 * @param dir the current directory"
"PathMatchingResourcePatternResolver.java:787"$0$0$0$12$62$"	 * @param result the Set of matching File instances to add to"
"PathMatchingResourcePatternResolver.java:788"$0$0$0$10$68$"	 * @throws IOException if directory contents could not be retrieved"
"PathMatchingResourcePatternResolver.java:789"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:790"$0$0$0$11$108$"	protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {"
"PathMatchingResourcePatternResolver.java:791"$0$0$0$3$32$"		if (logger.isTraceEnabled()) {"
"PathMatchingResourcePatternResolver.java:792"$1$0$0$6$65$"			logger.trace(""Searching directory ["" + dir.getAbsolutePath() +"
"PathMatchingResourcePatternResolver.java:793"$0$0$0$10$59$"					""] for files matching pattern ["" + fullPattern + ""]"");"
"PathMatchingResourcePatternResolver.java:794"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:795"$0$0$0$6$43$"		for (File content : listDirectory(dir)) {"
"PathMatchingResourcePatternResolver.java:796"$1$0$0$6$89$"			String currPath = StringUtils.replace(content.getAbsolutePath(), File.separator, ""/"");"
"PathMatchingResourcePatternResolver.java:797"$1$0$0$8$91$"			if (content.isDirectory() && getPathMatcher().matchStart(fullPattern, currPath + ""/"")) {"
"PathMatchingResourcePatternResolver.java:798"$0$0$0$3$29$"				if (!content.canRead()) {"
"PathMatchingResourcePatternResolver.java:799"$0$0$0$3$35$"					if (logger.isDebugEnabled()) {"
"PathMatchingResourcePatternResolver.java:800"$1$0$0$6$70$"						logger.debug(""Skipping subdirectory ["" + dir.getAbsolutePath() +"
"PathMatchingResourcePatternResolver.java:801"$0$0$0$11$74$"								""] because the application is not allowed to read the directory"");"
"PathMatchingResourcePatternResolver.java:802"$0$0$0$1$6$"					}"
"PathMatchingResourcePatternResolver.java:803"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:804"$0$0$0$2$10$"				else {"
"PathMatchingResourcePatternResolver.java:805"$0$0$0$3$59$"					doRetrieveMatchingFiles(fullPattern, content, result);"
"PathMatchingResourcePatternResolver.java:806"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:807"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:808"$1$0$0$4$55$"			if (getPathMatcher().match(fullPattern, currPath)) {"
"PathMatchingResourcePatternResolver.java:809"$0$0$0$1$24$"				result.add(content);"
"PathMatchingResourcePatternResolver.java:810"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:811"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:812"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:813"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:814"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:815"$0$0$0$11$60$"	 * Determine a sorted list of files in the given directory."
"PathMatchingResourcePatternResolver.java:816"$0$0$0$7$42$"	 * @param dir the directory to introspect"
"PathMatchingResourcePatternResolver.java:817"$0$0$0$12$71$"	 * @return the sorted list of files (by default in alphabetical order)"
"PathMatchingResourcePatternResolver.java:818"$0$0$0$3$14$"	 * @since 5.1"
"PathMatchingResourcePatternResolver.java:819"$0$0$0$3$25$"	 * @see File#listFiles()"
"PathMatchingResourcePatternResolver.java:820"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:821"$0$0$0$5$43$"	protected File[] listDirectory(File dir) {"
"PathMatchingResourcePatternResolver.java:822"$0$0$0$4$33$"		File[] files = dir.listFiles();"
"PathMatchingResourcePatternResolver.java:823"$0$0$0$5$22$"		if (files == null) {"
"PathMatchingResourcePatternResolver.java:824"$0$0$0$3$32$"			if (logger.isInfoEnabled()) {"
"PathMatchingResourcePatternResolver.java:825"$1$0$0$11$92$"				logger.info(""Could not retrieve contents of directory ["" + dir.getAbsolutePath() + ""]"");"
"PathMatchingResourcePatternResolver.java:826"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:827"$0$0$0$3$22$"			return new File[0];"
"PathMatchingResourcePatternResolver.java:828"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:829"$1$0$0$2$58$"		Arrays.sort(files, Comparator.comparing(File::getName));"
"PathMatchingResourcePatternResolver.java:830"$0$0$0$2$15$"		return files;"
"PathMatchingResourcePatternResolver.java:831"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:832"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:833"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:834"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:835"$0$0$0$13$78$"	 * Inner delegate class, avoiding a hard JBoss VFS API dependency at runtime."
"PathMatchingResourcePatternResolver.java:836"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:837"$0$0$0$5$51$"	private static class VfsResourceMatchingDelegate {"
"PathMatchingResourcePatternResolver.java:838"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:839"$0$0$0$4$52$"		public static Set<Resource> findMatchingResources("
"PathMatchingResourcePatternResolver.java:840"$0$0$0$9$89$"				URL rootDirURL, String locationPattern, PathMatcher pathMatcher) throws IOException {"
"PathMatchingResourcePatternResolver.java:841"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:842"$0$0$0$4$54$"			Object root = VfsPatternUtils.findRoot(rootDirURL);"
"PathMatchingResourcePatternResolver.java:843"$0$0$0$3$38$"			PatternVirtualFileVisitor visitor ="
"PathMatchingResourcePatternResolver.java:844"$1$0$0$4$96$"					new PatternVirtualFileVisitor(VfsPatternUtils.getPath(root), locationPattern, pathMatcher);"
"PathMatchingResourcePatternResolver.java:845"$0$0$0$2$40$"			VfsPatternUtils.visit(root, visitor);"
"PathMatchingResourcePatternResolver.java:846"$1$0$0$2$33$"			return visitor.getResources();"
"PathMatchingResourcePatternResolver.java:847"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:848"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:849"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:850"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:851"$0$0$0$1$4$"	/**"
"PathMatchingResourcePatternResolver.java:852"$0$0$0$7$43$"	 * VFS visitor for path matching purposes."
"PathMatchingResourcePatternResolver.java:853"$0$0$0$1$4$"	 */"
"PathMatchingResourcePatternResolver.java:854"$0$0$0$1$28$"	@SuppressWarnings(""unused"")"
"PathMatchingResourcePatternResolver.java:855"$0$0$0$7$78$"	private static class PatternVirtualFileVisitor implements InvocationHandler {"
"PathMatchingResourcePatternResolver.java:856"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:857"$0$0$0$4$34$"		private final String subPattern;"
"PathMatchingResourcePatternResolver.java:858"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:859"$0$0$0$4$40$"		private final PathMatcher pathMatcher;"
"PathMatchingResourcePatternResolver.java:860"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:861"$0$0$0$4$32$"		private final String rootPath;"
"PathMatchingResourcePatternResolver.java:862"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:863"$0$0$0$7$64$"		private final Set<Resource> resources = new LinkedHashSet<>();"
"PathMatchingResourcePatternResolver.java:864"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:865"$0$0$0$8$97$"		public PatternVirtualFileVisitor(String rootPath, String subPattern, PathMatcher pathMatcher) {"
"PathMatchingResourcePatternResolver.java:866"$0$0$0$3$32$"			this.subPattern = subPattern;"
"PathMatchingResourcePatternResolver.java:867"$0$0$0$3$34$"			this.pathMatcher = pathMatcher;"
"PathMatchingResourcePatternResolver.java:868"$0$0$0$11$94$"			this.rootPath = (rootPath.isEmpty() || rootPath.endsWith(""/"") ? rootPath : rootPath + ""/"");"
"PathMatchingResourcePatternResolver.java:869"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:870"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:871"$0$0$0$1$11$"		@Override"
"PathMatchingResourcePatternResolver.java:872"$0$0$0$1$11$"		@Nullable"
"PathMatchingResourcePatternResolver.java:873"$0$0$0$11$85$"		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {"
"PathMatchingResourcePatternResolver.java:874"$1$0$0$4$40$"			String methodName = method.getName();"
"PathMatchingResourcePatternResolver.java:875"$1$0$0$5$52$"			if (Object.class == method.getDeclaringClass()) {"
"PathMatchingResourcePatternResolver.java:876"$0$0$0$3$38$"				if (methodName.equals(""equals"")) {"
"PathMatchingResourcePatternResolver.java:877"$0$0$1$8$55$"					// Only consider equal when proxies are identical."
"PathMatchingResourcePatternResolver.java:878"$0$0$0$4$31$"					return (proxy == args[0]);"
"PathMatchingResourcePatternResolver.java:879"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:880"$0$0$0$4$45$"				else if (methodName.equals(""hashCode"")) {"
"PathMatchingResourcePatternResolver.java:881"$0$0$0$2$43$"					return System.identityHashCode(proxy);"
"PathMatchingResourcePatternResolver.java:882"$0$0$0$1$5$"				}"
"PathMatchingResourcePatternResolver.java:883"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:884"$1$0$0$4$49$"			else if (""getAttributes"".equals(methodName)) {"
"PathMatchingResourcePatternResolver.java:885"$1$0$0$2$27$"				return getAttributes();"
"PathMatchingResourcePatternResolver.java:886"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:887"$0$0$0$4$41$"			else if (""visit"".equals(methodName)) {"
"PathMatchingResourcePatternResolver.java:888"$0$0$0$1$19$"				visit(args[0]);"
"PathMatchingResourcePatternResolver.java:889"$0$0$0$2$16$"				return null;"
"PathMatchingResourcePatternResolver.java:890"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:891"$0$0$0$4$44$"			else if (""toString"".equals(methodName)) {"
"PathMatchingResourcePatternResolver.java:892"$0$0$0$2$22$"				return toString();"
"PathMatchingResourcePatternResolver.java:893"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:894"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:895"$0$0$0$8$78$"			throw new IllegalStateException(""Unexpected method invocation: "" + method);"
"PathMatchingResourcePatternResolver.java:896"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:897"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:898"$0$0$0$5$41$"		public void visit(Object vfsResource) {"
"PathMatchingResourcePatternResolver.java:899"$0$0$0$2$46$"			if (this.pathMatcher.match(this.subPattern,"
"PathMatchingResourcePatternResolver.java:900"$1$0$0$2$79$"					VfsPatternUtils.getPath(vfsResource).substring(this.rootPath.length()))) {"
"PathMatchingResourcePatternResolver.java:901"$0$0$0$2$53$"				this.resources.add(new VfsResource(vfsResource));"
"PathMatchingResourcePatternResolver.java:902"$0$0$0$1$4$"			}"
"PathMatchingResourcePatternResolver.java:903"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:904"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:905"$0$0$0$1$11$"		@Nullable"
"PathMatchingResourcePatternResolver.java:906"$1$0$0$4$33$"		public Object getAttributes() {"
"PathMatchingResourcePatternResolver.java:907"$1$0$0$2$49$"			return VfsPatternUtils.getVisitorAttributes();"
"PathMatchingResourcePatternResolver.java:908"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:909"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:910"$1$0$0$4$39$"		public Set<Resource> getResources() {"
"PathMatchingResourcePatternResolver.java:911"$0$0$0$2$25$"			return this.resources;"
"PathMatchingResourcePatternResolver.java:912"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:913"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:914"$0$0$0$4$21$"		public int size() {"
"PathMatchingResourcePatternResolver.java:915"$0$0$0$2$32$"			return this.resources.size();"
"PathMatchingResourcePatternResolver.java:916"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:917"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:918"$0$0$0$1$11$"		@Override"
"PathMatchingResourcePatternResolver.java:919"$0$0$0$4$28$"		public String toString() {"
"PathMatchingResourcePatternResolver.java:920"$0$0$0$11$79$"			return ""sub-pattern: "" + this.subPattern + "", resources: "" + this.resources;"
"PathMatchingResourcePatternResolver.java:921"$0$0$0$1$3$"		}"
"PathMatchingResourcePatternResolver.java:922"$0$0$0$1$2$"	}"
"PathMatchingResourcePatternResolver.java:923"$0$0$0$0$0$""
"PathMatchingResourcePatternResolver.java:924"$0$0$0$1$1$"}"
"LocalVariableTableParameterNameDiscoverer.java:1"$0$0$0$1$2$"/*"
"LocalVariableTableParameterNameDiscoverer.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"LocalVariableTableParameterNameDiscoverer.java:3"$0$0$0$1$2$" *"
"LocalVariableTableParameterNameDiscoverer.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"LocalVariableTableParameterNameDiscoverer.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"LocalVariableTableParameterNameDiscoverer.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"LocalVariableTableParameterNameDiscoverer.java:7"$0$0$0$1$2$" *"
"LocalVariableTableParameterNameDiscoverer.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"LocalVariableTableParameterNameDiscoverer.java:9"$0$0$0$1$2$" *"
"LocalVariableTableParameterNameDiscoverer.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"LocalVariableTableParameterNameDiscoverer.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"LocalVariableTableParameterNameDiscoverer.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"LocalVariableTableParameterNameDiscoverer.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"LocalVariableTableParameterNameDiscoverer.java:14"$0$0$0$5$33$" * limitations under the License."
"LocalVariableTableParameterNameDiscoverer.java:15"$0$0$0$1$3$" */"
"LocalVariableTableParameterNameDiscoverer.java:16"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:17"$0$0$0$2$33$"package org.springframework.core;"
"LocalVariableTableParameterNameDiscoverer.java:18"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:19"$0$0$0$2$27$"import java.io.IOException;"
"LocalVariableTableParameterNameDiscoverer.java:20"$0$0$0$2$27$"import java.io.InputStream;"
"LocalVariableTableParameterNameDiscoverer.java:21"$0$0$0$2$37$"import java.lang.reflect.Constructor;"
"LocalVariableTableParameterNameDiscoverer.java:22"$0$0$0$2$36$"import java.lang.reflect.Executable;"
"LocalVariableTableParameterNameDiscoverer.java:23"$0$0$0$2$32$"import java.lang.reflect.Method;"
"LocalVariableTableParameterNameDiscoverer.java:24"$0$0$0$2$29$"import java.util.Collections;"
"LocalVariableTableParameterNameDiscoverer.java:25"$0$0$0$2$21$"import java.util.Map;"
"LocalVariableTableParameterNameDiscoverer.java:26"$0$0$0$2$46$"import java.util.concurrent.ConcurrentHashMap;"
"LocalVariableTableParameterNameDiscoverer.java:27"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:28"$0$0$0$2$38$"import org.apache.commons.logging.Log;"
"LocalVariableTableParameterNameDiscoverer.java:29"$0$0$0$2$45$"import org.apache.commons.logging.LogFactory;"
"LocalVariableTableParameterNameDiscoverer.java:30"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:31"$0$0$0$2$43$"import org.springframework.asm.ClassReader;"
"LocalVariableTableParameterNameDiscoverer.java:32"$0$0$0$2$44$"import org.springframework.asm.ClassVisitor;"
"LocalVariableTableParameterNameDiscoverer.java:33"$0$0$0$2$37$"import org.springframework.asm.Label;"
"LocalVariableTableParameterNameDiscoverer.java:34"$0$0$0$2$45$"import org.springframework.asm.MethodVisitor;"
"LocalVariableTableParameterNameDiscoverer.java:35"$0$0$0$2$39$"import org.springframework.asm.Opcodes;"
"LocalVariableTableParameterNameDiscoverer.java:36"$0$0$0$2$45$"import org.springframework.asm.SpringAsmInfo;"
"LocalVariableTableParameterNameDiscoverer.java:37"$0$0$0$2$36$"import org.springframework.asm.Type;"
"LocalVariableTableParameterNameDiscoverer.java:38"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"LocalVariableTableParameterNameDiscoverer.java:39"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"LocalVariableTableParameterNameDiscoverer.java:40"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:41"$0$0$0$1$3$"/**"
"LocalVariableTableParameterNameDiscoverer.java:42"$0$0$0$9$85$" * Implementation of {@link ParameterNameDiscoverer} that uses the LocalVariableTable"
"LocalVariableTableParameterNameDiscoverer.java:43"$0$0$0$11$76$" * information in the method attributes to discover parameter names. Returns"
"LocalVariableTableParameterNameDiscoverer.java:44"$0$0$0$12$73$" * {@code null} if the class file was compiled without debug information."
"LocalVariableTableParameterNameDiscoverer.java:45"$0$0$0$1$2$" *"
"LocalVariableTableParameterNameDiscoverer.java:46"$0$0$0$12$86$" * <p>Uses ObjectWeb's ASM library for analyzing class files. Each discoverer instance"
"LocalVariableTableParameterNameDiscoverer.java:47"$0$0$0$13$86$" * caches the ASM discovered information for each introspected Class, in a thread-safe"
"LocalVariableTableParameterNameDiscoverer.java:48"$0$0$0$13$91$" * manner. It is recommended to reuse ParameterNameDiscoverer instances as far as possible."
"LocalVariableTableParameterNameDiscoverer.java:49"$0$0$0$1$2$" *"
"LocalVariableTableParameterNameDiscoverer.java:50"$0$0$0$4$24$" * @author Adrian Colyer"
"LocalVariableTableParameterNameDiscoverer.java:51"$0$0$0$4$22$" * @author Costin Leau"
"LocalVariableTableParameterNameDiscoverer.java:52"$0$0$0$4$26$" * @author Juergen Hoeller"
"LocalVariableTableParameterNameDiscoverer.java:53"$0$0$0$4$22$" * @author Chris Beams"
"LocalVariableTableParameterNameDiscoverer.java:54"$0$0$0$4$22$" * @author Sam Brannen"
"LocalVariableTableParameterNameDiscoverer.java:55"$0$0$0$3$13$" * @since 2.0"
"LocalVariableTableParameterNameDiscoverer.java:56"$0$0$0$1$3$" */"
"LocalVariableTableParameterNameDiscoverer.java:57"$0$0$0$6$91$"public class LocalVariableTableParameterNameDiscoverer implements ParameterNameDiscoverer {"
"LocalVariableTableParameterNameDiscoverer.java:58"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:59"$1$0$0$7$102$"	private static final Log logger = LogFactory.getLog(LocalVariableTableParameterNameDiscoverer.class);"
"LocalVariableTableParameterNameDiscoverer.java:60"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:61"$0$0$1$12$61$"	// marker object for classes that do not have any debug info"
"LocalVariableTableParameterNameDiscoverer.java:62"$0$0$0$8$91$"	private static final Map<Executable, String[]> NO_DEBUG_INFO_MAP = Collections.emptyMap();"
"LocalVariableTableParameterNameDiscoverer.java:63"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:64"$0$0$1$21$103$"	// the cache uses a nested index (value is a map) to keep the top level cache relatively small in size"
"LocalVariableTableParameterNameDiscoverer.java:65"$0$0$0$9$106$"	private final Map<Class<?>, Map<Executable, String[]>> parameterNamesCache = new ConcurrentHashMap<>(32);"
"LocalVariableTableParameterNameDiscoverer.java:66"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:67"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:68"$0$0$0$1$10$"	@Override"
"LocalVariableTableParameterNameDiscoverer.java:69"$0$0$0$1$10$"	@Nullable"
"LocalVariableTableParameterNameDiscoverer.java:70"$1$0$0$5$51$"	public String[] getParameterNames(Method method) {"
"LocalVariableTableParameterNameDiscoverer.java:71"$0$0$0$4$73$"		Method originalMethod = BridgeMethodResolver.findBridgedMethod(method);"
"LocalVariableTableParameterNameDiscoverer.java:72"$0$0$0$2$45$"		return doGetParameterNames(originalMethod);"
"LocalVariableTableParameterNameDiscoverer.java:73"$0$0$0$1$2$"	}"
"LocalVariableTableParameterNameDiscoverer.java:74"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:75"$0$0$0$1$10$"	@Override"
"LocalVariableTableParameterNameDiscoverer.java:76"$0$0$0$1$10$"	@Nullable"
"LocalVariableTableParameterNameDiscoverer.java:77"$1$0$0$5$57$"	public String[] getParameterNames(Constructor<?> ctor) {"
"LocalVariableTableParameterNameDiscoverer.java:78"$0$0$0$2$35$"		return doGetParameterNames(ctor);"
"LocalVariableTableParameterNameDiscoverer.java:79"$0$0$0$1$2$"	}"
"LocalVariableTableParameterNameDiscoverer.java:80"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:81"$0$0$0$1$10$"	@Nullable"
"LocalVariableTableParameterNameDiscoverer.java:82"$0$0$0$5$62$"	private String[] doGetParameterNames(Executable executable) {"
"LocalVariableTableParameterNameDiscoverer.java:83"$1$0$0$4$59$"		Class<?> declaringClass = executable.getDeclaringClass();"
"LocalVariableTableParameterNameDiscoverer.java:84"$0$0$0$6$111$"		Map<Executable, String[]> map = this.parameterNamesCache.computeIfAbsent(declaringClass, this::inspectClass);"
"LocalVariableTableParameterNameDiscoverer.java:85"$1$0$0$8$65$"		return (map != NO_DEBUG_INFO_MAP ? map.get(executable) : null);"
"LocalVariableTableParameterNameDiscoverer.java:86"$0$0$0$1$2$"	}"
"LocalVariableTableParameterNameDiscoverer.java:87"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:88"$0$0$0$1$4$"	/**"
"LocalVariableTableParameterNameDiscoverer.java:89"$1$0$0$5$30$"	 * Inspects the target class."
"LocalVariableTableParameterNameDiscoverer.java:90"$0$0$0$13$75$"	 * <p>Exceptions will be logged, and a marker map returned to indicate the"
"LocalVariableTableParameterNameDiscoverer.java:91"$0$0$0$5$30$"	 * lack of debug information."
"LocalVariableTableParameterNameDiscoverer.java:92"$0$0$0$1$4$"	 */"
"LocalVariableTableParameterNameDiscoverer.java:93"$0$0$0$6$65$"	private Map<Executable, String[]> inspectClass(Class<?> clazz) {"
"LocalVariableTableParameterNameDiscoverer.java:94"$2$0$0$4$81$"		InputStream is = clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz));"
"LocalVariableTableParameterNameDiscoverer.java:95"$0$0$0$5$19$"		if (is == null) {"
"LocalVariableTableParameterNameDiscoverer.java:96"$0$0$1$13$63$"			// We couldn't load the class file, which is not fatal as it"
"LocalVariableTableParameterNameDiscoverer.java:97"$0$0$1$11$73$"			// simply means this method of discovering parameter names won't work."
"LocalVariableTableParameterNameDiscoverer.java:98"$0$0$0$3$33$"			if (logger.isDebugEnabled()) {"
"LocalVariableTableParameterNameDiscoverer.java:99"$0$0$0$10$66$"				logger.debug(""Cannot find '.class' file for class ["" + clazz +"
"LocalVariableTableParameterNameDiscoverer.java:100"$0$0$0$8$68$"						""] - unable to determine constructor/method parameter names"");"
"LocalVariableTableParameterNameDiscoverer.java:101"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:102"$0$0$0$2$28$"			return NO_DEBUG_INFO_MAP;"
"LocalVariableTableParameterNameDiscoverer.java:103"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:104"$0$0$0$2$7$"		try {"
"LocalVariableTableParameterNameDiscoverer.java:105"$0$0$0$5$49$"			ClassReader classReader = new ClassReader(is);"
"LocalVariableTableParameterNameDiscoverer.java:106"$0$0$0$6$63$"			Map<Executable, String[]> map = new ConcurrentHashMap<>(32);"
"LocalVariableTableParameterNameDiscoverer.java:107"$0$0$0$4$74$"			classReader.accept(new ParameterNameDiscoveringVisitor(clazz, map), 0);"
"LocalVariableTableParameterNameDiscoverer.java:108"$0$0$0$2$14$"			return map;"
"LocalVariableTableParameterNameDiscoverer.java:109"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:110"$0$0$0$4$26$"		catch (IOException ex) {"
"LocalVariableTableParameterNameDiscoverer.java:111"$0$0$0$3$33$"			if (logger.isDebugEnabled()) {"
"LocalVariableTableParameterNameDiscoverer.java:112"$0$0$0$12$85$"				logger.debug(""Exception thrown while reading '.class' file for class ["" + clazz +"
"LocalVariableTableParameterNameDiscoverer.java:113"$0$0$0$9$72$"						""] - unable to determine constructor/method parameter names"", ex);"
"LocalVariableTableParameterNameDiscoverer.java:114"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:115"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:116"$0$0$0$4$39$"		catch (IllegalArgumentException ex) {"
"LocalVariableTableParameterNameDiscoverer.java:117"$0$0$0$3$33$"			if (logger.isDebugEnabled()) {"
"LocalVariableTableParameterNameDiscoverer.java:118"$0$0$0$11$73$"				logger.debug(""ASM ClassReader failed to parse class file ["" + clazz +"
"LocalVariableTableParameterNameDiscoverer.java:119"$0$0$0$16$84$"						""], probably due to a new Java class file version that isn't supported yet "" +"
"LocalVariableTableParameterNameDiscoverer.java:120"$0$0$0$8$70$"						""- unable to determine constructor/method parameter names"", ex);"
"LocalVariableTableParameterNameDiscoverer.java:121"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:122"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:123"$0$0$0$2$11$"		finally {"
"LocalVariableTableParameterNameDiscoverer.java:124"$0$0$0$2$8$"			try {"
"LocalVariableTableParameterNameDiscoverer.java:125"$0$0$0$1$15$"				is.close();"
"LocalVariableTableParameterNameDiscoverer.java:126"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:127"$0$0$0$4$27$"			catch (IOException ex) {"
"LocalVariableTableParameterNameDiscoverer.java:128"$0$0$1$2$13$"				// ignore"
"LocalVariableTableParameterNameDiscoverer.java:129"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:130"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:131"$0$0$0$2$27$"		return NO_DEBUG_INFO_MAP;"
"LocalVariableTableParameterNameDiscoverer.java:132"$0$0$0$1$2$"	}"
"LocalVariableTableParameterNameDiscoverer.java:133"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:134"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:135"$0$0$0$1$4$"	/**"
"LocalVariableTableParameterNameDiscoverer.java:136"$0$0$0$11$68$"	 * Helper class that inspects all methods and constructors and then"
"LocalVariableTableParameterNameDiscoverer.java:137"$0$0$0$12$74$"	 * attempts to find the parameter names for the given {@link Executable}."
"LocalVariableTableParameterNameDiscoverer.java:138"$0$0$0$1$4$"	 */"
"LocalVariableTableParameterNameDiscoverer.java:139"$0$0$0$7$76$"	private static class ParameterNameDiscoveringVisitor extends ClassVisitor {"
"LocalVariableTableParameterNameDiscoverer.java:140"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:141"$0$0$0$7$61$"		private static final String STATIC_CLASS_INIT = ""<clinit>"";"
"LocalVariableTableParameterNameDiscoverer.java:142"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:143"$0$0$0$4$31$"		private final Class<?> clazz;"
"LocalVariableTableParameterNameDiscoverer.java:144"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:145"$0$0$0$5$56$"		private final Map<Executable, String[]> executableMap;"
"LocalVariableTableParameterNameDiscoverer.java:146"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:147"$0$0$0$7$99$"		public ParameterNameDiscoveringVisitor(Class<?> clazz, Map<Executable, String[]> executableMap) {"
"LocalVariableTableParameterNameDiscoverer.java:148"$0$0$0$1$36$"			super(SpringAsmInfo.ASM_VERSION);"
"LocalVariableTableParameterNameDiscoverer.java:149"$0$0$0$3$22$"			this.clazz = clazz;"
"LocalVariableTableParameterNameDiscoverer.java:150"$0$0$0$3$38$"			this.executableMap = executableMap;"
"LocalVariableTableParameterNameDiscoverer.java:151"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:152"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:153"$0$0$0$1$11$"		@Override"
"LocalVariableTableParameterNameDiscoverer.java:154"$0$0$0$1$11$"		@Nullable"
"LocalVariableTableParameterNameDiscoverer.java:155"$0$0$0$13$113$"		public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {"
"LocalVariableTableParameterNameDiscoverer.java:156"$0$0$1$9$64$"			// exclude synthetic + bridged && static class initialization"
"LocalVariableTableParameterNameDiscoverer.java:157"$0$0$0$5$74$"			if (!isSyntheticOrBridged(access) && !STATIC_CLASS_INIT.equals(name)) {"
"LocalVariableTableParameterNameDiscoverer.java:158"$0$0$0$7$103$"				return new LocalVariableTableVisitor(this.clazz, this.executableMap, name, desc, isStatic(access));"
"LocalVariableTableParameterNameDiscoverer.java:159"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:160"$0$0$0$2$15$"			return null;"
"LocalVariableTableParameterNameDiscoverer.java:161"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:162"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:163"$0$0$0$6$59$"		private static boolean isSyntheticOrBridged(int access) {"
"LocalVariableTableParameterNameDiscoverer.java:164"$0$0$0$10$83$"			return (((access & Opcodes.ACC_SYNTHETIC) | (access & Opcodes.ACC_BRIDGE)) > 0);"
"LocalVariableTableParameterNameDiscoverer.java:165"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:166"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:167"$0$0$0$6$47$"		private static boolean isStatic(int access) {"
"LocalVariableTableParameterNameDiscoverer.java:168"$0$0$0$6$46$"			return ((access & Opcodes.ACC_STATIC) > 0);"
"LocalVariableTableParameterNameDiscoverer.java:169"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:170"$0$0$0$1$2$"	}"
"LocalVariableTableParameterNameDiscoverer.java:171"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:172"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:173"$0$0$0$7$71$"	private static class LocalVariableTableVisitor extends MethodVisitor {"
"LocalVariableTableParameterNameDiscoverer.java:174"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:175"$0$0$0$7$53$"		private static final String CONSTRUCTOR = ""<init>"";"
"LocalVariableTableParameterNameDiscoverer.java:176"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:177"$0$0$0$4$31$"		private final Class<?> clazz;"
"LocalVariableTableParameterNameDiscoverer.java:178"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:179"$0$0$0$5$56$"		private final Map<Executable, String[]> executableMap;"
"LocalVariableTableParameterNameDiscoverer.java:180"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:181"$0$0$0$4$28$"		private final String name;"
"LocalVariableTableParameterNameDiscoverer.java:182"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:183"$0$0$0$4$28$"		private final Type[] args;"
"LocalVariableTableParameterNameDiscoverer.java:184"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:185"$0$0$0$4$40$"		private final String[] parameterNames;"
"LocalVariableTableParameterNameDiscoverer.java:186"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:187"$0$0$0$4$33$"		private final boolean isStatic;"
"LocalVariableTableParameterNameDiscoverer.java:188"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:189"$0$0$0$5$37$"		private boolean hasLvtInfo = false;"
"LocalVariableTableParameterNameDiscoverer.java:190"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:191"$0$0$0$1$4$"		/*"
"LocalVariableTableParameterNameDiscoverer.java:192"$0$0$0$15$77$"		 * The nth entry contains the slot index of the LVT table entry holding the"
"LocalVariableTableParameterNameDiscoverer.java:193"$0$0$0$7$41$"		 * argument name for the nth parameter."
"LocalVariableTableParameterNameDiscoverer.java:194"$0$0$0$1$5$"		 */"
"LocalVariableTableParameterNameDiscoverer.java:195"$0$0$0$4$35$"		private final int[] lvtSlotIndex;"
"LocalVariableTableParameterNameDiscoverer.java:196"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:197"$0$0$0$13$127$"		public LocalVariableTableVisitor(Class<?> clazz, Map<Executable, String[]> map, String name, String desc, boolean isStatic) {"
"LocalVariableTableParameterNameDiscoverer.java:198"$0$0$0$1$36$"			super(SpringAsmInfo.ASM_VERSION);"
"LocalVariableTableParameterNameDiscoverer.java:199"$0$0$0$3$22$"			this.clazz = clazz;"
"LocalVariableTableParameterNameDiscoverer.java:200"$0$0$0$3$28$"			this.executableMap = map;"
"LocalVariableTableParameterNameDiscoverer.java:201"$0$0$0$3$20$"			this.name = name;"
"LocalVariableTableParameterNameDiscoverer.java:202"$1$0$0$3$43$"			this.args = Type.getArgumentTypes(desc);"
"LocalVariableTableParameterNameDiscoverer.java:203"$0$0$0$4$54$"			this.parameterNames = new String[this.args.length];"
"LocalVariableTableParameterNameDiscoverer.java:204"$0$0$0$3$28$"			this.isStatic = isStatic;"
"LocalVariableTableParameterNameDiscoverer.java:205"$0$0$0$4$66$"			this.lvtSlotIndex = computeLvtSlotIndices(isStatic, this.args);"
"LocalVariableTableParameterNameDiscoverer.java:206"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:207"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:208"$0$0$0$1$11$"		@Override"
"LocalVariableTableParameterNameDiscoverer.java:209"$0$0$0$15$120$"		public void visitLocalVariable(String name, String description, String signature, Label start, Label end, int index) {"
"LocalVariableTableParameterNameDiscoverer.java:210"$0$0$0$3$26$"			this.hasLvtInfo = true;"
"LocalVariableTableParameterNameDiscoverer.java:211"$0$0$0$10$55$"			for (int i = 0; i < this.lvtSlotIndex.length; i++) {"
"LocalVariableTableParameterNameDiscoverer.java:212"$0$0$0$5$40$"				if (this.lvtSlotIndex[i] == index) {"
"LocalVariableTableParameterNameDiscoverer.java:213"$0$0$0$3$35$"					this.parameterNames[i] = name;"
"LocalVariableTableParameterNameDiscoverer.java:214"$0$0$0$1$5$"				}"
"LocalVariableTableParameterNameDiscoverer.java:215"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:216"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:217"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:218"$0$0$0$1$11$"		@Override"
"LocalVariableTableParameterNameDiscoverer.java:219"$0$0$0$4$26$"		public void visitEnd() {"
"LocalVariableTableParameterNameDiscoverer.java:220"$0$0$0$9$79$"			if (this.hasLvtInfo || (this.isStatic && this.parameterNames.length == 0)) {"
"LocalVariableTableParameterNameDiscoverer.java:221"$0$0$1$11$73$"				// visitLocalVariable will never be called for static no args methods"
"LocalVariableTableParameterNameDiscoverer.java:222"$0$0$1$7$45$"				// which doesn't use any local variables."
"LocalVariableTableParameterNameDiscoverer.java:223"$0$0$1$13$73$"				// This means that hasLvtInfo could be false for that kind of methods"
"LocalVariableTableParameterNameDiscoverer.java:224"$0$0$1$9$49$"				// even if the class has local variable info."
"LocalVariableTableParameterNameDiscoverer.java:225"$0$0$0$2$69$"				this.executableMap.put(resolveExecutable(), this.parameterNames);"
"LocalVariableTableParameterNameDiscoverer.java:226"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:227"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:228"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:229"$0$0$0$4$42$"		private Executable resolveExecutable() {"
"LocalVariableTableParameterNameDiscoverer.java:230"$1$0$0$4$52$"			ClassLoader loader = this.clazz.getClassLoader();"
"LocalVariableTableParameterNameDiscoverer.java:231"$0$0$0$5$56$"			Class<?>[] argTypes = new Class<?>[this.args.length];"
"LocalVariableTableParameterNameDiscoverer.java:232"$0$0$0$10$47$"			for (int i = 0; i < this.args.length; i++) {"
"LocalVariableTableParameterNameDiscoverer.java:233"$1$0$0$4$83$"				argTypes[i] = ClassUtils.resolveClassName(this.args[i].getClassName(), loader);"
"LocalVariableTableParameterNameDiscoverer.java:234"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:235"$0$0$0$2$8$"			try {"
"LocalVariableTableParameterNameDiscoverer.java:236"$0$0$0$3$40$"				if (CONSTRUCTOR.equals(this.name)) {"
"LocalVariableTableParameterNameDiscoverer.java:237"$1$0$0$2$56$"					return this.clazz.getDeclaredConstructor(argTypes);"
"LocalVariableTableParameterNameDiscoverer.java:238"$0$0$0$1$5$"				}"
"LocalVariableTableParameterNameDiscoverer.java:239"$1$0$0$3$61$"				return this.clazz.getDeclaredMethod(this.name, argTypes);"
"LocalVariableTableParameterNameDiscoverer.java:240"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:241"$0$0$0$4$37$"			catch (NoSuchMethodException ex) {"
"LocalVariableTableParameterNameDiscoverer.java:242"$0$0$0$7$60$"				throw new IllegalStateException(""Method ["" + this.name +"
"LocalVariableTableParameterNameDiscoverer.java:243"$0$0$0$16$92$"						""] was discovered in the .class file but cannot be resolved in the class object"", ex);"
"LocalVariableTableParameterNameDiscoverer.java:244"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:245"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:246"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:247"$0$0$0$8$83$"		private static int[] computeLvtSlotIndices(boolean isStatic, Type[] paramTypes) {"
"LocalVariableTableParameterNameDiscoverer.java:248"$0$0$0$5$47$"			int[] lvtIndex = new int[paramTypes.length];"
"LocalVariableTableParameterNameDiscoverer.java:249"$0$0$0$8$38$"			int nextIndex = (isStatic ? 0 : 1);"
"LocalVariableTableParameterNameDiscoverer.java:250"$0$0$0$10$48$"			for (int i = 0; i < paramTypes.length; i++) {"
"LocalVariableTableParameterNameDiscoverer.java:251"$0$0$0$3$28$"				lvtIndex[i] = nextIndex;"
"LocalVariableTableParameterNameDiscoverer.java:252"$0$0$0$3$36$"				if (isWideType(paramTypes[i])) {"
"LocalVariableTableParameterNameDiscoverer.java:253"$0$0$0$3$20$"					nextIndex += 2;"
"LocalVariableTableParameterNameDiscoverer.java:254"$0$0$0$1$5$"				}"
"LocalVariableTableParameterNameDiscoverer.java:255"$0$0$0$2$10$"				else {"
"LocalVariableTableParameterNameDiscoverer.java:256"$0$0$0$1$17$"					nextIndex++;"
"LocalVariableTableParameterNameDiscoverer.java:257"$0$0$0$1$5$"				}"
"LocalVariableTableParameterNameDiscoverer.java:258"$0$0$0$1$4$"			}"
"LocalVariableTableParameterNameDiscoverer.java:259"$0$0$0$2$19$"			return lvtIndex;"
"LocalVariableTableParameterNameDiscoverer.java:260"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:261"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:262"$0$0$0$6$49$"		private static boolean isWideType(Type aType) {"
"LocalVariableTableParameterNameDiscoverer.java:263"$0$0$1$7$30$"			// float is not a wide type"
"LocalVariableTableParameterNameDiscoverer.java:264"$0$0$0$8$65$"			return (aType == Type.LONG_TYPE || aType == Type.DOUBLE_TYPE);"
"LocalVariableTableParameterNameDiscoverer.java:265"$0$0$0$1$3$"		}"
"LocalVariableTableParameterNameDiscoverer.java:266"$0$0$0$1$2$"	}"
"LocalVariableTableParameterNameDiscoverer.java:267"$0$0$0$0$0$""
"LocalVariableTableParameterNameDiscoverer.java:268"$0$0$0$1$1$"}"
"ParameterizedTypeReference.java:1"$0$0$0$1$2$"/*"
"ParameterizedTypeReference.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ParameterizedTypeReference.java:3"$0$0$0$1$2$" *"
"ParameterizedTypeReference.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ParameterizedTypeReference.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ParameterizedTypeReference.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ParameterizedTypeReference.java:7"$0$0$0$1$2$" *"
"ParameterizedTypeReference.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ParameterizedTypeReference.java:9"$0$0$0$1$2$" *"
"ParameterizedTypeReference.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ParameterizedTypeReference.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ParameterizedTypeReference.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ParameterizedTypeReference.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ParameterizedTypeReference.java:14"$0$0$0$5$33$" * limitations under the License."
"ParameterizedTypeReference.java:15"$0$0$0$1$3$" */"
"ParameterizedTypeReference.java:16"$0$0$0$0$0$""
"ParameterizedTypeReference.java:17"$0$0$0$0$0$""
"ParameterizedTypeReference.java:18"$0$0$0$2$33$"package org.springframework.core;"
"ParameterizedTypeReference.java:19"$0$0$0$0$0$""
"ParameterizedTypeReference.java:20"$0$0$0$2$43$"import java.lang.reflect.ParameterizedType;"
"ParameterizedTypeReference.java:21"$0$0$0$2$30$"import java.lang.reflect.Type;"
"ParameterizedTypeReference.java:22"$0$0$0$0$0$""
"ParameterizedTypeReference.java:23"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ParameterizedTypeReference.java:24"$0$0$0$2$39$"import org.springframework.util.Assert;"
"ParameterizedTypeReference.java:25"$0$0$0$0$0$""
"ParameterizedTypeReference.java:26"$0$0$0$1$3$"/**"
"ParameterizedTypeReference.java:27"$0$0$0$14$73$" * The purpose of this class is to enable capturing and passing a generic"
"ParameterizedTypeReference.java:28"$0$0$0$15$79$" * {@link Type}. In order to capture the generic type and retain it at runtime,"
"ParameterizedTypeReference.java:29"$0$0$0$14$80$" * you need to create a subclass (ideally as anonymous inline class) as follows:"
"ParameterizedTypeReference.java:30"$0$0$0$1$2$" *"
"ParameterizedTypeReference.java:31"$0$0$0$3$21$" * <pre class=""code"">"
"ParameterizedTypeReference.java:32"$0$0$0$7$128$" * ParameterizedTypeReference&lt;List&lt;String&gt;&gt; typeRef = new ParameterizedTypeReference&lt;List&lt;String&gt;&gt;() {};"
"ParameterizedTypeReference.java:33"$0$0$0$2$9$" * </pre>"
"ParameterizedTypeReference.java:34"$0$0$0$1$2$" *"
"ParameterizedTypeReference.java:35"$0$0$0$15$86$" * <p>The resulting {@code typeRef} instance can then be used to obtain a {@link Type}"
"ParameterizedTypeReference.java:36"$0$0$0$11$80$" * instance that carries the captured parameterized type information at runtime."
"ParameterizedTypeReference.java:37"$0$0$0$16$87$" * For more information on ""super type tokens"" see the link to Neal Gafter's blog post."
"ParameterizedTypeReference.java:38"$0$0$0$1$2$" *"
"ParameterizedTypeReference.java:39"$0$0$0$4$24$" * @author Arjen Poutsma"
"ParameterizedTypeReference.java:40"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"ParameterizedTypeReference.java:41"$0$0$0$3$13$" * @since 3.2"
"ParameterizedTypeReference.java:42"$0$0$0$6$33$" * @param <T> the referenced type"
"ParameterizedTypeReference.java:43"$0$0$0$9$112$" * @see <a href=""https://gafter.blogspot.nl/2006/12/super-type-tokens.html"">Neal Gafter on Super Type Tokens</a>"
"ParameterizedTypeReference.java:44"$0$0$0$1$3$" */"
"ParameterizedTypeReference.java:45"$0$0$0$5$53$"public abstract class ParameterizedTypeReference<T> {"
"ParameterizedTypeReference.java:46"$0$0$0$0$0$""
"ParameterizedTypeReference.java:47"$0$0$0$4$25$"	private final Type type;"
"ParameterizedTypeReference.java:48"$0$0$0$0$0$""
"ParameterizedTypeReference.java:49"$0$0$0$0$0$""
"ParameterizedTypeReference.java:50"$0$0$0$3$41$"	protected ParameterizedTypeReference() {"
"ParameterizedTypeReference.java:51"$1$0$0$4$99$"		Class<?> parameterizedTypeReferenceSubclass = findParameterizedTypeReferenceSubclass(getClass());"
"ParameterizedTypeReference.java:52"$1$0$0$4$72$"		Type type = parameterizedTypeReferenceSubclass.getGenericSuperclass();"
"ParameterizedTypeReference.java:53"$0$0$0$8$90$"		Assert.isInstanceOf(ParameterizedType.class, type, ""Type must be a parameterized type"");"
"ParameterizedTypeReference.java:54"$0$0$0$5$65$"		ParameterizedType parameterizedType = (ParameterizedType) type;"
"ParameterizedTypeReference.java:55"$1$0$0$4$74$"		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();"
"ParameterizedTypeReference.java:56"$0$0$0$10$87$"		Assert.isTrue(actualTypeArguments.length == 1, ""Number of type arguments must be 1"");"
"ParameterizedTypeReference.java:57"$0$0$0$3$37$"		this.type = actualTypeArguments[0];"
"ParameterizedTypeReference.java:58"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:59"$0$0$0$0$0$""
"ParameterizedTypeReference.java:60"$0$0$0$4$48$"	private ParameterizedTypeReference(Type type) {"
"ParameterizedTypeReference.java:61"$0$0$0$3$19$"		this.type = type;"
"ParameterizedTypeReference.java:62"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:63"$0$0$0$0$0$""
"ParameterizedTypeReference.java:64"$0$0$0$0$0$""
"ParameterizedTypeReference.java:65"$1$0$0$4$24$"	public Type getType() {"
"ParameterizedTypeReference.java:66"$0$0$0$2$19$"		return this.type;"
"ParameterizedTypeReference.java:67"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:68"$0$0$0$0$0$""
"ParameterizedTypeReference.java:69"$0$0$0$1$10$"	@Override"
"ParameterizedTypeReference.java:70"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"ParameterizedTypeReference.java:71"$0$0$0$9$74$"		return (this == other || (other instanceof ParameterizedTypeReference &&"
"ParameterizedTypeReference.java:72"$0$0$0$2$69$"				this.type.equals(((ParameterizedTypeReference<?>) other).type)));"
"ParameterizedTypeReference.java:73"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:74"$0$0$0$0$0$""
"ParameterizedTypeReference.java:75"$0$0$0$1$10$"	@Override"
"ParameterizedTypeReference.java:76"$0$0$0$4$24$"	public int hashCode() {"
"ParameterizedTypeReference.java:77"$0$0$0$2$30$"		return this.type.hashCode();"
"ParameterizedTypeReference.java:78"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:79"$0$0$0$0$0$""
"ParameterizedTypeReference.java:80"$0$0$0$1$10$"	@Override"
"ParameterizedTypeReference.java:81"$0$0$0$4$27$"	public String toString() {"
"ParameterizedTypeReference.java:82"$0$0$0$6$57$"		return ""ParameterizedTypeReference<"" + this.type + "">"";"
"ParameterizedTypeReference.java:83"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:84"$0$0$0$0$0$""
"ParameterizedTypeReference.java:85"$0$0$0$0$0$""
"ParameterizedTypeReference.java:86"$0$0$0$1$4$"	/**"
"ParameterizedTypeReference.java:87"$0$0$0$9$71$"	 * Build a {@code ParameterizedTypeReference} wrapping the given type."
"ParameterizedTypeReference.java:88"$0$0$0$10$65$"	 * @param type a generic type (possibly obtained via reflection,"
"ParameterizedTypeReference.java:89"$1$0$0$5$70$"	 * e.g. from {@link java.lang.reflect.Method#getGenericReturnType()})"
"ParameterizedTypeReference.java:90"$0$0$0$10$62$"	 * @return a corresponding reference which may be passed into"
"ParameterizedTypeReference.java:91"$0$0$0$4$56$"	 * {@code ParameterizedTypeReference}-accepting methods"
"ParameterizedTypeReference.java:92"$0$0$0$3$17$"	 * @since 4.3.12"
"ParameterizedTypeReference.java:93"$0$0$0$1$4$"	 */"
"ParameterizedTypeReference.java:94"$0$0$0$7$69$"	public static <T> ParameterizedTypeReference<T> forType(Type type) {"
"ParameterizedTypeReference.java:95"$0$0$0$4$50$"		return new ParameterizedTypeReference<T>(type) {"
"ParameterizedTypeReference.java:96"$0$0$0$1$4$"		};"
"ParameterizedTypeReference.java:97"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:98"$0$0$0$0$0$""
"ParameterizedTypeReference.java:99"$0$0$0$6$81$"	private static Class<?> findParameterizedTypeReferenceSubclass(Class<?> child) {"
"ParameterizedTypeReference.java:100"$1$0$0$4$42$"		Class<?> parent = child.getSuperclass();"
"ParameterizedTypeReference.java:101"$0$0$0$5$31$"		if (Object.class == parent) {"
"ParameterizedTypeReference.java:102"$0$0$0$5$85$"			throw new IllegalStateException(""Expected ParameterizedTypeReference superclass"");"
"ParameterizedTypeReference.java:103"$0$0$0$1$3$"		}"
"ParameterizedTypeReference.java:104"$0$0$0$6$56$"		else if (ParameterizedTypeReference.class == parent) {"
"ParameterizedTypeReference.java:105"$0$0$0$2$16$"			return child;"
"ParameterizedTypeReference.java:106"$0$0$0$1$3$"		}"
"ParameterizedTypeReference.java:107"$0$0$0$2$8$"		else {"
"ParameterizedTypeReference.java:108"$0$0$0$2$57$"			return findParameterizedTypeReferenceSubclass(parent);"
"ParameterizedTypeReference.java:109"$0$0$0$1$3$"		}"
"ParameterizedTypeReference.java:110"$0$0$0$1$2$"	}"
"ParameterizedTypeReference.java:111"$0$0$0$0$0$""
"ParameterizedTypeReference.java:112"$0$0$0$1$1$"}"
"SettableListenableFuture.java:1"$0$0$0$1$2$"/*"
"SettableListenableFuture.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"SettableListenableFuture.java:3"$0$0$0$1$2$" *"
"SettableListenableFuture.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SettableListenableFuture.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SettableListenableFuture.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SettableListenableFuture.java:7"$0$0$0$1$2$" *"
"SettableListenableFuture.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SettableListenableFuture.java:9"$0$0$0$1$2$" *"
"SettableListenableFuture.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SettableListenableFuture.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SettableListenableFuture.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SettableListenableFuture.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SettableListenableFuture.java:14"$0$0$0$5$33$" * limitations under the License."
"SettableListenableFuture.java:15"$0$0$0$1$3$" */"
"SettableListenableFuture.java:16"$0$0$0$0$0$""
"SettableListenableFuture.java:17"$0$0$0$2$44$"package org.springframework.util.concurrent;"
"SettableListenableFuture.java:18"$0$0$0$0$0$""
"SettableListenableFuture.java:19"$0$0$0$2$37$"import java.util.concurrent.Callable;"
"SettableListenableFuture.java:20"$0$0$0$2$46$"import java.util.concurrent.CompletableFuture;"
"SettableListenableFuture.java:21"$0$0$0$2$47$"import java.util.concurrent.ExecutionException;"
"SettableListenableFuture.java:22"$0$0$0$2$37$"import java.util.concurrent.TimeUnit;"
"SettableListenableFuture.java:23"$0$0$0$2$45$"import java.util.concurrent.TimeoutException;"
"SettableListenableFuture.java:24"$0$0$0$0$0$""
"SettableListenableFuture.java:25"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SettableListenableFuture.java:26"$0$0$0$2$39$"import org.springframework.util.Assert;"
"SettableListenableFuture.java:27"$0$0$0$0$0$""
"SettableListenableFuture.java:28"$0$0$0$1$3$"/**"
"SettableListenableFuture.java:29"$0$0$0$12$77$" * A {@link ListenableFuture} whose value can be set via {@link #set(Object)}"
"SettableListenableFuture.java:30"$1$0$0$9$66$" * or {@link #setException(Throwable)}. It may also get cancelled."
"SettableListenableFuture.java:31"$0$0$0$1$2$" *"
"SettableListenableFuture.java:32"$0$0$0$5$75$" * <p>Inspired by {@code com.google.common.util.concurrent.SettableFuture}."
"SettableListenableFuture.java:33"$0$0$0$1$2$" *"
"SettableListenableFuture.java:34"$0$0$0$4$27$" * @author Mattias Severson"
"SettableListenableFuture.java:35"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"SettableListenableFuture.java:36"$0$0$0$4$26$" * @author Juergen Hoeller"
"SettableListenableFuture.java:37"$0$0$0$3$13$" * @since 4.1"
"SettableListenableFuture.java:38"$1$0$0$13$74$" * @param <T> the result type returned by this Future's {@code get} method"
"SettableListenableFuture.java:39"$0$0$0$1$3$" */"
"SettableListenableFuture.java:40"$0$0$0$6$73$"public class SettableListenableFuture<T> implements ListenableFuture<T> {"
"SettableListenableFuture.java:41"$0$0$0$0$0$""
"SettableListenableFuture.java:42"$0$0$0$9$63$"	private static final Callable<Object> DUMMY_CALLABLE = () -> {"
"SettableListenableFuture.java:43"$0$0$0$6$60$"		throw new IllegalStateException(""Should never be called"");"
"SettableListenableFuture.java:44"$0$0$0$1$3$"	};"
"SettableListenableFuture.java:45"$0$0$0$0$0$""
"SettableListenableFuture.java:46"$0$0$0$0$0$""
"SettableListenableFuture.java:47"$0$0$0$7$67$"	private final SettableTask<T> settableTask = new SettableTask<>();"
"SettableListenableFuture.java:48"$0$0$0$0$0$""
"SettableListenableFuture.java:49"$0$0$0$0$0$""
"SettableListenableFuture.java:50"$0$0$0$1$4$"	/**"
"SettableListenableFuture.java:51"$0$0$0$15$77$"	 * Set the value of this future. This method will return {@code true} if the"
"SettableListenableFuture.java:52"$0$0$0$14$79$"	 * value was set successfully, or {@code false} if the future has already been"
"SettableListenableFuture.java:53"$0$0$0$4$21$"	 * set or cancelled."
"SettableListenableFuture.java:54"$0$0$0$9$43$"	 * @param value the value that will be set"
"SettableListenableFuture.java:55"$0$0$0$13$78$"	 * @return {@code true} if the value was successfully set, else {@code false}"
"SettableListenableFuture.java:56"$0$0$0$1$4$"	 */"
"SettableListenableFuture.java:57"$0$0$0$6$40$"	public boolean set(@Nullable T value) {"
"SettableListenableFuture.java:58"$0$0$0$2$49$"		return this.settableTask.setResultValue(value);"
"SettableListenableFuture.java:59"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:60"$0$0$0$0$0$""
"SettableListenableFuture.java:61"$0$0$0$1$4$"	/**"
"SettableListenableFuture.java:62"$0$0$0$15$81$"	 * Set the exception of this future. This method will return {@code true} if the"
"SettableListenableFuture.java:63"$0$0$0$14$83$"	 * exception was set successfully, or {@code false} if the future has already been"
"SettableListenableFuture.java:64"$0$0$0$4$21$"	 * set or cancelled."
"SettableListenableFuture.java:65"$0$0$0$9$47$"	 * @param exception the value that will be set"
"SettableListenableFuture.java:66"$0$0$0$13$82$"	 * @return {@code true} if the exception was successfully set, else {@code false}"
"SettableListenableFuture.java:67"$0$0$0$1$4$"	 */"
"SettableListenableFuture.java:68"$0$0$0$5$51$"	public boolean setException(Throwable exception) {"
"SettableListenableFuture.java:69"$0$0$0$6$58$"		Assert.notNull(exception, ""Exception must not be null"");"
"SettableListenableFuture.java:70"$0$0$0$2$57$"		return this.settableTask.setExceptionResult(exception);"
"SettableListenableFuture.java:71"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:72"$0$0$0$0$0$""
"SettableListenableFuture.java:73"$0$0$0$0$0$""
"SettableListenableFuture.java:74"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:75"$0$0$0$7$72$"	public void addCallback(ListenableFutureCallback<? super T> callback) {"
"SettableListenableFuture.java:76"$0$0$0$1$42$"		this.settableTask.addCallback(callback);"
"SettableListenableFuture.java:77"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:78"$0$0$0$0$0$""
"SettableListenableFuture.java:79"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:80"$0$0$0$9$103$"	public void addCallback(SuccessCallback<? super T> successCallback, FailureCallback failureCallback) {"
"SettableListenableFuture.java:81"$0$0$0$2$66$"		this.settableTask.addCallback(successCallback, failureCallback);"
"SettableListenableFuture.java:82"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:83"$0$0$0$0$0$""
"SettableListenableFuture.java:84"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:85"$0$0$0$4$44$"	public CompletableFuture<T> completable() {"
"SettableListenableFuture.java:86"$0$0$0$2$41$"		return this.settableTask.completable();"
"SettableListenableFuture.java:87"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:88"$0$0$0$0$0$""
"SettableListenableFuture.java:89"$0$0$0$0$0$""
"SettableListenableFuture.java:90"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:91"$0$0$0$5$55$"	public boolean cancel(boolean mayInterruptIfRunning) {"
"SettableListenableFuture.java:92"$0$0$0$4$70$"		boolean cancelled = this.settableTask.cancel(mayInterruptIfRunning);"
"SettableListenableFuture.java:93"$0$0$0$5$43$"		if (cancelled && mayInterruptIfRunning) {"
"SettableListenableFuture.java:94"$0$0$0$1$19$"			interruptTask();"
"SettableListenableFuture.java:95"$0$0$0$1$3$"		}"
"SettableListenableFuture.java:96"$0$0$0$2$19$"		return cancelled;"
"SettableListenableFuture.java:97"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:98"$0$0$0$0$0$""
"SettableListenableFuture.java:99"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:100"$0$0$0$4$31$"	public boolean isCancelled() {"
"SettableListenableFuture.java:101"$0$0$0$2$41$"		return this.settableTask.isCancelled();"
"SettableListenableFuture.java:102"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:103"$0$0$0$0$0$""
"SettableListenableFuture.java:104"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:105"$0$0$0$4$26$"	public boolean isDone() {"
"SettableListenableFuture.java:106"$0$0$0$2$36$"		return this.settableTask.isDone();"
"SettableListenableFuture.java:107"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:108"$0$0$0$0$0$""
"SettableListenableFuture.java:109"$0$0$0$1$4$"	/**"
"SettableListenableFuture.java:110"$0$0$0$4$23$"	 * Retrieve the value."
"SettableListenableFuture.java:111"$0$0$0$14$81$"	 * <p>This method returns the value if it has been set via {@link #set(Object)},"
"SettableListenableFuture.java:112"$0$0$0$9$81$"	 * throws an {@link java.util.concurrent.ExecutionException} if an exception has"
"SettableListenableFuture.java:113"$0$0$0$9$62$"	 * been set via {@link #setException(Throwable)}, or throws a"
"SettableListenableFuture.java:114"$0$0$0$9$88$"	 * {@link java.util.concurrent.CancellationException} if the future has been cancelled."
"SettableListenableFuture.java:115"$0$0$0$8$49$"	 * @return the value associated with this future"
"SettableListenableFuture.java:116"$0$0$0$1$4$"	 */"
"SettableListenableFuture.java:117"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:118"$1$0$0$7$65$"	public T get() throws InterruptedException, ExecutionException {"
"SettableListenableFuture.java:119"$1$0$0$2$33$"		return this.settableTask.get();"
"SettableListenableFuture.java:120"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:121"$0$0$0$0$0$""
"SettableListenableFuture.java:122"$0$0$0$1$4$"	/**"
"SettableListenableFuture.java:123"$0$0$0$4$23$"	 * Retrieve the value."
"SettableListenableFuture.java:124"$0$0$0$14$81$"	 * <p>This method returns the value if it has been set via {@link #set(Object)},"
"SettableListenableFuture.java:125"$0$0$0$9$81$"	 * throws an {@link java.util.concurrent.ExecutionException} if an exception has"
"SettableListenableFuture.java:126"$0$0$0$9$62$"	 * been set via {@link #setException(Throwable)}, or throws a"
"SettableListenableFuture.java:127"$0$0$0$9$88$"	 * {@link java.util.concurrent.CancellationException} if the future has been cancelled."
"SettableListenableFuture.java:128"$0$0$0$8$43$"	 * @param timeout the maximum time to wait"
"SettableListenableFuture.java:129"$0$0$0$9$48$"	 * @param unit the unit of the timeout argument"
"SettableListenableFuture.java:130"$0$0$0$8$49$"	 * @return the value associated with this future"
"SettableListenableFuture.java:131"$0$0$0$1$4$"	 */"
"SettableListenableFuture.java:132"$0$0$0$1$10$"	@Override"
"SettableListenableFuture.java:133"$1$0$0$11$110$"	public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {"
"SettableListenableFuture.java:134"$1$0$0$3$46$"		return this.settableTask.get(timeout, unit);"
"SettableListenableFuture.java:135"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:136"$0$0$0$0$0$""
"SettableListenableFuture.java:137"$0$0$0$1$4$"	/**"
"SettableListenableFuture.java:138"$0$0$0$12$81$"	 * Subclasses can override this method to implement interruption of the future's"
"SettableListenableFuture.java:139"$0$0$0$12$76$"	 * computation. The method is invoked automatically by a successful call to"
"SettableListenableFuture.java:140"$0$0$0$4$42$"	 * {@link #cancel(boolean) cancel(true)}."
"SettableListenableFuture.java:141"$0$0$0$6$43$"	 * <p>The default implementation is empty."
"SettableListenableFuture.java:142"$0$0$0$1$4$"	 */"
"SettableListenableFuture.java:143"$0$0$0$4$33$"	protected void interruptTask() {"
"SettableListenableFuture.java:144"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:145"$0$0$0$0$0$""
"SettableListenableFuture.java:146"$0$0$0$0$0$""
"SettableListenableFuture.java:147"$0$0$0$7$71$"	private static class SettableTask<T> extends ListenableFutureTask<T> {"
"SettableListenableFuture.java:148"$0$0$0$0$0$""
"SettableListenableFuture.java:149"$0$0$0$1$11$"		@Nullable"
"SettableListenableFuture.java:150"$0$0$0$4$43$"		private volatile Thread completingThread;"
"SettableListenableFuture.java:151"$0$0$0$0$0$""
"SettableListenableFuture.java:152"$0$0$0$1$32$"		@SuppressWarnings(""unchecked"")"
"SettableListenableFuture.java:153"$0$0$0$3$25$"		public SettableTask() {"
"SettableListenableFuture.java:154"$0$0$0$2$39$"			super((Callable<T>) DUMMY_CALLABLE);"
"SettableListenableFuture.java:155"$0$0$0$1$3$"		}"
"SettableListenableFuture.java:156"$0$0$0$0$0$""
"SettableListenableFuture.java:157"$0$0$0$6$52$"		public boolean setResultValue(@Nullable T value) {"
"SettableListenableFuture.java:158"$0$0$0$1$14$"			set(value);"
"SettableListenableFuture.java:159"$0$0$0$2$34$"			return checkCompletingThread();"
"SettableListenableFuture.java:160"$0$0$0$1$3$"		}"
"SettableListenableFuture.java:161"$0$0$0$0$0$""
"SettableListenableFuture.java:162"$0$0$0$5$58$"		public boolean setExceptionResult(Throwable exception) {"
"SettableListenableFuture.java:163"$0$0$0$1$27$"			setException(exception);"
"SettableListenableFuture.java:164"$0$0$0$2$34$"			return checkCompletingThread();"
"SettableListenableFuture.java:165"$0$0$0$1$3$"		}"
"SettableListenableFuture.java:166"$0$0$0$0$0$""
"SettableListenableFuture.java:167"$0$0$0$1$11$"		@Override"
"SettableListenableFuture.java:168"$0$0$0$4$25$"		protected void done() {"
"SettableListenableFuture.java:169"$0$0$0$3$24$"			if (!isCancelled()) {"
"SettableListenableFuture.java:170"$0$0$1$9$71$"				// Implicitly invoked by set/setException: store current thread for"
"SettableListenableFuture.java:171"$0$0$1$10$77$"				// determining whether the given result has actually triggered completion"
"SettableListenableFuture.java:172"$0$0$1$7$74$"				// (since FutureTask.set/setException unfortunately don't expose that)"
"SettableListenableFuture.java:173"$0$0$0$3$51$"				this.completingThread = Thread.currentThread();"
"SettableListenableFuture.java:174"$0$0$0$1$4$"			}"
"SettableListenableFuture.java:175"$0$0$0$1$16$"			super.done();"
"SettableListenableFuture.java:176"$0$0$0$1$3$"		}"
"SettableListenableFuture.java:177"$0$0$0$0$0$""
"SettableListenableFuture.java:178"$0$0$0$4$43$"		private boolean checkCompletingThread() {"
"SettableListenableFuture.java:179"$0$0$0$6$69$"			boolean check = (this.completingThread == Thread.currentThread());"
"SettableListenableFuture.java:180"$0$0$0$3$15$"			if (check) {"
"SettableListenableFuture.java:181"$0$0$0$9$70$"				this.completingThread = null;  // only first match actually counts"
"SettableListenableFuture.java:182"$0$0$0$1$4$"			}"
"SettableListenableFuture.java:183"$0$0$0$2$16$"			return check;"
"SettableListenableFuture.java:184"$0$0$0$1$3$"		}"
"SettableListenableFuture.java:185"$0$0$0$1$2$"	}"
"SettableListenableFuture.java:186"$0$0$0$0$0$""
"SettableListenableFuture.java:187"$0$0$0$1$1$"}"
"SortedProperties.java:1"$0$0$0$1$2$"/*"
"SortedProperties.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"SortedProperties.java:3"$0$0$0$1$2$" *"
"SortedProperties.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SortedProperties.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SortedProperties.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SortedProperties.java:7"$0$0$0$1$2$" *"
"SortedProperties.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SortedProperties.java:9"$0$0$0$1$2$" *"
"SortedProperties.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SortedProperties.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SortedProperties.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SortedProperties.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SortedProperties.java:14"$0$0$0$5$33$" * limitations under the License."
"SortedProperties.java:15"$0$0$0$1$3$" */"
"SortedProperties.java:16"$0$0$0$0$0$""
"SortedProperties.java:17"$0$0$0$2$33$"package org.springframework.core;"
"SortedProperties.java:18"$0$0$0$0$0$""
"SortedProperties.java:19"$0$0$0$2$37$"import java.io.ByteArrayOutputStream;"
"SortedProperties.java:20"$0$0$0$2$27$"import java.io.IOException;"
"SortedProperties.java:21"$0$0$0$2$28$"import java.io.OutputStream;"
"SortedProperties.java:22"$0$0$0$2$28$"import java.io.StringWriter;"
"SortedProperties.java:23"$0$0$0$2$22$"import java.io.Writer;"
"SortedProperties.java:24"$0$0$0$2$41$"import java.nio.charset.StandardCharsets;"
"SortedProperties.java:25"$0$0$0$2$29$"import java.util.Collections;"
"SortedProperties.java:26"$0$0$0$2$28$"import java.util.Comparator;"
"SortedProperties.java:27"$0$0$0$2$29$"import java.util.Enumeration;"
"SortedProperties.java:28"$0$0$0$2$27$"import java.util.Map.Entry;"
"SortedProperties.java:29"$0$0$0$2$28$"import java.util.Properties;"
"SortedProperties.java:30"$0$0$0$2$21$"import java.util.Set;"
"SortedProperties.java:31"$0$0$0$2$25$"import java.util.TreeSet;"
"SortedProperties.java:32"$0$0$0$0$0$""
"SortedProperties.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"SortedProperties.java:34"$0$0$0$0$0$""
"SortedProperties.java:35"$0$0$0$1$3$"/**"
"SortedProperties.java:36"$0$0$0$9$78$" * Specialization of {@link Properties} that sorts properties alphanumerically"
"SortedProperties.java:37"$0$0$0$5$23$" * based on their keys."
"SortedProperties.java:38"$0$0$0$1$2$" *"
"SortedProperties.java:39"$0$0$0$13$74$" * <p>This can be useful when storing the {@link Properties} instance in a"
"SortedProperties.java:40"$0$0$0$14$78$" * properties file, since it allows such files to be generated in a repeatable"
"SortedProperties.java:41"$0$0$0$7$49$" * manner with consistent ordering of properties."
"SortedProperties.java:42"$0$0$0$1$2$" *"
"SortedProperties.java:43"$0$0$0$11$76$" * <p>Comments in generated properties files can also be optionally omitted."
"SortedProperties.java:44"$0$0$0$1$2$" *"
"SortedProperties.java:45"$0$0$0$4$22$" * @author Sam Brannen"
"SortedProperties.java:46"$0$0$0$3$13$" * @since 5.2"
"SortedProperties.java:47"$0$0$0$3$28$" * @see java.util.Properties"
"SortedProperties.java:48"$0$0$0$1$3$" */"
"SortedProperties.java:49"$0$0$0$1$26$"SuppressWarnings(""serial"")"
"SortedProperties.java:50"$0$0$0$5$43$"class SortedProperties extends Properties {"
"SortedProperties.java:51"$0$0$0$0$0$""
"SortedProperties.java:52"$0$0$0$6$50$"	static final String EOL = System.lineSeparator();"
"SortedProperties.java:53"$0$0$0$0$0$""
"SortedProperties.java:54"$0$0$0$7$95$"	private static final Comparator<Object> keyComparator = Comparator.comparing(String::valueOf);"
"SortedProperties.java:55"$0$0$0$0$0$""
"SortedProperties.java:56"$0$0$0$8$110$"	private static final Comparator<Entry<Object, Object>> entryComparator = Entry.comparingByKey(keyComparator);"
"SortedProperties.java:57"$0$0$0$0$0$""
"SortedProperties.java:58"$0$0$0$0$0$""
"SortedProperties.java:59"$0$0$0$4$36$"	private final boolean omitComments;"
"SortedProperties.java:60"$0$0$0$0$0$""
"SortedProperties.java:61"$0$0$0$0$0$""
"SortedProperties.java:62"$0$0$0$1$4$"	/**"
"SortedProperties.java:63"$0$0$0$11$78$"	 * Construct a new {@code SortedProperties} instance that honors the supplied"
"SortedProperties.java:64"$0$0$0$4$30$"	 * {@code omitComments} flag."
"SortedProperties.java:65"$0$0$0$11$71$"	 * @param omitComments {@code true} if comments should be omitted when"
"SortedProperties.java:66"$0$0$0$6$32$"	 * storing properties in a file"
"SortedProperties.java:67"$0$0$0$1$4$"	 */"
"SortedProperties.java:68"$0$0$0$3$41$"	SortedProperties(boolean omitComments) {"
"SortedProperties.java:69"$0$0$0$3$35$"		this.omitComments = omitComments;"
"SortedProperties.java:70"$0$0$0$1$2$"	}"
"SortedProperties.java:71"$0$0$0$0$0$""
"SortedProperties.java:72"$0$0$0$1$4$"	/**"
"SortedProperties.java:73"$0$0$0$10$79$"	 * Construct a new {@code SortedProperties} instance with properties populated"
"SortedProperties.java:74"$0$0$0$11$73$"	 * from the supplied {@link Properties} object and honoring the supplied"
"SortedProperties.java:75"$0$0$0$4$30$"	 * {@code omitComments} flag."
"SortedProperties.java:76"$0$0$0$10$74$"	 * <p>Default properties from the supplied {@code Properties} object will"
"SortedProperties.java:77"$0$0$0$4$18$"	 * not be copied."
"SortedProperties.java:78"$0$0$0$12$74$"	 * @param properties the {@code Properties} object from which to copy the"
"SortedProperties.java:79"$0$0$0$3$22$"	 * initial properties"
"SortedProperties.java:80"$0$0$0$11$71$"	 * @param omitComments {@code true} if comments should be omitted when"
"SortedProperties.java:81"$0$0$0$6$32$"	 * storing properties in a file"
"SortedProperties.java:82"$0$0$0$1$4$"	 */"
"SortedProperties.java:83"$0$0$0$5$64$"	SortedProperties(Properties properties, boolean omitComments) {"
"SortedProperties.java:84"$0$0$0$1$21$"		this(omitComments);"
"SortedProperties.java:85"$0$0$0$1$21$"		putAll(properties);"
"SortedProperties.java:86"$0$0$0$1$2$"	}"
"SortedProperties.java:87"$0$0$0$0$0$""
"SortedProperties.java:88"$0$0$0$0$0$""
"SortedProperties.java:89"$0$0$0$1$10$"	@Override"
"SortedProperties.java:90"$0$0$0$10$84$"	public void store(OutputStream out, @Nullable String comments) throws IOException {"
"SortedProperties.java:91"$0$0$0$5$59$"		ByteArrayOutputStream baos = new ByteArrayOutputStream();"
"SortedProperties.java:92"$0$0$0$6$59$"		super.store(baos, (this.omitComments ? null : comments));"
"SortedProperties.java:93"$0$0$0$4$70$"		String contents = baos.toString(StandardCharsets.ISO_8859_1.name());"
"SortedProperties.java:94"$0$0$0$6$43$"		for (String line : contents.split(EOL)) {"
"SortedProperties.java:95"$0$0$0$5$54$"			if (!(this.omitComments && line.startsWith(""#""))) {"
"SortedProperties.java:96"$1$0$0$3$66$"				out.write((line + EOL).getBytes(StandardCharsets.ISO_8859_1));"
"SortedProperties.java:97"$0$0$0$1$4$"			}"
"SortedProperties.java:98"$0$0$0$1$3$"		}"
"SortedProperties.java:99"$0$0$0$1$2$"	}"
"SortedProperties.java:100"$0$0$0$0$0$""
"SortedProperties.java:101"$0$0$0$1$10$"	@Override"
"SortedProperties.java:102"$0$0$0$10$81$"	public void store(Writer writer, @Nullable String comments) throws IOException {"
"SortedProperties.java:103"$0$0$0$5$49$"		StringWriter stringWriter = new StringWriter();"
"SortedProperties.java:104"$0$0$0$6$67$"		super.store(stringWriter, (this.omitComments ? null : comments));"
"SortedProperties.java:105"$0$0$0$4$44$"		String contents = stringWriter.toString();"
"SortedProperties.java:106"$0$0$0$6$43$"		for (String line : contents.split(EOL)) {"
"SortedProperties.java:107"$0$0$0$5$54$"			if (!(this.omitComments && line.startsWith(""#""))) {"
"SortedProperties.java:108"$0$0$0$3$29$"				writer.write(line + EOL);"
"SortedProperties.java:109"$0$0$0$1$4$"			}"
"SortedProperties.java:110"$0$0$0$1$3$"		}"
"SortedProperties.java:111"$0$0$0$1$2$"	}"
"SortedProperties.java:112"$0$0$0$0$0$""
"SortedProperties.java:113"$0$0$0$1$10$"	@Override"
"SortedProperties.java:114"$0$0$0$10$89$"	public void storeToXML(OutputStream out, @Nullable String comments) throws IOException {"
"SortedProperties.java:115"$0$0$0$6$63$"		super.storeToXML(out, (this.omitComments ? null : comments));"
"SortedProperties.java:116"$0$0$0$1$2$"	}"
"SortedProperties.java:117"$0$0$0$0$0$""
"SortedProperties.java:118"$0$0$0$1$10$"	@Override"
"SortedProperties.java:119"$0$0$0$12$106$"	public void storeToXML(OutputStream out, @Nullable String comments, String encoding) throws IOException {"
"SortedProperties.java:120"$0$0$0$7$73$"		super.storeToXML(out, (this.omitComments ? null : comments), encoding);"
"SortedProperties.java:121"$0$0$0$1$2$"	}"
"SortedProperties.java:122"$0$0$0$0$0$""
"SortedProperties.java:123"$0$0$0$1$4$"	/**"
"SortedProperties.java:124"$0$0$0$13$78$"	 * Return a sorted enumeration of the keys in this {@link Properties} object."
"SortedProperties.java:125"$0$0$0$3$18$"	 * @see #keySet()"
"SortedProperties.java:126"$0$0$0$1$4$"	 */"
"SortedProperties.java:127"$0$0$0$1$10$"	@Override"
"SortedProperties.java:128"$0$0$0$5$49$"	public synchronized Enumeration<Object> keys() {"
"SortedProperties.java:129"$0$0$0$2$43$"		return Collections.enumeration(keySet());"
"SortedProperties.java:130"$0$0$0$1$2$"	}"
"SortedProperties.java:131"$0$0$0$0$0$""
"SortedProperties.java:132"$0$0$0$1$4$"	/**"
"SortedProperties.java:133"$0$0$0$13$70$"	 * Return a sorted set of the keys in this {@link Properties} object."
"SortedProperties.java:134"$0$0$0$11$63$"	 * <p>The keys will be converted to strings if necessary using"
"SortedProperties.java:135"$0$0$0$8$75$"	 * {@link String#valueOf(Object)} and sorted alphanumerically according to"
"SortedProperties.java:136"$0$0$0$6$33$"	 * the natural order of strings."
"SortedProperties.java:137"$0$0$0$1$4$"	 */"
"SortedProperties.java:138"$0$0$0$1$10$"	@Override"
"SortedProperties.java:139"$0$0$0$4$30$"	public Set<Object> keySet() {"
"SortedProperties.java:140"$0$0$0$5$56$"		Set<Object> sortedKeys = new TreeSet<>(keyComparator);"
"SortedProperties.java:141"$0$0$0$1$36$"		sortedKeys.addAll(super.keySet());"
"SortedProperties.java:142"$0$0$0$2$49$"		return Collections.synchronizedSet(sortedKeys);"
"SortedProperties.java:143"$0$0$0$1$2$"	}"
"SortedProperties.java:144"$0$0$0$0$0$""
"SortedProperties.java:145"$0$0$0$1$4$"	/**"
"SortedProperties.java:146"$0$0$0$13$73$"	 * Return a sorted set of the entries in this {@link Properties} object."
"SortedProperties.java:147"$0$0$0$15$75$"	 * <p>The entries will be sorted based on their keys, and the keys will be"
"SortedProperties.java:148"$0$0$0$9$74$"	 * converted to strings if necessary using {@link String#valueOf(Object)}"
"SortedProperties.java:149"$0$0$0$11$76$"	 * and compared alphanumerically according to the natural order of strings."
"SortedProperties.java:150"$0$0$0$1$4$"	 */"
"SortedProperties.java:151"$0$0$0$1$10$"	@Override"
"SortedProperties.java:152"$0$0$0$5$47$"	public Set<Entry<Object, Object>> entrySet() {"
"SortedProperties.java:153"$0$0$0$6$76$"		Set<Entry<Object, Object>> sortedEntries = new TreeSet<>(entryComparator);"
"SortedProperties.java:154"$0$0$0$1$41$"		sortedEntries.addAll(super.entrySet());"
"SortedProperties.java:155"$0$0$0$2$52$"		return Collections.synchronizedSet(sortedEntries);"
"SortedProperties.java:156"$0$0$0$1$2$"	}"
"SortedProperties.java:157"$0$0$0$0$0$""
"SortedProperties.java:158"$0$0$0$1$1$"}"
"StandardMethodMetadata.java:1"$0$0$0$1$2$"/*"
"StandardMethodMetadata.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"StandardMethodMetadata.java:3"$0$0$0$1$2$" *"
"StandardMethodMetadata.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StandardMethodMetadata.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StandardMethodMetadata.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StandardMethodMetadata.java:7"$0$0$0$1$2$" *"
"StandardMethodMetadata.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StandardMethodMetadata.java:9"$0$0$0$1$2$" *"
"StandardMethodMetadata.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StandardMethodMetadata.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StandardMethodMetadata.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StandardMethodMetadata.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StandardMethodMetadata.java:14"$0$0$0$5$33$" * limitations under the License."
"StandardMethodMetadata.java:15"$0$0$0$1$3$" */"
"StandardMethodMetadata.java:16"$0$0$0$0$0$""
"StandardMethodMetadata.java:17"$0$0$0$2$38$"package org.springframework.core.type;"
"StandardMethodMetadata.java:18"$0$0$0$0$0$""
"StandardMethodMetadata.java:19"$0$0$0$2$32$"import java.lang.reflect.Method;"
"StandardMethodMetadata.java:20"$0$0$0$2$34$"import java.lang.reflect.Modifier;"
"StandardMethodMetadata.java:21"$0$0$0$2$21$"import java.util.Map;"
"StandardMethodMetadata.java:22"$0$0$0$0$0$""
"StandardMethodMetadata.java:23"$0$0$0$2$65$"import org.springframework.core.annotation.AnnotatedElementUtils;"
"StandardMethodMetadata.java:24"$0$0$0$2$61$"import org.springframework.core.annotation.MergedAnnotations;"
"StandardMethodMetadata.java:25"$0$0$0$2$76$"import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;"
"StandardMethodMetadata.java:26"$0$0$0$2$64$"import org.springframework.core.annotation.RepeatableContainers;"
"StandardMethodMetadata.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StandardMethodMetadata.java:28"$0$0$0$2$39$"import org.springframework.util.Assert;"
"StandardMethodMetadata.java:29"$0$0$0$2$46$"import org.springframework.util.MultiValueMap;"
"StandardMethodMetadata.java:30"$0$0$0$0$0$""
"StandardMethodMetadata.java:31"$0$0$0$1$3$"/**"
"StandardMethodMetadata.java:32"$0$0$0$8$70$" * {@link MethodMetadata} implementation that uses standard reflection"
"StandardMethodMetadata.java:33"$0$0$0$7$40$" * to introspect a given {@code Method}."
"StandardMethodMetadata.java:34"$0$0$0$1$2$" *"
"StandardMethodMetadata.java:35"$0$0$0$4$26$" * @author Juergen Hoeller"
"StandardMethodMetadata.java:36"$0$0$0$4$23$" * @author Mark Pollack"
"StandardMethodMetadata.java:37"$0$0$0$4$22$" * @author Chris Beams"
"StandardMethodMetadata.java:38"$0$0$0$4$23$" * @author Phillip Webb"
"StandardMethodMetadata.java:39"$0$0$0$3$13$" * @since 3.0"
"StandardMethodMetadata.java:40"$0$0$0$1$3$" */"
"StandardMethodMetadata.java:41"$0$0$0$6$63$"public class StandardMethodMetadata implements MethodMetadata {"
"StandardMethodMetadata.java:42"$0$0$0$0$0$""
"StandardMethodMetadata.java:43"$0$0$0$4$41$"	private final Method introspectedMethod;"
"StandardMethodMetadata.java:44"$0$0$0$0$0$""
"StandardMethodMetadata.java:45"$0$0$0$4$46$"	private final boolean nestedAnnotationsAsMap;"
"StandardMethodMetadata.java:46"$0$0$0$0$0$""
"StandardMethodMetadata.java:47"$0$0$0$4$51$"	private final MergedAnnotations mergedAnnotations;"
"StandardMethodMetadata.java:48"$0$0$0$0$0$""
"StandardMethodMetadata.java:49"$0$0$0$0$0$""
"StandardMethodMetadata.java:50"$0$0$0$1$4$"	/**"
"StandardMethodMetadata.java:51"$0$0$0$10$69$"	 * Create a new StandardMethodMetadata wrapper for the given Method."
"StandardMethodMetadata.java:52"$0$0$0$7$54$"	 * @param introspectedMethod the Method to introspect"
"StandardMethodMetadata.java:53"$0$0$0$12$88$"	 * @deprecated since 5.2 in favor of obtaining instances via {@link AnnotationMetadata}"
"StandardMethodMetadata.java:54"$0$0$0$1$4$"	 */"
"StandardMethodMetadata.java:55"$0$0$0$1$12$"	@Deprecated"
"StandardMethodMetadata.java:56"$0$0$0$4$59$"	public StandardMethodMetadata(Method introspectedMethod) {"
"StandardMethodMetadata.java:57"$0$0$0$2$34$"		this(introspectedMethod, false);"
"StandardMethodMetadata.java:58"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:59"$0$0$0$0$0$""
"StandardMethodMetadata.java:60"$0$0$0$1$4$"	/**"
"StandardMethodMetadata.java:61"$0$0$0$10$69$"	 * Create a new StandardMethodMetadata wrapper for the given Method,"
"StandardMethodMetadata.java:62"$0$0$0$14$85$"	 * providing the option to return any nested annotations or annotation arrays in the"
"StandardMethodMetadata.java:63"$0$0$0$6$84$"	 * form of {@link org.springframework.core.annotation.AnnotationAttributes} instead"
"StandardMethodMetadata.java:64"$0$0$0$6$64$"	 * of actual {@link java.lang.annotation.Annotation} instances."
"StandardMethodMetadata.java:65"$0$0$0$7$54$"	 * @param introspectedMethod the Method to introspect"
"StandardMethodMetadata.java:66"$0$0$0$10$84$"	 * @param nestedAnnotationsAsMap return nested annotations and annotation arrays as"
"StandardMethodMetadata.java:67"$0$0$0$5$86$"	 * {@link org.springframework.core.annotation.AnnotationAttributes} for compatibility"
"StandardMethodMetadata.java:68"$0$0$0$6$61$"	 * with ASM-based {@link AnnotationMetadata} implementations"
"StandardMethodMetadata.java:69"$0$0$0$3$16$"	 * @since 3.1.1"
"StandardMethodMetadata.java:70"$0$0$0$12$88$"	 * @deprecated since 5.2 in favor of obtaining instances via {@link AnnotationMetadata}"
"StandardMethodMetadata.java:71"$0$0$0$1$4$"	 */"
"StandardMethodMetadata.java:72"$0$0$0$1$12$"	@Deprecated"
"StandardMethodMetadata.java:73"$0$0$0$6$91$"	public StandardMethodMetadata(Method introspectedMethod, boolean nestedAnnotationsAsMap) {"
"StandardMethodMetadata.java:74"$0$0$0$6$64$"		Assert.notNull(introspectedMethod, ""Method must not be null"");"
"StandardMethodMetadata.java:75"$0$0$0$3$47$"		this.introspectedMethod = introspectedMethod;"
"StandardMethodMetadata.java:76"$0$0$0$3$55$"		this.nestedAnnotationsAsMap = nestedAnnotationsAsMap;"
"StandardMethodMetadata.java:77"$0$0$0$3$50$"		this.mergedAnnotations = MergedAnnotations.from("
"StandardMethodMetadata.java:78"$0$0$0$3$76$"				introspectedMethod, SearchStrategy.DIRECT, RepeatableContainers.none());"
"StandardMethodMetadata.java:79"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:80"$0$0$0$0$0$""
"StandardMethodMetadata.java:81"$0$0$0$0$0$""
"StandardMethodMetadata.java:82"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:83"$1$0$0$4$44$"	public MergedAnnotations getAnnotations() {"
"StandardMethodMetadata.java:84"$0$0$0$2$32$"		return this.mergedAnnotations;"
"StandardMethodMetadata.java:85"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:86"$0$0$0$0$0$""
"StandardMethodMetadata.java:87"$0$0$0$1$4$"	/**"
"StandardMethodMetadata.java:88"$0$0$0$5$33$"	 * Return the underlying Method."
"StandardMethodMetadata.java:89"$0$0$0$1$4$"	 */"
"StandardMethodMetadata.java:90"$1$0$0$5$46$"	public final Method getIntrospectedMethod() {"
"StandardMethodMetadata.java:91"$0$0$0$2$33$"		return this.introspectedMethod;"
"StandardMethodMetadata.java:92"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:93"$0$0$0$0$0$""
"StandardMethodMetadata.java:94"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:95"$1$0$0$4$32$"	public String getMethodName() {"
"StandardMethodMetadata.java:96"$1$0$0$2$43$"		return this.introspectedMethod.getName();"
"StandardMethodMetadata.java:97"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:98"$0$0$0$0$0$""
"StandardMethodMetadata.java:99"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:100"$1$0$0$4$40$"	public String getDeclaringClassName() {"
"StandardMethodMetadata.java:101"$2$0$0$2$63$"		return this.introspectedMethod.getDeclaringClass().getName();"
"StandardMethodMetadata.java:102"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:103"$0$0$0$0$0$""
"StandardMethodMetadata.java:104"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:105"$1$0$0$4$36$"	public String getReturnTypeName() {"
"StandardMethodMetadata.java:106"$2$0$0$2$59$"		return this.introspectedMethod.getReturnType().getName();"
"StandardMethodMetadata.java:107"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:108"$0$0$0$0$0$""
"StandardMethodMetadata.java:109"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:110"$0$0$0$4$30$"	public boolean isAbstract() {"
"StandardMethodMetadata.java:111"$1$0$0$2$69$"		return Modifier.isAbstract(this.introspectedMethod.getModifiers());"
"StandardMethodMetadata.java:112"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:113"$0$0$0$0$0$""
"StandardMethodMetadata.java:114"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:115"$0$0$0$4$28$"	public boolean isStatic() {"
"StandardMethodMetadata.java:116"$1$0$0$2$67$"		return Modifier.isStatic(this.introspectedMethod.getModifiers());"
"StandardMethodMetadata.java:117"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:118"$0$0$0$0$0$""
"StandardMethodMetadata.java:119"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:120"$0$0$0$4$27$"	public boolean isFinal() {"
"StandardMethodMetadata.java:121"$1$0$0$2$66$"		return Modifier.isFinal(this.introspectedMethod.getModifiers());"
"StandardMethodMetadata.java:122"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:123"$0$0$0$0$0$""
"StandardMethodMetadata.java:124"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:125"$0$0$0$4$33$"	public boolean isOverridable() {"
"StandardMethodMetadata.java:126"$0$0$0$6$51$"		return !isStatic() && !isFinal() && !isPrivate();"
"StandardMethodMetadata.java:127"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:128"$0$0$0$0$0$""
"StandardMethodMetadata.java:129"$0$0$0$4$30$"	private boolean isPrivate() {"
"StandardMethodMetadata.java:130"$1$0$0$2$68$"		return Modifier.isPrivate(this.introspectedMethod.getModifiers());"
"StandardMethodMetadata.java:131"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:132"$0$0$0$0$0$""
"StandardMethodMetadata.java:133"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:134"$0$0$0$1$10$"	@Nullable"
"StandardMethodMetadata.java:135"$1$0$0$8$105$"	public Map<String, Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"StandardMethodMetadata.java:136"$0$0$0$3$36$"		if (this.nestedAnnotationsAsMap) {"
"StandardMethodMetadata.java:137"$1$0$0$3$92$"			return MethodMetadata.super.getAnnotationAttributes(annotationName, classValuesAsString);"
"StandardMethodMetadata.java:138"$0$0$0$1$3$"		}"
"StandardMethodMetadata.java:139"$1$0$0$2$85$"		return AnnotatedElementUtils.getMergedAnnotationAttributes(this.introspectedMethod,"
"StandardMethodMetadata.java:140"$0$0$0$3$48$"				annotationName, classValuesAsString, false);"
"StandardMethodMetadata.java:141"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:142"$0$0$0$0$0$""
"StandardMethodMetadata.java:143"$0$0$0$1$10$"	@Override"
"StandardMethodMetadata.java:144"$0$0$0$1$10$"	@Nullable"
"StandardMethodMetadata.java:145"$1$0$0$8$118$"	public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString) {"
"StandardMethodMetadata.java:146"$0$0$0$3$36$"		if (this.nestedAnnotationsAsMap) {"
"StandardMethodMetadata.java:147"$1$0$0$3$95$"			return MethodMetadata.super.getAllAnnotationAttributes(annotationName, classValuesAsString);"
"StandardMethodMetadata.java:148"$0$0$0$1$3$"		}"
"StandardMethodMetadata.java:149"$1$0$0$2$82$"		return AnnotatedElementUtils.getAllAnnotationAttributes(this.introspectedMethod,"
"StandardMethodMetadata.java:150"$0$0$0$3$48$"				annotationName, classValuesAsString, false);"
"StandardMethodMetadata.java:151"$0$0$0$1$2$"	}"
"StandardMethodMetadata.java:152"$0$0$0$0$0$""
"StandardMethodMetadata.java:153"$0$0$0$1$1$"}"
"SimpleMethodMetadata.java:1"$0$0$0$1$2$"/*"
"SimpleMethodMetadata.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"SimpleMethodMetadata.java:3"$0$0$0$1$2$" *"
"SimpleMethodMetadata.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SimpleMethodMetadata.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SimpleMethodMetadata.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SimpleMethodMetadata.java:7"$0$0$0$1$2$" *"
"SimpleMethodMetadata.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SimpleMethodMetadata.java:9"$0$0$0$1$2$" *"
"SimpleMethodMetadata.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SimpleMethodMetadata.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SimpleMethodMetadata.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SimpleMethodMetadata.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SimpleMethodMetadata.java:14"$0$0$0$5$33$" * limitations under the License."
"SimpleMethodMetadata.java:15"$0$0$0$1$3$" */"
"SimpleMethodMetadata.java:16"$0$0$0$0$0$""
"SimpleMethodMetadata.java:17"$0$0$0$2$51$"package org.springframework.core.type.classreading;"
"SimpleMethodMetadata.java:18"$0$0$0$0$0$""
"SimpleMethodMetadata.java:19"$0$0$0$2$39$"import org.springframework.asm.Opcodes;"
"SimpleMethodMetadata.java:20"$0$0$0$2$61$"import org.springframework.core.annotation.MergedAnnotations;"
"SimpleMethodMetadata.java:21"$0$0$0$2$52$"import org.springframework.core.type.MethodMetadata;"
"SimpleMethodMetadata.java:22"$0$0$0$0$0$""
"SimpleMethodMetadata.java:23"$0$0$0$1$3$"/**"
"SimpleMethodMetadata.java:24"$0$0$0$6$40$" * {@link MethodMetadata} created from a"
"SimpleMethodMetadata.java:25"$0$0$0$3$46$" * {@link SimpleMethodMetadataReadingVisitor}."
"SimpleMethodMetadata.java:26"$0$0$0$1$2$" *"
"SimpleMethodMetadata.java:27"$0$0$0$4$23$" * @author Phillip Webb"
"SimpleMethodMetadata.java:28"$0$0$0$3$13$" * @since 5.2"
"SimpleMethodMetadata.java:29"$0$0$0$1$3$" */"
"SimpleMethodMetadata.java:30"$0$0$0$6$60$"final class SimpleMethodMetadata implements MethodMetadata {"
"SimpleMethodMetadata.java:31"$0$0$0$0$0$""
"SimpleMethodMetadata.java:32"$0$0$0$4$33$"	private final String methodName;"
"SimpleMethodMetadata.java:33"$0$0$0$0$0$""
"SimpleMethodMetadata.java:34"$0$0$0$4$26$"	private final int access;"
"SimpleMethodMetadata.java:35"$0$0$0$0$0$""
"SimpleMethodMetadata.java:36"$0$0$0$4$41$"	private final String declaringClassName;"
"SimpleMethodMetadata.java:37"$0$0$0$0$0$""
"SimpleMethodMetadata.java:38"$0$0$0$4$37$"	private final String returnTypeName;"
"SimpleMethodMetadata.java:39"$0$0$0$0$0$""
"SimpleMethodMetadata.java:40"$0$0$0$4$45$"	private final MergedAnnotations annotations;"
"SimpleMethodMetadata.java:41"$0$0$0$0$0$""
"SimpleMethodMetadata.java:42"$0$0$0$0$0$""
"SimpleMethodMetadata.java:43"$0$0$0$7$86$"	public SimpleMethodMetadata(String methodName, int access, String declaringClassName,"
"SimpleMethodMetadata.java:44"$0$0$0$5$58$"			String returnTypeName, MergedAnnotations annotations) {"
"SimpleMethodMetadata.java:45"$0$0$0$0$0$""
"SimpleMethodMetadata.java:46"$0$0$0$3$31$"		this.methodName = methodName;"
"SimpleMethodMetadata.java:47"$0$0$0$3$23$"		this.access = access;"
"SimpleMethodMetadata.java:48"$0$0$0$3$47$"		this.declaringClassName = declaringClassName;"
"SimpleMethodMetadata.java:49"$0$0$0$3$39$"		this.returnTypeName = returnTypeName;"
"SimpleMethodMetadata.java:50"$0$0$0$3$33$"		this.annotations = annotations;"
"SimpleMethodMetadata.java:51"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:52"$0$0$0$0$0$""
"SimpleMethodMetadata.java:53"$0$0$0$0$0$""
"SimpleMethodMetadata.java:54"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:55"$1$0$0$4$32$"	public String getMethodName() {"
"SimpleMethodMetadata.java:56"$0$0$0$2$25$"		return this.methodName;"
"SimpleMethodMetadata.java:57"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:58"$0$0$0$0$0$""
"SimpleMethodMetadata.java:59"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:60"$1$0$0$4$40$"	public String getDeclaringClassName() {"
"SimpleMethodMetadata.java:61"$0$0$0$2$33$"		return this.declaringClassName;"
"SimpleMethodMetadata.java:62"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:63"$0$0$0$0$0$""
"SimpleMethodMetadata.java:64"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:65"$1$0$0$4$36$"	public String getReturnTypeName() {"
"SimpleMethodMetadata.java:66"$0$0$0$2$29$"		return this.returnTypeName;"
"SimpleMethodMetadata.java:67"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:68"$0$0$0$0$0$""
"SimpleMethodMetadata.java:69"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:70"$0$0$0$4$30$"	public boolean isAbstract() {"
"SimpleMethodMetadata.java:71"$0$0$0$6$51$"		return (this.access & Opcodes.ACC_ABSTRACT) != 0;"
"SimpleMethodMetadata.java:72"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:73"$0$0$0$0$0$""
"SimpleMethodMetadata.java:74"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:75"$0$0$0$4$28$"	public boolean isStatic() {"
"SimpleMethodMetadata.java:76"$0$0$0$6$49$"		return (this.access & Opcodes.ACC_STATIC) != 0;"
"SimpleMethodMetadata.java:77"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:78"$0$0$0$0$0$""
"SimpleMethodMetadata.java:79"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:80"$0$0$0$4$27$"	public boolean isFinal() {"
"SimpleMethodMetadata.java:81"$0$0$0$6$48$"		return (this.access & Opcodes.ACC_FINAL) != 0;"
"SimpleMethodMetadata.java:82"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:83"$0$0$0$0$0$""
"SimpleMethodMetadata.java:84"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:85"$0$0$0$4$33$"	public boolean isOverridable() {"
"SimpleMethodMetadata.java:86"$0$0$0$6$51$"		return !isStatic() && !isFinal() && !isPrivate();"
"SimpleMethodMetadata.java:87"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:88"$0$0$0$0$0$""
"SimpleMethodMetadata.java:89"$0$0$0$4$29$"	public boolean isPrivate() {"
"SimpleMethodMetadata.java:90"$0$0$0$6$50$"		return (this.access & Opcodes.ACC_PRIVATE) != 0;"
"SimpleMethodMetadata.java:91"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:92"$0$0$0$0$0$""
"SimpleMethodMetadata.java:93"$0$0$0$1$10$"	@Override"
"SimpleMethodMetadata.java:94"$1$0$0$4$44$"	public MergedAnnotations getAnnotations() {"
"SimpleMethodMetadata.java:95"$0$0$0$2$26$"		return this.annotations;"
"SimpleMethodMetadata.java:96"$0$0$0$1$2$"	}"
"SimpleMethodMetadata.java:97"$0$0$0$0$0$""
"SimpleMethodMetadata.java:98"$0$0$0$1$1$"}"
"NullSafeComparator.java:1"$0$0$0$1$2$"/*"
"NullSafeComparator.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"NullSafeComparator.java:3"$0$0$0$1$2$" *"
"NullSafeComparator.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"NullSafeComparator.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"NullSafeComparator.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"NullSafeComparator.java:7"$0$0$0$1$2$" *"
"NullSafeComparator.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"NullSafeComparator.java:9"$0$0$0$1$2$" *"
"NullSafeComparator.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"NullSafeComparator.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"NullSafeComparator.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"NullSafeComparator.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"NullSafeComparator.java:14"$0$0$0$5$33$" * limitations under the License."
"NullSafeComparator.java:15"$0$0$0$1$3$" */"
"NullSafeComparator.java:16"$0$0$0$0$0$""
"NullSafeComparator.java:17"$0$0$0$2$44$"package org.springframework.util.comparator;"
"NullSafeComparator.java:18"$0$0$0$0$0$""
"NullSafeComparator.java:19"$0$0$0$2$28$"import java.util.Comparator;"
"NullSafeComparator.java:20"$0$0$0$0$0$""
"NullSafeComparator.java:21"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"NullSafeComparator.java:22"$0$0$0$2$39$"import org.springframework.util.Assert;"
"NullSafeComparator.java:23"$0$0$0$0$0$""
"NullSafeComparator.java:24"$0$0$0$1$3$"/**"
"NullSafeComparator.java:25"$0$0$0$14$73$" * A Comparator that will safely compare nulls to be lower or higher than"
"NullSafeComparator.java:26"$0$0$0$12$73$" * other objects. Can decorate a given Comparator or work on Comparables."
"NullSafeComparator.java:27"$0$0$0$1$2$" *"
"NullSafeComparator.java:28"$0$0$0$4$23$" * @author Keith Donald"
"NullSafeComparator.java:29"$0$0$0$4$26$" * @author Juergen Hoeller"
"NullSafeComparator.java:30"$0$0$0$3$15$" * @since 1.2.2"
"NullSafeComparator.java:31"$0$0$0$14$73$" * @param <T> the type of objects that may be compared by this comparator"
"NullSafeComparator.java:32"$0$0$0$3$18$" * @see Comparable"
"NullSafeComparator.java:33"$0$0$0$1$3$" */"
"NullSafeComparator.java:34"$0$0$0$6$61$"public class NullSafeComparator<T> implements Comparator<T> {"
"NullSafeComparator.java:35"$0$0$0$0$0$""
"NullSafeComparator.java:36"$0$0$0$1$4$"	/**"
"NullSafeComparator.java:37"$0$0$0$11$70$"	 * A shared default instance of this comparator, treating nulls lower"
"NullSafeComparator.java:38"$0$0$0$4$26$"	 * than non-null objects."
"NullSafeComparator.java:39"$0$0$0$3$31$"	 * @see Comparators#nullsLow()"
"NullSafeComparator.java:40"$0$0$0$1$4$"	 */"
"NullSafeComparator.java:41"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"NullSafeComparator.java:42"$0$0$0$8$83$"	public static final NullSafeComparator NULLS_LOW = new NullSafeComparator<>(true);"
"NullSafeComparator.java:43"$0$0$0$0$0$""
"NullSafeComparator.java:44"$0$0$0$1$4$"	/**"
"NullSafeComparator.java:45"$0$0$0$11$71$"	 * A shared default instance of this comparator, treating nulls higher"
"NullSafeComparator.java:46"$0$0$0$4$26$"	 * than non-null objects."
"NullSafeComparator.java:47"$0$0$0$3$32$"	 * @see Comparators#nullsHigh()"
"NullSafeComparator.java:48"$0$0$0$1$4$"	 */"
"NullSafeComparator.java:49"$0$0$0$1$30$"	@SuppressWarnings(""rawtypes"")"
"NullSafeComparator.java:50"$0$0$0$8$85$"	public static final NullSafeComparator NULLS_HIGH = new NullSafeComparator<>(false);"
"NullSafeComparator.java:51"$0$0$0$0$0$""
"NullSafeComparator.java:52"$0$0$0$0$0$""
"NullSafeComparator.java:53"$0$0$0$4$47$"	private final Comparator<T> nonNullComparator;"
"NullSafeComparator.java:54"$0$0$0$0$0$""
"NullSafeComparator.java:55"$0$0$0$4$32$"	private final boolean nullsLow;"
"NullSafeComparator.java:56"$0$0$0$0$0$""
"NullSafeComparator.java:57"$0$0$0$0$0$""
"NullSafeComparator.java:58"$0$0$0$1$4$"	/**"
"NullSafeComparator.java:59"$0$0$0$10$64$"	 * Create a NullSafeComparator that sorts {@code null} based on"
"NullSafeComparator.java:60"$0$0$0$7$46$"	 * the provided flag, working on Comparables."
"NullSafeComparator.java:61"$0$0$0$9$75$"	 * <p>When comparing two non-null objects, their Comparable implementation"
"NullSafeComparator.java:62"$0$0$0$12$73$"	 * will be used: this means that non-null elements (that this Comparator"
"NullSafeComparator.java:63"$0$0$0$9$53$"	 * will be applied to) need to implement Comparable."
"NullSafeComparator.java:64"$0$0$0$11$66$"	 * <p>As a convenience, you can use the default shared instances:"
"NullSafeComparator.java:65"$0$0$0$4$44$"	 * {@code NullSafeComparator.NULLS_LOW} and"
"NullSafeComparator.java:66"$0$0$0$3$42$"	 * {@code NullSafeComparator.NULLS_HIGH}."
"NullSafeComparator.java:67"$0$0$0$13$80$"	 * @param nullsLow whether to treat nulls lower or higher than non-null objects"
"NullSafeComparator.java:68"$0$0$0$3$19$"	 * @see Comparable"
"NullSafeComparator.java:69"$0$0$0$3$19$"	 * @see #NULLS_LOW"
"NullSafeComparator.java:70"$0$0$0$3$20$"	 * @see #NULLS_HIGH"
"NullSafeComparator.java:71"$0$0$0$1$4$"	 */"
"NullSafeComparator.java:72"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"NullSafeComparator.java:73"$0$0$0$4$47$"	private NullSafeComparator(boolean nullsLow) {"
"NullSafeComparator.java:74"$0$0$0$3$57$"		this.nonNullComparator = ComparableComparator.INSTANCE;"
"NullSafeComparator.java:75"$0$0$0$3$27$"		this.nullsLow = nullsLow;"
"NullSafeComparator.java:76"$0$0$0$1$2$"	}"
"NullSafeComparator.java:77"$0$0$0$0$0$""
"NullSafeComparator.java:78"$0$0$0$1$4$"	/**"
"NullSafeComparator.java:79"$0$0$0$11$68$"	 * Create a NullSafeComparator that sorts {@code null} based on the"
"NullSafeComparator.java:80"$0$0$0$7$51$"	 * provided flag, decorating the given Comparator."
"NullSafeComparator.java:81"$0$0$0$12$82$"	 * <p>When comparing two non-null objects, the specified Comparator will be used."
"NullSafeComparator.java:82"$0$0$0$14$81$"	 * The given underlying Comparator must be able to handle the elements that this"
"NullSafeComparator.java:83"$0$0$0$6$34$"	 * Comparator will be applied to."
"NullSafeComparator.java:84"$0$0$0$12$79$"	 * @param comparator the comparator to use when comparing two non-null objects"
"NullSafeComparator.java:85"$0$0$0$13$80$"	 * @param nullsLow whether to treat nulls lower or higher than non-null objects"
"NullSafeComparator.java:86"$0$0$0$1$4$"	 */"
"NullSafeComparator.java:87"$0$0$0$6$72$"	public NullSafeComparator(Comparator<T> comparator, boolean nullsLow) {"
"NullSafeComparator.java:88"$0$0$0$5$64$"		Assert.notNull(comparator, ""Non-null Comparator is required"");"
"NullSafeComparator.java:89"$0$0$0$3$38$"		this.nonNullComparator = comparator;"
"NullSafeComparator.java:90"$0$0$0$3$27$"		this.nullsLow = nullsLow;"
"NullSafeComparator.java:91"$0$0$0$1$2$"	}"
"NullSafeComparator.java:92"$0$0$0$0$0$""
"NullSafeComparator.java:93"$0$0$0$0$0$""
"NullSafeComparator.java:94"$0$0$0$1$10$"	@Override"
"NullSafeComparator.java:95"$0$0$0$9$53$"	public int compare(@Nullable T o1, @Nullable T o2) {"
"NullSafeComparator.java:96"$0$0$0$5$17$"		if (o1 == o2) {"
"NullSafeComparator.java:97"$0$0$0$2$12$"			return 0;"
"NullSafeComparator.java:98"$0$0$0$1$3$"		}"
"NullSafeComparator.java:99"$0$0$0$5$19$"		if (o1 == null) {"
"NullSafeComparator.java:100"$0$0$0$6$35$"			return (this.nullsLow ? -1 : 1);"
"NullSafeComparator.java:101"$0$0$0$1$3$"		}"
"NullSafeComparator.java:102"$0$0$0$5$19$"		if (o2 == null) {"
"NullSafeComparator.java:103"$0$0$0$6$35$"			return (this.nullsLow ? 1 : -1);"
"NullSafeComparator.java:104"$0$0$0$1$3$"		}"
"NullSafeComparator.java:105"$0$0$0$3$48$"		return this.nonNullComparator.compare(o1, o2);"
"NullSafeComparator.java:106"$0$0$0$1$2$"	}"
"NullSafeComparator.java:107"$0$0$0$0$0$""
"NullSafeComparator.java:108"$0$0$0$0$0$""
"NullSafeComparator.java:109"$0$0$0$1$10$"	@Override"
"NullSafeComparator.java:110"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"NullSafeComparator.java:111"$0$0$0$6$48$"	public boolean equals(@Nullable Object other) {"
"NullSafeComparator.java:112"$0$0$0$5$22$"		if (this == other) {"
"NullSafeComparator.java:113"$0$0$0$2$15$"			return true;"
"NullSafeComparator.java:114"$0$0$0$1$3$"		}"
"NullSafeComparator.java:115"$0$0$0$5$47$"		if (!(other instanceof NullSafeComparator)) {"
"NullSafeComparator.java:116"$0$0$0$2$16$"			return false;"
"NullSafeComparator.java:117"$0$0$0$1$3$"		}"
"NullSafeComparator.java:118"$0$0$0$5$66$"		NullSafeComparator<T> otherComp = (NullSafeComparator<T>) other;"
"NullSafeComparator.java:119"$0$0$0$6$109$"		return (this.nonNullComparator.equals(otherComp.nonNullComparator) && this.nullsLow == otherComp.nullsLow);"
"NullSafeComparator.java:120"$0$0$0$1$2$"	}"
"NullSafeComparator.java:121"$0$0$0$0$0$""
"NullSafeComparator.java:122"$0$0$0$1$10$"	@Override"
"NullSafeComparator.java:123"$0$0$0$4$24$"	public int hashCode() {"
"NullSafeComparator.java:124"$0$0$0$8$70$"		return this.nonNullComparator.hashCode() * (this.nullsLow ? -1 : 1);"
"NullSafeComparator.java:125"$0$0$0$1$2$"	}"
"NullSafeComparator.java:126"$0$0$0$0$0$""
"NullSafeComparator.java:127"$0$0$0$1$10$"	@Override"
"NullSafeComparator.java:128"$0$0$0$4$27$"	public String toString() {"
"NullSafeComparator.java:129"$0$0$0$11$87$"		return ""NullSafeComparator: non-null comparator ["" + this.nonNullComparator + ""]; "" +"
"NullSafeComparator.java:130"$0$0$0$7$49$"				(this.nullsLow ? ""nulls low"" : ""nulls high"");"
"NullSafeComparator.java:131"$0$0$0$1$2$"	}"
"NullSafeComparator.java:132"$0$0$0$0$0$""
"NullSafeComparator.java:133"$0$0$0$1$1$"}"
"PropertyPlaceholderHelper.java:1"$0$0$0$1$2$"/*"
"PropertyPlaceholderHelper.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"PropertyPlaceholderHelper.java:3"$0$0$0$1$2$" *"
"PropertyPlaceholderHelper.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"PropertyPlaceholderHelper.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"PropertyPlaceholderHelper.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"PropertyPlaceholderHelper.java:7"$0$0$0$1$2$" *"
"PropertyPlaceholderHelper.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"PropertyPlaceholderHelper.java:9"$0$0$0$1$2$" *"
"PropertyPlaceholderHelper.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"PropertyPlaceholderHelper.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"PropertyPlaceholderHelper.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"PropertyPlaceholderHelper.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"PropertyPlaceholderHelper.java:14"$0$0$0$5$33$" * limitations under the License."
"PropertyPlaceholderHelper.java:15"$0$0$0$1$3$" */"
"PropertyPlaceholderHelper.java:16"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:17"$0$0$0$2$33$"package org.springframework.util;"
"PropertyPlaceholderHelper.java:18"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:19"$0$0$0$2$25$"import java.util.HashMap;"
"PropertyPlaceholderHelper.java:20"$0$0$0$2$25$"import java.util.HashSet;"
"PropertyPlaceholderHelper.java:21"$0$0$0$2$21$"import java.util.Map;"
"PropertyPlaceholderHelper.java:22"$0$0$0$2$28$"import java.util.Properties;"
"PropertyPlaceholderHelper.java:23"$0$0$0$2$21$"import java.util.Set;"
"PropertyPlaceholderHelper.java:24"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:25"$0$0$0$2$38$"import org.apache.commons.logging.Log;"
"PropertyPlaceholderHelper.java:26"$0$0$0$2$45$"import org.apache.commons.logging.LogFactory;"
"PropertyPlaceholderHelper.java:27"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"PropertyPlaceholderHelper.java:29"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:30"$0$0$0$1$3$"/**"
"PropertyPlaceholderHelper.java:31"$0$0$0$18$108$" * Utility class for working with Strings that have placeholder values in them. A placeholder takes the form"
"PropertyPlaceholderHelper.java:32"$0$0$0$12$101$" * {@code ${name}}. Using {@code PropertyPlaceholderHelper} these placeholders can be substituted for"
"PropertyPlaceholderHelper.java:33"$0$0$0$16$107$" * user-supplied values. <p> Values for substitution can be supplied using a {@link Properties} instance or"
"PropertyPlaceholderHelper.java:34"$0$0$0$5$39$" * using a {@link PlaceholderResolver}."
"PropertyPlaceholderHelper.java:35"$0$0$0$1$2$" *"
"PropertyPlaceholderHelper.java:36"$0$0$0$4$26$" * @author Juergen Hoeller"
"PropertyPlaceholderHelper.java:37"$0$0$0$4$21$" * @author Rob Harrop"
"PropertyPlaceholderHelper.java:38"$0$0$0$3$13$" * @since 3.0"
"PropertyPlaceholderHelper.java:39"$0$0$0$1$3$" */"
"PropertyPlaceholderHelper.java:40"$0$0$0$4$40$"public class PropertyPlaceholderHelper {"
"PropertyPlaceholderHelper.java:41"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:42"$1$0$0$7$86$"	private static final Log logger = LogFactory.getLog(PropertyPlaceholderHelper.class);"
"PropertyPlaceholderHelper.java:43"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:44"$0$0$0$9$85$"	private static final Map<String, String> wellKnownSimplePrefixes = new HashMap<>(4);"
"PropertyPlaceholderHelper.java:45"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:46"$0$0$0$2$9$"	static {"
"PropertyPlaceholderHelper.java:47"$0$0$0$2$40$"		wellKnownSimplePrefixes.put(""}"", ""{"");"
"PropertyPlaceholderHelper.java:48"$0$0$0$2$40$"		wellKnownSimplePrefixes.put(""]"", ""["");"
"PropertyPlaceholderHelper.java:49"$0$0$0$2$40$"		wellKnownSimplePrefixes.put("")"", ""("");"
"PropertyPlaceholderHelper.java:50"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:51"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:52"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:53"$0$0$0$4$40$"	private final String placeholderPrefix;"
"PropertyPlaceholderHelper.java:54"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:55"$0$0$0$4$40$"	private final String placeholderSuffix;"
"PropertyPlaceholderHelper.java:56"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:57"$0$0$0$4$35$"	private final String simplePrefix;"
"PropertyPlaceholderHelper.java:58"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:59"$0$0$0$1$10$"	@Nullable"
"PropertyPlaceholderHelper.java:60"$0$0$0$4$37$"	private final String valueSeparator;"
"PropertyPlaceholderHelper.java:61"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:62"$0$0$0$4$54$"	private final boolean ignoreUnresolvablePlaceholders;"
"PropertyPlaceholderHelper.java:63"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:64"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:65"$0$0$0$1$4$"	/**"
"PropertyPlaceholderHelper.java:66"$0$0$0$13$93$"	 * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix."
"PropertyPlaceholderHelper.java:67"$0$0$0$5$42$"	 * Unresolvable placeholders are ignored."
"PropertyPlaceholderHelper.java:68"$0$0$0$12$79$"	 * @param placeholderPrefix the prefix that denotes the start of a placeholder"
"PropertyPlaceholderHelper.java:69"$0$0$0$12$77$"	 * @param placeholderSuffix the suffix that denotes the end of a placeholder"
"PropertyPlaceholderHelper.java:70"$0$0$0$1$4$"	 */"
"PropertyPlaceholderHelper.java:71"$0$0$0$6$87$"	public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {"
"PropertyPlaceholderHelper.java:72"$0$0$0$4$57$"		this(placeholderPrefix, placeholderSuffix, null, true);"
"PropertyPlaceholderHelper.java:73"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:74"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:75"$0$0$0$1$4$"	/**"
"PropertyPlaceholderHelper.java:76"$0$0$0$13$93$"	 * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix."
"PropertyPlaceholderHelper.java:77"$0$0$0$12$79$"	 * @param placeholderPrefix the prefix that denotes the start of a placeholder"
"PropertyPlaceholderHelper.java:78"$0$0$0$12$77$"	 * @param placeholderSuffix the suffix that denotes the end of a placeholder"
"PropertyPlaceholderHelper.java:79"$0$0$0$10$83$"	 * @param valueSeparator the separating character between the placeholder variable"
"PropertyPlaceholderHelper.java:80"$0$0$0$8$44$"	 * and the associated default value, if any"
"PropertyPlaceholderHelper.java:81"$0$0$0$8$92$"	 * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should"
"PropertyPlaceholderHelper.java:82"$0$0$0$11$67$"	 * be ignored ({@code true}) or cause an exception ({@code false})"
"PropertyPlaceholderHelper.java:83"$0$0$0$1$4$"	 */"
"PropertyPlaceholderHelper.java:84"$0$0$0$5$85$"	public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,"
"PropertyPlaceholderHelper.java:85"$0$0$0$6$77$"			@Nullable String valueSeparator, boolean ignoreUnresolvablePlaceholders) {"
"PropertyPlaceholderHelper.java:86"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:87"$0$0$0$6$76$"		Assert.notNull(placeholderPrefix, ""'placeholderPrefix' must not be null"");"
"PropertyPlaceholderHelper.java:88"$0$0$0$6$76$"		Assert.notNull(placeholderSuffix, ""'placeholderSuffix' must not be null"");"
"PropertyPlaceholderHelper.java:89"$0$0$0$3$45$"		this.placeholderPrefix = placeholderPrefix;"
"PropertyPlaceholderHelper.java:90"$0$0$0$3$45$"		this.placeholderSuffix = placeholderSuffix;"
"PropertyPlaceholderHelper.java:91"$1$0$0$4$85$"		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix);"
"PropertyPlaceholderHelper.java:92"$0$0$0$7$96$"		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {"
"PropertyPlaceholderHelper.java:93"$0$0$0$3$45$"			this.simplePrefix = simplePrefixForSuffix;"
"PropertyPlaceholderHelper.java:94"$0$0$0$1$3$"		}"
"PropertyPlaceholderHelper.java:95"$0$0$0$2$8$"		else {"
"PropertyPlaceholderHelper.java:96"$0$0$0$3$46$"			this.simplePrefix = this.placeholderPrefix;"
"PropertyPlaceholderHelper.java:97"$0$0$0$1$3$"		}"
"PropertyPlaceholderHelper.java:98"$0$0$0$3$39$"		this.valueSeparator = valueSeparator;"
"PropertyPlaceholderHelper.java:99"$0$0$0$3$71$"		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;"
"PropertyPlaceholderHelper.java:100"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:101"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:102"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:103"$0$0$0$1$4$"	/**"
"PropertyPlaceholderHelper.java:104"$0$0$0$11$78$"	 * Replaces all placeholders of format {@code ${name}} with the corresponding"
"PropertyPlaceholderHelper.java:105"$0$0$0$7$50$"	 * property from the supplied {@link Properties}."
"PropertyPlaceholderHelper.java:106"$0$0$0$11$69$"	 * @param value the value containing the placeholders to be replaced"
"PropertyPlaceholderHelper.java:107"$0$0$0$10$67$"	 * @param properties the {@code Properties} to use for replacement"
"PropertyPlaceholderHelper.java:108"$0$0$0$9$64$"	 * @return the supplied value with placeholders replaced inline"
"PropertyPlaceholderHelper.java:109"$0$0$0$1$4$"	 */"
"PropertyPlaceholderHelper.java:110"$0$0$0$8$79$"	public String replacePlaceholders(String value, final Properties properties) {"
"PropertyPlaceholderHelper.java:111"$0$0$0$6$62$"		Assert.notNull(properties, ""'properties' must not be null"");"
"PropertyPlaceholderHelper.java:112"$1$0$0$3$61$"		return replacePlaceholders(value, properties::getProperty);"
"PropertyPlaceholderHelper.java:113"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:114"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:115"$0$0$0$1$4$"	/**"
"PropertyPlaceholderHelper.java:116"$0$0$0$12$79$"	 * Replaces all placeholders of format {@code ${name}} with the value returned"
"PropertyPlaceholderHelper.java:117"$0$0$0$6$50$"	 * from the supplied {@link PlaceholderResolver}."
"PropertyPlaceholderHelper.java:118"$0$0$0$11$69$"	 * @param value the value containing the placeholders to be replaced"
"PropertyPlaceholderHelper.java:119"$0$0$0$10$85$"	 * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement"
"PropertyPlaceholderHelper.java:120"$0$0$0$9$64$"	 * @return the supplied value with placeholders replaced inline"
"PropertyPlaceholderHelper.java:121"$0$0$0$1$4$"	 */"
"PropertyPlaceholderHelper.java:122"$0$0$0$7$91$"	public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {"
"PropertyPlaceholderHelper.java:123"$0$0$0$6$52$"		Assert.notNull(value, ""'value' must not be null"");"
"PropertyPlaceholderHelper.java:124"$0$0$0$4$60$"		return parseStringValue(value, placeholderResolver, null);"
"PropertyPlaceholderHelper.java:125"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:126"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:127"$0$0$0$3$35$"	protected String parseStringValue("
"PropertyPlaceholderHelper.java:128"$0$0$0$8$102$"			String value, PlaceholderResolver placeholderResolver, @Nullable Set<String> visitedPlaceholders) {"
"PropertyPlaceholderHelper.java:129"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:130"$0$0$0$4$57$"		int startIndex = value.indexOf(this.placeholderPrefix);"
"PropertyPlaceholderHelper.java:131"$0$0$0$5$25$"		if (startIndex == -1) {"
"PropertyPlaceholderHelper.java:132"$0$0$0$2$16$"			return value;"
"PropertyPlaceholderHelper.java:133"$0$0$0$1$3$"		}"
"PropertyPlaceholderHelper.java:134"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:135"$0$0$0$5$50$"		StringBuilder result = new StringBuilder(value);"
"PropertyPlaceholderHelper.java:136"$0$0$0$5$28$"		while (startIndex != -1) {"
"PropertyPlaceholderHelper.java:137"$0$0$0$5$62$"			int endIndex = findPlaceholderEndIndex(result, startIndex);"
"PropertyPlaceholderHelper.java:138"$0$0$0$5$24$"			if (endIndex != -1) {"
"PropertyPlaceholderHelper.java:139"$0$0$0$7$98$"				String placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);"
"PropertyPlaceholderHelper.java:140"$0$0$0$4$45$"				String originalPlaceholder = placeholder;"
"PropertyPlaceholderHelper.java:141"$0$0$0$5$38$"				if (visitedPlaceholders == null) {"
"PropertyPlaceholderHelper.java:142"$0$0$0$4$44$"					visitedPlaceholders = new HashSet<>(4);"
"PropertyPlaceholderHelper.java:143"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:144"$0$0$0$3$56$"				if (!visitedPlaceholders.add(originalPlaceholder)) {"
"PropertyPlaceholderHelper.java:145"$0$0$0$3$40$"					throw new IllegalArgumentException("
"PropertyPlaceholderHelper.java:146"$0$0$0$11$95$"							""Circular placeholder reference '"" + originalPlaceholder + ""' in property definitions"");"
"PropertyPlaceholderHelper.java:147"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:148"$0$0$1$10$83$"				// Recursive invocation, parsing placeholders contained in the placeholder key."
"PropertyPlaceholderHelper.java:149"$0$0$0$5$90$"				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);"
"PropertyPlaceholderHelper.java:150"$0$0$1$10$57$"				// Now obtain the value for the fully resolved key..."
"PropertyPlaceholderHelper.java:151"$0$0$0$4$73$"				String propVal = placeholderResolver.resolvePlaceholder(placeholder);"
"PropertyPlaceholderHelper.java:152"$0$0$0$9$57$"				if (propVal == null && this.valueSeparator != null) {"
"PropertyPlaceholderHelper.java:153"$0$0$0$4$67$"					int separatorIndex = placeholder.indexOf(this.valueSeparator);"
"PropertyPlaceholderHelper.java:154"$0$0$0$5$32$"					if (separatorIndex != -1) {"
"PropertyPlaceholderHelper.java:155"$0$0$0$5$74$"						String actualPlaceholder = placeholder.substring(0, separatorIndex);"
"PropertyPlaceholderHelper.java:156"$0$0$0$6$97$"						String defaultValue = placeholder.substring(separatorIndex + this.valueSeparator.length());"
"PropertyPlaceholderHelper.java:157"$0$0$0$3$74$"						propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);"
"PropertyPlaceholderHelper.java:158"$0$0$0$5$28$"						if (propVal == null) {"
"PropertyPlaceholderHelper.java:159"$0$0$0$3$30$"							propVal = defaultValue;"
"PropertyPlaceholderHelper.java:160"$0$0$0$1$7$"						}"
"PropertyPlaceholderHelper.java:161"$0$0$0$1$6$"					}"
"PropertyPlaceholderHelper.java:162"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:163"$0$0$0$5$26$"				if (propVal != null) {"
"PropertyPlaceholderHelper.java:164"$0$0$1$8$67$"					// Recursive invocation, parsing placeholders contained in the"
"PropertyPlaceholderHelper.java:165"$0$0$1$5$46$"					// previously resolved placeholder value."
"PropertyPlaceholderHelper.java:166"$0$0$0$5$83$"					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);"
"PropertyPlaceholderHelper.java:167"$0$0$0$5$85$"					result.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);"
"PropertyPlaceholderHelper.java:168"$0$0$0$3$35$"					if (logger.isTraceEnabled()) {"
"PropertyPlaceholderHelper.java:169"$0$0$0$7$65$"						logger.trace(""Resolved placeholder '"" + placeholder + ""'"");"
"PropertyPlaceholderHelper.java:170"$0$0$0$1$6$"					}"
"PropertyPlaceholderHelper.java:171"$0$0$0$6$88$"					startIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());"
"PropertyPlaceholderHelper.java:172"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:173"$0$0$0$4$51$"				else if (this.ignoreUnresolvablePlaceholders) {"
"PropertyPlaceholderHelper.java:174"$0$0$1$5$39$"					// Proceed with unprocessed value."
"PropertyPlaceholderHelper.java:175"$0$0$0$6$101$"					startIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());"
"PropertyPlaceholderHelper.java:176"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:177"$0$0$0$2$10$"				else {"
"PropertyPlaceholderHelper.java:178"$0$0$0$8$75$"					throw new IllegalArgumentException(""Could not resolve placeholder '"" +"
"PropertyPlaceholderHelper.java:179"$0$0$0$12$58$"							placeholder + ""'"" + "" in value \"""" + value + ""\"""");"
"PropertyPlaceholderHelper.java:180"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:181"$0$0$0$1$52$"				visitedPlaceholders.remove(originalPlaceholder);"
"PropertyPlaceholderHelper.java:182"$0$0$0$1$4$"			}"
"PropertyPlaceholderHelper.java:183"$0$0$0$2$9$"			else {"
"PropertyPlaceholderHelper.java:184"$0$0$0$3$20$"				startIndex = -1;"
"PropertyPlaceholderHelper.java:185"$0$0$0$1$4$"			}"
"PropertyPlaceholderHelper.java:186"$0$0$0$1$3$"		}"
"PropertyPlaceholderHelper.java:187"$0$0$0$2$27$"		return result.toString();"
"PropertyPlaceholderHelper.java:188"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:189"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:190"$0$0$0$7$72$"	private int findPlaceholderEndIndex(CharSequence buf, int startIndex) {"
"PropertyPlaceholderHelper.java:191"$0$0$0$6$59$"		int index = startIndex + this.placeholderPrefix.length();"
"PropertyPlaceholderHelper.java:192"$0$0$0$4$34$"		int withinNestedPlaceholder = 0;"
"PropertyPlaceholderHelper.java:193"$0$0$0$5$32$"		while (index < buf.length()) {"
"PropertyPlaceholderHelper.java:194"$0$0$0$5$72$"			if (StringUtils.substringMatch(buf, index, this.placeholderSuffix)) {"
"PropertyPlaceholderHelper.java:195"$0$0$0$5$38$"				if (withinNestedPlaceholder > 0) {"
"PropertyPlaceholderHelper.java:196"$0$0$0$1$31$"					withinNestedPlaceholder--;"
"PropertyPlaceholderHelper.java:197"$0$0$0$5$53$"					index = index + this.placeholderSuffix.length();"
"PropertyPlaceholderHelper.java:198"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:199"$0$0$0$2$10$"				else {"
"PropertyPlaceholderHelper.java:200"$0$0$0$2$18$"					return index;"
"PropertyPlaceholderHelper.java:201"$0$0$0$1$5$"				}"
"PropertyPlaceholderHelper.java:202"$0$0$0$1$4$"			}"
"PropertyPlaceholderHelper.java:203"$0$0$0$6$72$"			else if (StringUtils.substringMatch(buf, index, this.simplePrefix)) {"
"PropertyPlaceholderHelper.java:204"$0$0$0$1$30$"				withinNestedPlaceholder++;"
"PropertyPlaceholderHelper.java:205"$0$0$0$5$47$"				index = index + this.simplePrefix.length();"
"PropertyPlaceholderHelper.java:206"$0$0$0$1$4$"			}"
"PropertyPlaceholderHelper.java:207"$0$0$0$2$9$"			else {"
"PropertyPlaceholderHelper.java:208"$0$0$0$1$12$"				index++;"
"PropertyPlaceholderHelper.java:209"$0$0$0$1$4$"			}"
"PropertyPlaceholderHelper.java:210"$0$0$0$1$3$"		}"
"PropertyPlaceholderHelper.java:211"$0$0$0$2$12$"		return -1;"
"PropertyPlaceholderHelper.java:212"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:213"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:214"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:215"$0$0$0$1$4$"	/**"
"PropertyPlaceholderHelper.java:216"$0$0$0$13$96$"	 * Strategy interface used to resolve replacement values for placeholders contained in Strings."
"PropertyPlaceholderHelper.java:217"$0$0$0$1$4$"	 */"
"PropertyPlaceholderHelper.java:218"$0$0$0$1$21$"	@FunctionalInterface"
"PropertyPlaceholderHelper.java:219"$0$0$0$4$39$"	public interface PlaceholderResolver {"
"PropertyPlaceholderHelper.java:220"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:221"$0$0$0$1$5$"		/**"
"PropertyPlaceholderHelper.java:222"$0$0$0$10$68$"		 * Resolve the supplied placeholder name to the replacement value."
"PropertyPlaceholderHelper.java:223"$0$0$0$10$66$"		 * @param placeholderName the name of the placeholder to resolve"
"PropertyPlaceholderHelper.java:224"$0$0$0$15$83$"		 * @return the replacement value, or {@code null} if no replacement is to be made"
"PropertyPlaceholderHelper.java:225"$0$0$0$1$5$"		 */"
"PropertyPlaceholderHelper.java:226"$0$0$0$1$11$"		@Nullable"
"PropertyPlaceholderHelper.java:227"$0$0$0$3$52$"		String resolvePlaceholder(String placeholderName);"
"PropertyPlaceholderHelper.java:228"$0$0$0$1$2$"	}"
"PropertyPlaceholderHelper.java:229"$0$0$0$0$0$""
"PropertyPlaceholderHelper.java:230"$0$0$0$1$1$"}"
"StringDecoder.java:1"$0$0$0$1$2$"/*"
"StringDecoder.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"StringDecoder.java:3"$0$0$0$1$2$" *"
"StringDecoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"StringDecoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"StringDecoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"StringDecoder.java:7"$0$0$0$1$2$" *"
"StringDecoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"StringDecoder.java:9"$0$0$0$1$2$" *"
"StringDecoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"StringDecoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"StringDecoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"StringDecoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"StringDecoder.java:14"$0$0$0$5$33$" * limitations under the License."
"StringDecoder.java:15"$0$0$0$1$3$" */"
"StringDecoder.java:16"$0$0$0$0$0$""
"StringDecoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"StringDecoder.java:18"$0$0$0$0$0$""
"StringDecoder.java:19"$0$0$0$2$27$"import java.nio.CharBuffer;"
"StringDecoder.java:20"$0$0$0$2$32$"import java.nio.charset.Charset;"
"StringDecoder.java:21"$0$0$0$2$41$"import java.nio.charset.StandardCharsets;"
"StringDecoder.java:22"$0$0$0$2$27$"import java.util.ArrayList;"
"StringDecoder.java:23"$0$0$0$2$24$"import java.util.Arrays;"
"StringDecoder.java:24"$0$0$0$2$22$"import java.util.List;"
"StringDecoder.java:25"$0$0$0$2$21$"import java.util.Map;"
"StringDecoder.java:26"$0$0$0$2$46$"import java.util.concurrent.ConcurrentHashMap;"
"StringDecoder.java:27"$0$0$0$2$42$"import java.util.concurrent.ConcurrentMap;"
"StringDecoder.java:28"$0$0$0$2$35$"import java.util.function.Consumer;"
"StringDecoder.java:29"$0$0$0$0$0$""
"StringDecoder.java:30"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"StringDecoder.java:31"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"StringDecoder.java:32"$0$0$0$0$0$""
"StringDecoder.java:33"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"StringDecoder.java:34"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"StringDecoder.java:35"$0$0$0$2$67$"import org.springframework.core.io.buffer.DataBufferLimitException;"
"StringDecoder.java:36"$0$0$0$2$58$"import org.springframework.core.io.buffer.DataBufferUtils;"
"StringDecoder.java:37"$0$0$0$2$60$"import org.springframework.core.io.buffer.DataBufferWrapper;"
"StringDecoder.java:38"$0$0$0$2$67$"import org.springframework.core.io.buffer.DefaultDataBufferFactory;"
"StringDecoder.java:39"$0$0$0$2$64$"import org.springframework.core.io.buffer.LimitedDataBufferList;"
"StringDecoder.java:40"$0$0$0$2$59$"import org.springframework.core.io.buffer.PooledDataBuffer;"
"StringDecoder.java:41"$0$0$0$2$51$"import org.springframework.core.log.LogFormatUtils;"
"StringDecoder.java:42"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"StringDecoder.java:43"$0$0$0$2$39$"import org.springframework.util.Assert;"
"StringDecoder.java:44"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"StringDecoder.java:45"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"StringDecoder.java:46"$0$0$0$0$0$""
"StringDecoder.java:47"$0$0$0$1$3$"/**"
"StringDecoder.java:48"$0$0$0$16$93$" * Decode from a data buffer stream to a {@code String} stream. Before decoding, this decoder"
"StringDecoder.java:49"$0$0$0$14$78$" * realigns the incoming data buffers so that each buffer ends with a newline."
"StringDecoder.java:50"$0$0$0$17$95$" * This is to make sure that multibyte characters are decoded properly, and do not cross buffer"
"StringDecoder.java:51"$0$0$0$11$82$" * boundaries. The default delimiters ({@code \n}, {@code \r\n})can be customized."
"StringDecoder.java:52"$0$0$0$1$2$" *"
"StringDecoder.java:53"$0$0$0$7$71$" * <p>Partially inspired by Netty's {@code DelimiterBasedFrameDecoder}."
"StringDecoder.java:54"$0$0$0$1$2$" *"
"StringDecoder.java:55"$0$0$0$4$28$" * @author Sebastien Deleuze"
"StringDecoder.java:56"$0$0$0$4$23$" * @author Brian Clozel"
"StringDecoder.java:57"$0$0$0$4$24$" * @author Arjen Poutsma"
"StringDecoder.java:58"$0$0$0$4$22$" * @author Mark Paluch"
"StringDecoder.java:59"$0$0$0$3$13$" * @since 5.0"
"StringDecoder.java:60"$0$0$0$3$27$" * @see CharSequenceEncoder"
"StringDecoder.java:61"$0$0$0$1$3$" */"
"StringDecoder.java:62"$0$0$0$7$76$"public final class StringDecoder extends AbstractDataBufferDecoder<String> {"
"StringDecoder.java:63"$0$0$0$0$0$""
"StringDecoder.java:64"$0$0$0$9$49$"	/** The default charset to use, i.e. ""UTF-8"". */"
"StringDecoder.java:65"$0$0$0$7$70$"	public static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;"
"StringDecoder.java:66"$0$0$0$0$0$""
"StringDecoder.java:67"$0$0$0$14$79$"	/** The default delimiter strings to use, i.e. {@code \r\n} and {@code \n}. */"
"StringDecoder.java:68"$0$0$0$8$83$"	public static final List<String> DEFAULT_DELIMITERS = Arrays.asList(""\r\n"", ""\n"");"
"StringDecoder.java:69"$0$0$0$0$0$""
"StringDecoder.java:70"$0$0$0$0$0$""
"StringDecoder.java:71"$0$0$0$4$39$"	private final List<String> delimiters;"
"StringDecoder.java:72"$0$0$0$0$0$""
"StringDecoder.java:73"$0$0$0$4$38$"	private final boolean stripDelimiter;"
"StringDecoder.java:74"$0$0$0$0$0$""
"StringDecoder.java:75"$0$0$0$8$92$"	private final ConcurrentMap<Charset, byte[][]> delimitersCache = new ConcurrentHashMap<>();"
"StringDecoder.java:76"$0$0$0$0$0$""
"StringDecoder.java:77"$0$0$0$0$0$""
"StringDecoder.java:78"$0$0$0$8$96$"	private StringDecoder(List<String> delimiters, boolean stripDelimiter, MimeType... mimeTypes) {"
"StringDecoder.java:79"$0$0$0$1$19$"		super(mimeTypes);"
"StringDecoder.java:80"$0$0$0$6$64$"		Assert.notEmpty(delimiters, ""'delimiters' must not be empty"");"
"StringDecoder.java:81"$0$0$0$4$48$"		this.delimiters = new ArrayList<>(delimiters);"
"StringDecoder.java:82"$0$0$0$3$39$"		this.stripDelimiter = stripDelimiter;"
"StringDecoder.java:83"$0$0$0$1$2$"	}"
"StringDecoder.java:84"$0$0$0$0$0$""
"StringDecoder.java:85"$0$0$0$0$0$""
"StringDecoder.java:86"$0$0$0$1$10$"	@Override"
"StringDecoder.java:87"$0$0$0$8$84$"	public boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"StringDecoder.java:88"$0$0$0$7$91$"		return (elementType.resolve() == String.class && super.canDecode(elementType, mimeType));"
"StringDecoder.java:89"$0$0$0$1$2$"	}"
"StringDecoder.java:90"$0$0$0$0$0$""
"StringDecoder.java:91"$0$0$0$1$10$"	@Override"
"StringDecoder.java:92"$0$0$0$6$84$"	public Flux<String> decode(Publisher<DataBuffer> input, ResolvableType elementType,"
"StringDecoder.java:93"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"StringDecoder.java:94"$0$0$0$0$0$""
"StringDecoder.java:95"$1$0$0$4$56$"		byte[][] delimiterBytes = getDelimiterBytes(mimeType);"
"StringDecoder.java:96"$0$0$0$0$0$""
"StringDecoder.java:97"$0$0$0$6$49$"		Flux<DataBuffer> inputFlux = Flux.defer(() -> {"
"StringDecoder.java:98"$0$0$0$4$77$"			DataBufferUtils.Matcher matcher = DataBufferUtils.matcher(delimiterBytes);"
"StringDecoder.java:99"$0$0$0$0$0$""
"StringDecoder.java:100"$0$0$0$1$60$"			@SuppressWarnings(""MismatchedQueryAndUpdateOfCollection"")"
"StringDecoder.java:101"$1$0$0$5$65$"			LimitChecker limiter = new LimitChecker(getMaxInMemorySize());"
"StringDecoder.java:102"$0$0$0$0$0$""
"StringDecoder.java:103"$0$0$0$2$26$"			return Flux.from(input)"
"StringDecoder.java:104"$0$0$0$4$74$"					.concatMapIterable(buffer -> endFrameAfterDelimiter(buffer, matcher))"
"StringDecoder.java:105"$0$0$0$1$23$"					.doOnNext(limiter)"
"StringDecoder.java:106"$0$0$0$5$61$"					.bufferUntil(buffer -> buffer instanceof EndFrameBuffer)"
"StringDecoder.java:107"$0$0$0$4$58$"					.map(list -> joinAndStrip(list, this.stripDelimiter))"
"StringDecoder.java:108"$0$0$0$2$68$"					.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release);"
"StringDecoder.java:109"$0$0$0$1$5$"		});"
"StringDecoder.java:110"$0$0$0$0$0$""
"StringDecoder.java:111"$0$0$0$5$63$"		return super.decode(inputFlux, elementType, mimeType, hints);"
"StringDecoder.java:112"$0$0$0$1$2$"	}"
"StringDecoder.java:113"$0$0$0$0$0$""
"StringDecoder.java:114"$1$0$0$6$66$"	private byte[][] getDelimiterBytes(@Nullable MimeType mimeType) {"
"StringDecoder.java:115"$1$0$0$5$80$"		return this.delimitersCache.computeIfAbsent(getCharset(mimeType), charset -> {"
"StringDecoder.java:116"$0$0$0$5$56$"			byte[][] result = new byte[this.delimiters.size()][];"
"StringDecoder.java:117"$0$0$0$10$53$"			for (int i = 0; i < this.delimiters.size(); i++) {"
"StringDecoder.java:118"$2$0$0$3$57$"				result[i] = this.delimiters.get(i).getBytes(charset);"
"StringDecoder.java:119"$0$0$0$1$4$"			}"
"StringDecoder.java:120"$0$0$0$2$17$"			return result;"
"StringDecoder.java:121"$0$0$0$1$5$"		});"
"StringDecoder.java:122"$0$0$0$1$2$"	}"
"StringDecoder.java:123"$0$0$0$0$0$""
"StringDecoder.java:124"$0$0$0$1$10$"	@Override"
"StringDecoder.java:125"$0$0$0$6$72$"	public String decode(DataBuffer dataBuffer, ResolvableType elementType,"
"StringDecoder.java:126"$0$0$0$8$70$"			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"StringDecoder.java:127"$0$0$0$0$0$""
"StringDecoder.java:128"$1$0$0$4$41$"		Charset charset = getCharset(mimeType);"
"StringDecoder.java:129"$0$0$0$4$68$"		CharBuffer charBuffer = charset.decode(dataBuffer.asByteBuffer());"
"StringDecoder.java:130"$0$0$0$1$38$"		DataBufferUtils.release(dataBuffer);"
"StringDecoder.java:131"$0$0$0$4$39$"		String value = charBuffer.toString();"
"StringDecoder.java:132"$0$0$0$4$48$"		LogFormatUtils.traceDebug(logger, traceOn -> {"
"StringDecoder.java:133"$0$0$0$5$66$"			String formatted = LogFormatUtils.formatValue(value, !traceOn);"
"StringDecoder.java:134"$1$0$0$7$61$"			return Hints.getLogPrefix(hints) + ""Decoded "" + formatted;"
"StringDecoder.java:135"$0$0$0$1$5$"		});"
"StringDecoder.java:136"$0$0$0$2$15$"		return value;"
"StringDecoder.java:137"$0$0$0$1$2$"	}"
"StringDecoder.java:138"$0$0$0$0$0$""
"StringDecoder.java:139"$1$0$0$7$65$"	private static Charset getCharset(@Nullable MimeType mimeType) {"
"StringDecoder.java:140"$1$0$0$9$58$"		if (mimeType != null && mimeType.getCharset() != null) {"
"StringDecoder.java:141"$1$0$0$2$32$"			return mimeType.getCharset();"
"StringDecoder.java:142"$0$0$0$1$3$"		}"
"StringDecoder.java:143"$0$0$0$2$8$"		else {"
"StringDecoder.java:144"$0$0$0$2$26$"			return DEFAULT_CHARSET;"
"StringDecoder.java:145"$0$0$0$1$3$"		}"
"StringDecoder.java:146"$0$0$0$1$2$"	}"
"StringDecoder.java:147"$0$0$0$0$0$""
"StringDecoder.java:148"$0$0$0$1$4$"	/**"
"StringDecoder.java:149"$0$0$0$13$86$"	 * Finds the first match and longest delimiter, {@link EndFrameBuffer} just after it."
"StringDecoder.java:150"$0$0$0$1$3$"	 *"
"StringDecoder.java:151"$0$0$0$9$54$"	 * @param dataBuffer the buffer to find delimiters in"
"StringDecoder.java:152"$0$0$0$9$52$"	 * @param matcher used to find the first delimiters"
"StringDecoder.java:153"$0$0$0$14$94$"	 * @return a flux of buffers, containing {@link EndFrameBuffer} after each delimiter that was"
"StringDecoder.java:154"$0$0$0$12$91$"	 * found in {@code dataBuffer}. Returns  Flux, because returning List (w/ flatMapIterable)"
"StringDecoder.java:155"$0$0$0$8$48$"	 * results in memory leaks due to pre-fetching."
"StringDecoder.java:156"$0$0$0$1$4$"	 */"
"StringDecoder.java:157"$0$0$0$8$113$"	private static List<DataBuffer> endFrameAfterDelimiter(DataBuffer dataBuffer, DataBufferUtils.Matcher matcher) {"
"StringDecoder.java:158"$0$0$0$5$46$"		List<DataBuffer> result = new ArrayList<>();"
"StringDecoder.java:159"$0$0$0$2$7$"		try {"
"StringDecoder.java:160"$0$0$0$2$7$"			do {"
"StringDecoder.java:161"$0$0$0$4$43$"				int endIdx = matcher.match(dataBuffer);"
"StringDecoder.java:162"$0$0$0$5$23$"				if (endIdx != -1) {"
"StringDecoder.java:163"$0$0$0$4$50$"					int readPosition = dataBuffer.readPosition();"
"StringDecoder.java:164"$0$0$0$8$46$"					int length = (endIdx - readPosition + 1);"
"StringDecoder.java:165"$0$0$0$5$71$"					DataBuffer slice = dataBuffer.retainedSlice(readPosition, length);"
"StringDecoder.java:166"$0$0$0$1$23$"					result.add(slice);"
"StringDecoder.java:167"$0$0$0$2$57$"					result.add(new EndFrameBuffer(matcher.delimiter()));"
"StringDecoder.java:168"$0$0$0$3$41$"					dataBuffer.readPosition(endIdx + 1);"
"StringDecoder.java:169"$0$0$0$1$5$"				}"
"StringDecoder.java:170"$0$0$0$2$10$"				else {"
"StringDecoder.java:171"$0$0$0$1$52$"					result.add(DataBufferUtils.retain(dataBuffer));"
"StringDecoder.java:172"$0$0$0$1$11$"					break;"
"StringDecoder.java:173"$0$0$0$1$5$"				}"
"StringDecoder.java:174"$0$0$0$1$4$"			}"
"StringDecoder.java:175"$0$0$0$4$46$"			while (dataBuffer.readableByteCount() > 0);"
"StringDecoder.java:176"$0$0$0$1$3$"		}"
"StringDecoder.java:177"$0$0$0$2$11$"		finally {"
"StringDecoder.java:178"$0$0$0$1$39$"			DataBufferUtils.release(dataBuffer);"
"StringDecoder.java:179"$0$0$0$1$3$"		}"
"StringDecoder.java:180"$0$0$0$2$16$"		return result;"
"StringDecoder.java:181"$0$0$0$1$2$"	}"
"StringDecoder.java:182"$0$0$0$0$0$""
"StringDecoder.java:183"$0$0$0$1$4$"	/**"
"StringDecoder.java:184"$0$0$0$17$90$"	 * Joins the given list of buffers. If the list ends with a {@link EndFrameBuffer}, it is"
"StringDecoder.java:185"$0$0$0$14$89$"	 * removed. If {@code stripDelimiter} is {@code true} and the resulting buffer ends with"
"StringDecoder.java:186"$0$0$0$6$31$"	 * a delimiter, it is removed."
"StringDecoder.java:187"$0$0$0$8$47$"	 * @param dataBuffers the data buffers to join"
"StringDecoder.java:188"$0$0$0$8$56$"	 * @param stripDelimiter whether to strip the delimiter"
"StringDecoder.java:189"$0$0$0$5$29$"	 * @return the joined buffer"
"StringDecoder.java:190"$0$0$0$1$4$"	 */"
"StringDecoder.java:191"$0$0$0$8$95$"	private static DataBuffer joinAndStrip(List<DataBuffer> dataBuffers, boolean stripDelimiter) {"
"StringDecoder.java:192"$0$0$0$6$74$"		Assert.state(!dataBuffers.isEmpty(), ""DataBuffers should not be empty"");"
"StringDecoder.java:193"$0$0$0$0$0$""
"StringDecoder.java:194"$0$0$0$4$34$"		byte[] matchingDelimiter = null;"
"StringDecoder.java:195"$0$0$0$0$0$""
"StringDecoder.java:196"$0$0$0$6$39$"		int lastIdx = dataBuffers.size() - 1;"
"StringDecoder.java:197"$1$0$0$4$51$"		DataBuffer lastBuffer = dataBuffers.get(lastIdx);"
"StringDecoder.java:198"$0$0$0$5$45$"		if (lastBuffer instanceof EndFrameBuffer) {"
"StringDecoder.java:199"$0$0$0$4$65$"			matchingDelimiter = ((EndFrameBuffer) lastBuffer).delimiter();"
"StringDecoder.java:200"$0$0$0$1$31$"			dataBuffers.remove(lastIdx);"
"StringDecoder.java:201"$0$0$0$1$3$"		}"
"StringDecoder.java:202"$0$0$0$0$0$""
"StringDecoder.java:203"$1$0$0$4$69$"		DataBuffer result = dataBuffers.get(0).factory().join(dataBuffers);"
"StringDecoder.java:204"$0$0$0$0$0$""
"StringDecoder.java:205"$0$0$0$7$52$"		if (stripDelimiter && matchingDelimiter != null) {"
"StringDecoder.java:206"$0$0$0$3$75$"			result.writePosition(result.writePosition() - matchingDelimiter.length);"
"StringDecoder.java:207"$0$0$0$1$3$"		}"
"StringDecoder.java:208"$0$0$0$2$16$"		return result;"
"StringDecoder.java:209"$0$0$0$1$2$"	}"
"StringDecoder.java:210"$0$0$0$0$0$""
"StringDecoder.java:211"$0$0$0$0$0$""
"StringDecoder.java:212"$0$0$0$0$0$""
"StringDecoder.java:213"$0$0$0$0$0$""
"StringDecoder.java:214"$0$0$0$1$4$"	/**"
"StringDecoder.java:215"$0$0$0$8$60$"	 * Create a {@code StringDecoder} for {@code ""text/plain""}."
"StringDecoder.java:216"$0$0$0$7$46$"	 * @param stripDelimiter this flag is ignored"
"StringDecoder.java:217"$0$0$0$12$75$"	 * @deprecated as of Spring 5.0.4, in favor of {@link #textPlainOnly()} or"
"StringDecoder.java:218"$0$0$0$4$41$"	 * {@link #textPlainOnly(List, boolean)}"
"StringDecoder.java:219"$0$0$0$1$4$"	 */"
"StringDecoder.java:220"$0$0$0$1$12$"	@Deprecated"
"StringDecoder.java:221"$0$0$0$6$68$"	public static StringDecoder textPlainOnly(boolean stripDelimiter) {"
"StringDecoder.java:222"$0$0$0$2$25$"		return textPlainOnly();"
"StringDecoder.java:223"$0$0$0$1$2$"	}"
"StringDecoder.java:224"$0$0$0$0$0$""
"StringDecoder.java:225"$0$0$0$1$4$"	/**"
"StringDecoder.java:226"$0$0$0$8$60$"	 * Create a {@code StringDecoder} for {@code ""text/plain""}."
"StringDecoder.java:227"$0$0$0$1$4$"	 */"
"StringDecoder.java:228"$0$0$0$5$46$"	public static StringDecoder textPlainOnly() {"
"StringDecoder.java:229"$0$0$0$3$49$"		return textPlainOnly(DEFAULT_DELIMITERS, true);"
"StringDecoder.java:230"$0$0$0$1$2$"	}"
"StringDecoder.java:231"$0$0$0$0$0$""
"StringDecoder.java:232"$0$0$0$1$4$"	/**"
"StringDecoder.java:233"$0$0$0$8$60$"	 * Create a {@code StringDecoder} for {@code ""text/plain""}."
"StringDecoder.java:234"$0$0$0$12$72$"	 * @param delimiters delimiter strings to use to split the input stream"
"StringDecoder.java:235"$0$0$0$10$73$"	 * @param stripDelimiter whether to remove delimiters from the resulting"
"StringDecoder.java:236"$0$0$0$3$17$"	 * input strings"
"StringDecoder.java:237"$0$0$0$1$4$"	 */"
"StringDecoder.java:238"$0$0$0$8$93$"	public static StringDecoder textPlainOnly(List<String> delimiters, boolean stripDelimiter) {"
"StringDecoder.java:239"$0$0$0$8$103$"		return new StringDecoder(delimiters, stripDelimiter, new MimeType(""text"", ""plain"", DEFAULT_CHARSET));"
"StringDecoder.java:240"$0$0$0$1$2$"	}"
"StringDecoder.java:241"$0$0$0$0$0$""
"StringDecoder.java:242"$0$0$0$1$4$"	/**"
"StringDecoder.java:243"$0$0$0$10$64$"	 * Create a {@code StringDecoder} that supports all MIME types."
"StringDecoder.java:244"$0$0$0$7$46$"	 * @param stripDelimiter this flag is ignored"
"StringDecoder.java:245"$0$0$0$12$74$"	 * @deprecated as of Spring 5.0.4, in favor of {@link #allMimeTypes()} or"
"StringDecoder.java:246"$0$0$0$4$40$"	 * {@link #allMimeTypes(List, boolean)}"
"StringDecoder.java:247"$0$0$0$1$4$"	 */"
"StringDecoder.java:248"$0$0$0$1$12$"	@Deprecated"
"StringDecoder.java:249"$0$0$0$6$67$"	public static StringDecoder allMimeTypes(boolean stripDelimiter) {"
"StringDecoder.java:250"$0$0$0$2$24$"		return allMimeTypes();"
"StringDecoder.java:251"$0$0$0$1$2$"	}"
"StringDecoder.java:252"$0$0$0$0$0$""
"StringDecoder.java:253"$0$0$0$1$4$"	/**"
"StringDecoder.java:254"$0$0$0$10$64$"	 * Create a {@code StringDecoder} that supports all MIME types."
"StringDecoder.java:255"$0$0$0$1$4$"	 */"
"StringDecoder.java:256"$0$0$0$5$45$"	public static StringDecoder allMimeTypes() {"
"StringDecoder.java:257"$0$0$0$3$48$"		return allMimeTypes(DEFAULT_DELIMITERS, true);"
"StringDecoder.java:258"$0$0$0$1$2$"	}"
"StringDecoder.java:259"$0$0$0$0$0$""
"StringDecoder.java:260"$0$0$0$1$4$"	/**"
"StringDecoder.java:261"$0$0$0$10$64$"	 * Create a {@code StringDecoder} that supports all MIME types."
"StringDecoder.java:262"$0$0$0$12$72$"	 * @param delimiters delimiter strings to use to split the input stream"
"StringDecoder.java:263"$0$0$0$10$73$"	 * @param stripDelimiter whether to remove delimiters from the resulting"
"StringDecoder.java:264"$0$0$0$3$17$"	 * input strings"
"StringDecoder.java:265"$0$0$0$1$4$"	 */"
"StringDecoder.java:266"$0$0$0$8$92$"	public static StringDecoder allMimeTypes(List<String> delimiters, boolean stripDelimiter) {"
"StringDecoder.java:267"$0$0$0$4$54$"		return new StringDecoder(delimiters, stripDelimiter,"
"StringDecoder.java:268"$0$0$0$5$71$"				new MimeType(""text"", ""plain"", DEFAULT_CHARSET), MimeTypeUtils.ALL);"
"StringDecoder.java:269"$0$0$0$1$2$"	}"
"StringDecoder.java:270"$0$0$0$0$0$""
"StringDecoder.java:271"$0$0$0$0$0$""
"StringDecoder.java:272"$0$0$0$7$64$"	private static class EndFrameBuffer extends DataBufferWrapper {"
"StringDecoder.java:273"$0$0$0$0$0$""
"StringDecoder.java:274"$0$0$0$9$92$"		private static final DataBuffer BUFFER = new DefaultDataBufferFactory().wrap(new byte[0]);"
"StringDecoder.java:275"$0$0$0$0$0$""
"StringDecoder.java:276"$0$0$0$3$27$"		private byte[] delimiter;"
"StringDecoder.java:277"$0$0$0$0$0$""
"StringDecoder.java:278"$0$0$0$0$0$""
"StringDecoder.java:279"$0$0$0$4$43$"		public EndFrameBuffer(byte[] delimiter) {"
"StringDecoder.java:280"$0$0$0$1$17$"			super(BUFFER);"
"StringDecoder.java:281"$0$0$0$3$30$"			this.delimiter = delimiter;"
"StringDecoder.java:282"$0$0$0$1$3$"		}"
"StringDecoder.java:283"$0$0$0$0$0$""
"StringDecoder.java:284"$0$0$0$4$29$"		public byte[] delimiter() {"
"StringDecoder.java:285"$0$0$0$2$25$"			return this.delimiter;"
"StringDecoder.java:286"$0$0$0$1$3$"		}"
"StringDecoder.java:287"$0$0$0$0$0$""
"StringDecoder.java:288"$0$0$0$1$2$"	}"
"StringDecoder.java:289"$0$0$0$0$0$""
"StringDecoder.java:290"$0$0$0$0$0$""
"StringDecoder.java:291"$0$0$0$7$68$"	private static class LimitChecker implements Consumer<DataBuffer> {"
"StringDecoder.java:292"$0$0$0$0$0$""
"StringDecoder.java:293"$0$0$0$1$59$"		@SuppressWarnings(""MismatchedQueryAndUpdateOfCollection"")"
"StringDecoder.java:294"$0$0$0$4$43$"		private final LimitedDataBufferList list;"
"StringDecoder.java:295"$0$0$0$0$0$""
"StringDecoder.java:296"$0$0$0$0$0$""
"StringDecoder.java:297"$0$0$0$3$37$"		LimitChecker(int maxInMemorySize) {"
"StringDecoder.java:298"$0$0$0$4$58$"			this.list = new LimitedDataBufferList(maxInMemorySize);"
"StringDecoder.java:299"$0$0$0$1$3$"		}"
"StringDecoder.java:300"$0$0$0$0$0$""
"StringDecoder.java:301"$0$0$0$1$11$"		@Override"
"StringDecoder.java:302"$0$0$0$5$41$"		public void accept(DataBuffer buffer) {"
"StringDecoder.java:303"$0$0$0$5$42$"			if (buffer instanceof EndFrameBuffer) {"
"StringDecoder.java:304"$0$0$0$1$22$"				this.list.clear();"
"StringDecoder.java:305"$0$0$0$1$4$"			}"
"StringDecoder.java:306"$0$0$0$2$8$"			try {"
"StringDecoder.java:307"$0$0$0$1$26$"				this.list.add(buffer);"
"StringDecoder.java:308"$0$0$0$1$4$"			}"
"StringDecoder.java:309"$0$0$0$4$40$"			catch (DataBufferLimitException ex) {"
"StringDecoder.java:310"$0$0$0$1$36$"				DataBufferUtils.release(buffer);"
"StringDecoder.java:311"$0$0$0$2$13$"				throw ex;"
"StringDecoder.java:312"$0$0$0$1$4$"			}"
"StringDecoder.java:313"$0$0$0$1$3$"		}"
"StringDecoder.java:314"$0$0$0$1$2$"	}"
"StringDecoder.java:315"$0$0$0$0$0$""
"StringDecoder.java:316"$0$0$0$1$1$"}"
"MergedAnnotations.java:1"$0$0$0$1$2$"/*"
"MergedAnnotations.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"MergedAnnotations.java:3"$0$0$0$1$2$" *"
"MergedAnnotations.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"MergedAnnotations.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"MergedAnnotations.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"MergedAnnotations.java:7"$0$0$0$1$2$" *"
"MergedAnnotations.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"MergedAnnotations.java:9"$0$0$0$1$2$" *"
"MergedAnnotations.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"MergedAnnotations.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"MergedAnnotations.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"MergedAnnotations.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"MergedAnnotations.java:14"$0$0$0$5$33$" * limitations under the License."
"MergedAnnotations.java:15"$0$0$0$1$3$" */"
"MergedAnnotations.java:16"$0$0$0$0$0$""
"MergedAnnotations.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"MergedAnnotations.java:18"$0$0$0$0$0$""
"MergedAnnotations.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"MergedAnnotations.java:20"$0$0$0$2$38$"import java.lang.annotation.Inherited;"
"MergedAnnotations.java:21"$0$0$0$2$42$"import java.lang.reflect.AnnotatedElement;"
"MergedAnnotations.java:22"$0$0$0$2$32$"import java.lang.reflect.Method;"
"MergedAnnotations.java:23"$0$0$0$2$28$"import java.util.Collection;"
"MergedAnnotations.java:24"$0$0$0$2$36$"import java.util.function.Predicate;"
"MergedAnnotations.java:25"$0$0$0$2$31$"import java.util.stream.Stream;"
"MergedAnnotations.java:26"$0$0$0$0$0$""
"MergedAnnotations.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"MergedAnnotations.java:28"$0$0$0$0$0$""
"MergedAnnotations.java:29"$0$0$0$1$3$"/**"
"MergedAnnotations.java:30"$0$0$0$11$74$" * Provides access to a collection of merged annotations, usually obtained"
"MergedAnnotations.java:31"$0$0$0$12$59$" * from a source such as a {@link Class} or {@link Method}."
"MergedAnnotations.java:32"$0$0$0$1$2$" *"
"MergedAnnotations.java:33"$0$0$0$13$80$" * <p>Each merged annotation represents a view where the attribute values may be"
"MergedAnnotations.java:34"$0$0$0$7$52$" * ""merged"" from different source values, typically:"
"MergedAnnotations.java:35"$0$0$0$1$2$" *"
"MergedAnnotations.java:36"$0$0$0$2$7$" * <ul>"
"MergedAnnotations.java:37"$0$0$0$11$78$" * <li>Explicit and Implicit {@link AliasFor @AliasFor} declarations on one or"
"MergedAnnotations.java:38"$0$0$0$6$45$" * more attributes within the annotation</li>"
"MergedAnnotations.java:39"$0$0$0$9$82$" * <li>Explicit {@link AliasFor @AliasFor} declarations for a meta-annotation</li>"
"MergedAnnotations.java:40"$0$0$0$8$68$" * <li>Convention based attribute aliases for a meta-annotation</li>"
"MergedAnnotations.java:41"$0$0$0$5$46$" * <li>From a meta-annotation declaration</li>"
"MergedAnnotations.java:42"$0$0$0$2$8$" * </ul>"
"MergedAnnotations.java:43"$0$0$0$1$2$" *"
"MergedAnnotations.java:44"$0$0$0$12$81$" * <p>For example, a {@code @PostMapping} annotation might be defined as follows:"
"MergedAnnotations.java:45"$0$0$0$1$2$" *"
"MergedAnnotations.java:46"$0$0$0$3$21$" * <pre class=""code"">"
"MergedAnnotations.java:47"$0$0$0$2$43$" * &#064;Retention(RetentionPolicy.RUNTIME)"
"MergedAnnotations.java:48"$0$0$0$4$52$" * &#064;RequestMapping(method = RequestMethod.POST)"
"MergedAnnotations.java:49"$0$0$0$5$39$" * public &#064;interface PostMapping {"
"MergedAnnotations.java:50"$0$0$0$1$2$" *"
"MergedAnnotations.java:51"$0$0$0$4$41$" *     &#064;AliasFor(attribute = ""path"")"
"MergedAnnotations.java:52"$0$0$0$5$35$" *     String[] value() default {};"
"MergedAnnotations.java:53"$0$0$0$1$2$" *"
"MergedAnnotations.java:54"$0$0$0$4$42$" *     &#064;AliasFor(attribute = ""value"")"
"MergedAnnotations.java:55"$0$0$0$5$34$" *     String[] path() default {};"
"MergedAnnotations.java:56"$0$0$0$2$4$" * }"
"MergedAnnotations.java:57"$0$0$0$2$9$" * </pre>"
"MergedAnnotations.java:58"$0$0$0$1$2$" *"
"MergedAnnotations.java:59"$0$0$0$12$81$" * <p>If a method is annotated with {@code @PostMapping(""/home"")} it will contain"
"MergedAnnotations.java:60"$0$0$0$10$75$" * merged annotations for both {@code @PostMapping} and the meta-annotation"
"MergedAnnotations.java:61"$0$0$0$10$74$" * {@code @RequestMapping}. The merged view of the {@code @RequestMapping}"
"MergedAnnotations.java:62"$0$0$0$7$52$" * annotation will contain the following attributes:"
"MergedAnnotations.java:63"$0$0$0$1$2$" *"
"MergedAnnotations.java:64"$0$0$0$3$24$" * <p><table border=""1"">"
"MergedAnnotations.java:65"$0$0$0$2$7$" * <tr>"
"MergedAnnotations.java:66"$0$0$0$2$16$" * <th>Name</th>"
"MergedAnnotations.java:67"$0$0$0$2$17$" * <th>Value</th>"
"MergedAnnotations.java:68"$0$0$0$2$18$" * <th>Source</th>"
"MergedAnnotations.java:69"$0$0$0$2$8$" * </tr>"
"MergedAnnotations.java:70"$0$0$0$2$7$" * <tr>"
"MergedAnnotations.java:71"$0$0$0$2$17$" * <td>value</td>"
"MergedAnnotations.java:72"$0$0$0$2$19$" * <td>""/home""</td>"
"MergedAnnotations.java:73"$0$0$0$5$44$" * <td>Declared in {@code @PostMapping}</td>"
"MergedAnnotations.java:74"$0$0$0$2$8$" * </tr>"
"MergedAnnotations.java:75"$0$0$0$2$7$" * <tr>"
"MergedAnnotations.java:76"$0$0$0$2$16$" * <td>path</td>"
"MergedAnnotations.java:77"$0$0$0$2$19$" * <td>""/home""</td>"
"MergedAnnotations.java:78"$0$0$0$4$38$" * <td>Explicit {@code @AliasFor}</td>"
"MergedAnnotations.java:79"$0$0$0$2$8$" * </tr>"
"MergedAnnotations.java:80"$0$0$0$2$7$" * <tr>"
"MergedAnnotations.java:81"$0$0$0$2$18$" * <td>method</td>"
"MergedAnnotations.java:82"$0$0$0$2$30$" * <td>RequestMethod.POST</td>"
"MergedAnnotations.java:83"$0$0$0$4$39$" * <td>Declared in meta-annotation</td>"
"MergedAnnotations.java:84"$0$0$0$2$8$" * </tr>"
"MergedAnnotations.java:85"$0$0$0$2$11$" * </table>"
"MergedAnnotations.java:86"$0$0$0$1$2$" *"
"MergedAnnotations.java:87"$0$0$0$8$83$" * <p>{@link MergedAnnotations} can be obtained {@linkplain #from(AnnotatedElement)"
"MergedAnnotations.java:88"$0$0$0$14$82$" * from} any Java {@link AnnotatedElement}. They may also be used for sources that"
"MergedAnnotations.java:89"$0$0$0$11$69$" * don't use reflection (such as those that directly parse bytecode)."
"MergedAnnotations.java:90"$0$0$0$1$2$" *"
"MergedAnnotations.java:91"$0$0$0$11$83$" * <p>Different {@linkplain SearchStrategy search strategies} can be used to locate"
"MergedAnnotations.java:92"$0$0$0$12$77$" * related source elements that contain the annotations to be aggregated. For"
"MergedAnnotations.java:93"$0$0$0$9$83$" * example, {@link SearchStrategy#TYPE_HIERARCHY} will search both superclasses and"
"MergedAnnotations.java:94"$0$0$0$3$26$" * implemented interfaces."
"MergedAnnotations.java:95"$0$0$0$1$2$" *"
"MergedAnnotations.java:96"$0$0$0$9$62$" * <p>From a {@link MergedAnnotations} instance you can either"
"MergedAnnotations.java:97"$2$0$0$10$78$" * {@linkplain #get(String) get} a single annotation, or {@linkplain #stream()"
"MergedAnnotations.java:98"$0$0$0$11$79$" * stream all annotations} or just those that match {@linkplain #stream(String)"
"MergedAnnotations.java:99"$0$0$0$12$63$" * a specific type}. You can also quickly tell if an annotation"
"MergedAnnotations.java:100"$0$0$0$5$46$" * {@linkplain #isPresent(String) is present}."
"MergedAnnotations.java:101"$0$0$0$1$2$" *"
"MergedAnnotations.java:102"$0$0$0$6$37$" * <p>Here are some typical examples:"
"MergedAnnotations.java:103"$0$0$0$1$2$" *"
"MergedAnnotations.java:104"$0$0$0$3$21$" * <pre class=""code"">"
"MergedAnnotations.java:105"$0$0$0$8$47$" * // is an annotation present or meta-present?"
"MergedAnnotations.java:106"$0$0$0$2$56$" * mergedAnnotations.isPresent(ExampleAnnotation.class);"
"MergedAnnotations.java:107"$0$0$0$1$2$" *"
"MergedAnnotations.java:108"$1$0$0$12$79$" * // get the merged ""value"" attribute of ExampleAnnotation (either directly or"
"MergedAnnotations.java:109"$0$0$0$3$19$" * // meta-present)"
"MergedAnnotations.java:110"$2$0$0$2$69$" * mergedAnnotations.get(ExampleAnnotation.class).getString(""value"");"
"MergedAnnotations.java:111"$0$0$0$1$2$" *"
"MergedAnnotations.java:112"$1$0$0$10$66$" * // get all meta-annotations but no directly present annotations"
"MergedAnnotations.java:113"$0$0$0$2$70$" * mergedAnnotations.stream().filter(MergedAnnotation::isMetaPresent);"
"MergedAnnotations.java:114"$0$0$0$1$2$" *"
"MergedAnnotations.java:115"$1$0$0$10$81$" * // get all ExampleAnnotation declarations (including any meta-annotations) and"
"MergedAnnotations.java:116"$0$0$0$7$41$" * // print the merged ""value"" attributes"
"MergedAnnotations.java:117"$0$0$0$2$52$" * mergedAnnotations.stream(ExampleAnnotation.class)"
"MergedAnnotations.java:118"$1$0$0$4$71$" *     .map(mergedAnnotation -&gt; mergedAnnotation.getString(""value""))"
"MergedAnnotations.java:119"$0$0$0$2$37$" *     .forEach(System.out::println);"
"MergedAnnotations.java:120"$0$0$0$2$9$" * </pre>"
"MergedAnnotations.java:121"$0$0$0$1$2$" *"
"MergedAnnotations.java:122"$0$0$0$4$23$" * @author Phillip Webb"
"MergedAnnotations.java:123"$0$0$0$4$22$" * @author Sam Brannen"
"MergedAnnotations.java:124"$0$0$0$3$13$" * @since 5.2"
"MergedAnnotations.java:125"$0$0$0$3$24$" * @see MergedAnnotation"
"MergedAnnotations.java:126"$0$0$0$3$34$" * @see MergedAnnotationCollectors"
"MergedAnnotations.java:127"$0$0$0$3$34$" * @see MergedAnnotationPredicates"
"MergedAnnotations.java:128"$0$0$0$3$33$" * @see MergedAnnotationSelectors"
"MergedAnnotations.java:129"$0$0$0$1$3$" */"
"MergedAnnotations.java:130"$0$0$0$6$83$"public interface MergedAnnotations extends Iterable<MergedAnnotation<Annotation>> {"
"MergedAnnotations.java:131"$0$0$0$0$0$""
"MergedAnnotations.java:132"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:133"$0$0$0$11$71$"	 * Determine if the specified annotation is either directly present or"
"MergedAnnotations.java:134"$0$0$0$2$17$"	 * meta-present."
"MergedAnnotations.java:135"$1$0$0$6$69$"	 * <p>Equivalent to calling {@code get(annotationType).isPresent()}."
"MergedAnnotations.java:136"$0$0$0$8$54$"	 * @param annotationType the annotation type to check"
"MergedAnnotations.java:137"$0$0$0$9$53$"	 * @return {@code true} if the annotation is present"
"MergedAnnotations.java:138"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:139"$0$0$0$6$67$"	<A extends Annotation> boolean isPresent(Class<A> annotationType);"
"MergedAnnotations.java:140"$0$0$0$0$0$""
"MergedAnnotations.java:141"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:142"$0$0$0$11$71$"	 * Determine if the specified annotation is either directly present or"
"MergedAnnotations.java:143"$0$0$0$2$17$"	 * meta-present."
"MergedAnnotations.java:144"$1$0$0$6$69$"	 * <p>Equivalent to calling {@code get(annotationType).isPresent()}."
"MergedAnnotations.java:145"$0$0$0$12$79$"	 * @param annotationType the fully qualified class name of the annotation type"
"MergedAnnotations.java:146"$0$0$0$3$12$"	 * to check"
"MergedAnnotations.java:147"$0$0$0$9$53$"	 * @return {@code true} if the annotation is present"
"MergedAnnotations.java:148"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:149"$0$0$0$3$42$"	boolean isPresent(String annotationType);"
"MergedAnnotations.java:150"$0$0$0$0$0$""
"MergedAnnotations.java:151"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:152"$0$0$0$9$62$"	 * Determine if the specified annotation is directly present."
"MergedAnnotations.java:153"$1$0$0$6$77$"	 * <p>Equivalent to calling {@code get(annotationType).isDirectlyPresent()}."
"MergedAnnotations.java:154"$0$0$0$8$54$"	 * @param annotationType the annotation type to check"
"MergedAnnotations.java:155"$0$0$0$10$62$"	 * @return {@code true} if the annotation is directly present"
"MergedAnnotations.java:156"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:157"$0$0$0$6$75$"	<A extends Annotation> boolean isDirectlyPresent(Class<A> annotationType);"
"MergedAnnotations.java:158"$0$0$0$0$0$""
"MergedAnnotations.java:159"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:160"$0$0$0$9$62$"	 * Determine if the specified annotation is directly present."
"MergedAnnotations.java:161"$1$0$0$6$77$"	 * <p>Equivalent to calling {@code get(annotationType).isDirectlyPresent()}."
"MergedAnnotations.java:162"$0$0$0$12$79$"	 * @param annotationType the fully qualified class name of the annotation type"
"MergedAnnotations.java:163"$0$0$0$3$12$"	 * to check"
"MergedAnnotations.java:164"$0$0$0$10$62$"	 * @return {@code true} if the annotation is directly present"
"MergedAnnotations.java:165"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:166"$0$0$0$3$50$"	boolean isDirectlyPresent(String annotationType);"
"MergedAnnotations.java:167"$0$0$0$0$0$""
"MergedAnnotations.java:168"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:169"$0$0$0$7$77$"	 * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching"
"MergedAnnotations.java:170"$0$0$0$9$59$"	 * annotation or meta-annotation of the specified type, or"
"MergedAnnotations.java:171"$0$0$0$7$58$"	 * {@link MergedAnnotation#missing()} if none is present."
"MergedAnnotations.java:172"$1$0$0$8$52$"	 * @param annotationType the annotation type to get"
"MergedAnnotations.java:173"$0$0$0$6$47$"	 * @return a {@link MergedAnnotation} instance"
"MergedAnnotations.java:174"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:175"$1$0$0$6$73$"	<A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType);"
"MergedAnnotations.java:176"$0$0$0$0$0$""
"MergedAnnotations.java:177"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:178"$0$0$0$7$77$"	 * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching"
"MergedAnnotations.java:179"$0$0$0$9$59$"	 * annotation or meta-annotation of the specified type, or"
"MergedAnnotations.java:180"$0$0$0$7$58$"	 * {@link MergedAnnotation#missing()} if none is present."
"MergedAnnotations.java:181"$1$0$0$8$52$"	 * @param annotationType the annotation type to get"
"MergedAnnotations.java:182"$0$0$0$13$73$"	 * @param predicate a predicate that must match, or {@code null} if only"
"MergedAnnotations.java:183"$0$0$0$5$29$"	 * type matching is required"
"MergedAnnotations.java:184"$0$0$0$6$47$"	 * @return a {@link MergedAnnotation} instance"
"MergedAnnotations.java:185"$0$0$0$3$35$"	 * @see MergedAnnotationPredicates"
"MergedAnnotations.java:186"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:187"$1$0$0$6$72$"	<A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType,"
"MergedAnnotations.java:188"$0$0$0$5$63$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate);"
"MergedAnnotations.java:189"$0$0$0$0$0$""
"MergedAnnotations.java:190"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:191"$0$0$0$12$74$"	 * Get a matching annotation or meta-annotation of the specified type, or"
"MergedAnnotations.java:192"$0$0$0$7$58$"	 * {@link MergedAnnotation#missing()} if none is present."
"MergedAnnotations.java:193"$1$0$0$8$52$"	 * @param annotationType the annotation type to get"
"MergedAnnotations.java:194"$0$0$0$13$73$"	 * @param predicate a predicate that must match, or {@code null} if only"
"MergedAnnotations.java:195"$0$0$0$5$29$"	 * type matching is required"
"MergedAnnotations.java:196"$0$0$0$12$77$"	 * @param selector a selector used to choose the most appropriate annotation"
"MergedAnnotations.java:197"$0$0$0$10$54$"	 * within an aggregate, or {@code null} to select the"
"MergedAnnotations.java:198"$0$0$0$4$60$"	 * {@linkplain MergedAnnotationSelectors#nearest() nearest}"
"MergedAnnotations.java:199"$0$0$0$6$47$"	 * @return a {@link MergedAnnotation} instance"
"MergedAnnotations.java:200"$0$0$0$3$35$"	 * @see MergedAnnotationPredicates"
"MergedAnnotations.java:201"$0$0$0$3$34$"	 * @see MergedAnnotationSelectors"
"MergedAnnotations.java:202"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:203"$1$0$0$6$72$"	<A extends Annotation> MergedAnnotation<A> get(Class<A> annotationType,"
"MergedAnnotations.java:204"$0$0$0$5$62$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate,"
"MergedAnnotations.java:205"$0$0$0$3$51$"			@Nullable MergedAnnotationSelector<A> selector);"
"MergedAnnotations.java:206"$0$0$0$0$0$""
"MergedAnnotations.java:207"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:208"$0$0$0$7$77$"	 * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching"
"MergedAnnotations.java:209"$0$0$0$9$59$"	 * annotation or meta-annotation of the specified type, or"
"MergedAnnotations.java:210"$0$0$0$7$58$"	 * {@link MergedAnnotation#missing()} if none is present."
"MergedAnnotations.java:211"$0$0$0$12$79$"	 * @param annotationType the fully qualified class name of the annotation type"
"MergedAnnotations.java:212"$1$0$0$3$10$"	 * to get"
"MergedAnnotations.java:213"$0$0$0$6$47$"	 * @return a {@link MergedAnnotation} instance"
"MergedAnnotations.java:214"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:215"$1$0$0$6$71$"	<A extends Annotation> MergedAnnotation<A> get(String annotationType);"
"MergedAnnotations.java:216"$0$0$0$0$0$""
"MergedAnnotations.java:217"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:218"$0$0$0$7$77$"	 * Get the {@linkplain MergedAnnotationSelectors#nearest() nearest} matching"
"MergedAnnotations.java:219"$0$0$0$9$59$"	 * annotation or meta-annotation of the specified type, or"
"MergedAnnotations.java:220"$0$0$0$7$58$"	 * {@link MergedAnnotation#missing()} if none is present."
"MergedAnnotations.java:221"$0$0$0$12$79$"	 * @param annotationType the fully qualified class name of the annotation type"
"MergedAnnotations.java:222"$1$0$0$3$10$"	 * to get"
"MergedAnnotations.java:223"$0$0$0$13$73$"	 * @param predicate a predicate that must match, or {@code null} if only"
"MergedAnnotations.java:224"$0$0$0$5$29$"	 * type matching is required"
"MergedAnnotations.java:225"$0$0$0$6$47$"	 * @return a {@link MergedAnnotation} instance"
"MergedAnnotations.java:226"$0$0$0$3$35$"	 * @see MergedAnnotationPredicates"
"MergedAnnotations.java:227"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:228"$1$0$0$6$70$"	<A extends Annotation> MergedAnnotation<A> get(String annotationType,"
"MergedAnnotations.java:229"$0$0$0$5$63$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate);"
"MergedAnnotations.java:230"$0$0$0$0$0$""
"MergedAnnotations.java:231"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:232"$0$0$0$12$74$"	 * Get a matching annotation or meta-annotation of the specified type, or"
"MergedAnnotations.java:233"$0$0$0$7$58$"	 * {@link MergedAnnotation#missing()} if none is present."
"MergedAnnotations.java:234"$0$0$0$12$79$"	 * @param annotationType the fully qualified class name of the annotation type"
"MergedAnnotations.java:235"$1$0$0$3$10$"	 * to get"
"MergedAnnotations.java:236"$0$0$0$13$73$"	 * @param predicate a predicate that must match, or {@code null} if only"
"MergedAnnotations.java:237"$0$0$0$5$29$"	 * type matching is required"
"MergedAnnotations.java:238"$0$0$0$12$77$"	 * @param selector a selector used to choose the most appropriate annotation"
"MergedAnnotations.java:239"$0$0$0$10$54$"	 * within an aggregate, or {@code null} to select the"
"MergedAnnotations.java:240"$0$0$0$4$60$"	 * {@linkplain MergedAnnotationSelectors#nearest() nearest}"
"MergedAnnotations.java:241"$0$0$0$6$47$"	 * @return a {@link MergedAnnotation} instance"
"MergedAnnotations.java:242"$0$0$0$3$35$"	 * @see MergedAnnotationPredicates"
"MergedAnnotations.java:243"$0$0$0$3$34$"	 * @see MergedAnnotationSelectors"
"MergedAnnotations.java:244"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:245"$1$0$0$6$70$"	<A extends Annotation> MergedAnnotation<A> get(String annotationType,"
"MergedAnnotations.java:246"$0$0$0$5$62$"			@Nullable Predicate<? super MergedAnnotation<A>> predicate,"
"MergedAnnotations.java:247"$0$0$0$3$51$"			@Nullable MergedAnnotationSelector<A> selector);"
"MergedAnnotations.java:248"$0$0$0$0$0$""
"MergedAnnotations.java:249"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:250"$0$0$0$10$72$"	 * Stream all annotations and meta-annotations that match the specified"
"MergedAnnotations.java:251"$0$0$0$11$65$"	 * type. The resulting stream follows the same ordering rules as"
"MergedAnnotations.java:252"$0$0$0$3$22$"	 * {@link #stream()}."
"MergedAnnotations.java:253"$0$0$0$8$54$"	 * @param annotationType the annotation type to match"
"MergedAnnotations.java:254"$0$0$0$7$44$"	 * @return a stream of matching annotations"
"MergedAnnotations.java:255"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:256"$0$0$0$6$84$"	<A extends Annotation> Stream<MergedAnnotation<A>> stream(Class<A> annotationType);"
"MergedAnnotations.java:257"$0$0$0$0$0$""
"MergedAnnotations.java:258"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:259"$0$0$0$10$72$"	 * Stream all annotations and meta-annotations that match the specified"
"MergedAnnotations.java:260"$0$0$0$11$65$"	 * type. The resulting stream follows the same ordering rules as"
"MergedAnnotations.java:261"$0$0$0$3$22$"	 * {@link #stream()}."
"MergedAnnotations.java:262"$0$0$0$12$79$"	 * @param annotationType the fully qualified class name of the annotation type"
"MergedAnnotations.java:263"$0$0$0$3$12$"	 * to match"
"MergedAnnotations.java:264"$0$0$0$7$44$"	 * @return a stream of matching annotations"
"MergedAnnotations.java:265"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:266"$0$0$0$6$82$"	<A extends Annotation> Stream<MergedAnnotation<A>> stream(String annotationType);"
"MergedAnnotations.java:267"$0$0$0$0$0$""
"MergedAnnotations.java:268"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:269"$0$0$0$10$77$"	 * Stream all annotations and meta-annotations contained in this collection."
"MergedAnnotations.java:270"$0$0$0$9$48$"	 * The resulting stream is ordered first by the"
"MergedAnnotations.java:271"$1$0$0$7$78$"	 * {@linkplain MergedAnnotation#getAggregateIndex() aggregate index} and then"
"MergedAnnotations.java:272"$0$0$0$12$82$"	 * by the annotation distance (with the closest annotations first). This ordering"
"MergedAnnotations.java:273"$0$0$0$11$72$"	 * means that, for most use-cases, the most suitable annotations appear"
"MergedAnnotations.java:274"$0$0$0$5$27$"	 * earliest in the stream."
"MergedAnnotations.java:275"$0$0$0$6$35$"	 * @return a stream of annotations"
"MergedAnnotations.java:276"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:277"$0$0$0$2$47$"	Stream<MergedAnnotation<Annotation>> stream();"
"MergedAnnotations.java:278"$0$0$0$0$0$""
"MergedAnnotations.java:279"$0$0$0$0$0$""
"MergedAnnotations.java:280"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:281"$0$0$0$9$66$"	 * Create a new {@link MergedAnnotations} instance containing all"
"MergedAnnotations.java:282"$0$0$0$9$68$"	 * annotations and meta-annotations from the specified element. The"
"MergedAnnotations.java:283"$0$0$0$11$73$"	 * resulting instance will not include any inherited annotations. If you"
"MergedAnnotations.java:284"$0$0$0$10$48$"	 * want to include those as well you should use"
"MergedAnnotations.java:285"$0$0$0$7$71$"	 * {@link #from(AnnotatedElement, SearchStrategy)} with an appropriate"
"MergedAnnotations.java:286"$0$0$0$3$27$"	 * {@link SearchStrategy}."
"MergedAnnotations.java:287"$0$0$0$6$37$"	 * @param element the source element"
"MergedAnnotations.java:288"$0$0$0$9$73$"	 * @return a {@link MergedAnnotations} instance containing the element's"
"MergedAnnotations.java:289"$0$0$0$2$15$"	 * annotations"
"MergedAnnotations.java:290"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:291"$0$0$0$5$58$"	static MergedAnnotations from(AnnotatedElement element) {"
"MergedAnnotations.java:292"$0$0$0$3$46$"		return from(element, SearchStrategy.DIRECT);"
"MergedAnnotations.java:293"$0$0$0$1$2$"	}"
"MergedAnnotations.java:294"$0$0$0$0$0$""
"MergedAnnotations.java:295"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:296"$0$0$0$9$66$"	 * Create a new {@link MergedAnnotations} instance containing all"
"MergedAnnotations.java:297"$0$0$0$9$68$"	 * annotations and meta-annotations from the specified element and,"
"MergedAnnotations.java:298"$0$0$0$9$72$"	 * depending on the {@link SearchStrategy}, related inherited elements."
"MergedAnnotations.java:299"$0$0$0$6$37$"	 * @param element the source element"
"MergedAnnotations.java:300"$0$0$0$8$52$"	 * @param searchStrategy the search strategy to use"
"MergedAnnotations.java:301"$0$0$0$9$70$"	 * @return a {@link MergedAnnotations} instance containing the merged"
"MergedAnnotations.java:302"$0$0$0$3$23$"	 * element annotations"
"MergedAnnotations.java:303"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:304"$0$0$0$7$89$"	static MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy) {"
"MergedAnnotations.java:305"$0$0$0$4$83$"		return from(element, searchStrategy, RepeatableContainers.standardRepeatables());"
"MergedAnnotations.java:306"$0$0$0$1$2$"	}"
"MergedAnnotations.java:307"$0$0$0$0$0$""
"MergedAnnotations.java:308"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:309"$0$0$0$9$66$"	 * Create a new {@link MergedAnnotations} instance containing all"
"MergedAnnotations.java:310"$0$0$0$9$68$"	 * annotations and meta-annotations from the specified element and,"
"MergedAnnotations.java:311"$0$0$0$9$72$"	 * depending on the {@link SearchStrategy}, related inherited elements."
"MergedAnnotations.java:312"$0$0$0$6$37$"	 * @param element the source element"
"MergedAnnotations.java:313"$0$0$0$8$52$"	 * @param searchStrategy the search strategy to use"
"MergedAnnotations.java:314"$0$0$0$11$77$"	 * @param repeatableContainers the repeatable containers that may be used by"
"MergedAnnotations.java:315"$0$0$0$7$51$"	 * the element annotations or the meta-annotations"
"MergedAnnotations.java:316"$0$0$0$9$70$"	 * @return a {@link MergedAnnotations} instance containing the merged"
"MergedAnnotations.java:317"$0$0$0$3$23$"	 * element annotations"
"MergedAnnotations.java:318"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:319"$0$0$0$6$87$"	static MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy,"
"MergedAnnotations.java:320"$0$0$0$3$47$"			RepeatableContainers repeatableContainers) {"
"MergedAnnotations.java:321"$0$0$0$0$0$""
"MergedAnnotations.java:322"$0$0$0$5$107$"		return TypeMappedAnnotations.from(element, searchStrategy, repeatableContainers, AnnotationFilter.PLAIN);"
"MergedAnnotations.java:323"$0$0$0$1$2$"	}"
"MergedAnnotations.java:324"$0$0$0$0$0$""
"MergedAnnotations.java:325"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:326"$0$0$0$9$66$"	 * Create a new {@link MergedAnnotations} instance containing all"
"MergedAnnotations.java:327"$0$0$0$9$68$"	 * annotations and meta-annotations from the specified element and,"
"MergedAnnotations.java:328"$0$0$0$9$72$"	 * depending on the {@link SearchStrategy}, related inherited elements."
"MergedAnnotations.java:329"$0$0$0$6$37$"	 * @param element the source element"
"MergedAnnotations.java:330"$0$0$0$8$52$"	 * @param searchStrategy the search strategy to use"
"MergedAnnotations.java:331"$0$0$0$11$77$"	 * @param repeatableContainers the repeatable containers that may be used by"
"MergedAnnotations.java:332"$0$0$0$7$51$"	 * the element annotations or the meta-annotations"
"MergedAnnotations.java:333"$0$0$0$10$69$"	 * @param annotationFilter an annotation filter used to restrict the"
"MergedAnnotations.java:334"$0$0$0$3$26$"	 * annotations considered"
"MergedAnnotations.java:335"$0$0$0$9$70$"	 * @return a {@link MergedAnnotations} instance containing the merged"
"MergedAnnotations.java:336"$0$0$0$3$23$"	 * element annotations"
"MergedAnnotations.java:337"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:338"$0$0$0$6$87$"	static MergedAnnotations from(AnnotatedElement element, SearchStrategy searchStrategy,"
"MergedAnnotations.java:339"$0$0$0$5$82$"			RepeatableContainers repeatableContainers, AnnotationFilter annotationFilter) {"
"MergedAnnotations.java:340"$0$0$0$0$0$""
"MergedAnnotations.java:341"$0$0$0$5$101$"		return TypeMappedAnnotations.from(element, searchStrategy, repeatableContainers, annotationFilter);"
"MergedAnnotations.java:342"$0$0$0$1$2$"	}"
"MergedAnnotations.java:343"$0$0$0$0$0$""
"MergedAnnotations.java:344"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:345"$0$0$0$10$70$"	 * Create a new {@link MergedAnnotations} instance from the specified"
"MergedAnnotations.java:346"$0$0$0$2$16$"	 * annotations."
"MergedAnnotations.java:347"$0$0$0$7$49$"	 * @param annotations the annotations to include"
"MergedAnnotations.java:348"$0$0$0$9$75$"	 * @return a {@link MergedAnnotations} instance containing the annotations"
"MergedAnnotations.java:349"$0$0$0$4$37$"	 * @see #from(Object, Annotation...)"
"MergedAnnotations.java:350"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:351"$0$0$0$5$59$"	static MergedAnnotations from(Annotation... annotations) {"
"MergedAnnotations.java:352"$0$0$0$3$40$"		return from(annotations, annotations);"
"MergedAnnotations.java:353"$0$0$0$1$2$"	}"
"MergedAnnotations.java:354"$0$0$0$0$0$""
"MergedAnnotations.java:355"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:356"$0$0$0$10$70$"	 * Create a new {@link MergedAnnotations} instance from the specified"
"MergedAnnotations.java:357"$0$0$0$2$16$"	 * annotations."
"MergedAnnotations.java:358"$0$0$0$13$74$"	 * @param source the source for the annotations. This source is used only"
"MergedAnnotations.java:359"$0$0$0$11$70$"	 * for information and logging. It does not need to <em>actually</em>"
"MergedAnnotations.java:360"$0$0$0$11$67$"	 * contain the specified annotations, and it will not be searched."
"MergedAnnotations.java:361"$0$0$0$7$49$"	 * @param annotations the annotations to include"
"MergedAnnotations.java:362"$0$0$0$9$75$"	 * @return a {@link MergedAnnotations} instance containing the annotations"
"MergedAnnotations.java:363"$0$0$0$3$29$"	 * @see #from(Annotation...)"
"MergedAnnotations.java:364"$0$0$0$3$32$"	 * @see #from(AnnotatedElement)"
"MergedAnnotations.java:365"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:366"$0$0$0$7$74$"	static MergedAnnotations from(Object source, Annotation... annotations) {"
"MergedAnnotations.java:367"$0$0$0$4$79$"		return from(source, annotations, RepeatableContainers.standardRepeatables());"
"MergedAnnotations.java:368"$0$0$0$1$2$"	}"
"MergedAnnotations.java:369"$0$0$0$0$0$""
"MergedAnnotations.java:370"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:371"$0$0$0$10$70$"	 * Create a new {@link MergedAnnotations} instance from the specified"
"MergedAnnotations.java:372"$0$0$0$2$16$"	 * annotations."
"MergedAnnotations.java:373"$0$0$0$13$74$"	 * @param source the source for the annotations. This source is used only"
"MergedAnnotations.java:374"$0$0$0$11$70$"	 * for information and logging. It does not need to <em>actually</em>"
"MergedAnnotations.java:375"$0$0$0$11$67$"	 * contain the specified annotations, and it will not be searched."
"MergedAnnotations.java:376"$0$0$0$7$49$"	 * @param annotations the annotations to include"
"MergedAnnotations.java:377"$0$0$0$11$77$"	 * @param repeatableContainers the repeatable containers that may be used by"
"MergedAnnotations.java:378"$0$0$0$2$20$"	 * meta-annotations"
"MergedAnnotations.java:379"$0$0$0$9$75$"	 * @return a {@link MergedAnnotations} instance containing the annotations"
"MergedAnnotations.java:380"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:381"$0$0$0$9$116$"	static MergedAnnotations from(Object source, Annotation[] annotations, RepeatableContainers repeatableContainers) {"
"MergedAnnotations.java:382"$0$0$0$5$103$"		return TypeMappedAnnotations.from(source, annotations, repeatableContainers, AnnotationFilter.PLAIN);"
"MergedAnnotations.java:383"$0$0$0$1$2$"	}"
"MergedAnnotations.java:384"$0$0$0$0$0$""
"MergedAnnotations.java:385"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:386"$0$0$0$10$70$"	 * Create a new {@link MergedAnnotations} instance from the specified"
"MergedAnnotations.java:387"$0$0$0$2$16$"	 * annotations."
"MergedAnnotations.java:388"$0$0$0$13$74$"	 * @param source the source for the annotations. This source is used only"
"MergedAnnotations.java:389"$0$0$0$11$70$"	 * for information and logging. It does not need to <em>actually</em>"
"MergedAnnotations.java:390"$0$0$0$11$67$"	 * contain the specified annotations, and it will not be searched."
"MergedAnnotations.java:391"$0$0$0$7$49$"	 * @param annotations the annotations to include"
"MergedAnnotations.java:392"$0$0$0$11$77$"	 * @param repeatableContainers the repeatable containers that may be used by"
"MergedAnnotations.java:393"$0$0$0$2$20$"	 * meta-annotations"
"MergedAnnotations.java:394"$0$0$0$10$69$"	 * @param annotationFilter an annotation filter used to restrict the"
"MergedAnnotations.java:395"$0$0$0$3$26$"	 * annotations considered"
"MergedAnnotations.java:396"$0$0$0$9$75$"	 * @return a {@link MergedAnnotations} instance containing the annotations"
"MergedAnnotations.java:397"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:398"$0$0$0$6$71$"	static MergedAnnotations from(Object source, Annotation[] annotations,"
"MergedAnnotations.java:399"$0$0$0$5$82$"			RepeatableContainers repeatableContainers, AnnotationFilter annotationFilter) {"
"MergedAnnotations.java:400"$0$0$0$0$0$""
"MergedAnnotations.java:401"$0$0$0$5$97$"		return TypeMappedAnnotations.from(source, annotations, repeatableContainers, annotationFilter);"
"MergedAnnotations.java:402"$0$0$0$1$2$"	}"
"MergedAnnotations.java:403"$0$0$0$0$0$""
"MergedAnnotations.java:404"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:405"$0$0$0$10$70$"	 * Create a new {@link MergedAnnotations} instance from the specified"
"MergedAnnotations.java:406"$0$0$0$10$68$"	 * collection of directly present annotations. This method allows a"
"MergedAnnotations.java:407"$0$0$0$10$74$"	 * {@link MergedAnnotations} instance to be created from annotations that"
"MergedAnnotations.java:408"$0$0$0$10$73$"	 * are not necessarily loaded using reflection. The provided annotations"
"MergedAnnotations.java:409"$0$0$0$8$77$"	 * must all be {@link MergedAnnotation#isDirectlyPresent() directly present}"
"MergedAnnotations.java:410"$1$0$0$8$73$"	 * and must have a {@link MergedAnnotation#getAggregateIndex() aggregate"
"MergedAnnotations.java:411"$0$0$0$5$24$"	 * index} of {@code 0}."
"MergedAnnotations.java:412"$0$0$0$2$7$"	 * <p>"
"MergedAnnotations.java:413"$0$0$0$10$74$"	 * The resulting {@link MergedAnnotations} instance will contain both the"
"MergedAnnotations.java:414"$0$0$0$11$74$"	 * specified annotations, and any meta-annotations that can be read using"
"MergedAnnotations.java:415"$0$0$0$2$15$"	 * reflection."
"MergedAnnotations.java:416"$0$0$0$7$49$"	 * @param annotations the annotations to include"
"MergedAnnotations.java:417"$0$0$0$9$75$"	 * @return a {@link MergedAnnotations} instance containing the annotations"
"MergedAnnotations.java:418"$0$0$0$6$71$"	 * @see MergedAnnotation#of(ClassLoader, Object, Class, java.util.Map)"
"MergedAnnotations.java:419"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:420"$0$0$0$5$75$"	static MergedAnnotations of(Collection<MergedAnnotation<?>> annotations) {"
"MergedAnnotations.java:421"$0$0$0$2$53$"		return MergedAnnotationsCollection.of(annotations);"
"MergedAnnotations.java:422"$0$0$0$1$2$"	}"
"MergedAnnotations.java:423"$0$0$0$0$0$""
"MergedAnnotations.java:424"$0$0$0$0$0$""
"MergedAnnotations.java:425"$0$0$0$1$4$"	/**"
"MergedAnnotations.java:426"$0$0$0$5$34$"	 * Search strategies supported by"
"MergedAnnotations.java:427"$0$0$0$4$69$"	 * {@link MergedAnnotations#from(AnnotatedElement, SearchStrategy)}."
"MergedAnnotations.java:428"$0$0$0$1$3$"	 *"
"MergedAnnotations.java:429"$0$0$0$12$71$"	 * <p>Each strategy creates a different set of aggregates that will be"
"MergedAnnotations.java:430"$0$0$0$8$59$"	 * combined to create the final {@link MergedAnnotations}."
"MergedAnnotations.java:431"$0$0$0$1$4$"	 */"
"MergedAnnotations.java:432"$0$0$0$3$22$"	enum SearchStrategy {"
"MergedAnnotations.java:433"$0$0$0$0$0$""
"MergedAnnotations.java:434"$0$0$0$1$5$"		/**"
"MergedAnnotations.java:435"$0$0$0$8$65$"		 * Find only directly declared annotations, without considering"
"MergedAnnotations.java:436"$0$0$0$8$67$"		 * {@link Inherited @Inherited} annotations and without searching"
"MergedAnnotations.java:437"$0$0$0$5$44$"		 * superclasses or implemented interfaces."
"MergedAnnotations.java:438"$0$0$0$1$5$"		 */"
"MergedAnnotations.java:439"$0$0$0$1$9$"		DIRECT,"
"MergedAnnotations.java:440"$0$0$0$0$0$""
"MergedAnnotations.java:441"$0$0$0$1$5$"		/**"
"MergedAnnotations.java:442"$0$0$0$10$58$"		 * Find all directly declared annotations as well as any"
"MergedAnnotations.java:443"$0$0$0$8$71$"		 * {@link Inherited @Inherited} superclass annotations. This strategy"
"MergedAnnotations.java:444"$0$0$0$13$71$"		 * is only really useful when used with {@link Class} types since the"
"MergedAnnotations.java:445"$0$0$0$10$69$"		 * {@link Inherited @Inherited} annotation is ignored for all other"
"MergedAnnotations.java:446"$0$0$0$8$73$"		 * {@linkplain AnnotatedElement annotated elements}. This strategy does"
"MergedAnnotations.java:447"$0$0$0$5$39$"		 * not search implemented interfaces."
"MergedAnnotations.java:448"$0$0$0$1$5$"		 */"
"MergedAnnotations.java:449"$0$0$0$1$24$"		INHERITED_ANNOTATIONS,"
"MergedAnnotations.java:450"$0$0$0$0$0$""
"MergedAnnotations.java:451"$0$0$0$1$5$"		/**"
"MergedAnnotations.java:452"$0$0$0$10$73$"		 * Find all directly declared and superclass annotations. This strategy"
"MergedAnnotations.java:453"$0$0$0$9$72$"		 * is similar to {@link #INHERITED_ANNOTATIONS} except the annotations"
"MergedAnnotations.java:454"$0$0$0$11$72$"		 * do not need to be meta-annotated with {@link Inherited @Inherited}."
"MergedAnnotations.java:455"$0$0$0$8$58$"		 * This strategy does not search implemented interfaces."
"MergedAnnotations.java:456"$0$0$0$1$5$"		 */"
"MergedAnnotations.java:457"$0$0$0$1$13$"		SUPERCLASS,"
"MergedAnnotations.java:458"$0$0$0$0$0$""
"MergedAnnotations.java:459"$0$0$0$1$5$"		/**"
"MergedAnnotations.java:460"$0$0$0$11$66$"		 * Perform a full search of the entire type hierarchy, including"
"MergedAnnotations.java:461"$0$0$0$8$71$"		 * superclasses and implemented interfaces. Superclass annotations do"
"MergedAnnotations.java:462"$0$0$0$10$69$"		 * not need to be meta-annotated with {@link Inherited @Inherited}."
"MergedAnnotations.java:463"$0$0$0$1$5$"		 */"
"MergedAnnotations.java:464"$0$0$0$1$17$"		TYPE_HIERARCHY,"
"MergedAnnotations.java:465"$0$0$0$0$0$""
"MergedAnnotations.java:466"$0$0$0$1$5$"		/**"
"MergedAnnotations.java:467"$0$0$0$13$69$"		 * Perform a full search of the entire type hierarchy on the source"
"MergedAnnotations.java:468"$0$0$0$10$68$"		 * <em>and</em> any enclosing classes. This strategy is similar to"
"MergedAnnotations.java:469"$1$0$0$7$78$"		 * {@link #TYPE_HIERARCHY} except that {@linkplain Class#getEnclosingClass()"
"MergedAnnotations.java:470"$0$0$0$10$72$"		 * enclosing classes} are also searched. Superclass annotations do not"
"MergedAnnotations.java:471"$0$0$0$10$70$"		 * need to be meta-annotated with {@link Inherited @Inherited}. When"
"MergedAnnotations.java:472"$0$0$0$11$69$"		 * searching a {@link Method} source, this strategy is identical to"
"MergedAnnotations.java:473"$0$0$0$3$29$"		 * {@link #TYPE_HIERARCHY}."
"MergedAnnotations.java:474"$0$0$0$1$5$"		 */"
"MergedAnnotations.java:475"$0$0$0$1$38$"		TYPE_HIERARCHY_AND_ENCLOSING_CLASSES"
"MergedAnnotations.java:476"$0$0$0$1$2$"	}"
"MergedAnnotations.java:477"$0$0$0$0$0$""
"MergedAnnotations.java:478"$0$0$0$1$1$"}"
"ByteBufferEncoder.java:1"$0$0$0$1$2$"/*"
"ByteBufferEncoder.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"ByteBufferEncoder.java:3"$0$0$0$1$2$" *"
"ByteBufferEncoder.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ByteBufferEncoder.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ByteBufferEncoder.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ByteBufferEncoder.java:7"$0$0$0$1$2$" *"
"ByteBufferEncoder.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ByteBufferEncoder.java:9"$0$0$0$1$2$" *"
"ByteBufferEncoder.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ByteBufferEncoder.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ByteBufferEncoder.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ByteBufferEncoder.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ByteBufferEncoder.java:14"$0$0$0$5$33$" * limitations under the License."
"ByteBufferEncoder.java:15"$0$0$0$1$3$" */"
"ByteBufferEncoder.java:16"$0$0$0$0$0$""
"ByteBufferEncoder.java:17"$0$0$0$2$39$"package org.springframework.core.codec;"
"ByteBufferEncoder.java:18"$0$0$0$0$0$""
"ByteBufferEncoder.java:19"$0$0$0$2$27$"import java.nio.ByteBuffer;"
"ByteBufferEncoder.java:20"$0$0$0$2$21$"import java.util.Map;"
"ByteBufferEncoder.java:21"$0$0$0$0$0$""
"ByteBufferEncoder.java:22"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"ByteBufferEncoder.java:23"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"ByteBufferEncoder.java:24"$0$0$0$0$0$""
"ByteBufferEncoder.java:25"$0$0$0$2$47$"import org.springframework.core.ResolvableType;"
"ByteBufferEncoder.java:26"$0$0$0$2$53$"import org.springframework.core.io.buffer.DataBuffer;"
"ByteBufferEncoder.java:27"$0$0$0$2$60$"import org.springframework.core.io.buffer.DataBufferFactory;"
"ByteBufferEncoder.java:28"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ByteBufferEncoder.java:29"$0$0$0$2$41$"import org.springframework.util.MimeType;"
"ByteBufferEncoder.java:30"$0$0$0$2$46$"import org.springframework.util.MimeTypeUtils;"
"ByteBufferEncoder.java:31"$0$0$0$0$0$""
"ByteBufferEncoder.java:32"$0$0$0$1$3$"/**"
"ByteBufferEncoder.java:33"$0$0$0$6$46$" * Encoder for {@link ByteBuffer ByteBuffers}."
"ByteBufferEncoder.java:34"$0$0$0$1$2$" *"
"ByteBufferEncoder.java:35"$0$0$0$4$28$" * @author Sebastien Deleuze"
"ByteBufferEncoder.java:36"$0$0$0$3$13$" * @since 5.0"
"ByteBufferEncoder.java:37"$0$0$0$1$3$" */"
"ByteBufferEncoder.java:38"$0$0$0$6$68$"public class ByteBufferEncoder extends AbstractEncoder<ByteBuffer> {"
"ByteBufferEncoder.java:39"$0$0$0$0$0$""
"ByteBufferEncoder.java:40"$0$0$0$3$29$"	public ByteBufferEncoder() {"
"ByteBufferEncoder.java:41"$0$0$0$1$27$"		super(MimeTypeUtils.ALL);"
"ByteBufferEncoder.java:42"$0$0$0$1$2$"	}"
"ByteBufferEncoder.java:43"$0$0$0$0$0$""
"ByteBufferEncoder.java:44"$0$0$0$0$0$""
"ByteBufferEncoder.java:45"$0$0$0$1$10$"	@Override"
"ByteBufferEncoder.java:46"$0$0$0$8$84$"	public boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {"
"ByteBufferEncoder.java:47"$0$0$0$4$41$"		Class<?> clazz = elementType.toClass();"
"ByteBufferEncoder.java:48"$0$0$0$5$92$"		return super.canEncode(elementType, mimeType) && ByteBuffer.class.isAssignableFrom(clazz);"
"ByteBufferEncoder.java:49"$0$0$0$1$2$"	}"
"ByteBufferEncoder.java:50"$0$0$0$0$0$""
"ByteBufferEncoder.java:51"$0$0$0$1$10$"	@Override"
"ByteBufferEncoder.java:52"$0$0$0$6$76$"	public Flux<DataBuffer> encode(Publisher<? extends ByteBuffer> inputStream,"
"ByteBufferEncoder.java:53"$0$0$0$7$92$"			DataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,"
"ByteBufferEncoder.java:54"$0$0$0$5$41$"			@Nullable Map<String, Object> hints) {"
"ByteBufferEncoder.java:55"$0$0$0$0$0$""
"ByteBufferEncoder.java:56"$0$0$0$3$49$"		return Flux.from(inputStream).map(byteBuffer ->"
"ByteBufferEncoder.java:57"$0$0$0$5$74$"				encodeValue(byteBuffer, bufferFactory, elementType, mimeType, hints));"
"ByteBufferEncoder.java:58"$0$0$0$1$2$"	}"
"ByteBufferEncoder.java:59"$0$0$0$0$0$""
"ByteBufferEncoder.java:60"$0$0$0$1$10$"	@Override"
"ByteBufferEncoder.java:61"$0$0$0$6$86$"	public DataBuffer encodeValue(ByteBuffer byteBuffer, DataBufferFactory bufferFactory,"
"ByteBufferEncoder.java:62"$0$0$0$10$96$"			ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {"
"ByteBufferEncoder.java:63"$0$0$0$0$0$""
"ByteBufferEncoder.java:64"$0$0$0$4$57$"		DataBuffer dataBuffer = bufferFactory.wrap(byteBuffer);"
"ByteBufferEncoder.java:65"$0$0$0$5$69$"		if (logger.isDebugEnabled() && !Hints.isLoggingSuppressed(hints)) {"
"ByteBufferEncoder.java:66"$1$0$0$4$48$"			String logPrefix = Hints.getLogPrefix(hints);"
"ByteBufferEncoder.java:67"$0$0$0$9$84$"			logger.debug(logPrefix + ""Writing "" + dataBuffer.readableByteCount() + "" bytes"");"
"ByteBufferEncoder.java:68"$0$0$0$1$3$"		}"
"ByteBufferEncoder.java:69"$0$0$0$2$20$"		return dataBuffer;"
"ByteBufferEncoder.java:70"$0$0$0$1$2$"	}"
"ByteBufferEncoder.java:71"$0$0$0$0$0$""
"ByteBufferEncoder.java:72"$0$0$0$1$1$"}"
"TypeMappedAnnotation.java:1"$0$0$0$1$2$"/*"
"TypeMappedAnnotation.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"TypeMappedAnnotation.java:3"$0$0$0$1$2$" *"
"TypeMappedAnnotation.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"TypeMappedAnnotation.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"TypeMappedAnnotation.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"TypeMappedAnnotation.java:7"$0$0$0$1$2$" *"
"TypeMappedAnnotation.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"TypeMappedAnnotation.java:9"$0$0$0$1$2$" *"
"TypeMappedAnnotation.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"TypeMappedAnnotation.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"TypeMappedAnnotation.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"TypeMappedAnnotation.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"TypeMappedAnnotation.java:14"$0$0$0$5$33$" * limitations under the License."
"TypeMappedAnnotation.java:15"$0$0$0$1$3$" */"
"TypeMappedAnnotation.java:16"$0$0$0$0$0$""
"TypeMappedAnnotation.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"TypeMappedAnnotation.java:18"$0$0$0$0$0$""
"TypeMappedAnnotation.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"TypeMappedAnnotation.java:20"$0$0$0$2$31$"import java.lang.reflect.Array;"
"TypeMappedAnnotation.java:21"$0$0$0$2$32$"import java.lang.reflect.Member;"
"TypeMappedAnnotation.java:22"$0$0$0$2$32$"import java.lang.reflect.Method;"
"TypeMappedAnnotation.java:23"$0$0$0$2$29$"import java.util.Collections;"
"TypeMappedAnnotation.java:24"$0$0$0$2$25$"import java.util.HashMap;"
"TypeMappedAnnotation.java:25"$0$0$0$2$31$"import java.util.LinkedHashMap;"
"TypeMappedAnnotation.java:26"$0$0$0$2$22$"import java.util.List;"
"TypeMappedAnnotation.java:27"$0$0$0$2$21$"import java.util.Map;"
"TypeMappedAnnotation.java:28"$0$0$0$2$40$"import java.util.NoSuchElementException;"
"TypeMappedAnnotation.java:29"$0$0$0$2$26$"import java.util.Optional;"
"TypeMappedAnnotation.java:30"$0$0$0$2$35$"import java.util.function.Function;"
"TypeMappedAnnotation.java:31"$0$0$0$2$36$"import java.util.function.Predicate;"
"TypeMappedAnnotation.java:32"$0$0$0$0$0$""
"TypeMappedAnnotation.java:33"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"TypeMappedAnnotation.java:34"$0$0$0$2$39$"import org.springframework.util.Assert;"
"TypeMappedAnnotation.java:35"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"TypeMappedAnnotation.java:36"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"TypeMappedAnnotation.java:37"$0$0$0$0$0$""
"TypeMappedAnnotation.java:38"$0$0$0$1$3$"/**"
"TypeMappedAnnotation.java:39"$0$0$0$11$76$" * {@link MergedAnnotation} that adapts attributes from a root annotation by"
"TypeMappedAnnotation.java:40"$0$0$0$11$80$" * applying the mapping and mirroring rules of an {@link AnnotationTypeMapping}."
"TypeMappedAnnotation.java:41"$0$0$0$1$2$" *"
"TypeMappedAnnotation.java:42"$0$0$0$13$79$" * <p>Root attribute values are extracted from a source object using a supplied"
"TypeMappedAnnotation.java:43"$0$0$0$11$76$" * {@code BiFunction}. This allows various different annotation models to be"
"TypeMappedAnnotation.java:44"$0$0$0$14$78$" * supported by the same class. For example, the attributes source might be an"
"TypeMappedAnnotation.java:45"$0$0$0$11$78$" * actual {@link Annotation} instance where methods on the annotation instance"
"TypeMappedAnnotation.java:46"$0$0$0$8$83$" * are {@linkplain ReflectionUtils#invokeMethod(Method, Object) invoked} to extract"
"TypeMappedAnnotation.java:47"$0$0$0$13$72$" * values. Equally, the source could be a simple {@link Map} with values"
"TypeMappedAnnotation.java:48"$1$0$0$5$43$" * extracted using {@link Map#get(Object)}."
"TypeMappedAnnotation.java:49"$0$0$0$1$2$" *"
"TypeMappedAnnotation.java:50"$0$0$0$11$75$" * <p>Extracted root attribute values must be compatible with the attribute"
"TypeMappedAnnotation.java:51"$0$0$0$4$23$" * return type, namely:"
"TypeMappedAnnotation.java:52"$0$0$0$1$2$" *"
"TypeMappedAnnotation.java:53"$0$0$0$3$24$" * <p><table border=""1"">"
"TypeMappedAnnotation.java:54"$0$0$0$4$55$" * <tr><th>Return Type</th><th>Extracted Type</th></tr>"
"TypeMappedAnnotation.java:55"$0$0$0$4$50$" * <tr><td>Class</td><td>Class or String</td></tr>"
"TypeMappedAnnotation.java:56"$0$0$0$4$56$" * <tr><td>Class[]</td><td>Class[] or String[]</td></tr>"
"TypeMappedAnnotation.java:57"$0$0$0$9$82$" * <tr><td>Annotation</td><td>Annotation, Map, or Object compatible with the value"
"TypeMappedAnnotation.java:58"$0$0$0$2$22$" * extractor</td></tr>"
"TypeMappedAnnotation.java:59"$0$0$0$8$83$" * <tr><td>Annotation[]</td><td>Annotation[], Map[], or Object[] where elements are"
"TypeMappedAnnotation.java:60"$0$0$0$6$48$" * compatible with the value extractor</td></tr>"
"TypeMappedAnnotation.java:61"$0$0$0$10$92$" * <tr><td>Other types</td><td>An exact match or the appropriate primitive wrapper</td></tr>"
"TypeMappedAnnotation.java:62"$0$0$0$2$11$" * </table>"
"TypeMappedAnnotation.java:63"$0$0$0$1$2$" *"
"TypeMappedAnnotation.java:64"$0$0$0$4$23$" * @author Phillip Webb"
"TypeMappedAnnotation.java:65"$0$0$0$4$26$" * @author Juergen Hoeller"
"TypeMappedAnnotation.java:66"$0$0$0$4$22$" * @author Sam Brannen"
"TypeMappedAnnotation.java:67"$0$0$0$3$13$" * @since 5.2"
"TypeMappedAnnotation.java:68"$0$0$0$6$33$" * @param <A> the annotation type"
"TypeMappedAnnotation.java:69"$0$0$0$3$29$" * @see TypeMappedAnnotations"
"TypeMappedAnnotation.java:70"$0$0$0$1$3$" */"
"TypeMappedAnnotation.java:71"$0$0$0$8$92$"final class TypeMappedAnnotation<A extends Annotation> extends AbstractMergedAnnotation<A> {"
"TypeMappedAnnotation.java:72"$0$0$0$0$0$""
"TypeMappedAnnotation.java:73"$0$0$0$6$57$"	private static final Map<Class<?>, Object> EMPTY_ARRAYS;"
"TypeMappedAnnotation.java:74"$0$0$0$2$9$"	static {"
"TypeMappedAnnotation.java:75"$0$0$0$6$54$"		Map<Class<?>, Object> emptyArrays = new HashMap<>();"
"TypeMappedAnnotation.java:76"$0$0$0$4$49$"		emptyArrays.put(String.class, new String[] {});"
"TypeMappedAnnotation.java:77"$0$0$0$4$51$"		emptyArrays.put(boolean.class, new boolean[] {});"
"TypeMappedAnnotation.java:78"$0$0$0$4$45$"		emptyArrays.put(byte.class, new byte[] {});"
"TypeMappedAnnotation.java:79"$0$0$0$4$45$"		emptyArrays.put(char.class, new char[] {});"
"TypeMappedAnnotation.java:80"$0$0$0$4$49$"		emptyArrays.put(double.class, new double[] {});"
"TypeMappedAnnotation.java:81"$0$0$0$4$47$"		emptyArrays.put(float.class, new float[] {});"
"TypeMappedAnnotation.java:82"$0$0$0$4$43$"		emptyArrays.put(int.class, new int[] {});"
"TypeMappedAnnotation.java:83"$0$0$0$4$45$"		emptyArrays.put(long.class, new long[] {});"
"TypeMappedAnnotation.java:84"$0$0$0$4$47$"		emptyArrays.put(short.class, new short[] {});"
"TypeMappedAnnotation.java:85"$0$0$0$3$58$"		EMPTY_ARRAYS = Collections.unmodifiableMap(emptyArrays);"
"TypeMappedAnnotation.java:86"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:87"$0$0$0$0$0$""
"TypeMappedAnnotation.java:88"$0$0$0$4$45$"	private final AnnotationTypeMapping mapping;"
"TypeMappedAnnotation.java:89"$0$0$0$0$0$""
"TypeMappedAnnotation.java:90"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:91"$0$0$0$4$39$"	private final ClassLoader classLoader;"
"TypeMappedAnnotation.java:92"$0$0$0$0$0$""
"TypeMappedAnnotation.java:93"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:94"$0$0$0$4$29$"	private final Object source;"
"TypeMappedAnnotation.java:95"$0$0$0$0$0$""
"TypeMappedAnnotation.java:96"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:97"$0$0$0$4$37$"	private final Object rootAttributes;"
"TypeMappedAnnotation.java:98"$0$0$0$0$0$""
"TypeMappedAnnotation.java:99"$0$0$0$4$45$"	private final ValueExtractor valueExtractor;"
"TypeMappedAnnotation.java:100"$0$0$0$0$0$""
"TypeMappedAnnotation.java:101"$0$0$0$4$34$"	private final int aggregateIndex;"
"TypeMappedAnnotation.java:102"$0$0$0$0$0$""
"TypeMappedAnnotation.java:103"$0$0$0$4$39$"	private final boolean useMergedValues;"
"TypeMappedAnnotation.java:104"$0$0$0$0$0$""
"TypeMappedAnnotation.java:105"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:106"$0$0$0$4$49$"	private final Predicate<String> attributeFilter;"
"TypeMappedAnnotation.java:107"$0$0$0$0$0$""
"TypeMappedAnnotation.java:108"$0$0$0$4$41$"	private final int[] resolvedRootMirrors;"
"TypeMappedAnnotation.java:109"$0$0$0$0$0$""
"TypeMappedAnnotation.java:110"$0$0$0$4$37$"	private final int[] resolvedMirrors;"
"TypeMappedAnnotation.java:111"$0$0$0$0$0$""
"TypeMappedAnnotation.java:112"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:113"$0$0$0$3$23$"	private String string;"
"TypeMappedAnnotation.java:114"$0$0$0$0$0$""
"TypeMappedAnnotation.java:115"$0$0$0$0$0$""
"TypeMappedAnnotation.java:116"$0$0$0$6$95$"	private TypeMappedAnnotation(AnnotationTypeMapping mapping, @Nullable ClassLoader classLoader,"
"TypeMappedAnnotation.java:117"$0$0$0$8$91$"			@Nullable Object source, @Nullable Object rootAttributes, ValueExtractor valueExtractor,"
"TypeMappedAnnotation.java:118"$0$0$0$3$24$"			int aggregateIndex) {"
"TypeMappedAnnotation.java:119"$0$0$0$0$0$""
"TypeMappedAnnotation.java:120"$0$0$0$7$91$"		this(mapping, classLoader, source, rootAttributes, valueExtractor, aggregateIndex, null);"
"TypeMappedAnnotation.java:121"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:122"$0$0$0$0$0$""
"TypeMappedAnnotation.java:123"$0$0$0$6$95$"	private TypeMappedAnnotation(AnnotationTypeMapping mapping, @Nullable ClassLoader classLoader,"
"TypeMappedAnnotation.java:124"$0$0$0$8$91$"			@Nullable Object source, @Nullable Object rootAttributes, ValueExtractor valueExtractor,"
"TypeMappedAnnotation.java:125"$0$0$0$6$61$"			int aggregateIndex, @Nullable int[] resolvedRootMirrors) {"
"TypeMappedAnnotation.java:126"$0$0$0$0$0$""
"TypeMappedAnnotation.java:127"$0$0$0$3$25$"		this.mapping = mapping;"
"TypeMappedAnnotation.java:128"$0$0$0$3$33$"		this.classLoader = classLoader;"
"TypeMappedAnnotation.java:129"$0$0$0$3$23$"		this.source = source;"
"TypeMappedAnnotation.java:130"$0$0$0$3$39$"		this.rootAttributes = rootAttributes;"
"TypeMappedAnnotation.java:131"$0$0$0$3$39$"		this.valueExtractor = valueExtractor;"
"TypeMappedAnnotation.java:132"$0$0$0$3$39$"		this.aggregateIndex = aggregateIndex;"
"TypeMappedAnnotation.java:133"$0$0$0$3$30$"		this.useMergedValues = true;"
"TypeMappedAnnotation.java:134"$0$0$0$3$30$"		this.attributeFilter = null;"
"TypeMappedAnnotation.java:135"$0$0$0$8$81$"		this.resolvedRootMirrors = (resolvedRootMirrors != null ? resolvedRootMirrors :"
"TypeMappedAnnotation.java:136"$2$0$0$3$92$"				mapping.getRoot().getMirrorSets().resolve(source, rootAttributes, this.valueExtractor));"
"TypeMappedAnnotation.java:137"$1$0$0$8$73$"		this.resolvedMirrors = (getDistance() == 0 ? this.resolvedRootMirrors :"
"TypeMappedAnnotation.java:138"$2$0$0$3$86$"				mapping.getMirrorSets().resolve(source, this, this::getValueForMirrorResolution));"
"TypeMappedAnnotation.java:139"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:140"$0$0$0$0$0$""
"TypeMappedAnnotation.java:141"$0$0$0$6$95$"	private TypeMappedAnnotation(AnnotationTypeMapping mapping, @Nullable ClassLoader classLoader,"
"TypeMappedAnnotation.java:142"$0$0$0$8$91$"			@Nullable Object source, @Nullable Object rootAnnotation, ValueExtractor valueExtractor,"
"TypeMappedAnnotation.java:143"$0$0$0$7$92$"			int aggregateIndex, boolean useMergedValues, @Nullable Predicate<String> attributeFilter,"
"TypeMappedAnnotation.java:144"$0$0$0$5$54$"			int[] resolvedRootMirrors, int[] resolvedMirrors) {"
"TypeMappedAnnotation.java:145"$0$0$0$0$0$""
"TypeMappedAnnotation.java:146"$0$0$0$3$33$"		this.classLoader = classLoader;"
"TypeMappedAnnotation.java:147"$0$0$0$3$23$"		this.source = source;"
"TypeMappedAnnotation.java:148"$0$0$0$3$39$"		this.rootAttributes = rootAnnotation;"
"TypeMappedAnnotation.java:149"$0$0$0$3$39$"		this.valueExtractor = valueExtractor;"
"TypeMappedAnnotation.java:150"$0$0$0$3$25$"		this.mapping = mapping;"
"TypeMappedAnnotation.java:151"$0$0$0$3$39$"		this.aggregateIndex = aggregateIndex;"
"TypeMappedAnnotation.java:152"$0$0$0$3$41$"		this.useMergedValues = useMergedValues;"
"TypeMappedAnnotation.java:153"$0$0$0$3$41$"		this.attributeFilter = attributeFilter;"
"TypeMappedAnnotation.java:154"$0$0$0$3$49$"		this.resolvedRootMirrors = resolvedRootMirrors;"
"TypeMappedAnnotation.java:155"$0$0$0$3$41$"		this.resolvedMirrors = resolvedMirrors;"
"TypeMappedAnnotation.java:156"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:157"$0$0$0$0$0$""
"TypeMappedAnnotation.java:158"$0$0$0$0$0$""
"TypeMappedAnnotation.java:159"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:160"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"TypeMappedAnnotation.java:161"$1$0$0$4$28$"	public Class<A> getType() {"
"TypeMappedAnnotation.java:162"$1$0$0$3$53$"		return (Class<A>) this.mapping.getAnnotationType();"
"TypeMappedAnnotation.java:163"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:164"$0$0$0$0$0$""
"TypeMappedAnnotation.java:165"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:166"$1$0$0$6$58$"	public List<Class<? extends Annotation>> getMetaTypes() {"
"TypeMappedAnnotation.java:167"$1$0$0$2$37$"		return this.mapping.getMetaTypes();"
"TypeMappedAnnotation.java:168"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:169"$0$0$0$0$0$""
"TypeMappedAnnotation.java:170"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:171"$0$0$0$4$29$"	public boolean isPresent() {"
"TypeMappedAnnotation.java:172"$0$0$0$2$14$"		return true;"
"TypeMappedAnnotation.java:173"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:174"$0$0$0$0$0$""
"TypeMappedAnnotation.java:175"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:176"$1$0$0$4$27$"	public int getDistance() {"
"TypeMappedAnnotation.java:177"$1$0$0$2$36$"		return this.mapping.getDistance();"
"TypeMappedAnnotation.java:178"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:179"$0$0$0$0$0$""
"TypeMappedAnnotation.java:180"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:181"$1$0$0$4$33$"	public int getAggregateIndex() {"
"TypeMappedAnnotation.java:182"$0$0$0$2$29$"		return this.aggregateIndex;"
"TypeMappedAnnotation.java:183"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:184"$0$0$0$0$0$""
"TypeMappedAnnotation.java:185"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:186"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:187"$1$0$0$4$28$"	public Object getSource() {"
"TypeMappedAnnotation.java:188"$0$0$0$2$21$"		return this.source;"
"TypeMappedAnnotation.java:189"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:190"$0$0$0$0$0$""
"TypeMappedAnnotation.java:191"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:192"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:193"$1$0$0$4$45$"	public MergedAnnotation<?> getMetaSource() {"
"TypeMappedAnnotation.java:194"$1$0$0$4$69$"		AnnotationTypeMapping metaSourceMapping = this.mapping.getSource();"
"TypeMappedAnnotation.java:195"$0$0$0$5$34$"		if (metaSourceMapping == null) {"
"TypeMappedAnnotation.java:196"$0$0$0$2$15$"			return null;"
"TypeMappedAnnotation.java:197"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:198"$0$0$0$5$85$"		return new TypeMappedAnnotation<>(metaSourceMapping, this.classLoader, this.source,"
"TypeMappedAnnotation.java:199"$0$0$0$4$93$"				this.rootAttributes, this.valueExtractor, this.aggregateIndex, this.resolvedRootMirrors);"
"TypeMappedAnnotation.java:200"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:201"$0$0$0$0$0$""
"TypeMappedAnnotation.java:202"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:203"$1$0$0$4$39$"	public MergedAnnotation<?> getRoot() {"
"TypeMappedAnnotation.java:204"$1$0$0$5$27$"		if (getDistance() == 0) {"
"TypeMappedAnnotation.java:205"$0$0$0$2$15$"			return this;"
"TypeMappedAnnotation.java:206"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:207"$1$0$0$4$61$"		AnnotationTypeMapping rootMapping = this.mapping.getRoot();"
"TypeMappedAnnotation.java:208"$0$0$0$5$79$"		return new TypeMappedAnnotation<>(rootMapping, this.classLoader, this.source,"
"TypeMappedAnnotation.java:209"$0$0$0$4$93$"				this.rootAttributes, this.valueExtractor, this.aggregateIndex, this.resolvedRootMirrors);"
"TypeMappedAnnotation.java:210"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:211"$0$0$0$0$0$""
"TypeMappedAnnotation.java:212"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:213"$0$0$0$5$55$"	public boolean hasDefaultValue(String attributeName) {"
"TypeMappedAnnotation.java:214"$1$0$0$5$62$"		int attributeIndex = getAttributeIndex(attributeName, true);"
"TypeMappedAnnotation.java:215"$1$0$0$6$55$"		Object value = getValue(attributeIndex, true, false);"
"TypeMappedAnnotation.java:216"$0$0$0$8$112$"		return (value == null || this.mapping.isEquivalentToDefaultValue(attributeIndex, value, this.valueExtractor));"
"TypeMappedAnnotation.java:217"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:218"$0$0$0$0$0$""
"TypeMappedAnnotation.java:219"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:220"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"TypeMappedAnnotation.java:221"$1$0$0$9$101$"	public <T extends Annotation> MergedAnnotation<T> getAnnotation(String attributeName, Class<T> type)"
"TypeMappedAnnotation.java:222"$0$0$0$3$34$"			throws NoSuchElementException {"
"TypeMappedAnnotation.java:223"$0$0$0$0$0$""
"TypeMappedAnnotation.java:224"$1$0$0$5$62$"		int attributeIndex = getAttributeIndex(attributeName, true);"
"TypeMappedAnnotation.java:225"$2$0$0$4$70$"		Method attribute = this.mapping.getAttributes().get(attributeIndex);"
"TypeMappedAnnotation.java:226"$0$0$0$6$48$"		Assert.notNull(type, ""Type must not be null"");"
"TypeMappedAnnotation.java:227"$1$0$0$2$54$"		Assert.isAssignable(type, attribute.getReturnType(),"
"TypeMappedAnnotation.java:228"$0$0$0$10$60$"				() -> ""Attribute "" + attributeName + "" type mismatch:"");"
"TypeMappedAnnotation.java:229"$1$0$0$4$79$"		return (MergedAnnotation<T>) getRequiredValue(attributeIndex, attributeName);"
"TypeMappedAnnotation.java:230"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:231"$0$0$0$0$0$""
"TypeMappedAnnotation.java:232"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:233"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"TypeMappedAnnotation.java:234"$1$0$0$6$72$"	public <T extends Annotation> MergedAnnotation<T>[] getAnnotationArray("
"TypeMappedAnnotation.java:235"$0$0$0$7$71$"			String attributeName, Class<T> type) throws NoSuchElementException {"
"TypeMappedAnnotation.java:236"$0$0$0$0$0$""
"TypeMappedAnnotation.java:237"$1$0$0$5$62$"		int attributeIndex = getAttributeIndex(attributeName, true);"
"TypeMappedAnnotation.java:238"$2$0$0$4$70$"		Method attribute = this.mapping.getAttributes().get(attributeIndex);"
"TypeMappedAnnotation.java:239"$2$0$0$4$72$"		Class<?> componentType = attribute.getReturnType().getComponentType();"
"TypeMappedAnnotation.java:240"$0$0$0$6$48$"		Assert.notNull(type, ""Type must not be null"");"
"TypeMappedAnnotation.java:241"$0$0$0$13$89$"		Assert.notNull(componentType, () -> ""Attribute "" + attributeName + "" is not an array"");"
"TypeMappedAnnotation.java:242"$0$0$0$13$109$"		Assert.isAssignable(type, componentType, () -> ""Attribute "" + attributeName + "" component type mismatch:"");"
"TypeMappedAnnotation.java:243"$1$0$0$4$81$"		return (MergedAnnotation<T>[]) getRequiredValue(attributeIndex, attributeName);"
"TypeMappedAnnotation.java:244"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:245"$0$0$0$0$0$""
"TypeMappedAnnotation.java:246"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:247"$1$0$0$8$78$"	public <T> Optional<T> getDefaultValue(String attributeName, Class<T> type) {"
"TypeMappedAnnotation.java:248"$1$0$0$5$63$"		int attributeIndex = getAttributeIndex(attributeName, false);"
"TypeMappedAnnotation.java:249"$0$0$0$5$29$"		if (attributeIndex == -1) {"
"TypeMappedAnnotation.java:250"$0$0$0$2$27$"			return Optional.empty();"
"TypeMappedAnnotation.java:251"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:252"$2$0$0$4$70$"		Method attribute = this.mapping.getAttributes().get(attributeIndex);"
"TypeMappedAnnotation.java:253"$1$0$0$4$82$"		return Optional.ofNullable(adapt(attribute, attribute.getDefaultValue(), type));"
"TypeMappedAnnotation.java:254"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:255"$0$0$0$0$0$""
"TypeMappedAnnotation.java:256"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:257"$0$0$0$5$75$"	public MergedAnnotation<A> filterAttributes(Predicate<String> predicate) {"
"TypeMappedAnnotation.java:258"$0$0$0$5$37$"		if (this.attributeFilter != null) {"
"TypeMappedAnnotation.java:259"$0$0$0$3$51$"			predicate = this.attributeFilter.and(predicate);"
"TypeMappedAnnotation.java:260"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:261"$0$0$0$6$101$"		return new TypeMappedAnnotation<>(this.mapping, this.classLoader, this.source, this.rootAttributes,"
"TypeMappedAnnotation.java:262"$0$0$0$4$78$"				this.valueExtractor, this.aggregateIndex, this.useMergedValues, predicate,"
"TypeMappedAnnotation.java:263"$0$0$0$2$52$"				this.resolvedRootMirrors, this.resolvedMirrors);"
"TypeMappedAnnotation.java:264"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:265"$0$0$0$0$0$""
"TypeMappedAnnotation.java:266"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:267"$0$0$0$4$55$"	public MergedAnnotation<A> withNonMergedAttributes() {"
"TypeMappedAnnotation.java:268"$0$0$0$6$101$"		return new TypeMappedAnnotation<>(this.mapping, this.classLoader, this.source, this.rootAttributes,"
"TypeMappedAnnotation.java:269"$0$0$0$4$74$"				this.valueExtractor, this.aggregateIndex, false, this.attributeFilter,"
"TypeMappedAnnotation.java:270"$0$0$0$2$52$"				this.resolvedRootMirrors, this.resolvedMirrors);"
"TypeMappedAnnotation.java:271"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:272"$0$0$0$0$0$""
"TypeMappedAnnotation.java:273"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:274"$0$0$0$6$57$"	public Map<String, Object> asMap(Adapt... adaptations) {"
"TypeMappedAnnotation.java:275"$0$0$0$6$100$"		return Collections.unmodifiableMap(asMap(mergedAnnotation -> new LinkedHashMap<>(), adaptations));"
"TypeMappedAnnotation.java:276"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:277"$0$0$0$0$0$""
"TypeMappedAnnotation.java:278"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:279"$0$0$0$12$113$"	public <T extends Map<String, Object>> T asMap(Function<MergedAnnotation<?>, T> factory, Adapt... adaptations) {"
"TypeMappedAnnotation.java:280"$0$0$0$4$30$"		T map = factory.apply(this);"
"TypeMappedAnnotation.java:281"$0$0$0$13$96$"		Assert.state(map != null, ""Factory used to create MergedAnnotation Map must not return null"");"
"TypeMappedAnnotation.java:282"$1$0$0$4$61$"		AttributeMethods attributes = this.mapping.getAttributes();"
"TypeMappedAnnotation.java:283"$0$0$0$10$47$"		for (int i = 0; i < attributes.size(); i++) {"
"TypeMappedAnnotation.java:284"$1$0$0$4$40$"			Method attribute = attributes.get(i);"
"TypeMappedAnnotation.java:285"$1$0$0$7$59$"			Object value = (isFiltered(attribute.getName()) ? null :"
"TypeMappedAnnotation.java:286"$2$0$0$3$64$"					getValue(i, getTypeForMapOptions(attribute, adaptations)));"
"TypeMappedAnnotation.java:287"$0$0$0$5$23$"			if (value != null) {"
"TypeMappedAnnotation.java:288"$1$0$0$1$32$"				map.put(attribute.getName(),"
"TypeMappedAnnotation.java:289"$1$0$0$5$87$"						adaptValueForMapOptions(attribute, value, map.getClass(), factory, adaptations));"
"TypeMappedAnnotation.java:290"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:291"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:292"$0$0$0$2$13$"		return map;"
"TypeMappedAnnotation.java:293"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:294"$0$0$0$0$0$""
"TypeMappedAnnotation.java:295"$1$0$0$7$79$"	private Class<?> getTypeForMapOptions(Method attribute, Adapt[] adaptations) {"
"TypeMappedAnnotation.java:296"$1$0$0$4$53$"		Class<?> attributeType = attribute.getReturnType();"
"TypeMappedAnnotation.java:297"$1$0$0$8$104$"		Class<?> componentType = (attributeType.isArray() ? attributeType.getComponentType() : attributeType);"
"TypeMappedAnnotation.java:298"$0$0$0$7$80$"		if (Adapt.CLASS_TO_STRING.isIn(adaptations) && componentType == Class.class) {"
"TypeMappedAnnotation.java:299"$0$0$0$6$68$"			return (attributeType.isArray() ? String[].class : String.class);"
"TypeMappedAnnotation.java:300"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:301"$0$0$0$2$22$"		return Object.class;"
"TypeMappedAnnotation.java:302"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:303"$0$0$0$0$0$""
"TypeMappedAnnotation.java:304"$0$0$0$10$103$"	private <T extends Map<String, Object>> Object adaptValueForMapOptions(Method attribute, Object value,"
"TypeMappedAnnotation.java:305"$0$0$0$8$85$"			Class<?> mapType, Function<MergedAnnotation<?>, T> factory, Adapt[] adaptations) {"
"TypeMappedAnnotation.java:306"$0$0$0$0$0$""
"TypeMappedAnnotation.java:307"$0$0$0$5$42$"		if (value instanceof MergedAnnotation) {"
"TypeMappedAnnotation.java:308"$0$0$0$5$64$"			MergedAnnotation<?> annotation = (MergedAnnotation<?>) value;"
"TypeMappedAnnotation.java:309"$0$0$0$3$54$"			return (Adapt.ANNOTATION_TO_MAP.isIn(adaptations) ?"
"TypeMappedAnnotation.java:310"$0$0$0$4$71$"					annotation.asMap(factory, adaptations) : annotation.synthesize());"
"TypeMappedAnnotation.java:311"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:312"$0$0$0$5$44$"		if (value instanceof MergedAnnotation[]) {"
"TypeMappedAnnotation.java:313"$0$0$0$5$69$"			MergedAnnotation<?>[] annotations = (MergedAnnotation<?>[]) value;"
"TypeMappedAnnotation.java:314"$0$0$0$3$51$"			if (Adapt.ANNOTATION_TO_MAP.isIn(adaptations)) {"
"TypeMappedAnnotation.java:315"$0$0$0$5$67$"				Object result = Array.newInstance(mapType, annotations.length);"
"TypeMappedAnnotation.java:316"$0$0$0$10$50$"				for (int i = 0; i < annotations.length; i++) {"
"TypeMappedAnnotation.java:317"$0$0$0$4$70$"					Array.set(result, i, annotations[i].asMap(factory, adaptations));"
"TypeMappedAnnotation.java:318"$0$0$0$1$5$"				}"
"TypeMappedAnnotation.java:319"$0$0$0$2$18$"				return result;"
"TypeMappedAnnotation.java:320"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:321"$0$0$0$4$37$"			Object result = Array.newInstance("
"TypeMappedAnnotation.java:322"$2$0$0$2$71$"					attribute.getReturnType().getComponentType(), annotations.length);"
"TypeMappedAnnotation.java:323"$0$0$0$10$49$"			for (int i = 0; i < annotations.length; i++) {"
"TypeMappedAnnotation.java:324"$0$0$0$3$54$"				Array.set(result, i, annotations[i].synthesize());"
"TypeMappedAnnotation.java:325"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:326"$0$0$0$2$17$"			return result;"
"TypeMappedAnnotation.java:327"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:328"$0$0$0$2$15$"		return value;"
"TypeMappedAnnotation.java:329"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:330"$0$0$0$0$0$""
"TypeMappedAnnotation.java:331"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:332"$0$0$0$4$34$"	protected A createSynthesized() {"
"TypeMappedAnnotation.java:333"$1$0$0$3$83$"		return SynthesizedMergedAnnotationInvocationHandler.createProxy(this, getType());"
"TypeMappedAnnotation.java:334"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:335"$0$0$0$0$0$""
"TypeMappedAnnotation.java:336"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:337"$0$0$0$4$27$"	public String toString() {"
"TypeMappedAnnotation.java:338"$0$0$0$4$30$"		String string = this.string;"
"TypeMappedAnnotation.java:339"$0$0$0$5$23$"		if (string == null) {"
"TypeMappedAnnotation.java:340"$0$0$0$5$47$"			StringBuilder builder = new StringBuilder();"
"TypeMappedAnnotation.java:341"$0$0$0$1$23$"			builder.append(""@"");"
"TypeMappedAnnotation.java:342"$2$0$0$1$39$"			builder.append(getType().getName());"
"TypeMappedAnnotation.java:343"$0$0$0$1$23$"			builder.append(""("");"
"TypeMappedAnnotation.java:344"$1$0$0$10$66$"			for (int i = 0; i < this.mapping.getAttributes().size(); i++) {"
"TypeMappedAnnotation.java:345"$2$0$0$4$59$"				Method attribute = this.mapping.getAttributes().get(i);"
"TypeMappedAnnotation.java:346"$0$0$0$8$39$"				builder.append(i == 0 ? """" : "", "");"
"TypeMappedAnnotation.java:347"$1$0$0$1$40$"				builder.append(attribute.getName());"
"TypeMappedAnnotation.java:348"$0$0$0$1$24$"				builder.append(""="");"
"TypeMappedAnnotation.java:349"$1$0$0$2$56$"				builder.append(toString(getValue(i, Object.class)));"
"TypeMappedAnnotation.java:350"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:351"$0$0$0$1$23$"			builder.append("")"");"
"TypeMappedAnnotation.java:352"$0$0$0$3$31$"			string = builder.toString();"
"TypeMappedAnnotation.java:353"$0$0$0$3$24$"			this.string = string;"
"TypeMappedAnnotation.java:354"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:355"$0$0$0$2$16$"		return string;"
"TypeMappedAnnotation.java:356"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:357"$0$0$0$0$0$""
"TypeMappedAnnotation.java:358"$0$0$0$6$50$"	private Object toString(@Nullable Object value) {"
"TypeMappedAnnotation.java:359"$0$0$0$5$22$"		if (value == null) {"
"TypeMappedAnnotation.java:360"$0$0$0$2$13$"			return """";"
"TypeMappedAnnotation.java:361"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:362"$0$0$0$5$31$"		if (value instanceof Class) {"
"TypeMappedAnnotation.java:363"$1$0$0$3$39$"			return ((Class<?>) value).getName();"
"TypeMappedAnnotation.java:364"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:365"$1$0$0$3$35$"		if (value.getClass().isArray()) {"
"TypeMappedAnnotation.java:366"$0$0$0$5$47$"			StringBuilder builder = new StringBuilder();"
"TypeMappedAnnotation.java:367"$0$0$0$1$23$"			builder.append(""["");"
"TypeMappedAnnotation.java:368"$1$0$0$10$53$"			for (int i = 0; i < Array.getLength(value); i++) {"
"TypeMappedAnnotation.java:369"$0$0$0$8$39$"				builder.append(i == 0 ? """" : "", "");"
"TypeMappedAnnotation.java:370"$1$0$0$2$50$"				builder.append(toString(Array.get(value, i)));"
"TypeMappedAnnotation.java:371"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:372"$0$0$0$1$23$"			builder.append(""]"");"
"TypeMappedAnnotation.java:373"$0$0$0$2$29$"			return builder.toString();"
"TypeMappedAnnotation.java:374"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:375"$0$0$0$2$31$"		return String.valueOf(value);"
"TypeMappedAnnotation.java:376"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:377"$0$0$0$0$0$""
"TypeMappedAnnotation.java:378"$0$0$0$1$10$"	@Override"
"TypeMappedAnnotation.java:379"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:380"$1$0$0$8$73$"	protected <T> T getAttributeValue(String attributeName, Class<T> type) {"
"TypeMappedAnnotation.java:381"$1$0$0$5$63$"		int attributeIndex = getAttributeIndex(attributeName, false);"
"TypeMappedAnnotation.java:382"$1$0$0$9$72$"		return (attributeIndex != -1 ? getValue(attributeIndex, type) : null);"
"TypeMappedAnnotation.java:383"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:384"$0$0$0$0$0$""
"TypeMappedAnnotation.java:385"$1$0$0$7$76$"	private Object getRequiredValue(int attributeIndex, String attributeName) {"
"TypeMappedAnnotation.java:386"$1$0$0$5$56$"		Object value = getValue(attributeIndex, Object.class);"
"TypeMappedAnnotation.java:387"$0$0$0$5$22$"		if (value == null) {"
"TypeMappedAnnotation.java:388"$0$0$0$8$68$"			throw new NoSuchElementException(""No element at attribute index """
"TypeMappedAnnotation.java:389"$0$0$0$9$54$"					+ attributeIndex + "" for name "" + attributeName);"
"TypeMappedAnnotation.java:390"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:391"$0$0$0$2$15$"		return value;"
"TypeMappedAnnotation.java:392"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:393"$0$0$0$0$0$""
"TypeMappedAnnotation.java:394"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:395"$1$0$0$8$60$"	private <T> T getValue(int attributeIndex, Class<T> type) {"
"TypeMappedAnnotation.java:396"$2$0$0$4$70$"		Method attribute = this.mapping.getAttributes().get(attributeIndex);"
"TypeMappedAnnotation.java:397"$1$0$0$6$55$"		Object value = getValue(attributeIndex, true, false);"
"TypeMappedAnnotation.java:398"$0$0$0$5$22$"		if (value == null) {"
"TypeMappedAnnotation.java:399"$1$0$0$3$39$"			value = attribute.getDefaultValue();"
"TypeMappedAnnotation.java:400"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:401"$0$0$0$4$39$"		return adapt(attribute, value, type);"
"TypeMappedAnnotation.java:402"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:403"$0$0$0$0$0$""
"TypeMappedAnnotation.java:404"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:405"$1$0$0$9$105$"	private Object getValue(int attributeIndex, boolean useConventionMapping, boolean forMirrorResolution) {"
"TypeMappedAnnotation.java:406"$0$0$0$4$47$"		AnnotationTypeMapping mapping = this.mapping;"
"TypeMappedAnnotation.java:407"$0$0$0$3$29$"		if (this.useMergedValues) {"
"TypeMappedAnnotation.java:408"$1$0$0$4$66$"			int mappedIndex = this.mapping.getAliasMapping(attributeIndex);"
"TypeMappedAnnotation.java:409"$0$0$0$7$51$"			if (mappedIndex == -1 && useConventionMapping) {"
"TypeMappedAnnotation.java:410"$1$0$0$3$68$"				mappedIndex = this.mapping.getConventionMapping(attributeIndex);"
"TypeMappedAnnotation.java:411"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:412"$0$0$0$5$27$"			if (mappedIndex != -1) {"
"TypeMappedAnnotation.java:413"$1$0$0$3$32$"				mapping = mapping.getRoot();"
"TypeMappedAnnotation.java:414"$0$0$0$3$33$"				attributeIndex = mappedIndex;"
"TypeMappedAnnotation.java:415"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:416"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:417"$0$0$0$3$29$"		if (!forMirrorResolution) {"
"TypeMappedAnnotation.java:418"$1$0$0$6$49$"			attributeIndex = (mapping.getDistance() != 0 ?"
"TypeMappedAnnotation.java:419"$0$0$0$2$27$"					this.resolvedMirrors :"
"TypeMappedAnnotation.java:420"$0$0$0$1$47$"					this.resolvedRootMirrors)[attributeIndex];"
"TypeMappedAnnotation.java:421"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:422"$0$0$0$5$29$"		if (attributeIndex == -1) {"
"TypeMappedAnnotation.java:423"$0$0$0$2$15$"			return null;"
"TypeMappedAnnotation.java:424"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:425"$1$0$0$5$35$"		if (mapping.getDistance() == 0) {"
"TypeMappedAnnotation.java:426"$2$0$0$4$66$"			Method attribute = mapping.getAttributes().get(attributeIndex);"
"TypeMappedAnnotation.java:427"$0$0$0$5$79$"			Object result = this.valueExtractor.extract(attribute, this.rootAttributes);"
"TypeMappedAnnotation.java:428"$1$0$0$8$66$"			return (result != null) ? result : attribute.getDefaultValue();"
"TypeMappedAnnotation.java:429"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:430"$1$0$0$3$73$"		return getValueFromMetaAnnotation(attributeIndex, forMirrorResolution);"
"TypeMappedAnnotation.java:431"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:432"$0$0$0$0$0$""
"TypeMappedAnnotation.java:433"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:434"$1$0$0$4$62$"	private Object getValueFromMetaAnnotation(int attributeIndex,"
"TypeMappedAnnotation.java:435"$0$0$0$3$33$"			boolean forMirrorResolution) {"
"TypeMappedAnnotation.java:436"$0$0$0$0$0$""
"TypeMappedAnnotation.java:437"$0$0$0$4$22$"		Object value = null;"
"TypeMappedAnnotation.java:438"$0$0$0$5$52$"		if (this.useMergedValues || forMirrorResolution) {"
"TypeMappedAnnotation.java:439"$1$0$0$4$86$"			value = this.mapping.getMappedAnnotationValue(attributeIndex, forMirrorResolution);"
"TypeMappedAnnotation.java:440"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:441"$0$0$0$5$22$"		if (value == null) {"
"TypeMappedAnnotation.java:442"$2$0$0$4$71$"			Method attribute = this.mapping.getAttributes().get(attributeIndex);"
"TypeMappedAnnotation.java:443"$1$0$0$4$81$"			value = ReflectionUtils.invokeMethod(attribute, this.mapping.getAnnotation());"
"TypeMappedAnnotation.java:444"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:445"$0$0$0$2$15$"		return value;"
"TypeMappedAnnotation.java:446"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:447"$0$0$0$0$0$""
"TypeMappedAnnotation.java:448"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:449"$1$0$0$7$82$"	private Object getValueForMirrorResolution(Method attribute, Object annotation) {"
"TypeMappedAnnotation.java:450"$1$0$0$4$71$"		int attributeIndex = this.mapping.getAttributes().indexOf(attribute);"
"TypeMappedAnnotation.java:451"$1$0$0$4$61$"		boolean valueAttribute = VALUE.equals(attribute.getName());"
"TypeMappedAnnotation.java:452"$1$0$0$4$57$"		return getValue(attributeIndex, !valueAttribute, true);"
"TypeMappedAnnotation.java:453"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:454"$0$0$0$0$0$""
"TypeMappedAnnotation.java:455"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"TypeMappedAnnotation.java:456"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:457"$0$0$0$11$79$"	private <T> T adapt(Method attribute, @Nullable Object value, Class<T> type) {"
"TypeMappedAnnotation.java:458"$0$0$0$5$22$"		if (value == null) {"
"TypeMappedAnnotation.java:459"$0$0$0$2$15$"			return null;"
"TypeMappedAnnotation.java:460"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:461"$0$0$0$4$46$"		value = adaptForAttribute(attribute, value);"
"TypeMappedAnnotation.java:462"$1$0$0$4$39$"		type = getAdaptType(attribute, type);"
"TypeMappedAnnotation.java:463"$0$0$0$9$55$"		if (value instanceof Class && type == String.class) {"
"TypeMappedAnnotation.java:464"$1$0$0$4$40$"			value = ((Class<?>) value).getName();"
"TypeMappedAnnotation.java:465"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:466"$0$0$0$10$60$"		else if (value instanceof String && type == Class.class) {"
"TypeMappedAnnotation.java:467"$1$0$0$5$73$"			value = ClassUtils.resolveClassName((String) value, getClassLoader());"
"TypeMappedAnnotation.java:468"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:469"$0$0$0$10$64$"		else if (value instanceof Class[] && type == String[].class) {"
"TypeMappedAnnotation.java:470"$0$0$0$5$40$"			Class<?>[] classes = (Class[]) value;"
"TypeMappedAnnotation.java:471"$0$0$0$5$47$"			String[] names = new String[classes.length];"
"TypeMappedAnnotation.java:472"$0$0$0$10$45$"			for (int i = 0; i < classes.length; i++) {"
"TypeMappedAnnotation.java:473"$1$0$0$3$36$"				names[i] = classes[i].getName();"
"TypeMappedAnnotation.java:474"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:475"$0$0$0$3$17$"			value = names;"
"TypeMappedAnnotation.java:476"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:477"$0$0$0$10$64$"		else if (value instanceof String[] && type == Class[].class) {"
"TypeMappedAnnotation.java:478"$0$0$0$5$37$"			String[] names = (String[]) value;"
"TypeMappedAnnotation.java:479"$0$0$0$5$51$"			Class<?>[] classes = new Class<?>[names.length];"
"TypeMappedAnnotation.java:480"$0$0$0$10$43$"			for (int i = 0; i < names.length; i++) {"
"TypeMappedAnnotation.java:481"$1$0$0$4$73$"				classes[i] = ClassUtils.resolveClassName(names[i], getClassLoader());"
"TypeMappedAnnotation.java:482"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:483"$0$0$0$3$19$"			value = classes;"
"TypeMappedAnnotation.java:484"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:485"$0$0$0$8$70$"		else if (value instanceof MergedAnnotation && type.isAnnotation()) {"
"TypeMappedAnnotation.java:486"$0$0$0$5$64$"			MergedAnnotation<?> annotation = (MergedAnnotation<?>) value;"
"TypeMappedAnnotation.java:487"$0$0$0$3$35$"			value = annotation.synthesize();"
"TypeMappedAnnotation.java:488"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:489"$1$0$0$10$109$"		else if (value instanceof MergedAnnotation[] && type.isArray() && type.getComponentType().isAnnotation()) {"
"TypeMappedAnnotation.java:490"$0$0$0$5$69$"			MergedAnnotation<?>[] annotations = (MergedAnnotation<?>[]) value;"
"TypeMappedAnnotation.java:491"$1$0$0$5$81$"			Object array = Array.newInstance(type.getComponentType(), annotations.length);"
"TypeMappedAnnotation.java:492"$0$0$0$10$49$"			for (int i = 0; i < annotations.length; i++) {"
"TypeMappedAnnotation.java:493"$0$0$0$3$53$"				Array.set(array, i, annotations[i].synthesize());"
"TypeMappedAnnotation.java:494"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:495"$0$0$0$3$17$"			value = array;"
"TypeMappedAnnotation.java:496"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:497"$0$0$0$3$32$"		if (!type.isInstance(value)) {"
"TypeMappedAnnotation.java:498"$0$0$0$10$72$"			throw new IllegalArgumentException(""Unable to adapt value of type "" +"
"TypeMappedAnnotation.java:499"$3$0$0$7$59$"					value.getClass().getName() + "" to "" + type.getName());"
"TypeMappedAnnotation.java:500"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:501"$0$0$0$3$19$"		return (T) value;"
"TypeMappedAnnotation.java:502"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:503"$0$0$0$0$0$""
"TypeMappedAnnotation.java:504"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"TypeMappedAnnotation.java:505"$0$0$0$7$67$"	private Object adaptForAttribute(Method attribute, Object value) {"
"TypeMappedAnnotation.java:506"$1$0$0$4$93$"		Class<?> attributeType = ClassUtils.resolvePrimitiveIfNecessary(attribute.getReturnType());"
"TypeMappedAnnotation.java:507"$1$0$0$5$63$"		if (attributeType.isArray() && !value.getClass().isArray()) {"
"TypeMappedAnnotation.java:508"$1$0$0$5$57$"			Object array = Array.newInstance(value.getClass(), 1);"
"TypeMappedAnnotation.java:509"$0$0$0$3$30$"			Array.set(array, 0, value);"
"TypeMappedAnnotation.java:510"$0$0$0$3$46$"			return adaptForAttribute(attribute, array);"
"TypeMappedAnnotation.java:511"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:512"$0$0$0$3$37$"		if (attributeType.isAnnotation()) {"
"TypeMappedAnnotation.java:513"$0$0$0$5$85$"			return adaptToMergedAnnotation(value,(Class<? extends Annotation>) attributeType);"
"TypeMappedAnnotation.java:514"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:515"$1$0$0$5$83$"		if (attributeType.isArray() && attributeType.getComponentType().isAnnotation() &&"
"TypeMappedAnnotation.java:516"$1$0$0$2$33$"				value.getClass().isArray()) {"
"TypeMappedAnnotation.java:517"$1$0$0$5$82$"			MergedAnnotation<?>[] result = new MergedAnnotation<?>[Array.getLength(value)];"
"TypeMappedAnnotation.java:518"$0$0$0$10$44$"			for (int i = 0; i < result.length; i++) {"
"TypeMappedAnnotation.java:519"$1$0$0$4$60$"				result[i] = adaptToMergedAnnotation(Array.get(value, i),"
"TypeMappedAnnotation.java:520"$1$0$0$4$70$"						(Class<? extends Annotation>) attributeType.getComponentType());"
"TypeMappedAnnotation.java:521"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:522"$0$0$0$2$17$"			return result;"
"TypeMappedAnnotation.java:523"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:524"$0$0$0$9$66$"		if ((attributeType == Class.class && value instanceof String) ||"
"TypeMappedAnnotation.java:525"$0$0$0$8$68$"				(attributeType == Class[].class && value instanceof String[]) ||"
"TypeMappedAnnotation.java:526"$0$0$0$8$64$"				(attributeType == String.class && value instanceof Class) ||"
"TypeMappedAnnotation.java:527"$0$0$0$8$68$"				(attributeType == String[].class && value instanceof Class[])) {"
"TypeMappedAnnotation.java:528"$0$0$0$2$16$"			return value;"
"TypeMappedAnnotation.java:529"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:530"$0$0$0$5$61$"		if (attributeType.isArray() && isEmptyObjectArray(value)) {"
"TypeMappedAnnotation.java:531"$1$0$0$2$55$"			return emptyArray(attributeType.getComponentType());"
"TypeMappedAnnotation.java:532"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:533"$0$0$0$3$41$"		if (!attributeType.isInstance(value)) {"
"TypeMappedAnnotation.java:534"$1$0$0$7$72$"			throw new IllegalStateException(""Attribute '"" + attribute.getName() +"
"TypeMappedAnnotation.java:535"$2$0$0$14$79$"					""' in annotation "" + getType().getName() + "" should be compatible with "" +"
"TypeMappedAnnotation.java:536"$3$0$0$9$71$"					attributeType.getName() + "" but a "" + value.getClass().getName() +"
"TypeMappedAnnotation.java:537"$0$0$0$4$28$"					"" value was returned"");"
"TypeMappedAnnotation.java:538"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:539"$0$0$0$2$15$"		return value;"
"TypeMappedAnnotation.java:540"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:541"$0$0$0$0$0$""
"TypeMappedAnnotation.java:542"$0$0$0$5$51$"	private boolean isEmptyObjectArray(Object value) {"
"TypeMappedAnnotation.java:543"$0$0$0$9$71$"		return (value instanceof Object[] && ((Object[]) value).length == 0);"
"TypeMappedAnnotation.java:544"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:545"$0$0$0$0$0$""
"TypeMappedAnnotation.java:546"$0$0$0$5$52$"	private Object emptyArray(Class<?> componentType) {"
"TypeMappedAnnotation.java:547"$1$0$0$4$50$"		Object result = EMPTY_ARRAYS.get(componentType);"
"TypeMappedAnnotation.java:548"$0$0$0$5$23$"		if (result == null) {"
"TypeMappedAnnotation.java:549"$0$0$0$4$48$"			result = Array.newInstance(componentType, 0);"
"TypeMappedAnnotation.java:550"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:551"$0$0$0$2$16$"		return result;"
"TypeMappedAnnotation.java:552"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:553"$0$0$0$0$0$""
"TypeMappedAnnotation.java:554"$0$0$0$9$112$"	private MergedAnnotation<?> adaptToMergedAnnotation(Object value, Class<? extends Annotation> annotationType) {"
"TypeMappedAnnotation.java:555"$0$0$0$5$42$"		if (value instanceof MergedAnnotation) {"
"TypeMappedAnnotation.java:556"$0$0$0$3$38$"			return (MergedAnnotation<?>) value;"
"TypeMappedAnnotation.java:557"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:558"$1$0$0$4$98$"		AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);"
"TypeMappedAnnotation.java:559"$0$0$0$3$36$"		return new TypeMappedAnnotation<>("
"TypeMappedAnnotation.java:560"$1$0$0$6$86$"				mapping, null, this.source, value, getValueExtractor(value), this.aggregateIndex);"
"TypeMappedAnnotation.java:561"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:562"$0$0$0$0$0$""
"TypeMappedAnnotation.java:563"$1$0$0$5$57$"	private ValueExtractor getValueExtractor(Object value) {"
"TypeMappedAnnotation.java:564"$0$0$0$5$36$"		if (value instanceof Annotation) {"
"TypeMappedAnnotation.java:565"$0$0$0$2$40$"			return ReflectionUtils::invokeMethod;"
"TypeMappedAnnotation.java:566"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:567"$0$0$0$5$29$"		if (value instanceof Map) {"
"TypeMappedAnnotation.java:568"$0$0$0$2$47$"			return TypeMappedAnnotation::extractFromMap;"
"TypeMappedAnnotation.java:569"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:570"$0$0$0$2$29$"		return this.valueExtractor;"
"TypeMappedAnnotation.java:571"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:572"$0$0$0$0$0$""
"TypeMappedAnnotation.java:573"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"TypeMappedAnnotation.java:574"$1$0$0$8$69$"	private <T> Class<T> getAdaptType(Method attribute, Class<T> type) {"
"TypeMappedAnnotation.java:575"$0$0$0$5$29$"		if (type != Object.class) {"
"TypeMappedAnnotation.java:576"$0$0$0$2$15$"			return type;"
"TypeMappedAnnotation.java:577"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:578"$1$0$0$4$53$"		Class<?> attributeType = attribute.getReturnType();"
"TypeMappedAnnotation.java:579"$0$0$0$3$37$"		if (attributeType.isAnnotation()) {"
"TypeMappedAnnotation.java:580"$0$0$0$3$44$"			return (Class<T>) MergedAnnotation.class;"
"TypeMappedAnnotation.java:581"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:582"$1$0$0$5$83$"		if (attributeType.isArray() && attributeType.getComponentType().isAnnotation()) {"
"TypeMappedAnnotation.java:583"$0$0$0$3$46$"			return (Class<T>) MergedAnnotation[].class;"
"TypeMappedAnnotation.java:584"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:585"$0$0$0$3$74$"		return (Class<T>) ClassUtils.resolvePrimitiveIfNecessary(attributeType);"
"TypeMappedAnnotation.java:586"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:587"$0$0$0$0$0$""
"TypeMappedAnnotation.java:588"$1$0$0$7$72$"	private int getAttributeIndex(String attributeName, boolean required) {"
"TypeMappedAnnotation.java:589"$0$0$0$7$67$"		Assert.hasText(attributeName, ""Attribute name must not be null"");"
"TypeMappedAnnotation.java:590"$0$0$0$7$56$"		int attributeIndex = (isFiltered(attributeName) ? -1 :"
"TypeMappedAnnotation.java:591"$1$0$0$1$57$"				this.mapping.getAttributes().indexOf(attributeName));"
"TypeMappedAnnotation.java:592"$0$0$0$7$41$"		if (attributeIndex == -1 && required) {"
"TypeMappedAnnotation.java:593"$0$0$0$9$76$"			throw new NoSuchElementException(""No attribute named '"" + attributeName +"
"TypeMappedAnnotation.java:594"$2$0$0$8$62$"					""' present in merged annotation "" + getType().getName());"
"TypeMappedAnnotation.java:595"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:596"$0$0$0$2$24$"		return attributeIndex;"
"TypeMappedAnnotation.java:597"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:598"$0$0$0$0$0$""
"TypeMappedAnnotation.java:599"$0$0$0$5$51$"	private boolean isFiltered(String attributeName) {"
"TypeMappedAnnotation.java:600"$0$0$0$5$37$"		if (this.attributeFilter != null) {"
"TypeMappedAnnotation.java:601"$0$0$0$2$52$"			return !this.attributeFilter.test(attributeName);"
"TypeMappedAnnotation.java:602"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:603"$0$0$0$2$15$"		return false;"
"TypeMappedAnnotation.java:604"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:605"$0$0$0$0$0$""
"TypeMappedAnnotation.java:606"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:607"$1$0$0$4$39$"	private ClassLoader getClassLoader() {"
"TypeMappedAnnotation.java:608"$0$0$0$5$33$"		if (this.classLoader != null) {"
"TypeMappedAnnotation.java:609"$0$0$0$2$27$"			return this.classLoader;"
"TypeMappedAnnotation.java:610"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:611"$0$0$0$5$28$"		if (this.source != null) {"
"TypeMappedAnnotation.java:612"$0$0$0$5$38$"			if (this.source instanceof Class) {"
"TypeMappedAnnotation.java:613"$1$0$0$3$48$"				return ((Class<?>) source).getClassLoader();"
"TypeMappedAnnotation.java:614"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:615"$0$0$0$5$39$"			if (this.source instanceof Member) {"
"TypeMappedAnnotation.java:616"$2$0$0$2$64$"				((Member) this.source).getDeclaringClass().getClassLoader();"
"TypeMappedAnnotation.java:617"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:618"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:619"$0$0$0$2$14$"		return null;"
"TypeMappedAnnotation.java:620"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:621"$0$0$0$0$0$""
"TypeMappedAnnotation.java:622"$0$0$0$0$0$""
"TypeMappedAnnotation.java:623"$0$0$0$11$96$"	static <A extends Annotation> MergedAnnotation<A> from(@Nullable Object source, A annotation) {"
"TypeMappedAnnotation.java:624"$0$0$0$6$60$"		Assert.notNull(annotation, ""Annotation must not be null"");"
"TypeMappedAnnotation.java:625"$0$0$0$4$106$"		AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(annotation.annotationType());"
"TypeMappedAnnotation.java:626"$1$0$0$8$113$"		return new TypeMappedAnnotation<>(mappings.get(0), null, source, annotation, ReflectionUtils::invokeMethod, 0);"
"TypeMappedAnnotation.java:627"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:628"$0$0$0$0$0$""
"TypeMappedAnnotation.java:629"$0$0$0$6$54$"	static <A extends Annotation> MergedAnnotation<A> of("
"TypeMappedAnnotation.java:630"$0$0$0$6$62$"			@Nullable ClassLoader classLoader, @Nullable Object source,"
"TypeMappedAnnotation.java:631"$0$0$0$7$66$"			Class<A> annotationType, @Nullable Map<String, ?> attributes) {"
"TypeMappedAnnotation.java:632"$0$0$0$0$0$""
"TypeMappedAnnotation.java:633"$0$0$0$7$69$"		Assert.notNull(annotationType, ""Annotation type must not be null"");"
"TypeMappedAnnotation.java:634"$0$0$0$4$93$"		AnnotationTypeMappings mappings = AnnotationTypeMappings.forAnnotationType(annotationType);"
"TypeMappedAnnotation.java:635"$0$0$0$3$36$"		return new TypeMappedAnnotation<>("
"TypeMappedAnnotation.java:636"$1$0$0$6$95$"				mappings.get(0), classLoader, source, attributes, TypeMappedAnnotation::extractFromMap, 0);"
"TypeMappedAnnotation.java:637"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:638"$0$0$0$0$0$""
"TypeMappedAnnotation.java:639"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:640"$0$0$0$6$72$"	static <A extends Annotation> TypeMappedAnnotation<A> createIfPossible("
"TypeMappedAnnotation.java:641"$0$0$0$7$102$"			AnnotationTypeMapping mapping, MergedAnnotation<?> annotation, IntrospectionFailureLogger logger) {"
"TypeMappedAnnotation.java:642"$0$0$0$5$51$"		if (annotation instanceof TypeMappedAnnotation) {"
"TypeMappedAnnotation.java:643"$0$0$0$5$87$"			TypeMappedAnnotation<?> typeMappedAnnotation = (TypeMappedAnnotation<?>) annotation;"
"TypeMappedAnnotation.java:644"$0$0$0$3$64$"			return createIfPossible(mapping, typeMappedAnnotation.source,"
"TypeMappedAnnotation.java:645"$0$0$0$1$41$"					typeMappedAnnotation.rootAttributes,"
"TypeMappedAnnotation.java:646"$0$0$0$1$41$"					typeMappedAnnotation.valueExtractor,"
"TypeMappedAnnotation.java:647"$0$0$0$2$50$"					typeMappedAnnotation.aggregateIndex, logger);"
"TypeMappedAnnotation.java:648"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:649"$1$0$0$4$83$"		return createIfPossible(mapping, annotation.getSource(), annotation.synthesize(),"
"TypeMappedAnnotation.java:650"$1$0$0$2$44$"				annotation.getAggregateIndex(), logger);"
"TypeMappedAnnotation.java:651"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:652"$0$0$0$0$0$""
"TypeMappedAnnotation.java:653"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:654"$0$0$0$6$72$"	static <A extends Annotation> TypeMappedAnnotation<A> createIfPossible("
"TypeMappedAnnotation.java:655"$0$0$0$7$81$"			AnnotationTypeMapping mapping, @Nullable Object source, Annotation annotation,"
"TypeMappedAnnotation.java:656"$0$0$0$5$59$"			int aggregateIndex, IntrospectionFailureLogger logger) {"
"TypeMappedAnnotation.java:657"$0$0$0$0$0$""
"TypeMappedAnnotation.java:658"$0$0$0$4$54$"		return createIfPossible(mapping, source, annotation,"
"TypeMappedAnnotation.java:659"$0$0$0$3$59$"				ReflectionUtils::invokeMethod, aggregateIndex, logger);"
"TypeMappedAnnotation.java:660"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:661"$0$0$0$0$0$""
"TypeMappedAnnotation.java:662"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:663"$0$0$0$7$80$"	private static <A extends Annotation> TypeMappedAnnotation<A> createIfPossible("
"TypeMappedAnnotation.java:664"$0$0$0$8$90$"			AnnotationTypeMapping mapping, @Nullable Object source, @Nullable Object rootAttribute,"
"TypeMappedAnnotation.java:665"$0$0$0$7$90$"			ValueExtractor valueExtractor, int aggregateIndex, IntrospectionFailureLogger logger) {"
"TypeMappedAnnotation.java:666"$0$0$0$0$0$""
"TypeMappedAnnotation.java:667"$0$0$0$2$7$"		try {"
"TypeMappedAnnotation.java:668"$0$0$0$6$74$"			return new TypeMappedAnnotation<>(mapping, null, source, rootAttribute,"
"TypeMappedAnnotation.java:669"$0$0$0$2$37$"					valueExtractor, aggregateIndex);"
"TypeMappedAnnotation.java:670"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:671"$0$0$0$4$24$"		catch (Exception ex) {"
"TypeMappedAnnotation.java:672"$0$0$0$1$63$"			AnnotationUtils.rethrowAnnotationConfigurationException(ex);"
"TypeMappedAnnotation.java:673"$0$0$0$3$28$"			if (logger.isEnabled()) {"
"TypeMappedAnnotation.java:674"$2$0$0$4$56$"				String type = mapping.getAnnotationType().getName();"
"TypeMappedAnnotation.java:675"$1$0$0$12$70$"				String item = (mapping.getDistance() == 0 ? ""annotation "" + type :"
"TypeMappedAnnotation.java:676"$3$0$0$10$94$"						""meta-annotation "" + type + "" from "" + mapping.getRoot().getAnnotationType().getName());"
"TypeMappedAnnotation.java:677"$0$0$0$8$59$"				logger.log(""Failed to introspect "" + item, source, ex);"
"TypeMappedAnnotation.java:678"$0$0$0$1$4$"			}"
"TypeMappedAnnotation.java:679"$0$0$0$2$15$"			return null;"
"TypeMappedAnnotation.java:680"$0$0$0$1$3$"		}"
"TypeMappedAnnotation.java:681"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:682"$0$0$0$0$0$""
"TypeMappedAnnotation.java:683"$0$0$0$1$31$"	@SuppressWarnings(""unchecked"")"
"TypeMappedAnnotation.java:684"$0$0$0$1$10$"	@Nullable"
"TypeMappedAnnotation.java:685"$0$0$0$8$71$"	static Object extractFromMap(Method attribute, @Nullable Object map) {"
"TypeMappedAnnotation.java:686"$2$0$0$10$80$"		return (map != null ? ((Map<String, ?>) map).get(attribute.getName()) : null);"
"TypeMappedAnnotation.java:687"$0$0$0$1$2$"	}"
"TypeMappedAnnotation.java:688"$0$0$0$0$0$""
"TypeMappedAnnotation.java:689"$0$0$0$1$1$"}"
"SynthesizingMethodParameter.java:1"$0$0$0$1$2$"/*"
"SynthesizingMethodParameter.java:2"$0$0$0$8$54$" * Copyright 2002-2019 the original author or authors."
"SynthesizingMethodParameter.java:3"$0$0$0$1$2$" *"
"SynthesizingMethodParameter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"SynthesizingMethodParameter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"SynthesizingMethodParameter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"SynthesizingMethodParameter.java:7"$0$0$0$1$2$" *"
"SynthesizingMethodParameter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"SynthesizingMethodParameter.java:9"$0$0$0$1$2$" *"
"SynthesizingMethodParameter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"SynthesizingMethodParameter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"SynthesizingMethodParameter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"SynthesizingMethodParameter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"SynthesizingMethodParameter.java:14"$0$0$0$5$33$" * limitations under the License."
"SynthesizingMethodParameter.java:15"$0$0$0$1$3$" */"
"SynthesizingMethodParameter.java:16"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:17"$0$0$0$2$44$"package org.springframework.core.annotation;"
"SynthesizingMethodParameter.java:18"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:19"$0$0$0$2$39$"import java.lang.annotation.Annotation;"
"SynthesizingMethodParameter.java:20"$0$0$0$2$37$"import java.lang.reflect.Constructor;"
"SynthesizingMethodParameter.java:21"$0$0$0$2$36$"import java.lang.reflect.Executable;"
"SynthesizingMethodParameter.java:22"$0$0$0$2$32$"import java.lang.reflect.Method;"
"SynthesizingMethodParameter.java:23"$0$0$0$2$35$"import java.lang.reflect.Parameter;"
"SynthesizingMethodParameter.java:24"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:25"$0$0$0$2$48$"import org.springframework.core.MethodParameter;"
"SynthesizingMethodParameter.java:26"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:27"$0$0$0$1$3$"/**"
"SynthesizingMethodParameter.java:28"$0$0$0$9$71$" * A {@link MethodParameter} variant which synthesizes annotations that"
"SynthesizingMethodParameter.java:29"$0$0$0$8$60$" * declare attribute aliases via {@link AliasFor @AliasFor}."
"SynthesizingMethodParameter.java:30"$0$0$0$1$2$" *"
"SynthesizingMethodParameter.java:31"$0$0$0$4$26$" * @author Juergen Hoeller"
"SynthesizingMethodParameter.java:32"$0$0$0$4$22$" * @author Sam Brannen"
"SynthesizingMethodParameter.java:33"$0$0$0$3$13$" * @since 4.2"
"SynthesizingMethodParameter.java:34"$0$0$0$3$44$" * @see AnnotationUtils#synthesizeAnnotation"
"SynthesizingMethodParameter.java:35"$0$0$0$3$49$" * @see AnnotationUtils#synthesizeAnnotationArray"
"SynthesizingMethodParameter.java:36"$0$0$0$1$3$" */"
"SynthesizingMethodParameter.java:37"$0$0$0$6$66$"public class SynthesizingMethodParameter extends MethodParameter {"
"SynthesizingMethodParameter.java:38"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:39"$0$0$0$1$4$"	/**"
"SynthesizingMethodParameter.java:40"$0$0$0$10$74$"	 * Create a new {@code SynthesizingMethodParameter} for the given method,"
"SynthesizingMethodParameter.java:41"$0$0$0$5$25$"	 * with nesting level 1."
"SynthesizingMethodParameter.java:42"$0$0$0$10$55$"	 * @param method the Method to specify a parameter for"
"SynthesizingMethodParameter.java:43"$0$0$0$12$71$"	 * @param parameterIndex the index of the parameter: -1 for the method"
"SynthesizingMethodParameter.java:44"$0$0$0$14$74$"	 * return type; 0 for the first method parameter; 1 for the second method"
"SynthesizingMethodParameter.java:45"$0$0$0$3$19$"	 * parameter, etc."
"SynthesizingMethodParameter.java:46"$0$0$0$1$4$"	 */"
"SynthesizingMethodParameter.java:47"$0$0$0$6$72$"	public SynthesizingMethodParameter(Method method, int parameterIndex) {"
"SynthesizingMethodParameter.java:48"$0$0$0$2$32$"		super(method, parameterIndex);"
"SynthesizingMethodParameter.java:49"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:50"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:51"$0$0$0$1$4$"	/**"
"SynthesizingMethodParameter.java:52"$0$0$0$10$74$"	 * Create a new {@code SynthesizingMethodParameter} for the given method."
"SynthesizingMethodParameter.java:53"$0$0$0$10$55$"	 * @param method the Method to specify a parameter for"
"SynthesizingMethodParameter.java:54"$0$0$0$12$71$"	 * @param parameterIndex the index of the parameter: -1 for the method"
"SynthesizingMethodParameter.java:55"$0$0$0$14$74$"	 * return type; 0 for the first method parameter; 1 for the second method"
"SynthesizingMethodParameter.java:56"$0$0$0$3$19$"	 * parameter, etc."
"SynthesizingMethodParameter.java:57"$1$0$0$10$60$"	 * @param nestingLevel the nesting level of the target type"
"SynthesizingMethodParameter.java:58"$0$0$0$15$71$"	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the"
"SynthesizingMethodParameter.java:59"$0$0$0$13$73$"	 * nested List, whereas 2 would indicate the element of the nested List)"
"SynthesizingMethodParameter.java:60"$0$0$0$1$4$"	 */"
"SynthesizingMethodParameter.java:61"$0$0$0$8$90$"	public SynthesizingMethodParameter(Method method, int parameterIndex, int nestingLevel) {"
"SynthesizingMethodParameter.java:62"$0$0$0$3$46$"		super(method, parameterIndex, nestingLevel);"
"SynthesizingMethodParameter.java:63"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:64"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:65"$0$0$0$1$4$"	/**"
"SynthesizingMethodParameter.java:66"$0$0$0$10$79$"	 * Create a new {@code SynthesizingMethodParameter} for the given constructor,"
"SynthesizingMethodParameter.java:67"$0$0$0$5$25$"	 * with nesting level 1."
"SynthesizingMethodParameter.java:68"$0$0$0$10$65$"	 * @param constructor the Constructor to specify a parameter for"
"SynthesizingMethodParameter.java:69"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"SynthesizingMethodParameter.java:70"$0$0$0$1$4$"	 */"
"SynthesizingMethodParameter.java:71"$0$0$0$6$85$"	public SynthesizingMethodParameter(Constructor<?> constructor, int parameterIndex) {"
"SynthesizingMethodParameter.java:72"$0$0$0$2$37$"		super(constructor, parameterIndex);"
"SynthesizingMethodParameter.java:73"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:74"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:75"$0$0$0$1$4$"	/**"
"SynthesizingMethodParameter.java:76"$0$0$0$10$79$"	 * Create a new {@code SynthesizingMethodParameter} for the given constructor."
"SynthesizingMethodParameter.java:77"$0$0$0$10$65$"	 * @param constructor the Constructor to specify a parameter for"
"SynthesizingMethodParameter.java:78"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"SynthesizingMethodParameter.java:79"$1$0$0$10$60$"	 * @param nestingLevel the nesting level of the target type"
"SynthesizingMethodParameter.java:80"$0$0$0$15$71$"	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the"
"SynthesizingMethodParameter.java:81"$0$0$0$13$73$"	 * nested List, whereas 2 would indicate the element of the nested List)"
"SynthesizingMethodParameter.java:82"$0$0$0$1$4$"	 */"
"SynthesizingMethodParameter.java:83"$0$0$0$8$103$"	public SynthesizingMethodParameter(Constructor<?> constructor, int parameterIndex, int nestingLevel) {"
"SynthesizingMethodParameter.java:84"$0$0$0$3$51$"		super(constructor, parameterIndex, nestingLevel);"
"SynthesizingMethodParameter.java:85"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:86"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:87"$0$0$0$1$4$"	/**"
"SynthesizingMethodParameter.java:88"$0$0$0$9$85$"	 * Copy constructor, resulting in an independent {@code SynthesizingMethodParameter}"
"SynthesizingMethodParameter.java:89"$0$0$0$15$79$"	 * based on the same metadata and cache state that the original object was in."
"SynthesizingMethodParameter.java:90"$0$0$0$10$80$"	 * @param original the original SynthesizingMethodParameter object to copy from"
"SynthesizingMethodParameter.java:91"$0$0$0$1$4$"	 */"
"SynthesizingMethodParameter.java:92"$0$0$0$4$78$"	protected SynthesizingMethodParameter(SynthesizingMethodParameter original) {"
"SynthesizingMethodParameter.java:93"$0$0$0$1$18$"		super(original);"
"SynthesizingMethodParameter.java:94"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:95"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:96"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:97"$0$0$0$1$10$"	@Override"
"SynthesizingMethodParameter.java:98"$0$0$0$8$67$"	protected <A extends Annotation> A adaptAnnotation(A annotation) {"
"SynthesizingMethodParameter.java:99"$1$0$0$3$81$"		return AnnotationUtils.synthesizeAnnotation(annotation, getAnnotatedElement());"
"SynthesizingMethodParameter.java:100"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:101"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:102"$0$0$0$1$10$"	@Override"
"SynthesizingMethodParameter.java:103"$0$0$0$5$72$"	protected Annotation[] adaptAnnotationArray(Annotation[] annotations) {"
"SynthesizingMethodParameter.java:104"$1$0$0$3$87$"		return AnnotationUtils.synthesizeAnnotationArray(annotations, getAnnotatedElement());"
"SynthesizingMethodParameter.java:105"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:106"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:107"$0$0$0$1$10$"	@Override"
"SynthesizingMethodParameter.java:108"$0$0$0$4$45$"	public SynthesizingMethodParameter clone() {"
"SynthesizingMethodParameter.java:109"$0$0$0$3$47$"		return new SynthesizingMethodParameter(this);"
"SynthesizingMethodParameter.java:110"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:111"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:112"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:113"$0$0$0$1$4$"	/**"
"SynthesizingMethodParameter.java:114"$0$0$0$11$81$"	 * Create a new SynthesizingMethodParameter for the given method or constructor."
"SynthesizingMethodParameter.java:115"$0$0$0$11$65$"	 * <p>This is a convenience factory method for scenarios where a"
"SynthesizingMethodParameter.java:116"$0$0$0$11$68$"	 * Method or Constructor reference is treated in a generic fashion."
"SynthesizingMethodParameter.java:117"$0$0$0$12$74$"	 * @param executable the Method or Constructor to specify a parameter for"
"SynthesizingMethodParameter.java:118"$0$0$0$8$52$"	 * @param parameterIndex the index of the parameter"
"SynthesizingMethodParameter.java:119"$0$0$0$6$66$"	 * @return the corresponding SynthesizingMethodParameter instance"
"SynthesizingMethodParameter.java:120"$0$0$0$3$14$"	 * @since 5.0"
"SynthesizingMethodParameter.java:121"$0$0$0$1$4$"	 */"
"SynthesizingMethodParameter.java:122"$0$0$0$8$101$"	public static SynthesizingMethodParameter forExecutable(Executable executable, int parameterIndex) {"
"SynthesizingMethodParameter.java:123"$0$0$0$5$37$"		if (executable instanceof Method) {"
"SynthesizingMethodParameter.java:124"$0$0$0$5$79$"			return new SynthesizingMethodParameter((Method) executable, parameterIndex);"
"SynthesizingMethodParameter.java:125"$0$0$0$1$3$"		}"
"SynthesizingMethodParameter.java:126"$0$0$0$6$47$"		else if (executable instanceof Constructor) {"
"SynthesizingMethodParameter.java:127"$0$0$0$5$87$"			return new SynthesizingMethodParameter((Constructor<?>) executable, parameterIndex);"
"SynthesizingMethodParameter.java:128"$0$0$0$1$3$"		}"
"SynthesizingMethodParameter.java:129"$0$0$0$2$8$"		else {"
"SynthesizingMethodParameter.java:130"$0$0$0$8$81$"			throw new IllegalArgumentException(""Not a Method/Constructor: "" + executable);"
"SynthesizingMethodParameter.java:131"$0$0$0$1$3$"		}"
"SynthesizingMethodParameter.java:132"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:133"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:134"$0$0$0$1$4$"	/**"
"SynthesizingMethodParameter.java:135"$0$0$0$10$80$"	 * Create a new SynthesizingMethodParameter for the given parameter descriptor."
"SynthesizingMethodParameter.java:136"$0$0$0$11$65$"	 * <p>This is a convenience factory method for scenarios where a"
"SynthesizingMethodParameter.java:137"$0$0$0$9$61$"	 * Java 8 {@link Parameter} descriptor is already available."
"SynthesizingMethodParameter.java:138"$0$0$0$6$45$"	 * @param parameter the parameter descriptor"
"SynthesizingMethodParameter.java:139"$0$0$0$6$66$"	 * @return the corresponding SynthesizingMethodParameter instance"
"SynthesizingMethodParameter.java:140"$0$0$0$3$14$"	 * @since 5.0"
"SynthesizingMethodParameter.java:141"$0$0$0$1$4$"	 */"
"SynthesizingMethodParameter.java:142"$0$0$0$6$78$"	public static SynthesizingMethodParameter forParameter(Parameter parameter) {"
"SynthesizingMethodParameter.java:143"$1$0$0$3$90$"		return forExecutable(parameter.getDeclaringExecutable(), findParameterIndex(parameter));"
"SynthesizingMethodParameter.java:144"$0$0$0$1$2$"	}"
"SynthesizingMethodParameter.java:145"$0$0$0$0$0$""
"SynthesizingMethodParameter.java:146"$0$0$0$1$1$"}"
"DigestUtils.java:1"$0$0$0$1$2$"/*"
"DigestUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"DigestUtils.java:3"$0$0$0$1$2$" *"
"DigestUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"DigestUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"DigestUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"DigestUtils.java:7"$0$0$0$1$2$" *"
"DigestUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"DigestUtils.java:9"$0$0$0$1$2$" *"
"DigestUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"DigestUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"DigestUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"DigestUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"DigestUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"DigestUtils.java:15"$0$0$0$1$3$" */"
"DigestUtils.java:16"$0$0$0$0$0$""
"DigestUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"DigestUtils.java:18"$0$0$0$0$0$""
"DigestUtils.java:19"$0$0$0$2$27$"import java.io.IOException;"
"DigestUtils.java:20"$0$0$0$2$27$"import java.io.InputStream;"
"DigestUtils.java:21"$0$0$0$2$35$"import java.security.MessageDigest;"
"DigestUtils.java:22"$0$0$0$2$46$"import java.security.NoSuchAlgorithmException;"
"DigestUtils.java:23"$0$0$0$0$0$""
"DigestUtils.java:24"$0$0$0$1$3$"/**"
"DigestUtils.java:25"$0$0$0$6$49$" * Miscellaneous methods for calculating digests."
"DigestUtils.java:26"$0$0$0$1$2$" *"
"DigestUtils.java:27"$0$0$0$9$60$" * <p>Mainly for internal use within the framework; consider"
"DigestUtils.java:28"$0$0$0$5$71$" * <a href=""https://commons.apache.org/codec/"">Apache Commons Codec</a>"
"DigestUtils.java:29"$0$0$0$9$54$" * for a more comprehensive suite of digest utilities."
"DigestUtils.java:30"$0$0$0$1$2$" *"
"DigestUtils.java:31"$0$0$0$4$24$" * @author Arjen Poutsma"
"DigestUtils.java:32"$0$0$0$4$26$" * @author Juergen Hoeller"
"DigestUtils.java:33"$0$0$0$4$24$" * @author Craig Andrews"
"DigestUtils.java:34"$0$0$0$3$13$" * @since 3.0"
"DigestUtils.java:35"$0$0$0$1$3$" */"
"DigestUtils.java:36"$0$0$0$5$35$"public abstract class DigestUtils {"
"DigestUtils.java:37"$0$0$0$0$0$""
"DigestUtils.java:38"$0$0$0$7$56$"	private static final String MD5_ALGORITHM_NAME = ""MD5"";"
"DigestUtils.java:39"$0$0$0$0$0$""
"DigestUtils.java:40"$0$0$0$6$40$"	private static final char[] HEX_CHARS ="
"DigestUtils.java:41"$0$0$0$16$84$"			{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};"
"DigestUtils.java:42"$0$0$0$0$0$""
"DigestUtils.java:43"$0$0$0$0$0$""
"DigestUtils.java:44"$0$0$0$1$4$"	/**"
"DigestUtils.java:45"$0$0$0$9$48$"	 * Calculate the MD5 digest of the given bytes."
"DigestUtils.java:46"$0$0$0$10$55$"	 * @param bytes the bytes to calculate the digest over"
"DigestUtils.java:47"$0$0$0$4$22$"	 * @return the digest"
"DigestUtils.java:48"$0$0$0$1$4$"	 */"
"DigestUtils.java:49"$0$0$0$6$47$"	public static byte[] md5Digest(byte[] bytes) {"
"DigestUtils.java:50"$0$0$0$3$43$"		return digest(MD5_ALGORITHM_NAME, bytes);"
"DigestUtils.java:51"$0$0$0$1$2$"	}"
"DigestUtils.java:52"$0$0$0$0$0$""
"DigestUtils.java:53"$0$0$0$1$4$"	/**"
"DigestUtils.java:54"$0$0$0$9$49$"	 * Calculate the MD5 digest of the given stream."
"DigestUtils.java:55"$0$0$0$9$68$"	 * <p>This method does <strong>not</strong> close the input stream."
"DigestUtils.java:56"$0$0$0$10$67$"	 * @param inputStream the InputStream to calculate the digest over"
"DigestUtils.java:57"$0$0$0$4$22$"	 * @return the digest"
"DigestUtils.java:58"$0$0$0$3$14$"	 * @since 4.2"
"DigestUtils.java:59"$0$0$0$1$4$"	 */"
"DigestUtils.java:60"$0$0$0$8$77$"	public static byte[] md5Digest(InputStream inputStream) throws IOException {"
"DigestUtils.java:61"$0$0$0$3$49$"		return digest(MD5_ALGORITHM_NAME, inputStream);"
"DigestUtils.java:62"$0$0$0$1$2$"	}"
"DigestUtils.java:63"$0$0$0$0$0$""
"DigestUtils.java:64"$0$0$0$1$4$"	/**"
"DigestUtils.java:65"$0$0$0$14$84$"	 * Return a hexadecimal string representation of the MD5 digest of the given bytes."
"DigestUtils.java:66"$0$0$0$10$55$"	 * @param bytes the bytes to calculate the digest over"
"DigestUtils.java:67"$0$0$0$6$39$"	 * @return a hexadecimal digest string"
"DigestUtils.java:68"$0$0$0$1$4$"	 */"
"DigestUtils.java:69"$0$0$0$6$52$"	public static String md5DigestAsHex(byte[] bytes) {"
"DigestUtils.java:70"$0$0$0$3$54$"		return digestAsHexString(MD5_ALGORITHM_NAME, bytes);"
"DigestUtils.java:71"$0$0$0$1$2$"	}"
"DigestUtils.java:72"$0$0$0$0$0$""
"DigestUtils.java:73"$0$0$0$1$4$"	/**"
"DigestUtils.java:74"$0$0$0$14$85$"	 * Return a hexadecimal string representation of the MD5 digest of the given stream."
"DigestUtils.java:75"$0$0$0$9$68$"	 * <p>This method does <strong>not</strong> close the input stream."
"DigestUtils.java:76"$0$0$0$10$67$"	 * @param inputStream the InputStream to calculate the digest over"
"DigestUtils.java:77"$0$0$0$6$39$"	 * @return a hexadecimal digest string"
"DigestUtils.java:78"$0$0$0$3$14$"	 * @since 4.2"
"DigestUtils.java:79"$0$0$0$1$4$"	 */"
"DigestUtils.java:80"$0$0$0$8$82$"	public static String md5DigestAsHex(InputStream inputStream) throws IOException {"
"DigestUtils.java:81"$0$0$0$3$60$"		return digestAsHexString(MD5_ALGORITHM_NAME, inputStream);"
"DigestUtils.java:82"$0$0$0$1$2$"	}"
"DigestUtils.java:83"$0$0$0$0$0$""
"DigestUtils.java:84"$0$0$0$1$4$"	/**"
"DigestUtils.java:85"$0$0$0$13$77$"	 * Append a hexadecimal string representation of the MD5 digest of the given"
"DigestUtils.java:86"$0$0$0$7$45$"	 * bytes to the given {@link StringBuilder}."
"DigestUtils.java:87"$0$0$0$10$55$"	 * @param bytes the bytes to calculate the digest over"
"DigestUtils.java:88"$0$0$0$11$61$"	 * @param builder the string builder to append the digest to"
"DigestUtils.java:89"$0$0$0$6$36$"	 * @return the given string builder"
"DigestUtils.java:90"$0$0$0$1$4$"	 */"
"DigestUtils.java:91"$0$0$0$8$88$"	public static StringBuilder appendMd5DigestAsHex(byte[] bytes, StringBuilder builder) {"
"DigestUtils.java:92"$0$0$0$4$63$"		return appendDigestAsHex(MD5_ALGORITHM_NAME, bytes, builder);"
"DigestUtils.java:93"$0$0$0$1$2$"	}"
"DigestUtils.java:94"$0$0$0$0$0$""
"DigestUtils.java:95"$0$0$0$1$4$"	/**"
"DigestUtils.java:96"$0$0$0$13$77$"	 * Append a hexadecimal string representation of the MD5 digest of the given"
"DigestUtils.java:97"$0$0$0$7$51$"	 * inputStream to the given {@link StringBuilder}."
"DigestUtils.java:98"$0$0$0$9$68$"	 * <p>This method does <strong>not</strong> close the input stream."
"DigestUtils.java:99"$0$0$0$10$67$"	 * @param inputStream the inputStream to calculate the digest over"
"DigestUtils.java:100"$0$0$0$11$61$"	 * @param builder the string builder to append the digest to"
"DigestUtils.java:101"$0$0$0$6$36$"	 * @return the given string builder"
"DigestUtils.java:102"$0$0$0$3$14$"	 * @since 4.2"
"DigestUtils.java:103"$0$0$0$1$4$"	 */"
"DigestUtils.java:104"$0$0$0$10$118$"	public static StringBuilder appendMd5DigestAsHex(InputStream inputStream, StringBuilder builder) throws IOException {"
"DigestUtils.java:105"$0$0$0$4$69$"		return appendDigestAsHex(MD5_ALGORITHM_NAME, inputStream, builder);"
"DigestUtils.java:106"$0$0$0$1$2$"	}"
"DigestUtils.java:107"$0$0$0$0$0$""
"DigestUtils.java:108"$0$0$0$0$0$""
"DigestUtils.java:109"$0$0$0$1$4$"	/**"
"DigestUtils.java:110"$0$0$0$10$64$"	 * Create a new {@link MessageDigest} with the given algorithm."
"DigestUtils.java:111"$0$0$0$8$66$"	 * <p>Necessary because {@code MessageDigest} is not thread-safe."
"DigestUtils.java:112"$0$0$0$1$4$"	 */"
"DigestUtils.java:113"$1$0$0$6$59$"	private static MessageDigest getDigest(String algorithm) {"
"DigestUtils.java:114"$0$0$0$2$7$"		try {"
"DigestUtils.java:115"$1$0$0$2$47$"			return MessageDigest.getInstance(algorithm);"
"DigestUtils.java:116"$0$0$0$1$3$"		}"
"DigestUtils.java:117"$0$0$0$4$39$"		catch (NoSuchAlgorithmException ex) {"
"DigestUtils.java:118"$0$0$0$14$108$"			throw new IllegalStateException(""Could not find MessageDigest with algorithm \"""" + algorithm + ""\"""", ex);"
"DigestUtils.java:119"$0$0$0$1$3$"		}"
"DigestUtils.java:120"$0$0$0$1$2$"	}"
"DigestUtils.java:121"$0$0$0$0$0$""
"DigestUtils.java:122"$0$0$0$8$63$"	private static byte[] digest(String algorithm, byte[] bytes) {"
"DigestUtils.java:123"$1$0$0$2$44$"		return getDigest(algorithm).digest(bytes);"
"DigestUtils.java:124"$0$0$0$1$2$"	}"
"DigestUtils.java:125"$0$0$0$0$0$""
"DigestUtils.java:126"$0$0$0$10$93$"	private static byte[] digest(String algorithm, InputStream inputStream) throws IOException {"
"DigestUtils.java:127"$1$0$0$4$53$"		MessageDigest messageDigest = getDigest(algorithm);"
"DigestUtils.java:128"$0$0$0$4$61$"		if (inputStream instanceof UpdateMessageDigestInputStream){"
"DigestUtils.java:129"$0$0$0$2$85$"			((UpdateMessageDigestInputStream) inputStream).updateMessageDigest(messageDigest);"
"DigestUtils.java:130"$0$0$0$2$33$"			return messageDigest.digest();"
"DigestUtils.java:131"$0$0$0$1$3$"		}"
"DigestUtils.java:132"$0$0$0$2$8$"		else {"
"DigestUtils.java:133"$0$0$0$6$59$"			final byte[] buffer = new byte[StreamUtils.BUFFER_SIZE];"
"DigestUtils.java:134"$0$0$0$4$22$"			int bytesRead = -1;"
"DigestUtils.java:135"$0$0$0$7$57$"			while ((bytesRead = inputStream.read(buffer)) != -1) {"
"DigestUtils.java:136"$0$0$0$3$47$"				messageDigest.update(buffer, 0, bytesRead);"
"DigestUtils.java:137"$0$0$0$1$4$"			}"
"DigestUtils.java:138"$0$0$0$2$33$"			return messageDigest.digest();"
"DigestUtils.java:139"$0$0$0$1$3$"		}"
"DigestUtils.java:140"$0$0$0$1$2$"	}"
"DigestUtils.java:141"$0$0$0$0$0$""
"DigestUtils.java:142"$0$0$0$8$74$"	private static String digestAsHexString(String algorithm, byte[] bytes) {"
"DigestUtils.java:143"$0$0$0$5$56$"		char[] hexDigest = digestAsHexChars(algorithm, bytes);"
"DigestUtils.java:144"$0$0$0$3$31$"		return new String(hexDigest);"
"DigestUtils.java:145"$0$0$0$1$2$"	}"
"DigestUtils.java:146"$0$0$0$0$0$""
"DigestUtils.java:147"$0$0$0$10$104$"	private static String digestAsHexString(String algorithm, InputStream inputStream) throws IOException {"
"DigestUtils.java:148"$0$0$0$5$62$"		char[] hexDigest = digestAsHexChars(algorithm, inputStream);"
"DigestUtils.java:149"$0$0$0$3$31$"		return new String(hexDigest);"
"DigestUtils.java:150"$0$0$0$1$2$"	}"
"DigestUtils.java:151"$0$0$0$0$0$""
"DigestUtils.java:152"$0$0$0$10$104$"	private static StringBuilder appendDigestAsHex(String algorithm, byte[] bytes, StringBuilder builder) {"
"DigestUtils.java:153"$0$0$0$5$56$"		char[] hexDigest = digestAsHexChars(algorithm, bytes);"
"DigestUtils.java:154"$0$0$0$2$35$"		return builder.append(hexDigest);"
"DigestUtils.java:155"$0$0$0$1$2$"	}"
"DigestUtils.java:156"$0$0$0$0$0$""
"DigestUtils.java:157"$0$0$0$9$113$"	private static StringBuilder appendDigestAsHex(String algorithm, InputStream inputStream, StringBuilder builder)"
"DigestUtils.java:158"$0$0$0$3$23$"			throws IOException {"
"DigestUtils.java:159"$0$0$0$0$0$""
"DigestUtils.java:160"$0$0$0$5$62$"		char[] hexDigest = digestAsHexChars(algorithm, inputStream);"
"DigestUtils.java:161"$0$0$0$2$35$"		return builder.append(hexDigest);"
"DigestUtils.java:162"$0$0$0$1$2$"	}"
"DigestUtils.java:163"$0$0$0$0$0$""
"DigestUtils.java:164"$0$0$0$8$73$"	private static char[] digestAsHexChars(String algorithm, byte[] bytes) {"
"DigestUtils.java:165"$0$0$0$5$43$"		byte[] digest = digest(algorithm, bytes);"
"DigestUtils.java:166"$0$0$0$2$27$"		return encodeHex(digest);"
"DigestUtils.java:167"$0$0$0$1$2$"	}"
"DigestUtils.java:168"$0$0$0$0$0$""
"DigestUtils.java:169"$0$0$0$10$103$"	private static char[] digestAsHexChars(String algorithm, InputStream inputStream) throws IOException {"
"DigestUtils.java:170"$0$0$0$5$49$"		byte[] digest = digest(algorithm, inputStream);"
"DigestUtils.java:171"$0$0$0$2$27$"		return encodeHex(digest);"
"DigestUtils.java:172"$0$0$0$1$2$"	}"
"DigestUtils.java:173"$0$0$0$0$0$""
"DigestUtils.java:174"$0$0$0$6$48$"	private static char[] encodeHex(byte[] bytes) {"
"DigestUtils.java:175"$0$0$0$5$30$"		char[] chars = new char[32];"
"DigestUtils.java:176"$0$0$0$14$48$"		for (int i = 0; i < chars.length; i = i + 2) {"
"DigestUtils.java:177"$0$0$0$6$25$"			byte b = bytes[i / 2];"
"DigestUtils.java:178"$0$0$0$7$43$"			chars[i] = HEX_CHARS[(b >>> 0x4) & 0xf];"
"DigestUtils.java:179"$0$0$0$7$37$"			chars[i + 1] = HEX_CHARS[b & 0xf];"
"DigestUtils.java:180"$0$0$0$1$3$"		}"
"DigestUtils.java:181"$0$0$0$2$15$"		return chars;"
"DigestUtils.java:182"$0$0$0$1$2$"	}"
"DigestUtils.java:183"$0$0$0$0$0$""
"DigestUtils.java:184"$0$0$0$1$1$"}"
"InstanceFilter.java:1"$0$0$0$1$2$"/*"
"InstanceFilter.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"InstanceFilter.java:3"$0$0$0$1$2$" *"
"InstanceFilter.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"InstanceFilter.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"InstanceFilter.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"InstanceFilter.java:7"$0$0$0$1$2$" *"
"InstanceFilter.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"InstanceFilter.java:9"$0$0$0$1$2$" *"
"InstanceFilter.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"InstanceFilter.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"InstanceFilter.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"InstanceFilter.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"InstanceFilter.java:14"$0$0$0$5$33$" * limitations under the License."
"InstanceFilter.java:15"$0$0$0$1$3$" */"
"InstanceFilter.java:16"$0$0$0$0$0$""
"InstanceFilter.java:17"$0$0$0$2$33$"package org.springframework.util;"
"InstanceFilter.java:18"$0$0$0$0$0$""
"InstanceFilter.java:19"$0$0$0$2$28$"import java.util.Collection;"
"InstanceFilter.java:20"$0$0$0$2$29$"import java.util.Collections;"
"InstanceFilter.java:21"$0$0$0$0$0$""
"InstanceFilter.java:22"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"InstanceFilter.java:23"$0$0$0$0$0$""
"InstanceFilter.java:24"$0$0$0$1$3$"/**"
"InstanceFilter.java:25"$0$0$0$14$74$" * A simple instance filter that checks if a given instance match based on"
"InstanceFilter.java:26"$0$0$0$8$49$" * a collection of includes and excludes element."
"InstanceFilter.java:27"$0$0$0$1$2$" *"
"InstanceFilter.java:28"$0$0$0$11$79$" * <p>Subclasses may want to override {@link #match(Object, Object)} to provide"
"InstanceFilter.java:29"$0$0$0$5$31$" * a custom matching algorithm."
"InstanceFilter.java:30"$0$0$0$1$2$" *"
"InstanceFilter.java:31"$0$0$0$4$26$" * @author Stephane Nicoll"
"InstanceFilter.java:32"$0$0$0$3$13$" * @since 4.1"
"InstanceFilter.java:33"$0$0$0$6$31$" * @param <T> the instance type"
"InstanceFilter.java:34"$0$0$0$1$3$" */"
"InstanceFilter.java:35"$0$0$0$4$32$"public class InstanceFilter<T> {"
"InstanceFilter.java:36"$0$0$0$0$0$""
"InstanceFilter.java:37"$0$0$0$6$48$"	private final Collection<? extends T> includes;"
"InstanceFilter.java:38"$0$0$0$0$0$""
"InstanceFilter.java:39"$0$0$0$6$48$"	private final Collection<? extends T> excludes;"
"InstanceFilter.java:40"$0$0$0$0$0$""
"InstanceFilter.java:41"$0$0$0$4$36$"	private final boolean matchIfEmpty;"
"InstanceFilter.java:42"$0$0$0$0$0$""
"InstanceFilter.java:43"$0$0$0$0$0$""
"InstanceFilter.java:44"$0$0$0$1$4$"	/**"
"InstanceFilter.java:45"$0$0$0$9$65$"	 * Create a new instance based on includes/excludes collections."
"InstanceFilter.java:46"$0$0$0$16$84$"	 * <p>A particular element will match if it ""matches"" the one of the element in the"
"InstanceFilter.java:47"$0$0$0$15$78$"	 * includes list and  does not match one of the element in the excludes list."
"InstanceFilter.java:48"$0$0$0$13$85$"	 * <p>Subclasses may redefine what matching means. By default, an element match with"
"InstanceFilter.java:49"$0$0$0$10$70$"	 * another if it is equals according to {@link Object#equals(Object)}"
"InstanceFilter.java:50"$0$0$0$10$69$"	 * <p>If both collections are empty, {@code matchIfEmpty} defines if"
"InstanceFilter.java:51"$0$0$0$6$30$"	 * an element matches or not."
"InstanceFilter.java:52"$0$0$0$7$46$"	 * @param includes the collection of includes"
"InstanceFilter.java:53"$0$0$0$7$46$"	 * @param excludes the collection of excludes"
"InstanceFilter.java:54"$0$0$0$13$81$"	 * @param matchIfEmpty the matching result if both the includes and the excludes"
"InstanceFilter.java:55"$0$0$0$4$25$"	 * collections are empty"
"InstanceFilter.java:56"$0$0$0$1$4$"	 */"
"InstanceFilter.java:57"$0$0$0$6$66$"	public InstanceFilter(@Nullable Collection<? extends T> includes,"
"InstanceFilter.java:58"$0$0$0$8$70$"			@Nullable Collection<? extends T> excludes, boolean matchIfEmpty) {"
"InstanceFilter.java:59"$0$0$0$0$0$""
"InstanceFilter.java:60"$0$0$0$9$74$"		this.includes = (includes != null ? includes : Collections.emptyList());"
"InstanceFilter.java:61"$0$0$0$9$74$"		this.excludes = (excludes != null ? excludes : Collections.emptyList());"
"InstanceFilter.java:62"$0$0$0$3$35$"		this.matchIfEmpty = matchIfEmpty;"
"InstanceFilter.java:63"$0$0$0$1$2$"	}"
"InstanceFilter.java:64"$0$0$0$0$0$""
"InstanceFilter.java:65"$0$0$0$0$0$""
"InstanceFilter.java:66"$0$0$0$1$4$"	/**"
"InstanceFilter.java:67"$0$0$0$10$67$"	 * Determine if the specified {code instance} matches this filter."
"InstanceFilter.java:68"$0$0$0$1$4$"	 */"
"InstanceFilter.java:69"$0$0$0$5$35$"	public boolean match(T instance) {"
"InstanceFilter.java:70"$0$0$0$8$65$"		Assert.notNull(instance, ""Instance to match must not be null"");"
"InstanceFilter.java:71"$0$0$0$0$0$""
"InstanceFilter.java:72"$0$0$0$4$49$"		boolean includesSet = !this.includes.isEmpty();"
"InstanceFilter.java:73"$0$0$0$4$49$"		boolean excludesSet = !this.excludes.isEmpty();"
"InstanceFilter.java:74"$0$0$0$5$37$"		if (!includesSet && !excludesSet) {"
"InstanceFilter.java:75"$0$0$0$2$28$"			return this.matchIfEmpty;"
"InstanceFilter.java:76"$0$0$0$1$3$"		}"
"InstanceFilter.java:77"$0$0$0$0$0$""
"InstanceFilter.java:78"$0$0$0$5$57$"		boolean matchIncludes = match(instance, this.includes);"
"InstanceFilter.java:79"$0$0$0$5$57$"		boolean matchExcludes = match(instance, this.excludes);"
"InstanceFilter.java:80"$0$0$0$3$21$"		if (!includesSet) {"
"InstanceFilter.java:81"$0$0$0$2$25$"			return !matchExcludes;"
"InstanceFilter.java:82"$0$0$0$1$3$"		}"
"InstanceFilter.java:83"$0$0$0$3$21$"		if (!excludesSet) {"
"InstanceFilter.java:84"$0$0$0$2$24$"			return matchIncludes;"
"InstanceFilter.java:85"$0$0$0$1$3$"		}"
"InstanceFilter.java:86"$0$0$0$4$41$"		return matchIncludes && !matchExcludes;"
"InstanceFilter.java:87"$0$0$0$1$2$"	}"
"InstanceFilter.java:88"$0$0$0$0$0$""
"InstanceFilter.java:89"$0$0$0$1$4$"	/**"
"InstanceFilter.java:90"$0$0$0$11$63$"	 * Determine if the specified {@code instance} is equal to the"
"InstanceFilter.java:91"$0$0$0$4$32$"	 * specified {@code candidate}."
"InstanceFilter.java:92"$0$0$0$7$42$"	 * @param instance the instance to handle"
"InstanceFilter.java:93"$0$0$0$9$55$"	 * @param candidate a candidate defined by this filter"
"InstanceFilter.java:94"$0$0$0$10$62$"	 * @return {@code true} if the instance matches the candidate"
"InstanceFilter.java:95"$0$0$0$1$4$"	 */"
"InstanceFilter.java:96"$0$0$0$7$51$"	protected boolean match(T instance, T candidate) {"
"InstanceFilter.java:97"$0$0$0$2$36$"		return instance.equals(candidate);"
"InstanceFilter.java:98"$0$0$0$1$2$"	}"
"InstanceFilter.java:99"$0$0$0$0$0$""
"InstanceFilter.java:100"$0$0$0$1$4$"	/**"
"InstanceFilter.java:101"$0$0$0$12$78$"	 * Determine if the specified {@code instance} matches one of the candidates."
"InstanceFilter.java:102"$0$0$0$11$75$"	 * <p>If the candidates collection is {@code null}, returns {@code false}."
"InstanceFilter.java:103"$0$0$0$7$41$"	 * @param instance the instance to check"
"InstanceFilter.java:104"$0$0$0$7$42$"	 * @param candidates a list of candidates"
"InstanceFilter.java:105"$0$0$0$14$83$"	 * @return {@code true} if the instance match or the candidates collection is null"
"InstanceFilter.java:106"$0$0$0$1$4$"	 */"
"InstanceFilter.java:107"$0$0$0$9$74$"	protected boolean match(T instance, Collection<? extends T> candidates) {"
"InstanceFilter.java:108"$0$0$0$6$34$"		for (T candidate : candidates) {"
"InstanceFilter.java:109"$0$0$0$4$36$"			if (match(instance, candidate)) {"
"InstanceFilter.java:110"$0$0$0$2$16$"				return true;"
"InstanceFilter.java:111"$0$0$0$1$4$"			}"
"InstanceFilter.java:112"$0$0$0$1$3$"		}"
"InstanceFilter.java:113"$0$0$0$2$15$"		return false;"
"InstanceFilter.java:114"$0$0$0$1$2$"	}"
"InstanceFilter.java:115"$0$0$0$0$0$""
"InstanceFilter.java:116"$0$0$0$1$10$"	@Override"
"InstanceFilter.java:117"$0$0$0$4$27$"	public String toString() {"
"InstanceFilter.java:118"$2$0$0$5$67$"		StringBuilder sb = new StringBuilder(getClass().getSimpleName());"
"InstanceFilter.java:119"$0$0$0$2$49$"		sb.append("": includes="").append(this.includes);"
"InstanceFilter.java:120"$0$0$0$2$49$"		sb.append("", excludes="").append(this.excludes);"
"InstanceFilter.java:121"$0$0$0$2$57$"		sb.append("", matchIfEmpty="").append(this.matchIfEmpty);"
"InstanceFilter.java:122"$0$0$0$2$23$"		return sb.toString();"
"InstanceFilter.java:123"$0$0$0$1$2$"	}"
"InstanceFilter.java:124"$0$0$0$0$0$""
"InstanceFilter.java:125"$0$0$0$1$1$"}"
"ReactiveAdapterRegistry.java:1"$0$0$0$1$2$"/*"
"ReactiveAdapterRegistry.java:2"$0$0$0$8$54$" * Copyright 2002-2020 the original author or authors."
"ReactiveAdapterRegistry.java:3"$0$0$0$1$2$" *"
"ReactiveAdapterRegistry.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ReactiveAdapterRegistry.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ReactiveAdapterRegistry.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ReactiveAdapterRegistry.java:7"$0$0$0$1$2$" *"
"ReactiveAdapterRegistry.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ReactiveAdapterRegistry.java:9"$0$0$0$1$2$" *"
"ReactiveAdapterRegistry.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ReactiveAdapterRegistry.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ReactiveAdapterRegistry.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ReactiveAdapterRegistry.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ReactiveAdapterRegistry.java:14"$0$0$0$5$33$" * limitations under the License."
"ReactiveAdapterRegistry.java:15"$0$0$0$1$3$" */"
"ReactiveAdapterRegistry.java:16"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:17"$0$0$0$2$33$"package org.springframework.core;"
"ReactiveAdapterRegistry.java:18"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:19"$0$0$0$2$32$"import java.lang.reflect.Method;"
"ReactiveAdapterRegistry.java:20"$0$0$0$2$27$"import java.util.ArrayList;"
"ReactiveAdapterRegistry.java:21"$0$0$0$2$22$"import java.util.List;"
"ReactiveAdapterRegistry.java:22"$0$0$0$2$26$"import java.util.Optional;"
"ReactiveAdapterRegistry.java:23"$0$0$0$2$46$"import java.util.concurrent.CompletableFuture;"
"ReactiveAdapterRegistry.java:24"$0$0$0$2$44$"import java.util.concurrent.CompletionStage;"
"ReactiveAdapterRegistry.java:25"$0$0$0$2$35$"import java.util.function.Function;"
"ReactiveAdapterRegistry.java:26"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:27"$0$0$0$2$41$"import io.reactivex.BackpressureStrategy;"
"ReactiveAdapterRegistry.java:28"$0$0$0$2$29$"import io.reactivex.Flowable;"
"ReactiveAdapterRegistry.java:29"$0$0$0$2$48$"import kotlinx.coroutines.CompletableDeferredKt;"
"ReactiveAdapterRegistry.java:30"$0$0$0$2$35$"import kotlinx.coroutines.Deferred;"
"ReactiveAdapterRegistry.java:31"$0$0$0$2$37$"import org.reactivestreams.Publisher;"
"ReactiveAdapterRegistry.java:32"$0$0$0$2$37$"import reactor.blockhound.BlockHound;"
"ReactiveAdapterRegistry.java:33"$0$0$0$2$60$"import reactor.blockhound.integration.BlockHoundIntegration;"
"ReactiveAdapterRegistry.java:34"$0$0$0$2$35$"import reactor.core.publisher.Flux;"
"ReactiveAdapterRegistry.java:35"$0$0$0$2$35$"import reactor.core.publisher.Mono;"
"ReactiveAdapterRegistry.java:36"$0$0$0$2$28$"import rx.RxReactiveStreams;"
"ReactiveAdapterRegistry.java:37"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:38"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ReactiveAdapterRegistry.java:39"$0$0$0$2$43$"import org.springframework.util.ClassUtils;"
"ReactiveAdapterRegistry.java:40"$0$0$0$2$59$"import org.springframework.util.ConcurrentReferenceHashMap;"
"ReactiveAdapterRegistry.java:41"$0$0$0$2$48$"import org.springframework.util.ReflectionUtils;"
"ReactiveAdapterRegistry.java:42"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:43"$0$0$0$1$3$"/**"
"ReactiveAdapterRegistry.java:44"$0$0$0$12$77$" * A registry of adapters to adapt Reactive Streams {@link Publisher} to/from"
"ReactiveAdapterRegistry.java:45"$0$0$0$9$73$" * various async/reactive types such as {@code CompletableFuture}, RxJava"
"ReactiveAdapterRegistry.java:46"$0$0$0$5$34$" * {@code Observable}, and others."
"ReactiveAdapterRegistry.java:47"$0$0$0$1$2$" *"
"ReactiveAdapterRegistry.java:48"$0$0$0$10$78$" * <p>By default, depending on classpath availability, adapters are registered"
"ReactiveAdapterRegistry.java:49"$0$0$0$12$76$" * for Reactor, RxJava 1, RxJava 2 types, {@link CompletableFuture}, Java 9+"
"ReactiveAdapterRegistry.java:50"$0$0$0$11$82$" * {@code Flow.Publisher} and Kotlin Coroutines {@code Deferred} and {@code Flow}."
"ReactiveAdapterRegistry.java:51"$0$0$0$1$2$" *"
"ReactiveAdapterRegistry.java:52"$0$0$0$4$28$" * @author Rossen Stoyanchev"
"ReactiveAdapterRegistry.java:53"$0$0$0$4$28$" * @author Sebastien Deleuze"
"ReactiveAdapterRegistry.java:54"$0$0$0$3$13$" * @since 5.0"
"ReactiveAdapterRegistry.java:55"$0$0$0$1$3$" */"
"ReactiveAdapterRegistry.java:56"$0$0$0$4$38$"public class ReactiveAdapterRegistry {"
"ReactiveAdapterRegistry.java:57"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:58"$0$0$0$1$10$"	@Nullable"
"ReactiveAdapterRegistry.java:59"$0$0$0$5$64$"	private static volatile ReactiveAdapterRegistry sharedInstance;"
"ReactiveAdapterRegistry.java:60"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:61"$0$0$0$4$38$"	private final boolean reactorPresent;"
"ReactiveAdapterRegistry.java:62"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:63"$0$0$0$7$66$"	private final List<ReactiveAdapter> adapters = new ArrayList<>();"
"ReactiveAdapterRegistry.java:64"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:65"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:66"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:67"$0$0$0$8$57$"	 * Create a registry and auto-register default adapters."
"ReactiveAdapterRegistry.java:68"$1$0$0$3$29$"	 * @see #getSharedInstance()"
"ReactiveAdapterRegistry.java:69"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:70"$0$0$0$3$35$"	public ReactiveAdapterRegistry() {"
"ReactiveAdapterRegistry.java:71"$1$0$0$4$75$"		ClassLoader classLoader = ReactiveAdapterRegistry.class.getClassLoader();"
"ReactiveAdapterRegistry.java:72"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:73"$0$0$1$2$12$"		// Reactor"
"ReactiveAdapterRegistry.java:74"$0$0$0$4$36$"		boolean reactorRegistered = false;"
"ReactiveAdapterRegistry.java:75"$0$0$0$4$73$"		if (ClassUtils.isPresent(""reactor.core.publisher.Flux"", classLoader)) {"
"ReactiveAdapterRegistry.java:76"$0$0$0$2$49$"			new ReactorRegistrar().registerAdapters(this);"
"ReactiveAdapterRegistry.java:77"$0$0$0$3$28$"			reactorRegistered = true;"
"ReactiveAdapterRegistry.java:78"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:79"$0$0$0$3$42$"		this.reactorPresent = reactorRegistered;"
"ReactiveAdapterRegistry.java:80"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:81"$0$0$1$2$12$"		// RxJava1"
"ReactiveAdapterRegistry.java:82"$0$0$0$4$59$"		if (ClassUtils.isPresent(""rx.Observable"", classLoader) &&"
"ReactiveAdapterRegistry.java:83"$0$0$0$3$64$"				ClassUtils.isPresent(""rx.RxReactiveStreams"", classLoader)) {"
"ReactiveAdapterRegistry.java:84"$0$0$0$2$49$"			new RxJava1Registrar().registerAdapters(this);"
"ReactiveAdapterRegistry.java:85"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:86"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:87"$0$0$1$2$12$"		// RxJava2"
"ReactiveAdapterRegistry.java:88"$0$0$0$4$67$"		if (ClassUtils.isPresent(""io.reactivex.Flowable"", classLoader)) {"
"ReactiveAdapterRegistry.java:89"$0$0$0$2$49$"			new RxJava2Registrar().registerAdapters(this);"
"ReactiveAdapterRegistry.java:90"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:91"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:92"$0$0$1$4$27$"		// Java 9+ Flow.Publisher"
"ReactiveAdapterRegistry.java:93"$0$0$0$4$81$"		if (ClassUtils.isPresent(""java.util.concurrent.Flow.Publisher"", classLoader)) {"
"ReactiveAdapterRegistry.java:94"$0$0$0$2$62$"			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this);"
"ReactiveAdapterRegistry.java:95"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:96"$0$0$1$10$53$"		// If not present, do nothing for the time being..."
"ReactiveAdapterRegistry.java:97"$0$0$1$9$71$"		// We can fall back on ""reactive-streams-flow-bridge"" (once released)"
"ReactiveAdapterRegistry.java:98"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:99"$0$0$1$2$15$"		// Coroutines"
"ReactiveAdapterRegistry.java:100"$0$0$0$6$102$"		if (this.reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.reactor.MonoKt"", classLoader)) {"
"ReactiveAdapterRegistry.java:101"$0$0$0$2$52$"			new CoroutinesRegistrar().registerAdapters(this);"
"ReactiveAdapterRegistry.java:102"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:103"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:104"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:105"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:106"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:107"$0$0$0$15$75$"	 * Whether the registry has any adapters which would be the case if any of"
"ReactiveAdapterRegistry.java:108"$0$0$0$13$73$"	 * Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are"
"ReactiveAdapterRegistry.java:109"$0$0$0$5$29$"	 * present on the classpath."
"ReactiveAdapterRegistry.java:110"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:111"$0$0$0$4$31$"	public boolean hasAdapters() {"
"ReactiveAdapterRegistry.java:112"$0$0$0$2$34$"		return !this.adapters.isEmpty();"
"ReactiveAdapterRegistry.java:113"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:114"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:115"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:116"$0$0$0$14$72$"	 * Register a reactive type along with functions to adapt to and from a"
"ReactiveAdapterRegistry.java:117"$0$0$0$10$74$"	 * Reactive Streams {@link Publisher}. The function arguments assume that"
"ReactiveAdapterRegistry.java:118"$0$0$0$10$61$"	 * their input is neither {@code null} nor {@link Optional}."
"ReactiveAdapterRegistry.java:119"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:120"$0$0$0$4$68$"	public void registerReactiveType(ReactiveTypeDescriptor descriptor,"
"ReactiveAdapterRegistry.java:121"$0$0$0$7$90$"			Function<Object, Publisher<?>> toAdapter, Function<Publisher<?>, Object> fromAdapter) {"
"ReactiveAdapterRegistry.java:122"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:123"$0$0$0$3$28$"		if (this.reactorPresent) {"
"ReactiveAdapterRegistry.java:124"$0$0$0$4$77$"			this.adapters.add(new ReactorAdapter(descriptor, toAdapter, fromAdapter));"
"ReactiveAdapterRegistry.java:125"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:126"$0$0$0$2$8$"		else {"
"ReactiveAdapterRegistry.java:127"$0$0$0$4$78$"			this.adapters.add(new ReactiveAdapter(descriptor, toAdapter, fromAdapter));"
"ReactiveAdapterRegistry.java:128"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:129"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:130"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:131"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:132"$0$0$0$9$48$"	 * Get the adapter for the given reactive type."
"ReactiveAdapterRegistry.java:133"$0$0$0$11$72$"	 * @return the corresponding adapter, or {@code null} if none available"
"ReactiveAdapterRegistry.java:134"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:135"$0$0$0$1$10$"	@Nullable"
"ReactiveAdapterRegistry.java:136"$1$0$0$5$59$"	public ReactiveAdapter getAdapter(Class<?> reactiveType) {"
"ReactiveAdapterRegistry.java:137"$1$0$0$3$40$"		return getAdapter(reactiveType, null);"
"ReactiveAdapterRegistry.java:138"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:139"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:140"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:141"$0$0$0$15$75$"	 * Get the adapter for the given reactive type. Or if a ""source"" object is"
"ReactiveAdapterRegistry.java:142"$0$0$0$8$46$"	 * provided, its actual type is used instead."
"ReactiveAdapterRegistry.java:143"$0$0$0$6$41$"	 * @param reactiveType the reactive type"
"ReactiveAdapterRegistry.java:144"$0$0$0$12$62$"	 * (may be {@code null} if a concrete source object is given)"
"ReactiveAdapterRegistry.java:145"$0$0$0$9$50$"	 * @param source an instance of the reactive type"
"ReactiveAdapterRegistry.java:146"$0$0$0$15$79$"	 * (i.e. to adapt from; may be {@code null} if the reactive type is specified)"
"ReactiveAdapterRegistry.java:147"$0$0$0$11$72$"	 * @return the corresponding adapter, or {@code null} if none available"
"ReactiveAdapterRegistry.java:148"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:149"$0$0$0$1$10$"	@Nullable"
"ReactiveAdapterRegistry.java:150"$1$0$0$9$94$"	public ReactiveAdapter getAdapter(@Nullable Class<?> reactiveType, @Nullable Object source) {"
"ReactiveAdapterRegistry.java:151"$0$0$0$3$32$"		if (this.adapters.isEmpty()) {"
"ReactiveAdapterRegistry.java:152"$0$0$0$2$15$"			return null;"
"ReactiveAdapterRegistry.java:153"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:154"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:155"$0$0$0$11$99$"		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);"
"ReactiveAdapterRegistry.java:156"$1$0$0$10$81$"		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);"
"ReactiveAdapterRegistry.java:157"$0$0$0$5$22$"		if (clazz == null) {"
"ReactiveAdapterRegistry.java:158"$0$0$0$2$15$"			return null;"
"ReactiveAdapterRegistry.java:159"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:160"$0$0$0$6$49$"		for (ReactiveAdapter adapter : this.adapters) {"
"ReactiveAdapterRegistry.java:161"$1$0$0$5$44$"			if (adapter.getReactiveType() == clazz) {"
"ReactiveAdapterRegistry.java:162"$0$0$0$2$19$"				return adapter;"
"ReactiveAdapterRegistry.java:163"$0$0$0$1$4$"			}"
"ReactiveAdapterRegistry.java:164"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:165"$0$0$0$6$49$"		for (ReactiveAdapter adapter : this.adapters) {"
"ReactiveAdapterRegistry.java:166"$1$0$0$3$59$"			if (adapter.getReactiveType().isAssignableFrom(clazz)) {"
"ReactiveAdapterRegistry.java:167"$0$0$0$2$19$"				return adapter;"
"ReactiveAdapterRegistry.java:168"$0$0$0$1$4$"			}"
"ReactiveAdapterRegistry.java:169"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:170"$0$0$0$2$14$"		return null;"
"ReactiveAdapterRegistry.java:171"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:172"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:173"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:174"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:175"$0$0$0$8$69$"	 * Return a shared default {@code ReactiveAdapterRegistry} instance,"
"ReactiveAdapterRegistry.java:176"$0$0$0$6$35$"	 * lazily building it once needed."
"ReactiveAdapterRegistry.java:177"$0$0$0$9$76$"	 * <p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured"
"ReactiveAdapterRegistry.java:178"$0$0$0$7$72$"	 * {@code ReactiveAdapterRegistry} instance for customization purposes."
"ReactiveAdapterRegistry.java:179"$0$0$0$15$73$"	 * This accessor is only meant as a fallback for code paths that want to"
"ReactiveAdapterRegistry.java:180"$0$0$0$11$58$"	 * fall back on a default instance if one isn't provided."
"ReactiveAdapterRegistry.java:181"$0$0$0$7$63$"	 * @return the shared {@code ReactiveAdapterRegistry} instance"
"ReactiveAdapterRegistry.java:182"$0$0$0$3$16$"	 * @since 5.0.2"
"ReactiveAdapterRegistry.java:183"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:184"$1$0$0$5$60$"	public static ReactiveAdapterRegistry getSharedInstance() {"
"ReactiveAdapterRegistry.java:185"$0$0$0$4$52$"		ReactiveAdapterRegistry registry = sharedInstance;"
"ReactiveAdapterRegistry.java:186"$0$0$0$5$25$"		if (registry == null) {"
"ReactiveAdapterRegistry.java:187"$0$0$0$3$49$"			synchronized (ReactiveAdapterRegistry.class) {"
"ReactiveAdapterRegistry.java:188"$0$0$0$3$30$"				registry = sharedInstance;"
"ReactiveAdapterRegistry.java:189"$0$0$0$5$27$"				if (registry == null) {"
"ReactiveAdapterRegistry.java:190"$0$0$0$4$46$"					registry = new ReactiveAdapterRegistry();"
"ReactiveAdapterRegistry.java:191"$0$0$0$3$31$"					sharedInstance = registry;"
"ReactiveAdapterRegistry.java:192"$0$0$0$1$5$"				}"
"ReactiveAdapterRegistry.java:193"$0$0$0$1$4$"			}"
"ReactiveAdapterRegistry.java:194"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:195"$0$0$0$2$18$"		return registry;"
"ReactiveAdapterRegistry.java:196"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:197"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:198"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:199"$0$0$0$5$40$"	private static class ReactorRegistrar {"
"ReactiveAdapterRegistry.java:200"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:201"$0$0$0$4$59$"		void registerAdapters(ReactiveAdapterRegistry registry) {"
"ReactiveAdapterRegistry.java:202"$0$0$1$7$48$"			// Register Flux and Mono before Publisher..."
"ReactiveAdapterRegistry.java:203"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:204"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:205"$0$0$0$2$73$"					ReactiveTypeDescriptor.singleOptionalValue(Mono.class, Mono::empty),"
"ReactiveAdapterRegistry.java:206"$0$0$0$4$32$"					source -> (Mono<?>) source,"
"ReactiveAdapterRegistry.java:207"$0$0$0$1$15$"					Mono::from"
"ReactiveAdapterRegistry.java:208"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:209"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:210"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:211"$0$0$0$2$64$"					ReactiveTypeDescriptor.multiValue(Flux.class, Flux::empty),"
"ReactiveAdapterRegistry.java:212"$0$0$0$4$32$"					source -> (Flux<?>) source,"
"ReactiveAdapterRegistry.java:213"$0$0$0$1$17$"					Flux::from);"
"ReactiveAdapterRegistry.java:214"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:215"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:216"$0$0$0$2$69$"					ReactiveTypeDescriptor.multiValue(Publisher.class, Flux::empty),"
"ReactiveAdapterRegistry.java:217"$0$0$0$4$37$"					source -> (Publisher<?>) source,"
"ReactiveAdapterRegistry.java:218"$0$0$0$3$23$"					source -> source);"
"ReactiveAdapterRegistry.java:219"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:220"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:221"$0$0$0$2$100$"					ReactiveTypeDescriptor.singleOptionalValue(CompletionStage.class, EmptyCompletableFuture::new),"
"ReactiveAdapterRegistry.java:222"$0$0$0$4$69$"					source -> Mono.fromCompletionStage((CompletionStage<?>) source),"
"ReactiveAdapterRegistry.java:223"$0$0$0$3$43$"					source -> Mono.from(source).toFuture()"
"ReactiveAdapterRegistry.java:224"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:225"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:226"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:227"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:228"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:229"$0$0$0$5$40$"	private static class RxJava1Registrar {"
"ReactiveAdapterRegistry.java:230"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:231"$0$0$0$4$59$"		void registerAdapters(ReactiveAdapterRegistry registry) {"
"ReactiveAdapterRegistry.java:232"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:233"$0$0$0$2$82$"					ReactiveTypeDescriptor.multiValue(rx.Observable.class, rx.Observable::empty),"
"ReactiveAdapterRegistry.java:234"$0$0$0$4$72$"					source -> RxReactiveStreams.toPublisher((rx.Observable<?>) source),"
"ReactiveAdapterRegistry.java:235"$0$0$0$1$36$"					RxReactiveStreams::toObservable"
"ReactiveAdapterRegistry.java:236"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:237"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:238"$0$0$0$1$65$"					ReactiveTypeDescriptor.singleRequiredValue(rx.Single.class),"
"ReactiveAdapterRegistry.java:239"$0$0$0$4$68$"					source -> RxReactiveStreams.toPublisher((rx.Single<?>) source),"
"ReactiveAdapterRegistry.java:240"$0$0$0$1$32$"					RxReactiveStreams::toSingle"
"ReactiveAdapterRegistry.java:241"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:242"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:243"$0$0$0$2$84$"					ReactiveTypeDescriptor.noValue(rx.Completable.class, rx.Completable::complete),"
"ReactiveAdapterRegistry.java:244"$0$0$0$4$70$"					source -> RxReactiveStreams.toPublisher((rx.Completable) source),"
"ReactiveAdapterRegistry.java:245"$0$0$0$1$37$"					RxReactiveStreams::toCompletable"
"ReactiveAdapterRegistry.java:246"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:247"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:248"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:249"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:250"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:251"$0$0$0$5$40$"	private static class RxJava2Registrar {"
"ReactiveAdapterRegistry.java:252"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:253"$0$0$0$4$59$"		void registerAdapters(ReactiveAdapterRegistry registry) {"
"ReactiveAdapterRegistry.java:254"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:255"$0$0$0$2$98$"					ReactiveTypeDescriptor.multiValue(io.reactivex.Flowable.class, io.reactivex.Flowable::empty),"
"ReactiveAdapterRegistry.java:256"$0$0$0$4$49$"					source -> (io.reactivex.Flowable<?>) source,"
"ReactiveAdapterRegistry.java:257"$0$0$0$1$28$"					Flowable::fromPublisher"
"ReactiveAdapterRegistry.java:258"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:259"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:260"$0$0$0$2$102$"					ReactiveTypeDescriptor.multiValue(io.reactivex.Observable.class, io.reactivex.Observable::empty),"
"ReactiveAdapterRegistry.java:261"$0$0$0$4$93$"					source -> ((io.reactivex.Observable<?>) source).toFlowable(BackpressureStrategy.BUFFER),"
"ReactiveAdapterRegistry.java:262"$0$0$0$3$73$"					source -> io.reactivex.Flowable.fromPublisher(source).toObservable()"
"ReactiveAdapterRegistry.java:263"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:264"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:265"$0$0$0$1$75$"					ReactiveTypeDescriptor.singleRequiredValue(io.reactivex.Single.class),"
"ReactiveAdapterRegistry.java:266"$0$0$0$4$62$"					source -> ((io.reactivex.Single<?>) source).toFlowable(),"
"ReactiveAdapterRegistry.java:267"$0$0$0$3$100$"					source -> io.reactivex.Flowable.fromPublisher(source).toObservable().singleElement().toSingle()"
"ReactiveAdapterRegistry.java:268"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:269"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:270"$0$0$0$2$101$"					ReactiveTypeDescriptor.singleOptionalValue(io.reactivex.Maybe.class, io.reactivex.Maybe::empty),"
"ReactiveAdapterRegistry.java:271"$0$0$0$4$61$"					source -> ((io.reactivex.Maybe<?>) source).toFlowable(),"
"ReactiveAdapterRegistry.java:272"$0$0$0$3$89$"					source -> io.reactivex.Flowable.fromPublisher(source).toObservable().singleElement()"
"ReactiveAdapterRegistry.java:273"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:274"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:275"$0$0$0$2$104$"					ReactiveTypeDescriptor.noValue(io.reactivex.Completable.class, io.reactivex.Completable::complete),"
"ReactiveAdapterRegistry.java:276"$0$0$0$4$64$"					source -> ((io.reactivex.Completable) source).toFlowable(),"
"ReactiveAdapterRegistry.java:277"$0$0$0$3$90$"					source -> io.reactivex.Flowable.fromPublisher(source).toObservable().ignoreElements()"
"ReactiveAdapterRegistry.java:278"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:279"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:280"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:281"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:282"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:283"$0$0$0$5$54$"	private static class ReactorJdkFlowAdapterRegistrar {"
"ReactiveAdapterRegistry.java:284"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:285"$0$0$0$4$58$"		void registerAdapter(ReactiveAdapterRegistry registry) {"
"ReactiveAdapterRegistry.java:286"$0$0$1$9$56$"			// TODO: remove reflection when build requires JDK 9+"
"ReactiveAdapterRegistry.java:287"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:288"$0$0$0$2$8$"			try {"
"ReactiveAdapterRegistry.java:289"$0$0$0$4$65$"				String publisherName = ""java.util.concurrent.Flow.Publisher"";"
"ReactiveAdapterRegistry.java:290"$2$0$0$5$93$"				Class<?> publisherClass = ClassUtils.forName(publisherName, getClass().getClassLoader());"
"ReactiveAdapterRegistry.java:291"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:292"$0$0$0$4$58$"				String adapterName = ""reactor.adapter.JdkFlowAdapter"";"
"ReactiveAdapterRegistry.java:293"$2$0$0$5$94$"				Class<?> flowAdapterClass = ClassUtils.forName(adapterName,  getClass().getClassLoader());"
"ReactiveAdapterRegistry.java:294"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:295"$1$0$0$5$92$"				Method toFluxMethod = flowAdapterClass.getMethod(""flowPublisherToFlux"", publisherClass);"
"ReactiveAdapterRegistry.java:296"$1$0$0$5$98$"				Method toFlowMethod = flowAdapterClass.getMethod(""publisherToFlowPublisher"", Publisher.class);"
"ReactiveAdapterRegistry.java:297"$0$0$0$6$86$"				Object emptyFlow = ReflectionUtils.invokeMethod(toFlowMethod, null, Flux.empty());"
"ReactiveAdapterRegistry.java:298"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:299"$0$0$0$1$34$"				registry.registerReactiveType("
"ReactiveAdapterRegistry.java:300"$0$0$0$4$73$"						ReactiveTypeDescriptor.multiValue(publisherClass, () -> emptyFlow),"
"ReactiveAdapterRegistry.java:301"$0$0$0$6$88$"						source -> (Publisher<?>) ReflectionUtils.invokeMethod(toFluxMethod, null, source),"
"ReactiveAdapterRegistry.java:302"$0$0$0$5$78$"						publisher -> ReflectionUtils.invokeMethod(toFlowMethod, null, publisher)"
"ReactiveAdapterRegistry.java:303"$0$0$0$1$6$"				);"
"ReactiveAdapterRegistry.java:304"$0$0$0$1$4$"			}"
"ReactiveAdapterRegistry.java:305"$0$0$0$4$25$"			catch (Throwable ex) {"
"ReactiveAdapterRegistry.java:306"$0$0$1$2$13$"				// Ignore"
"ReactiveAdapterRegistry.java:307"$0$0$0$1$4$"			}"
"ReactiveAdapterRegistry.java:308"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:309"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:310"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:311"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:312"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:313"$0$0$0$11$76$"	 * ReactiveAdapter variant that wraps adapted Publishers as {@link Flux} or"
"ReactiveAdapterRegistry.java:314"$0$0$0$7$76$"	 * {@link Mono} depending on {@link ReactiveTypeDescriptor#isMultiValue()}."
"ReactiveAdapterRegistry.java:315"$0$0$0$14$77$"	 * This is important in places where only the stream and stream element type"
"ReactiveAdapterRegistry.java:316"$0$0$0$8$56$"	 * information is available like encoders and decoders."
"ReactiveAdapterRegistry.java:317"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:318"$0$0$0$7$62$"	private static class ReactorAdapter extends ReactiveAdapter {"
"ReactiveAdapterRegistry.java:319"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:320"$0$0$0$2$51$"		ReactorAdapter(ReactiveTypeDescriptor descriptor,"
"ReactiveAdapterRegistry.java:321"$0$0$0$3$55$"				Function<Object, Publisher<?>> toPublisherFunction,"
"ReactiveAdapterRegistry.java:322"$0$0$0$4$59$"				Function<Publisher<?>, Object> fromPublisherFunction) {"
"ReactiveAdapterRegistry.java:323"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:324"$0$0$0$3$65$"			super(descriptor, toPublisherFunction, fromPublisherFunction);"
"ReactiveAdapterRegistry.java:325"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:326"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:327"$0$0$0$1$11$"		@Override"
"ReactiveAdapterRegistry.java:328"$0$0$0$7$64$"		public <T> Publisher<T> toPublisher(@Nullable Object source) {"
"ReactiveAdapterRegistry.java:329"$0$0$0$4$54$"			Publisher<T> publisher = super.toPublisher(source);"
"ReactiveAdapterRegistry.java:330"$0$0$0$6$73$"			return (isMultiValue() ? Flux.from(publisher) : Mono.from(publisher));"
"ReactiveAdapterRegistry.java:331"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:332"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:333"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:334"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:335"$0$0$0$7$78$"	private static class EmptyCompletableFuture<T> extends CompletableFuture<T> {"
"ReactiveAdapterRegistry.java:336"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:337"$0$0$0$2$28$"		EmptyCompletableFuture() {"
"ReactiveAdapterRegistry.java:338"$0$0$0$1$18$"			complete(null);"
"ReactiveAdapterRegistry.java:339"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:340"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:341"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:342"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:343"$0$0$0$5$43$"	private static class CoroutinesRegistrar {"
"ReactiveAdapterRegistry.java:344"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:345"$0$0$0$1$43$"		@SuppressWarnings(""KotlinInternalInJava"")"
"ReactiveAdapterRegistry.java:346"$0$0$0$4$59$"		void registerAdapters(ReactiveAdapterRegistry registry) {"
"ReactiveAdapterRegistry.java:347"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:348"$0$0$0$1$63$"					ReactiveTypeDescriptor.singleOptionalValue(Deferred.class,"
"ReactiveAdapterRegistry.java:349"$0$0$0$3$62$"							() -> CompletableDeferredKt.CompletableDeferred(null)),"
"ReactiveAdapterRegistry.java:350"$0$0$0$4$68$"					source -> CoroutinesUtils.deferredToMono((Deferred<?>) source),"
"ReactiveAdapterRegistry.java:351"$0$0$0$3$66$"					source -> CoroutinesUtils.monoToDeferred(Mono.from(source)));"
"ReactiveAdapterRegistry.java:352"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:353"$0$0$0$1$33$"			registry.registerReactiveType("
"ReactiveAdapterRegistry.java:354"$0$0$0$2$118$"					ReactiveTypeDescriptor.multiValue(kotlinx.coroutines.flow.Flow.class, kotlinx.coroutines.flow.FlowKt::emptyFlow),"
"ReactiveAdapterRegistry.java:355"$0$0$0$4$105$"					source -> kotlinx.coroutines.reactor.ReactorFlowKt.asFlux((kotlinx.coroutines.flow.Flow<?>) source),"
"ReactiveAdapterRegistry.java:356"$0$0$0$1$55$"					kotlinx.coroutines.reactive.ReactiveFlowKt::asFlow"
"ReactiveAdapterRegistry.java:357"$0$0$0$1$5$"			);"
"ReactiveAdapterRegistry.java:358"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:359"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:360"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:361"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:362"$0$0$0$1$4$"	/**"
"ReactiveAdapterRegistry.java:363"$0$0$0$6$58$"	 * {@code BlockHoundIntegration} for spring-core classes."
"ReactiveAdapterRegistry.java:364"$0$0$0$4$32$"	 * <p>Whitelists the following:"
"ReactiveAdapterRegistry.java:365"$0$0$0$2$8$"	 * <ul>"
"ReactiveAdapterRegistry.java:366"$0$0$0$7$81$"	 * <li>Reading class info via {@link LocalVariableTableParameterNameDiscoverer}."
"ReactiveAdapterRegistry.java:367"$0$0$0$5$58$"	 * <li>Locking within {@link ConcurrentReferenceHashMap}."
"ReactiveAdapterRegistry.java:368"$0$0$0$2$9$"	 * </ul>"
"ReactiveAdapterRegistry.java:369"$0$0$0$3$16$"	 * @since 5.2.4"
"ReactiveAdapterRegistry.java:370"$0$0$0$1$4$"	 */"
"ReactiveAdapterRegistry.java:371"$0$0$0$7$87$"	public static class SpringCoreBlockHoundIntegration implements BlockHoundIntegration {"
"ReactiveAdapterRegistry.java:372"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:373"$0$0$0$1$11$"		@Override"
"ReactiveAdapterRegistry.java:374"$0$0$0$5$51$"		public void applyTo(BlockHound.Builder builder) {"
"ReactiveAdapterRegistry.java:375"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:376"$0$0$1$13$99$"			// Avoid hard references potentially anywhere in spring-core (no need for structural dependency)"
"ReactiveAdapterRegistry.java:377"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:378"$0$0$0$1$36$"			builder.allowBlockingCallsInside("
"ReactiveAdapterRegistry.java:379"$0$0$0$2$91$"					""org.springframework.core.LocalVariableTableParameterNameDiscoverer"", ""inspectClass"");"
"ReactiveAdapterRegistry.java:380"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:381"$0$0$0$4$84$"			String className = ""org.springframework.util.ConcurrentReferenceHashMap$Segment"";"
"ReactiveAdapterRegistry.java:382"$0$0$0$2$57$"			builder.allowBlockingCallsInside(className, ""doTask"");"
"ReactiveAdapterRegistry.java:383"$0$0$0$2$56$"			builder.allowBlockingCallsInside(className, ""clear"");"
"ReactiveAdapterRegistry.java:384"$0$0$0$2$62$"			builder.allowBlockingCallsInside(className, ""restructure"");"
"ReactiveAdapterRegistry.java:385"$0$0$0$1$3$"		}"
"ReactiveAdapterRegistry.java:386"$0$0$0$1$2$"	}"
"ReactiveAdapterRegistry.java:387"$0$0$0$0$0$""
"ReactiveAdapterRegistry.java:388"$0$0$0$1$1$"}"
"ResourceUtils.java:1"$0$0$0$1$2$"/*"
"ResourceUtils.java:2"$0$0$0$8$54$" * Copyright 2002-2018 the original author or authors."
"ResourceUtils.java:3"$0$0$0$1$2$" *"
"ResourceUtils.java:4"$0$0$0$10$66$" * Licensed under the Apache License, Version 2.0 (the ""License"");"
"ResourceUtils.java:5"$0$0$0$13$67$" * you may not use this file except in compliance with the License."
"ResourceUtils.java:6"$0$0$0$10$42$" * You may obtain a copy of the License at"
"ResourceUtils.java:7"$0$0$0$1$2$" *"
"ResourceUtils.java:8"$0$0$0$2$51$" *      https://www.apache.org/licenses/LICENSE-2.0"
"ResourceUtils.java:9"$0$0$0$1$2$" *"
"ResourceUtils.java:10"$0$0$0$12$70$" * Unless required by applicable law or agreed to in writing, software"
"ResourceUtils.java:11"$0$0$0$12$68$" * distributed under the License is distributed on an ""AS IS"" BASIS,"
"ResourceUtils.java:12"$0$0$0$12$75$" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
"ResourceUtils.java:13"$0$0$0$11$70$" * See the License for the specific language governing permissions and"
"ResourceUtils.java:14"$0$0$0$5$33$" * limitations under the License."
"ResourceUtils.java:15"$0$0$0$1$3$" */"
"ResourceUtils.java:16"$0$0$0$0$0$""
"ResourceUtils.java:17"$0$0$0$2$33$"package org.springframework.util;"
"ResourceUtils.java:18"$0$0$0$0$0$""
"ResourceUtils.java:19"$0$0$0$2$20$"import java.io.File;"
"ResourceUtils.java:20"$0$0$0$2$37$"import java.io.FileNotFoundException;"
"ResourceUtils.java:21"$0$0$0$2$38$"import java.net.MalformedURLException;"
"ResourceUtils.java:22"$0$0$0$2$20$"import java.net.URI;"
"ResourceUtils.java:23"$0$0$0$2$35$"import java.net.URISyntaxException;"
"ResourceUtils.java:24"$0$0$0$2$20$"import java.net.URL;"
"ResourceUtils.java:25"$0$0$0$2$30$"import java.net.URLConnection;"
"ResourceUtils.java:26"$0$0$0$0$0$""
"ResourceUtils.java:27"$0$0$0$2$41$"import org.springframework.lang.Nullable;"
"ResourceUtils.java:28"$0$0$0$0$0$""
"ResourceUtils.java:29"$0$0$0$1$3$"/**"
"ResourceUtils.java:30"$0$0$0$11$67$" * Utility methods for resolving resource locations to files in the"
"ResourceUtils.java:31"$0$0$0$10$61$" * file system. Mainly for internal use within the framework."
"ResourceUtils.java:32"$0$0$0$1$2$" *"
"ResourceUtils.java:33"$0$0$0$10$70$" * <p>Consider using Spring's Resource abstraction in the core package"
"ResourceUtils.java:34"$0$0$0$12$64$" * for handling all kinds of file resources in a uniform manner."
"ResourceUtils.java:35"$1$0$0$5$77$" * {@link org.springframework.core.io.ResourceLoader}'s {@code getResource()}"
"ResourceUtils.java:36"$0$0$0$10$84$" * method can resolve any location to a {@link org.springframework.core.io.Resource}"
"ResourceUtils.java:37"$0$0$0$14$75$" * object, which in turn allows one to obtain a {@code java.io.File} in the"
"ResourceUtils.java:38"$1$0$0$8$52$" * file system through its {@code getFile()} method."
"ResourceUtils.java:39"$0$0$0$1$2$" *"
"ResourceUtils.java:40"$0$0$0$4$26$" * @author Juergen Hoeller"
"ResourceUtils.java:41"$0$0$0$3$15$" * @since 1.1.5"
"ResourceUtils.java:42"$0$0$0$3$44$" * @see org.springframework.core.io.Resource"
"ResourceUtils.java:43"$0$0$0$3$53$" * @see org.springframework.core.io.ClassPathResource"
"ResourceUtils.java:44"$0$0$0$3$54$" * @see org.springframework.core.io.FileSystemResource"
"ResourceUtils.java:45"$0$0$0$3$47$" * @see org.springframework.core.io.UrlResource"
"ResourceUtils.java:46"$0$0$0$3$50$" * @see org.springframework.core.io.ResourceLoader"
"ResourceUtils.java:47"$0$0$0$1$3$" */"
"ResourceUtils.java:48"$0$0$0$5$37$"public abstract class ResourceUtils {"
"ResourceUtils.java:49"$0$0$0$0$0$""
"ResourceUtils.java:50"$0$0$0$12$72$"	/** Pseudo URL prefix for loading from the class path: ""classpath:"". */"
"ResourceUtils.java:51"$0$0$0$7$64$"	public static final String CLASSPATH_URL_PREFIX = ""classpath:"";"
"ResourceUtils.java:52"$0$0$0$0$0$""
"ResourceUtils.java:53"$0$0$0$11$61$"	/** URL prefix for loading from the file system: ""file:"". */"
"ResourceUtils.java:54"$0$0$0$7$54$"	public static final String FILE_URL_PREFIX = ""file:"";"
"ResourceUtils.java:55"$0$0$0$0$0$""
"ResourceUtils.java:56"$0$0$0$11$55$"	/** URL prefix for loading from a jar file: ""jar:"". */"
"ResourceUtils.java:57"$0$0$0$7$52$"	public static final String JAR_URL_PREFIX = ""jar:"";"
"ResourceUtils.java:58"$0$0$0$0$0$""
"ResourceUtils.java:59"$0$0$0$13$65$"	/** URL prefix for loading from a war file on Tomcat: ""war:"". */"
"ResourceUtils.java:60"$0$0$0$7$52$"	public static final String WAR_URL_PREFIX = ""war:"";"
"ResourceUtils.java:61"$0$0$0$0$0$""
"ResourceUtils.java:62"$0$0$0$12$59$"	/** URL protocol for a file in the file system: ""file"". */"
"ResourceUtils.java:63"$0$0$0$7$55$"	public static final String URL_PROTOCOL_FILE = ""file"";"
"ResourceUtils.java:64"$0$0$0$0$0$""
"ResourceUtils.java:65"$0$0$0$12$57$"	/** URL protocol for an entry from a jar file: ""jar"". */"
"ResourceUtils.java:66"$0$0$0$7$53$"	public static final String URL_PROTOCOL_JAR = ""jar"";"
"ResourceUtils.java:67"$0$0$0$0$0$""
"ResourceUtils.java:68"$0$0$0$12$57$"	/** URL protocol for an entry from a war file: ""war"". */"
"ResourceUtils.java:69"$0$0$0$7$53$"	public static final String URL_PROTOCOL_WAR = ""war"";"
"ResourceUtils.java:70"$0$0$0$0$0$""
"ResourceUtils.java:71"$0$0$0$12$57$"	/** URL protocol for an entry from a zip file: ""zip"". */"
"ResourceUtils.java:72"$0$0$0$7$53$"	public static final String URL_PROTOCOL_ZIP = ""zip"";"
"ResourceUtils.java:73"$0$0$0$0$0$""
"ResourceUtils.java:74"$0$0$0$13$69$"	/** URL protocol for an entry from a WebSphere jar file: ""wsjar"". */"
"ResourceUtils.java:75"$0$0$0$7$57$"	public static final String URL_PROTOCOL_WSJAR = ""wsjar"";"
"ResourceUtils.java:76"$0$0$0$0$0$""
"ResourceUtils.java:77"$0$0$0$13$66$"	/** URL protocol for an entry from a JBoss jar file: ""vfszip"". */"
"ResourceUtils.java:78"$0$0$0$7$59$"	public static final String URL_PROTOCOL_VFSZIP = ""vfszip"";"
"ResourceUtils.java:79"$0$0$0$0$0$""
"ResourceUtils.java:80"$0$0$0$11$65$"	/** URL protocol for a JBoss file system resource: ""vfsfile"". */"
"ResourceUtils.java:81"$0$0$0$7$61$"	public static final String URL_PROTOCOL_VFSFILE = ""vfsfile"";"
"ResourceUtils.java:82"$0$0$0$0$0$""
"ResourceUtils.java:83"$0$0$0$11$61$"	/** URL protocol for a general JBoss VFS resource: ""vfs"". */"
"ResourceUtils.java:84"$0$0$0$7$53$"	public static final String URL_PROTOCOL_VFS = ""vfs"";"
"ResourceUtils.java:85"$0$0$0$0$0$""
"ResourceUtils.java:86"$0$0$0$10$54$"	/** File extension for a regular jar file: "".jar"". */"
"ResourceUtils.java:87"$0$0$0$7$56$"	public static final String JAR_FILE_EXTENSION = "".jar"";"
"ResourceUtils.java:88"$0$0$0$0$0$""
"ResourceUtils.java:89"$0$0$0$13$69$"	/** Separator between JAR URL and file path within the JAR: ""!/"". */"
"ResourceUtils.java:90"$0$0$0$7$53$"	public static final String JAR_URL_SEPARATOR = ""!/"";"
"ResourceUtils.java:91"$0$0$0$0$0$""
"ResourceUtils.java:92"$0$0$0$12$65$"	/** Special separator between WAR URL and jar part on Tomcat. */"
"ResourceUtils.java:93"$0$0$0$7$53$"	public static final String WAR_URL_SEPARATOR = ""*/"";"
"ResourceUtils.java:94"$0$0$0$0$0$""
"ResourceUtils.java:95"$0$0$0$0$0$""
"ResourceUtils.java:96"$0$0$0$1$4$"	/**"
"ResourceUtils.java:97"$0$0$0$10$56$"	 * Return whether the given resource location is a URL:"
"ResourceUtils.java:98"$0$0$0$11$62$"	 * either a special ""classpath"" pseudo URL or a standard URL."
"ResourceUtils.java:99"$0$0$0$8$56$"	 * @param resourceLocation the location String to check"
"ResourceUtils.java:100"$0$0$0$9$51$"	 * @return whether the location qualifies as a URL"
"ResourceUtils.java:101"$0$0$0$3$30$"	 * @see #CLASSPATH_URL_PREFIX"
"ResourceUtils.java:102"$0$0$0$3$21$"	 * @see java.net.URL"
"ResourceUtils.java:103"$0$0$0$1$4$"	 */"
"ResourceUtils.java:104"$0$0$0$7$65$"	public static boolean isUrl(@Nullable String resourceLocation) {"
"ResourceUtils.java:105"$0$0$0$5$33$"		if (resourceLocation == null) {"
"ResourceUtils.java:106"$0$0$0$2$16$"			return false;"
"ResourceUtils.java:107"$0$0$0$1$3$"		}"
"ResourceUtils.java:108"$0$0$0$3$58$"		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {"
"ResourceUtils.java:109"$0$0$0$2$15$"			return true;"
"ResourceUtils.java:110"$0$0$0$1$3$"		}"
"ResourceUtils.java:111"$0$0$0$2$7$"		try {"
"ResourceUtils.java:112"$0$0$0$2$29$"			new URL(resourceLocation);"
"ResourceUtils.java:113"$0$0$0$2$15$"			return true;"
"ResourceUtils.java:114"$0$0$0$1$3$"		}"
"ResourceUtils.java:115"$0$0$0$4$36$"		catch (MalformedURLException ex) {"
"ResourceUtils.java:116"$0$0$0$2$16$"			return false;"
"ResourceUtils.java:117"$0$0$0$1$3$"		}"
"ResourceUtils.java:118"$0$0$0$1$2$"	}"
"ResourceUtils.java:119"$0$0$0$0$0$""
"ResourceUtils.java:120"$0$0$0$1$4$"	/**"
"ResourceUtils.java:121"$0$0$0$10$66$"	 * Resolve the given resource location to a {@code java.net.URL}."
"ResourceUtils.java:122"$0$0$0$11$69$"	 * <p>Does not check whether the URL actually exists; simply returns"
"ResourceUtils.java:123"$0$0$0$10$56$"	 * the URL that the given location would correspond to."
"ResourceUtils.java:124"$0$0$0$10$70$"	 * @param resourceLocation the resource location to resolve: either a"
"ResourceUtils.java:125"$0$0$0$12$64$"	 * ""classpath:"" pseudo URL, a ""file:"" URL, or a plain file path"
"ResourceUtils.java:126"$0$0$0$6$38$"	 * @return a corresponding URL object"
"ResourceUtils.java:127"$0$0$0$12$77$"	 * @throws FileNotFoundException if the resource cannot be resolved to a URL"
"ResourceUtils.java:128"$0$0$0$1$4$"	 */"
"ResourceUtils.java:129"$1$0$0$8$81$"	public static URL getURL(String resourceLocation) throws FileNotFoundException {"
"ResourceUtils.java:130"$0$0$0$7$73$"		Assert.notNull(resourceLocation, ""Resource location must not be null"");"
"ResourceUtils.java:131"$0$0$0$3$58$"		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {"
"ResourceUtils.java:132"$0$0$0$4$75$"			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length());"
"ResourceUtils.java:133"$1$0$0$4$55$"			ClassLoader cl = ClassUtils.getDefaultClassLoader();"
"ResourceUtils.java:134"$2$0$0$10$87$"			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path));"
"ResourceUtils.java:135"$0$0$0$5$21$"			if (url == null) {"
"ResourceUtils.java:136"$0$0$0$11$62$"				String description = ""class path resource ["" + path + ""]"";"
"ResourceUtils.java:137"$0$0$0$4$49$"				throw new FileNotFoundException(description +"
"ResourceUtils.java:138"$0$0$0$11$62$"						"" cannot be resolved to URL because it does not exist"");"
"ResourceUtils.java:139"$0$0$0$1$4$"			}"
"ResourceUtils.java:140"$0$0$0$2$14$"			return url;"
"ResourceUtils.java:141"$0$0$0$1$3$"		}"
"ResourceUtils.java:142"$0$0$0$2$7$"		try {"
"ResourceUtils.java:143"$0$0$1$3$13$"			// try URL"
"ResourceUtils.java:144"$0$0$0$3$36$"			return new URL(resourceLocation);"
"ResourceUtils.java:145"$0$0$0$1$3$"		}"
"ResourceUtils.java:146"$0$0$0$4$36$"		catch (MalformedURLException ex) {"
"ResourceUtils.java:147"$0$0$1$8$34$"			// no URL -> treat as file path"
"ResourceUtils.java:148"$0$0$0$2$8$"			try {"
"ResourceUtils.java:149"$0$0$0$3$54$"				return new File(resourceLocation).toURI().toURL();"
"ResourceUtils.java:150"$0$0$0$1$4$"			}"
"ResourceUtils.java:151"$0$0$0$4$38$"			catch (MalformedURLException ex2) {"
"ResourceUtils.java:152"$0$0$0$8$78$"				throw new FileNotFoundException(""Resource location ["" + resourceLocation +"
"ResourceUtils.java:153"$0$0$0$10$56$"						""] is neither a URL not a well-formed file path"");"
"ResourceUtils.java:154"$0$0$0$1$4$"			}"
"ResourceUtils.java:155"$0$0$0$1$3$"		}"
"ResourceUtils.java:156"$0$0$0$1$2$"	}"
"ResourceUtils.java:157"$0$0$0$0$0$""
"ResourceUtils.java:158"$0$0$0$1$4$"	/**"
"ResourceUtils.java:159"$0$0$0$10$66$"	 * Resolve the given resource location to a {@code java.io.File},"
"ResourceUtils.java:160"$0$0$0$9$38$"	 * i.e. to a file in the file system."
"ResourceUtils.java:161"$0$0$0$11$70$"	 * <p>Does not check whether the file actually exists; simply returns"
"ResourceUtils.java:162"$0$0$0$10$57$"	 * the File that the given location would correspond to."
"ResourceUtils.java:163"$0$0$0$10$70$"	 * @param resourceLocation the resource location to resolve: either a"
"ResourceUtils.java:164"$0$0$0$12$64$"	 * ""classpath:"" pseudo URL, a ""file:"" URL, or a plain file path"
"ResourceUtils.java:165"$0$0$0$6$39$"	 * @return a corresponding File object"
"ResourceUtils.java:166"$0$0$0$10$71$"	 * @throws FileNotFoundException if the resource cannot be resolved to"
"ResourceUtils.java:167"$0$0$0$7$29$"	 * a file in the file system"
"ResourceUtils.java:168"$0$0$0$1$4$"	 */"
"ResourceUtils.java:169"$1$0$0$8$83$"	public static File getFile(String resourceLocation) throws FileNotFoundException {"
"ResourceUtils.java:170"$0$0$0$7$73$"		Assert.notNull(resourceLocation, ""Resource location must not be null"");"
"ResourceUtils.java:171"$0$0$0$3$58$"		if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {"
"ResourceUtils.java:172"$0$0$0$4$75$"			String path = resourceLocation.substring(CLASSPATH_URL_PREFIX.length());"
"ResourceUtils.java:173"$0$0$0$11$61$"			String description = ""class path resource ["" + path + ""]"";"
"ResourceUtils.java:174"$1$0$0$4$55$"			ClassLoader cl = ClassUtils.getDefaultClassLoader();"
"ResourceUtils.java:175"$2$0$0$10$87$"			URL url = (cl != null ? cl.getResource(path) : ClassLoader.getSystemResource(path));"
"ResourceUtils.java:176"$0$0$0$5$21$"			if (url == null) {"
"ResourceUtils.java:177"$0$0$0$4$49$"				throw new FileNotFoundException(description +"
"ResourceUtils.java:178"$0$0$0$13$77$"						"" cannot be resolved to absolute file path because it does not exist"");"
"ResourceUtils.java:179"$0$0$0$1$4$"			}"
"ResourceUtils.java:180"$1$0$0$3$36$"			return getFile(url, description);"
"ResourceUtils.java:181"$0$0$0$1$3$"		}"
"ResourceUtils.java:182"$0$0$0$2$7$"		try {"
"ResourceUtils.java:183"$0$0$1$3$13$"			// try URL"
"ResourceUtils.java:184"$1$0$0$3$45$"			return getFile(new URL(resourceLocation));"
"ResourceUtils.java:185"$0$0$0$1$3$"		}"
"ResourceUtils.java:186"$0$0$0$4$36$"		catch (MalformedURLException ex) {"
"ResourceUtils.java:187"$0$0$1$8$34$"			// no URL -> treat as file path"
"ResourceUtils.java:188"$0$0$0$3$37$"			return new File(resourceLocation);"
"ResourceUtils.java:189"$0$0$0$1$3$"		}"
"ResourceUtils.java:190"$0$0$0$1$2$"	}"
"ResourceUtils.java:191"$0$0$0$0$0$""
"ResourceUtils.java:192"$0$0$0$1$4$"	/**"
"ResourceUtils.java:193"$0$0$0$10$61$"	 * Resolve the given resource URL to a {@code java.io.File},"
"ResourceUtils.java:194"$0$0$0$9$38$"	 * i.e. to a file in the file system."
"ResourceUtils.java:195"$0$0$0$8$50$"	 * @param resourceUrl the resource URL to resolve"
"ResourceUtils.java:196"$0$0$0$6$39$"	 * @return a corresponding File object"
"ResourceUtils.java:197"$0$0$0$10$66$"	 * @throws FileNotFoundException if the URL cannot be resolved to"
"ResourceUtils.java:198"$0$0$0$7$29$"	 * a file in the file system"
"ResourceUtils.java:199"$0$0$0$1$4$"	 */"
"ResourceUtils.java:200"$1$0$0$8$75$"	public static File getFile(URL resourceUrl) throws FileNotFoundException {"
"ResourceUtils.java:201"$1$0$0$3$37$"		return getFile(resourceUrl, ""URL"");"
"ResourceUtils.java:202"$0$0$0$1$2$"	}"
"ResourceUtils.java:203"$0$0$0$0$0$""
"ResourceUtils.java:204"$0$0$0$1$4$"	/**"
"ResourceUtils.java:205"$0$0$0$10$61$"	 * Resolve the given resource URL to a {@code java.io.File},"
"ResourceUtils.java:206"$0$0$0$9$38$"	 * i.e. to a file in the file system."
"ResourceUtils.java:207"$0$0$0$8$50$"	 * @param resourceUrl the resource URL to resolve"
"ResourceUtils.java:208"$0$0$0$10$66$"	 * @param description a description of the original resource that"
"ResourceUtils.java:209"$0$0$0$12$64$"	 * the URL was created for (for example, a class path location)"
"ResourceUtils.java:210"$0$0$0$6$39$"	 * @return a corresponding File object"
"ResourceUtils.java:211"$0$0$0$10$66$"	 * @throws FileNotFoundException if the URL cannot be resolved to"
"ResourceUtils.java:212"$0$0$0$7$29$"	 * a file in the file system"
"ResourceUtils.java:213"$0$0$0$1$4$"	 */"
"ResourceUtils.java:214"$1$0$0$10$95$"	public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {"
"ResourceUtils.java:215"$0$0$0$7$63$"		Assert.notNull(resourceUrl, ""Resource URL must not be null"");"
"ResourceUtils.java:216"$1$0$0$3$61$"		if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {"
"ResourceUtils.java:217"$0$0$0$3$35$"			throw new FileNotFoundException("
"ResourceUtils.java:218"$0$0$0$12$65$"					description + "" cannot be resolved to absolute file path "" +"
"ResourceUtils.java:219"$0$0$0$12$70$"					""because it does not reside in the file system: "" + resourceUrl);"
"ResourceUtils.java:220"$0$0$0$1$3$"		}"
"ResourceUtils.java:221"$0$0$0$2$7$"		try {"
"ResourceUtils.java:222"$1$0$0$3$63$"			return new File(toURI(resourceUrl).getSchemeSpecificPart());"
"ResourceUtils.java:223"$0$0$0$1$3$"		}"
"ResourceUtils.java:224"$0$0$0$4$33$"		catch (URISyntaxException ex) {"
"ResourceUtils.java:225"$0$0$1$13$76$"			// Fallback for URLs that are not valid URIs (should hardly ever happen)."
"ResourceUtils.java:226"$1$0$0$3$42$"			return new File(resourceUrl.getFile());"
"ResourceUtils.java:227"$0$0$0$1$3$"		}"
"ResourceUtils.java:228"$0$0$0$1$2$"	}"
"ResourceUtils.java:229"$0$0$0$0$0$""
"ResourceUtils.java:230"$0$0$0$1$4$"	/**"
"ResourceUtils.java:231"$0$0$0$10$61$"	 * Resolve the given resource URI to a {@code java.io.File},"
"ResourceUtils.java:232"$0$0$0$9$38$"	 * i.e. to a file in the file system."
"ResourceUtils.java:233"$0$0$0$8$50$"	 * @param resourceUri the resource URI to resolve"
"ResourceUtils.java:234"$0$0$0$6$39$"	 * @return a corresponding File object"
"ResourceUtils.java:235"$0$0$0$10$66$"	 * @throws FileNotFoundException if the URL cannot be resolved to"
"ResourceUtils.java:236"$0$0$0$7$29$"	 * a file in the file system"
"ResourceUtils.java:237"$0$0$0$3$14$"	 * @since 2.5"
"ResourceUtils.java:238"$0$0$0$1$4$"	 */"
"ResourceUtils.java:239"$1$0$0$8$75$"	public static File getFile(URI resourceUri) throws FileNotFoundException {"
"ResourceUtils.java:240"$1$0$0$3$37$"		return getFile(resourceUri, ""URI"");"
"ResourceUtils.java:241"$0$0$0$1$2$"	}"
"ResourceUtils.java:242"$0$0$0$0$0$""
"ResourceUtils.java:243"$0$0$0$1$4$"	/**"
"ResourceUtils.java:244"$0$0$0$10$61$"	 * Resolve the given resource URI to a {@code java.io.File},"
"ResourceUtils.java:245"$0$0$0$9$38$"	 * i.e. to a file in the file system."
"ResourceUtils.java:246"$0$0$0$8$50$"	 * @param resourceUri the resource URI to resolve"
"ResourceUtils.java:247"$0$0$0$10$66$"	 * @param description a description of the original resource that"
"ResourceUtils.java:248"$0$0$0$12$64$"	 * the URI was created for (for example, a class path location)"
"ResourceUtils.java:249"$0$0$0$6$39$"	 * @return a corresponding File object"
"ResourceUtils.java:250"$0$0$0$10$66$"	 * @throws FileNotFoundException if the URL cannot be resolved to"
"ResourceUtils.java:251"$0$0$0$7$29$"	 * a file in the file system"
"ResourceUtils.java:252"$0$0$0$3$14$"	 * @since 2.5"
"ResourceUtils.java:253"$0$0$0$1$4$"	 */"
"ResourceUtils.java:254"$1$0$0$10$95$"	public static File getFile(URI resourceUri, String description) throws FileNotFoundException {"
"ResourceUtils.java:255"$0$0$0$7$63$"		Assert.notNull(resourceUri, ""Resource URI must not be null"");"
"ResourceUtils.java:256"$1$0$0$3$59$"		if (!URL_PROTOCOL_FILE.equals(resourceUri.getScheme())) {"
"ResourceUtils.java:257"$0$0$0$3$35$"			throw new FileNotFoundException("
"ResourceUtils.java:258"$0$0$0$12$65$"					description + "" cannot be resolved to absolute file path "" +"
"ResourceUtils.java:259"$0$0$0$12$70$"					""because it does not reside in the file system: "" + resourceUri);"
"ResourceUtils.java:260"$0$0$0$1$3$"		}"
"ResourceUtils.java:261"$1$0$0$3$55$"		return new File(resourceUri.getSchemeSpecificPart());"
"ResourceUtils.java:262"$0$0$0$1$2$"	}"
"ResourceUtils.java:263"$0$0$0$0$0$""
"ResourceUtils.java:264"$0$0$0$1$4$"	/**"
"ResourceUtils.java:265"$0$0$0$14$76$"	 * Determine whether the given URL points to a resource in the file system,"
"ResourceUtils.java:266"$0$0$0$8$49$"	 * i.e. has protocol ""file"", ""vfsfile"" or ""vfs""."
"ResourceUtils.java:267"$0$0$0$7$31$"	 * @param url the URL to check"
"ResourceUtils.java:268"$0$0$0$13$68$"	 * @return whether the URL has been identified as a file system URL"
"ResourceUtils.java:269"$0$0$0$1$4$"	 */"
"ResourceUtils.java:270"$0$0$0$6$43$"	public static boolean isFileURL(URL url) {"
"ResourceUtils.java:271"$1$0$0$4$38$"		String protocol = url.getProtocol();"
"ResourceUtils.java:272"$0$0$0$5$88$"		return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||"
"ResourceUtils.java:273"$0$0$0$1$39$"				URL_PROTOCOL_VFS.equals(protocol));"
"ResourceUtils.java:274"$0$0$0$1$2$"	}"
"ResourceUtils.java:275"$0$0$0$0$0$""
"ResourceUtils.java:276"$0$0$0$1$4$"	/**"
"ResourceUtils.java:277"$0$0$0$14$71$"	 * Determine whether the given URL points to a resource in a jar file."
"ResourceUtils.java:278"$0$0$0$10$63$"	 * i.e. has protocol ""jar"", ""war, """"zip"", ""vfszip"" or ""wsjar""."
"ResourceUtils.java:279"$0$0$0$7$31$"	 * @param url the URL to check"
"ResourceUtils.java:280"$0$0$0$12$60$"	 * @return whether the URL has been identified as a JAR URL"
"ResourceUtils.java:281"$0$0$0$1$4$"	 */"
"ResourceUtils.java:282"$0$0$0$6$42$"	public static boolean isJarURL(URL url) {"
"ResourceUtils.java:283"$1$0$0$4$38$"		String protocol = url.getProtocol();"
"ResourceUtils.java:284"$0$0$0$5$83$"		return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_WAR.equals(protocol) ||"
"ResourceUtils.java:285"$0$0$0$4$80$"				URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||"
"ResourceUtils.java:286"$0$0$0$1$41$"				URL_PROTOCOL_WSJAR.equals(protocol));"
"ResourceUtils.java:287"$0$0$0$1$2$"	}"
"ResourceUtils.java:288"$0$0$0$0$0$""
"ResourceUtils.java:289"$0$0$0$1$4$"	/**"
"ResourceUtils.java:290"$0$0$0$12$64$"	 * Determine whether the given URL points to a jar file itself,"
"ResourceUtils.java:291"$0$0$0$12$68$"	 * that is, has protocol ""file"" and ends with the "".jar"" extension."
"ResourceUtils.java:292"$0$0$0$7$31$"	 * @param url the URL to check"
"ResourceUtils.java:293"$0$0$0$13$65$"	 * @return whether the URL has been identified as a JAR file URL"
"ResourceUtils.java:294"$0$0$0$3$14$"	 * @since 4.1"
"ResourceUtils.java:295"$0$0$0$1$4$"	 */"
"ResourceUtils.java:296"$0$0$0$6$46$"	public static boolean isJarFileURL(URL url) {"
"ResourceUtils.java:297"$1$0$0$3$56$"		return (URL_PROTOCOL_FILE.equals(url.getProtocol()) &&"
"ResourceUtils.java:298"$1$0$0$1$62$"				url.getPath().toLowerCase().endsWith(JAR_FILE_EXTENSION));"
"ResourceUtils.java:299"$0$0$0$1$2$"	}"
"ResourceUtils.java:300"$0$0$0$0$0$""
"ResourceUtils.java:301"$0$0$0$1$4$"	/**"
"ResourceUtils.java:302"$0$0$0$13$62$"	 * Extract the URL for the actual jar file from the given URL"
"ResourceUtils.java:303"$0$0$0$17$74$"	 * (which may point to a resource in a jar file or to a jar file itself)."
"ResourceUtils.java:304"$0$0$0$6$34$"	 * @param jarUrl the original URL"
"ResourceUtils.java:305"$0$0$0$9$43$"	 * @return the URL for the actual jar file"
"ResourceUtils.java:306"$0$0$0$12$77$"	 * @throws MalformedURLException if no valid jar file URL could be extracted"
"ResourceUtils.java:307"$0$0$0$1$4$"	 */"
"ResourceUtils.java:308"$0$0$0$8$79$"	public static URL extractJarFileURL(URL jarUrl) throws MalformedURLException {"
"ResourceUtils.java:309"$1$0$0$4$36$"		String urlFile = jarUrl.getFile();"
"ResourceUtils.java:310"$0$0$0$4$58$"		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR);"
"ResourceUtils.java:311"$0$0$0$5$29$"		if (separatorIndex != -1) {"
"ResourceUtils.java:312"$0$0$0$5$57$"			String jarFile = urlFile.substring(0, separatorIndex);"
"ResourceUtils.java:313"$0$0$0$2$8$"			try {"
"ResourceUtils.java:314"$0$0$0$3$28$"				return new URL(jarFile);"
"ResourceUtils.java:315"$0$0$0$1$4$"			}"
"ResourceUtils.java:316"$0$0$0$4$37$"			catch (MalformedURLException ex) {"
"ResourceUtils.java:317"$0$0$1$10$80$"				// Probably no protocol in original jar URL, like ""jar:C:/mypath/myjar.jar""."
"ResourceUtils.java:318"$0$0$1$13$75$"				// This usually indicates that the jar file resides in the file system."
"ResourceUtils.java:319"$0$0$0$3$35$"				if (!jarFile.startsWith(""/"")) {"
"ResourceUtils.java:320"$0$0$0$5$29$"					jarFile = ""/"" + jarFile;"
"ResourceUtils.java:321"$0$0$0$1$5$"				}"
"ResourceUtils.java:322"$0$0$0$5$46$"				return new URL(FILE_URL_PREFIX + jarFile);"
"ResourceUtils.java:323"$0$0$0$1$4$"			}"
"ResourceUtils.java:324"$0$0$0$1$3$"		}"
"ResourceUtils.java:325"$0$0$0$2$8$"		else {"
"ResourceUtils.java:326"$0$0$0$2$17$"			return jarUrl;"
"ResourceUtils.java:327"$0$0$0$1$3$"		}"
"ResourceUtils.java:328"$0$0$0$1$2$"	}"
"ResourceUtils.java:329"$0$0$0$0$0$""
"ResourceUtils.java:330"$0$0$0$1$4$"	/**"
"ResourceUtils.java:331"$0$0$0$13$72$"	 * Extract the URL for the outermost archive from the given jar/war URL"
"ResourceUtils.java:332"$0$0$0$17$74$"	 * (which may point to a resource in a jar file or to a jar file itself)."
"ResourceUtils.java:333"$0$0$0$16$75$"	 * <p>In the case of a jar file nested within a war file, this will return"
"ResourceUtils.java:334"$0$0$0$17$78$"	 * a URL to the war file since that is the one resolvable in the file system."
"ResourceUtils.java:335"$0$0$0$6$34$"	 * @param jarUrl the original URL"
"ResourceUtils.java:336"$0$0$0$9$43$"	 * @return the URL for the actual jar file"
"ResourceUtils.java:337"$0$0$0$12$77$"	 * @throws MalformedURLException if no valid jar file URL could be extracted"
"ResourceUtils.java:338"$0$0$0$3$16$"	 * @since 4.1.8"
"ResourceUtils.java:339"$0$0$0$3$32$"	 * @see #extractJarFileURL(URL)"
"ResourceUtils.java:340"$0$0$0$1$4$"	 */"
"ResourceUtils.java:341"$0$0$0$8$79$"	public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {"
"ResourceUtils.java:342"$1$0$0$4$36$"		String urlFile = jarUrl.getFile();"
"ResourceUtils.java:343"$0$0$0$0$0$""
"ResourceUtils.java:344"$0$0$0$4$52$"		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);"
"ResourceUtils.java:345"$0$0$0$5$23$"		if (endIndex != -1) {"
"ResourceUtils.java:346"$0$0$1$3$74$"			// Tomcat's ""war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt"""
"ResourceUtils.java:347"$0$0$0$5$51$"			String warFile = urlFile.substring(0, endIndex);"
"ResourceUtils.java:348"$1$0$0$3$55$"			if (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {"
"ResourceUtils.java:349"$0$0$0$3$28$"				return new URL(warFile);"
"ResourceUtils.java:350"$0$0$0$1$4$"			}"
"ResourceUtils.java:351"$0$0$0$4$52$"			int startIndex = warFile.indexOf(WAR_URL_PREFIX);"
"ResourceUtils.java:352"$0$0$0$5$26$"			if (startIndex != -1) {"
"ResourceUtils.java:353"$0$0$0$5$76$"				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));"
"ResourceUtils.java:354"$0$0$0$1$4$"			}"
"ResourceUtils.java:355"$0$0$0$1$3$"		}"
"ResourceUtils.java:356"$0$0$0$0$0$""
"ResourceUtils.java:357"$0$0$1$3$49$"		// Regular ""jar:file:...myjar.jar!/myentry.txt"""
"ResourceUtils.java:358"$0$0$0$2$35$"		return extractJarFileURL(jarUrl);"
"ResourceUtils.java:359"$0$0$0$1$2$"	}"
"ResourceUtils.java:360"$0$0$0$0$0$""
"ResourceUtils.java:361"$0$0$0$1$4$"	/**"
"ResourceUtils.java:362"$0$0$0$9$44$"	 * Create a URI instance for the given URL,"
"ResourceUtils.java:363"$0$0$0$8$51$"	 * replacing spaces with ""%20"" URI encoding first."
"ResourceUtils.java:364"$0$0$0$11$53$"	 * @param url the URL to convert into a URI instance"
"ResourceUtils.java:365"$0$0$0$5$28$"	 * @return the URI instance"
"ResourceUtils.java:366"$0$0$0$10$60$"	 * @throws URISyntaxException if the URL wasn't a valid URI"
"ResourceUtils.java:367"$0$0$0$3$29$"	 * @see java.net.URL#toURI()"
"ResourceUtils.java:368"$0$0$0$1$4$"	 */"
"ResourceUtils.java:369"$0$0$0$8$61$"	public static URI toURI(URL url) throws URISyntaxException {"
"ResourceUtils.java:370"$0$0$0$2$31$"		return toURI(url.toString());"
"ResourceUtils.java:371"$0$0$0$1$2$"	}"
"ResourceUtils.java:372"$0$0$0$0$0$""
"ResourceUtils.java:373"$0$0$0$1$4$"	/**"
"ResourceUtils.java:374"$0$0$0$10$56$"	 * Create a URI instance for the given location String,"
"ResourceUtils.java:375"$0$0$0$8$51$"	 * replacing spaces with ""%20"" URI encoding first."
"ResourceUtils.java:376"$0$0$0$12$70$"	 * @param location the location String to convert into a URI instance"
"ResourceUtils.java:377"$0$0$0$5$28$"	 * @return the URI instance"
"ResourceUtils.java:378"$0$0$0$10$65$"	 * @throws URISyntaxException if the location wasn't a valid URI"
"ResourceUtils.java:379"$0$0$0$1$4$"	 */"
"ResourceUtils.java:380"$0$0$0$8$69$"	public static URI toURI(String location) throws URISyntaxException {"
"ResourceUtils.java:381"$0$0$0$6$60$"		return new URI(StringUtils.replace(location, "" "", ""%20""));"
"ResourceUtils.java:382"$0$0$0$1$2$"	}"
"ResourceUtils.java:383"$0$0$0$0$0$""
"ResourceUtils.java:384"$0$0$0$1$4$"	/**"
"ResourceUtils.java:385"$0$0$0$9$70$"	 * Set the {@link URLConnection#setUseCaches ""useCaches""} flag on the"
"ResourceUtils.java:386"$0$0$0$9$62$"	 * given connection, preferring {@code false} but leaving the"
"ResourceUtils.java:387"$0$0$0$9$50$"	 * flag at {@code true} for JNLP based resources."
"ResourceUtils.java:388"$0$0$0$10$51$"	 * @param con the URLConnection to set the flag on"
"ResourceUtils.java:389"$0$0$0$1$4$"	 */"
"ResourceUtils.java:390"$0$0$0$6$61$"	public static void useCachesIfNecessary(URLConnection con) {"
"ResourceUtils.java:391"$2$0$0$1$70$"		con.setUseCaches(con.getClass().getSimpleName().startsWith(""JNLP""));"
"ResourceUtils.java:392"$0$0$0$1$2$"	}"
"ResourceUtils.java:393"$0$0$0$0$0$""
"ResourceUtils.java:394"$0$0$0$1$1$"}"
